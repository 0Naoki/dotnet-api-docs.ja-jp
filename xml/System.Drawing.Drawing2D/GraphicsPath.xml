<Type Name="GraphicsPath" FullName="System.Drawing.Drawing2D.GraphicsPath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="010b867d0c50e186006fea90cdbc67fefd8cfd61" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class GraphicsPath : MarshalByRefObject, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPath extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GraphicsPath&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class GraphicsPath sealed : MarshalByRefObject, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="e2281-101">接続された一連の直線と曲線を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e2281-101">Represents a series of connected lines and curves.</span>
      </span>
      <span data-ttu-id="e2281-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e2281-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-103">アプリケーションは、図形の輪郭を描画、図形の内側の塗りつぶしおよびクリッピング領域の作成にパスを使用します。</span><span class="sxs-lookup"><span data-stu-id="e2281-103">Applications use paths to draw outlines of shapes, fill the interiors of shapes, and create clipping regions.</span></span> <span data-ttu-id="e2281-104">グラフィックス エンジンでは、世界の座標空間のパス内の幾何学図形の座標を保持します。</span><span class="sxs-lookup"><span data-stu-id="e2281-104">The graphics engine maintains the coordinates of geometric shapes in a path in world coordinate space.</span></span>  
  
 <span data-ttu-id="e2281-105">パスは、任意の数の数字 (サブパス) で構成可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-105">A path may be composed of any number of figures (subpaths).</span></span> <span data-ttu-id="e2281-106">各図は、接続されている直線と曲線または幾何学模様の図形プリミティブのシーケンスのいずれかで構成されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-106">Each figure is either composed of a sequence of connected lines and curves or a geometric shape primitive.</span></span> <span data-ttu-id="e2281-107">図形の開始点は、接続されている直線と曲線のシーケンスの最初のポイントです。</span><span class="sxs-lookup"><span data-stu-id="e2281-107">The starting point of a figure is the first point in the sequence of connected lines and curves.</span></span> <span data-ttu-id="e2281-108">終了ポイントは、シーケンス内の最後のポイントです。</span><span class="sxs-lookup"><span data-stu-id="e2281-108">The ending point is the last point in the sequence.</span></span> <span data-ttu-id="e2281-109">プリミティブ幾何学図形の開始と終了ポイントは、プリミティブの仕様によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-109">The starting and ending points of a geometric shape primitive are defined by the primitive specification.</span></span>  
  
 <span data-ttu-id="e2281-110">接続された線のシーケンスで構成される図と曲線 (開始と終了点を持つは、一致する可能性があります) は、明示的に閉じられていない限りに開いている図では、です。</span><span class="sxs-lookup"><span data-stu-id="e2281-110">A figure that consists of a sequence of connected lines and curves (whose starting and ending points may be coincident) is an open figure, unless it is closed explicitly.</span></span> <span data-ttu-id="e2281-111">図を使用して明示的に閉じることができます、<xref:System.Drawing.Drawing2D.GraphicsPath.CloseFigure%2A>メソッドの開始点を終点から線を接続することで、現在の図を閉じます。</span><span class="sxs-lookup"><span data-stu-id="e2281-111">A figure can be closed explicitly, by using the <xref:System.Drawing.Drawing2D.GraphicsPath.CloseFigure%2A> method, which closes the current figure by connecting a line from the ending point to the starting point.</span></span> <span data-ttu-id="e2281-112">幾何学図形プリミティブので構成されている図では、閉じた図です。</span><span class="sxs-lookup"><span data-stu-id="e2281-112">A figure that consists of a geometric shape primitive is a closed figure.</span></span>  
  
 <span data-ttu-id="e2281-113">いっぱいになるとクリッピングの目的 (を使用して、パスが表示される場合など、 <xref:System.Drawing.Graphics.FillPath%2A>)、開いているすべての図は、前回の状態に図の最初の点から行を追加で閉じられてです。</span><span class="sxs-lookup"><span data-stu-id="e2281-113">For purposes of filling and clipping (for example, if a path is rendered using <xref:System.Drawing.Graphics.FillPath%2A>), all open figures are closed by adding a line from the figure's first point to its last point.</span></span>  
  
 <span data-ttu-id="e2281-114">パスが作成されるとき、または、図表が閉じて新しい図は、暗黙的に開始します。</span><span class="sxs-lookup"><span data-stu-id="e2281-114">A new figure is implicitly started when a path is created or when a figure is closed.</span></span> <span data-ttu-id="e2281-115">新しい図は、明示的に作成されたときに、<xref:System.Drawing.Drawing2D.GraphicsPath.StartFigure%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-115">A new figure is explicitly created when the <xref:System.Drawing.Drawing2D.GraphicsPath.StartFigure%2A> method is called.</span></span>  
  
 <span data-ttu-id="e2281-116">パスには、プリミティブ幾何学図形を追加するときに、図形を含む幾何学図形を追加し、新しい図も暗黙的に開始します。</span><span class="sxs-lookup"><span data-stu-id="e2281-116">When a geometric shape primitive is added to a path, it adds a figure containing the geometric shape, and also implicitly starts a new figure.</span></span> <span data-ttu-id="e2281-117">その結果、常に現在の図には、パスです。</span><span class="sxs-lookup"><span data-stu-id="e2281-117">Consequently, there is always a current figure in a path.</span></span> <span data-ttu-id="e2281-118">直線と曲線がパスに追加されると、新しい行と接続された線のシーケンスを形成する曲線と曲線の開始位置への現在の図の終点の接続に必要に応じて、暗黙的な行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-118">When lines and curves are added to a path, an implicit line is added as needed to connect the ending point of the current figure to the starting point of the new lines and curves to form a sequence of connected lines and curves.</span></span>  
  
 <span data-ttu-id="e2281-119">図では、開始位置と終了点の間で直線と曲線のセグメントをトレースする方法を説明する方向があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-119">A figure has a direction that describes how line and curve segments are traced between the starting point and the ending point.</span></span> <span data-ttu-id="e2281-120">方向は、直線と曲線、図を追加したり、プリミティブ幾何学図形によって定義された順序で定義されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-120">The direction is defined in the order that lines and curves are added to a figure, or is defined by the geometric shape primitive.</span></span> <span data-ttu-id="e2281-121">方向は、クリップの塗りつぶしのパスの内部の判定に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-121">The direction is used in determining the path interiors for clipping and fill.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-122">
            <see langword="Alternate" /> の <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 列挙体を使用して、<see cref="T:System.Drawing.Drawing2D.FillMode" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-122">Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> class with a <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration of <see langword="Alternate" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPath();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-123">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の <see cref="P:System.Drawing.Drawing2D.GraphicsPath.FillMode" /> 値を使用して、<see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-123">Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> class with a <see cref="P:System.Drawing.Drawing2D.GraphicsPath.FillMode" /> value of <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPath (System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPath(System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="fillMode">
          <span data-ttu-id="e2281-124">この <see cref="T:System.Drawing.Drawing2D.FillMode" /> の内部を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-124">The <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines how the interior of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> is filled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-125">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 列挙体を使用して、<see cref="T:System.Drawing.Drawing2D.FillMode" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-125">Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> class with the specified <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPath (System.Drawing.Point[] pts, byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Point[] pts, unsigned int8[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pts As Point(), types As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPath(cli::array &lt;System::Drawing::Point&gt; ^ pts, cli::array &lt;System::Byte&gt; ^ types);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
        <Parameter Name="types" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="pts">
          <span data-ttu-id="e2281-126">
            <see cref="T:System.Drawing.Point" /> を構成する点の座標を定義する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-126">An array of <see cref="T:System.Drawing.Point" /> structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e2281-127">
            <c>pts</c> 配列内の対応する各点の型を指定する <see cref="T:System.Drawing.Drawing2D.PathPointType" /> 列挙体の要素の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-127">An array of <see cref="T:System.Drawing.Drawing2D.PathPointType" /> enumeration elements that specifies the type of each corresponding point in the <c>pts</c> array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-128">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> と <see cref="T:System.Drawing.Drawing2D.PathPointType" /> を指定して、<see cref="T:System.Drawing.Point" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-128">Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> class with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType" /> and <see cref="T:System.Drawing.Point" /> arrays.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPath (System.Drawing.PointF[] pts, byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.PointF[] pts, unsigned int8[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pts As PointF(), types As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPath(cli::array &lt;System::Drawing::PointF&gt; ^ pts, cli::array &lt;System::Byte&gt; ^ types);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
        <Parameter Name="types" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="pts">
          <span data-ttu-id="e2281-129">
            <see cref="T:System.Drawing.PointF" /> を構成する点の座標を定義する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-129">An array of <see cref="T:System.Drawing.PointF" /> structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e2281-130">
            <c>pts</c> 配列内の対応する各点の型を指定する <see cref="T:System.Drawing.Drawing2D.PathPointType" /> 列挙体の要素の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-130">An array of <see cref="T:System.Drawing.Drawing2D.PathPointType" /> enumeration elements that specifies the type of each corresponding point in the <c>pts</c> array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-131">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 配列と <see cref="T:System.Drawing.Drawing2D.PathPointType" /> 配列を指定して、<see cref="T:System.Drawing.PointF" /> 配列の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-131">Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> array with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType" /> and <see cref="T:System.Drawing.PointF" /> arrays.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPath (System.Drawing.Point[] pts, byte[] types, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Point[] pts, unsigned int8[] types, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPath(cli::array &lt;System::Drawing::Point&gt; ^ pts, cli::array &lt;System::Byte&gt; ^ types, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
        <Parameter Name="types" Type="System.Byte[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pts">
          <span data-ttu-id="e2281-132">
            <see cref="T:System.Drawing.Point" /> を構成する点の座標を定義する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-132">An array of <see cref="T:System.Drawing.Point" /> structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e2281-133">
            <c>pts</c> 配列内の対応する各点の型を指定する <see cref="T:System.Drawing.Drawing2D.PathPointType" /> 列挙体の要素の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-133">An array of <see cref="T:System.Drawing.Drawing2D.PathPointType" /> enumeration elements that specifies the type of each corresponding point in the <c>pts</c> array.</span>
          </span>
        </param>
        <param name="fillMode">
          <span data-ttu-id="e2281-134">
            <see cref="T:System.Drawing.Drawing2D.FillMode" /> の形状の内部を塗りつぶす方法を指定する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-134">A <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that specifies how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> are filled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-135">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />、<see cref="T:System.Drawing.Drawing2D.PathPointType" /> の各配列と指定した <see cref="T:System.Drawing.Point" /> 列挙体要素を使用して、<see cref="T:System.Drawing.Drawing2D.FillMode" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-135">Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> class with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType" /> and <see cref="T:System.Drawing.Point" /> arrays and with the specified <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPath (System.Drawing.PointF[] pts, byte[] types, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.PointF[] pts, unsigned int8[] types, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPath(cli::array &lt;System::Drawing::PointF&gt; ^ pts, cli::array &lt;System::Byte&gt; ^ types, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
        <Parameter Name="types" Type="System.Byte[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pts">
          <span data-ttu-id="e2281-136">
            <see cref="T:System.Drawing.PointF" /> を構成する点の座標を定義する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-136">An array of <see cref="T:System.Drawing.PointF" /> structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="e2281-137">
            <c>pts</c> 配列内の対応する各点の型を指定する <see cref="T:System.Drawing.Drawing2D.PathPointType" /> 列挙体の要素の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-137">An array of <see cref="T:System.Drawing.Drawing2D.PathPointType" /> enumeration elements that specifies the type of each corresponding point in the <c>pts</c> array.</span>
          </span>
        </param>
        <param name="fillMode">
          <span data-ttu-id="e2281-138">
            <see cref="T:System.Drawing.Drawing2D.FillMode" /> の形状の内部を塗りつぶす方法を指定する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-138">A <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that specifies how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> are filled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-139">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />、<see cref="T:System.Drawing.Drawing2D.PathPointType" /> の各配列と指定した <see cref="T:System.Drawing.PointF" /> 列挙体要素を使用して、<see cref="T:System.Drawing.Drawing2D.FillMode" /> 配列の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-139">Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> array with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType" /> and <see cref="T:System.Drawing.PointF" /> arrays and with the specified <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-140">現在の図形に楕円の円弧を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-140">Appends an elliptical arc to the current figure.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddArc">
      <MemberSignature Language="C#" Value="public void AddArc (System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArc(valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddArc (rect As Rectangle, startAngle As Single, sweepAngle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddArc(System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rect">
          <span data-ttu-id="e2281-141">円弧の元になる楕円の外接四角形を表す <see cref="T:System.Drawing.Rectangle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-141">A <see cref="T:System.Drawing.Rectangle" /> that represents the rectangular bounds of the ellipse from which the arc is taken.</span>
          </span>
        </param>
        <param name="startAngle">
          <span data-ttu-id="e2281-142">x 軸から時計回りに測定した、円弧の開始角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-142">The starting angle of the arc, measured in degrees clockwise from the x-axis.</span>
          </span>
        </param>
        <param name="sweepAngle">
          <span data-ttu-id="e2281-143">
            <c>startAngle</c> と円弧の終端との間の角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-143">The angle between <c>startAngle</c> and the end of the arc.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-144">現在の図形に楕円の円弧を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-144">Appends an elliptical arc to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-145">前の行または図内の曲線がある場合は、円弧の始点に前のセグメントのエンドポイントを接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-145">If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.</span></span>  
  
 <span data-ttu-id="e2281-146">指定した四角形で囲まれた楕円の境界に沿って円弧がトレースされます。</span><span class="sxs-lookup"><span data-stu-id="e2281-146">The arc is traced along the perimeter of the ellipse bounded by the specified rectangle.</span></span> <span data-ttu-id="e2281-147">円弧の始点は、開始角度で度数の数によって、(0 ° 角度) での楕円の x 軸から時計回りに測定することによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-147">The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle.</span></span> <span data-ttu-id="e2281-148">掃引角度に度の数によって、開始位置から時計回りに測定することでは、エンドポイントがある同様にします。</span><span class="sxs-lookup"><span data-stu-id="e2281-148">The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle.</span></span> <span data-ttu-id="e2281-149">掃引角度が 360 度またはより小さい-360 度より大きい場合、円弧はちょうど 360 度または-360 度でそれぞれします。</span><span class="sxs-lookup"><span data-stu-id="e2281-149">If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-150">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-150">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-151">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-151">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-152">元の円弧が定義されている、四角形を作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-152">Creates a rectangle, from which the arc is defined.</span></span>  
  
-   <span data-ttu-id="e2281-153">パス、作成`myPath`です。</span><span class="sxs-lookup"><span data-stu-id="e2281-153">Creates a path, `myPath`.</span></span>  
  
-   <span data-ttu-id="e2281-154">パスに追加され、180 度を 0 ° からスイープを 180 度楕円の円弧を定義します。</span><span class="sxs-lookup"><span data-stu-id="e2281-154">Defines a 180-degree elliptical arc that sweeps from 0 degrees to 180 degrees and appends it to a path.</span></span>  
  
-   <span data-ttu-id="e2281-155">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-155">Draws the path to screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArc">
      <MemberSignature Language="C#" Value="public void AddArc (System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArc(valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddArc (rect As RectangleF, startAngle As Single, sweepAngle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddArc(System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rect">
          <span data-ttu-id="e2281-156">円弧の元になる楕円の外接四角形を表す <see cref="T:System.Drawing.RectangleF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-156">A <see cref="T:System.Drawing.RectangleF" /> that represents the rectangular bounds of the ellipse from which the arc is taken.</span>
          </span>
        </param>
        <param name="startAngle">
          <span data-ttu-id="e2281-157">x 軸から時計回りに測定した、円弧の開始角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-157">The starting angle of the arc, measured in degrees clockwise from the x-axis.</span>
          </span>
        </param>
        <param name="sweepAngle">
          <span data-ttu-id="e2281-158">
            <c>startAngle</c> と円弧の終端との間の角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-158">The angle between <c>startAngle</c> and the end of the arc.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-159">現在の図形に楕円の円弧を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-159">Appends an elliptical arc to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-160">前の行または図内の曲線がある場合は、円弧の始点に前のセグメントのエンドポイントを接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-160">If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.</span></span>  
  
 <span data-ttu-id="e2281-161">指定した四角形で囲まれた楕円の境界に沿って円弧がトレースされます。</span><span class="sxs-lookup"><span data-stu-id="e2281-161">The arc is traced along the perimeter of the ellipse bounded by the specified rectangle.</span></span> <span data-ttu-id="e2281-162">円弧の始点は、開始角度で度数の数によって、(0 ° 角度) での楕円の x 軸から時計回りに測定することによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-162">The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle.</span></span> <span data-ttu-id="e2281-163">掃引角度に度の数によって、開始位置から時計回りに測定することでは、エンドポイントがある同様にします。</span><span class="sxs-lookup"><span data-stu-id="e2281-163">The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle.</span></span> <span data-ttu-id="e2281-164">掃引角度が 360 度またはより小さい-360 度より大きい場合、円弧はちょうど 360 度または-360 度でそれぞれします。</span><span class="sxs-lookup"><span data-stu-id="e2281-164">If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-165">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-165">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArc">
      <MemberSignature Language="C#" Value="public void AddArc (int x, int y, int width, int height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArc(int32 x, int32 y, int32 width, int32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddArc (x As Integer, y As Integer, width As Integer, height As Integer, startAngle As Single, sweepAngle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddArc(int x, int y, int width, int height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-166">円弧の描画元となる楕円を定義する四角形領域の左上隅の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-166">The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-167">円弧の描画元となる楕円を定義する四角形領域の左上隅の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-167">The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.</span>
          </span>
        </param>
        <param name="width">
          <span data-ttu-id="e2281-168">円弧の描画元となる楕円を定義する四角形領域の幅。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-168">The width of the rectangular region that defines the ellipse from which the arc is drawn.</span>
          </span>
        </param>
        <param name="height">
          <span data-ttu-id="e2281-169">円弧の描画元となる楕円を定義する四角形領域の高さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-169">The height of the rectangular region that defines the ellipse from which the arc is drawn.</span>
          </span>
        </param>
        <param name="startAngle">
          <span data-ttu-id="e2281-170">x 軸から時計回りに測定した、円弧の開始角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-170">The starting angle of the arc, measured in degrees clockwise from the x-axis.</span>
          </span>
        </param>
        <param name="sweepAngle">
          <span data-ttu-id="e2281-171">
            <c>startAngle</c> と円弧の終端との間の角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-171">The angle between <c>startAngle</c> and the end of the arc.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-172">現在の図形に楕円の円弧を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-172">Appends an elliptical arc to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-173">前の行または図内の曲線がある場合は、円弧の始点に前のセグメントのエンドポイントを接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-173">If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.</span></span>  
  
 <span data-ttu-id="e2281-174">指定した四角形で囲まれた楕円の境界に沿って円弧がトレースされます。</span><span class="sxs-lookup"><span data-stu-id="e2281-174">The arc is traced along the perimeter of the ellipse bounded by the specified rectangle.</span></span> <span data-ttu-id="e2281-175">円弧の始点は、開始角度で度数の数によって、(0 ° 角度) での楕円の x 軸から時計回りに測定することによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-175">The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle.</span></span> <span data-ttu-id="e2281-176">掃引角度に度の数によって、開始位置から時計回りに測定することでは、エンドポイントがある同様にします。</span><span class="sxs-lookup"><span data-stu-id="e2281-176">The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle.</span></span> <span data-ttu-id="e2281-177">掃引角度が 360 度またはより小さい-360 度より大きい場合、円弧はちょうど 360 度または-360 度でそれぞれします。</span><span class="sxs-lookup"><span data-stu-id="e2281-177">If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-178">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-178">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArc">
      <MemberSignature Language="C#" Value="public void AddArc (float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArc(float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddArc (x As Single, y As Single, width As Single, height As Single, startAngle As Single, sweepAngle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddArc(float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-179">円弧の描画元となる楕円を定義する四角形領域の左上隅の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-179">The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-180">円弧の描画元となる楕円を定義する四角形領域の左上隅の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-180">The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn.</span>
          </span>
        </param>
        <param name="width">
          <span data-ttu-id="e2281-181">円弧の描画元となる楕円を定義する四角形領域の幅。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-181">The width of the rectangular region that defines the ellipse from which the arc is drawn.</span>
          </span>
        </param>
        <param name="height">
          <span data-ttu-id="e2281-182">円弧の描画元となる楕円を定義する四角形領域の高さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-182">The height of the rectangular region that defines the ellipse from which the arc is drawn.</span>
          </span>
        </param>
        <param name="startAngle">
          <span data-ttu-id="e2281-183">x 軸から時計回りに測定した、円弧の開始角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-183">The starting angle of the arc, measured in degrees clockwise from the x-axis.</span>
          </span>
        </param>
        <param name="sweepAngle">
          <span data-ttu-id="e2281-184">
            <c>startAngle</c> と円弧の終端との間の角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-184">The angle between <c>startAngle</c> and the end of the arc.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-185">現在の図形に楕円の円弧を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-185">Appends an elliptical arc to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-186">前の行または図内の曲線がある場合は、円弧の始点に前のセグメントのエンドポイントを接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-186">If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the beginning of the arc.</span></span>  
  
 <span data-ttu-id="e2281-187">指定した四角形で囲まれた楕円の境界に沿って円弧がトレースされます。</span><span class="sxs-lookup"><span data-stu-id="e2281-187">The arc is traced along the perimeter of the ellipse bounded by the specified rectangle.</span></span> <span data-ttu-id="e2281-188">円弧の始点は、開始角度で度数の数によって、(0 ° 角度) での楕円の x 軸から時計回りに測定することによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-188">The starting point of the arc is determined by measuring clockwise from the x-axis of the ellipse (at the 0-degree angle) by the number of degrees in the start angle.</span></span> <span data-ttu-id="e2281-189">掃引角度に度の数によって、開始位置から時計回りに測定することでは、エンドポイントがある同様にします。</span><span class="sxs-lookup"><span data-stu-id="e2281-189">The endpoint is similarly located by measuring clockwise from the starting point by the number of degrees in the sweep angle.</span></span> <span data-ttu-id="e2281-190">掃引角度が 360 度またはより小さい-360 度より大きい場合、円弧はちょうど 360 度または-360 度でそれぞれします。</span><span class="sxs-lookup"><span data-stu-id="e2281-190">If the sweep angle is greater than 360 degrees or less than -360 degrees, the arc is swept by exactly 360 degrees or -360 degrees, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-191">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-191">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-192">現在の図形に 3 次ベジエ曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-192">Adds a cubic Bézier curve to the current figure.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddBezier">
      <MemberSignature Language="C#" Value="public void AddBezier (System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBezier(valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBezier (pt1 As Point, pt2 As Point, pt3 As Point, pt4 As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBezier(System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt1">
          <span data-ttu-id="e2281-193">曲線の開始点を表す <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-193">A <see cref="T:System.Drawing.Point" /> that represents the starting point of the curve.</span>
          </span>
        </param>
        <param name="pt2">
          <span data-ttu-id="e2281-194">曲線の最初の制御点を表す <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-194">A <see cref="T:System.Drawing.Point" /> that represents the first control point for the curve.</span>
          </span>
        </param>
        <param name="pt3">
          <span data-ttu-id="e2281-195">曲線の 2 番目の制御点を表す <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-195">A <see cref="T:System.Drawing.Point" /> that represents the second control point for the curve.</span>
          </span>
        </param>
        <param name="pt4">
          <span data-ttu-id="e2281-196">曲線の終了点を表す <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-196">A <see cref="T:System.Drawing.Point" /> that represents the endpoint of the curve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-197">現在の図形に 3 次ベジエ曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-197">Adds a cubic Bézier curve to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-198">三次曲線は最初の点から 4 番目の点の制御点として、2 番目と 3 番目のポイントを使用して構築されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-198">The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.</span></span>  
  
 <span data-ttu-id="e2281-199">ある場合、前の行または曲線のセグメントの図に、三次曲線の開始位置を前のセグメントのエンドポイントを接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-199">If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-200">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-200">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBezier">
      <MemberSignature Language="C#" Value="public void AddBezier (System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBezier(valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBezier (pt1 As PointF, pt2 As PointF, pt3 As PointF, pt4 As PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBezier(System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pt1">
          <span data-ttu-id="e2281-201">曲線の開始点を表す <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-201">A <see cref="T:System.Drawing.PointF" /> that represents the starting point of the curve.</span>
          </span>
        </param>
        <param name="pt2">
          <span data-ttu-id="e2281-202">曲線の最初の制御点を表す <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-202">A <see cref="T:System.Drawing.PointF" /> that represents the first control point for the curve.</span>
          </span>
        </param>
        <param name="pt3">
          <span data-ttu-id="e2281-203">曲線の 2 番目の制御点を表す <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-203">A <see cref="T:System.Drawing.PointF" /> that represents the second control point for the curve.</span>
          </span>
        </param>
        <param name="pt4">
          <span data-ttu-id="e2281-204">曲線の終了点を表す <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-204">A <see cref="T:System.Drawing.PointF" /> that represents the endpoint of the curve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-205">現在の図形に 3 次ベジエ曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-205">Adds a cubic Bézier curve to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-206">三次曲線は最初の点から 4 番目の点の制御点として、2 番目と 3 番目のポイントを使用して構築されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-206">The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.</span></span>  
  
 <span data-ttu-id="e2281-207">ある場合、前の行または曲線のセグメントの図に、三次曲線の開始位置を前のセグメントのエンドポイントを接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-207">If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-208">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-208">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBezier">
      <MemberSignature Language="C#" Value="public void AddBezier (int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBezier(int32 x1, int32 y1, int32 x2, int32 y2, int32 x3, int32 y3, int32 x4, int32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBezier (x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, x4 As Integer, y4 As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBezier(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
        <Parameter Name="x3" Type="System.Int32" />
        <Parameter Name="y3" Type="System.Int32" />
        <Parameter Name="x4" Type="System.Int32" />
        <Parameter Name="y4" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x1">
          <span data-ttu-id="e2281-209">曲線の開始点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-209">The x-coordinate of the starting point of the curve.</span>
          </span>
        </param>
        <param name="y1">
          <span data-ttu-id="e2281-210">曲線の開始点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-210">The y-coordinate of the starting point of the curve.</span>
          </span>
        </param>
        <param name="x2">
          <span data-ttu-id="e2281-211">曲線の最初の制御点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-211">The x-coordinate of the first control point for the curve.</span>
          </span>
        </param>
        <param name="y2">
          <span data-ttu-id="e2281-212">曲線の最初の制御点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-212">The y-coordinate of the first control point for the curve.</span>
          </span>
        </param>
        <param name="x3">
          <span data-ttu-id="e2281-213">曲線の 2 番目の制御点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-213">The x-coordinate of the second control point for the curve.</span>
          </span>
        </param>
        <param name="y3">
          <span data-ttu-id="e2281-214">曲線の 2 番目の制御点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-214">The y-coordinate of the second control point for the curve.</span>
          </span>
        </param>
        <param name="x4">
          <span data-ttu-id="e2281-215">曲線の終了点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-215">The x-coordinate of the endpoint of the curve.</span>
          </span>
        </param>
        <param name="y4">
          <span data-ttu-id="e2281-216">曲線の終了点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-216">The y-coordinate of the endpoint of the curve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-217">現在の図形に 3 次ベジエ曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-217">Adds a cubic Bézier curve to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-218">三次曲線は最初の点から 4 番目の点の制御点として、2 番目と 3 番目のポイントを使用して構築されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-218">The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.</span></span>  
  
 <span data-ttu-id="e2281-219">ある場合、前の行または曲線のセグメントの図に、三次曲線の開始位置を前のセグメントのエンドポイントを接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-219">If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-220">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-220">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-221">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-221">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-222">パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-222">Creates a path.</span></span>  
  
-   <span data-ttu-id="e2281-223">(50, 50) 点によって定義された 3 次ベジエ曲線を追加します (70, 0)、(100, 120) と (150, 50) をパスにします。</span><span class="sxs-lookup"><span data-stu-id="e2281-223">Adds a cubic Bézier curve defined by the points (50, 50), (70, 0), (100, 120), and (150, 50) to the path.</span></span>  
  
-   <span data-ttu-id="e2281-224">曲線を閉じます。</span><span class="sxs-lookup"><span data-stu-id="e2281-224">Closes the curve.</span></span>  
  
-   <span data-ttu-id="e2281-225">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-225">Draws the path to screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBezier">
      <MemberSignature Language="C#" Value="public void AddBezier (float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBezier(float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBezier (x1 As Single, y1 As Single, x2 As Single, y2 As Single, x3 As Single, y3 As Single, x4 As Single, y4 As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBezier(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x1">
          <span data-ttu-id="e2281-226">曲線の開始点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-226">The x-coordinate of the starting point of the curve.</span>
          </span>
        </param>
        <param name="y1">
          <span data-ttu-id="e2281-227">曲線の開始点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-227">The y-coordinate of the starting point of the curve.</span>
          </span>
        </param>
        <param name="x2">
          <span data-ttu-id="e2281-228">曲線の最初の制御点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-228">The x-coordinate of the first control point for the curve.</span>
          </span>
        </param>
        <param name="y2">
          <span data-ttu-id="e2281-229">曲線の最初の制御点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-229">The y-coordinate of the first control point for the curve.</span>
          </span>
        </param>
        <param name="x3">
          <span data-ttu-id="e2281-230">曲線の 2 番目の制御点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-230">The x-coordinate of the second control point for the curve.</span>
          </span>
        </param>
        <param name="y3">
          <span data-ttu-id="e2281-231">曲線の 2 番目の制御点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-231">The y-coordinate of the second control point for the curve.</span>
          </span>
        </param>
        <param name="x4">
          <span data-ttu-id="e2281-232">曲線の終了点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-232">The x-coordinate of the endpoint of the curve.</span>
          </span>
        </param>
        <param name="y4">
          <span data-ttu-id="e2281-233">曲線の終了点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-233">The y-coordinate of the endpoint of the curve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-234">現在の図形に 3 次ベジエ曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-234">Adds a cubic Bézier curve to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-235">三次曲線は最初の点から 4 番目の点の制御点として、2 番目と 3 番目のポイントを使用して構築されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-235">The cubic curve is constructed from the first point to the fourth point by using the second and third points as control points.</span></span>  
  
 <span data-ttu-id="e2281-236">ある場合、前の行または曲線のセグメントの図に、三次曲線の開始位置を前のセグメントのエンドポイントを接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-236">If there is a previous line or curve segment in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the cubic curve.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-237">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-237">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-238">接続された 3 次ベジエ曲線のシーケンスを現在の図形に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-238">Adds a sequence of connected cubic Bézier curves to the current figure.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddBeziers">
      <MemberSignature Language="C#" Value="public void AddBeziers (params System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBeziers(valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBeziers (ParamArray points As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBeziers(... cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.Point[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-239">曲線を定義する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-239">An array of <see cref="T:System.Drawing.Point" /> structures that represents the points that define the curves.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-240">接続された 3 次ベジエ曲線のシーケンスを現在の図形に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-240">Adds a sequence of connected cubic Bézier curves to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-241">`points`パラメーターは、エンドポイントの配列との接続された曲線コントロール ポイントを指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-241">The `points` parameter specifies an array of endpoints and control points of the connected curves.</span></span> <span data-ttu-id="e2281-242">4 番目の点に最初の曲線が最初のポイントから構築された、`points`の制御点として、2 番目と 3 番目のポイントを使用して配列。</span><span class="sxs-lookup"><span data-stu-id="e2281-242">The first curve is constructed from the first point to the fourth point in the `points` array by using the second and third points as control points.</span></span> <span data-ttu-id="e2281-243">シーケンス内の後続各曲線だけでなく、前の曲線のエンドポイントには 3 つの点必要があります。 シーケンス内の次の 2 つのポイントの制御点あり、3 番目のエンドポイントを追加した曲線です。</span><span class="sxs-lookup"><span data-stu-id="e2281-243">In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.</span></span>  
  
 <span data-ttu-id="e2281-244">前の行または図内の曲線がある場合は、シーケンス内の最初の三次曲線の開始位置を前のセグメントのエンドポイントを接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-244">If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-245">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-245">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-246">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-246">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-247">(接続された 2 つのベジエ曲線を表す) 7 つの点の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-247">Creates an array of seven points (representing two connected Bézier curves).</span></span>  
  
-   <span data-ttu-id="e2281-248">パスを作成し、一連のベジエ曲線の点をパスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-248">Creates a path and adds the series of Bézier curve points to the path.</span></span>  
  
-   <span data-ttu-id="e2281-249">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-249">Draws the path to screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBeziers">
      <MemberSignature Language="C#" Value="public void AddBeziers (System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBeziers(valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBeziers (points As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBeziers(cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-250">曲線を定義する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-250">An array of <see cref="T:System.Drawing.PointF" /> structures that represents the points that define the curves.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-251">接続された 3 次ベジエ曲線のシーケンスを現在の図形に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-251">Adds a sequence of connected cubic Bézier curves to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-252">`points`パラメーターは、エンドポイントの配列との接続された曲線コントロール ポイントを指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-252">The `points` parameter specifies an array of endpoints and control points of the connected curves.</span></span> <span data-ttu-id="e2281-253">4 番目の点に最初の曲線が最初のポイントから構築された、`points`の制御点として、2 番目と 3 番目のポイントを使用して配列。</span><span class="sxs-lookup"><span data-stu-id="e2281-253">The first curve is constructed from the first point to the fourth point in the `points` array by using the second and third points as control points.</span></span> <span data-ttu-id="e2281-254">シーケンス内の後続各曲線だけでなく、前の曲線のエンドポイントには 3 つの点必要があります。 シーケンス内の次の 2 つのポイントの制御点あり、3 番目のエンドポイントを追加した曲線です。</span><span class="sxs-lookup"><span data-stu-id="e2281-254">In addition to the endpoint of the previous curve, each subsequent curve in the sequence needs exactly three more points: the next two points in the sequence are control points, and the third is the endpoint for the added curve.</span></span>  
  
 <span data-ttu-id="e2281-255">前の行または図内の曲線がある場合は、シーケンス内の最初の三次曲線の開始位置を前のセグメントのエンドポイントを接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-255">If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment to the starting point of the first cubic curve in the sequence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-256">例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-256">For an example see:</span></span>  
  
 <xref:System.Drawing.Drawing2D.GraphicsPath.AddBeziers%28System.Drawing.Point%5B%5D%29>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-257">パスに閉じた曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-257">Adds a closed curve to this path.</span>
          </span>
          <span data-ttu-id="e2281-258">曲線は配列内の各点を結ぶため、カーディナル スプライン曲線を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-258">A cardinal spline curve is used because the curve travels through each of the points in the array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddClosedCurve">
      <MemberSignature Language="C#" Value="public void AddClosedCurve (System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddClosedCurve(valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddClosedCurve (points As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddClosedCurve(cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-259">曲線を定義する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-259">An array of <see cref="T:System.Drawing.Point" /> structures that represents the points that define the curve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-260">パスに閉じた曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-260">Adds a closed curve to this path.</span>
          </span>
          <span data-ttu-id="e2281-261">曲線は配列内の各点を結ぶため、カーディナル スプライン曲線を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-261">A cardinal spline curve is used because the curve travels through each of the points in the array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-262">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-262">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-263">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-263">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span> <span data-ttu-id="e2281-264">場合、最初のポイントと最後の点、`points`配列が同じポイントではない、これら 2 つのポイントを接続することで、曲線が閉じられます。</span><span class="sxs-lookup"><span data-stu-id="e2281-264">If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points.</span></span> <span data-ttu-id="e2281-265">このメソッドの張力値を設定することはできませんし、既定値が値を 0.5 に相当します。</span><span class="sxs-lookup"><span data-stu-id="e2281-265">The tension value cannot be set for this method, and defaults to a value equivalent to 0.5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-266">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve%28System.Drawing.Point%5B%5D%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-266">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve%28System.Drawing.Point%5B%5D%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClosedCurve">
      <MemberSignature Language="C#" Value="public void AddClosedCurve (System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddClosedCurve(valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddClosedCurve (points As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddClosedCurve(cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-267">曲線を定義する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-267">An array of <see cref="T:System.Drawing.PointF" /> structures that represents the points that define the curve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-268">パスに閉じた曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-268">Adds a closed curve to this path.</span>
          </span>
          <span data-ttu-id="e2281-269">曲線は配列内の各点を結ぶため、カーディナル スプライン曲線を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-269">A cardinal spline curve is used because the curve travels through each of the points in the array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-270">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-270">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-271">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-271">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span> <span data-ttu-id="e2281-272">場合、最初のポイントと最後の点、`points`配列が同じポイントではない、これら 2 つのポイントを接続することで、曲線が閉じられます。</span><span class="sxs-lookup"><span data-stu-id="e2281-272">If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points.</span></span> <span data-ttu-id="e2281-273">このメソッドの張力値を設定することはできませんし、既定値が値を 0.5 に相当します。</span><span class="sxs-lookup"><span data-stu-id="e2281-273">The tension value cannot be set for this method, and defaults to a value equivalent to 0.5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-274">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve%28System.Drawing.Point%5B%5D%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-274">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve%28System.Drawing.Point%5B%5D%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClosedCurve">
      <MemberSignature Language="C#" Value="public void AddClosedCurve (System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddClosedCurve(valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddClosedCurve (points As Point(), tension As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddClosedCurve(cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-275">曲線を定義する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-275">An array of <see cref="T:System.Drawing.Point" /> structures that represents the points that define the curve.</span>
          </span>
        </param>
        <param name="tension">
          <span data-ttu-id="e2281-276">曲線が点の間で湾曲する度合いを指定する 0 ～ 1 の値。0 が最小 (急な曲線) で、1 の場合に最も滑らかな曲線になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-276">A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-277">パスに閉じた曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-277">Adds a closed curve to this path.</span>
          </span>
          <span data-ttu-id="e2281-278">曲線は配列内の各点を結ぶため、カーディナル スプライン曲線を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-278">A cardinal spline curve is used because the curve travels through each of the points in the array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-279">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-279">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-280">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-280">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span> <span data-ttu-id="e2281-281">場合、最初のポイントと最後の点、`points`配列が同じポイントではない、これら 2 つのポイントを接続することで、曲線が閉じられます。</span><span class="sxs-lookup"><span data-stu-id="e2281-281">If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-282">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-282">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-283">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-283">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-284">(通過するカーディナル スプラインを表す) 6 つの点の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-284">Creates an array of six points (representing a cardinal spline).</span></span>  
  
-   <span data-ttu-id="e2281-285">パスを作成し、閉じたカーディナル スプライン曲線を (終了して、エンドポイントから開始点) のパスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-285">Creates a path and adds the closed cardinal spline curves to the path (closed from the endpoint to the starting point).</span></span>  
  
-   <span data-ttu-id="e2281-286">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-286">Draws the path to screen.</span></span>  
  
 <span data-ttu-id="e2281-287">0.5 のテンションを使用することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-287">Notice that a tension of 0.5 is used.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClosedCurve">
      <MemberSignature Language="C#" Value="public void AddClosedCurve (System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddClosedCurve(valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddClosedCurve (points As PointF(), tension As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddClosedCurve(cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-288">曲線を定義する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-288">An array of <see cref="T:System.Drawing.PointF" /> structures that represents the points that define the curve.</span>
          </span>
        </param>
        <param name="tension">
          <span data-ttu-id="e2281-289">曲線が点の間で湾曲する度合いを指定する 0 ～ 1 の値。0 が最小 (急な曲線) で、1 の場合に最も滑らかな曲線になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-289">A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-290">パスに閉じた曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-290">Adds a closed curve to this path.</span>
          </span>
          <span data-ttu-id="e2281-291">曲線は配列内の各点を結ぶため、カーディナル スプライン曲線を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-291">A cardinal spline curve is used because the curve travels through each of the points in the array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-292">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-292">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-293">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-293">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span> <span data-ttu-id="e2281-294">場合、最初のポイントと最後の点、`points`配列が同じポイントではない、これら 2 つのポイントを接続することで、曲線が閉じられます。</span><span class="sxs-lookup"><span data-stu-id="e2281-294">If the first point and the last point in the `points` array are not the same point, the curve is closed by connecting these two points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-295">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve%28System.Drawing.Point%5B%5D%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-295">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve%28System.Drawing.Point%5B%5D%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-296">現在の図形にスプライン曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-296">Adds a spline curve to the current figure.</span>
          </span>
          <span data-ttu-id="e2281-297">曲線は配列内の各点を結ぶため、カーディナル スプライン曲線を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-297">A cardinal spline curve is used because the curve travels through each of the points in the array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddCurve">
      <MemberSignature Language="C#" Value="public void AddCurve (System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCurve(valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCurve (points As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCurve(cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-298">曲線を定義する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-298">An array of <see cref="T:System.Drawing.Point" /> structures that represents the points that define the curve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-299">現在の図形にスプライン曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-299">Adds a spline curve to the current figure.</span>
          </span>
          <span data-ttu-id="e2281-300">曲線は配列内の各点を結ぶため、カーディナル スプライン曲線を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-300">A cardinal spline curve is used because the curve travels through each of the points in the array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-301">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-301">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-302">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-302">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-303">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve%28System.Drawing.Point%5B%5D%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-303">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve%28System.Drawing.Point%5B%5D%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCurve">
      <MemberSignature Language="C#" Value="public void AddCurve (System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCurve(valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCurve (points As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCurve(cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-304">曲線を定義する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-304">An array of <see cref="T:System.Drawing.PointF" /> structures that represents the points that define the curve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-305">現在の図形にスプライン曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-305">Adds a spline curve to the current figure.</span>
          </span>
          <span data-ttu-id="e2281-306">曲線は配列内の各点を結ぶため、カーディナル スプライン曲線を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-306">A cardinal spline curve is used because the curve travels through each of the points in the array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-307">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-307">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-308">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-308">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-309">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddCurve%28System.Drawing.Point%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-309">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddCurve%28System.Drawing.Point%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCurve">
      <MemberSignature Language="C#" Value="public void AddCurve (System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCurve(valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCurve (points As Point(), tension As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCurve(cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-310">曲線を定義する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-310">An array of <see cref="T:System.Drawing.Point" /> structures that represents the points that define the curve.</span>
          </span>
        </param>
        <param name="tension">
          <span data-ttu-id="e2281-311">曲線が制御点の間で湾曲する度合いを指定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-311">A value that specifies the amount that the curve bends between control points.</span>
          </span>
          <span data-ttu-id="e2281-312">1 より大きい値の場合、予期しない結果が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-312">Values greater than 1 produce unpredictable results.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-313">現在の図形にスプライン曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-313">Adds a spline curve to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-314">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-314">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-315">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-315">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-316">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve%28System.Drawing.Point%5B%5D%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-316">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve%28System.Drawing.Point%5B%5D%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCurve">
      <MemberSignature Language="C#" Value="public void AddCurve (System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCurve(valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCurve (points As PointF(), tension As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCurve(cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-317">曲線を定義する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-317">An array of <see cref="T:System.Drawing.PointF" /> structures that represents the points that define the curve.</span>
          </span>
        </param>
        <param name="tension">
          <span data-ttu-id="e2281-318">曲線が制御点の間で湾曲する度合いを指定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-318">A value that specifies the amount that the curve bends between control points.</span>
          </span>
          <span data-ttu-id="e2281-319">1 より大きい値の場合、予期しない結果が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-319">Values greater than 1 produce unpredictable results.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-320">現在の図形にスプライン曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-320">Adds a spline curve to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-321">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-321">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-322">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-322">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-323">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddCurve%28System.Drawing.Point%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-323">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddCurve%28System.Drawing.Point%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCurve">
      <MemberSignature Language="C#" Value="public void AddCurve (System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCurve(valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCurve (points As Point(), offset As Integer, numberOfSegments As Integer, tension As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCurve(cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-324">曲線を定義する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-324">An array of <see cref="T:System.Drawing.Point" /> structures that represents the points that define the curve.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="e2281-325">曲線の最初の点として使用される、<c>points</c> 配列の要素のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-325">The index of the element in the <c>points</c> array that is used as the first point in the curve.</span>
          </span>
        </param>
        <param name="numberOfSegments">
          <span data-ttu-id="e2281-326">曲線が制御点の間で湾曲する度合いを指定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-326">A value that specifies the amount that the curve bends between control points.</span>
          </span>
          <span data-ttu-id="e2281-327">1 より大きい値の場合、予期しない結果が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-327">Values greater than 1 produce unpredictable results.</span>
          </span>
        </param>
        <param name="tension">
          <span data-ttu-id="e2281-328">曲線が制御点の間で湾曲する度合いを指定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-328">A value that specifies the amount that the curve bends between control points.</span>
          </span>
          <span data-ttu-id="e2281-329">1 より大きい値の場合、予期しない結果が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-329">Values greater than 1 produce unpredictable results.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-330">現在の図形にスプライン曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-330">Adds a spline curve to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-331">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-331">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-332">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-332">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span>  
  
 <span data-ttu-id="e2281-333">曲線の開始に指定された配列内の位置に、`offset`パラメーターで指定された点 (セグメント) の数を含めた`numberOfSegments`です。</span><span class="sxs-lookup"><span data-stu-id="e2281-333">The curve begins at the point in the array specified by the `offset` parameter and includes the number of points (segments) specified by `numberOfSegments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-334">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-334">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-335">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-335">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-336">(通過するカーディナル スプラインを表す) 4 つの点の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-336">Creates an array of four points (representing a cardinal spline).</span></span>  
  
-   <span data-ttu-id="e2281-337">パスを作成し、点の配列を使用して、曲線のパスを追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-337">Creates a path and using the array of points, adds the curve to the path.</span></span>  
  
-   <span data-ttu-id="e2281-338">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-338">Draws the path to the screen.</span></span>  
  
 <span data-ttu-id="e2281-339">配列は、4 つのポイントを保持しているときに含まれている 3 つだけのセグメントへの呼び出しの 3 番目の引数で指定した数値は<xref:System.Drawing.Drawing2D.GraphicsPath.AddCurve%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e2281-339">Notice that while the array holds four points, there are only three segments, which is the number specified in the third argument of the call to <xref:System.Drawing.Drawing2D.GraphicsPath.AddCurve%2A>.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCurve">
      <MemberSignature Language="C#" Value="public void AddCurve (System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCurve(valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCurve (points As PointF(), offset As Integer, numberOfSegments As Integer, tension As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCurve(cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-340">曲線を定義する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-340">An array of <see cref="T:System.Drawing.PointF" /> structures that represents the points that define the curve.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="e2281-341">曲線の最初の点として使用される、<c>points</c> 配列の要素のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-341">The index of the element in the <c>points</c> array that is used as the first point in the curve.</span>
          </span>
        </param>
        <param name="numberOfSegments">
          <span data-ttu-id="e2281-342">曲線の描画に使用されるセグメントの数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-342">The number of segments used to draw the curve.</span>
          </span>
          <span data-ttu-id="e2281-343">セグメントは、2 つの点を接続する直線と見なすことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-343">A segment can be thought of as a line connecting two points.</span>
          </span>
        </param>
        <param name="tension">
          <span data-ttu-id="e2281-344">曲線が制御点の間で湾曲する度合いを指定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-344">A value that specifies the amount that the curve bends between control points.</span>
          </span>
          <span data-ttu-id="e2281-345">1 より大きい値の場合、予期しない結果が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-345">Values greater than 1 produce unpredictable results.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-346">現在の図形にスプライン曲線を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-346">Adds a spline curve to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-347">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-347">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-348">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-348">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span>  
  
 <span data-ttu-id="e2281-349">曲線の開始に指定された配列内の位置に`offset`で指定された点 (セグメント) の数を含めた`numberOfSegments`です。</span><span class="sxs-lookup"><span data-stu-id="e2281-349">The curve begins at the point in the array specified by `offset`, and includes the number of points (segments) specified by `numberOfSegments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-350">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddCurve%28System.Drawing.Point%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-350">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddCurve%28System.Drawing.Point%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-351">現在のパスに楕円を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-351">Adds an ellipse to the current path.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddEllipse">
      <MemberSignature Language="C#" Value="public void AddEllipse (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddEllipse(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEllipse (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEllipse(System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <span data-ttu-id="e2281-352">楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.Rectangle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-352">A <see cref="T:System.Drawing.Rectangle" /> that represents the bounding rectangle that defines the ellipse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-353">現在のパスに楕円を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-353">Adds an ellipse to the current path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-354">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-354">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-355">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-355">The code performs the following actions:</span></span>  
  
 <span data-ttu-id="e2281-356">楕円を定義する外接する四角形を作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-356">Creates a bounding rectangle that defines an ellipse.</span></span>  
  
 <span data-ttu-id="e2281-357">パスを作成し、パスにある省略記号を追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-357">Creates a path and adds the ellipse to the path.</span></span>  
  
 <span data-ttu-id="e2281-358">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-358">Draws the path to screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEllipse">
      <MemberSignature Language="C#" Value="public void AddEllipse (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddEllipse(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEllipse (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEllipse(System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <span data-ttu-id="e2281-359">楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.RectangleF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-359">A <see cref="T:System.Drawing.RectangleF" /> that represents the bounding rectangle that defines the ellipse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-360">現在のパスに楕円を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-360">Adds an ellipse to the current path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-361">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-361">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEllipse">
      <MemberSignature Language="C#" Value="public void AddEllipse (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddEllipse(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEllipse (x As Integer, y As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEllipse(int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-362">楕円を定義する外接する四角形の左上隅の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-362">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-363">楕円を定義する外接する四角形の左上隅の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-363">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</span>
          </span>
        </param>
        <param name="width">
          <span data-ttu-id="e2281-364">楕円を定義する外接する四角形の幅。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-364">The width of the bounding rectangle that defines the ellipse.</span>
          </span>
        </param>
        <param name="height">
          <span data-ttu-id="e2281-365">楕円を定義する外接する四角形の高さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-365">The height of the bounding rectangle that defines the ellipse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-366">現在のパスに楕円を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-366">Adds an ellipse to the current path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-367">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-367">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEllipse">
      <MemberSignature Language="C#" Value="public void AddEllipse (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddEllipse(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEllipse (x As Single, y As Single, width As Single, height As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEllipse(float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-368">楕円を定義する外接する四角形の左上隅の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-368">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-369">楕円を定義する外接する四角形の左上隅の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-369">The y-coordinate of the upper left corner of the bounding rectangle that defines the ellipse.</span>
          </span>
        </param>
        <param name="width">
          <span data-ttu-id="e2281-370">楕円を定義する外接する四角形の幅。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-370">The width of the bounding rectangle that defines the ellipse.</span>
          </span>
        </param>
        <param name="height">
          <span data-ttu-id="e2281-371">楕円を定義する外接する四角形の高さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-371">The height of the bounding rectangle that defines the ellipse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-372">現在のパスに楕円を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-372">Adds an ellipse to the current path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-373">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-373">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-374">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に線分を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-374">Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddLine">
      <MemberSignature Language="C#" Value="public void AddLine (System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLine(valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLine (pt1 As Point, pt2 As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLine(System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt1">
          <span data-ttu-id="e2281-375">直線の開始点を表す <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-375">A <see cref="T:System.Drawing.Point" /> that represents the starting point of the line.</span>
          </span>
        </param>
        <param name="pt2">
          <span data-ttu-id="e2281-376">直線の終了点を表す <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-376">A <see cref="T:System.Drawing.Point" /> that represents the endpoint of the line.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-377">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に線分を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-377">Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-378">このメソッドは、これの末尾に指定した点によって定義される直線セグメントを追加<xref:System.Drawing.Drawing2D.GraphicsPath>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-378">This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>.</span></span> <span data-ttu-id="e2281-379">前の行または内の曲線がある場合、<xref:System.Drawing.Drawing2D.GraphicsPath>パスの最後のポイントを新しい直線セグメントの最初のポイントに接続する直線セグメントを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-379">If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-380">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-380">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLine">
      <MemberSignature Language="C#" Value="public void AddLine (System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLine(valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLine (pt1 As PointF, pt2 As PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLine(System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pt1">
          <span data-ttu-id="e2281-381">直線の開始点を表す <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-381">A <see cref="T:System.Drawing.PointF" /> that represents the starting point of the line.</span>
          </span>
        </param>
        <param name="pt2">
          <span data-ttu-id="e2281-382">直線の終了点を表す <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-382">A <see cref="T:System.Drawing.PointF" /> that represents the endpoint of the line.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-383">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に線分を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-383">Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-384">このメソッドは、これの末尾に指定した点によって定義される直線セグメントを追加<xref:System.Drawing.Drawing2D.GraphicsPath>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-384">This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>.</span></span> <span data-ttu-id="e2281-385">前の行または内の曲線がある場合、<xref:System.Drawing.Drawing2D.GraphicsPath>パスの最後のポイントを新しい直線セグメントの最初のポイントに接続する直線セグメントを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-385">If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-386">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-386">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLine">
      <MemberSignature Language="C#" Value="public void AddLine (int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLine(int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLine (x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLine(int x1, int y1, int x2, int y2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x1">
          <span data-ttu-id="e2281-387">直線の開始点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-387">The x-coordinate of the starting point of the line.</span>
          </span>
        </param>
        <param name="y1">
          <span data-ttu-id="e2281-388">直線の開始点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-388">The y-coordinate of the starting point of the line.</span>
          </span>
        </param>
        <param name="x2">
          <span data-ttu-id="e2281-389">直線の終了点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-389">The x-coordinate of the endpoint of the line.</span>
          </span>
        </param>
        <param name="y2">
          <span data-ttu-id="e2281-390">直線の終了点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-390">The y-coordinate of the endpoint of the line.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-391">現在の図形に線分を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-391">Appends a line segment to the current figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-392">このメソッドは、現在の図の末尾に指定した点によって定義される直線セグメントを追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-392">This method adds the line segment defined by the specified points to the end of the current figure.</span></span> <span data-ttu-id="e2281-393">前の行または内の曲線がある場合、<xref:System.Drawing.Drawing2D.GraphicsPath>パスの最後のポイントを新しい直線セグメントの最初のポイントに接続する直線セグメントを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-393">If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-394">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-394">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-395">このコードは、パスを作成、三角形を形成する 3 つの行を追加し、画面にパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-395">The code creates a path, adds three lines that form a triangle, and then draws the path to the screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLine">
      <MemberSignature Language="C#" Value="public void AddLine (float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLine(float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLine (x1 As Single, y1 As Single, x2 As Single, y2 As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLine(float x1, float y1, float x2, float y2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x1">
          <span data-ttu-id="e2281-396">直線の開始点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-396">The x-coordinate of the starting point of the line.</span>
          </span>
        </param>
        <param name="y1">
          <span data-ttu-id="e2281-397">直線の開始点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-397">The y-coordinate of the starting point of the line.</span>
          </span>
        </param>
        <param name="x2">
          <span data-ttu-id="e2281-398">直線の終了点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-398">The x-coordinate of the endpoint of the line.</span>
          </span>
        </param>
        <param name="y2">
          <span data-ttu-id="e2281-399">直線の終了点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-399">The y-coordinate of the endpoint of the line.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-400">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に線分を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-400">Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-401">このメソッドは、これの末尾に指定した点によって定義される直線セグメントを追加<xref:System.Drawing.Drawing2D.GraphicsPath>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-401">This method adds the line segment defined by the specified points to the end of this <xref:System.Drawing.Drawing2D.GraphicsPath>.</span></span> <span data-ttu-id="e2281-402">前の行または内の曲線がある場合、<xref:System.Drawing.Drawing2D.GraphicsPath>パスの最後のポイントを新しい直線セグメントの最初のポイントに接続する直線セグメントを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-402">If there are previous lines or curves in the <xref:System.Drawing.Drawing2D.GraphicsPath>, a line segment is drawn to connect the last point in the path to the first point in the new line segment.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-403">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-403">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-404">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の末尾に、結ばれた一連の線分を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-404">Appends a series of connected line segments to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddLines">
      <MemberSignature Language="C#" Value="public void AddLines (System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLines(valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLines (points As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLines(cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-405">追加する線分を定義する複数の点を表す <see cref="T:System.Drawing.Point" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-405">An array of <see cref="T:System.Drawing.Point" /> structures that represents the points that define the line segments to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-406">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の末尾に、結ばれた一連の線分を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-406">Appends a series of connected line segments to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-407">前の行または図内の曲線がある場合は、前のセグメントの行の開始点のエンドポイントに接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-407">If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment the starting point of the line.</span></span> <span data-ttu-id="e2281-408">`points`パラメーターは、エンドポイントの配列を指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-408">The `points` parameter specifies an array of endpoints.</span></span> <span data-ttu-id="e2281-409">最初の 2 つは、最初の行を指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-409">The first two specify the first line.</span></span> <span data-ttu-id="e2281-410">追加の各ポイントは、線分の開始点とするには、前の行のエンドポイントのエンドポイントを指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-410">Each additional point specifies the endpoint of a line segment whose starting point is the endpoint of the previous line.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-411">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-411">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-412">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-412">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-413">三角形を記述する次の 4 つの点の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-413">Creates an array of four points that describe a triangle.</span></span>  
  
-   <span data-ttu-id="e2281-414">パスを作成し、行の配列を追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-414">Creates a path and adds the array of lines.</span></span>  
  
-   <span data-ttu-id="e2281-415">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-415">Draws the path to screen.</span></span>  
  
 <span data-ttu-id="e2281-416">最初の時点より後の各行が、エンドポイントとして開始点と新しいポイントとして前のポイントを使用することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-416">Notice that each line after the first point uses the previous point as the starting point and the new point as the endpoint.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLines">
      <MemberSignature Language="C#" Value="public void AddLines (System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLines(valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLines (points As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLines(cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-417">追加する線分を定義する複数の点を表す <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-417">An array of <see cref="T:System.Drawing.PointF" /> structures that represents the points that define the line segments to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-418">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の末尾に、結ばれた一連の線分を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-418">Appends a series of connected line segments to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-419">前の行または図内の曲線がある場合は、前のセグメントの行の開始点のエンドポイントに接続する行が追加されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-419">If there are previous lines or curves in the figure, a line is added to connect the endpoint of the previous segment the starting point of the line.</span></span> <span data-ttu-id="e2281-420">`points`パラメーターは、エンドポイントの配列を指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-420">The `points` parameter specifies an array of endpoints.</span></span> <span data-ttu-id="e2281-421">最初の 2 つは、最初の行を指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-421">The first two specify the first line.</span></span> <span data-ttu-id="e2281-422">追加の各ポイントは、線分の開始点とするには、前の行のエンドポイントのエンドポイントを指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-422">Each additional point specifies the endpoint of a line segment whose starting point is the endpoint of the previous line.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-423">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddLines%28System.Drawing.Point%5B%5D%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-423">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddLines%28System.Drawing.Point%5B%5D%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPath">
      <MemberSignature Language="C#" Value="public void AddPath (System.Drawing.Drawing2D.GraphicsPath addingPath, bool connect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPath(class System.Drawing.Drawing2D.GraphicsPath addingPath, bool connect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPath (addingPath As GraphicsPath, connect As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPath(System::Drawing::Drawing2D::GraphicsPath ^ addingPath, bool connect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addingPath" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="connect" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="addingPath">
          <span data-ttu-id="e2281-424">追加する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-424">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to add.</span>
          </span>
        </param>
        <param name="connect">
          <span data-ttu-id="e2281-425">追加されたパスの最初の図形が、このパスの最後の図形の一部になるかどうかを指定する Boolean 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-425">A Boolean value that specifies whether the first figure in the added path is part of the last figure in this path.</span>
          </span>
          <span data-ttu-id="e2281-426">値が <see langword="true" /> の場合は、追加されたパスの最初の図形が、このパスの最後の図形の一部になります (可能な場合)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-426">A value of <see langword="true" /> specifies that (if possible) the first figure in the added path is part of the last figure in this path.</span>
          </span>
          <span data-ttu-id="e2281-427">値が <see langword="false" /> の場合は、追加されたパスの最初の図形が、このパスの最後の図形から分離されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-427">A value of <see langword="false" /> specifies that the first figure in the added path is separate from the last figure in this path.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-428">指定された <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> をこのパスに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-428">Appends the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-429">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-429">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-430">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-430">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-431">右上側三角形で、もう一方にある上下の三角形は、2 つのパス 1 つを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-431">Creates two paths one a right-side-up triangle and the other an up-side-down triangle.</span></span>  
  
-   <span data-ttu-id="e2281-432">最初に 2 番目のパスを追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-432">Adds the second path to the first.</span></span>  
  
-   <span data-ttu-id="e2281-433">画面に結果のパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-433">Draws the resultant path to the screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-434">パスに扇形のアウトラインを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-434">Adds the outline of a pie shape to this path.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddPie">
      <MemberSignature Language="C#" Value="public void AddPie (System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPie(valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPie (rect As Rectangle, startAngle As Single, sweepAngle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPie(System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rect">
          <span data-ttu-id="e2281-435">扇形の描画元になる楕円を定義する外接する四角形を表す <see cref="T:System.Drawing.Rectangle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-435">A <see cref="T:System.Drawing.Rectangle" /> that represents the bounding rectangle that defines the ellipse from which the pie is drawn.</span>
          </span>
        </param>
        <param name="startAngle">
          <span data-ttu-id="e2281-436">x 軸から時計回りに測定した、扇型部分の開始角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-436">The starting angle for the pie section, measured in degrees clockwise from the x-axis.</span>
          </span>
        </param>
        <param name="sweepAngle">
          <span data-ttu-id="e2281-437">
            <c>startAngle</c> から時計回りで測定した、<c>startAngle</c> と扇型部分の終端との間の角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-437">The angle between <c>startAngle</c> and the end of the pie section, measured in degrees clockwise from <c>startAngle</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-438">パスに扇形のアウトラインを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-438">Adds the outline of a pie shape to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-439">扇形の形状は、楕円と交差する部分のアウトラインのエンドポイントを 2 つの放射状線の部分的なアウトラインによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-439">The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline.</span></span> <span data-ttu-id="e2281-440">部分的なアウトラインが始まります`startAngle`(x 軸から時計回りに測定した) で終わります`startAngle`  + `sweepAngle`です。</span><span class="sxs-lookup"><span data-stu-id="e2281-440">The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-441">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddPie%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-441">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddPie%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPie">
      <MemberSignature Language="C#" Value="public void AddPie (int x, int y, int width, int height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPie(int32 x, int32 y, int32 width, int32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPie (x As Integer, y As Integer, width As Integer, height As Integer, startAngle As Single, sweepAngle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPie(int x, int y, int width, int height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-442">扇形の描画元となる楕円を定義する外接する四角形の左上隅の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-442">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-443">扇形の描画元となる楕円を定義する外接する四角形の左上隅の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-443">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.</span>
          </span>
        </param>
        <param name="width">
          <span data-ttu-id="e2281-444">扇形の描画元となる楕円を定義する外接する四角形の幅。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-444">The width of the bounding rectangle that defines the ellipse from which the pie is drawn.</span>
          </span>
        </param>
        <param name="height">
          <span data-ttu-id="e2281-445">扇形の描画元となる楕円を定義する外接する四角形の高さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-445">The height of the bounding rectangle that defines the ellipse from which the pie is drawn.</span>
          </span>
        </param>
        <param name="startAngle">
          <span data-ttu-id="e2281-446">x 軸から時計回りに測定した、扇型部分の開始角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-446">The starting angle for the pie section, measured in degrees clockwise from the x-axis.</span>
          </span>
        </param>
        <param name="sweepAngle">
          <span data-ttu-id="e2281-447">
            <c>startAngle</c> から時計回りで測定した、<c>startAngle</c> と扇型部分の終端との間の角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-447">The angle between <c>startAngle</c> and the end of the pie section, measured in degrees clockwise from <c>startAngle</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-448">パスに扇形のアウトラインを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-448">Adds the outline of a pie shape to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-449">扇形の形状は、楕円と交差する部分のアウトラインのエンドポイントを 2 つの放射状線の部分的なアウトラインによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-449">The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline.</span></span> <span data-ttu-id="e2281-450">部分的なアウトラインが始まります`startAngle`(x 軸から時計回りに測定した) で終わります`startAngle`  + `sweepAngle`です。</span><span class="sxs-lookup"><span data-stu-id="e2281-450">The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-451">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-451">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-452">このコードは、グラフィックス パスを作成、扇形の形状を追加し、画面にパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-452">The code creates a graphics path, adds the pie shape, and then draws the path to the screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPie">
      <MemberSignature Language="C#" Value="public void AddPie (float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPie(float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPie (x As Single, y As Single, width As Single, height As Single, startAngle As Single, sweepAngle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPie(float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-453">扇形の描画元となる楕円を定義する外接する四角形の左上隅の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-453">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-454">扇形の描画元となる楕円を定義する外接する四角形の左上隅の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-454">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn.</span>
          </span>
        </param>
        <param name="width">
          <span data-ttu-id="e2281-455">扇形の描画元となる楕円を定義する外接する四角形の幅。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-455">The width of the bounding rectangle that defines the ellipse from which the pie is drawn.</span>
          </span>
        </param>
        <param name="height">
          <span data-ttu-id="e2281-456">扇形の描画元となる楕円を定義する外接する四角形の高さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-456">The height of the bounding rectangle that defines the ellipse from which the pie is drawn.</span>
          </span>
        </param>
        <param name="startAngle">
          <span data-ttu-id="e2281-457">x 軸から時計回りに測定した、扇型部分の開始角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-457">The starting angle for the pie section, measured in degrees clockwise from the x-axis.</span>
          </span>
        </param>
        <param name="sweepAngle">
          <span data-ttu-id="e2281-458">
            <c>startAngle</c> から時計回りで測定した、<c>startAngle</c> と扇型部分の終端との間の角度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-458">The angle between <c>startAngle</c> and the end of the pie section, measured in degrees clockwise from <c>startAngle</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-459">パスに扇形のアウトラインを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-459">Adds the outline of a pie shape to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-460">扇形の形状は、楕円と交差する部分のアウトラインのエンドポイントを 2 つの放射状線の部分的なアウトラインによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-460">The pie shape is defined by a partial outline of an ellipse and the two radial lines that intersect the endpoints of the partial outline.</span></span> <span data-ttu-id="e2281-461">部分的なアウトラインが始まります`startAngle`(x 軸から時計回りに測定した) で終わります`startAngle`  + `sweepAngle`です。</span><span class="sxs-lookup"><span data-stu-id="e2281-461">The partial outline begins at `startAngle` (measured clockwise from the x-axis) and ends at `startAngle` + `sweepAngle`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-462">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddPie%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-462">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddPie%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-463">パスに多角形を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-463">Adds a polygon to this path.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddPolygon">
      <MemberSignature Language="C#" Value="public void AddPolygon (System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPolygon(valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPolygon (points As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPolygon(cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-464">追加する多角形を定義する <see cref="T:System.Drawing.Point" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-464">An array of <see cref="T:System.Drawing.Point" /> structures that defines the polygon to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-465">パスに多角形を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-465">Adds a polygon to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-466">内のポイント、`points`配列が多角形の頂点を指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-466">The points in the `points` array specify the vertices of a polygon.</span></span> <span data-ttu-id="e2281-467">配列の最初のポイントは、最後のポイントと同じではない、これら 2 つの点は多角形を閉じるに接続されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-467">If the first point in the array is not the same as the last point, those two points are connected to close the polygon.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-468">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-468">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-469">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-469">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-470">多角形を定義する点の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-470">Creates an array of points that defines a polygon.</span></span>  
  
-   <span data-ttu-id="e2281-471">パスを作成し、多角形をパスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-471">Creates a path and adds the polygon to the path.</span></span>  
  
-   <span data-ttu-id="e2281-472">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-472">Draws the path to the screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPolygon">
      <MemberSignature Language="C#" Value="public void AddPolygon (System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPolygon(valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPolygon (points As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPolygon(cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="points">
          <span data-ttu-id="e2281-473">追加する多角形を定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-473">An array of <see cref="T:System.Drawing.PointF" /> structures that defines the polygon to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-474">パスに多角形を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-474">Adds a polygon to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-475">内のポイント、`points`配列が多角形の頂点を指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-475">The points in the `points` array specify the vertices of a polygon.</span></span> <span data-ttu-id="e2281-476">配列の最初のポイントは、最後のポイントと同じではない、これら 2 つの点は多角形を閉じるに接続されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-476">If the first point in the array is not the same as the last point, those two points are connected to close the polygon.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-477">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddPolygon%28System.Drawing.Point%5B%5D%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-477">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddPolygon%28System.Drawing.Point%5B%5D%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-478">パスに四角形を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-478">Adds a rectangle to this path.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddRectangle">
      <MemberSignature Language="C#" Value="public void AddRectangle (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRectangle(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRectangle (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRectangle(System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          <span data-ttu-id="e2281-479">追加する四角形を表す <see cref="T:System.Drawing.Rectangle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-479">A <see cref="T:System.Drawing.Rectangle" /> that represents the rectangle to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-480">パスに四角形を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-480">Adds a rectangle to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-481">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-481">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-482">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-482">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-483">パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-483">Creates a path.</span></span>  
  
-   <span data-ttu-id="e2281-484">四角形を作成し、パスに四角形を追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-484">Creates a rectangle and adds the rectangle to the path.</span></span>  
  
-   <span data-ttu-id="e2281-485">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-485">Draws the path to the screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRectangle">
      <MemberSignature Language="C#" Value="public void AddRectangle (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRectangle(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRectangle (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRectangle(System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          <span data-ttu-id="e2281-486">追加する四角形を表す <see cref="T:System.Drawing.RectangleF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-486">A <see cref="T:System.Drawing.RectangleF" /> that represents the rectangle to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-487">パスに四角形を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-487">Adds a rectangle to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-488">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddRectangle%28System.Drawing.Rectangle%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-488">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddRectangle%28System.Drawing.Rectangle%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-489">パスに一連の四角形を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-489">Adds a series of rectangles to this path.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddRectangles">
      <MemberSignature Language="C#" Value="public void AddRectangles (System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRectangles(valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.Rectangle[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRectangles (rects As Rectangle())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRectangles(cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="rects">
          <span data-ttu-id="e2281-490">追加する四角形を表す <see cref="T:System.Drawing.Rectangle" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-490">An array of <see cref="T:System.Drawing.Rectangle" /> structures that represents the rectangles to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-491">パスに一連の四角形を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-491">Adds a series of rectangles to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-492">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-492">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-493">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-493">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-494">パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-494">Creates a path.</span></span>  
  
-   <span data-ttu-id="e2281-495">四角形の配列を作成し、パスに、四角形を追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-495">Creates an array of rectangles and adds the rectangles to the path.</span></span>  
  
-   <span data-ttu-id="e2281-496">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-496">Draws the path to the screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRectangles">
      <MemberSignature Language="C#" Value="public void AddRectangles (System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRectangles(valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.RectangleF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRectangles (rects As RectangleF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRectangles(cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="rects">
          <span data-ttu-id="e2281-497">追加する四角形を表す <see cref="T:System.Drawing.RectangleF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-497">An array of <see cref="T:System.Drawing.RectangleF" /> structures that represents the rectangles to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-498">パスに一連の四角形を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-498">Adds a series of rectangles to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-499">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddRectangles%28System.Drawing.Rectangle%5B%5D%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-499">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddRectangles%28System.Drawing.Rectangle%5B%5D%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-500">パスに文字列を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-500">Adds a text string to this path.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddString">
      <MemberSignature Language="C#" Value="public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.Point origin, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddString(string s, class System.Drawing.FontFamily family, int32 style, float32 emSize, valuetype System.Drawing.Point origin, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Point,System.Drawing.StringFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddString (s As String, family As FontFamily, style As Integer, emSize As Single, origin As Point, format As StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddString(System::String ^ s, System::Drawing::FontFamily ^ family, int style, float emSize, System::Drawing::Point origin, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="style" Type="System.Int32" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="origin" Type="System.Drawing.Point" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="e2281-501">追加する <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-501">The <see cref="T:System.String" /> to add.</span>
          </span>
        </param>
        <param name="family">
          <span data-ttu-id="e2281-502">テスト描画を行うときに使用するフォントの名前を表す <see cref="T:System.Drawing.FontFamily" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-502">A <see cref="T:System.Drawing.FontFamily" /> that represents the name of the font with which the test is drawn.</span>
          </span>
        </param>
        <param name="style">
          <span data-ttu-id="e2281-503">テキストに関するスタイル情報 (太字、斜体など) を表す <see cref="T:System.Drawing.FontStyle" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-503">A <see cref="T:System.Drawing.FontStyle" /> enumeration that represents style information about the text (bold, italic, and so on).</span>
          </span>
          <span data-ttu-id="e2281-504">この値は、整数としてキャストする必要があります (後のコード例を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-504">This must be cast as an integer (see the example code later in this section).</span>
          </span>
        </param>
        <param name="emSize">
          <span data-ttu-id="e2281-505">文字の境界を決める em 正方形ボックスの高さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-505">The height of the em square box that bounds the character.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="e2281-506">テキストを開始する点を表す <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-506">A <see cref="T:System.Drawing.Point" /> that represents the point where the text starts.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="e2281-507">行間や配置など、テキストの書式設定情報を指定する <see cref="T:System.Drawing.StringFormat" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-507">A <see cref="T:System.Drawing.StringFormat" /> that specifies text formatting information, such as line spacing and alignment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-508">パスに文字列を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-508">Adds a text string to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-509">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-509">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-510">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-510">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-511">パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-511">Creates a path.</span></span>  
  
-   <span data-ttu-id="e2281-512">文字列とフォントの引数を設定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-512">Sets up string and font arguments.</span></span>  
  
-   <span data-ttu-id="e2281-513">パスに、文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-513">Adds the string to the path.</span></span>  
  
-   <span data-ttu-id="e2281-514">画面に文字列を描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-514">Draws the string to the screen.</span></span>  
  
 <span data-ttu-id="e2281-515">2 つの重要な点があります。まず、ことに注意して、`fontStyle`引数は、整数としてキャストします。</span><span class="sxs-lookup"><span data-stu-id="e2281-515">There are two important things to be pointed out. First, notice that the `fontStyle` argument is cast as an integer.</span></span> <span data-ttu-id="e2281-516"><xref:System.Drawing.Drawing2D.GraphicsPath.AddString%2A>メソッド必要となりますのでそのうち 2 つ以上<xref:System.Drawing.FontStyle>目的のフォント スタイルを作成するメンバーを組み合わせることができます (この場合、<xref:System.Drawing.FontStyle.Italic>と<xref:System.Drawing.FontStyle.Underline>)。</span><span class="sxs-lookup"><span data-stu-id="e2281-516">The <xref:System.Drawing.Drawing2D.GraphicsPath.AddString%2A> method requires this so that two or more <xref:System.Drawing.FontStyle> members can be combined to create the desired font style (in this case, <xref:System.Drawing.FontStyle.Italic> and <xref:System.Drawing.FontStyle.Underline>).</span></span> <span data-ttu-id="e2281-517">次に、ことに注意して、<xref:System.Drawing.Graphics.FillPath%2A>メソッドを使用してではなく、<xref:System.Drawing.Graphics.DrawPath%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e2281-517">Secondly, notice that the <xref:System.Drawing.Graphics.FillPath%2A> method is used rather than the <xref:System.Drawing.Graphics.DrawPath%2A> method.</span></span> <span data-ttu-id="e2281-518">場合<xref:System.Drawing.Graphics.FillPath%2A>を使用する純色のテキストが表示され場合<xref:System.Drawing.Graphics.DrawPath%2A>はこれを使用すると、テキストになります、アウトラインのスタイル。</span><span class="sxs-lookup"><span data-stu-id="e2281-518">If <xref:System.Drawing.Graphics.FillPath%2A> is used, solid text is rendered, whereas if <xref:System.Drawing.Graphics.DrawPath%2A> is used, the text will be an outline style.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddString">
      <MemberSignature Language="C#" Value="public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.PointF origin, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddString(string s, class System.Drawing.FontFamily family, int32 style, float32 emSize, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddString (s As String, family As FontFamily, style As Integer, emSize As Single, origin As PointF, format As StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddString(System::String ^ s, System::Drawing::FontFamily ^ family, int style, float emSize, System::Drawing::PointF origin, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="style" Type="System.Int32" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="e2281-519">追加する <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-519">The <see cref="T:System.String" /> to add.</span>
          </span>
        </param>
        <param name="family">
          <span data-ttu-id="e2281-520">テスト描画を行うときに使用するフォントの名前を表す <see cref="T:System.Drawing.FontFamily" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-520">A <see cref="T:System.Drawing.FontFamily" /> that represents the name of the font with which the test is drawn.</span>
          </span>
        </param>
        <param name="style">
          <span data-ttu-id="e2281-521">テキストに関するスタイル情報 (太字、斜体など) を表す <see cref="T:System.Drawing.FontStyle" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-521">A <see cref="T:System.Drawing.FontStyle" /> enumeration that represents style information about the text (bold, italic, and so on).</span>
          </span>
          <span data-ttu-id="e2281-522">この値は、整数としてキャストする必要があります (後のコード例を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-522">This must be cast as an integer (see the example code later in this section).</span>
          </span>
        </param>
        <param name="emSize">
          <span data-ttu-id="e2281-523">文字の境界を決める em 正方形ボックスの高さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-523">The height of the em square box that bounds the character.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="e2281-524">テキストを開始する点を表す <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-524">A <see cref="T:System.Drawing.PointF" /> that represents the point where the text starts.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="e2281-525">行間や配置など、テキストの書式設定情報を指定する <see cref="T:System.Drawing.StringFormat" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-525">A <see cref="T:System.Drawing.StringFormat" /> that specifies text formatting information, such as line spacing and alignment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-526">パスに文字列を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-526">Adds a text string to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-527">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-527">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddString">
      <MemberSignature Language="C#" Value="public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.Rectangle layoutRect, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddString(string s, class System.Drawing.FontFamily family, int32 style, float32 emSize, valuetype System.Drawing.Rectangle layoutRect, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Rectangle,System.Drawing.StringFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddString (s As String, family As FontFamily, style As Integer, emSize As Single, layoutRect As Rectangle, format As StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddString(System::String ^ s, System::Drawing::FontFamily ^ family, int style, float emSize, System::Drawing::Rectangle layoutRect, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="style" Type="System.Int32" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="layoutRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="e2281-528">追加する <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-528">The <see cref="T:System.String" /> to add.</span>
          </span>
        </param>
        <param name="family">
          <span data-ttu-id="e2281-529">テスト描画を行うときに使用するフォントの名前を表す <see cref="T:System.Drawing.FontFamily" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-529">A <see cref="T:System.Drawing.FontFamily" /> that represents the name of the font with which the test is drawn.</span>
          </span>
        </param>
        <param name="style">
          <span data-ttu-id="e2281-530">テキストに関するスタイル情報 (太字、斜体など) を表す <see cref="T:System.Drawing.FontStyle" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-530">A <see cref="T:System.Drawing.FontStyle" /> enumeration that represents style information about the text (bold, italic, and so on).</span>
          </span>
          <span data-ttu-id="e2281-531">この値は、整数としてキャストする必要があります (後のコード例を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-531">This must be cast as an integer (see the example code later in this section).</span>
          </span>
        </param>
        <param name="emSize">
          <span data-ttu-id="e2281-532">文字の境界を決める em 正方形ボックスの高さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-532">The height of the em square box that bounds the character.</span>
          </span>
        </param>
        <param name="layoutRect">
          <span data-ttu-id="e2281-533">テキストに外接する四角形を表す <see cref="T:System.Drawing.Rectangle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-533">A <see cref="T:System.Drawing.Rectangle" /> that represents the rectangle that bounds the text.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="e2281-534">行間や配置など、テキストの書式設定情報を指定する <see cref="T:System.Drawing.StringFormat" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-534">A <see cref="T:System.Drawing.StringFormat" /> that specifies text formatting information, such as line spacing and alignment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-535">パスに文字列を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-535">Adds a text string to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-536">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-536">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddString">
      <MemberSignature Language="C#" Value="public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddString(string s, class System.Drawing.FontFamily family, int32 style, float32 emSize, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddString (s As String, family As FontFamily, style As Integer, emSize As Single, layoutRect As RectangleF, format As StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddString(System::String ^ s, System::Drawing::FontFamily ^ family, int style, float emSize, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="style" Type="System.Int32" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="e2281-537">追加する <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-537">The <see cref="T:System.String" /> to add.</span>
          </span>
        </param>
        <param name="family">
          <span data-ttu-id="e2281-538">テスト描画を行うときに使用するフォントの名前を表す <see cref="T:System.Drawing.FontFamily" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-538">A <see cref="T:System.Drawing.FontFamily" /> that represents the name of the font with which the test is drawn.</span>
          </span>
        </param>
        <param name="style">
          <span data-ttu-id="e2281-539">テキストに関するスタイル情報 (太字、斜体など) を表す <see cref="T:System.Drawing.FontStyle" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-539">A <see cref="T:System.Drawing.FontStyle" /> enumeration that represents style information about the text (bold, italic, and so on).</span>
          </span>
          <span data-ttu-id="e2281-540">この値は、整数としてキャストする必要があります (後のコード例を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-540">This must be cast as an integer (see the example code later in this section).</span>
          </span>
        </param>
        <param name="emSize">
          <span data-ttu-id="e2281-541">文字の境界を決める em 正方形ボックスの高さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-541">The height of the em square box that bounds the character.</span>
          </span>
        </param>
        <param name="layoutRect">
          <span data-ttu-id="e2281-542">テキストに外接する四角形を表す <see cref="T:System.Drawing.RectangleF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-542">A <see cref="T:System.Drawing.RectangleF" /> that represents the rectangle that bounds the text.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="e2281-543">行間や配置など、テキストの書式設定情報を指定する <see cref="T:System.Drawing.StringFormat" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-543">A <see cref="T:System.Drawing.StringFormat" /> that specifies text formatting information, such as line spacing and alignment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-544">パスに文字列を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-544">Adds a text string to this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-545">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-545">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearMarkers">
      <MemberSignature Language="C#" Value="public void ClearMarkers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearMarkers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.ClearMarkers" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearMarkers ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearMarkers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-546">パスからすべてのマーカーを消去します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-546">Clears all markers from this path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-547">使用して、<xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>で現在の位置にマーカーを作成する方法、<xref:System.Drawing.Drawing2D.GraphicsPath>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-547">Use the <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> method to create a marker at the current location in a <xref:System.Drawing.Drawing2D.GraphicsPath>.</span></span> <span data-ttu-id="e2281-548">使用して、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>パス内の既存のマーカーを反復処理するメソッド。</span><span class="sxs-lookup"><span data-stu-id="e2281-548">Use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> method to iterate through the existing markers in a path.</span></span>  
  
 <span data-ttu-id="e2281-549">マーカーは、個別のサブパスのグループに使用されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-549">Markers are used to separate groups of subpaths.</span></span> <span data-ttu-id="e2281-550">2 つのマーカーの間で 1 つまたは複数のサブパスが含まれていることができます。</span><span class="sxs-lookup"><span data-stu-id="e2281-550">One or more subpaths can be contained between two markers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-551">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-551">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-552">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-552">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-553">パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-553">Creates a path.</span></span>  
  
-   <span data-ttu-id="e2281-554">いくつかのオブジェクトをパスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-554">Adds several objects to the path.</span></span>  
  
-   <span data-ttu-id="e2281-555">パスにマーカーを追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-555">Adds markers to the path.</span></span>  
  
-   <span data-ttu-id="e2281-556">パスからのすべてのマーカーをクリアします。</span><span class="sxs-lookup"><span data-stu-id="e2281-556">Clears all markers from the path.</span></span>  
  
-   <span data-ttu-id="e2281-557">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-557">Draws the path to the screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-558">このパスの同一コピーを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-558">Creates an exact copy of this path.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-559">このメソッドが作成し、オブジェクトとしてキャストされる <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-559">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> this method creates, cast as an object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-560">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-560">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-561">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-561">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-562">パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-562">Creates a path.</span></span>  
  
-   <span data-ttu-id="e2281-563">複数の図形をパスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-563">Adds several figures to the path.</span></span>  
  
-   <span data-ttu-id="e2281-564">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-564">Draws the path to the screen.</span></span>  
  
-   <span data-ttu-id="e2281-565">そのパスのコピーを複製します。</span><span class="sxs-lookup"><span data-stu-id="e2281-565">Clones a copy of that path.</span></span>  
  
-   <span data-ttu-id="e2281-566">画面に新しいパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-566">Draws the new path to the screen.</span></span>  
  
 <span data-ttu-id="e2281-567">注意して呼び出し、<xref:System.Drawing.Drawing2D.GraphicsPath.Clone%2A>としてメソッドをキャストする必要があります、<xref:System.Drawing.Drawing2D.GraphicsPath>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-567">Notice that the call the <xref:System.Drawing.Drawing2D.GraphicsPath.Clone%2A> method must be cast as a <xref:System.Drawing.Drawing2D.GraphicsPath>.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseAllFigures">
      <MemberSignature Language="C#" Value="public void CloseAllFigures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CloseAllFigures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures" />
      <MemberSignature Language="VB.NET" Value="Public Sub CloseAllFigures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CloseAllFigures();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-568">このパスで開いているすべての図形を閉じ、新しい図形を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-568">Closes all open figures in this path and starts a new figure.</span>
          </span>
          <span data-ttu-id="e2281-569">開いている各図形は、その終了点と開始点を直線で接続することで閉じられます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-569">It closes each open figure by connecting a line from its endpoint to its starting point.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-570">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-570">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-571">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-571">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-572">パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-572">Creates a path.</span></span>  
  
-   <span data-ttu-id="e2281-573">いくつかの開いている図形をパスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-573">Adds several open figures to the path.</span></span>  
  
-   <span data-ttu-id="e2281-574">パスのすべての図形を閉じます。</span><span class="sxs-lookup"><span data-stu-id="e2281-574">Closes all figures in the path.</span></span>  
  
-   <span data-ttu-id="e2281-575">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-575">Draws the path to the screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseFigure">
      <MemberSignature Language="C#" Value="public void CloseFigure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CloseFigure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.CloseFigure" />
      <MemberSignature Language="VB.NET" Value="Public Sub CloseFigure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CloseFigure();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-576">現在の図形を閉じ、新しい図形を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-576">Closes the current figure and starts a new figure.</span>
          </span>
          <span data-ttu-id="e2281-577">現在の図形に接続された直線と曲線のシーケンスが含まれる場合、このメソッドは終了点と開始点を直線で接続することでループを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-577">If the current figure contains a sequence of connected lines and curves, the method closes the loop by connecting a line from the endpoint to the starting point.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-578">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-578">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-579">コードでは、新しいパスを作成し、図を開始、図を次の 2 つの交差する行を追加する三角形を構成する図を閉じて三角形を作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-579">The code creates a triangle by creating a new path, starting a figure, adding two intersecting lines to the figure, and then closing the figure to form a triangle.</span></span> <span data-ttu-id="e2281-580">パスは、画面に描画されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-580">The path is then drawn to the screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-581">この <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> によって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-581">Releases all resources used by this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-582">呼び出す<xref:System.Drawing.Drawing2D.GraphicsPath.Dispose%2A>により、これによって使用されるリソース<xref:System.Drawing.Drawing2D.GraphicsPath>を他の目的に再割り当てされます。</span><span class="sxs-lookup"><span data-stu-id="e2281-582">Calling <xref:System.Drawing.Drawing2D.GraphicsPath.Dispose%2A> allows the resources used by this <xref:System.Drawing.Drawing2D.GraphicsPath> to be reallocated for other purposes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.FillMode FillMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.FillMode FillMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPath.FillMode" />
      <MemberSignature Language="VB.NET" Value="Public Property FillMode As FillMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::FillMode FillMode { System::Drawing::Drawing2D::FillMode get(); void set(System::Drawing::Drawing2D::FillMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.FillMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-583">この <see cref="T:System.Drawing.Drawing2D.FillMode" /> の形状の内部を塗りつぶす方法を決定する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 列挙体を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-583">Gets or sets a <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> are filled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2281-584">
            <see cref="T:System.Drawing.Drawing2D.FillMode" /> の形状の内部を塗りつぶす方法を指定する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-584">A <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that specifies how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> are filled.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPath ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!GraphicsPath ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-585">オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-585">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flatten">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-586">パスの各曲線を、接続された線分のシーケンスに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-586">Converts each curve in this path into a sequence of connected line segments.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flatten">
      <MemberSignature Language="C#" Value="public void Flatten ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flatten() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Flatten" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flatten ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flatten();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-587">パスの各曲線を、接続された線分のシーケンスに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-587">Converts each curve in this path into a sequence of connected line segments.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-588">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%28System.Drawing.Drawing2D.Matrix%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-588">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%28System.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flatten">
      <MemberSignature Language="C#" Value="public void Flatten (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flatten(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flatten(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">
          <span data-ttu-id="e2281-589">平坦化の前に <see cref="T:System.Drawing.Drawing2D.Matrix" /> を変換する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-589">A <see cref="T:System.Drawing.Drawing2D.Matrix" /> by which to transform this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> before flattening.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-590">指定された変換を適用し、<see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の各曲線を、接続された線分のシーケンスに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-590">Applies the specified transform and then converts each curve in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> into a sequence of connected line segments.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-591">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%28System.Drawing.Drawing2D.Matrix%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-591">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%28System.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flatten">
      <MemberSignature Language="C#" Value="public void Flatten (System.Drawing.Drawing2D.Matrix matrix, float flatness);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flatten(class System.Drawing.Drawing2D.Matrix matrix, float32 flatness) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flatten(System::Drawing::Drawing2D::Matrix ^ matrix, float flatness);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="flatness" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="matrix">
          <span data-ttu-id="e2281-592">平坦化の前に <see cref="T:System.Drawing.Drawing2D.Matrix" /> を変換する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-592">A <see cref="T:System.Drawing.Drawing2D.Matrix" /> by which to transform this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> before flattening.</span>
          </span>
        </param>
        <param name="flatness">
          <span data-ttu-id="e2281-593">曲線とそれを平坦化した近似線との間で許容される最大の誤差を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-593">Specifies the maximum permitted error between the curve and its flattened approximation.</span>
          </span>
          <span data-ttu-id="e2281-594">既定値は 0.25 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-594">A value of 0.25 is the default.</span>
          </span>
          <span data-ttu-id="e2281-595">平坦化の値を小さくすると、近似線の線分の数が増加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-595">Reducing the flatness value will increase the number of line segments in the approximation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-596">この <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の各曲線を、接続された線分のシーケンスに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-596">Converts each curve in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> into a sequence of connected line segments.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-597">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-597">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-598">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-598">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-599">グラフィックス パスと平行移動行列を作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-599">Creates a graphics path and a translation matrix.</span></span>  
  
-   <span data-ttu-id="e2281-600">曲線を 4 つのポイントを使用して、パスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-600">Adds a curve to the path using four points.</span></span>  
  
-   <span data-ttu-id="e2281-601">黒のペンを使用して、画面に (曲線) のパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-601">Draws the path (curve) to the screen, using a black pen.</span></span>  
  
-   <span data-ttu-id="e2281-602">10 ピクセル ダウン曲線をシフトし、平坦化します。</span><span class="sxs-lookup"><span data-stu-id="e2281-602">Shifts the curve down 10 pixels and flattens it.</span></span>  
  
-   <span data-ttu-id="e2281-603">赤のペンを使用して、画面には、曲線を描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-603">Draws the curve to the screen using, a red pen.</span></span>  
  
 <span data-ttu-id="e2281-604">赤の曲線がの点を結ぶ線をフラット化されたことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-604">Notice that the red curve has flattened lines connecting the points.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBounds">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-605">この <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に外接する四角形を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-605">Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF GetBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.RectangleF GetBounds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.GetBounds" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBounds () As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::RectangleF GetBounds();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-606">この <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に外接する四角形を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-606">Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-607">この <see cref="T:System.Drawing.RectangleF" /> に外接する四角形を表す <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-607">A <see cref="T:System.Drawing.RectangleF" /> that represents a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-608">返される外接する四角形のサイズは、端点キャップ、ペンの幅、およびペン マイターの種類によって異なり、そのため、範囲指定されたパスに「loose 合わせる」を生成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-608">The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a "loose fit" to the bounded path.</span></span> <span data-ttu-id="e2281-609">おおよその数式は、: 初期の外接する四角形がペンの幅によって大きくし、この結果は、マイター plus の端点キャップを許可する追加の余白によって乗算されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-609">The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-610">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-610">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-611">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-611">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-612">グラフィックス パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-612">Creates a graphics path.</span></span>  
  
-   <span data-ttu-id="e2281-613">楕円 (円) を追加し、画面に描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-613">Adds an ellipse (circle) to it and draws it to the screen.</span></span>  
  
-   <span data-ttu-id="e2281-614">呼び出しで円に外接する四角形を取得<xref:System.Drawing.Drawing2D.GraphicsPath.GetBounds%2A>し、画面に四角形を描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-614">Retrieves the bounding rectangle for the circle with a call to <xref:System.Drawing.Drawing2D.GraphicsPath.GetBounds%2A> and draws the rectangle to the screen.</span></span>  
  
-   <span data-ttu-id="e2281-615">2 番目のグラフィックス パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-615">Creates a second graphics path.</span></span>  
  
-   <span data-ttu-id="e2281-616">円を追加し、パスを 10 文字の幅を拡大します。</span><span class="sxs-lookup"><span data-stu-id="e2281-616">Adds a circle and widens the path to a width of 10.</span></span>  
  
-   <span data-ttu-id="e2281-617">画面へのパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-617">Draws the path to the screen.</span></span>  
  
-   <span data-ttu-id="e2281-618">2 番目の円の外接する四角形を取得します。</span><span class="sxs-lookup"><span data-stu-id="e2281-618">Retrieves the bounding rectangle for the second circle.</span></span>  
  
-   <span data-ttu-id="e2281-619">画面に外接する四角形を描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-619">Draws the bounding rectangle to the screen.</span></span>  
  
-   <span data-ttu-id="e2281-620">ダイアログ ボックスで、四角形のサイズを表示します。</span><span class="sxs-lookup"><span data-stu-id="e2281-620">Displays the rectangle size in a dialog box.</span></span>  
  
 <span data-ttu-id="e2281-621">右側の外接する四角形が (行の追加の幅のアカウント) を大きくすることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-621">Notice that the bounding rectangle on the right is larger (to account for the extra width of the line).</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF GetBounds (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.RectangleF GetBounds(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::RectangleF GetBounds(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">
          <span data-ttu-id="e2281-622">外接する四角形を計算する前に、このパスに適用される変換を指定する <see cref="T:System.Drawing.Drawing2D.Matrix" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-622">The <see cref="T:System.Drawing.Drawing2D.Matrix" /> that specifies a transformation to be applied to this path before the bounding rectangle is calculated.</span>
          </span>
          <span data-ttu-id="e2281-623">パスは恒久的に変換されるわけではありません。変換は、外接する四角形を計算する処理の中だけで使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-623">This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-624">このパスが指定された <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に変換されたときに、この <see cref="T:System.Drawing.Drawing2D.Matrix" /> に外接する四角形を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-624">Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when this path is transformed by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-625">この <see cref="T:System.Drawing.RectangleF" /> に外接する四角形を表す <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-625">A <see cref="T:System.Drawing.RectangleF" /> that represents a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-626">返される外接する四角形のサイズは、端点キャップ、ペンの幅、およびペン マイターの種類によって異なり、そのため、範囲指定されたパスに「loose 合わせる」を生成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-626">The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a "loose fit" to the bounded path.</span></span> <span data-ttu-id="e2281-627">おおよその数式は、: 初期の外接する四角形がペンの幅によって大きくし、この結果は、マイター plus の端点キャップを許可する追加の余白によって乗算されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-627">The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-628">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.GetBounds>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-628">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.GetBounds>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF GetBounds (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Pen pen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.RectangleF GetBounds(class System.Drawing.Drawing2D.Matrix matrix, class System.Drawing.Pen pen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.Pen)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::RectangleF GetBounds(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Pen ^ pen);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="pen" Type="System.Drawing.Pen" />
      </Parameters>
      <Docs>
        <param name="matrix">
          <span data-ttu-id="e2281-629">外接する四角形を計算する前に、このパスに適用される変換を指定する <see cref="T:System.Drawing.Drawing2D.Matrix" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-629">The <see cref="T:System.Drawing.Drawing2D.Matrix" /> that specifies a transformation to be applied to this path before the bounding rectangle is calculated.</span>
          </span>
          <span data-ttu-id="e2281-630">パスは恒久的に変換されるわけではありません。変換は、外接する四角形を計算する処理の中だけで使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-630">This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle.</span>
          </span>
        </param>
        <param name="pen">
          <span data-ttu-id="e2281-631">
            <see cref="T:System.Drawing.Pen" /> の描画に使用する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-631">The <see cref="T:System.Drawing.Pen" /> with which to draw the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-632">現在のパスが指定された <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> によって変換され、指定された <see cref="T:System.Drawing.Drawing2D.Matrix" /> で描画されるときに、この <see cref="T:System.Drawing.Pen" /> に外接する四角形を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-632">Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when the current path is transformed by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" /> and drawn with the specified <see cref="T:System.Drawing.Pen" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-633">この <see cref="T:System.Drawing.RectangleF" /> に外接する四角形を表す <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-633">A <see cref="T:System.Drawing.RectangleF" /> that represents a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-634">返される外接する四角形のサイズは、端点キャップ、ペンの幅、およびペン マイターの種類によって異なり、そのため、範囲指定されたパスに「loose 合わせる」を生成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-634">The size of the returned bounding rectangle is influenced by the type of end caps, pen width, and pen miter limit, and therefore produces a "loose fit" to the bounded path.</span></span> <span data-ttu-id="e2281-635">おおよその数式は、: 初期の外接する四角形がペンの幅によって大きくし、この結果は、マイター plus の端点キャップを許可する追加の余白によって乗算されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-635">The approximate formula is: the initial bounding rectangle is inflated by pen width, and this result is multiplied by the miter limit, plus some additional margin to allow for end caps.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-636">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.GetBounds>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-636">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.GetBounds>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLastPoint">
      <MemberSignature Language="C#" Value="public System.Drawing.PointF GetLastPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.PointF GetLastPoint() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.GetLastPoint" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastPoint () As PointF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::PointF GetLastPoint();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-637">この <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> の <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 配列内の最後の点を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-637">Gets the last point in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> array of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-638">この <see cref="T:System.Drawing.PointF" /> の最後の点を表す <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-638">A <see cref="T:System.Drawing.PointF" /> that represents the last point in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-639">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-639">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-640">コードは、パスを作成し、パスに 1 行を追加、パスの最後のポイントを取得します。</span><span class="sxs-lookup"><span data-stu-id="e2281-640">The code creates a path, adds a line to the path, and then gets the last point in the path.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsOutlineVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-641">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画された場合に、指定した点が <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-641">Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsOutlineVisible">
      <MemberSignature Language="C#" Value="public bool IsOutlineVisible (System.Drawing.Point point, System.Drawing.Pen pen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOutlineVisible(valuetype System.Drawing.Point point, class System.Drawing.Pen pen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOutlineVisible(System::Drawing::Point point, System::Drawing::Pen ^ pen);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
        <Parameter Name="pen" Type="System.Drawing.Pen" />
      </Parameters>
      <Docs>
        <param name="point">
          <span data-ttu-id="e2281-642">テストする場所を指定する <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-642">A <see cref="T:System.Drawing.Point" /> that specifies the location to test.</span>
          </span>
        </param>
        <param name="pen">
          <span data-ttu-id="e2281-643">テスト対象の <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-643">The <see cref="T:System.Drawing.Pen" /> to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-644">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画された場合に、指定した点が <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-644">Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-645">このメソッドは、指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画した場合、指定した点が <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-645">This method returns <see langword="true" /> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-646">このメソッドは、指定されたパスのアウトラインが表示される指定した位置に表示されてかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e2281-646">This method tests to see if the outline of a given path is rendered visible at the specified point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-647">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-647">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutlineVisible">
      <MemberSignature Language="C#" Value="public bool IsOutlineVisible (System.Drawing.PointF point, System.Drawing.Pen pen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOutlineVisible(valuetype System.Drawing.PointF point, class System.Drawing.Pen pen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOutlineVisible(System::Drawing::PointF point, System::Drawing::Pen ^ pen);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="pen" Type="System.Drawing.Pen" />
      </Parameters>
      <Docs>
        <param name="point">
          <span data-ttu-id="e2281-648">テストする場所を指定する <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-648">A <see cref="T:System.Drawing.PointF" /> that specifies the location to test.</span>
          </span>
        </param>
        <param name="pen">
          <span data-ttu-id="e2281-649">テスト対象の <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-649">The <see cref="T:System.Drawing.Pen" /> to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-650">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画された場合に、指定した点が <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-650">Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-651">このメソッドは、指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画した場合、指定した点が <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-651">This method returns <see langword="true" /> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-652">このメソッドは、指定されたパスのアウトラインが表示される指定した位置に表示されてかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e2281-652">This method tests to see if the outline of a given path is rendered visible at the specified point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-653">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-653">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutlineVisible">
      <MemberSignature Language="C#" Value="public bool IsOutlineVisible (System.Drawing.Point pt, System.Drawing.Pen pen, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOutlineVisible(valuetype System.Drawing.Point pt, class System.Drawing.Pen pen, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOutlineVisible(System::Drawing::Point pt, System::Drawing::Pen ^ pen, System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="pt">
          <span data-ttu-id="e2281-654">テストする場所を指定する <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-654">A <see cref="T:System.Drawing.Point" /> that specifies the location to test.</span>
          </span>
        </param>
        <param name="pen">
          <span data-ttu-id="e2281-655">テスト対象の <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-655">The <see cref="T:System.Drawing.Pen" /> to test.</span>
          </span>
        </param>
        <param name="graphics">
          <span data-ttu-id="e2281-656">参照可能範囲をテストする <see cref="T:System.Drawing.Graphics" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-656">The <see cref="T:System.Drawing.Graphics" /> for which to test visibility.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-657">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画され、指定した <see cref="T:System.Drawing.Pen" /> を使用している場合に、指定した点が <see cref="T:System.Drawing.Graphics" /> のアウトラインの中に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-657">Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" /> and using the specified <see cref="T:System.Drawing.Graphics" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-658">このメソッドは、指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画したときに、指定した点がこの <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-658">This method returns <see langword="true" /> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> as drawn with the specified <see cref="T:System.Drawing.Pen" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-659">このメソッドは、指定されたパスのアウトラインが表示される指定した位置に表示されてかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e2281-659">This method tests to see if the outline of a given path is rendered visible at the specified point.</span></span> <span data-ttu-id="e2281-660">テストする点の座標は、世界の座標で表されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-660">The coordinates of the point to be tested are given in world coordinates.</span></span> <span data-ttu-id="e2281-661">変換行列`graphics`可視性をテストする前に一時的に適用されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-661">The transform matrix of `graphics` is temporarily applied before testing for visibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-662">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-662">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutlineVisible">
      <MemberSignature Language="C#" Value="public bool IsOutlineVisible (System.Drawing.PointF pt, System.Drawing.Pen pen, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOutlineVisible(valuetype System.Drawing.PointF pt, class System.Drawing.Pen pen, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOutlineVisible(System::Drawing::PointF pt, System::Drawing::Pen ^ pen, System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.PointF" />
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="pt">
          <span data-ttu-id="e2281-663">テストする場所を指定する <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-663">A <see cref="T:System.Drawing.PointF" /> that specifies the location to test.</span>
          </span>
        </param>
        <param name="pen">
          <span data-ttu-id="e2281-664">テスト対象の <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-664">The <see cref="T:System.Drawing.Pen" /> to test.</span>
          </span>
        </param>
        <param name="graphics">
          <span data-ttu-id="e2281-665">参照可能範囲をテストする <see cref="T:System.Drawing.Graphics" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-665">The <see cref="T:System.Drawing.Graphics" /> for which to test visibility.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-666">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画され、指定した <see cref="T:System.Drawing.Pen" /> を使用している場合に、指定した点が <see cref="T:System.Drawing.Graphics" /> のアウトラインの中に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-666">Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" /> and using the specified <see cref="T:System.Drawing.Graphics" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-667">このメソッドは、指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画したときに、指定した点がこの <see cref="T:System.Drawing.Pen" /> アウトラインの中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-667">This method returns <see langword="true" /> if the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> as drawn with the specified <see cref="T:System.Drawing.Pen" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-668">このメソッドは、指定されたパスのアウトラインが表示される指定した位置に表示されてかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e2281-668">This method tests to see if the outline of a given path is rendered visible at the specified point.</span></span> <span data-ttu-id="e2281-669">テストする点の座標は、世界の座標で表されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-669">The coordinates of the point to be tested are given in world coordinates.</span></span> <span data-ttu-id="e2281-670">変換行列`graphics`可視性をテストする前に一時的に適用されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-670">The transform matrix of `graphics` is temporarily applied before testing for visibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-671">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-671">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutlineVisible">
      <MemberSignature Language="C#" Value="public bool IsOutlineVisible (int x, int y, System.Drawing.Pen pen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOutlineVisible(int32 x, int32 y, class System.Drawing.Pen pen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOutlineVisible(int x, int y, System::Drawing::Pen ^ pen);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="pen" Type="System.Drawing.Pen" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-672">テストする点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-672">The x-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-673">テストする点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-673">The y-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="pen">
          <span data-ttu-id="e2281-674">テスト対象の <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-674">The <see cref="T:System.Drawing.Pen" /> to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-675">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画された場合に、指定した点が <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-675">Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-676">このメソッドは、指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画した場合、指定した点が <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-676">This method returns <see langword="true" /> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-677">このメソッドは、指定されたパスのアウトラインが表示される指定した位置に表示されてかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e2281-677">This method tests to see if the outline of a given path is rendered visible at the specified point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-678">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-678">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutlineVisible">
      <MemberSignature Language="C#" Value="public bool IsOutlineVisible (float x, float y, System.Drawing.Pen pen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOutlineVisible(float32 x, float32 y, class System.Drawing.Pen pen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOutlineVisible(float x, float y, System::Drawing::Pen ^ pen);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="pen" Type="System.Drawing.Pen" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-679">テストする点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-679">The x-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-680">テストする点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-680">The y-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="pen">
          <span data-ttu-id="e2281-681">テスト対象の <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-681">The <see cref="T:System.Drawing.Pen" /> to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-682">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画された場合に、指定した点が <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-682">Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-683">このメソッドは、指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画した場合、指定した点が <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-683">This method returns <see langword="true" /> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-684">このメソッドは、指定されたパスのアウトラインが表示される指定した位置に表示されてかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e2281-684">This method tests to see if the outline of a given path is rendered visible at the specified point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-685">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-685">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutlineVisible">
      <MemberSignature Language="C#" Value="public bool IsOutlineVisible (int x, int y, System.Drawing.Pen pen, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOutlineVisible(int32 x, int32 y, class System.Drawing.Pen pen, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOutlineVisible(int x, int y, System::Drawing::Pen ^ pen, System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-686">テストする点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-686">The x-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-687">テストする点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-687">The y-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="pen">
          <span data-ttu-id="e2281-688">テスト対象の <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-688">The <see cref="T:System.Drawing.Pen" /> to test.</span>
          </span>
        </param>
        <param name="graphics">
          <span data-ttu-id="e2281-689">参照可能範囲をテストする <see cref="T:System.Drawing.Graphics" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-689">The <see cref="T:System.Drawing.Graphics" /> for which to test visibility.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-690">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画され、指定した <see cref="T:System.Drawing.Pen" /> を使用している場合に、指定した点が <see cref="T:System.Drawing.Graphics" /> のアウトラインの中に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-690">Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" /> and using the specified <see cref="T:System.Drawing.Graphics" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-691">このメソッドは、指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画したときに、指定した点がこの <see cref="T:System.Drawing.Pen" /> のアウトラインの中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-691">This method returns <see langword="true" /> if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> as drawn with the specified <see cref="T:System.Drawing.Pen" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-692">このメソッドは、指定されたパスのアウトラインが表示される指定した位置に表示されてかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e2281-692">This method tests to see if the outline of a given path is rendered visible at the specified point.</span></span> <span data-ttu-id="e2281-693">テストする点の座標は、世界の座標で表されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-693">The coordinates of the point to be tested are given in world coordinates.</span></span> <span data-ttu-id="e2281-694">変換行列`graphics`可視性をテストする前に一時的に適用されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-694">The transform matrix of `graphics` is temporarily applied before testing for visibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-695">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント。</span><span class="sxs-lookup"><span data-stu-id="e2281-695">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event.</span></span> <span data-ttu-id="e2281-696">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-696">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-697">パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-697">Creates a path.</span></span>  
  
-   <span data-ttu-id="e2281-698">パスに四角形を追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-698">Adds a rectangle to the path.</span></span>  
  
-   <span data-ttu-id="e2281-699">幅の広いペンを作成し、そのペンで (わかりやすい例を作成する) ため、パスを拡大変換</span><span class="sxs-lookup"><span data-stu-id="e2281-699">Creates a wide pen and widens the path with that pen (to make the example clearer),</span></span>  
  
-   <span data-ttu-id="e2281-700">かどうかにある四角形のエッジのいずれか (下) 内で呼び出すことによって表示する点 (100, 50) をテスト<xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-700">Tests a point (100, 50) to see if it lies within (under) one of the edges of the rectangle by calling <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%2A>.</span></span>  
  
 <span data-ttu-id="e2281-701">(この場合、true の場合)、メッセージ ボックスに、結果が表示されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-701">The result is shown in the message box (in this case, true).</span></span> <span data-ttu-id="e2281-702">つまり、エッジはその点の上に表示されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-702">In other words the edge is rendered over that point.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutlineVisible">
      <MemberSignature Language="C#" Value="public bool IsOutlineVisible (float x, float y, System.Drawing.Pen pen, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOutlineVisible(float32 x, float32 y, class System.Drawing.Pen pen, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOutlineVisible(float x, float y, System::Drawing::Pen ^ pen, System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-703">テストする点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-703">The x-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-704">テストする点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-704">The y-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="pen">
          <span data-ttu-id="e2281-705">テスト対象の <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-705">The <see cref="T:System.Drawing.Pen" /> to test.</span>
          </span>
        </param>
        <param name="graphics">
          <span data-ttu-id="e2281-706">参照可能範囲をテストする <see cref="T:System.Drawing.Graphics" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-706">The <see cref="T:System.Drawing.Graphics" /> for which to test visibility.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-707">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画され、指定した <see cref="T:System.Drawing.Pen" /> を使用している場合に、指定した点が <see cref="T:System.Drawing.Graphics" /> のアウトラインの中に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-707">Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> when drawn with the specified <see cref="T:System.Drawing.Pen" /> and using the specified <see cref="T:System.Drawing.Graphics" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-708">このメソッドは、指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> で描画したときに、指定した点がこの <see cref="T:System.Drawing.Pen" /> アウトラインの中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-708">This method returns <see langword="true" /> if the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> as drawn with the specified <see cref="T:System.Drawing.Pen" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-709">このメソッドは、指定されたパスのアウトラインが表示される指定した位置に表示されてかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e2281-709">This method tests to see if the outline of a given path is rendered visible at the specified point.</span></span> <span data-ttu-id="e2281-710">テストする点の座標は、世界の座標で表されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-710">The coordinates of the point to be tested are given in world coordinates.</span></span> <span data-ttu-id="e2281-711">変換行列の`graphics`パラメーターは、可視性をテストする前に一時的に適用します。</span><span class="sxs-lookup"><span data-stu-id="e2281-711">The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-712">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-712">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-713">指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-713">Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <span data-ttu-id="e2281-714">テストする点を表す <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-714">A <see cref="T:System.Drawing.Point" /> that represents the point to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-715">指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-715">Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-716">このメソッドは、指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-716">This method returns <see langword="true" /> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-717">例については、「`GraphicsPath.IsVisible Method (Int32, Int32, Graphics)`」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-717">For an example, see `GraphicsPath.IsVisible Method (Int32, Int32, Graphics)`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">
          <span data-ttu-id="e2281-718">テストする点を表す <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-718">A <see cref="T:System.Drawing.PointF" /> that represents the point to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-719">指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-719">Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-720">このメソッドは、指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-720">This method returns <see langword="true" /> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-721">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-721">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point pt, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point pt, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point pt, System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="pt">
          <span data-ttu-id="e2281-722">テストする点を表す <see cref="T:System.Drawing.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-722">A <see cref="T:System.Drawing.Point" /> that represents the point to test.</span>
          </span>
        </param>
        <param name="graphics">
          <span data-ttu-id="e2281-723">参照可能範囲をテストする <see cref="T:System.Drawing.Graphics" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-723">The <see cref="T:System.Drawing.Graphics" /> for which to test visibility.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-724">指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-724">Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-725">このメソッドは、指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-725">This method returns <see langword="true" /> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-726">テストする点の座標は、世界の座標で表されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-726">The coordinates of the point to be tested are given in world coordinates.</span></span> <span data-ttu-id="e2281-727">変換行列の`graphics`パラメーターは、可視性をテストする前に一時的に適用します。</span><span class="sxs-lookup"><span data-stu-id="e2281-727">The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-728">例については、「`GraphicsPath.IsVisible Method (Int32, Int32, Graphics)`」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-728">For an example, see `GraphicsPath.IsVisible Method (Int32, Int32, Graphics)`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF pt, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF pt, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF pt, System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.PointF" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="pt">
          <span data-ttu-id="e2281-729">テストする点を表す <see cref="T:System.Drawing.PointF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-729">A <see cref="T:System.Drawing.PointF" /> that represents the point to test.</span>
          </span>
        </param>
        <param name="graphics">
          <span data-ttu-id="e2281-730">参照可能範囲をテストする <see cref="T:System.Drawing.Graphics" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-730">The <see cref="T:System.Drawing.Graphics" /> for which to test visibility.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-731">指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-731">Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-732">このメソッドは、指定した点がこのオブジェクトの中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-732">This method returns <see langword="true" /> if the specified point is contained within this; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-733">テストする点の座標は、世界の座標で表されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-733">The coordinates of the point to be tested are given in world coordinates.</span></span> <span data-ttu-id="e2281-734">変換行列の`graphics`パラメーターは、可視性をテストする前に一時的に適用します。</span><span class="sxs-lookup"><span data-stu-id="e2281-734">The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-735">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-735">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-736">テストする点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-736">The x-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-737">テストする点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-737">The y-coordinate of the point to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-738">指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-738">Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-739">このメソッドは、指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-739">This method returns <see langword="true" /> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-740">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-740">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-741">テストする点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-741">The x-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-742">テストする点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-742">The y-coordinate of the point to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-743">指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-743">Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-744">このメソッドは、指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-744">This method returns <see langword="true" /> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-745">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-745">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-746">テストする点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-746">The x-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-747">テストする点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-747">The y-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="graphics">
          <span data-ttu-id="e2281-748">参照可能範囲をテストする <see cref="T:System.Drawing.Graphics" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-748">The <see cref="T:System.Drawing.Graphics" /> for which to test visibility.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-749">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> を使用して、指定した点が <see cref="T:System.Drawing.Graphics" /> 内に含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-749">Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />, using the specified <see cref="T:System.Drawing.Graphics" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-750">このメソッドは、指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-750">This method returns <see langword="true" /> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-751">テストする点の座標は、世界の座標で表されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-751">The coordinates of the point to be tested are given in world coordinates.</span></span> <span data-ttu-id="e2281-752">変換行列`graphics`可視性をテストする前に一時的に適用されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-752">The transform matrix of `graphics` is temporarily applied before testing for visibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-753">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-753">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-754">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-754">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-755">パスを作成し、楕円をパスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-755">Creates a path and adds an ellipse to the path.</span></span>  
  
-   <span data-ttu-id="e2281-756">指定したポイントが、パス内に含まれるかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="e2281-756">Tests whether the specified point is contained within the path.</span></span>  
  
-   <span data-ttu-id="e2281-757">ダイアログ ボックスで、結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="e2281-757">Displays the result in a dialog box.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="e2281-758">テストする点の x 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-758">The x-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="e2281-759">テストする点の y 座標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-759">The y-coordinate of the point to test.</span>
          </span>
        </param>
        <param name="graphics">
          <span data-ttu-id="e2281-760">参照可能範囲をテストする <see cref="T:System.Drawing.Graphics" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-760">The <see cref="T:System.Drawing.Graphics" /> for which to test visibility.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-761">指定した <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の表示されているクリップ領域にある、この <see cref="T:System.Drawing.Graphics" /> 内に、指定した点が含まれているかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-761">Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> in the visible clip region of the specified <see cref="T:System.Drawing.Graphics" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2281-762">このメソッドは、指定した点がこの <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> の中に含まれる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-762">This method returns <see langword="true" /> if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-763">テストする点の座標は、世界の座標で表されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-763">The coordinates of the point to be tested are given in world coordinates.</span></span> <span data-ttu-id="e2281-764">変換行列の`graphics`パラメーターは、可視性をテストする前に一時的に適用します。</span><span class="sxs-lookup"><span data-stu-id="e2281-764">The transform matrix of the `graphics` parameter is temporarily applied before testing for visibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-765">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-765">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathData">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PathData PathData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.PathData PathData" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPath.PathData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathData As PathData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PathData ^ PathData { System::Drawing::Drawing2D::PathData ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PathData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-766">この <see cref="T:System.Drawing.Drawing2D.PathData" /> の点 (<paramref name="points" />) と型 (<paramref name="types" />) の配列をカプセル化する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-766">Gets a <see cref="T:System.Drawing.Drawing2D.PathData" /> that encapsulates arrays of points (<paramref name="points" />) and types (<paramref name="types" />) for this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2281-767">この <see cref="T:System.Drawing.Drawing2D.PathData" /> の点と型の両方の配列をカプセル化する <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-767">A <see cref="T:System.Drawing.Drawing2D.PathData" /> that encapsulates arrays for both the points and types for this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathPoints">
      <MemberSignature Language="C#" Value="public System.Drawing.PointF[] PathPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.PointF[] PathPoints" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathPoints As PointF()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Drawing::PointF&gt; ^ PathPoints { cli::array &lt;System::Drawing::PointF&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-768">パスのポイントを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-768">Gets the points in the path.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2281-769">パスを表す <see cref="T:System.Drawing.PointF" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-769">An array of <see cref="T:System.Drawing.PointF" /> objects that represent the path.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathTypes">
      <MemberSignature Language="C#" Value="public byte[] PathTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] PathTypes" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathTypes As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ PathTypes { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-770">
            <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> 配列内の対応する点の型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-770">Gets the types of the corresponding points in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2281-771">パス内の対応する点の型を指定するバイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-771">An array of bytes that specifies the types of the corresponding points in the path.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-772">によって返されるバイトの配列、<xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes%2A>プロパティのパス ポイントの種類とデータ ポイントのフラグを指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-772">The array of bytes returned by the <xref:System.Drawing.Drawing2D.GraphicsPath.PathTypes%2A> property specifies point types and flags for the data points in a path.</span></span> <span data-ttu-id="e2281-773">各ポイントのビット 0 ~ 2、ポイントの種類を指定し、ビット 3. ~ 7. ポイントの属性を指定するフラグのセットします。</span><span class="sxs-lookup"><span data-stu-id="e2281-773">For each point, bits 0 through 2 indicate the type of a point, and bits 3 through 7 hold a set of flags that specify the attributes of a point.</span></span> <span data-ttu-id="e2281-774">次の表は、使用可能な値とその意味を示します。</span><span class="sxs-lookup"><span data-stu-id="e2281-774">The following table shows possible values and their meanings.</span></span>  
  
|<span data-ttu-id="e2281-775">[値]</span><span class="sxs-lookup"><span data-stu-id="e2281-775">Value</span></span>|<span data-ttu-id="e2281-776">説明</span><span class="sxs-lookup"><span data-stu-id="e2281-776">Meaning</span></span>|  
|-----------|-------------|  
|<span data-ttu-id="e2281-777">0</span><span class="sxs-lookup"><span data-stu-id="e2281-777">0</span></span>|<span data-ttu-id="e2281-778">ポイントが、図の先頭であることを示します。</span><span class="sxs-lookup"><span data-stu-id="e2281-778">Indicates that the point is the start of a figure.</span></span>|  
|<span data-ttu-id="e2281-779">1</span><span class="sxs-lookup"><span data-stu-id="e2281-779">1</span></span>|<span data-ttu-id="e2281-780">ポイントが 1 つの行の 2 つのエンドポイントであることを示します。</span><span class="sxs-lookup"><span data-stu-id="e2281-780">Indicates that the point is one of the two endpoints of a line.</span></span>|  
|<span data-ttu-id="e2281-781">3</span><span class="sxs-lookup"><span data-stu-id="e2281-781">3</span></span>|<span data-ttu-id="e2281-782">ポイントが、3 次ベジエ スプラインのエンドポイントまたはコントロール ポイントであることを示します。</span><span class="sxs-lookup"><span data-stu-id="e2281-782">Indicates that the point is an endpoint or control point of a cubic Bézier spline.</span></span>|  
|<span data-ttu-id="e2281-783">0x7</span><span class="sxs-lookup"><span data-stu-id="e2281-783">0x7</span></span>|<span data-ttu-id="e2281-784">次の 3 つの下位のビットは、ポイントの種類を示すを除くすべてのビットをマスクします。</span><span class="sxs-lookup"><span data-stu-id="e2281-784">Masks all bits except for the three low-order bits, which indicate the point type.</span></span>|  
|<span data-ttu-id="e2281-785">0x20</span><span class="sxs-lookup"><span data-stu-id="e2281-785">0x20</span></span>|<span data-ttu-id="e2281-786">ポイントのマーカーがいるを指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-786">Specifies that the point is a marker.</span></span>|  
|<span data-ttu-id="e2281-787">0x80</span><span class="sxs-lookup"><span data-stu-id="e2281-787">0x80</span></span>|<span data-ttu-id="e2281-788">点が閉じられたサブパス (図) の最後の点であることを指定します。</span><span class="sxs-lookup"><span data-stu-id="e2281-788">Specifies that the point is the last point in a closed subpath (figure).</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PointCount">
      <MemberSignature Language="C#" Value="public int PointCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PointCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPath.PointCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PointCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PointCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-789">
            <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> 配列または <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> 配列内の要素の数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-789">Gets the number of elements in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> or the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2281-790">
            <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> 配列または <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> 配列内の要素の数を示す整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-790">An integer that specifies the number of elements in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> or the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> array.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-791">
            <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> 配列と <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> 配列を空にし、<see cref="T:System.Drawing.Drawing2D.FillMode" /> を <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" /> に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-791">Empties the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> and <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> arrays and sets the <see cref="T:System.Drawing.Drawing2D.FillMode" /> to <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-792">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-792">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-793">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-793">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-794">パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-794">Creates a path.</span></span>  
  
-   <span data-ttu-id="e2281-795">これには、複数のプリミティブを追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-795">Adds several primitives to it.</span></span>  
  
-   <span data-ttu-id="e2281-796">パスの点の配列を画面に描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-796">Draws the path's points array to the screen.</span></span>  
  
-   <span data-ttu-id="e2281-797">パスを空の状態にリセットします。</span><span class="sxs-lookup"><span data-stu-id="e2281-797">Resets the path to an empty state.</span></span>  
  
-   <span data-ttu-id="e2281-798">再 (存在する場合は、点の配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="e2281-798">Re-acquires the points array (if it exists).</span></span>  
  
-   <span data-ttu-id="e2281-799">配列を画面に描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-799">Draws the array to the screen.</span></span>  
  
 <span data-ttu-id="e2281-800">配列のリセットの呼び出しに続く見つからないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-800">Notice that it finds no array following the reset call.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-801">
            <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> の <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 配列内の点の順序を反転します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-801">Reverses the order of points in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> array of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-802">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-802">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-803">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-803">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-804">パスを作成し、複数のプリミティブをパスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-804">Creates a path and adds several primitives to the path.</span></span>  
  
-   <span data-ttu-id="e2281-805">パスの点の配列を画面に描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-805">Draws the path's points array to the screen.</span></span>  
  
-   <span data-ttu-id="e2281-806">反転された点の配列を画面に描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-806">Draws the reversed points array to the screen.</span></span>  
  
 <span data-ttu-id="e2281-807">2 番目のポイントのリストが逆の順序で、最初からであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="e2281-807">Notice that the second listing of points is in reverse order from the first.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMarkers">
      <MemberSignature Language="C#" Value="public void SetMarkers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMarkers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.SetMarkers" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetMarkers ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetMarkers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-808">この <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> にマーカーを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-808">Sets a marker on this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-809">このメソッドは、パスのセクションを区切るために使用するパスにマーカーを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-809">This method creates a marker on the path that can be used to separate sections of the path.</span></span> <span data-ttu-id="e2281-810">使用してできます、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>パス内のマーカーを反復処理するメソッド。</span><span class="sxs-lookup"><span data-stu-id="e2281-810">You can then use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> methods to iterate through the markers in the path.</span></span>  
  
 <span data-ttu-id="e2281-811">マーカーは、個別のサブパスのグループに使用されます。</span><span class="sxs-lookup"><span data-stu-id="e2281-811">Markers are used to separate groups of subpaths.</span></span> <span data-ttu-id="e2281-812">パス内の 2 つのマーカーの間で 1 つまたは複数のサブパスが含まれていることができます。</span><span class="sxs-lookup"><span data-stu-id="e2281-812">One or more subpaths can be contained between two markers in the path.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-813">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-813">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-814">コードは、パスを作成して、マーカーで区切られたパスを複数のプリミティブを追加し、画面にパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-814">The code creates a path and adds several primitives to the path separated by markers, and draws the path to the screen.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartFigure">
      <MemberSignature Language="C#" Value="public void StartFigure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartFigure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.StartFigure" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartFigure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartFigure();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2281-815">現在の図形を閉じずに、新しい図形を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-815">Starts a new figure without closing the current figure.</span>
          </span>
          <span data-ttu-id="e2281-816">それ以降パスに追加されたすべての点は、この新しい図形に追加されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-816">All subsequent points added to the path are added to this new figure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-817">ユーザーは、必要な場合、元のポイントを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e2281-817">The user must keep the original points if they are needed.</span></span> <span data-ttu-id="e2281-818">元の点が 3 次ベジエ制御点を内部的に変換された、ため元の点を返すためのメカニズムはありません。</span><span class="sxs-lookup"><span data-stu-id="e2281-818">The original points are converted to cubic Bézier control points internally, therefore there is no mechanism for returning the original points.</span></span>  
  
 <span data-ttu-id="e2281-819">このメソッドは、パスに新しいサブパスを開始します。</span><span class="sxs-lookup"><span data-stu-id="e2281-819">This method starts a new subpath in the path.</span></span> <span data-ttu-id="e2281-820">各セクションに、パスを分離し、使用することはサブパス、<xref:System.Drawing.Drawing2D.GraphicsPathIterator>サブパスを反復処理するクラス。</span><span class="sxs-lookup"><span data-stu-id="e2281-820">Subpaths allow you to separate a path into sections and use the <xref:System.Drawing.Drawing2D.GraphicsPathIterator> class to iterate through the subpaths.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-821">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-821">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-822">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-822">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-823">パスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-823">Creates a path.</span></span>  
  
-   <span data-ttu-id="e2281-824">2 つの数値のセットを追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-824">Adds two sets of figures.</span></span> <span data-ttu-id="e2281-825">図形の最初のセットは、2 つの図に 4 つのプリミティブを結合します。</span><span class="sxs-lookup"><span data-stu-id="e2281-825">The first set of figures combines four primitives into two figures.</span></span> <span data-ttu-id="e2281-826">2 番目の数値のセット連結同じの 4 つのプリミティブ (する点を除いて、y 軸がオフセットされる) 次の 3 つの数値。</span><span class="sxs-lookup"><span data-stu-id="e2281-826">The second set of figures combines the same four primitives (except that they are offset in the y-axis) into three figures.</span></span>  
  
-   <span data-ttu-id="e2281-827">画面にすべての図形を描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-827">Draws all the figures to the screen.</span></span>  
  
 <span data-ttu-id="e2281-828">2 つの数値のセットの表示の違いに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-828">Notice the difference in the appearance between the two sets of figures.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Transform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">
          <span data-ttu-id="e2281-829">適用する変換を表す <see cref="T:System.Drawing.Drawing2D.Matrix" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-829">A <see cref="T:System.Drawing.Drawing2D.Matrix" /> that represents the transformation to apply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-830">この <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に変換行列を適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-830">Applies a transform matrix to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-831">変換できるスケール、変換、回転、または傾斜、<xref:System.Drawing.Drawing2D.GraphicsPath>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-831">The transformation can scale, translate, rotate, or skew the <xref:System.Drawing.Drawing2D.GraphicsPath>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-832">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-832">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-833">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-833">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-834">パスを作成し、楕円をパスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-834">Creates a path and adds an ellipse to the path.</span></span>  
  
-   <span data-ttu-id="e2281-835">画面にパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-835">Draws path to the screen.</span></span>  
  
-   <span data-ttu-id="e2281-836">X 軸方向にパス 100 単位に変換する変換行列を作成します。</span><span class="sxs-lookup"><span data-stu-id="e2281-836">Creates a transform matrix to translate the path 100 units in the x-axis direction.</span></span>  
  
-   <span data-ttu-id="e2281-837">画面に変換されたパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-837">Draws the transformed path to the screen.</span></span>  
  
 <span data-ttu-id="e2281-838">黒で元の楕円を描画し、変換後の楕円が赤で描画されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-838">Notice that the original ellipse is drawn in black and the transformed ellipse is drawn in red.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Warp">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-839">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に、四角形と平行四辺形によって定義されたワープ変換を適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-839">Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Warp">
      <MemberSignature Language="C#" Value="public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warp(valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Warp (destPoints As PointF(), srcRect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warp(cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="destPoints">
          <span data-ttu-id="e2281-840">
            <c>srcRect</c> によって定義された四角形を変形した結果の平行四辺形を定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-840">An array of <see cref="T:System.Drawing.PointF" /> structures that define a parallelogram to which the rectangle defined by <c>srcRect</c> is transformed.</span>
          </span>
          <span data-ttu-id="e2281-841">配列には、3 つまたは 4 つの要素を含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-841">The array can contain either three or four elements.</span>
          </span>
          <span data-ttu-id="e2281-842">配列に 3 つの要素が含まれている場合、平行四辺形の右下の頂点は最初の 3 つの点から類推されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-842">If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.</span>
          </span>
        </param>
        <param name="srcRect">
          <span data-ttu-id="e2281-843">
            <c>destPoints</c> によって定義された平行四辺形に変形される四角形を表す <see cref="T:System.Drawing.RectangleF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-843">A <see cref="T:System.Drawing.RectangleF" /> that represents the rectangle that is transformed to the parallelogram defined by <c>destPoints</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-844">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に、四角形と平行四辺形によって定義されたワープ変換を適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-844">Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-845">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.Warp%28System.Drawing.PointF%5B%5D%2CSystem.Drawing.RectangleF%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Drawing.Drawing2D.WarpMode%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-845">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%28System.Drawing.PointF%5B%5D%2CSystem.Drawing.RectangleF%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Drawing.Drawing2D.WarpMode%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Warp">
      <MemberSignature Language="C#" Value="public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warp(valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warp(cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="destPoints">
          <span data-ttu-id="e2281-846">
            <c>srcRect</c> によって定義された四角形を変形した結果の平行四辺形を定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-846">An array of <see cref="T:System.Drawing.PointF" /> structures that define a parallelogram to which the rectangle defined by <c>srcRect</c> is transformed.</span>
          </span>
          <span data-ttu-id="e2281-847">配列には、3 つまたは 4 つの要素を含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-847">The array can contain either three or four elements.</span>
          </span>
          <span data-ttu-id="e2281-848">配列に 3 つの要素が含まれている場合、平行四辺形の右下の頂点は最初の 3 つの点から類推されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-848">If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.</span>
          </span>
        </param>
        <param name="srcRect">
          <span data-ttu-id="e2281-849">
            <c>destPoints</c> によって定義された平行四辺形に変形される四角形を表す <see cref="T:System.Drawing.RectangleF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-849">A <see cref="T:System.Drawing.RectangleF" /> that represents the rectangle that is transformed to the parallelogram defined by <c>destPoints</c>.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="e2281-850">パスに適用するジオメトリック変換を指定する <see cref="T:System.Drawing.Drawing2D.Matrix" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-850">A <see cref="T:System.Drawing.Drawing2D.Matrix" /> that specifies a geometric transform to apply to the path.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-851">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に、四角形と平行四辺形によって定義されたワープ変換を適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-851">Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-852">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.Warp%28System.Drawing.PointF%5B%5D%2CSystem.Drawing.RectangleF%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Drawing.Drawing2D.WarpMode%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-852">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%28System.Drawing.PointF%5B%5D%2CSystem.Drawing.RectangleF%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Drawing.Drawing2D.WarpMode%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Warp">
      <MemberSignature Language="C#" Value="public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.WarpMode warpMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warp(valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.WarpMode warpMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warp(cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::WarpMode warpMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="warpMode" Type="System.Drawing.Drawing2D.WarpMode" />
      </Parameters>
      <Docs>
        <param name="destPoints">
          <span data-ttu-id="e2281-853">
            <c>srcRect</c> によって定義された四角形を変形した結果、作成される平行四辺形を定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-853">An array of <see cref="T:System.Drawing.PointF" /> structures that defines a parallelogram to which the rectangle defined by <c>srcRect</c> is transformed.</span>
          </span>
          <span data-ttu-id="e2281-854">配列には、3 つまたは 4 つの要素を含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-854">The array can contain either three or four elements.</span>
          </span>
          <span data-ttu-id="e2281-855">配列に 3 つの要素が含まれている場合、平行四辺形の右下の頂点は最初の 3 つの点から類推されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-855">If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.</span>
          </span>
        </param>
        <param name="srcRect">
          <span data-ttu-id="e2281-856">
            <c>destPoints</c> によって定義された平行四辺形に変形される四角形を表す <see cref="T:System.Drawing.RectangleF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-856">A <see cref="T:System.Drawing.RectangleF" /> that represents the rectangle that is transformed to the parallelogram defined by <c>destPoints</c>.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="e2281-857">パスに適用するジオメトリック変換を指定する <see cref="T:System.Drawing.Drawing2D.Matrix" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-857">A <see cref="T:System.Drawing.Drawing2D.Matrix" /> that specifies a geometric transform to apply to the path.</span>
          </span>
        </param>
        <param name="warpMode">
          <span data-ttu-id="e2281-858">この変形操作で遠近モードまたは双一次モードを使用するかどうかを指定する <see cref="T:System.Drawing.Drawing2D.WarpMode" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-858">A <see cref="T:System.Drawing.Drawing2D.WarpMode" /> enumeration that specifies whether this warp operation uses perspective or bilinear mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-859">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に、四角形と平行四辺形によって定義されたワープ変換を適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-859">Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-860">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.Warp%28System.Drawing.PointF%5B%5D%2CSystem.Drawing.RectangleF%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Drawing.Drawing2D.WarpMode%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-860">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%28System.Drawing.PointF%5B%5D%2CSystem.Drawing.RectangleF%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Drawing.Drawing2D.WarpMode%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Warp">
      <MemberSignature Language="C#" Value="public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.WarpMode warpMode, float flatness);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warp(valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.WarpMode warpMode, float32 flatness) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warp(cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::WarpMode warpMode, float flatness);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="warpMode" Type="System.Drawing.Drawing2D.WarpMode" />
        <Parameter Name="flatness" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="destPoints">
          <span data-ttu-id="e2281-861">
            <c>srcRect</c> によって定義された四角形を変形した結果の平行四辺形を定義する <see cref="T:System.Drawing.PointF" /> 構造体の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-861">An array of <see cref="T:System.Drawing.PointF" /> structures that define a parallelogram to which the rectangle defined by <c>srcRect</c> is transformed.</span>
          </span>
          <span data-ttu-id="e2281-862">配列には、3 つまたは 4 つの要素を含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-862">The array can contain either three or four elements.</span>
          </span>
          <span data-ttu-id="e2281-863">配列に 3 つの要素が含まれている場合、平行四辺形の右下の頂点は最初の 3 つの点から類推されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-863">If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points.</span>
          </span>
        </param>
        <param name="srcRect">
          <span data-ttu-id="e2281-864">
            <c>destPoints</c> によって定義された平行四辺形に変形される四角形を表す <see cref="T:System.Drawing.RectangleF" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-864">A <see cref="T:System.Drawing.RectangleF" /> that represents the rectangle that is transformed to the parallelogram defined by <c>destPoints</c>.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="e2281-865">パスに適用するジオメトリック変換を指定する <see cref="T:System.Drawing.Drawing2D.Matrix" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-865">A <see cref="T:System.Drawing.Drawing2D.Matrix" /> that specifies a geometric transform to apply to the path.</span>
          </span>
        </param>
        <param name="warpMode">
          <span data-ttu-id="e2281-866">この変形操作で遠近モードまたは双一次モードを使用するかどうかを指定する <see cref="T:System.Drawing.Drawing2D.WarpMode" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-866">A <see cref="T:System.Drawing.Drawing2D.WarpMode" /> enumeration that specifies whether this warp operation uses perspective or bilinear mode.</span>
          </span>
        </param>
        <param name="flatness">
          <span data-ttu-id="e2281-867">結果として生成されたパスの平坦度を指定する 0 から 1 の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-867">A value from 0 through 1 that specifies how flat the resulting path is.</span>
          </span>
          <span data-ttu-id="e2281-868">詳細については、<see cref="M:System.Drawing.Drawing2D.GraphicsPath.Flatten" /> メソッドのトピックを参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-868">For more information, see the <see cref="M:System.Drawing.Drawing2D.GraphicsPath.Flatten" /> methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-869">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に、四角形と平行四辺形によって定義されたワープ変換を適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-869">Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2281-870">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-870">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-871">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-871">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-872">パスを作成し、パスに四角形を追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-872">Creates a path and adds a rectangle to the path.</span></span>  
  
-   <span data-ttu-id="e2281-873">黒の画面には、その四角形を描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-873">Draws that rectangle to the screen in black.</span></span>  
  
-   <span data-ttu-id="e2281-874">ワープ パースペクティブ warp では、パスを使用します。</span><span class="sxs-lookup"><span data-stu-id="e2281-874">Warps the path with a perspective warp.</span></span>  
  
-   <span data-ttu-id="e2281-875">変形した四角形 (パス) を赤で画面に描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-875">Draws the warped rectangle (path) to the screen in red.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Widen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2281-876">このパスを、指定されたペンでこのパスを描画するときに塗りつぶされる領域を囲む曲線に置換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-876">Replaces this path with curves that enclose the area that is filled when this path is drawn by the specified pen.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public void Widen (System.Drawing.Pen pen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Widen(class System.Drawing.Pen pen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Widen(System::Drawing::Pen ^ pen);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
      </Parameters>
      <Docs>
        <param name="pen">
          <span data-ttu-id="e2281-877">パスの元のアウトラインと、このメソッドが作成する新しいアウトラインの間の幅を指定する <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-877">A <see cref="T:System.Drawing.Pen" /> that specifies the width between the original outline of the path and the new outline this method creates.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-878">パスに追加のアウトラインを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-878">Adds an additional outline to the path.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-879">これで、このメソッドが元の行を囲む外枠を作成<xref:System.Drawing.Drawing2D.GraphicsPath>、既存の行と新しいアウトラインの間の距離の幅を等しく、<xref:System.Drawing.Pen>への呼び出しで使用される<xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-879">This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>.</span></span> <span data-ttu-id="e2281-880">使用する必要があります、行の間隔を設定する場合、<xref:System.Drawing.Graphics.FillPath%2A>ではなく、<xref:System.Drawing.Graphics.DrawPath%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-880">If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-881">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.Widen%28System.Drawing.Pen%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-881">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%28System.Drawing.Pen%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public void Widen (System.Drawing.Pen pen, System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Widen(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Widen(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="pen">
          <span data-ttu-id="e2281-882">パスの元のアウトラインと、このメソッドが作成する新しいアウトラインの間の幅を指定する <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-882">A <see cref="T:System.Drawing.Pen" /> that specifies the width between the original outline of the path and the new outline this method creates.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="e2281-883">幅の拡張前にパスに適用する変換を指定する <see cref="T:System.Drawing.Drawing2D.Matrix" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-883">A <see cref="T:System.Drawing.Drawing2D.Matrix" /> that specifies a transform to apply to the path before widening.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-884">
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に別のアウトラインを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-884">Adds an additional outline to the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-885">これで、このメソッドが元の行を囲む外枠を作成<xref:System.Drawing.Drawing2D.GraphicsPath>、既存の行と新しいアウトラインの間の距離の幅を等しく、<xref:System.Drawing.Pen>への呼び出しで使用される<xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-885">This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>.</span></span> <span data-ttu-id="e2281-886">使用する必要があります、行の間隔を設定する場合、<xref:System.Drawing.Graphics.FillPath%2A>ではなく、<xref:System.Drawing.Graphics.DrawPath%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-886">If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-887">例については、「<xref:System.Drawing.Drawing2D.GraphicsPath.Widen%28System.Drawing.Pen%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Single%29>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e2281-887">For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%28System.Drawing.Pen%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Widen">
      <MemberSignature Language="C#" Value="public void Widen (System.Drawing.Pen pen, System.Drawing.Drawing2D.Matrix matrix, float flatness);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Widen(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.Matrix matrix, float32 flatness) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Widen(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::Matrix ^ matrix, float flatness);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="flatness" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          <span data-ttu-id="e2281-888">パスの元のアウトラインと、このメソッドが作成する新しいアウトラインの間の幅を指定する <see cref="T:System.Drawing.Pen" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-888">A <see cref="T:System.Drawing.Pen" /> that specifies the width between the original outline of the path and the new outline this method creates.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="e2281-889">幅の拡張前にパスに適用する変換を指定する <see cref="T:System.Drawing.Drawing2D.Matrix" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-889">A <see cref="T:System.Drawing.Drawing2D.Matrix" /> that specifies a transform to apply to the path before widening.</span>
          </span>
        </param>
        <param name="flatness">
          <span data-ttu-id="e2281-890">曲線の平坦度を指定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-890">A value that specifies the flatness for curves.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2281-891">この <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> を、指定されたペンでこのパスを描画するときに塗りつぶされる領域を囲む曲線に置換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2281-891">Replaces this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> with curves that enclose the area that is filled when this path is drawn by the specified pen.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2281-892">これで、このメソッドが元の行を囲む外枠を作成<xref:System.Drawing.Drawing2D.GraphicsPath>、既存の行と新しいアウトラインの間の距離の幅を等しく、<xref:System.Drawing.Pen>への呼び出しで使用される<xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-892">This method creates an outline around the original lines in this <xref:System.Drawing.Drawing2D.GraphicsPath>, with a distance between the existing lines and the new outline equal to that of the width of the <xref:System.Drawing.Pen> used in the call to <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>.</span></span> <span data-ttu-id="e2281-893">使用する必要があります、行の間隔を設定する場合、<xref:System.Drawing.Graphics.FillPath%2A>ではなく、<xref:System.Drawing.Graphics.DrawPath%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e2281-893">If you want to fill the space between the lines you must use the <xref:System.Drawing.Graphics.FillPath%2A> rather then the <xref:System.Drawing.Graphics.DrawPath%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2281-894">次のコード例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e2281-894">The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object.</span></span> <span data-ttu-id="e2281-895">コードは、次のアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e2281-895">The code performs the following actions:</span></span>  
  
-   <span data-ttu-id="e2281-896">パスを作成し、2 つの楕円をパスに追加します。</span><span class="sxs-lookup"><span data-stu-id="e2281-896">Creates a path and adds two ellipses to the path.</span></span>  
  
-   <span data-ttu-id="e2281-897">黒でパスを描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-897">Draws the path in black.</span></span>  
  
-   <span data-ttu-id="e2281-898">パスの幅が広がります。</span><span class="sxs-lookup"><span data-stu-id="e2281-898">Widens the path.</span></span>  
  
-   <span data-ttu-id="e2281-899">パスを赤で描画します。</span><span class="sxs-lookup"><span data-stu-id="e2281-899">Draws the path in red.</span></span>  
  
 <span data-ttu-id="e2281-900">2 番目のレンダリングを使用することを確認<xref:System.Drawing.Graphics.FillPath%2A>の代わりに<xref:System.Drawing.Graphics.DrawPath%2A>、レンダリングの図に、入力アウトライン持ちます。</span><span class="sxs-lookup"><span data-stu-id="e2281-900">Notice that the second rendering uses <xref:System.Drawing.Graphics.FillPath%2A> instead of <xref:System.Drawing.Graphics.DrawPath%2A>, and hence the rendered figure has the outline filled.</span></span>  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>