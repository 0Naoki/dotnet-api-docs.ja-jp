<Type Name="LifetimeContext" FullName="System.Composition.Hosting.Core.LifetimeContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e6df31d56ae5b6086311f6e6e39a28e33806ed5c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30377936" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LifetimeContext : System.Composition.CompositionContext, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LifetimeContext extends System.Composition.CompositionContext implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Hosting.Core.LifetimeContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LifetimeContext&#xA;Inherits CompositionContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class LifetimeContext sealed : System::Composition::CompositionContext, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Hosting</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Composition.CompositionContext</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="5f374-101">ライフタイム ツリー内の 1 つのノードを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="5f374-101">Represents a node in the lifetime tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="5f374-102"><xref:System.Composition.Hosting.Core.LifetimeContext>オブジェクトが共有の共有部分の単位。</span><span class="sxs-lookup"><span data-stu-id="5f374-102">The <xref:System.Composition.Hosting.Core.LifetimeContext> object is the unit of sharing for shared parts.</span></span> <span data-ttu-id="5f374-103">これにより、バインドされたパーツの破棄を制御し、既存のコンポジション操作の一環として、または新しいコンポジション操作の基礎としてインスタンスを取得するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="5f374-103">It controls the disposal of bound parts and can be used to retrieve instances, either as part of an existing composition operation or as the basis of a new composition operation.</span></span> <span data-ttu-id="5f374-104">特定の共有境界によって制限されている部分を格納する、個々 の有効期間のコンテキストを設定できます。</span><span class="sxs-lookup"><span data-stu-id="5f374-104">An individual lifetime context can be marked to contain parts that are constrained by particular sharing boundaries.</span></span>

<span data-ttu-id="5f374-105">このオブジェクトには、2 つ個別に保護された共有状態にはが含まれています: パーツ インスタンスを共有し、パーツ インスタンスをバインドします。</span><span class="sxs-lookup"><span data-stu-id="5f374-105">This object contains two pieces of independently protected shared state: shared part instances and bound part instances.</span></span> <span data-ttu-id="5f374-106">共有部分はインスタンス ロック制御不要、読み取り可能なは、発生するわけで問題が破棄処理中に追加する場合。</span><span class="sxs-lookup"><span data-stu-id="5f374-106">A shared part instance is lock-free, readable, and does not result in issues if it is added to during disposal.</span></span> <span data-ttu-id="5f374-107">ロックされている自体によって保護されます。</span><span class="sxs-lookup"><span data-stu-id="5f374-107">It is protected by being locked itself.</span></span> <span data-ttu-id="5f374-108">アクティブ化ロジックは、このロックの状況で呼び出されます避けられません。</span><span class="sxs-lookup"><span data-stu-id="5f374-108">Activation logic is unavoidably called under this lock.</span></span> <span data-ttu-id="5f374-109">バインドのパーツ インスタンスをロックすることで常に保護<see langword="this" />、され破棄後に書き込まれるはことはありません。</span><span class="sxs-lookup"><span data-stu-id="5f374-109">A bound part instance is always protected by locking <see langword="this" />, and should never be written to after disposal.</span></span> <span data-ttu-id="5f374-110">バインドのパーツ インスタンスに設定されている<see langword="null" />でロックの状況で、<xref:System.Composition.Hosting.Core.LifetimeContext.Dispose>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5f374-110">A bound part instance is set to <see langword="null" /> under a lock in the <xref:System.Composition.Hosting.Core.LifetimeContext.Dispose> method.</span></span> <span data-ttu-id="5f374-111">書き込みが許可された場合バインドのパーツ インスタンスを破棄した後、解放されない破棄可能な部分になります。</span><span class="sxs-lookup"><span data-stu-id="5f374-111">If writing were allowed after disposal for a bound part instance, it would result in disposable parts not being released.</span></span> <span data-ttu-id="5f374-112">バインドされた一部の dispose メソッドは、ロックの外部で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5f374-112">The dispose method on a bound part is called outside of the lock.</span></span> 
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBoundInstance">
      <MemberSignature Language="C#" Value="public void AddBoundInstance (IDisposable instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBoundInstance(class System.IDisposable instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.AddBoundInstance(System.IDisposable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBoundInstance (instance As IDisposable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBoundInstance(IDisposable ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.IDisposable" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="5f374-113">パート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-113">The part.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5f374-114">破棄可能なパートの有効期間を、この有効期間コンテキストにバインディングします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-114">Binds the lifetime of a disposable part to this lifetime context.</span>
          </span>
        </summary>
        <remarks></remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="5f374-115">破棄されたオブジェクトで操作が実行されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-115">The operation was performed on a disposed object.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AllocateSharingId">
      <MemberSignature Language="C#" Value="public static int AllocateSharingId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AllocateSharingId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.AllocateSharingId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateSharingId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AllocateSharingId();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5f374-116">共有されたパートのインスタンスを検索するために使用できる識別子を生成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-116">Generates an identifier that can be used to locate shared part instances.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5f374-117">一意の新しい識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-117">A new unique identifier.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5f374-118">有効期間のコンテキスト、およびそれにバインディングされたパート インスタンスを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-118">Releases the lifetime context and any part instances bound to it.</span>
          </span>
        </summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextWithin">
      <MemberSignature Language="C#" Value="public System.Composition.Hosting.Core.LifetimeContext FindContextWithin (string sharingBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Hosting.Core.LifetimeContext FindContextWithin(string sharingBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.FindContextWithin(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindContextWithin (sharingBoundary As String) As LifetimeContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Hosting::Core::LifetimeContext ^ FindContextWithin(System::String ^ sharingBoundary);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Hosting.Core.LifetimeContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingBoundary" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sharingBoundary">
          <span data-ttu-id="5f374-119">共有境界。この中で有効期間のコンテキストを検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-119">The sharing boundary to find a lifetime context within.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5f374-120">指定された共有境界の中で、有効期間が最も長いコンテキストを検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-120">Finds the broadest lifetime context within all of the specified sharing boundaries.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5f374-121">指定された共有境界の中で有効期間が最も長いコンテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-121">The broadest lifetime context within all of the specified sharing boundaries.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f374-122">現時点では、ルートは、境界をすることはできません。</span><span class="sxs-lookup"><span data-stu-id="5f374-122">Currently, the root cannot be a boundary.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreate">
      <MemberSignature Language="C#" Value="public object GetOrCreate (int sharingId, System.Composition.Hosting.Core.CompositionOperation operation, System.Composition.Hosting.Core.CompositeActivator creator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrCreate(int32 sharingId, class System.Composition.Hosting.Core.CompositionOperation operation, class System.Composition.Hosting.Core.CompositeActivator creator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.GetOrCreate(System.Int32,System.Composition.Hosting.Core.CompositionOperation,System.Composition.Hosting.Core.CompositeActivator)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreate (sharingId As Integer, operation As CompositionOperation, creator As CompositeActivator) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrCreate(int sharingId, System::Composition::Hosting::Core::CompositionOperation ^ operation, System::Composition::Hosting::Core::CompositeActivator ^ creator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingId" Type="System.Int32" />
        <Parameter Name="operation" Type="System.Composition.Hosting.Core.CompositionOperation" />
        <Parameter Name="creator" Type="System.Composition.Hosting.Core.CompositeActivator" />
      </Parameters>
      <Docs>
        <param name="sharingId">
          <span data-ttu-id="5f374-123">共有されたパートの ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-123">The ID of the shared part.</span>
          </span>
        </param>
        <param name="operation">
          <span data-ttu-id="5f374-124">必要に応じて、その中でパートが作成される操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-124">An operation in which to create a part, if necessary.</span>
          </span>
        </param>
        <param name="creator">
          <span data-ttu-id="5f374-125">必要に応じて、新しいパートのインスタンスをアクティブ化するアクティベーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-125">An activator that can activate a new part instance, if necessary.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5f374-126">指定された ID で共有パート インスタンスを取得します。あるいは、パート インスタンスが見つからない場合、指定された操作内で指定されたクリエーターを利用してパート インスタンスを作成し、共有します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-126">Retrieves a shared part instance with the specified ID, or if the part instance can not be found, creates and shares a part instance using the specified creator within the specified operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5f374-127">新規または取得したパート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-127">The new or retrieved part.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5f374-128">このメソッドは、パーツ インスタンスが既に存在する場合のロック制御不要です。</span><span class="sxs-lookup"><span data-stu-id="5f374-128">This method is lock-free if the part instance already exists.</span></span> <span data-ttu-id="5f374-129">パーツ インスタンスを作成する必要があります、ロックが表示されますをこのメソッド (同時読み取りは引き続き安全にロック制御不要にする) を使用して他の書き込みではシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="5f374-129">If the part instance must be created, a lock will be taken that will serialize other writes that use this method (concurrent reads will continue to be safe and lock-free).</span></span> <span data-ttu-id="5f374-130">重要ですコンポジション、およびためロックの取得は、厳密にリーフ-root ライフタイム ツリー内です。</span><span class="sxs-lookup"><span data-stu-id="5f374-130">It is important that the composition, and thus lock acquisition, is strictly leaf-to-root in the lifetime tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5f374-131">この <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> オブジェクトの文字列表現を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-131">Returns the string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5f374-132">この <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> オブジェクトの文字列表現。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-132">The string representation of this <see cref="T:System.Composition.Hosting.Core.LifetimeContext" /> object.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public override bool TryGetExport (System.Composition.Hosting.Core.CompositionContract contract, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryGetExport(class System.Composition.Hosting.Core.CompositionContract contract, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.LifetimeContext.TryGetExport(System.Composition.Hosting.Core.CompositionContract,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryGetExport (contract As CompositionContract, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool TryGetExport(System::Composition::Hosting::Core::CompositionContract ^ contract, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Hosting</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
        <Parameter Name="export" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="contract">
          <span data-ttu-id="5f374-133">コントラクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-133">The contract.</span>
          </span>
        </param>
        <param name="export">
          <span data-ttu-id="5f374-134">このメソッドから制御が戻った後、コントラクト インスタンスがあれば、それが格納されます。コントラクト インスタンスがない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-134">After this method returns, contains the contract instance if available; otherwise, <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5f374-135">コンポジション コンテキストからコントラクト インスタンスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-135">Retrieves a contract instance from the composition context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5f374-136">インスタンスが取得された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5f374-136">
              <see langword="true" /> if the instance was retrieved; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>