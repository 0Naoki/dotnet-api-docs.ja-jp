<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c7135f27d53800371810fb4850e3e706e3ba3c6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36708061" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <TypeSignature Language="F#" Value="type TypeCodeDomSerializer = class&#xA;    inherit CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ddbe6-101">オブジェクトを新しい型にシリアル化します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ddbe6-101">Serializes an object to a new type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddbe6-102"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>クラスと同じタスクを実行する、<xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>が、新しい型を定義するクラスを使ってこのオブジェクトのシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-102">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> class performs the same tasks as a <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, but serializing an object through this class defines a new type.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ddbe6-103">
            <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-103">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj&#xA;override this.Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj" Usage="typeCodeDomSerializer.Deserialize (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="ddbe6-104">シリアル化に使用するシリアル化マネージャー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-104">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="declaration">
          <span data-ttu-id="ddbe6-105">シリアル化に使用する型宣言。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-105">Type declaration to use for serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddbe6-106">指定した型宣言を逆シリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-106">Deserializes the given type declaration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddbe6-107">ルート オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-107">The root object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddbe6-108"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>メソッドは、シリアル化されたコード型宣言を逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-108">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method deserializes a previously serialized code type declaration.</span></span> <span data-ttu-id="ddbe6-109">次の表は、タスクの既定の実装を実行します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-109">The following table shows the tasks default implementation performs.</span></span>  
  
|<span data-ttu-id="ddbe6-110">タスク</span><span class="sxs-lookup"><span data-stu-id="ddbe6-110">Task</span></span>|<span data-ttu-id="ddbe6-111">説明</span><span class="sxs-lookup"><span data-stu-id="ddbe6-111">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="ddbe6-112">大文字小文字の区別のチェック</span><span class="sxs-lookup"><span data-stu-id="ddbe6-112">Case Sensitivity Checks</span></span>|<span data-ttu-id="ddbe6-113">実装では、検索、<xref:System.CodeDom.Compiler.CodeDomProvider>として大文字と小文字または大文字小文字を区別しないメンバーを扱うべきかを決定するサービスです。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-113">The implementation searches for a <xref:System.CodeDom.Compiler.CodeDomProvider> service to decide if it should treat members as case sensitive or case insensitive.</span></span>|  
|<span data-ttu-id="ddbe6-114">ステートメントの並べ替え</span><span class="sxs-lookup"><span data-stu-id="ddbe6-114">Statement Sorting</span></span>|<span data-ttu-id="ddbe6-115">すべてのメンバー変数と init メソッドのローカル変数は、テーブルに格納されます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-115">All member variables and local variables from init methods are stored in a table.</span></span> <span data-ttu-id="ddbe6-116">Init メソッド内の各ステートメントが別にグループ化の左側にある、その変数の下の割り当てまたは特定の変数で動作しているすべてのステートメントがグループ化されているため、ステートメントのコレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-116">Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</span></span> <span data-ttu-id="ddbe6-117">ステートメントを持たない変数が破棄されます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-117">Variables that have no statements are discarded.</span></span>|  
|<span data-ttu-id="ddbe6-118">逆シリアル化</span><span class="sxs-lookup"><span data-stu-id="ddbe6-118">Deserialization</span></span>|<span data-ttu-id="ddbe6-119">各変数のステートメントのコレクションが変数に従って逆シリアル化します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-119">The statement collections for each variable are deserialized according to the variable.</span></span>|  
  
 <span data-ttu-id="ddbe6-120">次の表は、サービス、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>メソッドが必要です。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-120">The following table shows the services the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method requires.</span></span>  
  
|<span data-ttu-id="ddbe6-121">サービス</span><span class="sxs-lookup"><span data-stu-id="ddbe6-121">Service</span></span>|<span data-ttu-id="ddbe6-122">説明</span><span class="sxs-lookup"><span data-stu-id="ddbe6-122">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|<span data-ttu-id="ddbe6-123">厳密には必要ありません、サービスを利用できる場合は使用を決定するかどうかは、シリアル化大文字と小文字または大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-123">While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.</span></span>|  
|<xref:System.ComponentModel.IContainer>|<span data-ttu-id="ddbe6-124">逆シリアル化、クエリの中で、名前テーブルでオブジェクトが存在しない場合<xref:System.ComponentModel.IContainer>が行われます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-124">If an object does not exist in the name table during deserialization, a query for <xref:System.ComponentModel.IContainer> is made.</span></span> <span data-ttu-id="ddbe6-125">このクエリが成功すると、コンテナー オブジェクトがチェックされます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-125">If this query succeeds, the container is checked for the object.</span></span> <span data-ttu-id="ddbe6-126">コンテナーは、コンポーネントに必要な任意のコンテナーの引数の代理としても使用されます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-126">The container is also used as a stand-in for any container argument needed by components.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddbe6-127">
            <paramref name="manager" /> または <paramref name="typeDecl" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-127">
              <paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod&#xA;override this.GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod" Usage="typeCodeDomSerializer.GetInitializeMethod (manager, declaration, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="ddbe6-128">シリアル化に使用するシリアル化マネージャー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-128">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="declaration">
          <span data-ttu-id="ddbe6-129">シリアル化に使用する型宣言。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-129">The type declaration to use for serialization.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="ddbe6-130">シリアル化に使用する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-130">The value to use for serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddbe6-131">メンバーのシリアル化に使用するステートメントが格納されたメソッドを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-131">Returns the method where statements used to serialize a member are stored.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddbe6-132">指定したメンバーのすべての初期化コードを出力するために使用されるメソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-132">The method used to emit all of the initialization code for the given member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddbe6-133"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>メソッドは、指定したメンバーをすべての初期化コードを出力するメソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-133">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> method returns the method to emit all of the initialization code for the given member.</span></span> <span data-ttu-id="ddbe6-134">既定の実装では、空のコンス トラクターを返します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-134">The default implementation returns an empty constructor.</span></span> <span data-ttu-id="ddbe6-135">同じメソッドを複数の値に対して返される場合は、メソッドの同じインスタンスが返されます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-135">If the same method is to be returned for multiple values, the same instance of the method should be returned.</span></span> <span data-ttu-id="ddbe6-136">使用することができます、<xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType>ディクショナリを作成する方法に注意してください。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-136">You can use the <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> dictionary to remember methods you have created.</span></span> <span data-ttu-id="ddbe6-137">`typeDecl`パラメーターを使用してインフラストラクチャのメソッドを追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-137">The `typeDecl` parameter can also be used to add infrastructure methods.</span></span> <span data-ttu-id="ddbe6-138">たとえば、オブジェクトごとに別個のメソッドを出力する場合は、1 つのメソッドをさらにすべてのこれらのメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-138">For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</span></span> <span data-ttu-id="ddbe6-139">このメソッドは、必要に応じてコード型宣言を追加できます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-139">This method can be added to the code type declaration as needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddbe6-140">
            <paramref name="manager" />、<paramref name="typeDecl" />、または <paramref name="value" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-140">
              <paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]&#xA;override this.GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]" Usage="typeCodeDomSerializer.GetInitializeMethods (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="ddbe6-141">シリアル化に使用するシリアル化マネージャー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-141">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="declaration">
          <span data-ttu-id="ddbe6-142">シリアル化に使用する型宣言。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-142">The type declaration to use for serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddbe6-143">逆シリアル化中に解釈されるメソッドの配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-143">Returns an array of methods to be interpreted during deserialization.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddbe6-144">逆シリアル化中に解釈されるメソッドの <see cref="T:System.CodeDom.CodeMemberMethod" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-144">A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during deserialization.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddbe6-145">既定の実装では、ことで、コンス トラクターを持つ 1 つの要素の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-145">The default implementation returns a single-element array with the constructor in it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddbe6-146">
            <paramref name="manager" /> または <paramref name="typeDecl" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-146">
              <paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration&#xA;override this.Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration" Usage="typeCodeDomSerializer.Serialize (manager, root, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="ddbe6-147">シリアル化に使用するシリアル化マネージャー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-147">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="root">
          <span data-ttu-id="ddbe6-148">シリアル化するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-148">The object to serialize.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="ddbe6-149">省略可能なメンバーのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-149">Optional collection of members.</span>
          </span>
          <span data-ttu-id="ddbe6-150">
            <see langword="null" /> または空になる場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-150">Can be <see langword="null" /> or empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ddbe6-151">ルートを定義する新しい型宣言を作成することによって、オブジェクト ルートをシリアル化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-151">Serializes the object root by creating a new type declaration that defines root.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ddbe6-152">ルート オブジェクトを定義する <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-152">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the root object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ddbe6-153"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>メソッドには、特定のルート オブジェクトとオプションの新しい種類の定義を作成するメンバーのコレクションがシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-153">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method serializes the given root object and optional collection of members to create a new type definition.</span></span> <span data-ttu-id="ddbe6-154">場合、`members`これらの値がシリアル化、コレクションには、値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-154">If the `members` collection contains values, these values are serialized.</span></span> <span data-ttu-id="ddbe6-155">値自体をメンバー変数またはローカル変数のいずれかとしてシリアル化可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-155">Values themselves may serialize as either member variables or local variables.</span></span> <span data-ttu-id="ddbe6-156">この決定を行うと呼ばれるオブジェクトにエクステンダー プロパティを検索を`GenerateMember`です。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-156">This determination is done by searching for an extender property on the object called `GenerateMember`.</span></span> <span data-ttu-id="ddbe6-157">場合`true`メンバーを生成します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-157">If `true`, a member is generated.</span></span> <span data-ttu-id="ddbe6-158">それ以外の場合、ローカル変数が生成されます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-158">Otherwise, a local variable is generated.</span></span> <span data-ttu-id="ddbe6-159">便宜上、`members`コレクションは、ルート オブジェクトを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-159">For convenience, the `members` collection can contain the root object.</span></span> <span data-ttu-id="ddbe6-160">ここでは、ルート オブジェクトがないとしても追加メンバーまたはローカル変数。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-160">In this case, the root object is not also added as a member or local variable.</span></span>  
  
 <span data-ttu-id="ddbe6-161">返される型の名前は、名前付きオブジェクトの場合、ルート オブジェクトの名前から取得されます。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-161">The name of the returned type is taken from the root object’s name, if it was a named object.</span></span> <span data-ttu-id="ddbe6-162">それ以外の場合は、名前がルート クラスの単純な型名から生成します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-162">If not, a name is fabricated from the simple type name of the root class.</span></span>  
  
 <span data-ttu-id="ddbe6-163">次の表に、既定の実装によって実行されるタスク、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-163">The following table shows the tasks performed by the default implementation of the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method.</span></span>  
  
|<span data-ttu-id="ddbe6-164">タスク</span><span class="sxs-lookup"><span data-stu-id="ddbe6-164">Task</span></span>|<span data-ttu-id="ddbe6-165">説明</span><span class="sxs-lookup"><span data-stu-id="ddbe6-165">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="ddbe6-166">コンテキストのシード</span><span class="sxs-lookup"><span data-stu-id="ddbe6-166">Context Seeding</span></span>|<span data-ttu-id="ddbe6-167">データを含むによるシリアル化コンテキストの初期化を行う、<xref:System.ComponentModel.Design.Serialization.RootContext>と <xref:System.CodeDom.CodeTypeDeclaration></span><span class="sxs-lookup"><span data-stu-id="ddbe6-167">The serialization context is initialized with data including the <xref:System.ComponentModel.Design.Serialization.RootContext> and <xref:System.CodeDom.CodeTypeDeclaration></span></span>|  
|<span data-ttu-id="ddbe6-168">メンバーのシリアル化</span><span class="sxs-lookup"><span data-stu-id="ddbe6-168">Member Serialization</span></span>|<span data-ttu-id="ddbe6-169">次に、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>のすべてのメンバーとの呼び出しでは説明<xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>です。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-169">Next, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> walks all of the members and calls <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>.</span></span> <span data-ttu-id="ddbe6-170">実際にシリアル化が行われるため<xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>、これにより、シリアル化を行わない 2 回クリックします。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-170">Because serialization is done opportunistically in <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, this ensures that serialization is not done twice.</span></span>|  
|<span data-ttu-id="ddbe6-171">ルートのシリアル化</span><span class="sxs-lookup"><span data-stu-id="ddbe6-171">Root Serialization</span></span>|<span data-ttu-id="ddbe6-172">次に、ルート オブジェクトをシリアル化し、そのステートメントがステートメントのコレクションに追加します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-172">Next, the root object is serialized and its statements are added to the statement collection.</span></span>|  
|<span data-ttu-id="ddbe6-173">ステートメントの統合</span><span class="sxs-lookup"><span data-stu-id="ddbe6-173">Statement Integration</span></span>|<span data-ttu-id="ddbe6-174">すべてのオブジェクトはシリアル化した後、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>メソッドがステートメントを注文しから返されたメソッドに追加<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>です。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-174">After all objects are serialized, the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method orders the statements and adds them to a method returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span> <span data-ttu-id="ddbe6-175">呼び出すすべてのメソッドから返されるコンス トラクターが最後に、用意<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>です。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-175">Finally, a constructor is fabricated that calls all of the methods returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span>|  
  
-  
  
 <span data-ttu-id="ddbe6-176">次の表は、オブジェクト、<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>メソッドがコンテキスト スタックに配置します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-176">The following table shows the objects the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method places on the context stack.</span></span>  
  
|<span data-ttu-id="ddbe6-177">インスタンス</span><span class="sxs-lookup"><span data-stu-id="ddbe6-177">Instance</span></span>|<span data-ttu-id="ddbe6-178">説明</span><span class="sxs-lookup"><span data-stu-id="ddbe6-178">Description</span></span>|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|<span data-ttu-id="ddbe6-179">このシリアライザー。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-179">This serializer.</span></span> <span data-ttu-id="ddbe6-180">クラスを派生させることがあります方が便利なこのクラスにパブリック プロパティを追加します。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-180">Deriving classes may find it useful to add public properties to this class.</span></span>|  
|<xref:System.CodeDom.CodeTypeDeclaration>|<span data-ttu-id="ddbe6-181">作成される型。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-181">The type being created.</span></span> <span data-ttu-id="ddbe6-182">ほとんどのオブジェクトでは、これに直接アクセスは必要ありません。</span><span class="sxs-lookup"><span data-stu-id="ddbe6-182">Most objects do not need direct access to this.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ddbe6-183">
            <paramref name="manager" /> または <paramref name="root" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ddbe6-183">
              <paramref name="manager" /> or <paramref name="root" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
  </Members>
</Type>