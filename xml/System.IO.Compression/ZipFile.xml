<Type Name="ZipFile" FullName="System.IO.Compression.ZipFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f42d501d4a4e27c5f60e5ebfc94999139760a66b" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996899" /></Metadata><TypeSignature Language="C#" Value="public static class ZipFile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ZipFile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Compression.ZipFile" />
  <TypeSignature Language="VB.NET" Value="Public Class ZipFile" />
  <TypeSignature Language="C++ CLI" Value="public ref class ZipFile abstract sealed" />
  <TypeSignature Language="F#" Value="type ZipFile = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>zip アーカイブの作成、抽出、および解凍の静的メソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  使用する、<xref:System.IO.Compression.ZipFile>クラスへの参照を追加する必要があります、`System.IO.Compression.FileSystem`プロジェクト内のアセンブリをコンパイルしようとするときに次のエラー メッセージが表示されます、それ以外の場合。**'Zip ' ファイルが現在のコンテキストに存在しない名前**します。 Visual Studio で、プロジェクトへの参照を追加する方法の詳細については、次を参照してください。[方法。参照マネージャーを使用して参照を追加または削除する](https://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb)  
  
 Zip のアーカイブとそのファイルを操作するためのメソッドが 3 つのクラスに分散: <xref:System.IO.Compression.ZipFile>、<xref:System.IO.Compression.ZipArchive>と<xref:System.IO.Compression.ZipArchiveEntry>します。  
  
|宛先|使用するケース|  
|---------|----------|  
|ディレクトリから zip アーカイブを作成します。|<xref:System.IO.Compression.ZipFile.CreateFromDirectory%2A?displayProperty=nameWithType>|  
|ディレクトリの zip アーカイブの内容を抽出します。|<xref:System.IO.Compression.ZipFile.ExtractToDirectory%2A?displayProperty=nameWithType>|  
|新しいファイルを既存の zip アーカイブに追加します。|<xref:System.IO.Compression.ZipArchive.CreateEntry%2A?displayProperty=nameWithType>|  
|Zip アーカイブにあるファイルを取得します。|<xref:System.IO.Compression.ZipArchive.GetEntry%2A?displayProperty=nameWithType>|  
|Zip アーカイブ内のファイルをすべて取得します。|<xref:System.IO.Compression.ZipArchive.Entries%2A?displayProperty=nameWithType>|  
|Zip アーカイブに含まれる個別のファイルにストリームを開く|<xref:System.IO.Compression.ZipArchiveEntry.Open%2A?displayProperty=nameWithType>|  
|Zip アーカイブからファイルを削除します。|<xref:System.IO.Compression.ZipArchiveEntry.Delete%2A?displayProperty=nameWithType>|  
  
 使用することはできません、<xref:System.IO.Compression.ZipFile>または<xref:System.IO.Compression.ZipFileExtensions>クラス[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]アプリ。 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]アプリ、圧縮されたファイルを使用する、次のクラスを使用する必要があります。  
  
-   <xref:System.IO.Compression.ZipArchive>  
  
-   <xref:System.IO.Compression.ZipArchiveEntry>  
  
-   <xref:System.IO.Compression.DeflateStream>  
  
-   <xref:System.IO.Compression.GZipStream>  
  
   
  
## Examples  
 この例を作成しを使用して zip アーカイブを抽出する方法を示しています、<xref:System.IO.Compression.ZipFile>クラス。 Zip アーカイブにフォルダーの内容を圧縮し、新しいフォルダーにそのコンテンツを抽出します。  
  
> [!TIP]
>  <xref:System.IO.Compression.ZipFile> クラスを使用するには、プロジェクトの `System.IO.Compression.FileSystem` アセンブリを参照する必要があります。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1aabb520-99b0-46c6-9368-21b4d84793eb">方法: 追加または参照マネージャーを使用して参照を削除します。</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateFromDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したディレクトリのファイルおよびディレクトリを含む zip アーカイブを作成します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destinationArchiveFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">アーカイブするディレクトリのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="destinationArchiveFileName">作成するアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <summary>指定したディレクトリのファイルおよびディレクトリを含む zip アーカイブを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アーカイブ内のファイル システムからディレクトリ構造が保持されます。 ディレクトリが空の場合は、空のアーカイブが作成されます。 このメソッドのオーバー ロードは、アーカイブでベース ディレクトリを含まないし、圧縮レベルを指定することはできません。 ベース ディレクトリを含めるか、圧縮レベル、呼び出しを指定する場合、<xref:System.IO.Compression.ZipFile.CreateFromDirectory%28System.String%2CSystem.String%2CSystem.IO.Compression.CompressionLevel%2CSystem.Boolean%29>メソッドのオーバー ロードします。  
  
 アーカイブが既に存在する場合、<xref:System.IO.IOException>例外がスローされます。 アーカイブに指定した名前のエントリが既に存在する場合は、同じ名前の 2 番目のエントリが作成されます。  
  
 ディレクトリ内のファイルは、アーカイブに追加することはできません、不完全で、無効なアーカイブは残さされ、メソッドがスローされます、<xref:System.IO.IOException>例外。  
  
   
  
## Examples  
 この例を作成しを使用して zip アーカイブを抽出する方法を示しています、<xref:System.IO.Compression.ZipFile>クラス。 Zip アーカイブにフォルダーの内容を圧縮し、新しいフォルダーにそのコンテンツを抽出します。 <xref:System.IO.Compression.ZipFile> クラスを使用するには、プロジェクトの `System.IO.Compression.FileSystem` アセンブリを参照する必要があります。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> または<paramref name="destinationArchiveFileName" />は<see cref="F:System.String.Empty" />空白しか含まれて、または、少なくとも 1 つの無効な文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceDirectoryName" />または<paramref name="destinationArchiveFileName" />、指定したパス、ファイル名、またはその両方が、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> 無効か存在しません (たとえばがマップされていないドライブにある)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> が既に存在します。  
  
- または - 
指定したディレクトリ内のファイルを開くことができませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="destinationArchiveFileName" /> がディレクトリを指定しています。  
  
- または - 
指定されたディレクトリへのアクセスに必要なアクセス許可が呼び出し元にいない<paramref name="sourceDirectoryName" />で指定されたファイルまたは<paramref name="destinationArchiveFileName" />します。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> または<paramref name="destinationArchiveFileName" />無効な形式が含まれています。  
  
- または - 
Zip アーカイブは書き込みをサポートしません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">アーカイブするディレクトリのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="destinationArchiveFileName">作成するアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="compressionLevel">エントリの作成時に速度または圧縮の有効性を強調するかどうかを示す列挙値の 1 つ。</param>
        <param name="includeBaseDirectory"><see langword="true" /> ディレクトリ名を含める<paramref name="sourceDirectoryName" />; アーカイブのルートにあります。<see langword="false" />ディレクトリの内容のみを含めます。</param>
        <summary>指定したディレクトリのファイルおよびディレクトリを含む zip アーカイブを作成し、指定した圧縮レベルを使用し、オプションでベース ディレクトリを含みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アーカイブ内のファイル システムからディレクトリ構造が保持されます。 ディレクトリが空の場合は、空のアーカイブが作成されます。 このメソッドのオーバー ロードを使用すると、圧縮レベルとアーカイブのベース ディレクトリを含めるかどうかを指定できます。  
  
 アーカイブが既に存在する場合、<xref:System.IO.IOException>例外がスローされます。 アーカイブに指定した名前のエントリが既に存在する場合は、同じ名前の 2 番目のエントリが作成されます。  
  
 ディレクトリ内のファイルは、アーカイブに追加することはできません、不完全で、無効なアーカイブは残さされ、メソッドがスローされます、<xref:System.IO.IOException>例外。  
  
   
  
## Examples  
 この例を作成しを使用して zip アーカイブを抽出する方法を示しています、<xref:System.IO.Compression.ZipFile>クラス。 Zip アーカイブにフォルダーの内容を圧縮し、新しいフォルダーにそのコンテンツを抽出します。 ベースのディレクトリが含まれる、アーカイブを圧縮するときと、効率性より操作の速度を強調するために、圧縮レベルを設定します。 <xref:System.IO.Compression.ZipFile> クラスを使用するには、プロジェクトの `System.IO.Compression.FileSystem` アセンブリを参照する必要があります。  
  
 [!code-csharp[System.IO.Compression.ZipFile#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program2.cs#2)]
 [!code-vb[System.IO.Compression.ZipFile#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> または<paramref name="destinationArchiveFileName" />は<see cref="F:System.String.Empty" />空白しか含まれて、または、少なくとも 1 つの無効な文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceDirectoryName" />または<paramref name="destinationArchiveFileName" />、指定したパス、ファイル名、またはその両方が、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> 無効か存在しません (たとえばがマップされていないドライブにある)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> が既に存在します。  
  
- または - 
指定したディレクトリ内のファイルを開くことができませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="destinationArchiveFileName" /> がディレクトリを指定しています。  
  
- または - 
指定されたディレクトリへのアクセスに必要なアクセス許可が呼び出し元にいない<paramref name="sourceDirectoryName" />で指定されたファイルまたは<paramref name="destinationArchiveFileName" />します。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> または<paramref name="destinationArchiveFileName" />無効な形式が含まれています。  
  
- または - 
Zip アーカイブは書き込みをサポートしません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">アーカイブするディレクトリのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="destinationArchiveFileName">作成するアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="compressionLevel">エントリの作成時に速度または圧縮の有効性を強調するかどうかを示す列挙値の 1 つ。</param>
        <param name="includeBaseDirectory"><see langword="true" /> ディレクトリ名を含める<paramref name="sourceDirectoryName" />; アーカイブのルートにあります。<see langword="false" />ディレクトリの内容のみを含めます。</param>
        <param name="entryNameEncoding">このアーカイブのエントリ名の読み取りまたは書き込み時に使用するエンコード。 エントリ名の UTF-8 エンコードをサポートしない zip アーカイブ ツールとライブラリとの相互運用性のためにエンコードが必要な場合にのみ、このパラメーターの値を指定してください。</param>
        <summary>指定したディレクトリのファイルおよびディレクトリを含む zip アーカイブを作成し、指定した圧縮レベルとエントリ名の文字エンコーディングを使用し、オプションでベース ディレクトリを含みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アーカイブ内のファイル システムからディレクトリ構造が保持されます。 ディレクトリが空の場合は、空のアーカイブが作成されます。 このメソッドのオーバー ロードを使用すると、圧縮レベルと文字エンコーディング、およびアーカイブでベース ディレクトリを含めるかどうかを指定できます。  
  
 アーカイブが既に存在する場合、<xref:System.IO.IOException>例外がスローされます。 アーカイブに指定した名前のエントリが既に存在する場合は、同じ名前の 2 番目のエントリが作成されます。  
  
 ディレクトリ内のファイルは、アーカイブに追加することはできません、不完全で、無効なアーカイブは残さされ、メソッドがスローされます、<xref:System.IO.IOException>例外。  
  
 場合`entryNameEncoding`以外の値に設定されて`null`エントリ名が指定したエンコーディングを使用してエンコードされます。 各エントリでは、エンコード (ローカル ファイル ヘッダーの汎用のビット フラグ) にフラグを設定、指定したエンコーディングが utf-8 の場合は、  
  
 場合`entryNameEncoding`に設定されている`null`エントリの名前は、次の規則に従ってエンコードされます。  
  
-   ASCII 範囲外の文字が含まれているエントリの名前、言語エンコード フラグが設定されてとエントリ名をエンコードする utf-8 を使用します。  
  
-   ASCII 文字のみが含まれているエントリの名前、言語エンコード フラグが設定されてとエントリ名のエンコードに現在のシステム既定のコード ページを使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirectoryName" /> または<paramref name="destinationArchiveFileName" />は<see cref="F:System.String.Empty" />空白しか含まれて、または、少なくとも 1 つの無効な文字が含まれています。  
  
- または - 
 <paramref name="entryNameEncoding" /> utf-8 以外をエンコーディングを Unicode に設定します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> または <paramref name="destinationArchiveFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceDirectoryName" />または<paramref name="destinationArchiveFileName" />、指定したパス、ファイル名、またはその両方が、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirectoryName" /> 無効か存在しません (たとえばがマップされていないドライブにある)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationArchiveFileName" /> が既に存在します。  
  
- または - 
指定したディレクトリ内のファイルを開くことができませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="destinationArchiveFileName" /> がディレクトリを指定しています。  
  
- または - 
指定されたディレクトリへのアクセスに必要なアクセス許可が呼び出し元にいない<paramref name="sourceDirectoryName" />で指定されたファイルまたは<paramref name="destinationArchiveFileName" />します。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceDirectoryName" /> または<paramref name="destinationArchiveFileName" />無効な形式が含まれています。  
  
- または - 
Zip アーカイブは書き込みをサポートしません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExtractToDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した zip アーカイブのすべてのファイルをファイル システムのディレクトリに抽出します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">抽出するアーカイブのパス。</param>
        <param name="destinationDirectoryName">抽出ファイルを置くディレクトリのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <summary>指定した zip アーカイブのすべてのファイルをファイル システムのディレクトリに抽出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定されたディレクトリとすべてのサブディレクトリを作成します。 インストール先ディレクトリが既に存在できません。 例外に関連するパスの検証、`destinationDirectoryName`または`sourceArchiveFileName`パラメーターが抽出する前にスローされます。 それ以外の場合、抽出時にエラーが発生した場合、アーカイブは部分的に展開されたままになります。 抽出された各ファイルが同じ相対パスで指定されたディレクトリに`destinationDirectoryName`のソースとしてエントリがアーカイブのルートにあります。  
  
   
  
## Examples  
 この例を作成しを使用して zip アーカイブを抽出する方法を示しています、<xref:System.IO.Compression.ZipFile>クラス。 Zip アーカイブにフォルダーの内容を圧縮し、新しいフォルダーには、そのコンテンツを抽出します。 <xref:System.IO.Compression.ZipFile> クラスを使用するには、プロジェクトの `System.IO.Compression.FileSystem` アセンブリを参照する必要があります。  
  
 [!code-csharp[System.IO.Compression.ZipFile#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.zipfile/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipFile#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.zipfile/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationDirectoryName" /> または<paramref name="sourceArchiveFileName" />は<see cref="F:System.String.Empty" />空白しか含まれて、または、少なくとも 1 つの無効な文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceArchiveFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス<paramref name="destinationDirectoryName" />または<paramref name="sourceArchiveFileName" />システム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> で指定したディレクトリが既に存在します。  
  
- または - 
アーカイブ内のエントリの名前が <see cref="F:System.String.Empty" /> か、空白のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。  
  
- または - 
指定されたディレクトリ外にあるファイルを作成するアーカイブ エントリを抽出する<paramref name="destinationDirectoryName" />します。 (たとえば、これはエントリ名に親ディレクトリのアクセサーが含まれている場合に発生する可能性があります。) 
- または - 
抽出するアーカイブ エントリは、同じアーカイブから既に抽出されたエントリと同じ名前を持ちます。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元には、アーカイブまたは目的のディレクトリへのアクセスに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="destinationDirectoryName" /> または<paramref name="sourceArchiveFileName" />無効な形式が含まれています。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceArchiveFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.IO.InvalidDataException">指定されたアーカイブ<paramref name="sourceArchiveFileName" />は有効な zip アーカイブではありません。  
  
- または - 
アーカイブ エントリが見つからなかったか、破損しています。  
  
- または - 
アーカイブ エントリがサポートされていない圧縮方式を使用して圧縮されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, overwriteFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">抽出されるアーカイブにファイル システム上のパス。</param>
        <param name="destinationDirectoryName">ファイル システムのインストール先ディレクトリへのパス。 指定されたディレクトリが存在する必要がありますが、それに含まれるディレクトリが存在する必要があります。</param>
        <param name="overwriteFiles"><see langword="true" /> ファイルを上書きするには<see langword="false" />それ以外の場合。</param>
        <summary>すべてのファイル システムにファイルをディレクトリに指定されたアーカイブを抽出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 指定されたディレクトリが存在する必要があります。 メソッドは、指定されたディレクトリとすべてのサブディレクトリを作成します。
 
 アーカイブを抽出中にエラーがある場合は、アーカイブが抽出された部分的には残ります。
  
 抽出されたファイルがある同じ相対パスになるように各エントリを抽出する、`destinationDirectoryName`ように、エントリをアーカイブする必要があります。
 
 パスは相対パスまたは絶対パス情報を指定できます。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。
 
 アーカイブするファイルがある無効な場合は、最終更新時刻、最初日付と時刻のタイムスタンプの Zip 形式 (1980 年 1 月 1 日の午前 0 時) で表現できる使用されます。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceArchiveFileName" /> または<paramref name="destinationDirectoryName" />長さ 0 の文字列が唯一の空白を含むで定義されている 1 つまたは複数の無効な文字が含まれていますまたは<see cref="F:System.IO.Path.InvalidPathChars" />します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceArchiveFileName" /> または<paramref name="destinationDirectoryName" />システム定義の最大長を超えるパス、ファイル名、またはその両方を指定します。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパス<paramref name="sourceArchiveFileName" />または<paramref name="destinationDirectoryName" />が無効です (たとえばがマップされていないドライブにある)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> で指定したディレクトリが既に存在します。

- または -

I/O エラーが発生しました。

- または -

名前、<see cref="T:System.IO.Compression.ZipArchiveEntry" />長さ 0 の唯一の空白文字が含まれていますで定義されている 1 つまたは複数の無効な文字が含まれていますまたは<see cref="F:System.IO.Path.InvalidPathChars" />します。

- または -

抽出、 <see cref="T:System.IO.Compression.ZipArchiveEntry" /> (たとえば、親ディレクトリのアクセサー) ため、変換先ディレクトリ外のファイル変換先になります。

- または -

A<see cref="T:System.IO.Compression.ZipArchiveEntry" />同じアーカイブから既に抽出されたエントリと同じ名前です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> の形式が正しくありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceArchiveFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.IO.InvalidDataException">指定されたアーカイブ<paramref name="sourceArchiveFileName" />は無効な<see cref="T:System.IO.Compression.ZipArchive" />します。

- または -

A<see cref="T:System.IO.Compression.ZipArchiveEntry" />が見つからないか破損しています。

- または -

A<see cref="T:System.IO.Compression.ZipArchiveEntry" />サポートされていない圧縮方式を使用して圧縮されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">抽出するアーカイブのパス。</param>
        <param name="destinationDirectoryName">抽出ファイルを置くディレクトリのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="entryNameEncoding">このアーカイブのエントリ名の読み取りまたは書き込み時に使用するエンコード。 エントリ名の UTF-8 エンコードをサポートしない zip アーカイブ ツールとライブラリとの相互運用性のためにエンコードが必要な場合にのみ、このパラメーターの値を指定してください。</param>
        <summary>指定した zip アーカイブのすべてのファイルをファイル システムのディレクトリに抽出し、エントリ名に指定した文字エンコーディングを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定されたディレクトリとすべてのサブディレクトリを作成します。 インストール先ディレクトリが既に存在できません。 例外に関連するパスの検証、`destinationDirectoryName`または`sourceArchiveFileName`パラメーターが抽出する前にスローされます。 それ以外の場合、抽出時にエラーが発生した場合、アーカイブは部分的に展開されたままになります。 抽出された各ファイルが同じ相対パスで指定されたディレクトリに`destinationDirectoryName`のソースとしてエントリがアーカイブのルートにあります。  
  
 場合`entryNameEncoding`以外の値に設定されて`null`エントリの名前は、次の規則に従ってデコードされます。  
  
-   エンコード (ローカル ファイル ヘッダーの汎用のビット フラグ) にフラグが設定されていない、エントリ名のエントリの名前は、指定したエンコーディングを使用してデコードされます。  
  
-   言語のエンコード フラグが設定されているエントリでは、エントリの名前は、utf-8 を使用してデコードされます。  
  
 場合`entryNameEncoding`に設定されている`null`エントリの名前は、次の規則に従ってデコードされます。  
  
-   エンコード (ローカル ファイル ヘッダーの汎用のビット フラグ) にフラグが設定されていない、エントリのエントリの名前は、現在のシステム既定のコード ページを使用してデコードされます。  
  
-   言語のエンコード フラグが設定されているエントリでは、エントリの名前は、utf-8 を使用してデコードされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationDirectoryName" /> または<paramref name="sourceArchiveFileName" />は<see cref="F:System.String.Empty" />空白しか含まれて、または、少なくとも 1 つの無効な文字が含まれています。  
  
- または - 
 <paramref name="entryNameEncoding" /> utf-8 以外をエンコーディングを Unicode に設定します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> または <paramref name="sourceArchiveFileName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパス<paramref name="destinationDirectoryName" />または<paramref name="sourceArchiveFileName" />システム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> で指定したディレクトリが既に存在します。  
  
- または - 
アーカイブ内のエントリの名前が <see cref="F:System.String.Empty" /> か、空白のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。  
  
- または - 
指定されたディレクトリ外にあるファイルを作成するアーカイブ エントリを抽出する<paramref name="destinationDirectoryName" />します。 (たとえば、これはエントリ名に親ディレクトリのアクセサーが含まれている場合に発生する可能性があります。) 
- または - 
抽出するアーカイブ エントリは、同じアーカイブから既に抽出されたエントリと同じ名前を持ちます。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元には、アーカイブまたは目的のディレクトリへのアクセスに必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="destinationDirectoryName" /> または<paramref name="sourceArchiveFileName" />無効な形式が含まれています。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceArchiveFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.IO.InvalidDataException">指定されたアーカイブ<paramref name="sourceArchiveFileName" />は有効な zip アーカイブではありません。  
  
- または - 
アーカイブ エントリが見つからなかったか、破損しています。  
  
- または - 
アーカイブ エントリがサポートされていない圧縮方式を使用して圧縮されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding, overwriteFiles As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding, overwriteFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">抽出されるアーカイブにファイル システム上のパス。</param>
        <param name="destinationDirectoryName">ファイル システムのインストール先ディレクトリへのパス。 指定されたディレクトリが存在する必要がありますが、それに含まれるディレクトリが存在する必要があります。</param>
        <param name="entryNameEncoding">このエントリの名前を読み取るときに使用するエンコード<see cref="T:System.IO.Compression.ZipArchive" />します。</param>
        <param name="overwriteFiles"><see langword="true" /> ファイルを上書きするには<see langword="false" />それ以外の場合。</param>
        <summary>すべてのファイル システムにファイルをディレクトリに指定されたアーカイブを抽出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 指定されたディレクトリが存在する必要があります。 このメソッドは、指定されたディレクトリとすべてのサブディレクトリに作成されます。

 アーカイブを抽出中にエラーがある場合は、アーカイブが抽出された部分的には残ります。

 抽出されたファイルがある同じ相対パスになるように各エントリを抽出する、`destinationDirectoryName`ように、エントリをアーカイブする必要があります。

 パスは相対パスまたは絶対パス情報を指定できます。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。

 アーカイブするファイルがある無効な場合は、最終更新時刻、最初日付と時刻のタイムスタンプの Zip 形式 (1980 年 1 月 1 日の午前 0 時) で表現できる使用されます。
 
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceArchiveFileName" /> または<paramref name="destinationDirectoryName" />長さ 0 の文字列が唯一の空白を含むで定義されている 1 つまたは複数の無効な文字が含まれていますまたは<see cref="F:System.IO.Path.InvalidPathChars" />します。
 
- または - 
 <paramref name="entryNameEncoding" /> utf-8 以外をエンコーディングを Unicode に設定します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="sourceArchiveFileName" /> または<paramref name="destinationDirectoryName" />システム定義の最大長を超えるパス、ファイル名、またはその両方を指定します。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパス<paramref name="sourceArchiveFileName" />または<paramref name="destinationDirectoryName" />が無効です (たとえばがマップされていないドライブにある)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="destinationDirectoryName" /> で指定したディレクトリが既に存在します。

- または -

I/O エラーが発生しました。

- または -

名前、<see cref="T:System.IO.Compression.ZipArchiveEntry" />長さ 0 の唯一の空白文字が含まれていますで定義されている 1 つまたは複数の無効な文字が含まれていますまたは<see cref="F:System.IO.Path.InvalidPathChars" />します。

- または -

抽出、 <see cref="T:System.IO.Compression.ZipArchiveEntry" /> (たとえば、親ディレクトリのアクセサー) ため、変換先ディレクトリ外のファイル変換先になります。

- または -

A<see cref="T:System.IO.Compression.ZipArchiveEntry" />同じアーカイブから既に抽出されたエントリと同じ名前です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="sourceArchiveFileName" /> または <paramref name="destinationDirectoryName" /> の形式が正しくありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceArchiveFileName" /> が見つかりませんでした。</exception>
        <exception cref="T:System.IO.InvalidDataException">指定されたアーカイブ<paramref name="sourceArchiveFileName" />は無効な<see cref="T:System.IO.Compression.ZipArchive" />します。

- または -

アーカイブ エントリが見つからなかったか、破損しています。

- または -

サポートされていない圧縮方式を使用してアーカイブ エントリが圧縮されました。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したパスとモードで zip アーカイブを開きます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">開くアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="mode">開いているアーカイブのエントリで許可されている操作を指定する列挙値の 1 つ。</param>
        <summary>指定したパスとモードで zip アーカイブを開きます。</summary>
        <returns>開いている zip アーカイブ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定すると、`mode`パラメーターを<xref:System.IO.Compression.ZipArchiveMode.Read>を開くと、アーカイブ<xref:System.IO.FileMode.Open>から、<xref:System.IO.FileMode>ファイル モードの値としての列挙体。 アーカイブが存在しない場合、<xref:System.IO.FileNotFoundException>例外がスローされます。 設定、`mode`パラメーターを<xref:System.IO.Compression.ZipArchiveMode.Read>呼び出しと同じですが、<xref:System.IO.Compression.ZipFile.OpenRead%2A>メソッド。  
  
 設定すると、`mode`パラメーターを<xref:System.IO.Compression.ZipArchiveMode.Create>を開くと、アーカイブ<xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType>ファイル モードの値として。 アーカイブが既に存在する場合、<xref:System.IO.IOException>がスローされます。  
  
 設定すると、`mode`パラメーターを<xref:System.IO.Compression.ZipArchiveMode.Update>を開くと、アーカイブ<xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType>ファイル モードの値として。 アーカイブが存在する場合は、開かれます。 既存のエントリを変更することができ、新しいエントリを作成できます。 アーカイブが存在しない場合は、新しいアーカイブが作成されます。ただしで zip アーカイブを作成する<xref:System.IO.Compression.ZipArchiveMode.Update>モードとして作成することで効率は<xref:System.IO.Compression.ZipArchiveMode.Create>モード。  
  
   
  
## Examples  
 次の例では、更新モードで zip アーカイブを開き、アーカイブにエントリを追加する方法を示します。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program3.cs#3)]
 [!code-vb[System.IO.Compression.ZipArchive#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> が <see cref="F:System.String.Empty" /> か、空白のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="archiveFileName" />、指定したパス、ファイル名、またはその両方が、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> 無効か存在しません (たとえばがマップされていないドライブにある)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="archiveFileName" /> 開けませんでした。  
  
- または - 
 <paramref name="mode" /> 設定されている<see cref="F:System.IO.Compression.ZipArchiveMode.Create" />で指定されたファイルが、<paramref name="archiveFileName" />既に存在します。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="archiveFileName" /> がディレクトリを指定しています。  
  
- または - 
指定されたファイルへのアクセスに必要なアクセス許可が呼び出し元にいない<paramref name="archiveFileName" />します。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 無効な値を指定します。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="mode" /> 設定されている<see cref="F:System.IO.Compression.ZipArchiveMode.Read" />で指定されたファイルが、<paramref name="archiveFileName" />が見つかりません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> に無効な書式指定が格納されています。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> zip アーカイブとして解釈できませんでした。  
  
- または - 
 <paramref name="mode" /> <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />が、エントリが見つからないか壊れている、読み取ることができません。  
  
- または - 
 <paramref name="mode" /> <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />が、エントリが大きすぎてメモリに収まるようにします。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode, entryNameEncoding As Encoding) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode * System.Text.Encoding -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode, entryNameEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">開くアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <param name="mode">開いているアーカイブのエントリで許可されている操作を指定する列挙値の 1 つ。</param>
        <param name="entryNameEncoding">このアーカイブのエントリ名の読み取りまたは書き込み時に使用するエンコード。 エントリ名の UTF-8 エンコードをサポートしない zip アーカイブ ツールとライブラリとの相互運用性のためにエンコードが必要な場合にのみ、このパラメーターの値を指定してください。</param>
        <summary>指定されたモードで、エントリ名に指定された文字エンコーディングを使用して指定されたパスの zip のアーカイブを開きます。</summary>
        <returns>開いている zip アーカイブ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定すると、`mode`パラメーターを<xref:System.IO.Compression.ZipArchiveMode.Read>を開くと、アーカイブ<xref:System.IO.FileMode.Open?displayProperty=nameWithType>ファイル モードの値として。 アーカイブが存在しない場合、<xref:System.IO.FileNotFoundException>例外がスローされます。 設定、`mode`パラメーターを<xref:System.IO.Compression.ZipArchiveMode.Read>呼び出しと同じですが、<xref:System.IO.Compression.ZipFile.OpenRead%2A>メソッド。  
  
 設定すると、`mode`パラメーターを<xref:System.IO.Compression.ZipArchiveMode.Create>を開くと、アーカイブ<xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType>ファイル モードの値として。 アーカイブが既に存在する場合、<xref:System.IO.IOException>がスローされます。  
  
 設定すると、`mode`パラメーターを<xref:System.IO.Compression.ZipArchiveMode.Update>を開くと、アーカイブ<xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType>ファイル モードの値として。 アーカイブが存在する場合は、開かれます。 既存のエントリを変更することができ、新しいエントリを作成できます。 アーカイブが存在しない場合は、新しいアーカイブが作成されます。ただしで zip アーカイブを作成する<xref:System.IO.Compression.ZipArchiveMode.Update>モードとして作成することで効率は<xref:System.IO.Compression.ZipArchiveMode.Create>モード。  
  
 読み取り用の zip アーカイブ ファイルを開くと`entryNameEncoding`に設定されている`null`エントリの名前は、次の規則に従ってデコードされます。  
  
-   エンコード (ローカル ファイル ヘッダーの汎用のビット フラグ) にフラグが設定されていない場合、現在のシステム既定のコード ページは、エントリ名のデコードに使用されます。  
  
-   言語エンコード フラグが設定されている場合は、utf-8 が、エントリ名のデコードに使用されます。  
  
 読み取り用の zip アーカイブ ファイルを開くと`entryNameEncoding`以外の値に設定されて`null`エントリの名前は、次の規則に従ってデコードされます。  
  
-   エンコード フラグは設定しない場合、指定した`entryNameEncoding`エントリ名のデコードに使用します。  
  
-   言語エンコード フラグが設定されている場合は、utf-8 が、エントリ名のデコードに使用されます。  
  
 アーカイブ ファイルを作成する場合と`entryNameEncoding`に設定されている`null`エントリの名前は、次の規則に従ってエンコードされます。  
  
-   ASCII 範囲外の文字が含まれているエントリの名前、言語エンコード フラグが設定されてとエントリ名は、utf-8 を使用してエンコードされます。  
  
-   ASCII 文字のみが含まれているエントリの名前、言語エンコード フラグが設定されていないとエントリの名前は、現在のシステム既定のコード ページを使用してエンコードされます。  
  
 アーカイブ ファイルを作成する場合と`entryNameEncoding`以外の値に設定されて`null`、指定した`entryNameEncoding`エントリの名前をバイトにエンコードするために使用します。 指定したエンコーディングは utf-8 エンコードが場合にのみ、言語のエンコード (ローカル ファイル ヘッダーの汎用のビット フラグ) にフラグが設定されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> が <see cref="F:System.String.Empty" /> か、空白のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。  
  
- または - 
 <paramref name="entryNameEncoding" /> utf-8 以外をエンコーディングを Unicode に設定します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="archiveFileName" />、指定したパス、ファイル名、またはその両方が、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> 無効か存在しません (たとえばがマップされていないドライブにある)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="archiveFileName" /> 開けませんでした。  
  
- または - 
 <paramref name="mode" /> 設定されている<see cref="F:System.IO.Compression.ZipArchiveMode.Create" />で指定されたファイルが、<paramref name="archiveFileName" />既に存在します。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="archiveFileName" /> がディレクトリを指定しています。  
  
- または - 
指定されたファイルへのアクセスに必要なアクセス許可が呼び出し元にいない<paramref name="archiveFileName" />します。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 無効な値を指定します。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="mode" /> 設定されている<see cref="F:System.IO.Compression.ZipArchiveMode.Read" />で指定されたファイルが、<paramref name="archiveFileName" />が見つかりません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> に無効な書式指定が格納されています。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> zip アーカイブとして解釈できませんでした。  
  
- または - 
 <paramref name="mode" /> <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />が、エントリが見つからないか壊れている、読み取ることができません。  
  
- または - 
 <paramref name="mode" /> <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />が、エントリが大きすぎてメモリに収まるようにします。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive OpenRead (string archiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive OpenRead(string archiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenRead (archiveFileName As String) As ZipArchive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ OpenRead(System::String ^ archiveFileName);" />
      <MemberSignature Language="F#" Value="static member OpenRead : string -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.OpenRead archiveFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">開くアーカイブのパス。相対パスまたは絶対パスとして指定します。 相対パスは、現在の作業ディレクトリに対して相対的に解釈されます。</param>
        <summary>指定されたパスで読み取りのための zip のアーカイブを開きます。</summary>
        <returns>開いている zip アーカイブ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出すことは、<xref:System.IO.Compression.ZipFile.Open%2A>メソッドと設定、`mode`パラメーター<xref:System.IO.Compression.ZipArchiveMode.Read>します。 開くと、アーカイブ<xref:System.IO.FileMode.Open?displayProperty=nameWithType>ファイル モードの値として。 アーカイブが存在しない場合、<xref:System.IO.FileNotFoundException>例外がスローされます。  
  
   
  
## Examples  
 次の例では、読み取り用の zip アーカイブを開く方法を示します。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="archiveFileName" /> が <see cref="F:System.String.Empty" /> か、空白のみが含まれているか、無効な文字が少なくとも 1 つ含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="archiveFileName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException"><paramref name="archiveFileName" />、指定したパス、ファイル名、またはその両方が、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="archiveFileName" /> 無効か存在しません (たとえばがマップされていないドライブにある)。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="archiveFileName" /> 開けませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="archiveFileName" /> がディレクトリを指定しています。  
  
- または - 
指定されたファイルへのアクセスに必要なアクセス許可が呼び出し元にいない<paramref name="archiveFileName" />します。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定されたファイル<paramref name="archiveFileName" />が見つかりません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="archiveFileName" /> に無効な書式指定が格納されています。</exception>
        <exception cref="T:System.IO.InvalidDataException"><paramref name="archiveFileName" /> zip アーカイブとして解釈できませんでした。</exception>
      </Docs>
    </Member>
  </Members>
</Type>