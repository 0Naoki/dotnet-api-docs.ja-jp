<Type Name="JsonReaderWriterFactory" FullName="System.Runtime.Serialization.Json.JsonReaderWriterFactory">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c0092286e389e04d7f227b072971845d72f42e71" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class JsonReaderWriterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonReaderWriterFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonReaderWriterFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonReaderWriterFactory abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="78ae2-101">ストリームまたはバッファーから JSON (JavaScript Object Notation) でエンコードされたデータを読み取り、XML Infoset にマップできる <see cref="T:System.Xml.XmlDictionaryReader" /> のインスタンスと、XML Infoset を JSON にマップし、JSON エンコードされたデータをストリームに書き込むことができる <see cref="T:System.Xml.XmlDictionaryWriter" /> のインスタンスを作成します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="78ae2-101">Produces instances of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset and instances of <see cref="T:System.Xml.XmlDictionaryWriter" /> that can map an XML Infoset to JSON and write JSON-encoded data to a stream.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[indigo1](~/includes/indigo1-md.md)]<span data-ttu-id="78ae2-102"> は、JSON データと XML Infoset との間のマッピングを使用して、JSON メッセージを処理します。</span><span class="sxs-lookup"><span data-stu-id="78ae2-102"> processes JSON messages using a mapping between JSON data and the XML Infoset.</span></span> <span data-ttu-id="78ae2-103">通常、このマッピングは表示されません。</span><span class="sxs-lookup"><span data-stu-id="78ae2-103">Normally, this mapping is hidden from view.</span></span> <span data-ttu-id="78ae2-104">ただし、一部の高度なシナリオでは、JSON と XML 間の変換を手動で行う必要がある場合があります。</span><span class="sxs-lookup"><span data-stu-id="78ae2-104">However, in some advanced scenarios it may be necessary to manually convert between JSON and XML.</span></span> <span data-ttu-id="78ae2-105">この場合、<xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory> クラスを使用して、必要な XML リーダーおよび XML ライターを作成できます。</span><span class="sxs-lookup"><span data-stu-id="78ae2-105">In this case, the <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory> class can be used to create the necessary XML readers and writers.</span></span> <span data-ttu-id="78ae2-106">すべての XML Infoset 要素を JSON にマップできるわけではありません。</span><span class="sxs-lookup"><span data-stu-id="78ae2-106">Note that not every XML Infoset element can be mapped to JSON.</span></span> [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="78ae2-107"> マッピングを参照してください[する方法: シリアル化データと JSON データの逆シリアル化](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)です。</span><span class="sxs-lookup"><span data-stu-id="78ae2-107"> mapping, see [How to: Serialize and Deserialize JSON Data](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateJsonReader">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78ae2-108">JSON (JavaScript Object Notation) でエンコードされたストリームまたはバッファーを XML Infoset にマップできる <see cref="T:System.Xml.XmlDictionaryReader" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-108">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map - streams or buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ae2-109">各オーバーロードは、信頼できないデータを読み取るときに、<xref:System.Xml.XmlDictionaryReaderQuotas> を使用してサービス拒否 (DoS) 攻撃を防ぎます。</span><span class="sxs-lookup"><span data-stu-id="78ae2-109">Each of the overloads uses a <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service (DoS) attacks when reading untrusted data.</span></span> [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="78ae2-110"> 使用して<xref:System.Xml.XmlDictionaryReaderQuotas>サービス拒否攻撃を防ぐためには、信頼されていないデータを読み取るときに、次を参照してください。[データのセキュリティに関する考慮事項](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)です。</span><span class="sxs-lookup"><span data-stu-id="78ae2-110"> using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateJsonReader">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryReader CreateJsonReader (byte[] buffer, System.Xml.XmlDictionaryReaderQuotas quotas);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryReader CreateJsonReader(unsigned int8[] buffer, class System.Xml.XmlDictionaryReaderQuotas quotas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateJsonReader (buffer As Byte(), quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryReader ^ CreateJsonReader(cli::array &lt;System::Byte&gt; ^ buffer, System::Xml::XmlDictionaryReaderQuotas ^ quotas);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="quotas" Type="System.Xml.XmlDictionaryReaderQuotas" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="78ae2-111">読み込み元の入力 <see cref="T:System.Byte" /> バッファー配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-111">The input <see cref="T:System.Byte" /> buffer array from which to read.</span>
          </span>
        </param>
        <param name="quotas">
          <span data-ttu-id="78ae2-112">信頼できないデータを読み取るときに、サービス拒否 (DoS) 攻撃を防ぐために使用される <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-112">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ae2-113">JSON (JavaScript Object Notation) でエンコードされたバッファーを XML Infoset にマップできる <see cref="T:System.Xml.XmlDictionaryReader" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-113">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78ae2-114">JSON (JavaScript Object Notation) データを処理できる <see cref="T:System.Xml.XmlDictionaryReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-114">An <see cref="T:System.Xml.XmlDictionaryReader" /> that can process JavaScript Object Notation (JSON) data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ae2-115">このオーバーロードは、<xref:System.Text.Encoding> パラメーターを受け入れません。</span><span class="sxs-lookup"><span data-stu-id="78ae2-115">This overload does not accept an <xref:System.Text.Encoding> parameter.</span></span> <span data-ttu-id="78ae2-116">文字エンコーディング (UTF-8、Unicode または Big-Endian Unicode) は、データが読み込まれるときに自動検出されます。</span><span class="sxs-lookup"><span data-stu-id="78ae2-116">The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</span></span>  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="78ae2-117"> 使用して<xref:System.Xml.XmlDictionaryReaderQuotas>サービス拒否攻撃を防ぐためには、信頼されていないデータを読み取るときに、次を参照してください。[データのセキュリティに関する考慮事項](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)です。</span><span class="sxs-lookup"><span data-stu-id="78ae2-117"> using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonReader">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryReader CreateJsonReader (System.IO.Stream stream, System.Xml.XmlDictionaryReaderQuotas quotas);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryReader CreateJsonReader(class System.IO.Stream stream, class System.Xml.XmlDictionaryReaderQuotas quotas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryReader ^ CreateJsonReader(System::IO::Stream ^ stream, System::Xml::XmlDictionaryReaderQuotas ^ quotas);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="quotas" Type="System.Xml.XmlDictionaryReaderQuotas" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="78ae2-118">読み込み元の入力 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-118">The input <see cref="T:System.IO.Stream" /> from which to read.</span>
          </span>
        </param>
        <param name="quotas">
          <span data-ttu-id="78ae2-119">信頼できないデータを読み取るときに、サービス拒否 (DoS) 攻撃を防ぐために使用される <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-119">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ae2-120">JSON (JavaScript Object Notation) でエンコードされたストリームを XML Infoset にマップできる <see cref="T:System.Xml.XmlDictionaryReader" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-120">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78ae2-121">JSON (JavaScript Object Notation) を読み取ることができる <see cref="T:System.Xml.XmlDictionaryReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-121">An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ae2-122">このオーバーロードは、<xref:System.Text.Encoding> パラメーターを使用しません。</span><span class="sxs-lookup"><span data-stu-id="78ae2-122">This overload does not take an <xref:System.Text.Encoding> parameter.</span></span> <span data-ttu-id="78ae2-123">文字エンコーディング (UTF-8、Unicode または Big-Endian Unicode) は、データが読み込まれるときに自動検出されます。</span><span class="sxs-lookup"><span data-stu-id="78ae2-123">The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</span></span>  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="78ae2-124"> 使用して<xref:System.Xml.XmlDictionaryReaderQuotas>サービス拒否攻撃を防ぐためには、信頼されていないデータを読み取るときに、次を参照してください。[データのセキュリティに関する考慮事項](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)です。</span><span class="sxs-lookup"><span data-stu-id="78ae2-124"> using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonReader">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryReader CreateJsonReader (byte[] buffer, int offset, int count, System.Xml.XmlDictionaryReaderQuotas quotas);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryReader CreateJsonReader(unsigned int8[] buffer, int32 offset, int32 count, class System.Xml.XmlDictionaryReaderQuotas quotas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateJsonReader (buffer As Byte(), offset As Integer, count As Integer, quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryReader ^ CreateJsonReader(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Xml::XmlDictionaryReaderQuotas ^ quotas);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="quotas" Type="System.Xml.XmlDictionaryReaderQuotas" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="78ae2-125">読み込み元の入力 <see cref="T:System.Byte" /> バッファー配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-125">The input <see cref="T:System.Byte" /> buffer array from which to read.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="78ae2-126">
            <c>buffer</c> の読み取り開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-126">Starting position from which to read in <c>buffer</c>.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="78ae2-127">
            <c>buffer</c> からの読み込み可能バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-127">Number of bytes that can be read from <c>buffer</c>.</span>
          </span>
        </param>
        <param name="quotas">
          <span data-ttu-id="78ae2-128">信頼できないデータを読み取るときに、サービス拒否 (DoS) 攻撃を防ぐために使用される <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-128">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ae2-129">JSON (JavaScript Object Notation) でエンコードされたバッファーを、サイズおよびオフセットを指定して、XML Infoset にマップできる <see cref="T:System.Xml.XmlDictionaryReader" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-129">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78ae2-130">JSON (JavaScript Object Notation) を読み取ることができる <see cref="T:System.Xml.XmlDictionaryReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-130">An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ae2-131">このオーバーロードは、<xref:System.Text.Encoding> パラメーターを使用しません。</span><span class="sxs-lookup"><span data-stu-id="78ae2-131">This overload does not take an <xref:System.Text.Encoding> parameter.</span></span> <span data-ttu-id="78ae2-132">文字エンコーディング (UTF-8、Unicode または Big-Endian Unicode) は、データが読み込まれるときに自動検出されます。</span><span class="sxs-lookup"><span data-stu-id="78ae2-132">The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</span></span>  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="78ae2-133"> 使用して<xref:System.Xml.XmlDictionaryReaderQuotas>サービス拒否攻撃を防ぐためには、信頼されていないデータを読み取るときに、次を参照してください。[データのセキュリティに関する考慮事項](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)です。</span><span class="sxs-lookup"><span data-stu-id="78ae2-133"> using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonReader">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryReader CreateJsonReader (System.IO.Stream stream, System.Text.Encoding encoding, System.Xml.XmlDictionaryReaderQuotas quotas, System.Xml.OnXmlDictionaryReaderClose onClose);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryReader CreateJsonReader(class System.IO.Stream stream, class System.Text.Encoding encoding, class System.Xml.XmlDictionaryReaderQuotas quotas, class System.Xml.OnXmlDictionaryReaderClose onClose) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryReader ^ CreateJsonReader(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, System::Xml::XmlDictionaryReaderQuotas ^ quotas, System::Xml::OnXmlDictionaryReaderClose ^ onClose);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="quotas" Type="System.Xml.XmlDictionaryReaderQuotas" />
        <Parameter Name="onClose" Type="System.Xml.OnXmlDictionaryReaderClose" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="78ae2-134">読み込み元の入力 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-134">The input <see cref="T:System.IO.Stream" /> from which to read.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="78ae2-135">リーダーによって使用される文字エンコーディングを指定する <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-135">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the reader.</span>
          </span>
          <span data-ttu-id="78ae2-136">値として <see langword="null" /> が指定されている場合、リーダーは、エンコーディングを自動検出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-136">If <see langword="null" /> is specified as the value, the reader attempts to auto-detect the encoding.</span>
          </span>
        </param>
        <param name="quotas">
          <span data-ttu-id="78ae2-137">信頼できないデータを読み取るときに、サービス拒否 (DoS) 攻撃を防ぐために使用される <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-137">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data.</span>
          </span>
        </param>
        <param name="onClose">
          <span data-ttu-id="78ae2-138">リーダーが閉じられたときに呼び出す <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-138">The <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> delegate to call when the reader is closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ae2-139">JSON (JavaScript Object Notation) でエンコードされたストリームを、サイズおよびオフセットを指定して、XML Infoset にマップできる <see cref="T:System.Xml.XmlDictionaryReader" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-139">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78ae2-140">JSON (JavaScript Object Notation) を読み取ることができる <see cref="T:System.Xml.XmlDictionaryReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-140">An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="78ae2-141"> 使用して<xref:System.Xml.XmlDictionaryReaderQuotas>サービス拒否攻撃を防ぐためには、信頼されていないデータを読み取るときに、次を参照してください。[データのセキュリティに関する考慮事項](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)です。</span><span class="sxs-lookup"><span data-stu-id="78ae2-141"> using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonReader">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryReader CreateJsonReader (byte[] buffer, int offset, int count, System.Text.Encoding encoding, System.Xml.XmlDictionaryReaderQuotas quotas, System.Xml.OnXmlDictionaryReaderClose onClose);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryReader CreateJsonReader(unsigned int8[] buffer, int32 offset, int32 count, class System.Text.Encoding encoding, class System.Xml.XmlDictionaryReaderQuotas quotas, class System.Xml.OnXmlDictionaryReaderClose onClose) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryReader ^ CreateJsonReader(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Text::Encoding ^ encoding, System::Xml::XmlDictionaryReaderQuotas ^ quotas, System::Xml::OnXmlDictionaryReaderClose ^ onClose);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="quotas" Type="System.Xml.XmlDictionaryReaderQuotas" />
        <Parameter Name="onClose" Type="System.Xml.OnXmlDictionaryReaderClose" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="78ae2-142">読み込み元の入力 <see cref="T:System.Byte" /> バッファー配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-142">The input <see cref="T:System.Byte" /> buffer array from which to read.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="78ae2-143">
            <c>buffer</c> の読み取り開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-143">Starting position from which to read in <c>buffer</c>.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="78ae2-144">
            <c>buffer</c> からの読み込み可能バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-144">Number of bytes that can be read from <c>buffer</c>.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="78ae2-145">リーダーによって使用される文字エンコーディングを指定する <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-145">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the reader.</span>
          </span>
          <span data-ttu-id="78ae2-146">値として <see langword="null" /> が指定されている場合、リーダーは、エンコーディングを自動検出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-146">If <see langword="null" /> is specified as the value, the reader attempts to auto-detect the encoding.</span>
          </span>
        </param>
        <param name="quotas">
          <span data-ttu-id="78ae2-147">信頼できないデータを読み取るときに、サービス拒否 (DoS) 攻撃を防ぐために使用される <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-147">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data.</span>
          </span>
        </param>
        <param name="onClose">
          <span data-ttu-id="78ae2-148">リーダーが閉じられたときに呼び出す <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-148">The <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> delegate to call when the reader is closed.</span>
          </span>
          <span data-ttu-id="78ae2-149">既定値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-149">The default value is <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ae2-150">JSON (JavaScript Object Notation) でエンコードされたバッファーを、サイズとオフセットおよび文字エンコーディングを指定して、XML Infoset にマップできる <see cref="T:System.Xml.XmlDictionaryReader" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-150">Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78ae2-151">JSON (JavaScript Object Notation) を読み取ることができる <see cref="T:System.Xml.XmlDictionaryReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-151">An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="78ae2-152"> 使用して<xref:System.Xml.XmlDictionaryReaderQuotas>サービス拒否攻撃を防ぐためには、信頼されていないデータを読み取るときに、次を参照してください。[データのセキュリティに関する考慮事項](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)です。</span><span class="sxs-lookup"><span data-stu-id="78ae2-152"> using <xref:System.Xml.XmlDictionaryReaderQuotas> to prevent Denial of Service attacks when reading untrusted data, see [Security Considerations for Data](~/docs/framework/wcf/feature-details/security-considerations-for-data.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateJsonWriter">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78ae2-153">JSON でエンコードされたデータをストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-153">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ae2-154"><xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> 静的メソッドは、XML Infoset を JSON ストリームにマップできる <xref:System.Xml.XmlDictionaryWriter> のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="78ae2-154">The <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> static method returns an instance of an <xref:System.Xml.XmlDictionaryWriter> that can map an XML Infoset to a JSON stream.</span></span> <span data-ttu-id="78ae2-155"><xref:System.Xml.XmlDictionaryWriter> が有効な JSON を作成することは保証されていません。</span><span class="sxs-lookup"><span data-stu-id="78ae2-155">The <xref:System.Xml.XmlDictionaryWriter> is not guaranteed to produce valid JSON.</span></span> <span data-ttu-id="78ae2-156">JSON と XML 間のマッピングでサポートされていない方法で使用すると、例外をスローするか、無効な JSON ドキュメントを書き込む可能性があります。</span><span class="sxs-lookup"><span data-stu-id="78ae2-156">If it is used in a way not supported by the JSON-XML mapping, it may either throw an exception or write an invalid JSON document.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateJsonWriter">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryWriter CreateJsonWriter (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryWriter CreateJsonWriter(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryWriter ^ CreateJsonWriter(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="78ae2-157">JSON ライターの出力 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-157">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ae2-158">JSON でエンコードされたデータをストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-158">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78ae2-159">JSON でエンコードされたデータを、XML Infoset に基づいてストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-159">An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ae2-160">既定の文字エンコーディングは UTF-8 です。</span><span class="sxs-lookup"><span data-stu-id="78ae2-160">The default character encoding is UTF-8.</span></span> <span data-ttu-id="78ae2-161">ライターが閉じられると、ストリームも閉じられます。</span><span class="sxs-lookup"><span data-stu-id="78ae2-161">When the writer is closed, the stream is closed as well.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonWriter">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryWriter CreateJsonWriter (System.IO.Stream stream, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryWriter CreateJsonWriter(class System.IO.Stream stream, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryWriter ^ CreateJsonWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="78ae2-162">JSON ライターの出力 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-162">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="78ae2-163">ライターによって使用される文字エンコーディングを指定する <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-163">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer.</span>
          </span>
          <span data-ttu-id="78ae2-164">既定のエンコーディングは UTF-8 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-164">The default encoding is UTF-8.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ae2-165">JSON でエンコードされたデータを、文字エンコーディングを指定してストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-165">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character encoding.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78ae2-166">JSON でエンコードされたデータを、XML Infoset に基づいてストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-166">An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78ae2-167">ライターが閉じられると、ストリームも閉じられます。</span><span class="sxs-lookup"><span data-stu-id="78ae2-167">When the writer is closed, the stream is closed as well.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonWriter">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryWriter CreateJsonWriter (System.IO.Stream stream, System.Text.Encoding encoding, bool ownsStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryWriter CreateJsonWriter(class System.IO.Stream stream, class System.Text.Encoding encoding, bool ownsStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryWriter ^ CreateJsonWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, bool ownsStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="ownsStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="78ae2-168">JSON ライターの出力 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-168">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="78ae2-169">ライターによって使用される文字エンコーディングを指定する <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-169">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer.</span>
          </span>
          <span data-ttu-id="78ae2-170">既定のエンコーディングは UTF-8 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-170">The default encoding is UTF-8.</span>
          </span>
        </param>
        <param name="ownsStream">
          <span data-ttu-id="78ae2-171">完了時に出力ストリームがライターによって閉じられる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-171">If <see langword="true" />, the output stream is closed by the writer when done; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="78ae2-172">既定値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-172">The default value is <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ae2-173">JSON でエンコードされたデータを、文字エンコーディングを指定してストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-173">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character encoding.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78ae2-174">JSON でエンコードされたデータを、XML Infoset に基づいてストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-174">An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonWriter">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryWriter CreateJsonWriter (System.IO.Stream stream, System.Text.Encoding encoding, bool ownsStream, bool indent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryWriter CreateJsonWriter(class System.IO.Stream stream, class System.Text.Encoding encoding, bool ownsStream, bool indent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryWriter ^ CreateJsonWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, bool ownsStream, bool indent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="ownsStream" Type="System.Boolean" />
        <Parameter Name="indent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="78ae2-175">JSON ライターの出力 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-175">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="78ae2-176">ライターによって使用される文字エンコーディングを指定する <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-176">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer.</span>
          </span>
          <span data-ttu-id="78ae2-177">既定のエンコーディングは UTF-8 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-177">The default encoding is UTF-8.</span>
          </span>
        </param>
        <param name="ownsStream">
          <span data-ttu-id="78ae2-178">完了時に出力ストリームがライターによって閉じられる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-178">If <see langword="true" />, the output stream is closed by the writer when done; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="78ae2-179">既定値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-179">The default value is <see langword="true" />.</span>
          </span>
        </param>
        <param name="indent">
          <span data-ttu-id="78ae2-180">
            <see langword="true" /> の場合、出力は複数行形式を使用し、各レベルを適切にインデントします。それ以外の場合は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-180">If <see langword="true" />, the output uses multiline format, indenting each level properly; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ae2-181">JSON でエンコードされたデータを、指定した文字を使用してストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-181">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78ae2-182">JSON でエンコードされたデータを、XML Infoset に基づいてストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-182">An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJsonWriter">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlDictionaryWriter CreateJsonWriter (System.IO.Stream stream, System.Text.Encoding encoding, bool ownsStream, bool indent, string indentChars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlDictionaryWriter CreateJsonWriter(class System.IO.Stream stream, class System.Text.Encoding encoding, bool ownsStream, bool indent, string indentChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlDictionaryWriter ^ CreateJsonWriter(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, bool ownsStream, bool indent, System::String ^ indentChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="ownsStream" Type="System.Boolean" />
        <Parameter Name="indent" Type="System.Boolean" />
        <Parameter Name="indentChars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="78ae2-183">JSON ライターの出力 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-183">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="78ae2-184">ライターによって使用される文字エンコーディングを指定する <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-184">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer.</span>
          </span>
          <span data-ttu-id="78ae2-185">既定のエンコーディングは UTF-8 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-185">The default encoding is UTF-8.</span>
          </span>
        </param>
        <param name="ownsStream">
          <span data-ttu-id="78ae2-186">完了時に出力ストリームがライターによって閉じられる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-186">If <see langword="true" />, the output stream is closed by the writer when done; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="78ae2-187">既定値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-187">The default value is <see langword="true" />.</span>
          </span>
        </param>
        <param name="indent">
          <span data-ttu-id="78ae2-188">
            <see langword="true" /> の場合、出力は複数行形式を使用し、各レベルを適切にインデントします。それ以外の場合は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-188">If <see langword="true" />, the output uses multiline format, indenting each level properly; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="indentChars">
          <span data-ttu-id="78ae2-189">各レベルのインデントに使用される文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-189">The string used to indent each level.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78ae2-190">JSON でエンコードされたデータを、指定した文字を使用してストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-190">Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78ae2-191">JSON でエンコードされたデータを、XML Infoset に基づいてストリームに書き込む <see cref="T:System.Xml.XmlDictionaryWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="78ae2-191">An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>