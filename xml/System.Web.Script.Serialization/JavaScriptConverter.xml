<Type Name="JavaScriptConverter" FullName="System.Web.Script.Serialization.JavaScriptConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="752718b77e67b3a54f76d7c672a56001c11ffd3d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37604884" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class JavaScriptConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JavaScriptConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptConverter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JavaScriptConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class JavaScriptConverter abstract" />
  <TypeSignature Language="F#" Value="type JavaScriptConverter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="4d93e-101">カスタム型コンバーターの抽象基本クラスを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d93e-101">Provides an abstract base class for a custom type converter.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d93e-102"><xref:System.Web.Script.Serialization.JavaScriptConverter>クラスでは、シリアル化を実装して、ネイティブでサポートされていないマネージ型のプロセスを逆シリアル化することができます、<xref:System.Web.Script.Serialization.JavaScriptSerializer>クラス。</span><span class="sxs-lookup"><span data-stu-id="4d93e-102">The <xref:System.Web.Script.Serialization.JavaScriptConverter> class enables you to implement serialization and deserialization processes for managed types that are not natively supported by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class.</span></span> <span data-ttu-id="4d93e-103">使用することも<xref:System.Web.Script.Serialization.JavaScriptConverter>とき、シリアル化および逆シリアル化プロセスの詳細に制御する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4d93e-103">You can also use <xref:System.Web.Script.Serialization.JavaScriptConverter> when you need more control over the serialization and deserialization process.</span></span>  
  
 <span data-ttu-id="4d93e-104"><xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>プロパティは、カスタム コンバーターをコンバーターのサービスを提供する型を示します。</span><span class="sxs-lookup"><span data-stu-id="4d93e-104">The <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> property indicates the types for which a custom converter provides converter services.</span></span>  
  
 <span data-ttu-id="4d93e-105">カスタムのコンバーターを使用する必要がありますを示す、<xref:System.Web.Script.Serialization.JavaScriptSerializer>インスタンス、インスタンスと、コンバーターを登録する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4d93e-105">To indicate that a custom converter must be used by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, you must register the converter with the instance.</span></span> <span data-ttu-id="4d93e-106">使用する場合、<xref:System.Web.Script.Serialization.JavaScriptSerializer>クラスを直接、使用する必要があります、<xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A>コンバーターを登録します。</span><span class="sxs-lookup"><span data-stu-id="4d93e-106">If you are using the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class directly, you should use the <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> method to register the converter.</span></span> <span data-ttu-id="4d93e-107">それ以外の場合、ECMAScript (JavaScript) の Web メソッドを呼び出すことは、カスタムのコンバーターを使用する場合は、登録できますを追加して、`converters`構成ファイル内の要素。</span><span class="sxs-lookup"><span data-stu-id="4d93e-107">Otherwise, if you are invoking Web methods from ECMAScript (JavaScript) and you want to use the custom converter, you can register it by adding a `converters` element in the configuration file.</span></span> <span data-ttu-id="4d93e-108">詳細については、次を参照してください。[方法: Microsoft Ajax での ASP.NET サービスの構成](http://msdn.microsoft.com/library/ea4fb56e-bc1d-405a-9877-00cf5e552a30)します。</span><span class="sxs-lookup"><span data-stu-id="4d93e-108">For more information, see [How to: Configure ASP.NET Services in Microsoft Ajax](http://msdn.microsoft.com/library/ea4fb56e-bc1d-405a-9877-00cf5e552a30).</span></span>  
  
 <span data-ttu-id="4d93e-109">ときに、<xref:System.Web.Script.Serialization.JavaScriptSerializer>インスタンスが登録されると、カスタムのコンバーターを持っている、型、シリアライザーの呼び出しをシリアル化、<xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4d93e-109">When the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is serializing a type for which it has a custom converter registered, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> method.</span></span> <span data-ttu-id="4d93e-110">同様に、ときに、<xref:System.Web.Script.Serialization.JavaScriptSerializer>インスタンスは、JavaScript Object Notation (JSON) 文字列を逆シリアル化と、JSON 文字列内の型が、シリアライザーの呼び出しに関連付けられているカスタムのコンバーターが認識、<xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4d93e-110">Similarly, when the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is deserializing a JavaScript Object Notation (JSON) string and recognizes that a type inside the JSON string has a custom converter associated with it, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d93e-111">次の例のカスタムのコンバーターを作成する方法を示しています、<xref:System.Web.UI.WebControls.ListItemCollection>クラス。</span><span class="sxs-lookup"><span data-stu-id="4d93e-111">The following example shows how to create a custom converter for the <xref:System.Web.UI.WebControls.ListItemCollection> class.</span></span>  
  
 [!code-csharp[System.Web.Script.Serialization#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#2)]
 [!code-vb[System.Web.Script.Serialization#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="4d93e-112">
        <para>継承する場合<see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />、次のメンバーをオーバーライドする必要があります:- <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />   
  
-    <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />   
  
-    <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" />提供、<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />の実装によって使用されるメソッド<see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />.コンバーター コードは、シリアライザーがそれに渡されるディクショナリに含まれている値を取得できるようと型のオブジェクトにその値を変換する必要があります<paramref name="T" />します。これを実現する変換のカスタム コードを再実装するのではなく呼び出すことができます、<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />メソッド。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="4d93e-112">
          <para>When you inherit from <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />, you must override the following members:  -   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />  
  
-   <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /><see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> provides the <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method that will be used by implementers of <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" />. Converter code must be able to take a value that is contained in the dictionary that the serializer passes to it, and then convert that value into an object of type <paramref name="T" />. Rather than re-implementing the custom conversion code to accomplish this, you can call the <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Web.Configuration.Converter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JavaScriptConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; JavaScriptConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d93e-113">
            <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-113">Initializes a new instance of the <see cref="T:System.Web.Script.Serialization.JavaScriptConverter" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public abstract object Deserialize (System.Collections.Generic.IDictionary&lt;string,object&gt; dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; dictionary, class System.Type type, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Deserialize(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ dictionary, Type ^ type, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.Collections.Generic.IDictionary&lt;string, obj&gt; * Type * System.Web.Script.Serialization.JavaScriptSerializer -&gt; obj" Usage="javaScriptConverter.Deserialize (dictionary, type, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="dictionary">
          <span data-ttu-id="4d93e-114">名前/値ペアとして格納されているプロパティ データの <see cref="T:System.Collections.Generic.IDictionary`2" /> インスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-114">An <see cref="T:System.Collections.Generic.IDictionary`2" /> instance of property data stored as name/value pairs.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="4d93e-115">生成されるオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-115">The type of the resulting object.</span>
          </span>
        </param>
        <param name="serializer">
          <span data-ttu-id="4d93e-116">
            <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> インスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-116">The <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d93e-117">派生クラスでオーバーライドされた場合、提供されたディクショナリを、指定された型のオブジェクトに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-117">When overridden in a derived class, converts the provided dictionary into an object of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d93e-118">逆シリアル化されたオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-118">The deserialized object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="4d93e-119">
            <para>
              <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" />メソッド内の値を反復、<paramref name="dictionary" />で要求された型のインスタンスを構築するパラメーター、<paramref name="type" />パラメーター。コンバーターが値を直接使用できますが<paramref name="dictionary" />、コンバーター実装者が使用することをお勧め、<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />メソッド代わりにします。コンバーターがのこのメソッドを呼び出す必要があります、<see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" />から使用可能なインスタンス、<paramref name="serializer" />パラメーター。<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />メソッドによりからプロパティ値を渡すコンバーター <paramref name="dictionary" />、必要な型の値を返します。場合によってでは、カスタム型のコンバーターをこと自体にコンバーターが登録されているプロパティを処理する可能性があります (たとえば、型 B のプロパティを持つ型と型 B はカスタムのコンバーターに関連付けることも)。その場合は、呼び出す<see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />により、カスタムのコンバーターがディクショナリに含まれているプロパティのデータの呼び出されました。 再帰的になることを確認します。コンバーターがディクショナリ内のすべてのエントリを反復処理されるときに、対象の型の構築されたインスタンスを返します。コンバーターには、逆シリアル化中に問題が発生するがスローされます、<see cref="T:System.InvalidOperationException" />問題を説明するエラーです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-119">
              <para>The <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)" /> method iterates through the values in the <paramref name="dictionary" /> parameter to construct an instance of the type requested in the <paramref name="type" /> parameter. Although a converter can directly use values from <paramref name="dictionary" />, we recommend that the converter implementer use the <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method instead. The converter should call this method of the <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instance available from the <paramref name="serializer" /> parameter.  The <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> method enables converter to pass a property value from <paramref name="dictionary" />, and then return a value of the expected type. In some cases, a converter for a custom type might be working with properties that themselves have registered converters (for example, type A has a property of type B, and type B is also associated with a custom converter). In that case, invoking <see cref="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" /> makes sure that custom converters will be recursively invoked for property data that is contained in the dictionary. When the converter has iterated through all entries in the dictionary, it returns a constructed instance of the target type.  If the converter encounters a problem during deserialization, it should throw an <see cref="T:System.InvalidOperationException" /> error that describes the problem.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IDictionary&lt;string,object&gt; Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Serialize(object obj, class System.Web.Script.Serialization.JavaScriptSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Serialize (obj As Object, serializer As JavaScriptSerializer) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Serialize(System::Object ^ obj, System::Web::Script::Serialization::JavaScriptSerializer ^ serializer);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : obj * System.Web.Script.Serialization.JavaScriptSerializer -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="javaScriptConverter.Serialize (obj, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="serializer" Type="System.Web.Script.Serialization.JavaScriptSerializer" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="4d93e-120">シリアル化するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-120">The object to serialize.</span>
          </span>
        </param>
        <param name="serializer">
          <span data-ttu-id="4d93e-121">シリアル化を処理するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-121">The object that is responsible for the serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d93e-122">派生クラスでオーバーライドされた場合、名前/値ペアのディクショナリを構築します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-122">When overridden in a derived class, builds a dictionary of name/value pairs.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d93e-123">オブジェクトのデータを表すキー/値ペアを含むオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-123">An object that contains key/value pairs that represent the object’s data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d93e-124">、カスタムのコンバーターで登録された型をシリアル化すると、<xref:System.Web.Script.Serialization.JavaScriptSerializer>インスタンスを起動、<xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="4d93e-124">When you serialize a type for which a custom converter is registered, the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance invokes the <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="4d93e-125">
            <para>戻り値<see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" />必要があります、 <see cref="T:System.Collections.Generic.IDictionary`2" /> JSON に変換するオブジェクトのデータを表す 0 個以上の名前/値ペアを持つインスタンス。コンバーター自体には、JSON としてデータがシリアル化されません。コンバーターが、プロパティの名前 (ディクショナリの文字列キー) と対応するプロパティが含まれている名前/値ペアのディクショナリを作成する代わりに、(ディクショナリ内でオブジェクトの値) の値。<see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" />インスタンスが後でこれらを JSON に変換します。コンバーターには、例外が発生するがスローされます、<see cref="T:System.InvalidOperationException" />問題を説明するエラーです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-125">
              <para>The return value of <see cref="M:System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)" /> must be an <see cref="T:System.Collections.Generic.IDictionary`2" /> instance with zero or more name/value pairs that represent an object’s data to be converted to JSON. The converter itself does not serialize data as JSON. Instead, the converter builds a dictionary of name/value pairs that contain the property names (the string key for the dictionary) and corresponding property values (the object value in the dictionary). The <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instance subsequently converts these to JSON.  If the converter encounters an exception, it should throw an <see cref="T:System.InvalidOperationException" /> error that describes the problem.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SupportedTypes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; SupportedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; SupportedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SupportedTypes As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ SupportedTypes { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedTypes : seq&lt;Type&gt;" Usage="System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4d93e-126">派生クラスでオーバーライドされた場合、サポートされている型のコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-126">When overridden in a derived class, gets a collection of the supported types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4d93e-127">コンバーターによってサポートされている型を表す <see cref="T:System.Collections.Generic.IEnumerable`1" /> を実装するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-127">An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> that represents the types supported by the converter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d93e-128"><xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>プロパティは、コンバーターによってサポートされている型を一覧表示されます。</span><span class="sxs-lookup"><span data-stu-id="4d93e-128">The <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> property lists the types that are supported by the converter.</span></span> <span data-ttu-id="4d93e-129">実行時に、<xref:System.Web.Script.Serialization.JavaScriptSerializer>インスタンスでは、このプロパティを使用して、その対応するカスタムのコンバーターをマネージ型のマッピングを判断します。</span><span class="sxs-lookup"><span data-stu-id="4d93e-129">At run time, a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance uses this property to determine the mapping of managed types to their corresponding custom converters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d93e-130">次の例は、オーバーライドする方法を示します、<xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>派生クラスのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="4d93e-130">The following example shows how to override the <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> property in a derived class.</span></span> <span data-ttu-id="4d93e-131">この例では、コンバーターでのみサポートしている、<xref:System.Web.UI.WebControls.ListItemCollection>型。</span><span class="sxs-lookup"><span data-stu-id="4d93e-131">In this example, the converter supports only the <xref:System.Web.UI.WebControls.ListItemCollection> type.</span></span> <span data-ttu-id="4d93e-132">このコード例が示されている例の一部、<xref:System.Web.Script.Serialization.JavaScriptConverter>クラス。</span><span class="sxs-lookup"><span data-stu-id="4d93e-132">This code example is part of a larger example provided for the <xref:System.Web.Script.Serialization.JavaScriptConverter> class.</span></span>  
  
 [!code-csharp[System.Web.Script.Serialization#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#3)]
 [!code-vb[System.Web.Script.Serialization#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="4d93e-133">
            <para>
              <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /> コレクション、およびコレクションには、少なくとも 1 つのエントリを含める必要がありますを返す常にする必要があります。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="4d93e-133">
              <para>
                <see cref="P:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes" /> must always return a collection, and the collection must contain at least one entry.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>