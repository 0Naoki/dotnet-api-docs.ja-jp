<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeTypeDeclaration.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac552c8bfcbe9527832064fa06fd15fae096ecb1cf0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52c8bfcbe9527832064fa06fd15fae096ecb1cf0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Represents a type declaration for a class, structure, interface, or enumeration.</source>
          <target state="translated">クラス、構造体、インターフェイス、または列挙体の型宣言を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> can be used to represent code that declares a class, structure, interface, or enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> クラス、構造体、インターフェイス、または列挙型を宣言するコードを表すために使用できます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> can be used to declare a type that is nested within another type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> 別の型の中で入れ子になっている型を宣言するために使用します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> property specifies the base type or base types of the type being declared.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph>プロパティは、基本データ型または宣言された型の基本型を指定します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> property contains the type members, which can include methods, fields, properties, comments and other types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph>プロパティを含む型のメンバーでは、メソッド、フィールド、プロパティ、コメント、およびその他の種類に含めることができます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property indicates the <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> values for the type declaration, which indicate the type category of the type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph>プロパティを示します、<ph id="ph2">&lt;xref:System.Reflection.TypeAttributes&gt;</ph>型の宣言の型の型のカテゴリを示す値。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;</ph> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;</ph>メソッドを示すかどうか、型はクラス、構造体、列挙型、またはインターフェイス型は、それぞれします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Some programming languages only support the declaration of reference types, or classes.</source>
          <target state="translated">一部のプログラミング言語は、参照型、またはクラスの宣言をサポートするだけです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method to test for the appropriate <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flags.</source>
          <target state="translated">インターフェイス、列挙型、または値の型を宣言するためのサポートの言語固有の CodeDOM コード ジェネレーターを確認するには、呼び出し、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph>を適切なテスト メソッド<ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces&gt;</ph> indicates support for interfaces, <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums&gt;</ph> indicates support for enumerations, and <ph id="ph3">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes&gt;</ph> indicates support for value types such as structures.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces&gt;</ph> インターフェイスのサポートを示す<ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums&gt;</ph>、列挙型のサポートを示すと<ph id="ph3">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes&gt;</ph>構造体などの値の型のサポートを指定します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">クラスまたは構造体の実装、1 つの完全な宣言を構築または実装では、複数の宣言に分散できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property indicates whether the type declaration is complete or partial.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph>プロパティは、型宣言が完全または部分的なかどうかを示します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method with the flag <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</source>
          <target state="translated">すべてのコード ジェネレーターがため呼び出すことによって、このサポートをテストする必要がありますに、部分的な型宣言をサポート、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph>フラグ メソッド<ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>This example demonstrates using a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> to declare a type.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>型を宣言します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
          <source>The name for the new type.</source>
          <target state="translated">新しい型の名前。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class with the specified name.</source>
          <target state="translated">指定した名前を使用して、<ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>Gets the base types of the type.</source>
          <target state="translated">型の基本型を取得します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> object that indicates the base types of the type.</source>
          <target state="translated">型の基本型を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <ph id="ph1">&lt;xref:System.Object&gt;</ph> as the first item in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> collection.</source>
          <target state="translated">基本型から継承しないが、1 つまたは複数のインターフェイスを実装しているが、Visual Basic では、クラスを生成する必要があります<ph id="ph1">&lt;xref:System.Object&gt;</ph>の最初の項目として、<ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph>コレクション。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>In the .NET Framework version 2.0 you do not need the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for <ph id="ph2">&lt;xref:System.Object&gt;</ph> if the interface you are implementing already exists and you are referring to it by type.</source>
          <target state="translated">.NET framework version 2.0 が必要としない、<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>の<ph id="ph2">&lt;xref:System.Object&gt;</ph>かどうか既にを実装するインターフェイスが存在して、型で参照することです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>For example, if you are implementing the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface and add it to the collection with this statement, <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, you do not need the preceding <ph id="ph3">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> statement.</source>
          <target state="translated">たとえば、実装している場合、<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>インターフェイスし、このステートメントを使用してコレクションに追加する<ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>、前述の必要はありません<ph id="ph3">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>The following code illustrates the addition of a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> to the collection that refers to <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">次のコード例の追加、<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>を参照するコレクションに<ph id="ph2">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>The preceding code generates the equivalent of the following Visual Basic code.</source>
          <target state="translated">上記のコードは、該当するショートカットは、次の Visual Basic コードを生成します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>However, the Visual Basic code actually generated is the following.</source>
          <target state="translated">ただし、実際に生成された Visual Basic のコードは次です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsClass">
          <source>Gets or sets a value indicating whether the type is a class or reference type.</source>
          <target state="translated">型がクラスまたは参照型かどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsClass">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a class or reference type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">型がクラスまたは参照型である場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
          <source>Gets or sets a value indicating whether the type is an enumeration.</source>
          <target state="translated">型が列挙体かどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is an enumeration; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">型が列挙体である場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
          <source>Gets or sets a value indicating whether the type is an interface.</source>
          <target state="translated">型がインターフェイスかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is an interface; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">型がインターフェイスである場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Gets or sets a value indicating whether the type declaration is complete or partial.</source>
          <target state="translated">型宣言が完全か部分的かを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class or structure declaration is a partial representation of the implementation; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the declaration is a complete implementation of the class or structure.</source>
          <target state="translated">クラス宣言または構造体宣言が部分的な実装表現である場合は、<ph id="ph1">&lt;see langword="true" /&gt;</ph>。これらの宣言がクラスまたは構造体の完全な実装である場合は、<ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">1 つの完全な宣言でクラスまたは構造体の実装を構築または実装では、複数の宣言に分散できます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Implementations are commonly supplied in one complete type declaration.</source>
          <target state="translated">実装は、通常、1 つの完全な型の宣言で提供されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In this case, set the type declaration <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`false`</ph>, which indicates that the type declaration represents all details for the class or structure implementation.</source>
          <target state="translated">この場合、型宣言を設定<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph>プロパティを<ph id="ph2">`false`</ph>、型宣言がクラスまたは構造体の実装の詳細情報を表すことを示します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</source>
          <target state="translated">部分型の宣言では、アプリケーションの異なるモジュールでクラスまたは構造体の実装の異なる部分を構築するやすくなります。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</source>
          <target state="translated">部分型の宣言は、1 つのソース ファイルに格納されているまたは統合型の実装を形成する一緒にコンパイル最終的には、複数のソース ファイルに分散できます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The C# language supports partial type declarations of classes and structures through the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">C# 言語のクラスの部分型の宣言をサポートしているし、を通じて構造体、<ph id="ph1">`partial`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Visual Basic supports partial type declarations of classes and structures with the <ph id="ph1">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic のクラスの部分型の宣言をサポートしていると構造体、<ph id="ph1">`Partial`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method with the flag <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</source>
          <target state="translated">すべてのコード ジェネレーターがため呼び出すことによって、このサポートをテストする必要がありますに、部分的な型宣言をサポート、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph>フラグ メソッド<ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Partial type declarations are supported for classes and structures.</source>
          <target state="translated">クラスや構造体は、部分型の宣言がサポートされています。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</source>
          <target state="translated">列挙型またはインターフェイスの部分的な型宣言を指定すると、生成されたコードはコンパイラのエラーを生成します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>When supplying a class or structure implementation across multiple declarations, set the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph> for the initial declaration and all supplemental declarations.</source>
          <target state="translated">クラスまたは構造体の実装を提供する、複数の宣言にわたって、設定、<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>最初の宣言とすべての補足的な宣言です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</source>
          <target state="translated">最初の宣言は、型を完全に指定する必要がありますアクセス修飾子を含むシグネチャが継承された型、およびインターフェイスを実装します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The supplementary declarations do not need to re-specify the type signature.</source>
          <target state="translated">補足の宣言は、型シグネチャを再指定する必要はありません。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A compiler error typically results if you redefine the type signature in a supplementary declaration.</source>
          <target state="translated">コンパイラ エラーは、補足宣言で型のシグネチャを再定義する場合に通常発生します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Visual Studio 2005 uses partial types to separate user-generated code from designer code.</source>
          <target state="translated">Visual Studio 2005 では、デザイナーのコードからユーザーが生成されたコードを分離するのに部分的な型を使用します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the <ph id="ph1">`Partial`</ph> keyword; the designer-provided code appears in the partial class that has the <ph id="ph2">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic Windows アプリケーション プロジェクトで、ユーザー コードはで修飾されていない部分クラスに配置、<ph id="ph1">`Partial`</ph>キーワード以外の場合は、デザイナーによって提供されたコードを持つ部分クラスに表示されます、<ph id="ph2">`Partial`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In C#, both the user code and designer code appear in partial classes identified by the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">C# の場合、ユーザー コードとデザイナーのコードの両方に表示で識別される部分クラス、<ph id="ph1">`partial`</ph>キーワード。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>This example demonstrates using a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> to supply a class implementation across multiple declarations.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>を複数の宣言にわたってクラスの実装を指定します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The example builds the initial class declaration statement and sets the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">最初のクラスの宣言ステートメントを作成し、設定、<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A different method in the example extends the class implementation.</source>
          <target state="translated">別の方法の例では、クラスの実装を拡張します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>This method builds a new type declaration statement for the existing class and sets the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">このメソッドが、既存のクラスとセットの新しい型宣言ステートメントを作成、<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The compiler combines the two partial type declarations together for the complete class implementation.</source>
          <target state="translated">コンパイラは、完全なクラスの実装を同時に 2 つの部分型宣言を結合します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
          <source>Gets or sets a value indicating whether the type is a value type (struct).</source>
          <target state="translated">型が値型 (構造体) かどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a value type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">型が値型である場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.Members">
          <source>Gets the collection of class members for the represented type.</source>
          <target state="translated">表される型のクラス メンバーのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.Members">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMemberCollection" /&gt;</ph> object that indicates the class members.</source>
          <target state="translated">クラス メンバーを示す <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMemberCollection" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /&gt;</ph> collection is accessed for the first time.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /&gt;</ph> コレクションが最初にアクセスされたときに発生します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /&gt;</ph> collection is accessed for the first time.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /&gt;</ph> コレクションが最初にアクセスされたときに発生します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Gets or sets the attributes of the type.</source>
          <target state="translated">型の属性を取得または設定します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.TypeAttributes" /&gt;</ph> object that indicates the attributes of the type.</source>
          <target state="translated">型の属性を示す <ph id="ph1">&lt;see cref="T:System.Reflection.TypeAttributes" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> property contains the same type of values used by <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> when investigating a type at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TypeAttributes&gt;</ph>プロパティには、同じによって使用される値の型が含まれています。<ph id="ph2">&lt;xref:System.Reflection&gt;</ph>実行時に、型を調査する場合にします。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Many of these flags do not correspond to the type declaration syntax for some languages.</source>
          <target state="translated">これらのフラグの多くは、一部の言語の型宣言の構文に対応していません。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>As a result, only the following flags are significant to <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> : <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes.Class&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.Interface&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.TypeAttributes.Sealed&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.TypeAttributes.Public&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.TypeAttributes.NotPublic&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.TypeAttributes.NestedPublic&gt;</ph>, and <ph id="ph9">&lt;xref:System.Reflection.TypeAttributes.NestedPrivate&gt;</ph>.</source>
          <target state="translated">その結果、次のフラグのみに有効<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>: <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes.Class&gt;</ph>、 <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.Interface&gt;</ph>、 <ph id="ph4">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>、 <ph id="ph5">&lt;xref:System.Reflection.TypeAttributes.Sealed&gt;</ph>、 <ph id="ph6">&lt;xref:System.Reflection.TypeAttributes.Public&gt;</ph>、 <ph id="ph7">&lt;xref:System.Reflection.TypeAttributes.NotPublic&gt;</ph>、 <ph id="ph8">&lt;xref:System.Reflection.TypeAttributes.NestedPublic&gt;</ph>、および<ph id="ph9">&lt;xref:System.Reflection.TypeAttributes.NestedPrivate&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Some of the flags such as <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph> overlap with the meaning of flags in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property of <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> that is inherited from <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>.</source>
          <target state="translated">一部のようにフラグ<ph id="ph1">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>のフラグの意味と重複している、<ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph>プロパティの<ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>から継承されている<ph id="ph4">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property is a side effect of the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> class inheriting from <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph> so that classes can be nested.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph>プロパティは、副作用として、<ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph>クラスから継承する<ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>クラスが入れ子にすることができるようにします。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The flags in the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property should be used instead of the flags in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property.</source>
          <target state="translated">内のフラグ、<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph>のフラグではなくプロパティを使用する必要があります、<ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The pattern for setting the visibility flags (flags containing the words <ph id="ph1">`Public`</ph> or <ph id="ph2">`Nested`</ph>) is to mask out all visibility flags using the <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.VisibilityMask&gt;</ph> and then set the desired visibility flag.</source>
          <target state="translated">参照範囲フラグを設定するためのパターン (単語を含むフラグ<ph id="ph1">`Public`</ph>または<ph id="ph2">`Nested`</ph>) には、すべての可視性をマスク フラグを使用して、<ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.VisibilityMask&gt;</ph>し、目的の参照範囲フラグを設定します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>For example, the C# code statement to identify the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> (named <ph id="ph2">`cd`</ph>) as an internal class is <ph id="ph3">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</source>
          <target state="translated">たとえば、c# コード ステートメントを識別する、 <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> (という名前<ph id="ph2">`cd`</ph>) は、内部クラスとして<ph id="ph3">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The code to set the same value in Visual Basic is <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</source>
          <target state="translated">Visual Basic では、同じ値を設定するコードは<ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Setting the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property directly to a visibility flag (<ph id="ph2">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) erases all other flags that might be set.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph>プロパティ参照範囲フラグを直接 (<ph id="ph2">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) 設定されているその他のすべてのフラグが消去されます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>Gets the type parameters for the type declaration.</source>
          <target state="translated">型宣言の型パラメーターを取得します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameterCollection" /&gt;</ph> that contains the type parameters for the type declaration.</source>
          <target state="translated">型宣言の型パラメーターを格納する <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameterCollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A generic type declaration contains one or more unspecified types known as type parameters.</source>
          <target state="translated">ジェネリック型宣言を 1 つまたは型パラメーターと呼ばれる型指定されていません。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A type parameter name stands for the type within the body of the generic declaration.</source>
          <target state="translated">型パラメーター名は、ジェネリック宣言の本体の種類を表します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>For example, the generic declaration for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains the type parameter <ph id="ph2">`T`</ph>.</source>
          <target state="translated">ジェネリック宣言など、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスには、型パラメーターが含まれています。<ph id="ph2">`T`</ph>です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>.</source>
          <target state="translated">ジェネリックの詳細については、次を参照してください。 <bpt id="p1">[</bpt>、.NET Framework クラス ライブラリのジェネリック<ept id="p1">](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>