<Type Name="CodeSnippetExpression" FullName="System.CodeDom.CodeSnippetExpression">
  <TypeSignature Language="C#" Value="public class CodeSnippetExpression : System.CodeDom.CodeExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeSnippetExpression extends System.CodeDom.CodeExpression" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeSnippetExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeSnippetExpression&#xA;Inherits CodeExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeSnippetExpression : System::CodeDom::CodeExpression" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4ebf5-101">リテラル式を表します。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-101">Represents a literal expression.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ebf5-102">リテラル式は、リテラルのコード フラグメントとして式のコードを格納します。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-102">A literal expression stores the code of an expression as a literal code fragment.</span></span> <span data-ttu-id="4ebf5-103">CodeDOM は、リテラルのコード フラグメントを変換できません。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-103">The CodeDOM does not translate literal code fragments.</span></span> <span data-ttu-id="4ebf5-104">リテラルのコード フラグメントが格納され、出力と同様です。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-104">Literal code fragments are stored and output just as they are.</span></span> <span data-ttu-id="4ebf5-105">リテラルのコードが含まれている codeDOM オブジェクトは、開発者が既に対象言語でコードをカプセル化できるように提供されます。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-105">CodeDOM objects that contain literal code are provided so developers can encapsulate code that is already in the target language.</span></span>  
  
 <span data-ttu-id="4ebf5-106"><xref:System.CodeDom.CodeSnippetExpression.Value%2A>プロパティには、このスニペットの式のリテラルのコードが含まれています。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-106">The <xref:System.CodeDom.CodeSnippetExpression.Value%2A> property contains the literal code for this snippet expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ebf5-107">次のコード例は、のインスタンスを作成する方法を示します、<xref:System.CodeDom.CodeSnippetExpression>クラス リテラルのコードを使用します。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-107">The following code example demonstrates how to create an instance of the <xref:System.CodeDom.CodeSnippetExpression> class using a literal code fragment.</span></span>  
  
 [!code-cpp[CodeDomSampleBatch#9](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomSampleBatch/CPP/class1.cpp#9)]
 [!code-csharp[CodeDomSampleBatch#9](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomSampleBatch/CS/class1.cs#9)]
 [!code-vb[CodeDomSampleBatch#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomSampleBatch/VB/class1.vb#9)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4ebf5-108"><see cref="T:System.CodeDom.CodeSnippetExpression" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-108">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeSnippetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeSnippetExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeSnippetExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4ebf5-109"><see cref="T:System.CodeDom.CodeSnippetExpression" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-109">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeSnippetExpression (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeSnippetExpression(System::String ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4ebf5-110">表すリテラル式。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-110">The literal expression to represent.</span></span></param>
        <summary><span data-ttu-id="4ebf5-111">リテラル式を指定して、<see cref="T:System.CodeDom.CodeSnippetExpression" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-111">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression" /> class using the specified literal expression.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4ebf5-112">使用に次のコード例を示しています、<xref:System.CodeDom.CodeSnippetExpression.%23ctor%2A>のインスタンスを作成するコンス トラクター、<xref:System.CodeDom.CodeSnippetExpression>クラスです。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-112">The following code example demonstrates in the use of the <xref:System.CodeDom.CodeSnippetExpression.%23ctor%2A> constructor to create an instance of the <xref:System.CodeDom.CodeSnippetExpression> class.</span></span>  
  
 [!code-cpp[CodeDomSampleBatch#9](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomSampleBatch/CPP/class1.cpp#9)]
 [!code-csharp[CodeDomSampleBatch#9](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomSampleBatch/CS/class1.cs#9)]
 [!code-vb[CodeDomSampleBatch#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomSampleBatch/VB/class1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeSnippetExpression.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4ebf5-113">コードのリテラル文字列を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-113">Gets or sets the literal string of code.</span></span></summary>
        <value><span data-ttu-id="4ebf5-114">リテラル文字列。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-114">The literal string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ebf5-115">これには、コードやコメントを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="4ebf5-115">This can contain code or comments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>