<Type Name="CodeTypeReference" FullName="System.CodeDom.CodeTypeReference">
  <TypeSignature Language="C#" Value="public class CodeTypeReference : System.CodeDom.CodeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeReference extends System.CodeDom.CodeObject" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeReference" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeReference&#xA;Inherits CodeObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeReference : System::CodeDom::CodeObject" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3208a-101">型への参照を表します。</span><span class="sxs-lookup"><span data-stu-id="3208a-101">Represents a reference to a type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3208a-102">A <xref:System.CodeDom.CodeTypeReference> CodeDOM オブジェクトの型を表すオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="3208a-102">A <xref:System.CodeDom.CodeTypeReference> object is used to represent a type for CodeDOM objects.</span></span> <span data-ttu-id="3208a-103">CodeDOM 型がある場合は、`Type`プロパティには、型の<xref:System.CodeDom.CodeTypeReference>します。</span><span class="sxs-lookup"><span data-stu-id="3208a-103">When CodeDOM types have a `Type` property, it is of type <xref:System.CodeDom.CodeTypeReference>.</span></span> <span data-ttu-id="3208a-104">たとえば、<xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=nameWithType>プロパティは、<xref:System.CodeDom.CodeTypeReference>を表すフィールドのデータ型。</span><span class="sxs-lookup"><span data-stu-id="3208a-104">For example, the <xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=nameWithType> property is a <xref:System.CodeDom.CodeTypeReference> that represents a field's data type.</span></span>  
  
 <span data-ttu-id="3208a-105">A<xref:System.CodeDom.CodeTypeReference>による初期化を行うことができます、<xref:System.Type>オブジェクトまたは文字列です。</span><span class="sxs-lookup"><span data-stu-id="3208a-105">A <xref:System.CodeDom.CodeTypeReference> can be initialized with a <xref:System.Type> object or a string.</span></span> <span data-ttu-id="3208a-106">使用することは推奨は一般に、<xref:System.Type>いない常に可能性がありますが、これを行うにします。</span><span class="sxs-lookup"><span data-stu-id="3208a-106">It is generally recommended to use a <xref:System.Type> to do this, although it may not always be possible.</span></span> <span data-ttu-id="3208a-107">文字列では、このクラスのインスタンスを初期化する場合は強くお勧めだけ""、コンソールではなく"System.Console"などの完全修飾型を常に使用するすべての言語で名前空間のインポートをサポートするためです。</span><span class="sxs-lookup"><span data-stu-id="3208a-107">If initializing an instance of this class with a string, it is strongly recommended to always use fully qualified types, such as "System.Console" instead of just "Console", because not all languages support importing namespaces.</span></span> <span data-ttu-id="3208a-108">配列型は、型オブジェクトの配列を渡すかをパラメーターとしてのランクを受け入れるコンス トラクターのいずれかを使用して指定できます。</span><span class="sxs-lookup"><span data-stu-id="3208a-108">Array types can be specified by either passing in a type object for an array or using one of the constructors that accept rank as a parameter.</span></span>  
  
 <span data-ttu-id="3208a-109"><xref:System.CodeDom.CodeTypeReference.BaseType%2A>プロパティを参照する型の名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="3208a-109">The <xref:System.CodeDom.CodeTypeReference.BaseType%2A> property specifies the name of the type to reference.</span></span> <span data-ttu-id="3208a-110">配列型への参照、<xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A>プロパティは、配列の要素の種類を示す、<xref:System.CodeDom.CodeTypeReference.ArrayRank%2A>プロパティ配列の次元数を示します。</span><span class="sxs-lookup"><span data-stu-id="3208a-110">For references to array types, the <xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A> property indicates the type of the elements of the array, and the <xref:System.CodeDom.CodeTypeReference.ArrayRank%2A> property indicates the number of dimensions in the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3208a-111">次の例での使用、<xref:System.CodeDom.CodeTypeReference>を型への参照を表します。</span><span class="sxs-lookup"><span data-stu-id="3208a-111">The following example demonstrates use of a <xref:System.CodeDom.CodeTypeReference> to represent a reference to a type.</span></span>  
  
 [!code-cpp[CodeTypeOfExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeOfExample/CPP/codetypeofexample.cpp#2)]
 [!code-csharp[CodeTypeOfExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeOfExample/CS/codetypeofexample.cs#2)]
 [!code-vb[CodeTypeOfExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeOfExample/VB/codetypeofexample.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3208a-112">指定された型を使用して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3208a-112">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3208a-113"><see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3208a-113">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3208a-114">このコンス トラクターは、空を作成<xref:System.CodeDom.CodeTypeReference>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3208a-114">This constructor creates an empty <xref:System.CodeDom.CodeTypeReference> object.</span></span>  <span data-ttu-id="3208a-115">このコンス トラクターを使用する場合は、型参照を確立するためにプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="3208a-115">If you use this constructor, set properties to establish the type reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (System.CodeDom.CodeTypeParameter typeParameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeTypeParameter typeParameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeParameter As CodeTypeParameter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::CodeDom::CodeTypeParameter ^ typeParameter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeParameter" Type="System.CodeDom.CodeTypeParameter" />
      </Parameters>
      <Docs>
        <param name="typeParameter"><span data-ttu-id="3208a-116">型パラメーターの型を表す <see cref="T:System.CodeDom.CodeTypeParameter" />。</span><span class="sxs-lookup"><span data-stu-id="3208a-116">A <see cref="T:System.CodeDom.CodeTypeParameter" /> that represents the type of the type parameter.</span></span></param>
        <summary><span data-ttu-id="3208a-117">コード型パラメーターを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3208a-117">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified code type parameter.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::String ^ typeName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="3208a-118">参照される型の名前。</span><span class="sxs-lookup"><span data-stu-id="3208a-118">The name of the type to reference.</span></span></param>
        <summary><span data-ttu-id="3208a-119">型名を指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3208a-119">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified type name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3208a-120">場合、`typeName`パラメーター、ジェネリック型を参照して、ジェネリック型の構文表記規則に従う必要があります。</span><span class="sxs-lookup"><span data-stu-id="3208a-120">If the `typeName` parameter references a generic type, it must follow the syntax conventions for generic types.</span></span> <span data-ttu-id="3208a-121">リフレクション署名など、<xref:System.Collections.Generic.Dictionary%602>型、場所`K`文字列と`V`は、<xref:System.Collections.Generic.List%601>の整数には、次のリフレクションで表される、アセンブリ情報と共に削除:``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``です。</span><span class="sxs-lookup"><span data-stu-id="3208a-121">For example, the reflection signature for a <xref:System.Collections.Generic.Dictionary%602> type, where `K` is a string and `V` is a <xref:System.Collections.Generic.List%601> of integers, is represented by reflection as the following (with the assembly information removed): ``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3208a-122">ジェネリック パラメーターを区切るために角かっこ () およびされません、c# 角度っこを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3208a-122">You must use square brackets ([]) and not the C# angle brackets (<>) to delimit generic parameters.</span></span>  
  
 <span data-ttu-id="3208a-123">構文を指定する際に間違いを犯す可能性を回避するのには、文字列ではなく、パラメーターとして型を受け取るコンス トラクターの使用を検討します。</span><span class="sxs-lookup"><span data-stu-id="3208a-123">To avoid the possibility of making a mistake in specifying the syntax, consider using the constructor that takes a type as a parameter instead of a string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3208a-124">参照する <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="3208a-124">The <see cref="T:System.Type" /> to reference.</span></span></param>
        <summary><span data-ttu-id="3208a-125">指定された型を使用して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3208a-125">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified type.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3208a-126"><paramref name="type" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="3208a-126"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (System.CodeDom.CodeTypeReference arrayType, int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeTypeReference arrayType, int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (arrayType As CodeTypeReference, rank As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::CodeDom::CodeTypeReference ^ arrayType, int rank);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="arrayType" Type="System.CodeDom.CodeTypeReference" />
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arrayType"><span data-ttu-id="3208a-127">配列の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</span><span class="sxs-lookup"><span data-stu-id="3208a-127">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type of the array.</span></span></param>
        <param name="rank"><span data-ttu-id="3208a-128">配列の次元数。</span><span class="sxs-lookup"><span data-stu-id="3208a-128">The number of dimensions in the array.</span></span></param>
        <summary><span data-ttu-id="3208a-129">配列の型とランクを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3208a-129">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified array type and rank.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3208a-130">このコンス トラクターは、入れ子で配列の配列を構築するために使用できる<xref:System.CodeDom.CodeTypeReference>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3208a-130">This constructor can be used to construct arrays of arrays by nesting <xref:System.CodeDom.CodeTypeReference> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (string typeName, params System.CodeDom.CodeTypeReference[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, class System.CodeDom.CodeTypeReference[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, ParamArray typeArguments As CodeTypeReference())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::String ^ typeName, ... cli::array &lt;System::CodeDom::CodeTypeReference ^&gt; ^ typeArguments);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.CodeDom.CodeTypeReference[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="3208a-131">参照される型の名前。</span><span class="sxs-lookup"><span data-stu-id="3208a-131">The name of the type to reference.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="3208a-132"><see cref="T:System.CodeDom.CodeTypeReference" /> 値の配列。</span><span class="sxs-lookup"><span data-stu-id="3208a-132">An array of <see cref="T:System.CodeDom.CodeTypeReference" /> values.</span></span></param>
        <summary><span data-ttu-id="3208a-133">型名と型引数を指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3208a-133">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified type name and type arguments.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (string typeName, System.CodeDom.CodeTypeReferenceOptions codeTypeReferenceOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, valuetype System.CodeDom.CodeTypeReferenceOptions codeTypeReferenceOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, codeTypeReferenceOption As CodeTypeReferenceOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::String ^ typeName, System::CodeDom::CodeTypeReferenceOptions codeTypeReferenceOption);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="codeTypeReferenceOption" Type="System.CodeDom.CodeTypeReferenceOptions" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="3208a-134">参照される型の名前。</span><span class="sxs-lookup"><span data-stu-id="3208a-134">The name of the type to reference.</span></span></param>
        <param name="codeTypeReferenceOption"><span data-ttu-id="3208a-135"><see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> のいずれかの値である、コード型参照オプション。</span><span class="sxs-lookup"><span data-stu-id="3208a-135">The code type reference option, one of the <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> values.</span></span></param>
        <summary><span data-ttu-id="3208a-136">型名とコード型参照オプションを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3208a-136">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified type name and code type reference option.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (string baseType, int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string baseType, int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseType As String, rank As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(System::String ^ baseType, int rank);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseType" Type="System.String" />
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="baseType"><span data-ttu-id="3208a-137">配列の要素の型の名前。</span><span class="sxs-lookup"><span data-stu-id="3208a-137">The name of the type of the elements of the array.</span></span></param>
        <param name="rank"><span data-ttu-id="3208a-138">配列の次元の数。</span><span class="sxs-lookup"><span data-stu-id="3208a-138">The number of dimensions of the array.</span></span></param>
        <summary><span data-ttu-id="3208a-139">配列の型名とランクを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3208a-139">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified array type name and rank.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeReference (Type type, System.CodeDom.CodeTypeReferenceOptions codeTypeReferenceOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, valuetype System.CodeDom.CodeTypeReferenceOptions codeTypeReferenceOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeReference(Type ^ type, System::CodeDom::CodeTypeReferenceOptions codeTypeReferenceOption);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="codeTypeReferenceOption" Type="System.CodeDom.CodeTypeReferenceOptions" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3208a-140">参照する <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="3208a-140">The <see cref="T:System.Type" /> to reference.</span></span></param>
        <param name="codeTypeReferenceOption"><span data-ttu-id="3208a-141"><see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> のいずれかの値である、コード型参照オプション。</span><span class="sxs-lookup"><span data-stu-id="3208a-141">The code type reference option, one of the <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> values.</span></span></param>
        <summary><span data-ttu-id="3208a-142">型とコード型参照を指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3208a-142">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeReference" /> class using the specified type and code type reference.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayElementType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference ArrayElementType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReference ArrayElementType" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeReference.ArrayElementType" />
      <MemberSignature Language="VB.NET" Value="Public Property ArrayElementType As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReference ^ ArrayElementType { System::CodeDom::CodeTypeReference ^ get(); void set(System::CodeDom::CodeTypeReference ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3208a-143">配列内の要素の型を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3208a-143">Gets or sets the type of the elements in the array.</span></span></summary>
        <value><span data-ttu-id="3208a-144">配列の要素の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</span><span class="sxs-lookup"><span data-stu-id="3208a-144">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type of the array elements.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3208a-145">しない限り、これは無視されます、<xref:System.CodeDom.CodeTypeReference.ArrayRank%2A>プロパティは 1 以上です。</span><span class="sxs-lookup"><span data-stu-id="3208a-145">This is disregarded unless the <xref:System.CodeDom.CodeTypeReference.ArrayRank%2A> property is greater than or equal to 1.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayRank">
      <MemberSignature Language="C#" Value="public int ArrayRank { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArrayRank" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeReference.ArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Property ArrayRank As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArrayRank { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3208a-146">配列の配列ランクを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3208a-146">Gets or sets the array rank of the array.</span></span></summary>
        <value><span data-ttu-id="3208a-147">配列の次元の数。</span><span class="sxs-lookup"><span data-stu-id="3208a-147">The number of dimensions of the array.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public string BaseType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseType" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeReference.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3208a-148">参照される型の名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3208a-148">Gets or sets the name of the type being referenced.</span></span></summary>
        <value><span data-ttu-id="3208a-149">参照先の型の名前。</span><span class="sxs-lookup"><span data-stu-id="3208a-149">The name of the type being referenced.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3208a-150">配列型である場合を除き、このプロパティが型の名前を含む、配列要素の型である場合。</span><span class="sxs-lookup"><span data-stu-id="3208a-150">This property contains the name of the type unless it is an array type, in which case it is the array element type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3208a-151">プロパティの名前は、誤解を招く可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3208a-151">The name of the property may be misleading.</span></span> <span data-ttu-id="3208a-152">このプロパティには、すべて配列修飾型名だけが含まれています。 またはジェネリック型引数、基本または親の型ではなくと削除予想される場合があります。</span><span class="sxs-lookup"><span data-stu-id="3208a-152">This property contains just the type name with any array adornments or generic type arguments removed, not the base or parent type as might be expected.</span></span> <span data-ttu-id="3208a-153">たとえば、<xref:System.CodeDom.CodeTypeReference.BaseType%2A>値``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``は``System.Collections.Generic.Dictionary`2``します。</span><span class="sxs-lookup"><span data-stu-id="3208a-153">For example, the <xref:System.CodeDom.CodeTypeReference.BaseType%2A> value for ``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]`` is ``System.Collections.Generic.Dictionary`2``.</span></span>  
  
## <a name="representation-of-generic-types"></a><span data-ttu-id="3208a-154">ジェネリック型の表現</span><span class="sxs-lookup"><span data-stu-id="3208a-154">Representation of Generic Types</span></span>  
 <span data-ttu-id="3208a-155">このセクションの情報は、CodeDom プロバイダーの開発者用し、CLS 準拠の言語にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="3208a-155">The information in this section is intended for CodeDom provider developers and only applies to CLS-compliant languages.</span></span> <span data-ttu-id="3208a-156">戻り値は、ジェネリック型を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="3208a-156">The return value can contain generic types.</span></span> <span data-ttu-id="3208a-157">アクサン グラーブ続く型の名前を持つジェネリック型の書式 ("'") のジェネリック型引数の数の順です。</span><span class="sxs-lookup"><span data-stu-id="3208a-157">Generic types are formatted with the name of the type followed by a grave accent ("\`") followed by a count of the generic type arguments.</span></span> <span data-ttu-id="3208a-158">ジェネリック型引数は含まれて、<xref:System.CodeDom.CodeTypeReferenceCollection>によって返される、<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="3208a-158">The generic type arguments can be found in the <xref:System.CodeDom.CodeTypeReferenceCollection> returned by the <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> property.</span></span> <span data-ttu-id="3208a-159">によって返される値<xref:System.CodeDom.CodeTypeReference.BaseType%2A>および関連付けられた<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>リフレクションによって返される型の値と同じコンテンツが含まれています。</span><span class="sxs-lookup"><span data-stu-id="3208a-159">The values returned by <xref:System.CodeDom.CodeTypeReference.BaseType%2A> and the associated <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> contain the same content as the value of the type returned by reflection.</span></span>  
  
 <span data-ttu-id="3208a-160">たとえば、構築された<xref:System.Collections.Generic.Dictionary%602>場所`K`文字列と`V`が構築された<xref:System.Collections.Generic.List%601>には、次のリフレクションによって表される整数のアセンブリ情報と共に削除します。</span><span class="sxs-lookup"><span data-stu-id="3208a-160">For example, a constructed <xref:System.Collections.Generic.Dictionary%602> where `K` is a string and `V` is a constructed <xref:System.Collections.Generic.List%601> of integers is represented by reflection as the following (with the assembly information removed):</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]  
```  
  
 <span data-ttu-id="3208a-161">再帰的に解析、<xref:System.CodeDom.CodeTypeReference.BaseType%2A>プロパティから、<xref:System.CodeDom.CodeTypeReference>の<xref:System.Collections.Generic.Dictionary%602>リフレクション形式を上記と同じ文字列が生成されます。</span><span class="sxs-lookup"><span data-stu-id="3208a-161">Recursively parsing the <xref:System.CodeDom.CodeTypeReference.BaseType%2A> property from the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Collections.Generic.Dictionary%602> yields the same strings as the reflection representation above:</span></span>  
  
-   <span data-ttu-id="3208a-162"><xref:System.CodeDom.CodeTypeReference.BaseType%2A>親プロパティ<xref:System.CodeDom.CodeTypeReference>次を返します。</span><span class="sxs-lookup"><span data-stu-id="3208a-162">The <xref:System.CodeDom.CodeTypeReference.BaseType%2A> property for the parent <xref:System.CodeDom.CodeTypeReference> returns the following:</span></span>  
  
    ```  
    System.Collections.Generic.Dictionary`2  
    ```  
  
-   <span data-ttu-id="3208a-163"><xref:System.CodeDom.CodeTypeReference.BaseType%2A>最初のプロパティを<xref:System.CodeDom.CodeTypeReference>内のオブジェクト、<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>コレクションは、次を返します。</span><span class="sxs-lookup"><span data-stu-id="3208a-163">The <xref:System.CodeDom.CodeTypeReference.BaseType%2A> property for the first <xref:System.CodeDom.CodeTypeReference> object in the <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> collection returns the following:</span></span>  
  
    ```  
    System.String  
    ```  
  
-   <span data-ttu-id="3208a-164"><xref:System.CodeDom.CodeTypeReference.BaseType%2A> 、2 番目のプロパティ<xref:System.CodeDom.CodeTypeReference>内のオブジェクト、<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>コレクションは、次を返します。</span><span class="sxs-lookup"><span data-stu-id="3208a-164">The <xref:System.CodeDom.CodeTypeReference.BaseType%2A> property for the second <xref:System.CodeDom.CodeTypeReference> object in the <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> collection returns the following:</span></span>  
  
    ```  
    System.Collections.Generic.List`1  
    ```  
  
-   <span data-ttu-id="3208a-165"><xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>プロパティに、<xref:System.CodeDom.CodeTypeReference>オブジェクトに対する``System.Collections.Generic.List`1``次を返します。</span><span class="sxs-lookup"><span data-stu-id="3208a-165">The <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> property in the <xref:System.CodeDom.CodeTypeReference> object for ``System.Collections.Generic.List`1`` returns the following:</span></span>  
  
    ```  
    System.Int32  
    ```  
  
 <span data-ttu-id="3208a-166">関連付けられた解析の際に、型引数の数を使用する必要があります<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>値。</span><span class="sxs-lookup"><span data-stu-id="3208a-166">The type argument count should be used when parsing the associated <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> values.</span></span> <span data-ttu-id="3208a-167">一般的な方法は、生成されたコードから型引数の数を削除するが、処理は、特定のコンパイラです。</span><span class="sxs-lookup"><span data-stu-id="3208a-167">The common practice is to remove the type argument count from the generated code, but the practice is compiler specific.</span></span>  <span data-ttu-id="3208a-168">入れ子にされた型名に含まれる型引数の数が見つかりませんで、その場合で、プラス記号 (「+」) が続くことは重要です。</span><span class="sxs-lookup"><span data-stu-id="3208a-168">It is important to note that the type argument count can be found within a nested type name, in which case it is followed by a plus sign ("+").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3208a-169">ジェネリック型を作成するときに<xref:System.CodeDom.CodeTypeReference>、として型引数を指定する方法を推奨は、<xref:System.CodeDom.CodeTypeReference>または、オブジェクトを受け取るコンス トラクターを使用して、<xref:System.Type>です。</span><span class="sxs-lookup"><span data-stu-id="3208a-169">When creating a generic <xref:System.CodeDom.CodeTypeReference>, the recommended practice is to specify the type arguments as <xref:System.CodeDom.CodeTypeReference> objects or use the constructor that takes a <xref:System.Type>.</span></span> <span data-ttu-id="3208a-170">作成するコンス トラクターの使用、<xref:System.CodeDom.CodeTypeReference>文字列から型引数が未検出エラーにつながることができます。</span><span class="sxs-lookup"><span data-stu-id="3208a-170">Use of the constructor that creates a <xref:System.CodeDom.CodeTypeReference> from a string can lead to undiscoverable type-argument errors.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.CodeTypeReferenceOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeReference.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As CodeTypeReferenceOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceOptions Options { System::CodeDom::CodeTypeReferenceOptions get(); void set(System::CodeDom::CodeTypeReferenceOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3208a-171">コード型参照オプションを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3208a-171">Gets or sets the code type reference option.</span></span></summary>
        <value><span data-ttu-id="3208a-172"><see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="3208a-172">A bitwise combination of the <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> values.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArguments">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection TypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection TypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeReference.TypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeArguments As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ TypeArguments { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3208a-173">現在のジェネリック型参照の型引数を取得します。</span><span class="sxs-lookup"><span data-stu-id="3208a-173">Gets the type arguments for the current generic type reference.</span></span></summary>
        <value><span data-ttu-id="3208a-174">現在の <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> オブジェクトの型引数を含む <see cref="T:System.CodeDom.CodeTypeReference" />。</span><span class="sxs-lookup"><span data-stu-id="3208a-174">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> containing the type arguments for the current <see cref="T:System.CodeDom.CodeTypeReference" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3208a-175"><xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>プロパティは、型パラメーターへの参照が現在のジェネリック型に置き換えられる型の参照のコレクション。</span><span class="sxs-lookup"><span data-stu-id="3208a-175">The <xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> property is a collection of type references to be substituted for the type parameter references of the current generic type.</span></span> <span data-ttu-id="3208a-176">コレクションには、すべての入れ子にされた型のすべての型引数が含まれています。</span><span class="sxs-lookup"><span data-stu-id="3208a-176">The collection contains all the type arguments for all nested types.</span></span> <span data-ttu-id="3208a-177">例については、次を参照してください。、<xref:System.CodeDom.CodeTypeReference.BaseType%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="3208a-177">For an example, see the <xref:System.CodeDom.CodeTypeReference.BaseType%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>