<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ed62e8499764dd5b075b00bc015a4b6e1563ef14" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52193514" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>インターネット ドメイン名の非 ASCII 文字の使用をサポートします。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インターネット ドメイン名は、ドメイン名ラベルのラベルの区切り記号で区切られたと呼ばれる、1 つまたは複数の部分で構成されます。 たとえば、ドメイン名"www.proseware.com"は、ラベル、"www"、"proseware"および"com"、ピリオドで区切られたで構成されます。 標準のドメイン名は、US ASCII (または基本ラテン文字) の文字範囲の u+0021 U + 007E にから指定された文字で構成されます。 US-ASCII 文字セットの国際化ドメイン名のアプリケーション (IDNA) を使用してカルチャでのインターネットの使用を容易にするには、標準は、2003 では、US-ASCII 文字範囲外の Unicode 文字を含めることをサポートするために採用しました。 ただし、名前のサーバーとドメイン名の解決は、依存して、US-ASCII 文字範囲の文字に進みます。  
  
 IDNA メカニズムでは、Punycode を使用して、ドメイン ネーム システムでサポートされる、US-ASCII 文字範囲を US-ASCII 文字範囲外の Unicode 文字が含まれている国際化ドメイン名にマップします。 IDNA メカニズムは、ドメイン名、インターネット経由で転送されるデータは変換に使用されます。  
  
> [!IMPORTANT]
>  [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Globalization.IdnMapping>クラスは、さまざまなバージョンの使用中のオペレーティング システムに応じて、IDNA 標準をサポートしています。  
>   
>  -   実行されると[!INCLUDE[win8](~/includes/win8-md.md)]で概説されている、IDNA 標準の 2008年バージョンがサポートしている[RFC 5891: 国際化ドメイン名のアプリケーション (IDNA): プロトコル](https://go.microsoft.com/fwlink/?LinkId=231875)します。  
> -   以前のバージョンの Windows オペレーティング システムで実行するとと、で概説されている標準の 2003年バージョンがサポートされます[RFC 3490: 国際化ドメイン名のアプリケーション (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)します。  
>   
>  参照してください[Unicode Technical Standard #46: IDNA 互換性処理](https://go.microsoft.com/fwlink/?LinkId=232459)これらの標準の文字のセットを特定の処理方法に違いをします。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType>メソッドは、ドメイン名の正規化、US ASCII コード ポイント範囲 (U + 0020 に 007E)、表示可能な Unicode 文字で構成され、ASCII 互換エンコーディング (ACE) のプレフィックスを付加する形式に正規化された名前を変換します ("xn-") 各ラベルにします。 <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType>メソッドはドメイン名ラベルを変換して、復元、<xref:System.Globalization.IdnMapping.GetAscii%2A>メソッド。  
  
 変換される文字列には、ラベルの区切り記号が含まれている場合は、表意文字の完全停止を文字 (U + 3002)、全角完全停止 (U + FF0E) と半角表意文字完全停止 (U + FF61)、<xref:System.Globalization.IdnMapping.GetAscii%2A>完全停止 (期間、U + ラベルの区切り記号に変換メソッド002E)。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>メソッドは、元のラベルの区切り文字を復元しません。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>国際化ドメイン名と Punycode の配列に変換します。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>メソッドは、元のドメイン名に、Punycode ドメイン名に変換しますが、元のラベルの区切り記号を標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>すべてのパブリック メソッド<see cref="T:System.Globalization.IdnMapping" />スレッド セーフし、同じくらい、複数のスレッドから同時に使用される可能性があります、<see cref="T:System.Globalization.IdnMapping" />インスタンスのプロパティが設定されていないも同時にします。</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Globalization.IdnMapping" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType>と<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType>にプロパティが初期化されます`false`します。 文字の ASCII 文字 A ~ Z、0 ~ 9、ハイフン (-) 以外の小さなサブセット (U+002D)、ドメイン名でピリオド (.) 文字は許可されていて未割り当ての Unicode コード ポイントはありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>未割り当ての Unicode コード ポイントが現在の <see cref="T:System.Globalization.IdnMapping" /> オブジェクトのメンバーによって実行される操作内で使用されるかどうかを示す値を取得または設定します。</summary>
        <value>未割り当てのコード ポイントが操作内で使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 登録済みドメイン名には、未割り当てのコード ポイントを含めることはできません。 既定値では、その結果、<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>プロパティは`false`します。 IDNA 仕様により、文字列を照合するクエリでのみ割り当てられていないコード ポイント (つまり、ドメイン名の検索で)。 ドメイン名に割り当てられていないコード ポイントの使用に関する詳細については、次を参照してください[RFC 3454、"文字列 (stringprep) の国際化の準備"](https://go.microsoft.com/fwlink/?LinkId=231873)と[RFC 5891、"アプリケーション (国際化ドメイン名。IDNA): プロトコル"](https://go.microsoft.com/fwlink/?LinkId=231875)します。  
  
> [!IMPORTANT]
>  場合、<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>プロパティは`false`プロパティに関連付けられている動作は、基になるオペレーティング システムによって異なります。 [!INCLUDE[win8](~/includes/win8-md.md)]、<xref:System.Globalization.IdnMapping>クラスは、Unicode 6.0 標準に基づく IDNA 2008 に準拠しています。 、Windows の以前のバージョンで、<xref:System.Globalization.IdnMapping>クラスは Unicode 3 に基づいています IDNA 2003 に基づいています。*x*します。 IDNA 2003 で割り当てられていた一部のコード ポイントは、文字が割り当てられているおよび IDNA 2008 でサポートされます。 たとえば、U + 0221 は、Unicode 4.0 で導入されました。  [!INCLUDE[win8](~/includes/win8-md.md)]、としてエンコードされる"xn — 6la"。 以前のバージョンの Windows では、スロー、<xref:System.ArgumentException>例外。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のオブジェクトと比較する対象のオブジェクト。</param>
        <summary>指定したオブジェクトが現在の <see cref="T:System.Globalization.IdnMapping" /> オブジェクトと等しいかどうかを示します。</summary>
        <returns>
          <paramref name="obj" /> パラメーターにより指定されたオブジェクトが <see cref="T:System.Globalization.IdnMapping" /> から派生していて、その <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> と <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティが等しく、オブジェクトが指定されている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>US-ASCII 文字の範囲外の Unicode 文字を含むドメイン名ラベルの文字列を、US-ASCII 文字範囲 (U+0020 から U+007E) の表示可能な Unicode 文字から構成される文字列にエンコードします。 文字列は IDNA 標準に従って書式設定されます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">ラベル区切り記号で区切られた 1 つまたは複数のドメイン名ラベルから構成される、変換対象の入力文字列。</param>
        <summary>Unicode 文字から構成されるドメイン名ラベルの文字列を、US-ASCII 文字範囲の表示可能な Unicode 文字から構成される文字列にエンコードします。 文字列は IDNA 標準に従って書式設定されます。</summary>
        <returns>
          <paramref name="unicode" /> パラメーターによって指定された文字列に対応する、US-ASCII 文字範囲 (U+0020 から U+007E) の表示可能な Unicode 文字から構成され、IDNA 標準に従って書式化された文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode`パラメーターが有効な Unicode 文字で構成される 1 つまたは複数のラベルの文字列を指定します。 ラベルは、ラベルの区切り記号で区切られます。 `unicode`パラメーターは、ラベルの区切り記号で始めることはできませんが、含めるし、必要に応じて、区切り記号で終了します。 ラベル区切り記号は完全に停止 (期間、002E)、表意文字の完全な停止 (U + 3002)、全角完全停止 (U + FF0E) と半角表意文字完全停止 (U + FF61)。 たとえば、ドメイン名"www.adatum.com"は、ラベル、"www"、"adatum"および"com"、ピリオドで区切られたで構成されます。  
  
 ラベルは、次の文字を含めることはできません。  
  
-   U + U + 001 f、および U + 007F 0001 から Unicode 制御文字。  
  
-   Unicode 文字を割り当てられていない場合の値、<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>プロパティは`false`します。  
  
-   US-ASCII 非標準の文字は文字、スペースなどの範囲 (u+0020)、感嘆符のマーク (u+0021)、行 (U + 005F) の文字が低い場合との値、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>プロパティは`true`します。  
  
-   IDNA 標準の特定のバージョンによって禁止されている文字。 禁止された文字の詳細については、次を参照してください[RFC 3454: 準備の国際化の文字列 ("stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003、および[RFC 5982: The の Unicode コード ポイントとの国際化ドメイン名。アプリケーション](https://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>メソッドは、すべてのラベルの区切り記号を完全に停止 (期間、002E) に変換します。  
  
 場合`unicode`US-ASCII 以外の文字が含まれていない文字の範囲や、US-ASCII 文字範囲内で文字が禁止されている場合、メソッドを返します`unicode`変更されません。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>メソッドの配列に変換する国際ドメイン名を Punycode ではエンコードされた同等の US-ASCII 文字範囲の文字で構成されています。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>メソッドは、Punycode ドメイン名を元のドメイン名に変換しますが、元のラベルの区切り記号を標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<see cref="T:System.Globalization.IdnMapping" />クラスは、さまざまなバージョンの使用中のオペレーティング システムに応じて、IDNA 標準をサポートしています。 
、実行されると[!INCLUDE[win8](~/includes/win8-md.md)]で概説されている、IDNA 標準の 2008年バージョンがサポートしている[RFC 5891: 国際化ドメイン名のアプリケーション (IDNA): プロトコル](https://go.microsoft.com/fwlink/?LinkId=231875)します。  
  
-2003 バージョンで概説されている標準のサポートを以前のバージョンの Windows オペレーティング システムで実行する場合[RFC 3490: 国際化ドメイン名のアプリケーション (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)します。  
  
参照してください[Unicode Technical Standard #46: IDNA 互換性処理](https://go.microsoft.com/fwlink/?LinkId=232459)これらの標準の文字のセットを特定の処理方法に違いをします。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">ラベル区切り記号で区切られた 1 つまたは複数のドメイン名ラベルから構成される、変換対象の入力文字列。</param>
        <param name="index">変換する部分文字列の始まりを指定する <paramref name="unicode" /> への 0 から始まるオフセット。 変換演算は、<paramref name="unicode" /> 文字列の終わりまで続行されます。</param>
        <summary>US-ASCII 文字範囲外の Unicode 文字を含むドメイン名ラベルの部分文字列をエンコードします。 部分文字列は US-ASCII 文字範囲の表示可能な Unicode 文字の文字列に変換され、IDNA 基準に従って書式化されます。</summary>
        <returns>
          <paramref name="unicode" /> パラメーターと <paramref name="index" /> パラメーターによって指定された部分文字列に対応する、US-ASCII 文字範囲 (U+0020 から U+007E) の表示可能な Unicode 文字から構成され、IDNA 標準に従って書式化された部分文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode`と`index`パラメーターが有効な Unicode 文字で構成される 1 つまたは複数のラベルの部分文字列を定義します。 ラベルは、ラベルの区切り記号で区切られます。 部分文字列の最初の文字がラベルの区切り記号で始めることはできませんが、含めるし、必要に応じて末尾の区切り記号。 ラベル区切り記号は完全に停止 (期間、002E)、表意文字の完全な停止 (U + 3002)、全角完全停止 (U + FF0E) と半角表意文字完全停止 (U + FF61)。 たとえば、ドメイン名"www.adatum.com"は、ラベル、"www"、"adatum"および"com"、ピリオドで区切られたで構成されます。  
  
 ラベルは、次の文字を含めることはできません。  
  
-   U + U + 001 f、および U + 007F 0001 から Unicode 制御文字。  
  
-   未割り当ての Unicode 文字の値に応じて、<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>プロパティ。  
  
-   US-ASCII 非標準の文字は文字、スペースなどの範囲 (u+0020)、感嘆符のマーク (u+0021)、および低行 (U + 005F) 文字の値に応じて、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>プロパティ。  
  
-   IDNA 標準の特定のバージョンによって禁止されている文字。 禁止された文字の詳細については、次を参照してください[RFC 3454: 準備の国際化の文字列 ("stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003、および[RFC 5982: The の Unicode コード ポイントとの国際化ドメイン名。アプリケーション](https://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>メソッドは、すべてのラベルの区切り記号を完全に停止 (期間、002E) に変換します。  
  
 場合`unicode`US-ASCII 以外の文字が含まれていない文字の範囲や、US-ASCII 文字範囲内で文字が禁止されている場合、メソッドを返します`unicode`変更されません。  
  
   
  
## Examples  
 次の例では、ローカル部分を削除して、@ 文字は、電子メール アドレス、およびパスから結果として得られるドメインの名前を<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29>us-ascii 文字で構成されているエンコード済みの相当する、Punycode ドメイン名を作成する方法文字範囲です。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>メソッドは、Punycode ドメイン名を元のドメイン名に変換しますが、元のラベルの区切り記号を標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <paramref name="unicode" /> の長さを超えています。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<see cref="T:System.Globalization.IdnMapping" />クラスは、さまざまなバージョンの使用中のオペレーティング システムに応じて、IDNA 標準をサポートしています。 
、実行されると[!INCLUDE[win8](~/includes/win8-md.md)]で概説されている、IDNA 標準の 2008年バージョンがサポートしている[RFC 5891: 国際化ドメイン名のアプリケーション (IDNA): プロトコル](https://go.microsoft.com/fwlink/?LinkId=231875)します。  
  
-2003 バージョンで概説されている標準のサポートを以前のバージョンの Windows オペレーティング システムで実行する場合[RFC 3490: 国際化ドメイン名のアプリケーション (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)します。  
  
参照してください[Unicode Technical Standard #46: IDNA 互換性処理](https://go.microsoft.com/fwlink/?LinkId=232459)これらの標準の文字のセットを特定の処理方法に違いをします。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">ラベル区切り記号で区切られた 1 つまたは複数のドメイン名ラベルから構成される、変換対象の入力文字列。</param>
        <param name="index">部分文字列の始まりを指定する <paramref name="unicode" /> への 0 から始まるオフセット。</param>
        <param name="count">
          <paramref name="index" /> 文字列の <paramref name="unicode" /> で指定された位置から始まる部分文字列内の変換対象の文字の数。</param>
        <summary>US-ASCII 文字範囲外の Unicode 文字を含むドメイン名ラベルの部分文字列の指定した文字数をエンコードします。 部分文字列は US-ASCII 文字範囲の表示可能な Unicode 文字の文字列に変換され、IDNA 基準に従って書式化されます。</summary>
        <returns>
          <paramref name="unicode" /> パラメーター、<paramref name="index" /> パラメーター、<paramref name="count" /> パラメーターによって指定された部分文字列に対応する、US-ASCII 文字範囲 (U+0020 から U+007E) の表示可能な Unicode 文字から構成され、IDNA 標準に従って書式化された部分文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Unicode`、 `index`、および`count`パラメーターが有効な Unicode 文字で構成される 1 つまたは複数のラベルの部分文字列を定義します。 ラベルは、ラベルの区切り記号で区切られます。 部分文字列の最初の文字がラベルの区切り記号で始めることはできませんが、含めるし、必要に応じて末尾の区切り記号。 ラベル区切り記号は完全に停止 (期間、002E)、表意文字の完全な停止 (U + 3002)、全角完全停止 (U + FF0E) と半角表意文字完全停止 (U + FF61)。 たとえば、ドメイン名"www.adatum.com"は、ラベル、"www"、"adatum"および"com"、ピリオドで区切られたで構成されます。  
  
 ラベルは、次の文字を含めることはできません。  
  
-   U + U + 001 f、および U + 007F 0001 から Unicode 制御文字。  
  
-   未割り当ての Unicode 文字の値に応じて、<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>プロパティ。  
  
-   US-ASCII 非標準の文字は文字、スペースなどの範囲 (u+0020)、感嘆符のマーク (u+0021)、および低行 (U + 005F) 文字の値に応じて、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>プロパティ。  
  
-   IDNA 標準の特定のバージョンによって禁止されている文字。 禁止された文字の詳細については、次を参照してください[RFC 3454: 準備の国際化の文字列 ("stringprep")](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003、および[RFC 5982: The の Unicode コード ポイントとの国際化ドメイン名。アプリケーション](https://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>メソッドは、すべてのラベルの区切り記号を完全に停止 (期間、002E) に変換します。 部分文字列に、US-ASCII 文字範囲外の文字が含まれていないと、US-ASCII 文字範囲の文字は使用できません、メソッドはそのままの部分文字列を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>国際化ドメイン名を IDNA 標準に準拠しているドメイン名に変換します。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>メソッドは、元のドメイン名に標準化されたドメイン名に変換しますが、元のラベルの区切り記号を標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <paramref name="unicode" /> の長さを超えています。  
  
- または - 
 <paramref name="index" /> が、<paramref name="unicode" /> から <paramref name="count" /> を引いた長さを超えています。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<see cref="T:System.Globalization.IdnMapping" />クラスは、さまざまなバージョンの使用中のオペレーティング システムに応じて、IDNA 標準をサポートしています。 
、実行されると[!INCLUDE[win8](~/includes/win8-md.md)]で概説されている、IDNA 標準の 2008年バージョンがサポートしている[RFC 5891: 国際化ドメイン名のアプリケーション (IDNA): プロトコル](https://go.microsoft.com/fwlink/?LinkId=231875)します。  
  
-2003 バージョンで概説されている標準のサポートを以前のバージョンの Windows オペレーティング システムで実行する場合[RFC 3490: 国際化ドメイン名のアプリケーション (IDNA)](https://go.microsoft.com/fwlink/?LinkId=158110)します。  
  
参照してください[Unicode Technical Standard #46: IDNA 互換性処理](https://go.microsoft.com/fwlink/?LinkId=232459)これらの標準の文字のセットを特定の処理方法に違いをします。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Globalization.IdnMapping" /> オブジェクトのハッシュ コードを返します。</summary>
        <returns>
          <see cref="T:System.Globalization.IdnMapping" /> オブジェクトのプロパティから派生した 4 つの 32 ビット符号付き定数の 1 つ。  戻り値は特別な意味を持たず、ハッシュ コード アルゴリズムでの使用に適しません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上書き、<xref:System.Globalization.IdnMapping.GetHashCode%2A>メソッドの場合は、アプリケーションは、意味のあるハッシュ コード アルゴリズムを実装する必要があります。  
  
   
  
## Examples  
 次の例では、1 つの文字列がスペースで区切られた複数の電子メール アドレスを含めることができますを前提としています。 ローカル部分を削除、@ 文字が各電子メール アドレス、およびパスから結果として得られるドメインの名前を<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29>または<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29>Punycode ドメイン名を作成するメソッド。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>メソッドは、元のドメイン名に、Punycode ドメイン名を変換します。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>IDNA 標準に従ってエンコードされた 1 つ以上のドメイン名ラベルを Unicode 文字の文字列にデコードします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">デコード対象となる文字列は、IDNA 標準に従ってエンコードされた US-ASCII 文字範囲 (U+0020 から U+007E) の 1 つまたは複数のラベルから構成されます。</param>
        <summary>IDNA 標準に従ってエンコードされた 1 つ以上のドメイン名ラベルの文字列を Unicode 文字の文字列にデコードします。</summary>
        <returns>
          <paramref name="ascii" /> パラメーターで指定された IDNA 部分文字列に対応する Unicode 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドメイン名、ラベル、およびラベルの区切り記号の詳細については、「解説」を参照してください、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>メソッド。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%29>国際化ドメイン名と Punycode の配列に変換します。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>メソッドは、Punycode ドメイン名を元のドメイン名に変換しますが、元のラベルの区切り記号を標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">デコード対象となる文字列は、IDNA 標準に従ってエンコードされた US-ASCII 文字範囲 (U+0020 から U+007E) の 1 つまたは複数のラベルから構成されます。</param>
        <param name="index">デコードする部分文字列の始まりを指定する <paramref name="ascii" /> への 0 から始まるオフセット。 デコード演算は、<paramref name="ascii" /> 文字列の終わりまで続行されます。</param>
        <summary>IDNA 標準に従ってエンコードされた 1 つ以上のドメイン名ラベルの部分文字列を Unicode 文字の文字列にデコードします。</summary>
        <returns>
          <paramref name="ascii" /> パラメーターおよび <paramref name="index" /> パラメーターで指定された IDNA 部分文字列に対応する Unicode 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドメイン名、ラベル、およびラベルの区切り記号の詳細については、「解説」を参照してください、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <paramref name="ascii" /> の長さを超えています。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">デコード対象となる文字列は、IDNA 標準に従ってエンコードされた US-ASCII 文字範囲 (U+0020 から U+007E) の 1 つまたは複数のラベルから構成されます。</param>
        <param name="index">部分文字列の始まりを指定する <paramref name="ascii" /> への 0 から始まるオフセット。</param>
        <param name="count">
          <paramref name="ascii" /> 文字列の <paramref name="index" /> で指定された位置から始まる部分文字列内の変換対象の文字の数。</param>
        <summary>IDNA 標準に従ってエンコードされた 1 つまたは複数のドメイン名ラベルの指定した長さの部分文字列を Unicode 文字の文字列にデコードします。</summary>
        <returns>
          <paramref name="ascii" /> パラメーター、<paramref name="index" /> パラメーター、<paramref name="count" /> パラメーターで指定された IDNA 部分文字列に対応する Unicode 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドメイン名、ラベル、およびラベルの区切り記号の詳細については、「解説」を参照してください、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <paramref name="ascii" /> の長さを超えています。  
  
- または - 
 <paramref name="index" /> が、<paramref name="ascii" /> から <paramref name="count" /> を引いた長さを超えています。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> は、<see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> プロパティ、<see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、IDNA 標準に対して無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準または非標準の名前付け規則が、現在の <see cref="T:System.Globalization.IdnMapping" /> オブジェクトのメンバーによって実行される操作内で使用されるかどうかを示す値を取得または設定します。</summary>
        <value>標準の名前付け規則が操作内で使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 標準の名前付け規則に従うドメイン名は、US-ASCII 文字範囲の文字の特定のサブセットで構成されます。 文字では、文字 A ~ Z、0 ~ 9 の数字、ハイフン (-) 文字 (U+002D)、およびピリオド (.) 文字。 文字の大文字と小文字は大きくありません。 厳密でない名前付け規則がより広い範囲の ASCII の使用を許可する文字、スペースを含む文字 (u+0020)、感嘆符文字 (u+0021)、および (U + 005F) の文字、および設定が可能です。 場合<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>は`true`、標準の文字のみがによって返されるラベルに表示できる、<xref:System.Globalization.IdnMapping.GetAscii%2A>メソッド。  
  
 既定の値で、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>プロパティは`false`、ASCII 文字の拡張のサブセットがラベルで許可されているとします。  
  
> [!NOTE]
>  <xref:System.Globalization.IdnMapping>クラスは、表示できない u+0000 ~ 文字 U + 001 f の使用を禁止し、U + 007F ドメイン名のラベルの設定に関係なく、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>プロパティ。 この規則は、名前のなりすましなどのセキュリティ攻撃のリスクを軽減します。  
  
   
  
## Examples  
 次の例は、U + 007F ~ u+0000 から ASCII の範囲内で文字を含む Url を生成し、コマンドを渡し、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> 2 つのメソッド<xref:System.Globalization.IdnMapping>オブジェクト。 1 つのオブジェクトがその<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>プロパティに設定`true`、他のオブジェクトに設定し`false`します。 出力には、無効なときに文字が表示されます、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>プロパティは`true`されるのかが有効な`false`します。  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>