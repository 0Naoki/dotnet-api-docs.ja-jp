<Type Name="CultureAndRegionInfoBuilder" FullName="System.Globalization.CultureAndRegionInfoBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c6a72cb1c0834406e2a2701c64eaa35cee9e873" /><Meta Name="ms.sourcegitcommit" Value="101e237579339f500467ba198ec0d3471dec4e4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="06/17/2019" /><Meta Name="ms.locfileid" Value="67149965" /></Metadata><TypeSignature Language="C#" Value="public sealed class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CultureAndRegionInfoBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureAndRegionInfoBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureAndRegionInfoBuilder sealed" />
  <TypeSignature Language="F#" Value="type CultureAndRegionInfoBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>sysglobl</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>新しいカスタム カルチャまたは別のカルチャおよび国/地域に基づいたカスタム カルチャを定義します。 カスタム カルチャは、コンピューターにインストールすることで、そのコンピューター上で実行される任意のアプリケーションで使用できます。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo>クラスは、関連する言語、サブ言語、国/地域、暦、文化的な慣習など、カルチャに固有の情報を保持します。 このクラスでは、カルチャ固有のインスタンスも提供します、 <xref:System.Globalization.DateTimeFormatInfo>、 <xref:System.Globalization.NumberFormatInfo>、 <xref:System.Globalization.CompareInfo>、および<xref:System.Globalization.TextInfo>、大文字小文字の区別、書式設定および解析日付や数値などのカルチャに固有の操作に必要なクラスと文字列を比較します。  
  
 既定では、.NET Framework でサポート<xref:System.Globalization.CultureInfo>のカルチャの定義済みセットを表すオブジェクト。 Windows システムで使用可能なこれらのカルチャの一覧は、次を参照してください。、**言語タグ**内の列、[一連の Windows でサポートされている言語/地域名](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)します。 カルチャ名によって定義された標準に準拠[BCP 47](https://tools.ietf.org/html/bcp47)します。 <xref:System.Globalization.CultureAndRegionInfoBuilder>クラスでは、完全に新しいまたは定義済みカルチャをオーバーライドするカスタム カルチャを作成することができます。  わりなくなりますカスタム カルチャがインストールされているし、特定のコンピューターに登録されている、定義済み<xref:System.Globalization.CultureInfo>オブジェクトしインスタンス化およびそれらのオブジェクトと同様に使用できます。  
  
> [!IMPORTANT]
>  なお、 <xref:System.Globalization.CultureAndRegionInfoBuilder> sysglobl.dll という名前のアセンブリのクラスがあります。 この型を使用するコードを正常にコンパイルするには、sysglobl.dll への参照を追加することが必要です。  
  
 カスタム カルチャは、そのコンピューターに対する管理者権限を持つユーザーのみがコンピューターに登録できます。 その結果、アプリ通常作成してインストールしないカスタム カルチャ。 代わりに、使用、<xref:System.Globalization.CultureAndRegionInfoBuilder>管理者は、作成、インストール、およびカスタム カルチャの登録に使用できる特殊なツールを作成するクラス。 カスタム カルチャがコンピューターに登録されると、使用できます、<xref:System.Globalization.CultureInfo>クラスをアプリには定義済みカルチャの場合と同様に、カスタム カルチャのインスタンスを作成します。  
  
 使用する必要がある、カスタムのカルチャ用に生成された日付と時刻の文字列を解析する場合、<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>または<xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>メソッドの代わりに、<xref:System.DateTime.Parse%2A?displayProperty=nameWithType>または<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>解析操作が成功する確率を向上させるためにメソッド。 カスタム カルチャの日付と時刻の文字列には、複雑で解析が困難になりますができます。 <xref:System.DateTime.Parse%2A>と<xref:System.DateTime.TryParse%2A>メソッドが失敗するすべてのいくつかの暗黙的な解析パターンを使用した文字列を解析しようとしました。 <xref:System.DateTime.TryParseExact%2A>メソッドには、これに対し、明示的に成功する可能性のある 1 つまたは複数の正確な解析パターンを指定するアプリケーションが必要です。  
  
## <a name="defining-and-creating-a-custom-culture"></a>定義とカスタム カルチャの作成  
 使用する、<xref:System.Globalization.CultureAndRegionInfoBuilder>クラスを定義し、カスタム カルチャの名前を付けます。 カスタムのカルチャをまったく新しいカルチャ、既存のカルチャ (これは、補足のカルチャ) に基づいている新しいカルチャまたは既存の .NET Framework カルチャを置換するカルチャを使用できます。 各ケースで、基本的な手順は同じです。  
  
1.  インスタンスを作成、<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクトを呼び出すことによってその<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%28System.String%2CSystem.Globalization.CultureAndRegionModifiers%29>コンス トラクター。 既存のカルチャを置換するには、カルチャの名前を渡すと、<xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType>コンス トラクターに列挙値。 新しいカルチャまたは補足のカルチャを作成する一意のカルチャの名前といずれかを渡す、<xref:System.Globalization.CultureAndRegionModifiers.Neutral?displayProperty=nameWithType>または<xref:System.Globalization.CultureAndRegionModifiers.None?displayProperty=nameWithType>列挙値。  
  
    > [!NOTE]
    >  使用する場合、<xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType>インスタンスを作成する列挙値、<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクト、<xref:System.Globalization.CultureAndRegionInfoBuilder>から値を持つオブジェクトのプロパティを自動的に設定、<xref:System.Globalization.CultureInfo>置き換えられるオブジェクト。  
  
2.  新規または補足カルチャ: 作成する場合  
  
    -   設定、<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクトのプロパティを呼び出して、<xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A>メソッドと受け渡しを<xref:System.Globalization.CultureInfo>オブジェクトのプロパティ値は、新しいオブジェクトに似ています。  
  
    -   設定、<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクトの地域のプロパティを呼び出して、<xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A>メソッドと受け渡しを<xref:System.Globalization.RegionInfo>のカスタム カルチャの領域を表すオブジェクト。  
  
3.  プロパティを変更、<xref:System.Globalization.CultureAndRegionInfoBuilder>に応じてオブジェクトします。  
  
4.  別のルーチンのカスタム カルチャを登録しようとしている場合、<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>メソッド。 これには、ロードおよび別のカスタム カルチャのインストール ルーチンに登録できる XML ファイルが生成されます。  
  
## <a name="registering-a-custom-culture"></a>カスタム カルチャの登録  
 カルチャを作成するは、アプリケーションから別のカスタム カルチャの登録アプリケーションを開発している場合は、呼び出すことが、<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>メソッドは、カスタムのカルチャの定義を含む XML ファイルを読み込む、をインスタンス化を<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクト。 登録を処理するために呼び出す、<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>メソッド。 正常に登録のカスタム カルチャを登録するアプリケーションする必要があります管理者特権を持つシステムで実行する、ターゲットです。それ以外の場合、呼び出し<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>スロー、<xref:System.UnauthorizedAccessException>例外。  
  
> [!WARNING]
>  カルチャのデータは、システム間で異なることができます。 使用する場合、<xref:System.Globalization.CultureAndRegionInfoBuilder>から既存のデータを読み込んでのカスタム カルチャは、複数のシステムとする一定であるカスタムを作成するクラスを作成<xref:System.Globalization.CultureInfo>と<xref:System.Globalization.RegionInfo>オブジェクトおよびカスタマイズすること、2 つを開発する必要がありますさまざまなユーティリティです。 最初は、カスタムのカルチャを作成し、XML ファイルに保存します。 2 つ目は、<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>メソッドは XML ファイルからカスタム カルチャの読み込みをターゲット コンピューターに登録します。  
  
 登録プロセスでは、次のタスクを実行します。  
  
-   定義されている情報を含む .nlp ファイルを作成、<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクト。  
  
-   .Nlp ファイルをターゲット コンピューター上の %windir%\Globalization システム ディレクトリに格納します。 これにより、セッション間で保持する、カスタムのカルチャの設定ができます。 (、 <xref:System.Globalization.CultureAndRegionInfoBuilder> .Nlp ファイルは、システム ディレクトリに保存されるため、メソッドには管理特権が必要です)。  
  
-   要求を準備、次回の内部キャッシュではなく %windir%\Globalization システム ディレクトリを検索する .NET Framework は、新しいカスタム カルチャを作成します。  
  
 カスタム カルチャが正常に登録されると、.NET Framework で定義済みのカルチャと区別することはできません。 呼び出すまで、カスタム カルチャが使用可能な<xref:System.Globalization.CultureAndRegionInfoBuilder>メソッドは、ローカル コンピューターから .nlp ファイルを削除します。  
  
## <a name="instantiating-a-custom-culture"></a>カスタム カルチャをインスタンス化します。  
 カスタム カルチャのインスタンスを作成するには、次の方法のいずれかで。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>カルチャ名を持つコンス トラクター。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>カルチャ名を持つメソッド。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType>カルチャ名を持つメソッド。  
  
 さらに、配列の<xref:System.Globalization.CultureInfo>オブジェクトによって返される、<xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=nameWithType>メソッドにカスタム カルチャが含まれています。  
  
   
  
## Examples  
 次の例では、米国の州のロシア語の言語を表すカスタム ru (米国) カルチャを定義します。 例では、ロシア語 (ロシア) から設定を読み込むことで、カスタム カルチャを定義する<xref:System.Globalization.CultureInfo>オブジェクトと、米国<xref:System.Globalization.RegionInfo>オブジェクトし、の数を設定し、<xref:System.Globalization.CultureAndRegionInfoBuilder>プロパティ。 例では、カスタムのカルチャでは、登録のインスタンスを作成し、現在のスレッド カルチャになります。  
  
 [!code-csharp[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/cs/car.cs#1)]
 [!code-vb[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/vb/car.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureAndRegionInfoBuilder (string cultureName, System.Globalization.CultureAndRegionModifiers flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cultureName, valuetype System.Globalization.CultureAndRegionModifiers flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.#ctor(System.String,System.Globalization.CultureAndRegionModifiers)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cultureName As String, flags As CultureAndRegionModifiers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureAndRegionInfoBuilder(System::String ^ cultureName, System::Globalization::CultureAndRegionModifiers flags);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureAndRegionInfoBuilder : string * System.Globalization.CultureAndRegionModifiers -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="new System.Globalization.CultureAndRegionInfoBuilder (cultureName, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
        <Parameter Name="flags" Type="System.Globalization.CultureAndRegionModifiers" />
      </Parameters>
      <Docs>
        <param name="cultureName">カルチャの名前。</param>
        <param name="flags">新しい <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトがニュートラル カルチャであるかどうか、既存のカルチャと国/地域を置換するかどうか、または新しいカルチャであるかどうかを指定する、<see cref="T:System.Globalization.CultureAndRegionModifiers" /> 値のいずれか 1 つ。</param>
        <summary><see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cultureName`パラメーターの新しい名前を指定<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクト。  
  
 `flags`パラメーターが使用される、<xref:System.Globalization.CultureAndRegionModifiers>値を指定するかどうか、新しい<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクトが新しいカスタム カルチャの場合、または、既存のニュートラル カルチャ、特定のカルチャまたは Windows ロケールが置き換えられます。  
  
 場合、`cultureName`パラメーターを指定する既存の .NET Framework カルチャ、登録済みのカスタム カルチャ、または Windows のロケールから生成されるカルチャ、<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A>コンス トラクターを自動的に新しい設定<xref:System.Globalization.CultureAndRegionInfoBuilder>カルチャを持つオブジェクトと国/地域の情報。  
  
 新しい設定<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクトのカルチャと国/地域の情報を呼び出すことによって、<xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A>と<xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A>メソッド。  
  
## <a name="custom-culture-names"></a>カスタム カルチャの名前  
 希望の形式の`cultureName`、新しいカスタム カルチャのパラメーターは"[`prefix`-]`language`[-`region`] [-`suffix`[`…`]"という、`language`コンポーネントが必要です、 `prefix`、`region`、および`suffix`コンポーネントは省略可能です。 各コンポーネントの最大長は 8 文字と全体の最大長`cultureName`パラメーターには 84 文字。  
  
 `prefix`コンポーネントは、Internet Assigned Numbers Authority (IANA) 識別します。 「I-」を指定または"は、"カルチャ名が登録されている、IANA、または「x"または」X"カルチャの名前のプライベート用に予約されています。 それ以外の場合、プレフィックスは必要ありません。 詳細については、RFC 4646、"Tags for the Identification of Languages"を参照してください。  
  
 `language`のコンポーネントである、`cultureName`パラメーターは、ISO 639-1 から派生する小文字の 2 文字コードを指定し、 `region` ISO 3166 から派生する大文字の 2 文字コードを指定します。 たとえば、EN-US では、米国で話される英語を表します。 ない場合、`region`コンポーネントは、ニュートラル カルチャを示します。  
  
 A`cultureName`されているものと同じ .NET Framework に含まれているカルチャの名前は、置換 (上書き) カルチャを示します。 置換カルチャのプロパティに割り当てることができる値は、制限されています。 このような制限事項の詳細については、各プロパティの例外を参照してください。  
  
 アプリケーションを使用して、`suffix`類似のカルチャを区別するためにコンポーネント。 たとえば、ABC と XYZ、2 つの会社は作成し、世界各地のさまざまな市場で自社製品を昇格する新しい ASP.NET Web サービスを共有します。 サービスの Web ページには、地域のロゴと、ユーザーのカルチャに応じて各会社の電話番号などの情報が表示されます。 各 Web ページのカルチャ固有のコンテンツが個別のリソース ファイルのカルチャの名前で識別され、会社名で修飾します。  たとえば、ABC-英語-米国、英語-米国-XYZ、日本、JP-ABC、XYZ JP-日本-EN-US、JA-JP カルチャのリソース ファイルの名前は。 "ABC"と"XYZ"のサフィックスは、同じアプリケーションのロジックを使用して、さまざまな市場固有の情報を表示する Web サービスを有効にします。  
  
 `suffix`コンポーネントは、各サブコンポーネントがハイフンで区切られた、各サブコンポーネントの最大長は 8 文字のサブコンポーネントで構成できます。 たとえば、「英語-米国-honda-自動車」は、`cultureName`パラメーター「- honda - 自動車」は、`suffix`コンポーネント。  
  
   
  
## Examples  
 次のコード例では、プライベート プレフィックスを使用してカスタム カルチャを作成し、そのプロパティのセットを示します。 最初のプロパティには、カルチャの名前が一覧表示します。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> が空の文字列 ("") です。  
  
または 
 <paramref name="cultureName" /> には、"0" ～ "9"、"a" ～ "z"、"A" ～ "Z"、ハイフン (-)、またはアンダースコア (_) 以外の文字が含まれています。  
  
または 
 <paramref name="cultureName" /> に構成要素を区切るためのハイフン (-) が含まれていますが、1 つまたは複数の <paramref name="prefix" />、<paramref name="language" />, <paramref name="region" />、または <paramref name="suffix" /> 構成要素が在しません。 言い換えると、2 つ以上のハイフンが隣接しています。  
  
または 
 <paramref name="cultureName" /> が 84 文字を超えています。  
  
または 
 <paramref name="cultureName" /> に構成要素を区切るためのハイフン (-) が含まれていますが、1 つまたは複数の構成要素名が 8 文字を超えています。  
  
または 
 <paramref name="cultureName" /> の先頭または末尾にハイフン (-) またはアンダースコア (_) が含まれています。  
  
または 
 <paramref name="cultureName" /> は、.NET Framework カルチャの代わりに代替並べ替え置換カルチャを指定します。 たとえば、<paramref name="culturenName" /> は、ドイツ語 (ドイツ) カルチャの "de-DE" ではなく、"de-de_phoneb" です。これは、ドイツの電話帳のように文字列を並べ替えるカルチャです。  
  
または 
 <paramref name="flags" /> に <see cref="T:System.Globalization.CultureAndRegionModifiers" /> 値の正しくない組み合わせが含まれています。  
  
または 
 <paramref name="flags" /> に <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" /> または <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" /> が含まれていて、<paramref name="cultureName" /> に指定されているカルチャが見つかりません。  
  
または 
 <paramref name="flags" /> に <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" /> が含まれていて、<paramref name="cultureName" /> に、.NET Framework に付属するカルチャを置き換えないユーザー作成のカスタム カルチャが指定されています。  
  
または 
 <paramref name="flags" /> に <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" /> が含まれていて、<paramref name="cultureName" /> に、ニュートラル カルチャではないカルチャが指定されています。  
  
または 
 <paramref name="flags" /> に <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" /> が含まれていて、<paramref name="cultureName" /> に、.NET Framework に付属する特定のカルチャを置き換えるユーザー作成のカスタム カルチャが指定されています。</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="T:System.Globalization.CultureAndRegionModifiers" />
      </Docs>
    </Member>
    <Member MemberName="AvailableCalendars">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar[] AvailableCalendars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] AvailableCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Property AvailableCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Globalization::Calendar ^&gt; ^ AvailableCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); void set(cli::array &lt;System::Globalization::Calendar ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AvailableCalendars : System.Globalization.Calendar[] with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトによってサポートされるカレンダーの配列を取得または設定します。</summary>
        <value>カレンダーの配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A>プロパティに対応して、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作において、割り当てられた配列が <see langword="null" /> であるか、または割り当てられた配列の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">ニュートラル カルチャでは、このプロパティはサポートされていません。  
  
または 
設定操作において、割り当てられた配列に <see cref="T:System.Globalization.PersianCalendar" />、<see cref="T:System.Globalization.TaiwanLunisolarCalendar" />、<see cref="T:System.Globalization.KoreanLunisolarCalendar" />、<see cref="T:System.Globalization.JapaneseLunisolarCalendar" />、<see cref="T:System.Globalization.ChineseLunisolarCalendar" />、または <see cref="T:System.Globalization.JulianCalendar" /> が含まれています。  
  
または 
set 操作で、割り当てられた配列にカスタム カレンダーが含まれています。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.CompareInfo CompareInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); void set(System::Globalization::CompareInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャの文字列を比較する方法を定義する <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを取得または設定します。</summary>
        <value>カルチャの文字列を比較する方法を定義する <see cref="T:System.Globalization.CompareInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A?displayProperty=nameWithType>プロパティに対応して、<xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType>プロパティ。  
  
 <xref:System.Globalization.TextInfo>と<xref:System.Globalization.CompareInfo>オブジェクトに割り当てられている、<xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A>と<xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A>プロパティの両方がカルチャおよび大文字の文字列比較をサポートします。 <xref:System.Globalization.CompareInfo>オブジェクトにもありますが含まれるメソッドを<xref:System.Globalization.CompareOptions>カルチャ、大文字の比較をサポートしているパラメーター。 これら 2 つのプロパティを割り当てる必要があります<xref:System.Globalization.TextInfo>と<xref:System.Globalization.CompareInfo>同じロケールを表すオブジェクト。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作で割り当てられた値が、<see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">このカスタム カルチャは、組み込みカルチャのオーバーライドです。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConsoleFallbackUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConsoleFallbackUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsoleFallbackUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConsoleFallbackUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsoleFallbackUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グラフィック ユーザー インターフェイスの既定のカルチャが不適切な場合に、コンソール アプリケーションに適した代替のユーザー インターフェイス カルチャを取得または設定します。</summary>
        <value>コンソール上のテキストの読み取りおよび表示に使用する代替カルチャ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Get 操作で、<xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A>プロパティに対応して、<xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A>メソッド。 指定`null`を現在のカルチャが定義されているかを示す設定操作において<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクトが別のユーザー インターフェイスのカルチャ。 プロパティ自体に別のコンソール フォールバック UI カルチャが含まれているカルチャを設定しようとした場合、それが割り当てられますその最終的な「リーフ」カルチャ。  
  
 アラビア語、ヘブライ語、ペルシア語、ウルドゥ語およびシリア語などの言語は、双方向のテキストに基づいています。 グラフィカル ユーザー インターフェイスを使用しているため、Windows アプリケーションでは、双方向言語をサポートします。 ただし、コンソール アプリケーション、オペレーティング システム コンソールのユーザー インターフェイスのテキストを使用しているためには、双方向サポートは提供されません。 その結果、コンソール アプリケーションは、アラビア語またはヘブライ語にローカライズ版が表示されます読み取り不可能なテキストをコンソール画面に表示。  
  
 ユーザー インターフェイスのカルチャでは、アプリケーションがユーザーの入力と出力をサポートする必要があるし、既定では、オペレーティング システムのカルチャと同じリソースを指定します。 たとえば、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティは、アラビア語のオペレーティング システムのアラビア語のカルチャを返します。 アプリケーションを使用する必要があります、<xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A>コンソール アプリケーションのユーザー インターフェイスの適切なニュートラル カルチャを取得するプロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定したカルチャが <see langword="null" /> でない設定操作において、指定したカルチャの <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" /> プロパティが指定したカルチャと同じではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromLdml">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml (string xmlFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml(string xmlFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromLdml (xmlFileName As String) As CultureAndRegionInfoBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureAndRegionInfoBuilder ^ CreateFromLdml(System::String ^ xmlFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromLdml : string -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml xmlFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureAndRegionInfoBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlFileName"><see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトの XML 表現を格納したファイルの名前。</param>
        <summary>指定したオブジェクトの表現を格納した XML ファイルから <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトを再構成します。</summary>
        <returns><paramref name="xmlFileName" /> パラメーターに格納されている情報と等価の新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `xmlFileName`パラメーターの XML 表現を含むファイル名を指定する<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクト。 XML ファイルの形式は、ロケール データのマークアップ言語 (LDML) バージョン 1.1 と呼ばれます。 新しい<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクトを作成し、内のデータを使用して初期化`xmlFileName`します。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>メソッドの逆の操作を実行する、<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>メソッド。  
  
 子要素として LDML ファイルでは、カルチャのプロパティが指定されて、`<special>`内の要素、`<identity>`セクション。 プロパティ値を指定する要素の通常`type`属性。 たとえば、LDML ファイルから抜粋では、英語版のニュートラル カルチャとしてカルチャの親を定義します。  
  
```xml  
<identity>  
   <version number="1.1">ldml version 1.1</version>  
   <generation date="2012-05-16" />  
   <special xmlns:msLocale="http://schemas.microsoft.com/globalization/2004/08/carib/ldml">  
      <!-content removed -->  
      <msLocale:parentName type="en" />  
      <!-content removed -->  
   </special>  
</identity>  
```  
  
 LDML 標準の詳細については、次を参照してください。 [Unicode Technical Standard #35、"ロケール データのマークアップ言語 (LDML)"](https://go.microsoft.com/fwlink/p/?LinkId=252840) Unicode Consortium web サイト。  
  
   
  
## Examples  
 次の例で、<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>と<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>メソッド。  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xmlFileName" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="xmlFileName" /> は、空の文字列 ("") か、または無効なファイルまたはパス名です。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="xmlFileName" /> のデータが有効な XML 形式ではありません。  
  
または 
<paramref name="xmlFileName" /> にアクセスしているときに、I/O エラーが発生しました。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><paramref name="xmlFileName" /> のデータが有効な LDML 形式ではありません。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CultureEnglishName">
      <MemberSignature Language="C#" Value="public string CultureEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>英語のカルチャ名を取得または設定します。</summary>
        <value>英語のカルチャ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A>プロパティに対応して、<xref:System.Globalization.CultureInfo.EnglishName%2A>プロパティ。  
  
 戻り値など、<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A>米国で話される英語の特定のカルチャのプロパティは、「英語 (米国)」。  
  
 このプロパティの値は、.NET Framework の言語バージョンに関係なく同じです。  
  
   
  
## Examples  
 次のコード例では、プライベート プレフィックスを使用してカスタム カルチャを作成し、そのプロパティのセットを示します。 最初のプロパティには、カルチャの名前が一覧表示します。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 0 ～ 79 文字ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureName">
      <MemberSignature Language="C#" Value="public string CultureName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>作成するカルチャの名前を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのカルチャ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値がで指定されたカルチャの名前、<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A>コンス トラクター。 指定されたカルチャ名が以外の場合も、既存のカルチャと同じである場合、戻り値は、指定されたカルチャ名ではなく、既存のカルチャの名前です。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A>プロパティに対応して、<xref:System.Globalization.CultureInfo.Name%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例では、プライベート プレフィックスを使用してカスタム カルチャを作成し、そのプロパティのセットを示します。 最初のプロパティには、カルチャの名前が一覧表示します。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CultureNativeName">
      <MemberSignature Language="C#" Value="public string CultureNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャの表示用に設定されている形式および言語でカルチャ名を取得または設定します。</summary>
        <value>カルチャの表示用に設定されている形式および言語でのカルチャ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A>プロパティに対応して、<xref:System.Globalization.CultureInfo.NativeName%2A>プロパティ。  
  
 このプロパティの値は、.NET Framework の言語バージョンに関係なく同じです。  
  
 カルチャの言語を正しく表示するのには、システムは設定されていない場合、カルチャの完全な名前が正しく表示されない場合があります。 たとえば場合、<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A>プロパティは、日本語 (日本) の"JA-JP"、<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A>のみ英語に設定されているシステムのプロパティが正しく表示されません。 ただし、Windows 2000 などの多言語のオペレーティング システムの表示、<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A>プロパティ正しくします。  
  
   
  
## Examples  
 次のコード例では、プライベート プレフィックスを使用してカスタム カルチャを作成し、そのプロパティのセットを示します。 最初のプロパティには、カルチャの名前が一覧表示します。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 0 ～ 79 文字ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトで表されるカルチャを記述する <see cref="T:System.Globalization.CultureTypes" /> 値を取得します。</summary>
        <value><see cref="T:System.Globalization.CultureTypes" /> 値のいずれか。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="P:System.Globalization.CultureInfo.CultureTypes" />
        <altmember cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyEnglishName">
      <MemberSignature Language="C#" Value="public string CurrencyEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトで表される国/地域で使用される通貨の、英語での名前を取得または設定します。</summary>
        <value>地域で使用される通貨を英語で表した名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName%2A>プロパティは、<xref:System.Globalization.RegionInfo.CurrencyEnglishName%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値が空の文字列 ("") です。</exception>
        <exception cref="T:System.NotSupportedException">現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトは、ニュートラル カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="CurrencyNativeName">
      <MemberSignature Language="C#" Value="public string CurrencyNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトで表される国/地域で使用される通貨の、ネイティブ言語での名前を取得または設定します。</summary>
        <value>ISO 3166 の国/地域コードに関連付けられた言語で書式指定された、現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトで表される国/地域で使用される通貨の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName%2A>プロパティは、<xref:System.Globalization.RegionInfo.CurrencyNativeName%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値が空の文字列 ("") です。</exception>
        <exception cref="T:System.NotSupportedException">現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトは、ニュートラル カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="GeoId">
      <MemberSignature Language="C#" Value="public int GeoId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GeoId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberSignature Language="VB.NET" Value="Public Property GeoId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GeoId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.GeoId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>地理的な領域、国、都市、または場所の一意の識別番号を取得または設定します。</summary>
        <value>地理的な場所を一意に識別する 32 ビットの符号付き数値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A>プロパティに対応して、<xref:System.Globalization.RegionInfo.GeoId%2A>プロパティ。  
  
 アプリケーションを使用する必要があります、<xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A>カルチャに固有のサービスをお客様に提供するプロパティ。 たとえば、<xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A>プロパティは、リージョンに関する特定の情報を含むデータベース レコードへのアクセス キーとして使用できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトは、ニュートラル カルチャを定義します。</exception>
      </Docs>
    </Member>
    <Member MemberName="GregorianDateTimeFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property GregorianDateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DateTimeFormatInfo ^ GregorianDateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GregorianDateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グレゴリオ暦に従って日付と時刻の書式を定義する <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトを取得または設定します。</summary>
        <value><see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべてのカルチャは、現在定義されているカルチャを含む<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクト、関連付けられているローカライズされた構成のグレゴリオ暦カレンダーが含まれています、<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 <xref:System.Globalization.DateTimeFormatInfo>オブジェクトは、アプリケーションでの日付と時刻の表示方法を定義します。 <xref:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat%2A>プロパティの値が、<xref:System.Globalization.DateTimeFormatInfo>によって返される最初のローカライズされた構成のグレゴリオ暦カレンダーに関連付けられているオブジェクト、<xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において値のプロパティから無効なプロパティ値が返されました。</exception>
        <exception cref="T:System.NotSupportedException">現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトは、ニュートラル カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>RFC 4646 標準『Tags for the Identification of Languages』に従って書式設定されたカルチャ名を取得または設定します。</summary>
        <value>RFC 4646 に従って書式設定されたカルチャ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag%2A>プロパティを取得または設定によって返されるカルチャ名と異なっていてもかまいませんが、RFC 4646 に従って書式設定されたカルチャ名、<xref:System.Globalization.CultureInfo.Name%2A>プロパティ。 たとえば、.NET framework version 1.0 では、繁体字中国語のニュートラル カルチャの名前は"ZH-CHT"でした。 これに対し、RFC 4646 では、"ZH-HANT"としてそのカルチャ名を定義します。 (.NET Framework version 4 で、"ZH-CHT"の表示名は、「体字中国語 (繁) レガシー」)。  
  
 RFC 4646 のカルチャ名は、いくつかのコンポーネントで構成されます。 通常のカルチャ名は、必須の言語識別子、オプションのスクリプト識別子、および省略可能な国/地域の識別子で構成されます。 たとえば、セルビア語、キリル文字、およびセルビアのリージョンの有効な RFC 4646 カルチャ名は"sr という RS"です。  
  
 2 つまたは複数のカルチャで同じ IETF 言語タグを使用できることに注意してください。  
  
 詳細についてで RFC 4646 では、「タグ識別の言語」を参照してください。[要求のコメント](https://go.microsoft.com/fwlink/?linkid=45286)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 84 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作において、値に指定された名前の構成要素が空であるかまたは 8 文字を超えています。または、英数字文字またはハイフン (-) ではないか、または名前の先頭または末尾にハイフンが含まれています。</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsMetric">
      <MemberSignature Language="C#" Value="public bool IsMetric { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMetric" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberSignature Language="VB.NET" Value="Public Property IsMetric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMetric { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsMetric : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>国/地域で、計測のためにメートル法を使用するかどうかを示す値を取得または設定します。</summary>
        <value>国/地域で、計測のためにメートル法を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">この操作は、ニュートラル カルチャに対しては無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ISOCurrencySymbol">
      <MemberSignature Language="C#" Value="public string ISOCurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ISOCurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property ISOCurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ISOCurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ISOCurrencySymbol : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>国/地域に関連付けられた 3 文字の ISO 4217 通貨記号を取得または設定します。</summary>
        <value>国/地域に関連付けられた 3 文字の ISO 4217 通貨記号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol%2A>プロパティに対応して、<xref:System.Globalization.RegionInfo.ISOCurrencySymbol%2A>プロパティ。  
  
 3 文字の ISO 4217 通貨記号の一覧に含まれる、<xref:System.Globalization.RegionInfo>クラスに関するトピック。 たとえば、米国ドルの ISO 4217 通貨記号は"USD"です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">これはニュートラル カルチャです。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 0 ～ 8 文字ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsRightToLeft">
      <MemberSignature Language="C#" Value="public bool IsRightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property IsRightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRightToLeft { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsRightToLeft : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトに関連付けられている書記体系のテキストの記述方向を取得または設定します。</summary>
        <value>現在の書記体系のテキストの記述方向が右から左の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションを使用して、<xref:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft%2A>グラフィカル ユーザー インターフェイスでバーのボタンやスクロールなどのコントロールの相対位置を決定するプロパティ。  
  
 現在から作成されたカスタム カルチャ内のテキストの方向へのアクセスに<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクト、アプリケーションを使用する必要があります、<xref:System.Globalization.TextInfo.IsRightToLeft%2A>によって返されるオブジェクトのプロパティ、<xref:System.Globalization.CultureInfo.TextInfo%2A>カスタム カルチャのプロパティ。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public int KeyboardLayoutId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyboardLayoutId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクティブな入力ロケール識別子を取得または設定します。</summary>
        <value>入力ロケール識別子を指定する 32 ビットの符号付き数値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId%2A>プロパティに対応して、<xref:System.Globalization.CultureInfo.KeyboardLayoutId%2A>プロパティ。  
  
 入力ロケール識別子には、キーボードのレイアウトと呼んでいました。 音声からテキストへのコンバーター、入力方式エディター (IME)、またはその他の形式の入力の識別子を使用できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作の値が 0 です。</exception>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのカルチャ識別子を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのカルチャ識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.LCID%2A?displayProperty=nameWithType>プロパティに対応して、<xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=nameWithType>プロパティ。  
  
 置換カルチャのカルチャ識別子は、対応する各国語サポート (NLS) のロケール識別子にマップされます。 ユーザー定義のカスタム カルチャの場合、このプロパティの値は常に値が 16 進数の 0x1000 です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromCultureInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromCultureInfo (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromCultureInfo(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromCultureInfo (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromCultureInfo(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromCultureInfo : System.Globalization.CultureInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">プロパティの使用元のオブジェクト。</param>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのプロパティを、指定した <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの対応するプロパティを使用して設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="culture" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromRegionInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromRegionInfo (System.Globalization.RegionInfo region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromRegionInfo(class System.Globalization.RegionInfo region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo(System.Globalization.RegionInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromRegionInfo (region As RegionInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromRegionInfo(System::Globalization::RegionInfo ^ region);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromRegionInfo : System.Globalization.RegionInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromRegionInfo region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Globalization.RegionInfo" />
      </Parameters>
      <Docs>
        <param name="region">プロパティの使用元のオブジェクト。</param>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのプロパティを、指定した <see cref="T:System.Globalization.RegionInfo" /> オブジェクトの対応するプロパティを使用して設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="region" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトがニュートラル カルチャを指定しているため、国/地域情報を設定できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値、通貨、および割合を表示する、カルチャに適切な書式を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトを取得または設定します。</summary>
        <value>数値、通貨、および割合を表示する、カルチャに適切な書式を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A>プロパティに対応して、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。  
  
 アプリケーションでは、特定のカルチャに対してのみ、このプロパティを呼び出す必要があります。  
  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>、および<xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>プロパティの<xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A>は無視されます。 カルチャの保存形式は、これらのプロパティの値を明示的には保存されません。 代わりに、カルチャが読み込まれるときに常には、既定で<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>、 <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>、および<xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>、それぞれします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">この操作は、ニュートラル カルチャに対しては無効です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">このカルチャに対して指定された数値プロパティ、通貨プロパティ、または割合プロパティの桁数が多すぎるか、値が範囲外です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカスタム カルチャの親カルチャを表す <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得または設定します。</summary>
        <value>現在のカスタム カルチャの親カルチャを表す <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カルチャでは、階層があります。 定義済みカルチャは、特定のカルチャの親はニュートラル カルチャとカルチャの親は、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>します。 親カルチャには、その子の間で共通する情報のセットのみが含まれます。  
  
 一般に、カスタムのカルチャがこの階層に準拠していることをお勧めします。 ただし、既定では、<xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>のカスタム カルチャは、<xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>カルチャを基になるのです。 アプリケーションでカルチャを作成する場合<xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A>"en 米国 MyCulture"が"EN-US"に基づき、その親は"en"あるためです、<xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>の"EN-US"です。 として、アプリケーションが"EN-US"を使用するかどうか、<xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>新しいカスタム カルチャの設定がありますこの値に明示的にします。  
  
 特定のカルチャのリソースが、システムで利用できない場合は、ニュートラル カルチャのリソースが使用されます。 ニュートラル カルチャのリソースが利用できない場合は、メイン アセンブリに埋め込まれたリソースが使用されます。 リソース フォールバック プロセスの詳細については、次を参照してください。 [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)します。  
  
 Windows API でのカルチャのリストは、.NET framework カルチャの一覧からは若干異なります。 Windows との相互運用が必要な場合など、プラットフォームを通じて呼び出し機構、アプリケーションが .NET Framework で定義されている特定のカルチャを使用する必要があります。 これにより、同じでは、同等の Windows ロケールとの一貫性<xref:System.Globalization.CultureInfo.LCID%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">設定操作において、カルチャ値が見つかりません。 割り当てられた値が未登録のカスタム カルチャである可能性があります。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">現在のカルチャの先祖を走査する設定操作において、先祖の 10 世代内にインバリアント カルチャが見つかりません。  
  
 または  
  
 設定操作において、循環参照が見つかりました。割り当てられた値は、現在のカスタム カルチャの先祖です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionEnglishName">
      <MemberSignature Language="C#" Value="public string RegionEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>英語で表した国/地域の完全名を取得または設定します。</summary>
        <value>英語で表した国/地域の完全名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A>プロパティに対応して、<xref:System.Globalization.RegionInfo.EnglishName%2A>プロパティ。  
  
 戻り値など、 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A> United States が"United States"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">この操作は、ニュートラル カルチャに対しては無効です。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 0 ～ 79 文字ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionName">
      <MemberSignature Language="C#" Value="public string RegionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RegionName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトの国/地域の名前を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトの国/地域の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値がで指定されたカルチャの名前、<xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A>コンス トラクター。 指定されたカルチャ名が以外の場合も、既存のカルチャと同じである場合、戻り値は、指定されたカルチャ名ではなく、既存のカルチャの名前です。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A>プロパティに対応して、<xref:System.Globalization.RegionInfo.Name%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">この操作は、ニュートラル カルチャに対しては無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionNativeName">
      <MemberSignature Language="C#" Value="public string RegionNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このカスタム カルチャが適用される人々の間で使用される国/地域の完全名を取得または設定します。</summary>
        <value>国/地域のローカル名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName%2A>プロパティに対応して、<xref:System.Globalization.RegionInfo.NativeName%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">この操作は、ニュートラル カルチャに対しては無効です。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 79 文字ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public void Register ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Register() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      <MemberSignature Language="VB.NET" Value="Public Sub Register ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Register();" />
      <MemberSignature Language="F#" Value="member this.Register : unit -&gt; unit" Usage="cultureAndRegionInfoBuilder.Register " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトをローカル コンピューター上でカスタム カルチャとして保持して、アプリケーションでカルチャを使用できるようにします。 管理特権が必要となります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>メソッドでは、カスタムのカルチャを格納、Win32 によって返されるディレクトリのグローバル化サブディレクトリに、ローカル コンピューター上のファイルとして[GetWindowsDirectory](https://go.microsoft.com/fwlink/?LinkId=191561)関数。 このプロセスは、カスタムのカルチャの登録は呼び出されます。 カルチャ名を指定することで、新しいカスタム カルチャを作成できますカスタム カルチャは、登録後、<xref:System.Globalization.CultureInfo.%23ctor%2A>コンス トラクターを呼び出すときに、または、<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>メソッド。  
  
 カスタムのカルチャを呼び出すことによって削除することができます、<xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A>メソッド。  
  
   
  
## Examples  
 次の例で、<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>メソッド。  
  
 [!code-csharp[sys.glob.carib.register#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.register/CS/persist.cs#1)]
 [!code-vb[sys.glob.carib.register#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.register/VB/persist.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このカスタム カルチャは既に登録されています。  
  
または 
カルチャを登録する前に設定する必要があるプロパティが現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトにあります。 すべてのニュートラルまたは特定のカルチャには、<see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" /> と <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" /> のセットが必要です。 特定のカルチャには、<see cref="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />、<see cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />、および <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" /> のセットも必要となります。  
  
次のプロパティが未定義の場合、このメソッドでは <see cref="T:System.InvalidOperationException" /> もスローされます。 
 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトのプロパティ値が最大長または最大値を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに管理特権がありません。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="cultureAndRegionInfoBuilder.Save filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">このカスタム カルチャの XML 表現を格納するファイルの名前。</param>
        <summary>現在の <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトの XML 表現を、指定したファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>メソッドは現在、書き込みます<xref:System.Globalization.CultureAndRegionInfoBuilder>オブジェクトによって指定されたファイルを`filename`XML 形式でパラメーターがロケール データのマークアップ言語 (LDML) バージョン 1.1 と呼ばれます。 <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>メソッドの逆の操作を実行する、<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>メソッド。  
  
 LDML ファイルの形式の詳細については、次を参照してください。、<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>メソッド。 LDML 標準については、次を参照してください。 [Unicode Technical Standard #35、"ロケール データのマークアップ言語 (LDML)"](https://go.microsoft.com/fwlink/p/?LinkId=252840) Unicode Consortium web サイト。  
  
   
  
## Examples  
 次の例で、<xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A>と<xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A>メソッド。  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="filename" /> が空の文字列 ("") です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに格納されている <see cref="T:System.Globalization.TextInfo" />、<see cref="T:System.Globalization.NumberFormatInfo" />、<see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> の各オブジェクトのプロパティの値が無効です。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.TextInfo TextInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); void set(System::Globalization::TextInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このカスタム カルチャに関連付けられている書記体系を定義する <see cref="T:System.Globalization.TextInfo" /> オブジェクトを取得または設定します。</summary>
        <value>このカスタム カルチャに関連付けられている書記体系を定義するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A?displayProperty=nameWithType>プロパティは、文字列のカルチャに固有の大文字と小文字の情報を提供します。 対応する、<xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType>プロパティ。  
  
 <xref:System.Globalization.TextInfo>と<xref:System.Globalization.CompareInfo>オブジェクトに割り当てられている、<xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A>と<xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A>プロパティの両方がカルチャおよび大文字の文字列比較をサポートします。 <xref:System.Globalization.CompareInfo>オブジェクトにもありますが含まれるメソッドを<xref:System.Globalization.CompareOptions>カルチャ、大文字の比較をサポートしているパラメーター。 これら 2 つのプロパティを割り当てる必要があります<xref:System.Globalization.TextInfo>と<xref:System.Globalization.CompareInfo>同じロケールを表すオブジェクト。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">置換カルチャでは、この操作はサポートされていません。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">リストの区切り記号内の文字数が 0 ～ 3 の範囲外です。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このカスタム カルチャの言語に対する ISO 639-2 の 3 文字のコードを取得または設定します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの言語に対する ISO 639-2 の 3 文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName%2A>プロパティに対応して、<xref:System.Globalization.CultureInfo.ThreeLetterISOLanguageName%2A>プロパティ。  
  
 たとえば、英語の 3 文字コードは"eng"です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISORegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ISO 3166 で定義された国/地域の 3 文字コードを取得または設定します。</summary>
        <value>ISO 3166 で定義された国/地域の 3 文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A>プロパティに対応して、<xref:System.Globalization.RegionInfo.ThreeLetterISORegionName%2A>プロパティ。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A>プロパティには、ISO 3166 で定義された国/地域の 3 文字コードのいずれかが含まれています。 たとえば、米国の 3 文字コードでは、"USA"です。  
  
 場合は大きくありません。 ただし、 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A>、 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A>、および<xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A>プロパティが大文字で適切なコードが含まれます。  
  
 事前定義された国/地域名が記載されて、<xref:System.Globalization.RegionInfo>クラスに関するトピック。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows API の定義に従って、言語に対する 3 文字のコードを取得または設定します。</summary>
        <value>Windows API で定義されている言語に対する 3 文字のコード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName%2A>プロパティに対応して、<xref:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName%2A>プロパティ。  
  
 このプロパティは、Windows API のメソッドと同じ値を返します`GetLocaleInfo`は。 たとえば、英語 (米国) は、Windows API で定義されているの 3 文字コードでは、"enu"です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
        <exception cref="T:System.NotSupportedException">設定操作において、現在のカスタム カルチャが置換カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsRegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsRegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsRegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsRegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsRegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsRegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカスタム カルチャが表す国/地域に対して Windows が割り当てる 3 文字コードを取得または設定します。</summary>
        <value>この <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> オブジェクトが表す国/地域に対して Windows が割り当てる 3 文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName%2A>プロパティに対応して、<xref:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName%2A>プロパティ。  
  
 たとえば、米国の 3 文字コードでは、"USA"です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
        <exception cref="T:System.NotSupportedException">設定操作において、現在のカスタム カルチャが置換カルチャまたはニュートラル カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string TwoLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの言語に対する ISO 639-1 の 2 文字のコードを取得または設定します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの言語に対する ISO 639-1 の 2 文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName%2A>プロパティに対応して、<xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>プロパティ。  
  
 たとえば、英語の 2 文字コードは"en"です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISORegionName">
      <MemberSignature Language="C#" Value="public string TwoLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ISO 3166 で定義された国/地域の 2 文字のコードを取得または設定します。</summary>
        <value>ISO 3166 で定義された国/地域の 2 文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A>プロパティに対応して、<xref:System.Globalization.RegionInfo.TwoLetterISORegionName%2A>プロパティ。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A>プロパティの値が 2 文字コードを ISO 3166 で定義された国/地域のいずれか。 たとえば、米国の 2 文字コードは、「弊社」。 定義済み<xref:System.Globalization.RegionInfo>名前にある、<xref:System.Globalization.RegionInfo>クラスに関するトピック。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作において、値の長さが 1 ～ 8 文字ではありません。</exception>
        <exception cref="T:System.ArgumentException">設定操作の値に、"a" ～ "z"、"A" ～ "Z"、または "0" ～ "9" の範囲外の文字が含まれています。</exception>
        <exception cref="T:System.NotSupportedException">設定操作において、現在のカスタム カルチャがニュートラル カルチャです。</exception>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="static member Unregister : string -&gt; unit" Usage="System.Globalization.CultureAndRegionInfoBuilder.Unregister cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">削除するカスタム カルチャの名前。</param>
        <summary>ローカル コンピューターからカスタム カルチャを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A>メソッドの逆では、<xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>メソッド。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A>メソッドは、Windows API によって返されるディレクトリのグローバル化サブディレクトリに、ローカル コンピューター上のファイルとしてカスタム カルチャを格納[GetWindowsDirectory](https://go.microsoft.com/fwlink/?LinkId=191561)関数。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A>メソッドが、コンピューターからカスタム カルチャが永続化されたファイルを削除します。 ファイルが削除されると、コンピューターのメモリ内のカスタム カルチャの既存のインスタンスは引き続き機能しますが、カスタム カルチャの新しいインスタンスを作成することはできません。  
  
   
  
## Examples  
 次の例で、<xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A>メソッド。  
  
 [!code-csharp[sys.glob.carib.unregister#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.unregister/CS/unregister.cs#1)]
 [!code-vb[sys.glob.carib.unregister#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.unregister/VB/unregister.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="cultureName" /> は、依存カルチャの親カルチャまたはコンソール フォールバック ユーザー インターフェイス カルチャです。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに管理特権がありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> に指定されているカルチャが見つかりません。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      </Docs>
    </Member>
  </Members>
</Type>
