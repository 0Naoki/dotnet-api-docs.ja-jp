<Type Name="DateTimeFormatInfo" FullName="System.Globalization.DateTimeFormatInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e20da715d0de63e0245b3482df68b13d9f60f8b4" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57957767" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.DateTimeFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DateTimeFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateTimeFormatInfo sealed : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type DateTimeFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>日付と時刻の値の書式に関するカルチャ固有の情報を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ、<xref:System.Globalization.DateTimeFormatInfo>クラスには、書式設定または、次のように日付と時刻の値を解析するカルチャ固有情報が含まれています。  
  
-   日付値の書式設定するために使用するパターン。  
  
-   時刻の値を書式設定に使用するパターン。  
  
-   週の曜日の名前。  
  
-   年の月の名前。  
  
-   午前 および p. m. 時刻の値で使用されている指定子。  
  
-   カレンダーの日付を表すです。  
  
 このセクションの内容:  
  
-   [DateTimeFormatInfo オブジェクトをインスタンス化します。](#instantiating)  
  
    -   [インバリアント カルチャの](#instantiating_Invariant)  
  
    -   [特定のカルチャ](#instantiating_Specific)  
  
    -   [ニュートラル カルチャ](#instantiating_neutral)  
  
    -   [現在のカルチャ](#instantiating_Current)  
  
-   [DateTimeFormatInfo と動的データ](#dynamic)  
  
-   [日付と時刻の書式設定](#Formatting_dates_times)  
  
-   [書式指定文字列と DateTimeFormatInfo のプロパティ](#format-strings-and-datetimeformatinfo-properties)  
  
-   [DateTimeFormatInfo のプロパティを変更します。](#Modifying)  
  
<a name="instantiating"></a>   
## <a name="instantiating-a-datetimeformatinfo-object"></a>DateTimeFormatInfo オブジェクトをインスタンス化します。  
 A<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは、インバリアント カルチャや、特定のカルチャ、ニュートラル カルチャでは、現在のカルチャの書式指定規則を表すことができます。 このセクションの各型のインスタンスを作成する方法を説明します<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。  
  
<a name="instantiating_Invariant"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-invariant-culture"></a>インバリアント カルチャの DateTimeFormatInfo オブジェクトをインスタンス化します。  
 インバリアント カルチャでは、カルチャに依存しないられるカルチャを表します。 すべて特定英語圏の国/地域ではなく、英語の言語に基づいています。 特定のカルチャのデータは、動的であっても、新しいカルチャの規則やユーザー設定を反映するように変更することができます、インバリアント カルチャのデータは変わりません。 インスタンス化することができます、<xref:System.Globalization.DateTimeFormatInfo>次の方法でインバリアント カルチャの書式指定規則を表すオブジェクト。  
  
-   値を取得することによって、<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>プロパティ。 返された<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは読み取り専用です。  
  
-   パラメーターなしで呼び出すことによって<xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A>コンス トラクター。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
-   値を取得することによって、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティから、<xref:System.Globalization.CultureInfo>オブジェクトによって返される、<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>プロパティ。 返された<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは読み取り専用です。  
  
 次の例がこれらの各メソッドをインスタンス化するには、<xref:System.Globalization.DateTimeFormatInfo>インバリアント カルチャを表すオブジェクト。 オブジェクトは読み取り専用かどうかを示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#1)]  
  
<a name="instantiating_Specific"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-specific-culture"></a>特定のカルチャの DateTimeFormatInfo オブジェクトをインスタンス化します。  
 特定のカルチャでは、特定の国/地域で話されている言語を表します。 たとえば、EN-US では、米国で話される英語の言語を表す特定のカルチャと EN-CA はカナダで話される英語の言語を表す特定のカルチャ。 インスタンス化することができます、<xref:System.Globalization.DateTimeFormatInfo>次の方法で、特定のカルチャの書式指定規則を表すオブジェクト。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType>メソッドと、返された値を取得する<xref:System.Globalization.CultureInfo>オブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ。 返された<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは読み取り専用です。  
  
-   静的なを渡すことによって<xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A>メソッド、<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを<xref:System.Globalization.DateTimeFormatInfo>オブジェクトを取得します。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
-   静的なを呼び出すことによって<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>メソッドと、返された値を取得する<xref:System.Globalization.CultureInfo>オブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>クラスのコンス トラクターと、返された値を取得する<xref:System.Globalization.CultureInfo>オブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ。 返された <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
 次の例では、各インスタンス化するこれらの方法を示す、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトし、結果のオブジェクトは読み取り専用かどうかを示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#3)]  
  
<a name="instantiating_neutral"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-neutral-culture"></a>ニュートラル カルチャの DateTimeFormatInfo オブジェクトをインスタンス化します。  
 ニュートラル カルチャを表すカルチャまたは言語、国/地域の独立したです。通常は 1 つまたは複数の特定のカルチャの親です。 たとえば、Fr は、フランス語の言語と、FR-FR カルチャの親のニュートラル カルチャです。 インスタンス化することができます、<xref:System.Globalization.DateTimeFormatInfo>を作成するのと同じ方法でニュートラル カルチャの書式指定規則を表すオブジェクトを<xref:System.Globalization.DateTimeFormatInfo>特定のカルチャの書式指定規則を表すオブジェクト。 さらに、ニュートラル カルチャを取得できます<xref:System.Globalization.DateTimeFormatInfo>オブジェクトから特定のカルチャのニュートラル カルチャを取得することによって<xref:System.Globalization.CultureInfo.Parent%2A?displayProperty=nameWithType>プロパティと取得、<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ。 親カルチャは、返されるインバリアント カルチャを表す場合を除き、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトが読み取り/書き込みです。 次の例では、インスタンス化するこれらの方法を示しています、<xref:System.Globalization.DateTimeFormatInfo>ニュートラル カルチャを表すオブジェクト。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#2)]  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 で[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]を取得しようとしてを<xref:System.Globalization.DateTimeFormatInfo>ニュートラル カルチャの書式指定規則を反映するオブジェクトを返します。 を<xref:System.NotSupportedException>例外。  
  
 ただし、特定の国/地域から独立しているために、ニュートラル カルチャは、カルチャに固有の書式情報がありません。 設定ではなく、<xref:System.Globalization.DateTimeFormatInfo>ジェネリックの値を持つオブジェクトに、.NET Framework が返す、<xref:System.Globalization.DateTimeFormatInfo>ニュートラル カルチャの子である、特定の書式指定規則のカルチャを反映するオブジェクト。 たとえば、 <xref:System.Globalization.DateTimeFormatInfo> en のニュートラル カルチャは EN-US カルチャの書式指定規則を反映するためのオブジェクトと<xref:System.Globalization.DateTimeFormatInfo>fr カルチャ、FR-FR カルチャの書式設定規則を反映するためのオブジェクトします。  
  
 次のようなコードを使用すると、ニュートラル カルチャを表すどの特定のカルチャの書式指定規則を決定します。 この例では、リフレクションを使用して、比較、<xref:System.Globalization.DateTimeFormatInfo>ニュートラル カルチャのプロパティの特定の子のカルチャのプロパティで。 カレンダーの種類が同じ場合に等価である 2 つのカレンダーを考慮し、構成のグレゴリオ暦カレンダー場合は、その<xref:System.Globalization.GregorianCalendar.CalendarType%2A?displayProperty=nameWithType>プロパティが同一の値があります。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate6c.vb#6)]  
  
<a name="instantiating_Current"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-current-culture"></a>現在のカルチャの DateTimeFormatInfo オブジェクトをインスタンス化します。  
 インスタンス化することができます、<xref:System.Globalization.DateTimeFormatInfo>次の方法で、現在のカルチャの書式指定規則を表すオブジェクト。  
  
-   値を取得することによって、<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>プロパティ。 返された<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは読み取り専用です。  
  
-   値を取得することによって、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティから、<xref:System.Globalization.CultureInfo>オブジェクトによって返される、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティ。 返された<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは読み取り専用です。  
  
-   呼び出すことによって、<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>メソッドを<xref:System.Globalization.CultureInfo>現在のカルチャを表すオブジェクト。 返された<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは読み取り専用です。  
  
 次の例がこれらの各メソッドをインスタンス化するには、<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャの書式指定規則を表すオブジェクト。 オブジェクトは読み取り専用かどうかを示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create2.cs#4)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create2.vb#4)]  
  
 書き込み可能なを作成する<xref:System.Globalization.DateTimeFormatInfo>以下の方法のいずれかで現在のスレッド カルチャの規則を表すオブジェクト。  
  
-   取得することによって、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトの 3 つの方法は前と呼び出しのいずれかで、<xref:System.Globalization.DateTimeFormatInfo.Clone%2A>メソッドで返された<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 元のコピーが作成<xref:System.Globalization.DateTimeFormatInfo>点を除いて、オブジェクト、<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>プロパティは`false`します。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>を作成する方法、<xref:System.Globalization.CultureInfo>を使用して、現在のカルチャを表すオブジェクトをその<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティを取得する、<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。  
  
 次の例は、読み取り/書き込みをインスタンス化するには、各方法を示しています。<xref:System.Globalization.DateTimeFormatInfo>オブジェクトとの値を表示します。 その<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>プロパティ。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate2.cs#7)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate2.vb#7)]  
  
 Windows ユーザーをオーバーライドできますの一部、<xref:System.Globalization.DateTimeFormatInfo>プロパティ値の書式設定と解析を介した操作で使用される、**地域と言語**コントロール パネルの アプリケーション。 たとえば、カルチャが英語 (米国) は、ユーザーは、(形式 h:mm:ss tt) で既定の 12 時間制ではなく時刻の値 (HH:mm:ss 形式) で 24 時間制を使用して時間を表示することもできます。 <xref:System.Globalization.DateTimeFormatInfo>説明した方法で取得したオブジェクト以前すべて反映これらのユーザー上書きします。 これが望ましくない場合は作成できます、<xref:System.Globalization.NumberFormatInfo>ユーザーを反映していないオブジェクトよりも優先されます (およびは読み取り専用ではなく読み取り/書き込みでも) 呼び出すことによって、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>コンス トラクターとの値を提供する`false`の`useUserOverride`引数。 次の例を示していますこのシステムの現在のカルチャが英語 (米国) と長い時刻パターンを持つが HH:mm:ss に h:mm:ss tt の既定値から変更されました。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate3.cs#8)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate3.vb#8)]  
  
<a name="dynamic"></a>   
## <a name="datetimeformatinfo-and-dynamic-data"></a>DateTimeFormatInfo と動的データ  
 カルチャに固有のデータによって提供される日付と時刻の値の書式設定を<xref:System.Globalization.DateTimeFormatInfo>クラスは動的で提供されるデータはカルチャと同じように、<xref:System.Globalization.CultureInfo>クラス。 値の安定性に関する想定をする必要がありますいない<xref:System.Globalization.DateTimeFormatInfo>オブジェクトが関連付けられている特定<xref:System.Globalization.CultureInfo>オブジェクト。 インバリアント カルチャとそれに関連付けられたによって提供されるデータのみ<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは安定しています。 アプリケーション セッション間で、またはアプリケーションの実行中にも、その他のデータを変更できます。 変更の 4 つの主要なソースがあります。  
  
-   システムの更新プログラム。 時間の経過と共に優先のカレンダーまたはよく使用される日付と時刻の形式などのカルチャの設定を変更します。 Windows 更新プログラムにはへの変更が含まれています、これが発生したとき、<xref:System.Globalization.DateTimeFormatInfo>特定のカルチャのプロパティの値。  
  
-   置換カルチャ。 <xref:System.Globalization.CultureAndRegionInfoBuilder>既存のカルチャのデータを置換するクラスを使用できます。  
  
-   プロパティ値に対する変更を連鎖します。 これにより、実行時にさまざまなカルチャ関連のプロパティを変更できます<xref:System.Globalization.DateTimeFormatInfo>データを変更します。 たとえば、プログラム、またはユーザーの操作によっては、現在のカルチャを変更できます。 このような場合、<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>プロパティは、現在のカルチャに関連付けられているオブジェクトに変更します。 同様に、カルチャの暦変更できますが、変更が発生するさまざまな<xref:System.Globalization.DateTimeFormatInfo>プロパティの値。  
  
-   ユーザー設定。 アプリケーションのユーザーの一部のコントロール パネルの 地域と言語のオプションを使って現在のシステム カルチャに関連付けられている値をオーバーライドすることもできます。 たとえば、ユーザーは、別の形式で日付を表示することもできます。 場合、<xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>プロパティに設定されて`true`のプロパティ、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは、ユーザーの設定からも取得されます。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、<xref:System.Globalization.CultureInfo>オブジェクト (選択したカレンダーでないによって示される予定表のいずれかの場合など、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>プロパティ)、メソッドとプロパティの値の結果定義されていません。  
  
 すべてのユーザーがオーバーライドできるプロパティの一貫性のないデータの可能性を最小限に抑える、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは、オブジェクトの作成時に初期化されます。 可能性があるが、不整合のため、オブジェクトの作成も、ユーザー オーバーライドのプロセスがアトミックとオブジェクトの作成中に、関連する値を変更することができます。 ただし、このような状況は非常にまれなはずです。  
  
 ユーザー オーバーライドを反映するかどうかを制御する<xref:System.Globalization.DateTimeFormatInfo>のシステム カルチャと同じカルチャを表すオブジェクト。 次の表に、方法、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトを取得して、結果のオブジェクトがユーザー オーバーライドを反映するかどうかを示します。  
  
|CultureInfo と DateTimeFormatInfo オブジェクトのソース|ユーザー オーバーライドが反映されます。|  
|---------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.DateTimeFormat` プロパティ|はい|  
|<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> プロパティ|はい|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> メソッド|はい|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> メソッド|いいえ|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> コンストラクター|はい|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> コンストラクター|値に依存`useUserOverride`パラメーター|  
  
 使用する場合、ユーザー オーバーライドを尊重する必要がありますそれ以外の場合は特別な理由がある場合を除き、<xref:System.Globalization.DateTimeFormatInfo>を書式設定し、ユーザー入力を解析またはデータを表示するクライアント アプリケーション内のオブジェクト。 サーバー アプリケーションまたは自動アプリケーションは、する必要がありますされません。 ただし、使用する場合、<xref:System.Globalization.DateTimeFormatInfo>いずれかのオブジェクトを明示的または暗黙的に文字列の形式で日付と時刻のデータを保持するには、するには使用するか、<xref:System.Globalization.DateTimeFormatInfo>インバリアント カルチャの書式設定規則を反映するオブジェクトを指定する必要があります、カスタムの日付と時刻は、カルチャに関係なく使用する文字列を書式設定します。  
  
<a name="Formatting_dates_times"></a>   
## <a name="formatting-dates-and-times"></a>日付と時刻の書式設定  
 A<xref:System.Globalization.DateTimeFormatInfo>オブジェクトはすべての日付と時刻の書式設定操作で暗黙的または明示的が使用されます。 次のメソッドの呼び出しが含まれます。  
  
-   すべての日付と時刻の書式指定メソッドがなど<xref:System.DateTime.ToString?displayProperty=nameWithType>と<xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=nameWithType>します。  
  
-   主要な複合書式指定メソッドである<xref:System.String.Format%2A?displayProperty=nameWithType>します。  
  
-   書式指定メソッドがなどその他の複合<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>と<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>します。  
  
 すべての日付と時刻の書式設定の操作を使用して、<xref:System.IFormatProvider>実装します。 <xref:System.IFormatProvider>インターフェイスには、1 つのメソッドが含まれています。<xref:System.IFormatProvider.GetFormat%28System.Type%29?displayProperty=nameWithType>します。 このコールバック メソッドに渡されますが、<xref:System.Type>書式設定情報を提供するために必要な型を表すオブジェクト。 メソッドは、その型のインスタンスを返しますまたは`null`型のインスタンスを提供できない場合。 .NET Framework には、2 つが含まれます<xref:System.IFormatProvider>日付と時刻の書式設定の実装。  
  
-   <xref:System.Globalization.CultureInfo>を特定のカルチャ (または特定の国/地域で特定の言語) を表すクラス。 日付と時刻の操作、書式設定で、<xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType>メソッドが返す、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトに関連付けられているその<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ。  
  
-   <xref:System.Globalization.DateTimeFormatInfo>クラスを関連付けられているカルチャの書式指定規則に関する情報を提供します。 <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A?displayProperty=nameWithType>メソッド自体のインスタンスを返します。  
  
 場合、<xref:System.IFormatProvider>実装が指定されていない書式設定メソッドを明示的に、<xref:System.Globalization.CultureInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>現在のスレッド カルチャを表すプロパティを使用します。  
  
 次の例の間のリレーションシップを示しています、<xref:System.IFormatProvider>インターフェイスと<xref:System.Globalization.DateTimeFormatInfo>書式設定操作でのクラス。 カスタム定義<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドは、書式設定操作によって要求されたオブジェクトの種類を表示します。 要求している場合、<xref:System.Globalization.DateTimeFormatInfo>オブジェクト、メソッドでは、<xref:System.Globalization.DateTimeFormatInfo>の現在のスレッド カルチャ オブジェクト。 例を示しますから出力として、<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッド要求を<xref:System.Globalization.DateTimeFormatInfo>オブジェクトを書式設定情報を提供する、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッド要求<xref:System.Globalization.NumberFormatInfo>と<xref:System.Globalization.DateTimeFormatInfo>オブジェクトだけでなく、 <xref:System.ICustomFormatter>実装です。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/formatprovider1.cs#9)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/formatprovider1.vb#9)]  
  
## <a name="format-strings-and-datetimeformatinfo-properties"></a>書式指定文字列と DateTimeFormatInfo のプロパティ  
 <xref:System.Globalization.DateTimeFormatInfo>オブジェクトには書式設定の日付と時刻の値を持つ操作で使用されるプロパティの 3 種類が含まれています。  
  
-   カレンダーに関連するプロパティです。 などのプロパティ<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>、 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>、 <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>、および<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>で定義されている、カルチャによって使用されるカレンダーに関連付けられている、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティ。 これらのプロパティは、長い形式の日付が使用され、時刻形式。  
  
-   標準に定義された結果文字列を生成するプロパティです。 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>、 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>、および<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>プロパティは、国際標準で定義された結果文字列を生成するカスタム書式指定文字列を含めることができます。 これらのプロパティは読み取り専用と、変更することはできません。  
  
-   カルチャに依存する結果の文字列を定義するプロパティ。 一部のプロパティなど<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>と<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>、含めることが[カスタム書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)結果文字列の形式を指定します。 他のユーザーなど<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>、 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>、 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>、および<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>カルチャに依存するシンボルまたは結果の文字列に含めることができる部分文字列を定義します。  
  
 [標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)"d"、"D"、"f"および"F"は、特定の対応するエイリアスなど、<xref:System.Globalization.DateTimeFormatInfo>パターンのプロパティの書式を設定します。 ほとんどの[カスタム日付/時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)に関連する結果のストリームに書式設定操作を挿入する文字列または部分文字列。 次の表は、標準およびカスタムの日付と時刻の書式指定子とそれに関連付けられた<xref:System.Globalization.DateTimeFormatInfo>プロパティ。 これらを使用する方法の詳細については、指定子を書式設定を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)します。 各標準書式指定文字列に対応しています、<xref:System.Globalization.DateTimeFormatInfo>プロパティの値がカスタムの日時書式指定文字列。 このカスタム書式指定文字列の個々 の指定子は、さらに他の対応<xref:System.Globalization.DateTimeFormatInfo>プロパティ。 テーブルだけを表示、<xref:System.Globalization.DateTimeFormatInfo>プロパティを標準書式指定文字列エイリアス、およびはリスト プロパティではなくこれらの別名のプロパティに割り当てられているカスタム書式指定文字列でアクセスする可能性が。 さらに、テーブルの一覧に対応するカスタム書式指定子のみ<xref:System.Globalization.DateTimeFormatInfo>プロパティ。  
  
|書式指定子|関連付けられたプロパティ|  
|----------------------|---------------------------|  
|"d"(短い形式の日付は標準書式指定文字列)。|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>、全体的な結果の文字列の形式を定義します。|  
|"D"(長い形式の日付は標準書式指定文字列)。|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>、全体的な結果の文字列の形式を定義します。|  
|"f"(完全な日付/時間は標準の短い書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>、結果の文字列の日付部分の形式を定義します。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>、結果文字列の時刻要素の形式を定義します。|  
|"F"(完全な日付と長い時刻は標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>、結果の文字列の日付部分の形式を定義します。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>、結果文字列の時刻要素の形式を定義します。|  
|"g"(一般の日付と短い形式の時刻は標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>、結果の文字列の日付部分の形式を定義します。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>、結果文字列の時刻要素の形式を定義します。|  
|"G"(一般の日付/時間の長い時間は標準書式指定文字列)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>、結果の文字列の日付部分の形式を定義します。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>、結果文字列の時刻要素の形式を定義します。|  
|"M"、"m"(月/日は標準書式指定文字列)。|<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>、全体的な結果の文字列の形式を定義します。|  
|"O"、"o"(ラウンド トリップ日付/時刻は標準書式指定文字列)|なし。|  
|"R"、"r"(RFC1123) 標準書式指定文字列|<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>、RFC 1123 標準に準拠している結果の文字列を定義します。 プロパティは読み取り専用です。|  
|"s"(並べ替え可能な日付/時刻は標準書式指定文字列)。|<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>、ISO 8601 標準に準拠している結果の文字列を定義します。 プロパティは読み取り専用です。|  
|"t"(短い形式の時刻は標準書式指定文字列)。|<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>、全体的な結果の文字列の形式を定義します。|  
|"T"(長時間は標準書式指定文字列)。|<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>、全体的な結果の文字列の形式を定義します。|  
|"u"(ユニバーサル並べ替え可能な日付/時刻は標準書式指定文字列)。|<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>、協定世界時の ISO 8601 標準に準拠している結果の文字列を定義します。 プロパティは読み取り専用です。|  
|"U"(ユニバーサルの完全な日付/時刻は標準書式指定文字列)。|<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>、全体的な結果の文字列の形式を定義します。|  
|"Y"、"y"(年、月は標準書式指定文字列)。|<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>、全体的な結果の文字列の形式を定義します。|  
|"ddd"(カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>、週の曜日の省略名を結果の文字列に含める。|  
|"g"、"gg"(カスタム書式指定子)|呼び出し、<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>結果の文字列に時代 (年号) の名前を挿入します。|  
|"MMM"(カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>、結果の文字列に月の省略名を含めます。|  
|"MMMM"(カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> または<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>結果の文字列に完全な月名を含めます。|  
|"t"(カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> または<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>結果の文字列に AM/PM 指定子の最初の文字を含める。|  
|"tt"(カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> または<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>結果の文字列に完全な AM/PM 指定子を含める。|  
|":"(カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>、結果の文字列に時刻の区切り記号を含める。|  
|「/」(カスタム書式指定子)|<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>、結果の文字列の日付の区切り記号を含める。|  
  
<a name="Modifying"></a>   
## <a name="modifying-datetimeformatinfo-properties"></a>DateTimeFormatInfo のプロパティを変更します。  
 書き込み可能な関連プロパティを変更して、日付と時刻の書式指定文字列によって生成される結果文字列を変更する<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 あるかどうかを<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは、書き込み可能な使用、<xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A>プロパティ。 カスタマイズする、<xref:System.Globalization.DateTimeFormatInfo>この方法でオブジェクト。  
  
1.  読み取り/書き込みコピーを作成、<xref:System.Globalization.DateTimeFormatInfo>書式指定規則を変更するオブジェクト。 (を参照してください、 [DateTimeFormatInfo オブジェクトをインスタンス化する](#instantiating)セクションです)。  
  
2.  プロパティまたは目的の結果文字列を生成するために使用されるプロパティを変更します。 (どのように書式設定メソッドの使用については<xref:System.Globalization.DateTimeFormatInfo>結果の文字列を定義するプロパティは、前のセクションをご覧ください[書式指定文字列と DateTimeFormatInfo のプロパティ](#format-strings-and-datetimeformatinfo-properties)。)。  
  
3.  ユーザー設定を使用して、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトとして作成した、<xref:System.IFormatProvider>書式指定メソッドの呼び出しで引数。  
  
 結果文字列の形式を変更するその他の 2 つの方法はあります。  
  
-   使用することができます、 <xref:System.Globalization.CultureAndRegionInfoBuilder> (一意の名前を持つし、既存のドキュメントを補足するカルチャのカルチャ) のカスタム カルチャまたは置換カルチャ (1 つは、特定のカルチャではなく) のいずれかを定義するクラス。 保存でき、いずれかと、このカルチャをプログラムでアクセス<xref:System.Globalization.CultureInfo>.NET Framework でサポートされているオブジェクト。  
  
-   結果の文字列がカルチャに依存する、定義済みの形式に従っていない場合は、カスタムの日時書式指定文字列を使用することができます。 たとえば、YYYYMMDDHHmmss の形式で日付と時刻のデータをシリアル化する場合生成できます結果の文字列をカスタム書式指定文字列を渡すことによって、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>メソッド、およびするが、結果の文字列に変換できるに戻る、<xref:System.DateTime>呼び出すことによって値、<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>メソッド。  
  
### <a name="changing-the-short-date-pattern"></a>短い日付パターンを変更します。  
 次の例では、"d"(短い形式の日付) の標準書式指定文字列によって生成された結果文字列の形式を変更します。 関連付けられている変更<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>EN-US または英語 (米国) カルチャを"m/d/yyyy"の既定値からプロパティ"yyyy'-"MM"-"dd"と"d"標準書式指定文字列の前に、と後の日付を表示する使用、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>プロパティは、変更されました。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example1.cs#10)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example1.vb#10)]  
  
### <a name="changing-the-date-separator-character"></a>日付の区切り記号を変更します。  
 次の例で、日付の区切り記号の変更、 <xref:System.Globalization.DateTimeFormatInfo> FR-FR カルチャの書式指定規則を表すオブジェクト。 例では前に、と後の日付を表示する"g"標準書式指定文字列を使用して、<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>プロパティを変更します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example3.cs#12)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example3.vb#12)]  
  
### <a name="changing-day-name-abbreviations-and-the-long-date-pattern"></a>曜日の省略名と、長い日付パターンを変更します。  
 場合によっては、通常、丸 1 日と月の名前と月と年の日付の数が表示されます、長い日付パターンは長すぎる可能性があります。 次の例では、数字の後に 1 つの文字または 2 桁の日名の省略形、月名の省略形、および年を返す EN-US カルチャの長い日付パターンが短くなります。 これは、短いに省略日名を割り当てることで、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>配列、およびに割り当てられているカスタム書式指定文字列を変更すること、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>プロパティ。 これは、"D"によって返される結果の文字列と"f"標準書式指定文字列に影響します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example2.cs#13)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example2.vb#13)]  
  
 通常、変更を<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>プロパティに影響することも、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>プロパティで、さらに、"F"標準書式指定文字列によって返される結果の文字列を定義します。 例を元の完全な日付と時刻のパターンを維持するに割り当てられている元のカスタム書式指定文字列を再割り当て、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>プロパティの後、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>プロパティを変更します。  
  
### <a name="changing-from-a-12-hour-clock-to-a-24-hour-clock"></a>12 時間制から 24 時間制に変更します。  
 .NET framework カルチャの数、時間は 12 時間制および午前/午後を使用して表されます。 次の例では、定義、 `ReplaceWith24HourClock` 24 時間制を使用する形式を 12 時間制を使用している時刻の形式に置換するメソッド。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example5.cs#14)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example5.vb#14)]  
  
 例では、正規表現を使用して、書式指定文字列を変更します。 正規表現パターン`@"^(?<openAMPM>\s*t+\s*)? (?(openAMPM) h+(?<nonHours>[^ht]+)$ | \s*h+(?<nonHours>[^ht]+)\s*t+)`が次のように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`^`|文字列の先頭から照合を開始します。|  
|`(?<openAMPM>\s*t+\s*)?`|0 または 1 個の一致に出現する 0 個以上の空白文字は文字と文字のいずれかの"t"、または 0 個以上の空白文字の後に他にも。 このキャプチャ グループの名前は`openAMPM`します。|  
|`(?(openAMPM) h+(?<nonHours>[^ht]+)$`|場合、`openAMPM`グループと一致するには、"h"も"t"である 1 つ以上の文字の後に 1 つまたは複数回、"h"の文字に一致します。 一致は、文字列の末尾で終了します。 "H"が名前付きキャプチャ グループに追加された後にキャプチャされたすべての文字`nonHours`します。|  
|`&#124; \s*h+(?<nonHours>[^ht]+)\s*t+)`|場合、`openAMPM`グループが、一致しない、文字"h"の後ろに 1 つまたは複数の文字"h"も"t"である 1 つ以上の時間が続く 0 個以上の空白文字と一致します。 最後に、文字"t"の 1 つ以上の出現に一致します。 空白文字と"t"という名前のキャプチャ グループに含める前に、"h"の後にキャプチャされたすべての文字`nonHours`します。|  
  
 `nonHours`キャプチャ グループと含まれ、1 分可能性があります、カスタムの日付と時刻の形式の文字列の 2 番目のコンポーネントと共に、区切り記号。 置換パターン`HH${nonHours}`これらの要素には、"HH"部分文字列の前に付加します。  
  
### <a name="displaying-and-changing-the-era-in-a-date"></a>表示して、日付の時代 (年号) を変更します。  
 次の例では、"g"カスタム書式指定子を<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>EN-US カルチャの書式指定規則を表すオブジェクトのプロパティ。 この追加は、次の 3 つの標準書式指定文字列に影響します。  
  
-   直接マップされます (長い形式の日付) の"D"標準書式指定文字列、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>プロパティ。  
  
-   "F"(完全な日付/時間の短い) 標準書式指定文字列は、によって生成された部分文字列を連結した結果の文字列を生成、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>と<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>プロパティ。  
  
-   "F"(完全な日付/時間の長い時間) に直接マップされる標準書式指定文字列、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>プロパティ。 連結することによって動的に生成されるため、このプロパティの値を明示的に設定します、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>と<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>プロパティ。  
  
 この例では、カレンダーが 1 つの時代 (年号) のカルチャの時代 (年号) の名前を変更する方法も示します。 ここでは、EN-US カルチャがによって表されるグレゴリオ暦のカレンダーを使用して、<xref:System.Globalization.GregorianCalendar>オブジェクト。 <xref:System.Globalization.GregorianCalendar>クラスは、西暦は名前が、1 つの時代をサポートしています。 (西暦)。 例は、紀元に時代 (年号) の名前を変更します。 (一般的な時代 (年号)) に割り当てられている書式指定文字列で"g"カスタム書式指定子を置き換えることで、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>リテラル文字列を持つプロパティです。 時代 (年号) の名前がによって通常返されるので、リテラル文字列の使用は、<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>から .NET Framework または Windows オペレーティング システムのいずれかで指定されたカルチャのテーブルでデータをプライベート メソッド。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example4.cs#11)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example4.vb#11)]  
  
## <a name="parsing-date-and-time-strings"></a>日付と時刻文字列の解析  
 解析の日付と時刻を文字列形式に変換する必要があります、<xref:System.DateTime>または<xref:System.DateTimeOffset>値。 これらの型の両方を含める、 `Parse`、 `TryParse`、 `ParseExact`、および`TryParseExact`解析操作をサポートするメソッド。 `Parse`と`TryParse`メソッドをさまざまな形式にできる文字列に変換が`ParseExact`と`TryParseExact`文字列が、定義された形式または形式があることが必要です。 解析操作が失敗した場合、`Parse`と`ParseExact`一方、例外はスロー`TryParse`と`TryParseExact`返す`false`します。  
  
 暗黙的または明示的に使用して解析メソッドを<xref:System.Globalization.DateTimeStyles>(先頭、末尾、または内部の空白文字) などのスタイル要素を決定する列挙値は、解析する文字列とが見つからないか、または解析された文字列を解釈する方法で使用可能要素。 指定しない場合、<xref:System.Globalization.DateTimeStyles>を呼び出すときの値、`Parse`または`TryParse`メソッドでは、既定値は<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType>を含む複合スタイルは、 <xref:System.Globalization.DateTimeStyles.AllowLeadingWhite?displayProperty=nameWithType>、 <xref:System.Globalization.DateTimeStyles.AllowTrailingWhite?displayProperty=nameWithType>、および<xref:System.Globalization.DateTimeStyles.AllowInnerWhite?displayProperty=nameWithType>フラグ。 `ParseExact`と`TryParseExact`メソッドでは、既定値は<xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>; 入力文字列が正確に特定のカスタム日付/時刻書式指定文字列に対応する必要があります。  
  
 解析メソッドも暗黙的または明示的に使用して、<xref:System.Globalization.DateTimeFormatInfo>パターンを特定のシンボルを定義するオブジェクトを解析する文字列で発生する可能性が。 指定しない場合、<xref:System.Globalization.DateTimeFormatInfo>オブジェクト、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトの現在のスレッド カルチャが既定で使用されます。 日付と時刻の文字列の解析の詳細についてなど、個々 の解析メソッドを参照してください<xref:System.DateTime.Parse%2A?displayProperty=nameWithType>、 <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>、 <xref:System.DateTimeOffset.ParseExact%2A?displayProperty=nameWithType>、および<xref:System.DateTimeOffset.TryParseExact%2A?displayProperty=nameWithType>します。  
  
 次の例では、解析の日付と時刻文字列のカルチャに依存する性質を示します。 EN-US、EN-GB、FR-FR、および fi FI カルチャの規則を使用して 2 つの日付文字列を解析しようとします。 8/18/2014 では EN-US として解釈される日付カルチャがスローされます、 <xref:System.FormatException> 18 が月の番号として解釈されるため、他の 3 つの例外がカルチャします。 2015 年 1 月 2 日は、EN-US カルチャでは、最初の月の 2 日目は残りのカルチャの 2 番目の月の最初の曜日として解析されます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parsing1.cs#15)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parsing1.vb#15)]  
  
 2 つの理由は、日付と時刻文字列は解析されます通常。  
  
-   日付と時刻の値にユーザー入力を変換します。  
  
-   日付と時刻の値をラウンドト リップさせるつまり、文字列としてシリアル化された以前の日付と時刻の値を逆シリアル化します。  
  
 次のセクションには、さらに詳しくこれら 2 つの操作について説明します。  
  
### <a name="parsing-user-strings"></a>ユーザー文字列の解析  
 常にインスタンス化する必要がありますユーザーによって入力された日付と時刻の文字列を解析するときに、<xref:System.Globalization.DateTimeFormatInfo>など、カスタマイズを行った可能性のあるユーザーのユーザーのカルチャ設定を反映するオブジェクト。 それ以外の場合、日付と時刻のオブジェクトには、値が正しくない場合があります。 インスタンスを作成する方法については、<xref:System.Globalization.DateTimeFormatInfo>ユーザーのカルチャのカスタマイズを反映するオブジェクトを参照してください、 [DateTimeFormatInfo と動的データ](#dynamic)セクション。  
  
 次の例は、ユーザーのカルチャ設定を反映する解析操作とにはない 1 つの違いを示しています。 ここでは、システムの既定のカルチャが EN-US では、ユーザーがコントロール パネル を使用している**地域と言語**"yy MM dd"に"m/d/yyyy"の既定値から短い日付パターンを変更します。 ときにユーザーが、ユーザー設定を反映する文字列を入力し、によって文字列が解析、<xref:System.Globalization.DateTimeFormatInfo>も (上書き) のユーザー設定が反映されているオブジェクトが解析操作が正しい結果を返します。 ただし、文字列の解析時で、<xref:System.Globalization.DateTimeFormatInfo>標準的な EN-US カルチャ設定、解析メソッドでのスローを表すオブジェクトを<xref:System.FormatException>例外が解釈されるため 14 として、月、数年の最後の 2 つの桁されません。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parse2.cs#16)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parse2.vb#16)]  
  
### <a name="serializing-and-deserializing-date-and-time-data"></a>シリアル化して、日付と時刻のデータを逆シリアル化  
 シリアル化された日付と時刻のデータをラウンドト リップ; に予想されます。つまり、すべてシリアル化し、逆シリアル化された値が同じであります。 日付と時刻の値が特定の時点を表している場合、逆シリアル化された値は、カルチャまたは復元されたシステムのタイム ゾーンに関係なくの同じ時点を表す必要があります。 ラウンド トリップ日付と時刻のデータを正常にする必要があります規則を使用する、によって返されるインバリアント カルチャの<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>プロパティを生成し、データを解析します。 書式設定と解析操作では、既定のカルチャの規則は反映されませんする必要があります。 データの移植性が厳密に制限されます。 既定のカルチャ設定を使用する場合特定のカルチャ設定がシリアル化されたスレッドのものと同じスレッドでのみ正常に逆シリアル化ができます。 場合によっては、つまりデータことはできませんもが正常にシリアル化、同じシステムで逆シリアル化します。  
  
 日付と時刻の値の時刻部分が重要な場合はもが UTC に変換して、"o"または"r"を使用してシリアル化[標準書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)します。 解析メソッドと、インバリアント カルチャとしてと共に、適切な形式文字列を渡して呼び出すことによって、時刻のデータを復元できます、`provider`引数。  
  
 次の例では、日付と時刻の値のラウンド トリップのプロセスを示します。 米国の監視システム上の日時をシリアル化します。太平洋標準時と現在のカルチャが en-us (英語)。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize1.cs#17)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize1.vb#17)]  
  
 ブリュッセル、コペンハーゲン、マドリード、パリのタイム ゾーンのシステム上でデータを逆シリアル化して、現在のカルチャが個 復元された日付は 9 個の時間を UTC より 8 時間から UTC より 1 時間のタイム ゾーン調整を反映する元の日付よりも後。 元の日付と復元の日付の両方の同じ時点を表します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize2.cs#18)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize2.vb#18)]  
  
   
  
## Examples  
 次の例では、リフレクションを使用して、プロパティを取得、<xref:System.Globalization.DateTimeFormatInfo>の英語 (米国) カルチャ オブジェクト。 カスタム書式指定文字列を含むプロパティの値を表示し、書式設定された日付を表示するこれらの文字列を使用します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/format1.cs#5)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/format1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>カルチャに依存しない (インバリアントな) <see cref="T:System.Globalization.DateTimeFormatInfo" /> クラスの新しい書き込み可能インスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを作成、<xref:System.Globalization.DateTimeFormatInfo>インバリアント カルチャの日付と時刻の情報を表すオブジェクト。 作成する、<xref:System.Globalization.DateTimeFormatInfo>特定カルチャのオブジェクトを作成、<xref:System.Globalization.CultureInfo>カルチャ オブジェクトを取得、<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ。  
  
 プロパティ、<xref:System.Globalization.DateTimeFormatInfo>このコンス トラクターによって作成されたオブジェクトを変更できます。 ただし、変更することはできません、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティ、インバリアント カルチャがグレゴリオ暦のローカライズされたバージョンのみをサポートしているためです。 作成する、<xref:System.Globalization.DateTimeFormatInfo>固有のカレンダーを使用するオブジェクトをインスタンス化する必要があります、<xref:System.Globalization.CultureInfo>をサポートするオブジェクトをカレンダーにカレンダーを割り当てる、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>のプロパティ、<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedDayNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedDayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>曜日を表すカルチャ固有の省略名を格納している型 <see cref="T:System.String" /> の 1 次元配列を取得または設定します。</summary>
        <value>曜日を表すカルチャ固有の省略名を格納している型 <see cref="T:System.String" /> の 1 次元配列。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の配列は、"Sun"、"Mon"、"Tue"、"Wed"、"Thu"、"Fri"、および "Sat" を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定する場合、配列は 1 次元に指定する必要があり、正確に 7 つの要素があります。 最初の要素 (インデックス 0 位置にある要素) で定義されているカレンダーにおける週の最初の日を表す、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティ。  
  
 カスタム書式指定文字列には、"ddd"書式指定子が含まれている場合、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>または<xref:System.DateTimeOffset.ToString%2A>メソッドには適切なメンバーが含まれています、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>配列で、結果の文字列"ddd"の代わりにします。  
  
 このプロパティは影響を受けた場合の値、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの変更。 場合、選択した<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>サポートの簡略化された曜日名ではなく、配列には、完全な曜日名が含まれています。  
  
   
  
## Examples  
 次の例では、読み取り/書き込み<xref:System.Globalization.CultureInfo>オブジェクトが、英語 (米国) カルチャを表す省略曜日名をその<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>プロパティ。 次に、"ddd"書式指定子を使用して、1 週間の 2014 年 5 月 28 日以降の日付の文字列表現を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/cs/abbreviateddaynames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/vb/abbreviateddaynames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが、多次元配列または配列長が厳密に 7 ではない配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedMonthGenitiveNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられた月の省略名の文字列配列を取得または設定します。</summary>
        <value>月の省略名の文字列配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一部の言語で属の場合は、日付の一部である月の名前が表示されます。 たとえば、RU-RU またはロシア語 (ロシア) カルチャの日付は、1 日数と 1 Января (1 年 1 月) など、属月の名前で構成されます。 これらのカルチャでは、カスタム書式指定文字列には、"MMM"書式指定子が含まれている場合、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>または<xref:System.DateTimeOffset.ToString%2A>メソッドには適切なメンバーが含まれています、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>結果の文字列に"MMM"の代わりに配列。  
  
 設定操作では、配列を厳密に 13 の要素を持つ 1 次元にある必要がありますので<xref:System.Globalization.Calendar>オブジェクトが 13 の月のカレンダーに対応します。 12 か月間にある予定表、13 番目の要素がする必要があります<xref:System.String.Empty?displayProperty=nameWithType>します。 最初の要素 (インデックス 0 位置にある要素) によって定義された年の最初の月を表す、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティ。  
  
 設定した場合、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>プロパティを設定する必要も、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>プロパティ。  
  
   
  
## Examples  
 次の例では、読み取り/書き込み<xref:System.Globalization.CultureInfo>オブジェクトが、英語 (米国) カルチャを表す省略属月名をその<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>と<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>プロパティ。 カルチャのサポートされているカレンダーで 1 か月あたりの月の省略名を含む日付の文字列表現が表示されます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で、配列が多次元であるか、長さが厳密に 13 ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で、配列または配列の要素の 1 つが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">set 操作において、現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedMonthNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>月を表すカルチャ固有の省略名を格納している 1 次元配列を取得または設定します。</summary>
        <value>月を表すカルチャ固有の省略名を格納している、13 個の要素を持つ 1 次元配列。 12 か月の暦では、配列の 13 番目の要素は空の文字列になります。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の配列は、"Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"、"Oct"、"Nov"、"Dec"、および "" を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定する場合、配列は 1 次元で厳密に 13 個の要素である必要があります。 <xref:System.Globalization.Calendar> オブジェクトでは、13 の月のカレンダーに対応します。 最初の要素 (インデックス 0 位置にある要素) によって定義された年の最初の月を表す、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティ。  
  
 設定した場合、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>プロパティを設定する必要も、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>プロパティ。 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>と<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>次の書式指定文字列を使用して日付の書式を設定するプロパティを使用します。  
  
-   標準の日付と時刻の書式指定文字列のエイリアス、カスタムの書式設定"MMM"を含む文字列書式指定子。  
  
-   カスタム日時書式指定文字列を含む"MMM"は書式指定子です。  
  
 このプロパティは影響を受けた場合の値、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの変更。 場合、選択した<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>サポートの簡略化された月名ではなく、配列には、完全な月の名前が含まれています。  
  
   
  
## Examples  
 次の例では、読み取り/書き込み<xref:System.Globalization.CultureInfo>オブジェクトが、英語 (米国) カルチャを表す省略属月名をその<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>と<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A>プロパティ。 カルチャのサポートされる予定表の各月の省略名を含む日付の文字列表現が表示されます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが、多次元配列または配列長が厳密に 13 ではない配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      </Docs>
    </Member>
    <Member MemberName="AMDesignator">
      <MemberSignature Language="C#" Value="public string AMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property AMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AMDesignator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>"ante meridiem" (午前) の時間の文字列指定子を取得または設定します。</summary>
        <value>"ante meridiem" の時間の文字列指定子。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は "AM" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>プロパティが使用されるすべての時間 0:00:00 (午前 0 時) 11:59:59.999 までです。  
  
 カスタム書式指定文字列には、"tt"書式指定子が含まれており、正午より前、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>または<xref:System.DateTimeOffset.ToString%2A>メソッドには値が含まれています、<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>結果の文字列に"tt"の代わりにプロパティ。 カスタム書式指定文字列には、"t"カスタム書式指定子の最初の文字のみが含まれている場合、<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>プロパティの値が含まれています。 午前の区別を維持するために必要とする言語の場合、"tt"を使用する必要があります。 および p. m. 例としては、これで、日本語、午前 および p. m. 指定子は、最初の文字ではなく、2 番目の文字が異なります。  
  
 カルチャを a. m. を使用しません。 指定子は、このプロパティは、空の文字列を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar Calendar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); void set(System::Globalization::Calendar ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar with get, set" Usage="System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカルチャで使用する暦を取得または設定します。</summary>
        <value>現在のカルチャで使用する暦。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は <see cref="T:System.Globalization.GregorianCalendar" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティに関連付けられているカルチャの有効な予定表のみでは、<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>プロパティは、特定のカルチャで使用できる暦を指定し、<xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType>プロパティが、カルチャの既定の暦を指定します。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

このプロパティの値を変更する次のプロパティに影響を与えます<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>、 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>、 <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>、 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>、 <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A>、 <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A>、 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>、 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>、 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>、 <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A> 。、および<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>します。  
  
 たとえば、現在のスレッドのカルチャが日本語の場合は、このプロパティでは<xref:System.Globalization.JapaneseCalendar>、 <xref:System.Globalization.GregorianCalendarTypes.Localized> <xref:System.Globalization.GregorianCalendar>、または<xref:System.Globalization.GregorianCalendarTypes.USEnglish><xref:System.Globalization.GregorianCalendar>します。 ときに、<xref:System.Globalization.JapaneseCalendar>が使用される、既定の長い日付の指定子"gg y '\x5e74 AM' \x6708 が '\x65e5'"です。 ときに、 <xref:System.Globalization.GregorianCalendarTypes.Localized> <xref:System.Globalization.GregorianCalendar>、使用する既定の長い日付指定子は"yyyy '\x5e74 AM' \x6708 '\x65e5' が"。  
  
   
  
## Examples  
 次の例では、定義、`ChangeCalendar`現在の暦で既にある場合を除き、またはカルチャでサポートされていない場合に指定した暦のカルチャの現在の暦を変更する方法。 メソッドを呼び出すコードをインスタンス化、<xref:System.Globalization.CultureInfo>アラビア語 (エジプト) カルチャを表す、最初に日本語のカレンダーにその暦を変更しようとするオブジェクト。 メソッドを使用すると、和暦がサポートされていないため、カルチャの暦は変わりません。 ただし、ため、um のメンバーであるウムアルクラ暦、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>コレクション、メソッドが成功現在の暦を行う、AR-EG カルチャします。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/cs/CalendarTest1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/vb/CalendarTest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、現在のカルチャでは有効でない <see cref="T:System.Globalization.Calendar" /> オブジェクトに設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="CalendarWeekRule">
      <MemberSignature Language="C#" Value="public System.Globalization.CalendarWeekRule CalendarWeekRule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarWeekRule CalendarWeekRule" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberSignature Language="VB.NET" Value="Public Property CalendarWeekRule As CalendarWeekRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CalendarWeekRule CalendarWeekRule { System::Globalization::CalendarWeekRule get(); void set(System::Globalization::CalendarWeekRule value); };" />
      <MemberSignature Language="F#" Value="member this.CalendarWeekRule : System.Globalization.CalendarWeekRule with get, set" Usage="System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarWeekRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>年の最初の週を判断するために使用する規則を指定する値を取得または設定します。</summary>
        <value>年の最初の週を決定する値。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは影響を受けた場合の値、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの変更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが有効な <see cref="T:System.Globalization.CalendarWeekRule" /> 値ではない値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">set 操作において、現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用です。</exception>
        <altmember cref="T:System.Globalization.CalendarWeekRule" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="dateTimeFormatInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Globalization.DateTimeFormatInfo" /> の簡易コピーを作成します。</summary>
        <returns>元の <see cref="T:System.Globalization.DateTimeFormatInfo" /> からコピーされた新しい <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クローンが書き込み可能な場合でも、元の<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは読み取り専用です。 そのため、ユーザー定義のパターンを使用、複製のプロパティを変更できます。  
  
 オブジェクトのシャロー コピーは、のみ、オブジェクトのコピーです。 オブジェクトに他のオブジェクトへの参照が含まれている場合、シャロー コピーは、参照されるオブジェクトのコピーを作成できません。 元のオブジェクトを代わりに参照します。 これに対し、オブジェクトのディープ コピーでは、オブジェクトのコピーと、直接または間接的には、そのオブジェクトが参照するすべてのコピーを作成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ CurrentInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカルチャに基づいて値を形式指定する読み取り専用 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトを取得します。</summary>
        <value>現在のスレッドに対する <see cref="T:System.Globalization.CultureInfo" /> オブジェクトに基づく読み取り専用の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>プロパティには、ユーザー オーバーライドが反映されます。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>プロパティを取得する、 <xref:System.Globalization.DateTimeFormatInfo> EN-US カルチャをここでは、現在のカルチャの書式指定規則を表すオブジェクト。 書式指定文字列と書式設定プロパティは 6 つの結果の文字列が表示されます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/cs/CurrentInfo1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/vb/CurrentInfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="DateSeparator">
      <MemberSignature Language="C#" Value="public string DateSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DateSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property DateSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DateSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateSeparator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>日付の構成要素、つまり年、月、および日を区切る文字列を取得または設定します。</summary>
        <value>日付の構成要素、つまり年、月、および日を区切る文字列。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は、"/" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタム書式指定文字列に「/」書式指定子が含まれている場合、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>メソッドの値を表示する<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>「/」の結果の文字列の代わりにします。  
  
 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>プロパティは、日付の区切り記号を置換する文字列を定義します (「/」カスタム日付/時刻書式指定子)、書式設定操作の結果の文字列にします。 日付の区切り記号の文字列は、解析操作でも定義します。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.Globalization.CultureInfo>オブジェクト、EN-US カルチャの変更をその日付の区切り記号"-"、"d"、"G"、"g"標準書式指定文字列を使用して日付を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/cs/dateseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/vb/dateseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="DayNames">
      <MemberSignature Language="C#" Value="public string[] DayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property DayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ DayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>曜日を表すカルチャ固有の完全名を格納する 1 次元の文字列配列を取得または設定します。</summary>
        <value>曜日を表すカルチャ固有の完全名を格納している 1 次元の文字列配列。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の配列は、"Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday"、および "Saturday" を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定する場合、配列は 1 次元に指定する必要があり、正確に 7 つの要素があります。 最初の要素 (インデックス 0 位置にある要素) で定義されているカレンダーにおける週の最初の日を表す、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティ。  
  
 カスタム書式指定文字列には、"dddd"書式指定子が含まれている場合、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>メソッドには、適切な値が含まれています<xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>メンバー結果の文字列に"dddd"の代わりにします。  
  
 このプロパティは影響を受けた場合の値、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの変更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが、多次元配列または配列長が厳密に 7 ではない配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="FirstDayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek FirstDayOfWeek { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek FirstDayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public Property FirstDayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek FirstDayOfWeek { DayOfWeek get(); void set(DayOfWeek value); };" />
      <MemberSignature Language="F#" Value="member this.FirstDayOfWeek : DayOfWeek with get, set" Usage="System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>週の最初の曜日を取得または設定します。</summary>
        <value>週の最初の日を表す列挙値。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は <see cref="F:System.DayOfWeek.Sunday" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは影響を受けた場合の値、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの変更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが有効な <see cref="T:System.DayOfWeek" /> 値ではない値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="FullDateTimePattern">
      <MemberSignature Language="C#" Value="public string FullDateTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property FullDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullDateTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FullDateTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>長い日付値と長い時刻値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>長い日付値と長い時刻値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "F"標準書式指定文字列は、エイリアス、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>プロパティ。 つまり、このプロパティに割り当てられているカスタム書式指定文字列は、"F"標準書式指定文字列の結果文字列の形式を定義します。 詳細については、次を参照してください。 [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)します。  
  
 値、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>プロパティは、連結することによって動的に生成される、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>と<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>プロパティは、スペースで区切られます。 この動的な割り当ては、次の条件が発生します。  
  
-   プロパティの値が前に取得された場合は、明示的に設定されました。  
  
-   ときの値、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>プロパティの変更。  
  
-   ときの値、<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>プロパティの変更。  
  
 このプロパティは影響を受けた場合の値、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの変更。  
  
   
  
## Examples  
 次の例の値を表示する<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CPP/dtfi_fulldatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CS/dtfi_fulldatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/VB/dtfi_fulldatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedDayName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedDayName(DayOfWeek dayofweek);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedDayName dayofweek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek"><see cref="T:System.DayOfWeek" /> 値。</param>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられたカルチャに基づいて、指定した曜日のカルチャ固有の省略名を返します。</summary>
        <returns><paramref name="dayofweek" /> が表す曜日のカルチャ固有の省略名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のインバリアント<xref:System.Globalization.DateTimeFormatInfo>オブジェクト、このメソッドから文字列を返します、 <xref:System.Globalization.GregorianCalendar>:  
  
|`dayofweek`|戻り値|  
|-----------------|------------------|  
|日曜日|"Sun"|  
|月曜日|"Mon"|  
|火曜日|"Tue"|  
|水曜日|"Wed"|  
|木曜日|"Thu"|  
|金曜日|"Fri"|  
|土曜日|"Sat"|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayofweek" /> は有効な <see cref="T:System.DayOfWeek" /> 値ではありません。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedEraName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedEraName(int era);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedEraName : int -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedEraName era" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">時代 (年号) を表す整数。</param>
        <summary>省略形が存在する場合は、指定した時代 (年号) の省略名を格納している文字列を返します。</summary>
        <returns>省略形が存在する場合は、指定した時代 (年号) の省略名を格納している文字列。  
  
または 
省略形が存在しない場合は、時代 (年号) の完全名を格納している文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時代 (年号) の名前は、予定表を使用して、固定小数点またはイベントから計算された期間に参照名です。 たとえば、「a. d.」 または「紀元」 構成のグレゴリオ暦カレンダーにおける現在の時代 (年号) です。  
  
 有効な値`era`記載されて、<xref:System.Globalization.Calendar.Eras%2A>適切なクラスのプロパティから派生した<xref:System.Globalization.Calendar>します。 例:<xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType>この実装でサポートされる時代 (年号) の一覧を表示します。  
  
 <xref:System.Globalization.JapaneseCalendar>クラス名、完全な時代 (年号) の名前の最初の文字は、省略された時代 (年号)。 この文字が英字の大文字 1 文字の省略形または漢字の 1 文字の省略形です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="era" /> が、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> プロパティで指定した暦の有効な時代 (年号) を表していません。</exception>
        <block subset="none" type="usage"><para>場合<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />は、<see cref="T:System.Globalization.TaiwanCalendar" />が、 <see cref="P:System.Threading.Thread.CurrentCulture" /> "ZH-TW"でしない<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />、 <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />、および<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />空の文字列が返されます ("")。</para></block>
        <altmember cref="T:System.Globalization.JapaneseCalendar" />
        <altmember cref="T:System.Globalization.TaiwanCalendar" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedMonthName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedMonthName(int month);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedMonthName : int -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedMonthName month" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">取得する月の名前を表す 1 ～ 13 の整数。</param>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられたカルチャに基づいて、指定した月のカルチャ固有の省略名を返します。</summary>
        <returns><paramref name="month" /> が表す月のカルチャ固有の省略名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のインバリアント<xref:System.Globalization.DateTimeFormatInfo>オブジェクト、このメソッドから文字列を返します、<xref:System.Globalization.GregorianCalendar>オブジェクト。  
  
|`month`|戻り値|  
|-------------|------------------|  
|1|"Jan"|  
|2|"Feb"|  
|3|"Mar"|  
|4|"Apr"|  
|5|"May"|  
|6|"Jun"|  
|7|"Jul"|  
|8|"Aug"|  
|9|"Sep"|  
|10|"Oct"|  
|11|"Nov"|  
|12|"Dec"|  
|13|""|  
  
 <xref:System.Globalization.Calendar> オブジェクトは、13 の月のカレンダーに対応できます。 12 か月の暦の場合は、13 番目の月の名前として空の文字列が常に返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> が 1 より小さいか、または 13 を超えています。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllDateTimePatterns">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>日時値を形式指定できる標準パターンを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns();" />
      <MemberSignature Language="F#" Value="member this.GetAllDateTimePatterns : unit -&gt; string[]" Usage="dateTimeFormatInfo.GetAllDateTimePatterns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>日時値を形式指定できるすべての標準パターンを返します。</summary>
        <returns>日時値を形式指定できる標準パターンを格納する配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、標準書式指定文字列に対応するすべてのカスタム書式指定文字列を含む配列を返します。 参照してください[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)に対して一連の標準書式指定文字列。  
  
 によって返される配列で、カスタム書式指定文字列を使用することができます、<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>書式設定操作でのメソッド。 ただし、この場合、日付と時刻の値の文字列表現返されたで書式設定操作常に解析できませんで正常に、`Parse`と`TryParse`メソッド。 カスタム書式指定文字列がによって返されるため、考えないで、<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>メソッドは、ラウンド トリップ日付と時刻の値を使用できます。 この問題を説明する例を次に示します。 取得、<xref:System.Globalization.DateTimeFormatInfo>イタリア (イタリア語) のカルチャの書式設定情報を含むオブジェクト。 によって返される配列内の各カスタム書式指定文字列を渡す、<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns>メソッドを<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>日付と時刻の文字列表現を作成します。 この例では呼び出すことによってこの値を解析を試みます、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッド。 例の出力が示すように日付が生成されないカスタム書式指定文字列の一部と時間はラウンドト リップで値を正常に。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex1.vb#1)]  
  
 いくつかの定義済みのカスタム形式で表現できる日時の文字列表現を解析するには、次の方法のいずれかを呼び出します。  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 によって返される配列内のカスタム書式指定文字列、<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>メソッドが対象のカルチャの現在の暦に依存、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトの書式情報を提供します。 予定表が変更された場合、このメソッドによって返される配列も変更されます。  
  
   
  
## Examples  
 次の例では、日付、インバリアント カルチャの書式指定文字列と書式指定文字列を使用すると、特定の日付の書式を設定することにすると生成される結果の文字列が表示されます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsinv.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsinv.vb#3)]  
  
 例では、インスタンス化、<xref:System.Globalization.DateTimeFormatInfo>呼び出すことによって、インバリアント カルチャを表すオブジェクトを<xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A>コンス トラクター。 これをも取得でした、<xref:System.Globalization.DateTimeFormatInfo>からインバリアント カルチャを表す、<xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns(char format);" />
      <MemberSignature Language="F#" Value="member this.GetAllDateTimePatterns : char -&gt; string[]" Usage="dateTimeFormatInfo.GetAllDateTimePatterns format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">標準書式指定文字列。</param>
        <summary>指定された標準書式指定文字列を使用して日時値を形式指定できるすべてのパターンを返します。</summary>
        <returns>指定された書式指定文字列を使用して日付と時刻の値を形式指定できる標準パターンを格納している配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、特定の標準書式指定文字列に対応するカスタム書式指定文字列を格納する配列を返します。 参照してください[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)に対して一連の標準書式指定文字列。  
  
 によって返される配列で、カスタム書式指定文字列を使用することができます、<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>書式設定操作でのメソッド。 ただし、この場合、日付と時刻の値の文字列表現返されたで書式設定操作常に解析できませんで正常に、`Parse`と`TryParse`メソッド。 カスタム書式指定文字列がによって返されるため、考えないで、<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>メソッドは、ラウンド トリップ日付と時刻の値を使用できます。 この問題を説明する例を次に示します。 取得、<xref:System.Globalization.DateTimeFormatInfo>ロシア (ロシア) カルチャの書式設定情報を含むオブジェクト。 呼び出す、<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%28System.Char%29>各標準書式指定文字列、および、パスの書式設定文字列を返される配列内の各カスタム メソッド、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>日付と時刻の文字列表現を作成します。 この例では呼び出すことによってこの値を解析を試みます、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッド。 例の出力が示すように日付が生成されないカスタム書式指定文字列の一部と時間はラウンドト リップで値を正常に。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex2.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex2.vb#2)]  
  
 いくつかの定義済みのカスタム形式で表現できる日時の文字列表現を解析するには、次の方法のいずれかを呼び出します。  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 によって返される配列内のカスタム書式指定文字列、<xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A>メソッドが対象のカルチャの現在の暦に依存、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトの書式情報を提供します。 予定表が変更された場合、このメソッドによって返される配列も変更されます。  
  
   
  
## Examples  
 次の例では、現在の暦の日付と時刻のパターンを表示します。  
  
 [!code-cpp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CS/source.cs#1)]
 [!code-vb[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="format" /> は有効な標準書式指定文字列ではありません。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayName">
      <MemberSignature Language="C#" Value="public string GetDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDayName(DayOfWeek dayofweek);" />
      <MemberSignature Language="F#" Value="member this.GetDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetDayName dayofweek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek"><see cref="T:System.DayOfWeek" /> 値。</param>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられたカルチャに基づいて、指定した曜日のカルチャ固有の完全名を返します。</summary>
        <returns><paramref name="dayofweek" /> が表す曜日のカルチャ固有の完全名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のインバリアント<xref:System.Globalization.DateTimeFormatInfo>オブジェクト、このメソッドから文字列を返します、<xref:System.Globalization.GregorianCalendar>オブジェクト。  
  
|`dayofweek`|戻り値|  
|-----------------|------------------|  
|日曜日|"Sunday"|  
|月曜日|"Monday"|  
|火曜日|"Tuesday"|  
|水曜日|"Wednesday"|  
|木曜日|"Thursday"|  
|金曜日|"Friday"|  
|土曜日|「土曜日」|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayofweek" /> は有効な <see cref="T:System.DayOfWeek" /> 値ではありません。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public int GetEra (string eraName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetEra(string eraName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEra (eraName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetEra(System::String ^ eraName);" />
      <MemberSignature Language="F#" Value="member this.GetEra : string -&gt; int" Usage="dateTimeFormatInfo.GetEra eraName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eraName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eraName">時代 (年号) の名前を格納している文字列。</param>
        <summary>指定した時代 (年号) を表す整数を返します。</summary>
        <returns><paramref name="eraName" /> が有効な場合は時代 (年号) を表す整数。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時代 (年号) の名前は、予定表を使用して、固定小数点またはイベントから計算された期間に参照名です。 たとえば、「a. d.」 または「紀元」 構成のグレゴリオ暦カレンダーにおける現在の時代 (年号) です。  
  
 比較した結果`eraName`は大文字と小文字は、たとえば、「a. d.」 「a. d.」と同じです。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 場合にのみ省略時代 (年号) の名前に区切り記号は無視されます、<xref:System.Globalization.GregorianCalendar>でが選択されている<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>カルチャが「a. d.」を使用して 時代 (年号) の名前、つまり「a. d.」として "AD"と同じです。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 比較`eraName`によって返される完全な時代 (年号) の名前を持つ<xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A>によって返される省略形の時代 (年号) の名前を使用して<xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A>します。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

## Examples  
 例を次に示します<xref:System.Globalization.DateTimeFormatInfo>暦はグレゴリオ暦とカルチャが「a. d.」の時代 (年号) の名前を使用している場合にのみ、時代 (年号) の名前で句読点を無視します。  
  
 [!code-cpp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CPP/gregorian_getera.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CS/gregorian_getera.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/VB/gregorian_getera.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="eraName" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="GetEraName">
      <MemberSignature Language="C#" Value="public string GetEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEraName(int era);" />
      <MemberSignature Language="F#" Value="member this.GetEraName : int -&gt; string" Usage="dateTimeFormatInfo.GetEraName era" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">時代 (年号) を表す整数。</param>
        <summary>指定した時代 (年号) の名前を格納している文字列を返します。</summary>
        <returns>時代 (年号) の名前を格納している文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時代 (年号) の名前は、予定表を使用して、固定小数点またはイベントから計算された期間に参照名です。 たとえば、「a. d.」 または「紀元」 構成のグレゴリオ暦カレンダーにおける現在の時代 (年号) です。  
  
 有効な値`era`記載されて、<xref:System.Globalization.Calendar.Eras%2A>適切なクラスのプロパティから派生した<xref:System.Globalization.Calendar>します。 例:<xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType>この実装でサポートされる時代 (年号) の一覧を表示します。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="era" /> が、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> プロパティで指定した暦の有効な時代 (年号) を表していません。</exception>
        <block subset="none" type="usage"><para>によって表されるは、暦場合<see cref="T:System.Globalization.TaiwanCalendar" />が、 <see cref="P:System.Threading.Thread.CurrentCulture" /> "ZH-TW"でしない<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />、<see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />と<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />空の文字列が返されます ("")。</para></block>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="dateTimeFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">要求される形式指定サービスの型。</param>
        <summary>日付と時刻の書式指定サービスを提供する指定した型のオブジェクトを返します。</summary>
        <returns><paramref name="formatType" /> が現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> の型と同じ場合は現在のオブジェクト。それ以外の場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Format(String, IFormatProvider)`基本データ型でサポートされているメソッドは、このメソッドを呼び出すときに、現在<xref:System.Globalization.DateTimeFormatInfo>としてオブジェクトが渡される、<xref:System.IFormatProvider>パラメーター。 このメソッドは、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> を実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo GetInstance(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (provider As IFormatProvider) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ GetInstance(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.GetInstance provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> オブジェクトを取得する <see cref="T:System.Globalization.DateTimeFormatInfo" />。  
  
または 
 <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" /> を取得するには <see langword="null" />。</param>
        <summary>指定した <see cref="T:System.Globalization.DateTimeFormatInfo" /> に関連付けられている <see cref="T:System.IFormatProvider" /> オブジェクトを返します。</summary>
        <returns><see cref="T:System.Globalization.DateTimeFormatInfo" /> に関連付けられている <see cref="T:System.IFormatProvider" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>メソッドの`formatProvider`を使用して、<xref:System.Globalization.DateTimeFormatInfo>オブジェクトとして、`Type`パラメーター。 場合`formatProvider`は`null`場合<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>返します`null`、このメソッドが戻る<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>します。  
  
 アプリケーションを取得できます、<xref:System.Globalization.DateTimeFormatInfo>特定のカルチャを使用して、次のメソッドのいずれかのオブジェクト。  
  
-   <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティ。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A>メソッド、`provider`は、<xref:System.Globalization.CultureInfo>オブジェクト。  
  
 A<xref:System.Globalization.DateTimeFormatInfo>を特定のカルチャまたはニュートラル カルチャではなく、インバリアント カルチャにのみ、オブジェクトを作成することができます。  
  
 インバリアント カルチャや特定のカルチャのニュートラル カルチャの詳細については、次を参照してください。、<xref:System.Globalization.CultureInfo>クラスの説明。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetMonthName">
      <MemberSignature Language="C#" Value="public string GetMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetMonthName(int month);" />
      <MemberSignature Language="F#" Value="member this.GetMonthName : int -&gt; string" Usage="dateTimeFormatInfo.GetMonthName month" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">取得する月の名前を表す 1 ～ 13 の整数。</param>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられたカルチャに基づいて、指定した月のカルチャ固有の完全名を返します。</summary>
        <returns><paramref name="month" /> が表す月のカルチャ固有の完全名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のインバリアント<xref:System.Globalization.DateTimeFormatInfo>オブジェクト、このメソッドから文字列を返します、<xref:System.Globalization.GregorianCalendar>オブジェクト。  
  
|`month`|戻り値|  
|-------------|------------------|  
|1|"January"|  
|2|"February"|  
|3|"March"|  
|4|"April"|  
|5|"May"|  
|6|"June"|  
|7|"July"|  
|8|"August"|  
|9|"September"|  
|10|"October"|  
|11|"November"|  
|12|"December"|  
|13|""|  
  
 <xref:System.Globalization.Calendar> オブジェクトは、13 の月のカレンダーに対応できます。 12 か月の暦の場合は、13 番目の月の名前として空の文字列が常に返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> が 1 より小さいか、または 13 を超えています。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      </Docs>
    </Member>
    <Member MemberName="GetShortestDayName">
      <MemberSignature Language="C#" Value="public string GetShortestDayName (DayOfWeek dayOfWeek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetShortestDayName(valuetype System.DayOfWeek dayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetShortestDayName(DayOfWeek dayOfWeek);" />
      <MemberSignature Language="F#" Value="member this.GetShortestDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetShortestDayName dayOfWeek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayOfWeek" Type="System.DayOfWeek" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dayOfWeek"><see cref="T:System.DayOfWeek" /> 値のいずれか。</param>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられた、指定した曜日の最も短い省略名を取得します。</summary>
        <returns><paramref name="dayOfWeek" /> パラメーターに対応する週の省略名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、いくつかのメソッドおよび日付と時刻の書式パターン、ネイティブのカレンダーの名前と完全され省略された月と曜日名を指定するプロパティを示します。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayOfWeek" /> が <see cref="T:System.DayOfWeek" /> 列挙体の値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ InvariantInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに依存しない (インバリアントな) 既定の読み取り専用 <see cref="T:System.Globalization.DateTimeFormatInfo" /> を取得します。</summary>
        <value>カルチャに依存しない (インバリアントな) 読み取り専用オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のカルチャに関係なく、このプロパティは変更されません。 このため、インバリアント カルチャの<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは、解析および複数カルチャは、データの操作を書式設定に一貫性があり、カルチャに依存しない結果を生成するために使用できます。 たとえば、複数のカルチャの日付と時刻のデータを文字列形式の永続化する場合に書式設定できますを使用して、<xref:System.Globalization.DateTimeFormatInfo>インバリアント カルチャのオブジェクトおよび保存されました。 インバリアント カルチャを使用して解析できます<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用かどうかを示す値を取得します。</summary>
        <value><see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="LongDatePattern">
      <MemberSignature Language="C#" Value="public string LongDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LongDatePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>長い日付値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>長い日付値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>プロパティへの呼び出しによって返される日付文字列のカルチャ固有の書式を定義する、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>メソッドによって複合書式指定文字列を使用するが、"D"標準書式指定文字列を指定するとします。 次の例は、次の間の関係を示しています。"D"標準書式指定文字列で、カスタム形式で返される文字列、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>プロパティ、および日付のカルチャに固有の表現。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern1.vb#2)]  
  
 参照してください[カスタム Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)を組み合わせることができるなど、"dddd, dd MMMM yyyy"カスタム書式指定文字列を構築する個々 のカスタム書式指定子。  
  
 日付の区切り記号のプレース ホルダーを使用する代わりに、正確な文字列への長い日付パターンに日付の区切り記号を設定する必要があります。 たとえば、年-月-日のパターンを取得するには、「年-月-日」の長い日付パターンを設定します。  
  
 カルチャの変更によって、カレンダーが使用されている場合、このプロパティの値を変更できます。 たとえば、次の例を示しています、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>のプロパティを<xref:System.Globalization.CultureInfo>アラビア語 (シリア) カルチャを表すオブジェクトの場合に変更、<xref:System.Globalization.Calendar>カルチャが変更されるによって使用されるオブジェクト。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern2.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern2.vb#3)]  
  
   
  
## Examples  
 次の例の値を表示する、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>いくつかのカルチャ プロパティ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CPP/dtfi_longdatepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/dtfi_longdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/dtfi_longdatepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="LongTimePattern">
      <MemberSignature Language="C#" Value="public string LongTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LongTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>長い時間値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>長い形式の時間値の書式パターン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>プロパティへの呼び出しによって返される日付文字列のカルチャ固有の書式を定義する、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>メソッドによって複合書式指定文字列を使用するが、"T"標準書式指定文字列を指定するとします。  
  
 時間の区切り記号のプレース ホルダーを使用する代わりに、正確な文字列に長い時間パターンでは、時刻の区切り記号を設定することをお勧めします。 たとえば、パターン h-mm、ss を取得するには、"h mm ss"に長い日付パターンを設定します。  
  
   
  
## Examples  
 次の例の値を表示する<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CPP/dtfi_longtimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CS/dtfi_longtimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/VB/dtfi_longtimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="MonthDayPattern">
      <MemberSignature Language="C#" Value="public string MonthDayPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MonthDayPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthDayPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MonthDayPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthDayPattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>月と日の値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>月と日の値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>プロパティへの呼び出しによって返される日付文字列のカルチャ固有の書式を定義する、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>メソッド"m"と"M"標準書式指定文字列によって複合書式指定文字列を使用する、指定します。  
  
 このプロパティは影響を受けた場合の値、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの変更。  
  
 日付の区切り記号のプレース ホルダーを使用する代わりに、正確な文字列の月と日のパターンでは、日付の区切り記号を設定することをお勧めします。 たとえば、パターン MM DD を取得するには、"MM DD"に月と日のパターンを設定します。  
  
   
  
## Examples  
 次の例の値を表示する<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CPP/dtfi_monthdaypattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CS/dtfi_monthdaypattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/VB/dtfi_monthdaypattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="MonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] MonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthGenitiveNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられた月名の文字列配列を取得または設定します。</summary>
        <value>月名の文字列配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一部の言語で属の場合は、日付の一部である月の名前が表示されます。 たとえば、ロシア語 (ロシア) または"RU-RU"の日付、カルチャで構成されますの日の値と 1 Января など、属月の名前。  
  
 このプロパティが設定されている場合、配列は 1 次元に指定する必要があり、厳密に 13 個の要素があります。 <xref:System.Globalization.Calendar> オブジェクトでは、13 の月のカレンダーに対応します。 最初の要素 (インデックス 0 位置にある要素) によって定義された年の最初の月を表す、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティ。設定した場合、<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>プロパティを設定する必要も、<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>プロパティ。  
  
   
  
## Examples  
 次の例では、いくつかのメソッドおよび日付と時刻の書式パターン、ネイティブのカレンダーの名前と完全され省略された月と曜日名を指定するプロパティを示します。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で、配列が多次元であるか、長さが厳密に 13 ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">set 操作で、配列または配列の要素の 1 つが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">set 操作において、現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="MonthNames">
      <MemberSignature Language="C#" Value="public string[] MonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>月を表すカルチャ固有の完全名を格納している型 <see cref="T:System.String" /> の 1 次元配列を取得または設定します。</summary>
        <value>月を表すカルチャ固有の完全名を格納している型 <see cref="T:System.String" /> の 1 次元配列。 12 か月の暦では、配列の 13 番目の要素は空の文字列になります。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の配列は、"January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December"、および "" を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが設定されている場合、配列は 1 次元に指定する必要があり、厳密に 13 個の要素があります。 <xref:System.Globalization.Calendar> オブジェクトでは、13 の月のカレンダーに対応します。 最初の要素 (インデックス 0 位置にある要素) によって定義された年の最初の月を表す、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティ。  
  
 設定した場合、<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>プロパティを設定する必要も、<xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>プロパティ。  
  
 カスタムのパターンには、"MMMM"書式パターンが含まれている場合<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>の値を表示<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>"MMMM"書式パターンの代わりにします。  
  
 このプロパティは影響を受けた場合の値、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの変更。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが、多次元配列または配列長が厳密に 13 ではない配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NativeCalendarName">
      <MemberSignature Language="C#" Value="public string NativeCalendarName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeCalendarName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeCalendarName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NativeCalendarName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeCalendarName : string" Usage="System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられた暦のネイティブ名を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられているカルチャで使用される暦のネイティブ名がある場合は、その名前。暦のネイティブ名がない場合は、空の文字列 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、いくつかのメソッドおよび日付と時刻の書式パターン、ネイティブのカレンダーの名前と完全され省略された月と曜日名を指定するプロパティを示します。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>場合<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />は、<see cref="T:System.Globalization.TaiwanCalendar" />が、 <see cref="P:System.Threading.Thread.CurrentCulture" /> "ZH-TW"でしない<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />、 <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />、および<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />空の文字列が返されます ("")。</para></block>
      </Docs>
    </Member>
    <Member MemberName="PMDesignator">
      <MemberSignature Language="C#" Value="public string PMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property PMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PMDesignator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>"post meridiem" (午後) の時間の文字列指定子を取得または設定します。</summary>
        <value>"post meridiem" (午後) の時間の文字列指定子。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は "PM" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>プロパティが使用されるすべての時間 12時 00分: 00 (正午) から 23:59:59.999 までです。  
  
 カスタムのパターンには、書式パターン"tt"が含まれており、時刻が午前、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>の値を表示<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>書式パターンに"tt"の代わりにします。 カスタムのパターンが書式パターン"t"の最初の文字のみが含まれる場合<xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>が表示されます。 アプリケーションでは、AM と PM の区別を維持するために必要とする言語の場合、"tt"を使用する必要があります。 たとえば、日本語の場合、AM/PM 指定子の 2 番目の文字は異なりますが、先頭文字は同じです。  
  
 PM 指定子を使用してカルチャでは、このプロパティは空の文字列を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo ReadOnly (System.Globalization.DateTimeFormatInfo dtfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo ReadOnly(class System.Globalization.DateTimeFormatInfo dtfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (dtfi As DateTimeFormatInfo) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ ReadOnly(System::Globalization::DateTimeFormatInfo ^ dtfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.DateTimeFormatInfo -&gt; System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.ReadOnly dtfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtfi" Type="System.Globalization.DateTimeFormatInfo" />
      </Parameters>
      <Docs>
        <param name="dtfi">ラップする <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクト。</param>
        <summary>読み取り専用 <see cref="T:System.Globalization.DateTimeFormatInfo" /> ラッパーを返します。</summary>
        <returns>読み取り専用の <see cref="T:System.Globalization.DateTimeFormatInfo" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このラッパーに`dtfi`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dtfi" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="RFC1123Pattern">
      <MemberSignature Language="C#" Value="public string RFC1123Pattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RFC1123Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RFC1123Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RFC1123Pattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RFC1123Pattern : string" Usage="System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット技術標準化委員会の (IETF) の Request for Comments (RFC) 1123 仕様に基づく時刻値のカスタム書式指定文字列を取得します。</summary>
        <value>IETF RFC 1123 仕様に準拠した時刻値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>プロパティへの呼び出しによって返される日付文字列のカルチャ固有の書式を定義します、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>メソッドと、"r"と"R"標準書式指定文字列では、複合書式指定文字列を使用するが提供します。  
  
 RFC1123 パターンが定義済みの標準を反映し、プロパティは読み取り専用です。 そのため、これは常に、カルチャに関係なく同じです。 カスタム書式指定文字列は、"ddd, dd MMM yyyy HH':'mm':'ss 'GMT'" です。  
  
   
  
## Examples  
 次の例では、いくつかのカルチャの RFC1123Pattern の値が表示されます。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CPP/dtfi_rfc1123pattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CS/dtfi_rfc1123pattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/VB/dtfi_rfc1123pattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="SetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public void SetAllDateTimePatterns (string[] patterns, char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllDateTimePatterns(string[] patterns, char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAllDateTimePatterns (patterns As String(), format As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAllDateTimePatterns(cli::array &lt;System::String ^&gt; ^ patterns, char format);" />
      <MemberSignature Language="F#" Value="member this.SetAllDateTimePatterns : string[] * char -&gt; unit" Usage="dateTimeFormatInfo.SetAllDateTimePatterns (patterns, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patterns" Type="System.String[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.Char" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="patterns">カスタム書式指定文字列の配列。</param>
        <param name="format"><paramref name="patterns" /> パラメーターに指定されたカスタム書式指定文字列に関連付けられている標準書式指定文字列。</param>
        <summary>指定された標準書式指定文字列に対応する、カスタムの日時書式指定文字列を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>メソッドは、特定の標準の日付と時刻の書式指定文字列に対応するカスタム書式指定文字列を定義します。 標準の日付と時刻の書式指定文字列で指定された場合、日付と時刻の書式指定メソッドが含まれていますへの呼び出し`format`、メソッドの最初の要素を使用して、`patterns`結果の文字列の形式を定義する配列。  
  
> [!WARNING]
>  `Parse`と`TryParse`メソッドではのすべての文字列が完全に繰り返されません`patterns`日付と時刻の文字列表現を解析するときにします。 解析操作で特定の形式に日付と時刻の文字列が必要な場合に有効な形式の配列を渡す必要があります、 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>、 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>、 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>、または<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>メソッド。  
  
 "D"、"D"、"t"、"T"と"y"または"Y"標準の日付に対応するカスタム書式指定文字列と書式指定文字列を定義することができます。 場合の値`format`標準書式指定文字列は、<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>メソッドがスローされます、<xref:System.ArgumentException>します。  
  
 場合は、カスタムの日付と時刻の書式指定文字列には日付の区切り記号が、特定の日付の区切り記号「/」カスタム書式指定子に置き換える解析または書式設定メソッドではなく、日付の区切り記号を明示的に指定する必要があります。 たとえば、年-月-日のパターンを取得するには、「年-月-日」のパターンを使用します。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.Globalization.CultureInfo>オブジェクトの"EN-US"(英語 - 米国) カルチャおよびを表す"Y"標準書式指定文字列を使用して日付と時刻の文字列の配列を解析するために使用します。 次を使用して、 <xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A> "Y"標準書式指定文字列、および、日付と時刻の文字列の配列を解析する試行と、新しいカスタム書式指定文字列を関連付けるメソッド。 出力の例では、新しいのカスタム書式指定文字列を解析と書式設定操作の両方で使用することを示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/cs/setalldatetimepatterns.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/vb/setalldatetimepatterns.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="patterns" /> は <see langword="null" /> か、または長さ 0 の配列です。  
  
または 
 <paramref name="format" /> が有効な標準書式指定文字列でないか、パターンを設定できない標準書式指定文字列です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="patterns" /> は、値が <see langword="null" /> である配列要素を含んでいます。</exception>
        <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="Overload:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ShortDatePattern">
      <MemberSignature Language="C#" Value="public string ShortDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortDatePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>短い日付値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>短い形式の日付の値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>プロパティへの呼び出しによって返される日付文字列のカルチャ固有の書式を定義する、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>メソッドによって複合書式指定文字列を使用するが、"d"標準書式指定文字列を指定するとします。  
  
 このプロパティは影響を受けた場合の値、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの変更。  
  
   
  
## Examples  
 次の例の値を表示する、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>プロパティと値の日付の形式を使用して、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>いくつかのカルチャ プロパティ。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/dtfi_shortdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/dtfi_shortdatepattern.vb#1)]  
  
 次の例では、変更、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>のプロパティを<xref:System.Globalization.DateTimeFormatInfo>英語 (米国) カルチャの書式指定規則を表すオブジェクト。 表示されます、日付の値を 2 回は、まず元を反映するように<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>プロパティをクリックし、新しいプロパティ値を反映するようにします。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/shortdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/shortdatepattern1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ShortestDayNames">
      <MemberSignature Language="C#" Value="public string[] ShortestDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ShortestDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortestDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ShortestDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortestDayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられた曜日の最も短い一意の省略名の文字列配列を取得または設定します。</summary>
        <value>曜日名の文字列配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、いくつかのメソッドおよび日付と時刻の書式パターン、ネイティブのカレンダーの名前と完全され省略された月と曜日名を指定するプロパティを示します。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で、配列には厳密に 7 個の要素が含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で、値配列または値配列の要素の 1 つが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">set 操作において、現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShortTimePattern">
      <MemberSignature Language="C#" Value="public string ShortTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>短い時刻値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>短い形式の時刻値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>プロパティへの呼び出しによって返される日付文字列のカルチャ固有の書式を定義する、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>メソッドによって複合書式指定文字列を使用するが、"t"標準書式指定文字列を指定するとします。  
  
 時間の区切り記号のプレース ホルダーを使用する代わりに、正確な文字列を短い形式の時刻パターンでは、時刻の区切り記号を設定することをお勧めします。 たとえば、パターン h-mm、ss を取得するには、"h mm ss"を短い形式の時刻パターンを設定します。  
  
   
  
## Examples  
 次の例の値を表示する<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CPP/dtfi_shorttimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CS/dtfi_shorttimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/VB/dtfi_shorttimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="SortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string SortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortableDateTimePattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SortableDateTimePattern : string" Usage="System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>並べ替え可能な日付と時刻の値のカスタム書式指定文字列を取得します。</summary>
        <value>並べ替え可能な日付と時刻の値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>プロパティへの呼び出しによって返される日付文字列のカルチャ固有の書式を定義します、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>メソッドと複合書式指定である文字列が"s"標準書式指定文字列を提供します。  
  
 によって返される形式の文字列、<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>プロパティが定義済みの標準 (ISO 8601) を反映し、プロパティは読み取り専用です。 そのため、これは常に、カルチャに関係なく同じです。 カスタム書式指定文字列は、"yyyy'-'MM'-'dd'T'HH':'mm':'ss" です。  
  
   
  
## Examples  
 次の例の値を表示する<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CPP/dtfi_sortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CS/dtfi_sortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/VB/dtfi_sortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeSeparator">
      <MemberSignature Language="C#" Value="public string TimeSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TimeSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TimeSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeSeparator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>時刻の構成要素、つまり時間、分、および秒を区切る文字列を取得または設定します。</summary>
        <value>時刻の構成要素を区切る文字列。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> の既定値は、":" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタムのパターンには、書式パターンが含まれている場合":"、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>の値を表示<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>の代わりに、":"書式パターン。  
  
 派生した時刻の区切り記号は、<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>プロパティ。 時間の長い時刻、時間の区切り記号のプレース ホルダーを使用する代わりに、正確な文字列をパターンを簡単に言えば、時刻区切り記号を設定または確認することをお勧めします。 たとえば、パターン h-mm、ss を取得するには、"h mm ss"のパターンを設定します。 この実習ではことなどのパターンを設定することもできます"h'h ' mm 'ss' います"(3 h 36 分 12 s) を含む複数の種類の区切り記号。 <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>プロパティは、時刻区切り文字を置換する文字列を定義します (":"カスタム日付/時刻書式指定子)、書式設定操作の結果の文字列にします。 また、解析操作で時刻の区切り記号文字列を定義します。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.Globalization.CultureInfo>オブジェクト、EN-US カルチャの変更をその日付の区切り記号"."、"t"、"T"、"F"、"f"、"G"および"g"標準書式指定文字列を使用して日付を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/cs/timeseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/vb/timeseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="UniversalSortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string UniversalSortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniversalSortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UniversalSortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UniversalSortableDateTimePattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniversalSortableDateTimePattern : string" Usage="System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユニバーサルで並べ替え可能な日付と時刻の文字列のカスタム書式指定文字列を取得します。</summary>
        <value>ユニバーサルで並べ替え可能な日付と時刻の文字列のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>プロパティへの呼び出しによって返される日付文字列の書式を定義する、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>メソッドによって複合書式指定文字列を使用するが、"u"標準書式指定文字列を指定するとします。 最後に時刻指定子"Z"の並べ替え可能な順序で日付と時刻を表示することに使用できます。 形式は、年、月、日、時間、分、および秒に先行ゼロを使用しているために、並べ替え可能です。 カスタム書式指定文字列 ("yyyy '-'MM'-' dd HH': 'mm': 'ss' z'") のカルチャまたは書式プロバイダーに関係なく同じです。  
  
 によって返される形式の文字列、<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>プロパティが定義済みの標準を反映し、プロパティは読み取り専用です。 そのため、これは常に、カルチャに関係なく同じです。 カスタム書式指定文字列は、"yyyy'-'MM'-'dd HH':'mm':'ss'Z'" です。  
  
   
  
## Examples  
 次の例の値を表示する<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CPP/dtfi_universalsortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CS/dtfi_universalsortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/VB/dtfi_universalsortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の DateTime 書式指定文字列します。</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="YearMonthPattern">
      <MemberSignature Language="C#" Value="public string YearMonthPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string YearMonthPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property YearMonthPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ YearMonthPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.YearMonthPattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>年と月の値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>年と月の値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>プロパティへの呼び出しによって返される日付文字列のカルチャ固有の書式を定義する、<xref:System.DateTime.ToString%2A?displayProperty=nameWithType>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType>メソッドと"y"と"Y"標準書式指定文字列では、複合書式指定文字列を使用するが提供します。  
  
 このプロパティは影響を受けた場合の値、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの変更。  
  
 日付の区切り記号のプレース ホルダーを使用する代わりに、正確な文字列を 1 年の月のパターンでは、日付の区切り記号を設定することをお勧めします。 たとえば、年日パターンを取得するには、"yyyy MM"する年の月のパターンを設定します。  
  
   
  
## Examples  
 次の例の値を表示する<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CPP/dtfi_yearmonthpattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CS/dtfi_yearmonthpattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/VB/dtfi_yearmonthpattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
  </Members>
</Type>