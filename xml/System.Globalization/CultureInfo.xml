<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="44d75ac185ab750c4fddd317bd34b3b682646b81" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52222023" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>特定のカルチャ (アンマネージ コードの開発では "*ロケール*" と呼ばれます) に関する情報を提供します。 この情報には、カルチャの名前、表記体系、使用する暦、文字列の並べ替え順序、および日付と数値の書式が含まれます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo>クラスなど、言語、サブ言語、国/地域、予定表、および特定のカルチャに関連付けられている規則のカルチャに固有の情報を提供します。 このクラスでは、カルチャ固有のインスタンスへのアクセスも提供します、 <xref:System.Globalization.DateTimeFormatInfo>、 <xref:System.Globalization.NumberFormatInfo>、 <xref:System.Globalization.CompareInfo>、および<xref:System.Globalization.TextInfo>オブジェクト。 これらのオブジェクトには、大文字小文字の区別、日付や数値の書式設定文字列を比較するなど、カルチャに固有の操作に必要な情報が含まれています。 <xref:System.Globalization.CultureInfo>クラスは、使用直接的または間接的に書式設定、解析、またはなど、カルチャに固有のデータを操作するクラスによって<xref:System.String>、 <xref:System.DateTime>、 <xref:System.DateTimeOffset>、および数値型。  
  
 このセクションの内容:  
  
 [カルチャ名と識別子](#CultureNames)   
 [インバリアント、中立、および特定のカルチャ](#Invariant)   
 [カスタムのカルチャ](#Custom)   
 [動的なカルチャのデータ](#Dynamic)   
 [現在のカルチャと現在の UI カルチャ](#Current)   
 [すべてのカルチャを取得します。](#GetAll)   
 [カルチャとスレッド](#Threads)   
 [カルチャ、およびアプリケーションのドメイン](#AppDomain)   
 [カルチャとタスク ベースの非同期操作](#Async)   
 [CultureInfo オブジェクトのシリアル化](#Serialization)   
 [コントロール パネルのオーバーライド](#CPanel)   
 [代替の並べ替え順序](#AlternateSort)   
 [カルチャ、および Windows アプリ](#Windows)  
  
<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>カルチャ名と識別子  
 <xref:System.Globalization.CultureInfo>クラスが RFC 4646 に基づく、カルチャごとに一意の名前を指定します。 名前は、言語に関連付けられた ISO 639 2 文字の小文字カルチャ コードと国または地域に関連付けられた ISO 3166 の 2 文字の大文字サブカルチャ コードの組み合わせです。 対象とするアプリのさらに、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]またはそれ以降を実行している Windows 10 以降、タグがサポートされている有効な bcp-47 の言語に対応するカルチャ名。  
  
> [!NOTE]
>  カルチャ名が渡された場合、クラス コンス トラクターまたはメソッドになど<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>または<xref:System.Globalization.CultureInfo>、そのケースは重要ではありません。  
  
 RFC 4646 に基づくカルチャ名の形式は*languagecode2*>-*country/regioncode2*ここで、 *languagecode2*は 2 文字の言語コードです*country/regioncode2*は 2 文字のサブカルチャ コードです。 例には、英語 (米国) 日本語 (日本) および EN-US、JA-JP が含まれます。 2 文字の言語コードが使用できない場合では、ISO 639-2 から派生した 3 文字コードが使用されます。  
  
 ある一部のカルチャ名も 15924 の ISO に注意してください。 たとえば、アゼルバイジャン、キリル文字を指定し、Latn ラテン語のスクリプトを指定します。 スクリプトを含むカルチャ名は、パターンを使用して*languagecode2*-*scripttag*-*country/regioncode2*します。 この種類のカルチャ名の例では、ウズベク語 (キリル、ウズベキスタン) に対応する uz です。 スクリプトを含むカルチャ名がパターンを使用する Windows Vista より前に、の Windows オペレーティング システムで*languagecode2*-*country/regioncode2* - *scripttag*、たとえば、uz UZ-というウズベク語 (キリル、ウズベキスタン) にします。  
  
 2 文字の小文字の言語コードのみがニュートラル カルチャを指定します。 たとえば、fr がフランス語のニュートラル カルチャを指定し、de ドイツ語のニュートラル カルチャを指定します。  
  
> [!NOTE]
>  このルールに矛盾する 2 つのカルチャ名があります。 という名前の Zh-hans、中国語 (簡体字)、および繁体字、Zh-hant、という名前のカルチャとは、ニュートラル カルチャです。 カルチャ名では、現在の標準を表すし、古い名前 ZH-CHS および ZH-CHT を使用するための理由がない場合に使用する必要があります。  
  
 カルチャ識別子は標準国際省略であり、コンポーネントがインストールされているカルチャのいずれかを一意に識別するために必要です。 アプリケーションでは、定義済みカルチャ識別子を使用したり、カスタムの識別子を定義することができます。  
  
 定義済みの特定のカルチャの名前と識別子は、これと他のクラスで使用されて、<xref:System.Globalization?displayProperty=nameWithType>名前空間。 詳細なカルチャ情報が表示されます、[各国語サポート (NLS) API リファレンス](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center にします。  
  
 カルチャの名前および識別子が、特定のコンピューター上にあるカルチャのサブセットのみを表すことに注意してください。 Windows のバージョンまたは service pack には、使用できるカルチャを変更できます。 アプリケーションを使用してカスタムのカルチャの追加、<xref:System.Globalization.CultureAndRegionInfoBuilder>クラス。 ユーザーは、Microsoft Locale Builder ツールを使用して、独自のカスタム カルチャを追加します。 Microsoft Locale Builder を使用してマネージ コードで記述された、`CultureAndRegionInfoBuilder`クラス。  
  
 いくつかの異なる名前のカルチャでは、特に、次のクラス メンバーに関連付けられている名前と密接に関連のとおりです。  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>インバリアント、中立、および特定のカルチャ  
 カルチャは、3 つのセットに一般にグループ化されます。 インバリアント カルチャ、ニュートラル カルチャ、および特定のカルチャ。  
  
 インバリアント カルチャがカルチャに依存しません。 アプリケーションは、空の文字列を使用して名前でインバリアント カルチャを指定します ("") またはその識別子。 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> インバリアント カルチャのインスタンスを定義します。 関連付けられているすべての国/地域ではなくが、英語の言語。 ほぼすべてのメソッドで使用される、`Globalization`カルチャを必要とする名前空間。  
  
 ニュートラル カルチャに関連付けられるカルチャは、国/地域ではなく、言語にします。 特定のカルチャは、言語と国/地域に関連付けられているカルチャです。 たとえば、fr がフランス語のカルチャのニュートラルな名前および FR-FR が特定のフランス語 (フランス) カルチャの名前。 簡体字、繁体字もと見なされることのニュートラル カルチャに注意してください。  
  
 インスタンスを作成、<xref:System.Globalization.CompareInfo>クラスが含まれているデータが任意であるため、ニュートラル カルチャはお勧めできません。 表示し、データの並べ替え、言語とリージョンの両方を指定します。 さらに、<xref:System.Globalization.CompareInfo.Name%2A>のプロパティを<xref:System.Globalization.CompareInfo>オブジェクトの作成をニュートラル カルチャ国のみを取得し、領域は含まれません。  
  
 定義されているカルチャでは、階層を特定のカルチャの親がニュートラル カルチャでは、ニュートラル カルチャの親は、インバリアント カルチャがあります。 <xref:System.Globalization.CultureInfo.Parent%2A>プロパティには、特定のカルチャに関連付けられているカルチャが含まれています。 カスタムのカルチャを定義する必要があります、<xref:System.Globalization.CultureInfo.Parent%2A>プロパティがこのパターンに一致します。  
  
 特定のカルチャのリソースが、オペレーティング システムで利用できない場合は、関連するニュートラル カルチャのリソースが使用されます。 ニュートラル カルチャのリソースが利用できない場合は、メイン アセンブリに埋め込まれたリソースが使用されます。 リソース フォールバック プロセスの詳細については、次を参照してください。 [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)します。  
  
 Windows API でのロケールの一覧は、.NET Framework でサポートされているカルチャの一覧とは若干異なります。 Windows との相互運用が必要な場合などの p/invoke メカニズムを通じてアプリケーションする必要がありますが定義されている特定のカルチャ、オペレーティング システムを使用します。 特定のカルチャの使用と同じであるロケール id で識別される同等の Windows ロケールとの一貫性が確実に<xref:System.Globalization.CultureInfo.LCID%2A>します。  
  
 A<xref:System.Globalization.DateTimeFormatInfo>または<xref:System.Globalization.NumberFormatInfo>を特定のカルチャまたはニュートラル カルチャではなく、インバリアント カルチャにのみ作成できます。  
  
 場合<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>は、<xref:System.Globalization.TaiwanCalendar>が、<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>に設定されていない、ZH-TW、 <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>、 <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>、および<xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType>空の文字列が返されます ("")。  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>カスタムのカルチャ  
 だけでなく、Windows オペレーティング システムと .NET Framework でサポートされている定義済みのカルチャは、.NET Framework には、3 種類のカスタム カルチャがサポートされています。  
  
-   Windows または .NET Framework で使用可能なカルチャを補完する新しいカルチャ。 たとえば、アプリケーションがインストールでした、<xref:System.Globalization.CultureInfo>表します、FJ-FJ (または Fijan (フィジー)) がシステムのカルチャ オブジェクト。  
  
-   プロパティが別の Windows と .NET Framework でサポートされる標準的なカルチャのプロパティから置換カルチャ。  
  
-   ユーザーの標準カルチャをオーバーライドします。 ユーザーが使用できる、**地域と言語**アプリケーション**コントロール パネルの** 既存のカルチャのプロパティの値をカスタマイズします。  
  
> [!NOTE]
>  使用することができます、<xref:System.Globalization.CultureAndRegionInfoBuilder>クラスを定義、保存、および既存のカルチャを置換または補完するカスタムのカルチャを登録します。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType>メソッドは、ターゲット システムにカスタム カルチャをインストールするために使用するロケール データのマークアップ言語 (LDML) ファイルを作成します。 使用に関するステップ バイ ステップ情報の<xref:System.Globalization.CultureAndRegionInfoBuilder>新たに作成するクラスまたは置換カルチャを参照してください、<xref:System.Globalization.CultureAndRegionInfoBuilder>クラスに関するトピック。  
  
 .NET Framework では、カスタムのカルチャをサポートするため、カルチャに固有のデータを使用する場合に、次を考慮してください。  
  
-   カスタムのカルチャでは、定義済みのカルチャの範囲を超える値を持つことができます。 たとえば、一部のカルチャは異常に長い月の名前、予期しない日付または時刻形式、またはその他の異常なデータがあります。  
  
-   ユーザー インターフェイスのカルチャに固有のデータを表示する場合は、ユーザーのカスタマイズ内容を遵守する必要があります。たとえば、ユーザーは、24 時間制または yyyyMMdd という日付形式にする可能性があります。  
  
-   カスタムのカルチャが既定値を上書きすることに注意してください。 そのため、安定しているカルチャのデータを考慮することはできません。 国名、数値と日付の形式、およびスペルは、今後変更可能性があります。 日付と時刻の解析関数に渡される日付と時刻の文字列などのカルチャに依存するデータをシリアル化する場合は、インバリアント カルチャまたは特定を使用する必要があります。  
  
 <xref:System.Globalization.CultureInfo.CultureTypes%2A>システムにインストールされているカスタムのカルチャのプロパティの値が含まれています、<xref:System.Globalization.CultureTypes?displayProperty=nameWithType>フラグ、およびカスタムのカルチャが割り当てられている、<xref:System.Globalization.CultureInfo.LCID%2A>プロパティ値の`LOCALE_CUSTOM_UNSPECIFIED`(0x1000、または 4096)。 Windows 10 以降、この値も割り当てられているカルチャの完全なデータがないシステム定義のカルチャに注意してください。  
  
<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>動的なカルチャのデータ  
 を除き、インバリアント カルチャのデータは動的です。 これは、定義済みのカルチャにも当てはまります。 たとえば、国や地域の通貨が新しく導入、その単語のスペルを変更または、使用する暦を変更し、カルチャの定義はこれを追跡するために変更します。  カスタム カルチャが、予告なく変更される可能性があり、置換のカスタム カルチャによって、特定のカルチャをオーバーライドする可能性があります。 また、以下のように、個々 のユーザーはカルチャ設定をオーバーライドできます。 アプリケーションでは、実行時に常にカルチャのデータを取得する必要があります。  
  
> [!CAUTION]
>  データを保存するときに、アプリケーションは、インバリアント カルチャ、バイナリ形式、または特定のカルチャに依存しない形式を使用する必要があります。 インバリアント カルチャ以外の特定のカルチャに関連付けられている現在の値に従って保存されたデータは、読み取り不可能になる可能性があります。 またはそのカルチャが変更された場合意味的に変更する可能性があります。  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>現在のカルチャと現在の UI カルチャ  
 すべてのスレッド、.NET Framework アプリケーションには、現在のカルチャと現在の UI カルチャをが。 現在のカルチャでは、日付、時刻、数字、および通貨の値、テキスト、大文字と小文字の表記規則、および文字列の比較方法の並べ替え順序の書式指定規則を決定します。 現在の UI カルチャを使用して、実行時にカルチャ固有のリソースを取得します。  
  
> [!NOTE]
>  スレッドごとに、現在と現在の UI カルチャを決定する方法については、次を参照してください。、[カルチャとスレッド](#Threads)セクション。 スレッドの現在と現在の UI カルチャを決定する方法については、新しいアプリケーション ドメインとアプリケーション ドメインの境界を越えてスレッドの実行を参照してください、[カルチャとアプリケーション ドメイン](#AppDomain)セクション。 タスク ベースの非同期操作を実行するスレッドの現在と現在を決定する方法については、次を参照してください。、[カルチャとタスク ベースの非同期操作](#Async)セクション。  
  
 詳細については、現在のカルチャを参照してください、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティのトピックです。 詳細については、現在の UI カルチャを参照してください、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>プロパティのトピックです。  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>現在と現在の UI カルチャを取得します。  
 取得することができます、 <xref:System.Globalization.CultureInfo> 2 つの方法のいずれかで、現在のカルチャを表すオブジェクト。  
  
-   値を取得することによって、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティ。  
  
-   値を取得することによって、 [Thread.CurrentThread.CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>)プロパティ。  
  
 次の例では、両方のプロパティ値を取得を比較を表示していることと等しい場合は、現在のカルチャの名前を表示します。  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 取得できます、 <xref:System.Globalization.CultureInfo> 2 つの方法のいずれかで現在の UI カルチャを表すオブジェクト。  
  
-   値を取得することによって、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>プロパティ。  
  
-   値を取得することによって、 [Thread.CurrentThread.CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>)プロパティ。  
  
 次の例では、両方のプロパティ値を取得を表示していることと等しい場合は、現在の UI カルチャの名前を表示することを比較します。  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>現在と現在の UI カルチャの設定  
 カルチャとスレッドの UI カルチャを変更するには、次の操作を行います。  
  
1.  インスタンスを作成、<xref:System.Globalization.CultureInfo>呼び出すことによって、そのカルチャを表すオブジェクトを<xref:System.Globalization.CultureInfo>クラスのコンス トラクターとカルチャの名前を渡します。 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>コンス トラクターをインスタンス化、<xref:System.Globalization.CultureInfo>ユーザーを表すオブジェクトでは、新しいカルチャが Windows の現在のカルチャと同じである場合よりも優先されます。   <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>コンス トラクターを使用すると、指定するかどうか新しくインスタンス化された<xref:System.Globalization.CultureInfo>オブジェクトは、ユーザーが新しいカルチャが Windows の現在のカルチャと同じである場合に上書きが反映されます。  
  
2.  割り当てる、<xref:System.Globalization.CultureInfo>オブジェクトを<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>または<xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>プロパティ。 さらに、バージョンのデスクトップの .NET Framework 4.6 以降を実行して、アプリに割り当てることも、<xref:System.Globalization.CultureInfo>オブジェクトを<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>または<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>プロパティ。  
  
 次の例では、現在のカルチャを取得します。 、フランス語 (フランス) カルチャ以外のものである場合、現在のカルチャをフランス語 (フランス) に変更します。 それ以外の場合、現在のカルチャをフランス語 (ルクセンブルク) に変わります。  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 次の例では、現在のカルチャを取得します。 以外のものである場合、スロベニア語 (スロベニア) カルチャ語 (スロベニア) に、現在のカルチャを変更します。 それ以外の場合、現在のカルチャをクロアチア語 (クロアチア) に変わります。  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>すべてのカルチャを取得します。  
 または、ローカル コンピューター上で使用可能なすべてのカルチャのカルチャの配列特定カテゴリを取得するには呼び出すことによって、<xref:System.Globalization.CultureInfo.GetCultures%2A>メソッド。 たとえば、単独または組み合わせでは、カスタム カルチャ、特定のカルチャまたはニュートラル カルチャを取得できます。  
  
 次の例では、<xref:System.Globalization.CultureInfo.GetCultures%2A>メソッドを 2 回、1 つ目の<xref:System.Globalization.CultureTypes?displayProperty=nameWithType>列挙型のメンバーをすべてのカスタム カルチャを取得し、使用して、<xref:System.Globalization.CultureTypes?displayProperty=nameWithType>列挙型のメンバーをすべて置換カルチャを取得します。  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>カルチャとスレッド  
 新しいアプリケーションのスレッドが開始されると、その現在のカルチャおよび UI カルチャの現在と定義されますは現在のシステム カルチャによって、現在のスレッド カルチャではありません。 この違いを次の例に示します。 現在のカルチャと、アプリケーションのスレッドの現在の UI カルチャをフランス語 (フランス) カルチャ (FR-FR) に設定します。 既に現在のカルチャが FR-FR の場合は、例は、英語 (米国) カルチャ (EN-US) に設定します。 通貨値として 3 つのランダムな数値を表示し、し、さらに、通貨値として 3 つのよりランダムな数値を表示する新しいスレッドを作成します。 例の出力として、新しいスレッドで表示される通貨の値は反映メイン アプリケーション スレッドからの出力とは異なり、フランス語 (フランス) カルチャの書式指定規則。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 前に .NET Framework のバージョンでは、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、最もメイン アプリケーション スレッドが他のすべてのワーカー スレッドと同じカルチャを共有することを確認する一般的な方法は、アプリケーション全体のカルチャの名前を渡す、または<xref:System.Globalization.CultureInfo>オブジェクトをアプリケーション全体のカルチャを表す、<xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType>を委任します。 次の例では、このアプローチを使用して、2 つのスレッドで表示される通貨の値が同じカルチャの書式指定規則を反映することを確認します。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 設定できるカルチャおよび UI カルチャのスレッドのプールのスレッドと同様の方法を呼び出して、<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType>メソッド。  
  
 以降では、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]で設定できるカルチャおよび UI カルチャのすべてのスレッドのアプリケーション ドメインを割り当てることで直接、<xref:System.Globalization.CultureInfo>そのカルチャを表すオブジェクト、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>と<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>プロパティ。 次の例では、これらのプロパティを使用して、既定のアプリケーション ドメインのすべてのスレッドが同じカルチャを共有することを確認します。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  ただし、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>と<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>プロパティは、静的メンバーを既定のカルチャとは、これらのプロパティ値の設定時に現在あるアプリケーション ドメインに対してのみの既定 UI カルチャを定義します。 詳細については、次のセクションを参照してください。[カルチャとアプリケーション ドメイン](#AppDomain)します。  
  
 値を割り当てるときに、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>と<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>プロパティでは、カルチャおよび UI カルチャのアプリケーション ドメインのスレッドが明示的に割り当てられていない場合、カルチャも変更します。 ただし、これらのスレッドでは、現在のアプリケーション ドメインで、実行中にのみ、新しいカルチャ設定が反映されます。 これらのスレッドは、別のアプリケーション ドメインで実行して、そのアプリケーション ドメインに対して定義されている既定のカルチャのカルチャになります。 常に、メイン アプリケーション スレッドのカルチャを設定して、依存しないをお勧めこの結果、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>と<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>プロパティを変更します。  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>カルチャ、およびアプリケーションのドメイン  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>静的プロパティのみがプロパティの値を設定または取得時に、現在のアプリケーション ドメインの既定のカルチャを明示的に定義です。 次の例は、フランス語 (フランス)、既定のアプリケーション ドメインで、既定のカルチャと UI カルチャの既定値に設定しを使用して、<xref:System.AppDomainSetup>クラスおよび<xref:System.AppDomainInitializer>デリゲートを新しいアプリケーション ドメインで、既定のカルチャおよび UI カルチャを設定するにはロシア語 (ロシア)。 次に、1 つのスレッドはアプリケーション ドメインごとに 2 つのメソッドを実行します。 スレッドのカルチャおよび UI カルチャが明示的に設定されていないことです。 注意してください。既定のカルチャおよび UI カルチャのスレッドを実行しているアプリケーション ドメインから派生しています。 なお、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>と<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>プロパティが既定値を返す<xref:System.Globalization.CultureInfo>メソッドの呼び出しが行われたときに、現在のアプリケーション ドメインの値。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 カルチャとアプリケーション ドメインの詳細については、トピックの「アプリケーション ドメインとスレッド」セクションを参照してください。  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>カルチャとタスク ベースの非同期操作  
 [タスクベースの非同期プログラミング パターン](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)使用<xref:System.Threading.Tasks.Task>と<xref:System.Threading.Tasks.Task%601>プールのスレッドのスレッドでデリゲートを非同期的に実行するオブジェクト。 特定のタスクが実行されている特定のスレッドは、事前にわからないが、実行時のみに決定します。  
  
 対象とするアプリ、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]または以降のバージョン、カルチャ、非同期操作のコンテキストの一部であります。 つまり、以降でアプリを対象とする、 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]、既定で非同期操作の値の継承、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>と<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>は起動元のスレッドのプロパティ。 現在のカルチャまたは現在の UI カルチャはシステム カルチャによって異なる場合、現在のカルチャはスレッドの境界を越えるし、非同期操作を実行しているスレッド プールのスレッドの現在のカルチャになります。  
  
 簡単な例を次に示します。 使用して、<xref:System.Runtime.Versioning.TargetFrameworkAttribute>属性ターゲットを[!INCLUDE[net_v46](~/includes/net-v46-md.md)]します。 例では、定義、<xref:System.Func%601>デリゲート`formatDelegate`通貨値として書式設定された数値を返します。 例は、フランス語 (フランス) に、現在のシステム カルチャを変更する場合、フランス語 (フランス) が現在のカルチャでは、英語 (米国) です。 その後:  
  
-   メイン アプリケーション スレッドで同期的に実行されるように、デリゲートを直接呼び出します。  
  
-   スレッド プールのスレッドでデリゲートを非同期的に実行するタスクを作成します。  
  
-   呼び出すことによって、メイン アプリケーション スレッドでデリゲートを同期的に実行するタスクを作成、<xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType>メソッド。  
  
 例の出力を示しています、現在のカルチャをフランス語 (フランス) に変更されたときの元のタスクは非同期的に呼び出すスレッドの現在のカルチャが非同期操作の現在のカルチャになります。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 前のバージョンの .NET Framework のバージョンを対象とするアプリを[!INCLUDE[net_v46](~/includes/net-v46-md.md)]、または特定のバージョンの .NET Framework を対象としないアプリの場合は、呼び出し元のスレッドのカルチャが含まれていない、タスクのコンテキスト。 代わりに、1 つは明示的に定義されていない場合、既定では新しいスレッドのカルチャは、システム カルチャになります。 次の例がないことを除いて前の例と同じですが、<xref:System.Runtime.Versioning.TargetFrameworkAttribute>属性、これを示しています。 スレッド プールのスレッドで非同期に実行されるタスクのカルチャは EN-US 個ではなく、例を実行するシステムのシステム カルチャが英語 (米国) であるため、します。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 .NET Framework のバージョンを対象とするアプリを[!INCLUDE[net_v45](~/includes/net-v45-md.md)]より前のバージョンと、後で、 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]、使用することができます、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>と<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>タスクを非同期で呼び出し元のスレッドのカルチャが使用されるようにするプロパティスレッド プールのスレッドで実行します。 使用する点を除いて、次の例は、前の例と同じ、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>がある、メイン アプリケーション スレッドと同じカルチャのプロパティをそのスレッド プールのスレッドを確認します。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>アプリごとにドメインのプロパティをすべてのスレッドが特定のアプリケーション ドメイン内のカルチャを明示的に割り当ての既定のカルチャを確立したは、します。 ただし、対象とするアプリについて、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]または呼び出し元のスレッドのカルチャが、タスクは、アプリ ドメインの境界を越える場合でも、非同期タスクのコンテキストの一部が後で、します。  
  
 タスクを実行しているメソッドは、アプリケーション ドメイン境界を越える場合でも、呼び出し元スレッドのカルチャがタスクベースの非同期操作の現在のカルチャが変更される次の例を示しています。 クラスを定義`DataRetriever`、単一のメソッドと`GetFormattedNumber`1 ~ 1,000 の通貨値として書式設定でランダムな倍精度浮動小数点数を返します。 最初のタスクが実行されるインスタンスを作成します、`DataRetriever`インスタンスと呼び出しの`GetFormattedNumber`メソッド。 2 番目のタスクその現在のアプリケーション ドメインを報告、新しいアプリケーション ドメインを作成、インスタンス化、`DataRetriever`新しいアプリケーション ドメインと呼び出しのインスタンス、`GetFormattedNumber`メソッド。 例の出力が示すように、現在のカルチャが同じまま呼び出し元のスレッド、最初のタスクと 2 番目のタスクでメイン アプリケーションと 2 つ目のアプリケーション ドメインでそれを実行したときにします。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>   
## <a name="cultureinfo-object-serialization"></a>CultureInfo オブジェクトのシリアル化  
 ときに、<xref:System.Globalization.CultureInfo>オブジェクトがシリアル化、実際に格納されているは<xref:System.Globalization.CultureInfo.Name%2A>と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>します。 環境でのみ正常に逆シリアル化は場所を<xref:System.Globalization.CultureInfo.Name%2A>同じ意味を持ちます。 これが理由は次の 3 つの例を表示する場合。  
  
-   場合、<xref:System.Globalization.CultureInfo.CultureTypes%2A>プロパティの値が<xref:System.Globalization.CultureTypes?displayProperty=nameWithType>、し、そのカルチャは、Windows Vista または Windows オペレーティング システムの以降のバージョンで初めて導入されたの場合は、Windows XP で逆シリアル化することはできません。 同様に、カルチャは、Windows XP Service Pack 2 で初めて導入されたの場合は、カルチャがインストールされていない Windows XP システムをシリアル化を解除することはできません。  
  
-   場合、<xref:System.Globalization.CultureInfo.CultureTypes%2A>値は<xref:System.Globalization.CultureTypes?displayProperty=nameWithType>がシリアル化解除されたコンピューターにインストールされているこのユーザーのカスタム カルチャがないとは、逆シリアル化することはできません。  
  
-   場合、<xref:System.Globalization.CultureInfo.CultureTypes%2A>値は<xref:System.Globalization.CultureTypes?displayProperty=nameWithType>がシリアル化解除されたコンピューターには、この置換カルチャはありません。 とは、同じ特性をすべてではなく、同じ名前を逆シリアル化します。 たとえば、EN-US がコンピューター B ではなくが、コンピューター A では、置換カルチャを<xref:System.Globalization.CultureInfo>オブジェクトを参照するこのカルチャはコンピューター A でシリアル化され、コンピューター B でシリアル化解除は、カルチャのカスタムの特性を none転送されます。 カルチャには、異なる意味を持つが、正常に逆シリアル化します。  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>コントロール パネルのオーバーライド  
 ユーザーは、コントロール パネルの地域と言語に関するオプションを使用して Windows の現在のカルチャに関連付けられている値の一部をオーバーライドすることもできます。 など、ユーザーでは、カルチャの既定以外の通貨を使用するか別の形式で日付を表示することもできます。 一般に、アプリケーションでは、これらのユーザー オーバーライドを受け入れる必要があります。  
  
 場合<xref:System.Globalization.CultureInfo.UseUserOverride%2A>は`true`と指定したカルチャには、Windows の現在のカルチャが一致する、<xref:System.Globalization.CultureInfo>ユーザーのプロパティの設定など、これらの上書きを使用して、<xref:System.Globalization.DateTimeFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティプロパティと、<xref:System.Globalization.NumberFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo>、たとえば、選択したカレンダーは、のいずれかでがない場合、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>メソッドの結果と、プロパティの値が定義されていません。  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>代替の並べ替え順序  
 一部のカルチャでは、複数の並べ替え順序がサポートされています。 例:  
  
-   スペイン語 (スペイン) カルチャが 2 つの並べ替え順序: 既定のインターナショナル ソート順序と従来の並べ替え順序。 インスタンス化すると、 <xref:System.Globalization.CultureInfo> ES-ES カルチャの名前を持つオブジェクトのインターナショナル ソート順序が使用されます。 インスタンス化すると、 <xref:System.Globalization.CultureInfo> es-ES-tradnl カルチャの名前を持つオブジェクトの従来の並べ替え順序を使用します。  
  
-   ZH-CN (中国語 (簡体字、中国)) のカルチャには、2 つの並べ替え順序がサポートされています: と画数によって発音 (既定)。 インスタンス化すると、 <xref:System.Globalization.CultureInfo> ZH-CN カルチャの名前を持つオブジェクトの既定の並べ替え順序を使用します。 インスタンス化すると、 <xref:System.Globalization.CultureInfo> 0x00020804 のローカル識別子を持つオブジェクトの文字列は画数によって並べ替えられます。  
  
 代替の並べ替え順序をサポートするカルチャと、各カルチャの既定の並べ替え順序および代替の並べ替え順序の識別子を次の表に示します。  
  
|カルチャ名|culture|既定の並べ替え名と識別子|代替の並べ替え名と識別子|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|スペイン語 (スペイン)|International: 0x00000C0A|Traditional: 0x0000040A|  
|zh-TW|中国語 (台湾)|Stroke Count: 0x00000404|Bopomofo: 0x00030404|  
|zh-CN|中国語 (中国)|Pronunciation: 0x00000804|Stroke Count: 0x00020804|  
|zh-HK|中国語 (香港特別行政区)|Stroke Count: 0x00000c04|Stroke Count: 0x00020c04|  
|zh-SG|中国語 (シンガポール)|Pronunciation: 0x00001004|Stroke Count: 0x00021004|  
|zh-MO|中国語 (マカオ)|Pronunciation: 0x00001404|Stroke Count: 0x00021404|  
|ja-JP|日本語 (日本)|Default: 0x00000411|Unicode: 0x00010411|  
|ko-KR|韓国語 (韓国)|Default: 0x00000412|Korean Xwansung - Unicode: 0x00010412|  
|de-DE|ドイツ語 (ドイツ)|Dictionary: 0x00000407|Phone Book Sort DIN: 0x00010407|  
|hu-HU|ハンガリー語 (ハンガリー)|Default: 0x0000040e|Technical Sort: 0x0001040e|  
|ka-GE|グルジア語 (グルジア共和国)|Traditional: 0x00000437|Modern Sort: 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>現在のカルチャと UWP アプリ  
 ユニバーサル Windows プラットフォーム (UWP) アプリで、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>と<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>で .NET Framework と .NET Core アプリと同様、プロパティは読み取り/書き込みです。 ただし、UWP アプリは、1 つのカルチャを認識します。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>と<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティ マップの最初の値を[Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)コレクション。  

.NET Framework と .NET Core アプリでは、現在のカルチャはスレッドごとの設定では、および<xref:System.Globalization.CultureInfo.CurrentCulture%2A>と<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>カルチャおよび UI カルチャの現在のスレッドのみのプロパティに反映されます。 UWP アプリでは、現在のカルチャをマップ、 [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)コレクションは、これはグローバル設定です。 設定、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>または<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティは、アプリ全体のカルチャを変更; カルチャはスレッドごとに設定できません。
  
## Examples  
 次の例を作成する方法を示しています、<xref:System.Globalization.CultureInfo>スペイン語 (スペイン) のオブジェクトは、インターナショナル ソート、もう<xref:System.Globalization.CultureInfo>トラディショナル ソートを持つオブジェクト。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
    <related type="Article" href="/globalization/index">グローバル デベロッパー センターを参照してください。</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Globalization.CultureInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">定義済みの <see cref="T:System.Globalization.CultureInfo" /> 識別子、既存の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの <see cref="P:System.Globalization.CultureInfo.LCID" /> プロパティ、または Windows 専用カルチャ識別子。</param>
        <summary>カルチャ識別子によって指定するカルチャに基づいて、<see cref="T:System.Globalization.CultureInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定義済みカルチャ識別子に記載されて、[各国語サポート (NLS) API リファレンス](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center にします。  
  
 ほとんどの場合、`culture`パラメーターは、対応する各国語サポート (NLS) のロケール識別子にマップされます。 値、`culture`パラメーターの値になります、<xref:System.Globalization.CultureInfo.LCID%2A>プロパティの新しい<xref:System.Globalization.CultureInfo>します。  
  
 ロケール名のコンス トラクターを呼び出すことをお勧めします。 <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>、ロケール名は Lcid ことをお勧めします。 カスタム ロケールでは、ロケール名が必要です。  
  
 ユーザーは、コントロール パネルの地域と言語に関するオプションを使用して Windows の現在のカルチャに関連付けられている値の一部をオーバーライドすることもできます。 など、ユーザーでは、カルチャの既定以外の通貨を使用するか別の形式で日付を表示することもできます。 指定したカルチャ識別子には、Windows の現在のカルチャのカルチャ識別子が一致すると、このコンス トラクターの生成、<xref:System.Globalization.CultureInfo>ユーザーのプロパティの設定など、これらの上書きを使用して、<xref:System.Globalization.DateTimeFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティ、およびのプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo> (、選択したカレンダーは、のいずれかではない場合など、 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) メソッドの結果と、プロパティの値が定義されていません。  
  
 このコンス トラクターが生成する指定したカルチャ識別子に Windows の現在のカルチャの識別子が一致しない場合、<xref:System.Globalization.CultureInfo>の指定したカルチャの既定値を使用します。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A>プロパティは常に設定`true`します。  
  
 たとえば、アラビア語 (サウジアラビア) は、Windows の現在のカルチャをユーザーが、予定表の Hijri からグレゴリオ暦に変更したとします。  
  
-   `CultureInfo("0x0401")` (カルチャ名 AR-SA)、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.GregorianCalendar>(これは、ユーザー設定) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`true`します。  
  
-   `CultureInfo("0x041E")` (カルチャ名 th 番目)、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.ThaiBuddhistCalendar>(th 番目の既定の暦では) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`true`します。  
  
 ユーロを使用するカルチャの場合は、.NET Framework および Windows XP はユーロとして既定の通貨を設定します。 ただし、Windows の以前のバージョンがありません。 そのため、以前のバージョンの Windows のユーザーがコントロール パネルの地域と言語に関するオプションを使用して通貨の設定を変更していない場合、通貨できない可能性があります正しかった。 通貨の .NET Framework の既定の設定を使用するアプリケーションを使用する必要があります、<xref:System.Globalization.CultureInfo>を受け入れるコンス トラクター オーバー ロードを`useUserOverride`パラメーターに設定し、`false`します。  
  
> [!NOTE]
>  下位互換性、カルチャを使用して作成、 `culture` 0x0004 または 0x7c04 を使用のパラメーターが必要があります、 <xref:System.Globalization.CultureInfo.Name%2A> ZH-CHS、ZH-CHT のプロパティそれぞれします。 古い名前を使用する理由がない限り、Zh-hans または Zh-hant の現在の標準的なカルチャ名を使用してカルチャを構築したいが代わりにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> が 0 未満です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> が正しいカルチャ識別子ではありません。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以前のバージョンをスローして、<see cref="T:System.ArgumentException" />場合<paramref name="culture" />有効なカルチャ識別子ではありません。 以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このコンス トラクターがスローされます、<see cref="T:System.Globalization.CultureNotFoundException" />します。 実行するアプリ以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]または後で Windows 7 以降、このメソッドを取得しよう、<see cref="T:System.Globalization.CultureInfo" />オブジェクト識別子を持つ<paramref name="culture" />オペレーティング システムは、そのカルチャをサポートしていない場合、オペレーティング システムから、メソッドがスローされます、<see cref="T:System.Globalization.CultureNotFoundException" />例外。</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">定義済みの <see cref="T:System.Globalization.CultureInfo" /> 名、既存の <see cref="T:System.Globalization.CultureInfo" /> の <see cref="P:System.Globalization.CultureInfo.Name" />、または Windows 専用カルチャ名。 <paramref name="name" /> では、大文字と小文字は区別されません。</param>
        <summary>名前で指定するカルチャに基づいて、<see cref="T:System.Globalization.CultureInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定義済みカルチャ名の一覧は、次を参照してください。、[各国語サポート (NLS) API リファレンス](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center にします。 さらに、Windows 10 以降で、`name`任意の有効な bcp-47 言語タグを指定できます。  
  
 場合`name`は<xref:System.String.Empty?displayProperty=nameWithType>、コンス トラクターは、インバリアント カルチャのインスタンスを作成します。 これには、同等の値を取得する、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティ。  
  
 ユーザーは、コントロール パネルの地域と言語に関するオプションを使用して Windows の現在のカルチャに関連付けられている値の一部をオーバーライドすることもできます。 など、ユーザーでは、カルチャの既定以外の通貨を使用するか別の形式で日付を表示することもできます。 カルチャ識別子に関連付けられている場合`name`一致する Windows の現在のカルチャこのコンス トラクターのカルチャ識別子を作成、 <xref:System.Globalization.CultureInfo> のプロパティのユーザー設定など、これらの上書きを使用するオブジェクトを<xref:System.Globalization.DateTimeFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティ、およびのプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo>、たとえば、選択したカレンダーは、のいずれかでがない場合、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>メソッドの結果と、プロパティの値が定義されていません。  
  
 カルチャ識別子に関連付けられている場合`name`Windows の現在のカルチャこのコンス トラクターのカルチャ識別子の作成と一致しません、<xref:System.Globalization.CultureInfo>の指定したカルチャの既定値を使用するオブジェクト。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A>プロパティは常に設定`true`します。  
  
 たとえば、アラビア語 (サウジアラビア) は、Windows の現在のカルチャをユーザーは、グレゴリオ暦にイスラム暦のカレンダーを変更します。  
  
-   `CultureInfo("ar-SA")`、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.GregorianCalendar>(これは、ユーザー設定) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`true`します。  
  
-   `CultureInfo("th-TH")`、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.ThaiBuddhistCalendar>(th 番目の既定の暦では) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`true`します。  
  
 <xref:System.Globalization.CultureInfo.LCID%2A>プロパティの新しい<xref:System.Globalization.CultureInfo>が指定した名前に関連付けられているカルチャ識別子に設定します。  
  
 ユーロを使用するカルチャの場合は、.NET Framework および Windows XP はユーロとして既定の通貨を設定します。 ただし、以前のバージョンの Windows はこのしないでください。 そのため、以前のバージョンの Windows のユーザーがコントロール パネルの地域と言語に関するオプションを使用して通貨の設定を変更していない場合、通貨できない可能性があります正しかった。 通貨の .NET Framework の既定の設定を使用するアプリケーションを使用する必要があります、<xref:System.Globalization.CultureInfo>を受け入れるコンス トラクター オーバー ロードを`useUserOverride`パラメーターに設定し、`false`します。  
  
   
  
## Examples  
 次の例では、現在のカルチャを取得します。 呼び出す、フランス語 (フランス) カルチャ以外のものである場合、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>インスタンスを作成するコンス トラクター、<xref:System.Globalization.CultureInfo>オブジェクトをフランス語 (フランス) カルチャを表し、現在のスレッド カルチャになります。 それ以外の場合、インスタンス化、<xref:System.Globalization.CultureInfo>オブジェクトをフランス語 (ルクセンブルク) カルチャを表し、現在のカルチャになります。  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が null です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> は有効なカルチャ名ではありません。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以前のバージョンをスローして、<see cref="T:System.ArgumentException" />場合<paramref name="name" />有効なカルチャ名ではありません。 以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このコンス トラクターがスローされます、<see cref="T:System.Globalization.CultureNotFoundException" />します。 実行するアプリ以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]または後で Windows 7 以降、このメソッドを取得しよう、<see cref="T:System.Globalization.CultureInfo" />オブジェクト識別子を持つ<paramref name="name" />オペレーティング システムから、オペレーティング システムは、そのカルチャをサポートしていない場合、<paramref name="name" />補助または置換カルチャでのメソッドがスローされます名ではなく、<see cref="T:System.Globalization.CultureNotFoundException" />例外。</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (culture, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">定義済みの <see cref="T:System.Globalization.CultureInfo" /> 識別子、既存の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの <see cref="P:System.Globalization.CultureInfo.LCID" /> プロパティ、または Windows 専用カルチャ識別子。</param>
        <param name="useUserOverride">ユーザーが選択したカルチャ設定 (<see langword="true" />) または既定のカルチャ設定 (<see langword="false" />) のいずれを使用するかを示すブール値。</param>
        <summary>カルチャ識別子で指定したカルチャと、システムからユーザーが選択したカルチャを使用するかどうかを指定するブール値に基づいて、<see cref="T:System.Globalization.CultureInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定義済みカルチャ識別子に記載されて、[各国語サポート (NLS) API リファレンス](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center にします。  
  
 ほとんどの場合、`culture`パラメーターは、対応する各国語サポート (NLS) のロケール識別子にマップされます。 値、`culture`パラメーターの値になります、<xref:System.Globalization.CultureInfo.LCID%2A>プロパティの新しい<xref:System.Globalization.CultureInfo>します。  
  
 ロケール名のコンス トラクターを呼び出すことをお勧めします。 <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>、ロケール名は Lcid ことをお勧めします。 カスタム ロケールでは、ロケール名が必要です。  
  
 ユーザーは、コントロール パネルの地域と言語に関するオプションを使用して Windows の現在のカルチャに関連付けられている値の一部をオーバーライドすることもできます。 など、ユーザーでは、カルチャの既定以外の通貨を使用するか別の形式で日付を表示することもできます。  
  
 アプリケーションに通常ユーザー オーバーライドを禁止しない必要があります。 上書きを禁止すること自体が保証されません。 データの安定性に注意してください。ブログ記事を参照してください。[カルチャのデータと (インバリアントな) を除く安定した見なすべきではない](https://go.microsoft.com/fwlink/?LinkId=156850)します。  
  
 場合、<xref:System.Globalization.CultureInfo.UseUserOverride%2A>プロパティに設定されて`true`と指定されたカルチャ識別子には、Windows の現在のカルチャの識別子が一致する、このコンス トラクターを作成、<xref:System.Globalization.CultureInfo>プロパティのユーザー設定など、これらの上書きを使用します。<xref:System.Globalization.DateTimeFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティ、およびのプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo>、たとえば、選択したカレンダーは、のいずれかでがない場合、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>メソッドの結果と、プロパティの値が定義されていません。  
  
 それ以外の場合、このコンス トラクターの生成、<xref:System.Globalization.CultureInfo>の指定したカルチャの既定値を使用します。  
  
 値、`useUserOverride`パラメーターの値になります、<xref:System.Globalization.CultureInfo.UseUserOverride%2A>プロパティ。  
  
 たとえば、アラビア語 (サウジアラビア) は、Windows の現在のカルチャをユーザーが、予定表の Hijri からグレゴリオ暦に変更したとします。  
  
-   `CultureInfo("0x0401", true)` (カルチャ名 AR-SA)、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.GregorianCalendar>(これは、ユーザー設定) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`true`します。  
  
-   `CultureInfo("0x0401", false)` (カルチャ名 AR-SA)、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.HijriCalendar>(AR-SA の既定の暦では) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`false`します。  
  
-   `CultureInfo("0x041E", true)` (カルチャ名 th 番目)、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.ThaiBuddhistCalendar>(th 番目の既定の暦では) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`true`します。  
  
-   `CultureInfo("0x041E", false)` (カルチャ名 th 番目)、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.ThaiBuddhistCalendar>(th 番目の既定の暦では) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`false`します。  
  
 ユーロを使用するカルチャの場合は、.NET Framework および Windows XP はユーロとして既定の通貨を設定します。 ただし、Windows の以前のバージョンがありません。 そのため、以前のバージョンの Windows のユーザーがコントロール パネルの地域と言語に関するオプションを使用して通貨の設定を変更していない場合、通貨できない可能性があります正しかった。 アプリケーションの設定を通貨の .NET Framework の既定の設定を使用する必要があります、`useUserOverride`パラメーター`false`します。  
  
> [!NOTE]
>  下位互換性、カルチャを使用して作成、 `culture` 0x0004 または 0x7c04 を使用のパラメーターが必要があります、 <xref:System.Globalization.CultureInfo.Name%2A> ZH-CHS、ZH-CHT のプロパティそれぞれします。 古い名前を使用する理由がない限り、Zh-hans または Zh-hant の現在の標準的なカルチャ名を使用してカルチャを構築したいが代わりにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> が 0 未満です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> が正しいカルチャ識別子ではありません。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以前のバージョンをスローして、<see cref="T:System.ArgumentException" />場合<paramref name="culture" />有効なカルチャ識別子ではありません。 以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このコンス トラクターがスローされます、<see cref="T:System.Globalization.CultureNotFoundException" />します。 実行するアプリ以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]または後で Windows 7 以降、このメソッドを取得しよう、<see cref="T:System.Globalization.CultureInfo" />オブジェクト識別子を持つ<paramref name="culture" />オペレーティング システムは、そのカルチャをサポートしていない場合、オペレーティング システムから、メソッドがスローされます、<see cref="T:System.Globalization.CultureNotFoundException" />例外。</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (name, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">定義済みの <see cref="T:System.Globalization.CultureInfo" /> 名、既存の <see cref="T:System.Globalization.CultureInfo" /> の <see cref="P:System.Globalization.CultureInfo.Name" />、または Windows 専用カルチャ名。 <paramref name="name" /> では、大文字と小文字は区別されません。</param>
        <param name="useUserOverride">ユーザーが選択したカルチャ設定 (<see langword="true" />) または既定のカルチャ設定 (<see langword="false" />) のいずれを使用するかを示すブール値。</param>
        <summary>名前で指定したカルチャと、システムからユーザーが選択したカルチャ設定を使用するかどうかを指定するブール値に基づいて、<see cref="T:System.Globalization.CultureInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定義済みカルチャ名の一覧は、次を参照してください。、[各国語サポート (NLS) API リファレンス](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center にします。 さらに、Windows 10 以降で、`name`任意の有効な bcp-47 言語タグを指定できます。  
  
 場合`name`は<xref:System.String.Empty?displayProperty=nameWithType>、コンス トラクターは、インバリアント カルチャのインスタンスを作成します。 これには、同等の値を取得する、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティ。  
  
 ユーザーは、コントロール パネルの地域と言語に関するオプションを使用して現在の Windows のカルチャに関連付けられている値の一部をオーバーライドすることもできます。 など、ユーザーでは、カルチャの既定以外の通貨を使用するか別の形式で日付を表示することもできます。  
  
 アプリケーションに通常ユーザー オーバーライドを禁止しない必要があります。 上書きを禁止すること自体が保証されません。 データの安定性に注意してください。ブログ記事を参照してください。[カルチャのデータと (インバリアントな) を除く安定した見なすべきではない](https://go.microsoft.com/fwlink/?LinkId=156850)します。  
  
 場合、<xref:System.Globalization.CultureInfo.UseUserOverride%2A>プロパティに設定されて`true`と指定されたカルチャ名に関連付けられているカルチャ識別子には、Windows の現在のカルチャのカルチャ識別子が一致する、このコンス トラクターを作成、<xref:System.Globalization.CultureInfo>それらの上書きを使用します。ユーザーのプロパティの設定など、<xref:System.Globalization.DateTimeFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティ、およびのプロパティ、<xref:System.Globalization.NumberFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo>、たとえば、選択したカレンダーは、のいずれかでがない場合、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>メソッドの結果と、プロパティの値が定義されていません。  
  
 それ以外の場合、このコンス トラクターの生成、<xref:System.Globalization.CultureInfo>の指定したカルチャの既定値を使用します。  
  
 値、`useUserOverride`パラメーターの値になります、<xref:System.Globalization.CultureInfo.UseUserOverride%2A>プロパティ。  
  
 たとえば、アラビア語 (サウジアラビア) は、Windows の現在のカルチャをユーザーは、グレゴリオ暦にイスラム暦のカレンダーを変更します。  
  
-   `CultureInfo("ar-SA", true)`、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.GregorianCalendar>(これは、ユーザー設定) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`true`します。  
  
-   `CultureInfo("ar-SA", false)`、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.HijriCalendar>(AR-SA の既定の暦では) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`false`します。  
  
-   `CultureInfo("th-TH", true)`、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.ThaiBuddhistCalendar>(th 番目の既定の暦では) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`true`します。  
  
-   `CultureInfo("th-TH", false)`、<xref:System.Globalization.CultureInfo.Calendar%2A>に設定されている<xref:System.Globalization.ThaiBuddhistCalendar>(th 番目の既定の暦では) と<xref:System.Globalization.CultureInfo.UseUserOverride%2A>に設定されている`false`します。  
  
 <xref:System.Globalization.CultureInfo.LCID%2A>プロパティの新しい<xref:System.Globalization.CultureInfo>が指定した名前に関連付けられているカルチャ識別子に設定します。  
  
 ユーロを使用するカルチャの場合は、.NET Framework および Windows XP はユーロとして既定の通貨を設定します。 ただし、以前のバージョンの Windows はこのしないでください。 そのため、以前のバージョンの Windows のユーザーがコントロール パネルの地域と言語に関するオプションを使用して通貨の設定を変更していない場合、通貨できない可能性があります正しかった。 アプリケーションの設定を通貨の .NET Framework の既定の設定を使用する必要があります、`useUserOverride`パラメーター`false`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が null です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> が正しいカルチャ名ではありません。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以前のバージョンをスローして、<see cref="T:System.ArgumentException" />場合<paramref name="name" />有効なカルチャ名ではありません。 以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このコンス トラクターがスローされます、<see cref="T:System.Globalization.CultureNotFoundException" />します。 実行するアプリ以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]または後で Windows 7 以降、このメソッドを取得しよう、<see cref="T:System.Globalization.CultureInfo" />オブジェクト識別子を持つ<paramref name="name" />オペレーティング システムから、オペレーティング システムは、そのカルチャをサポートしていない場合、<paramref name="name" />補助または置換カルチャでのメソッドがスローされます名ではなく、<see cref="T:System.Globalization.CultureNotFoundException" />例外。</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar" Usage="System.Globalization.CultureInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャで使用する既定の暦を取得します。</summary>
        <value>カルチャで使用する既定の暦を表す <see cref="T:System.Globalization.Calendar" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーは、コントロール パネルの地域と言語に関するオプションを使用して Windows の現在のカルチャに関連付けられている値の一部をオーバーライドすることもできます。 など、ユーザーでは、カルチャの既定以外の通貨を使用するか別の形式で日付を表示することもできます。  
  
 場合<xref:System.Globalization.CultureInfo.UseUserOverride%2A>は`true`と指定したカルチャには、Windows の現在のカルチャが一致する、<xref:System.Globalization.CultureInfo>ユーザーのプロパティの設定など、これらの上書きを使用して、<xref:System.Globalization.DateTimeFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティプロパティと、<xref:System.Globalization.NumberFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo>、たとえば、選択したカレンダーは、のいずれかでがない場合、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>メソッドの結果と、プロパティの値が定義されていません。  
  
 そのため場合、<xref:System.Globalization.CultureInfo.UseUserOverride%2A>は`true`、このプロパティの値は、カルチャで使用される既定の暦と異なる可能性があります。  
  
 アプリケーションで現在使用する暦を変更<xref:System.Globalization.CultureInfo>を設定して、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>のインスタンスである、<xref:System.Globalization.DateTimeFormatInfo>クラス。 新しい予定表が記載の予定表のいずれかを指定する必要があります<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>します。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 日付と時刻の書式設定と関連付けられたをカスタマイズするその他のプロパティがあります<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberSignature Language="F#" Value="member this.ClearCachedData : unit -&gt; unit" Usage="cultureInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>キャッシュされたカルチャ関連情報を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のカルチャと形式パターンなどの情報は、最初に要求時にキャッシュされます。 有効期間中に情報を変更できること、 <xref:System.AppDomain>、たとえば、ユーザーがコントロール パネルの地域と言語のオプション部分を変更とします。 ただし、<xref:System.Globalization.CultureInfo>クラスでの変更が自動的にシステムの設定で検出されません。  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A>メソッドのキャッシュをクリアする<xref:System.Globalization.CultureInfo>によって作成されたオブジェクト<xref:System.Globalization.CultureInfo.GetCultureInfo%2A>で情報を更新し、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>、 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>、および<xref:System.Globalization.RegionInfo.CurrentRegion%2A>プロパティ、現在のシステム設定に基づきます。  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A>メソッドで情報が更新されない、<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>既存のスレッドのプロパティ。 ただし、将来のスレッドがある新しい<xref:System.Globalization.CultureInfo>プロパティの値。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="cultureInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> のコピーを作成します。</summary>
        <returns>現在の <see cref="T:System.Globalization.CultureInfo" /> のコピー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クローンが書き込み可能な場合でも、元の<xref:System.Globalization.CultureInfo>は読み取り専用です。 そのため、複製のプロパティを変更できます。  
  
 オブジェクトのシャロー コピーは、のみ、オブジェクトのコピーです。 オブジェクトに他のオブジェクトへの参照が含まれている場合、シャロー コピーは、参照されるオブジェクトのコピーを作成できません。 元のオブジェクトを代わりに参照します。 これに対し、オブジェクトのディープ コピーでは、オブジェクトのコピーと、直接または間接的には、そのオブジェクトが参照するすべてのコピーを作成します。  
  
 <xref:System.Globalization.CultureInfo.Clone%2A>メソッドは、拡張の簡易コピーを作成します。 によって返されるオブジェクト、 <xref:System.Globalization.CultureInfo.NumberFormat%2A>、 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>、 <xref:System.Globalization.CultureInfo.TextInfo%2A>、および<xref:System.Globalization.CultureInfo.Calendar%2A>プロパティがコピーされます。 そのため、複製された<xref:System.Globalization.CultureInfo>オブジェクトは、元の影響を与えずにそのプロパティのコピー先を変更できます<xref:System.Globalization.CultureInfo>オブジェクト。  
  
   
  
## Examples  
 次のコード例に示します CultureInfo.Clone も複製、<xref:System.Globalization.DateTimeFormatInfo>と<xref:System.Globalization.NumberFormatInfo>インスタンスに関連付けられている、<xref:System.Globalization.CultureInfo>します。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo" Usage="System.Globalization.CultureInfo.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャの文字列を比較する方法を定義する <see cref="T:System.Globalization.CompareInfo" /> を取得します。</summary>
        <value>カルチャの文字列を比較する方法を定義する <see cref="T:System.Globalization.CompareInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CompareInfo%2A>プロパティが返す、<xref:System.Globalization.CompareInfo>カルチャを認識する並べ替えおよび文字列比較操作で使用されるカルチャ固有の情報を提供するオブジェクト。  
  
 ユーザーは、コントロール パネルの地域と言語に関するオプションを使用して Windows の現在のカルチャに関連付けられている値の一部をオーバーライドすることもできます。 など、ユーザーでは、カルチャの既定以外の通貨を使用するか別の形式で日付を表示することもできます。  
  
 場合<xref:System.Globalization.CultureInfo.UseUserOverride%2A>は`true`と指定したカルチャには、Windows の現在のカルチャが一致する、<xref:System.Globalization.CultureInfo>ユーザーのプロパティの設定など、これらの上書きを使用して、<xref:System.Globalization.DateTimeFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティプロパティと、<xref:System.Globalization.NumberFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo>、たとえば、選択したカレンダーは、のいずれかでがない場合、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>メソッドの結果と、プロパティの値が定義されていません。  
  
   
  
## Examples  
 次のコード例を作成する方法を示しています、<xref:System.Globalization.CultureInfo>スペイン語 (スペイン)、インターナショナル ソート、もう<xref:System.Globalization.CultureInfo>トラディショナル ソートでします。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member CreateSpecificCulture : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CreateSpecificCulture name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">定義済みの <see cref="T:System.Globalization.CultureInfo" /> の名前または既存の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの名前。 <paramref name="name" /> では、大文字と小文字は区別されません。</param>
        <summary>指定した名前に関連付けられている特定のカルチャを表す <see cref="T:System.Globalization.CultureInfo" /> を作成します。</summary>
        <returns>次のものを表す <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。 
インバリアント カルチャ (<paramref name="name" /> が空の文字列 ("") の場合)。  
  
- または - 
<paramref name="name" /> に関連付けられた特定のカルチャ (<paramref name="name" /> がニュートラル カルチャの場合)。  
  
- または - 
<paramref name="name" /> で指定されたカルチャ (<paramref name="name" /> が既に特定のカルチャの場合)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>メソッドへの呼び出しをラップする、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>コンス トラクター。  
  
> [!NOTE]
>  定義済みカルチャ名の一覧は、次を参照してください。、[各国語サポート (NLS) API リファレンス](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center にします。 さらに、Windows 10 以降で、`name`任意の有効な bcp-47 言語タグを指定できます。  
  
 カルチャは、3 つのセットにグループ化されます。 インバリアント カルチャ、ニュートラル カルチャ、および特定のカルチャ。 詳細については、の説明を参照して、<xref:System.Globalization.CultureInfo>クラス。  
  
 このメソッドによって返される特定のカルチャのカルチャ識別子には、Windows の現在のカルチャのカルチャ識別子が一致すると、このメソッドは、作成、 <xref:System.Globalization.CultureInfo> Windows カルチャを使用するオブジェクトよりも優先されます。 上書きのプロパティのユーザー設定を含める、<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティおよび<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 インスタンス化する、<xref:System.Globalization.CultureInfo>オブジェクトの既定値のカルチャ設定、ユーザーの上書きではなく呼び出すこと、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>の値を持つコンス トラクター`false`の`useUserOverride`引数。  
  
 ただし、<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>メソッド名には、「特定」という用語が含まれています。、、のバージョンとの間またはカスタム カルチャ、またはユーザー オーバーライドのため、カルチャのデータを変更できることに注意してください。 データを保存するためには、インバリアント カルチャまたはバイナリであるか、または固定のフォームを使用します。  
  
   
  
## Examples  
 次の例の配列を取得する<xref:System.Globalization.CultureInfo>からのニュートラル カルチャを表すオブジェクト、<xref:System.Globalization.CultureInfo.GetCultures%2A>メソッド、配列を並べ替えます。 各ニュートラル カルチャの名前、配列内の要素を反復処理の際に渡して、<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>メソッドとメソッドによって返される特定のカルチャの名前が表示されます。  
  
> [!NOTE]
>  ZH-CHS および ZH-CHT のカルチャ名を使用します。 ただし、Windows Vista を対象し、ZH-CHS および ZH-CHT のではなく Zh-hant ではなく Zh-hans を後では使用するアプリケーション。 Zh-hans および Zh-hant は、現在の標準を表し、古い名前を使用する理由がないために使用する必要があります。  
>   
>  また、例の結果は、中国語繁体字中国ニュートラル カルチャ (zh、ZH-CHT、または Zh-hant) の入力が ZH-TW を返す、台湾語の Windows のインストールで異なる場合があります。  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> は有効なカルチャ名ではありません。  
  
- または - 
<paramref name="name" /> で指定されたカルチャには、関連付けられている特定のカルチャがありません。</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="name" /> が null です。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以前のバージョンをスローして、<see cref="T:System.ArgumentException" />場合<paramref name="name" />有効なカルチャ名ではありません。 以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このメソッドは、<see cref="T:System.Globalization.CultureNotFoundException" />します。</para>
        </block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureInfo.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトに関するカルチャ タイプを取得します。</summary>
        <value>1 つ以上の <see cref="T:System.Globalization.CultureTypes" /> 値のビットごとの組み合わせ。 既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で、<xref:System.Globalization.CultureTypes>列挙と<xref:System.Globalization.CultureInfo.CultureTypes%2A>プロパティ。  
  
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のスレッドで使用するカルチャを表す <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得または設定します。</summary>
        <value>現在のスレッドで使用するカルチャを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo>既定の日付の書式、時間、数値、通貨の値、テキストの順序を並べ替え、規則、大文字小文字の区別を決定し、文字列比較をこのプロパティによって返されるオブジェクトとその関連付けられているオブジェクト。  
  
 現在のカルチャは、実行中のスレッドのプロパティです。 値を取得、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティを取得する複数のパフォーマンスの高い同等は、<xref:System.Globalization.CultureInfo>によって返されるオブジェクト、`Thread.CurrentThread.CurrentCulture`プロパティ。
  
> [!NOTE]
>  .NET Framework 4.5.2 および以前のバージョンで、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>プロパティは読み取り専用です。 つまり、プロパティの値を取得することができますが、これを設定することはできません。 割り当てる現在のカルチャを変更する、<xref:System.Globalization.CultureInfo>新しいカルチャを表すオブジェクト、`Thread.CurrentThread.CurrentCulture`プロパティ。 以降では、 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>プロパティは読み取り/書き込み; 設定し、プロパティの値を取得することができます。 プロパティの値を設定場合、 <xref:System.Globalization.CultureInfo> 、新しいカルチャの値を表すオブジェクトを`Thread.CurrentThread.CurrentCulture`プロパティも変更します。  
  
 このセクションの内容:  
  
 [スレッドのカルチャを決定する方法](#ThreadCulture)   
 [現在のカルチャを取得します。](#Getting)   
 [CurrentCulture プロパティを明示的に設定](#ExplicitSetting)   
 [現在のカルチャとユーザーの上書き](#Overrides)   
 [カルチャ、および Windows アプリ](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>スレッドのカルチャを決定する方法  
 スレッドが開始されると、そのカルチャには、次のように最初に決定します。  
  
-   指定されているカルチャを取得することによって、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>スレッドを実行している、プロパティ値がない場合、アプリケーション ドメイン プロパティ`null`します。  
  
-   スレッドがスレッド プールのスレッド、タスク ベースの非同期操作と、アプリのターゲットを実行している場合、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]またはそのカルチャである .NET Framework の以降のバージョンは、呼び出し元スレッドのカルチャによって決まります。  次の例では、ポルトガル語 (ブラジル) を現在のカルチャを変更し、それぞれは、スレッド ID、そのタスク ID、およびその現在のカルチャが表示されます。 6 つのタスクを起動します。 各タスク (とスレッド) が呼び出し元のスレッドのカルチャを継承しています。  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     詳細については、の「カルチャとタスク ベースの非同期操作」セクションを参照してください、<xref:System.Globalization.CultureInfo>トピック。  
  
-   Windows を呼び出すことによって`GetUserDefaultLocaleName`関数。  
  
 アプリケーションが複数のスレッドを開始して、システムにインストールされたカルチャまたはユーザーの優先カルチャとは異なる特定のカルチャを設定する場合、これらのスレッドの現在のカルチャによって、によって返されるカルチャには、 `GetUserDefaultLocaleName`関数は、カルチャを割り当てない限り、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>スレッドを実行しているアプリケーション ドメインのプロパティ。  
  
 スレッドのカルチャを決定する方法の詳細については、「カルチャとスレッド」セクションを参照してください、<xref:System.Globalization.CultureInfo>リファレンス ページです。  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>現在のカルチャを取得します。  
 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティは、スレッドごとの設定は、各スレッドは、独自のカルチャを持つことができます。 値を取得することによって、現在のスレッドのカルチャを取得する、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティでは、次の例として示します。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 現在のスレッドのカルチャの値を取得することも、<xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType>プロパティ。  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>CurrentCulture プロパティを明示的に設定  
 はじめ、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]既存のスレッドで使用されるカルチャを変更するを設定する、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティを新しいカルチャ。 変更をこのように、スレッドのカルチャを明示的に変更する場合は、スレッドがアプリケーション ドメイン境界を越える場合に永続化します。 次の例では、オランダ語 (オランダ) を現在のスレッド カルチャを変更します。 また、現在のスレッドがアプリケーション ドメインの境界を超えたときに、現在のカルチャのまま変更も表示されます。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  使用して、カルチャを変更する、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティが必要です、<xref:System.Security.Permissions.SecurityPermission>のアクセス許可、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread>値のセット。 スレッドの操作は、セキュリティ状態のスレッドに関連付けられているため危険です。 そのため、信頼できるコードにのみ、し、必要な場合だけ、このアクセス許可を付与する必要があります。 部分的に信頼されたコード内のスレッド カルチャを変更することはできません。  
  
 以降では、 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、フランス語 (カナダ)) などの特定のカルチャまたはニュートラル カルチャ (フランス語) などのいずれかに現在のスレッド カルチャを明示的に変更できます。 ときに、<xref:System.Globalization.CultureInfo>オブジェクトは、ニュートラル カルチャの値を表します<xref:System.Globalization.CultureInfo>などのプロパティ<xref:System.Globalization.CultureInfo.Calendar%2A>、 <xref:System.Globalization.CultureInfo.CompareInfo%2A>、 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>、<xref:System.Globalization.CultureInfo.NumberFormat%2A>と<xref:System.Globalization.CultureInfo.TextInfo%2A>に関連付けられている特定のカルチャを反映しますニュートラル カルチャです。 たとえば、英語版のニュートラル カルチャの主要なカルチャは、英語 (米国)ドイツのカルチャの主要なカルチャは、ドイツ語 (ドイツ) です。 次の例では、フランス語、特定のカルチャ、フランス語 (カナダ)、および、ニュートラル カルチャを設定する、現在のカルチャの書式設定の違いを示します。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 使用することも、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティと共に、<xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType>プロパティを設定する、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>ユーザーへの ASP.NET アプリケーションのプロパティは、次の例に示すように、カルチャの優先します。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>現在のカルチャとユーザーの上書き  
 Windows の標準プロパティの値を上書きするユーザーの許可、<xref:System.Globalization.CultureInfo>オブジェクトとその関連付けられているオブジェクトを使用して**地域と言語のオプション**コントロール パネルの します。 <xref:System.Globalization.CultureInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>プロパティは、これらのユーザーは、次の場合よりも優先されますが反映されます。  
  
-   現在のスレッド カルチャを Windows によって暗黙的に設定かどうか`GetUserDefaultLocaleName`関数。  
  
-   現在のスレッド カルチャがによって定義されている場合、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>プロパティは、現在の Windows システムのカルチャに対応します。  
  
-   によって返されるカルチャを現在のスレッド カルチャを明示的に設定されてかどうか、<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>メソッド、およびカルチャは、Windows システムの現在のカルチャに対応しています。  
  
-   現在のスレッド カルチャが、カルチャによってインスタンス化に明示的に設定されてかどうか、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>コンス トラクター、およびカルチャは、Windows システムの現在のカルチャに対応しています。  
  
 場合によっては、特に、サーバー アプリケーション用に、現在のカルチャを設定、<xref:System.Globalization.CultureInfo>ユーザー オーバーライドを反映するオブジェクトが望ましくない可能性があります。 代わりに、現在のスレッド カルチャを設定、<xref:System.Globalization.CultureInfo>ユーザーを反映していないオブジェクトは、次の方法でよりも優先されます。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>の値を持つコンス トラクター`false`の`useUserOverride`引数。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.GetCultureInfo%2A>読み取り専用キャッシュを返すメソッド<xref:System.Globalization.CultureInfo>オブジェクト。  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>現在のカルチャと UWP アプリ  
 ユニバーサル Windows プラットフォーム (UWP) アプリで、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>で .NET Framework と .NET Core アプリと同様、プロパティは読み取り/書き込み、; を取得して、現在のカルチャの設定の両方に使用することができます。 ただし、UWP アプリは、現在のカルチャと、現在の UI カルチャによって区別されません。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>と<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティ マップの最初の値を[Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)コレクション。  

.NET Framework と .NET Core アプリでは、現在のカルチャはスレッドごとの設定では、および<xref:System.Globalization.CultureInfo.CurrentCulture%2A>プロパティにのみ、現在のスレッドのカルチャが反映されます。 UWP アプリでは、現在のカルチャをマップ、 [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)プロパティは、これはグローバル設定です。 設定、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>プロパティは、アプリ全体のカルチャを変更; カルチャはスレッドごとに設定できません。
  
## Examples  
 次の例では、変更する方法、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>と<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>現在のスレッド。  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">現在のカルチャを設定します。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>実行時にカルチャ固有のリソースを参照するためにリソース マネージャーによって使用される現在のユーザー インターフェイスのカルチャを表す <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得または設定します。</summary>
        <value>実行時にカルチャ固有のリソースを検索するためにリソース マネージャーで使用されるカルチャ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の UI カルチャは、スレッドごとのプロパティです。 これは、各スレッドに独自の現在の UI カルチャ。 このプロパティを取得すると、以降には、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]で、設定、<xref:System.Globalization.CultureInfo>オブジェクトに割り当てられている、`System.Threading.Thread.CurrentThread.CurrentUICulture`プロパティ。 スレッドが開始されると、その UI カルチャには、次のように最初に決定します。  
  
-   指定されているカルチャを取得することによって、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>スレッドを実行している、プロパティ値がない場合、アプリケーション ドメイン プロパティ`null`します。  
  
-   スレッドがスレッド プールのスレッド、タスク ベースの非同期操作と、アプリのターゲットを実行している場合、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]または以降のバージョンの .NET Framework は、その UI カルチャは、呼び出し元スレッドの UI カルチャによって決まります。  次の例では、ポルトガル語 (ブラジル) に、現在の UI カルチャを変更し、それぞれは、スレッド ID、そのタスク ID、およびその現在の UI カルチャが表示されます。 6 つのタスクを起動します。 各タスク (とスレッド) が呼び出し元のスレッドの UI カルチャを継承しています。  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     詳細については、の「カルチャとタスク ベースの非同期操作」セクションを参照してください、<xref:System.Globalization.CultureInfo>トピック。  
  
-   Windows を呼び出すことによって`GetUserDefaultUILanguage`関数。  
  
> [!NOTE]
>  [!INCLUDE[Compact](~/includes/compact-md.md)]、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティは読み取り専用です。 現在の UI カルチャはシステムの地域設定によって決定され、プログラムで変更することはできません。  
  
 以降では、 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]、スレッドで使用されるユーザー インターフェイス カルチャを変更するの設定、<xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>プロパティを新しいカルチャ。 変更をこのように、スレッドの UI カルチャを明示的に変更する場合は、スレッドがアプリケーション ドメイン境界を越える場合に永続化します。  
  
> [!NOTE]
>  .NET Framework 4.5.2 および以前のバージョンで、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティは読み取り専用です。 つまり、プロパティの値を取得することができますが、これを設定することはできません。 現在の UI カルチャを変更するを割り当てる、<xref:System.Globalization.CultureInfo>新しい UI カルチャを表すオブジェクト、`Thread.CurrentThread.CurrentUICulture`プロパティ。 以降では、 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>プロパティは読み取り/書き込み; 設定し、プロパティの値を取得することができます。 プロパティの値を設定場合、 <xref:System.Globalization.CultureInfo> 、新しいカルチャの値を表すオブジェクトを`Thread.CurrentThread.CurrentCulture`プロパティも変更します。  
  
 このセクションの内容:  
  
 [現在の UI カルチャを取得します。](#Getting)   
 [現在の UI カルチャを明示的に設定](#Explicit)   
 [現在の UI カルチャの暗黙的な設定](#Implicit)   
 [セキュリティに関する考慮事項](#Security)   
 [現在の UI カルチャおよび Windows アプリ](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>現在の UI カルチャを取得します。  
 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>プロパティは、スレッドごとの設定は、各スレッドは、独自の UI カルチャを持つことができます。 値を取得することによって、現在のスレッド UI カルチャを取得する、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>プロパティでは、次の例として示します。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 現在のスレッド UI カルチャの値を取得することも、<xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>プロパティ。  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>現在の UI カルチャを明示的に設定  
 以降では、 [!INCLUDE[net_v46](~/includes/net-v46-md.md)]、割り当てることで、現在の UI カルチャを変更することができます、<xref:System.Globalization.CultureInfo>新しいカルチャを表すオブジェクト、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>プロパティ。 (EN-US、DE-DE など) 特定のカルチャまたはニュートラル カルチャ (en、de など)、現在の UI カルチャを設定できます。 次の例では、現在の UI カルチャを FR-FR またはフランス語 (フランス) に設定します。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 マルチ スレッド アプリケーションで明示的に設定できますのいずれかのスレッド UI カルチャを割り当てることによって、<xref:System.Globalization.CultureInfo>オブジェクトをスレッドのカルチャを表す<xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>プロパティ。 現在のスレッドをスレッドのカルチャを設定するには、新しいカルチャを割り当てることができます、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>プロパティ。 スレッドの UI カルチャが明示的に設定すると、別のアプリケーション ドメインでコードを実行およびアプリケーション ドメイン境界を越える場合でも、スレッドが同じカルチャを保持します。  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>現在の UI カルチャの暗黙的な設定  
 既定では、現在の UI カルチャの設定は次のようを作成、メイン アプリケーション スレッドを含む、スレッドが最初の場合。  
  
-   によって定義されているカルチャを使用して、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>プロパティ値がない場合は、現在のアプリケーション ドメインのプロパティ`null`します。  
  
-   システムの既定のカルチャを使用します。 Windows オペレーティング システムを使用するシステムで、共通言語ランタイムは、Windows を呼び出す`GetUserDefaultUILanguage`現在の UI カルチャを設定します。 `GetUserDefaultUILanguage` ユーザー設定の既定の UI カルチャを返します。 ユーザーが既定の UI 言語を設定していない場合は、最初、システムにインストールされているカルチャを返します。  
  
 別のアプリケーション ドメインでコードを実行するスレッドがアプリケーション境界を越える場合は、新しく作成されたスレッドのと同じ方法でそのカルチャが決定されます。  
  
 システムにインストールされている UI カルチャとは異なる特定の UI カルチャを設定し、ユーザーの優先する UI カルチャ、またはアプリケーションが複数のスレッドを開始する場合、これらのスレッドの現在の UI カルチャがである、によって返されるカルチャ`GetUserDefaultUILanguage`関数は、カルチャを割り当てない限り、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>スレッドを実行しているアプリケーション ドメインのプロパティ。  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>セキュリティの考慮事項  
 現在のスレッドのカルチャを変更する必要があります、<xref:System.Security.Permissions.SecurityPermission>のアクセス許可、<xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread>値のセット。  
  
> [!CAUTION]
>  スレッドの操作は、セキュリティ状態のスレッドに関連付けられているため危険です。 そのため、信頼できるコードにのみ、し、必要な場合だけ、このアクセス許可を付与する必要があります。 部分的に信頼されたコード内のスレッド カルチャを変更することはできません。  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>現在の UI カルチャと UWP アプリ  
 
ユニバーサル Windows プラットフォーム (UWP) アプリで、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>で .NET Framework と .NET Core アプリと同様、プロパティは読み取り/書き込み、; を取得して、現在のカルチャの設定の両方に使用することができます。 ただし、UWP アプリは、現在のカルチャと、現在の UI カルチャによって区別されません。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>と<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティ マップの最初の値を[Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)コレクション。

.NET Framework と .NET Core アプリでは、現在の UI カルチャはスレッドごとの設定では、および<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティには、現在のスレッドのみの UI カルチャが反映されます。 UWP アプリでは、現在のカルチャをマップ、 [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)プロパティは、これはグローバル設定です。 設定、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>プロパティは、アプリ全体のカルチャを変更; カルチャはスレッドごとに設定できません。    
  
## Examples  
 次のコード例を変更する方法を示します、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>と<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>現在のスレッド。  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが、リソース ファイルの検索に使用できないカルチャ名に設定されています。 リソース ファイル名に使用できるのは、文字、数字、ハイフン、またはアンダースコアのみです。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">現在の UI カルチャを設定します。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに対応する、日時の表示形式を定義する <see cref="T:System.Globalization.DateTimeFormatInfo" /> を取得または設定します。</summary>
        <value>カルチャに対応する、日時の表示形式を定義する <see cref="T:System.Globalization.DateTimeFormatInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>オーバーライド  
 ユーザーは、コントロール パネルの地域と言語に関するオプションを使用して Windows の現在のカルチャに関連付けられている値の一部をオーバーライドすることもできます。 など、ユーザーでは、カルチャの既定以外の通貨を使用するか別の形式で日付を表示することもできます。  
  
 場合<xref:System.Globalization.CultureInfo.UseUserOverride%2A>は`true`と指定したカルチャには、Windows の現在のカルチャが一致する、<xref:System.Globalization.CultureInfo>ユーザーのプロパティの設定など、これらの上書きを使用して、<xref:System.Globalization.DateTimeFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティプロパティと、<xref:System.Globalization.NumberFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo>、たとえば、選択したカレンダーは、のいずれかでがない場合、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>メソッドの結果と、プロパティの値が定義されていません。  
  
 値、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティおよび<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティは、アプリケーション プロパティにアクセスするまで計算されません。 かどうかはユーザーが変更できる、現在のカルチャ新しいカルチャにアプリケーションが実行されていると、アプリケーションにアクセスするときに、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>または<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ、アプリケーションでのオーバーライドではなく新しいカルチャの既定値を取得します元のカルチャ。 元の現在のカルチャのオーバーライドを保持するために、アプリケーションにアクセスする必要があります、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>と<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ、現在のカルチャを変更する前にします。  
  
   
  
## Examples  
 次のコード例に示します CultureInfo.Clone も複製、<xref:System.Globalization.DateTimeFormatInfo>と<xref:System.Globalization.NumberFormatInfo>インスタンスに関連付けられている、<xref:System.Globalization.CultureInfo>します。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが null に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> プロパティまたは <see cref="T:System.Globalization.DateTimeFormatInfo" /> プロパティのいずれかが設定されており、<see cref="T:System.Globalization.CultureInfo" /> は読み取り専用です。</exception>
        <block subset="none" type="usage">
          <para>場合<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />は、<see cref="T:System.Globalization.TaiwanCalendar" />が、<see cref="P:System.Threading.Thread.CurrentCulture" />中国語 (台湾)、ZH-TW、しをという名前に設定されていない<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />、 <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />、および<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />空の文字列が返されます ("")。</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のアプリケーション ドメインのスレッドの既定のカルチャを取得または設定します。</summary>
        <value>現在のアプリケーション ドメインのスレッドの既定のカルチャ、または現在のシステム カルチャがアプリケーション ドメインの既定のスレッド カルチャの場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以前のバージョンでは、既定では、すべてのスレッドのカルチャに設定されて、Windows のシステム カルチャ。 現在のカルチャは、システムの既定のカルチャによって異なります。 アプリケーションでは、この動作は多くの場合、望ましくありません。 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>プロパティにより、アプリケーション ドメイン内のすべてのスレッドの既定のカルチャを定義するアプリケーション。  
  
> [!IMPORTANT]
>  カルチャを明示的に設定していない場合のアプリケーション ドメインの設定で実行する既存のすべてのスレッド、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>プロパティはこれらのスレッド カルチャも変更します。 ただし、これらのスレッドは、別のアプリケーション ドメインで実行して、そのカルチャがによって定義される場合、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>そのアプリケーション ドメインのプロパティ、または既定値は定義されていない場合、既定のシステム カルチャによって。 このためを明示的に常に、メイン アプリケーション スレッドのカルチャを設定しに依存しないことお勧め、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>メイン アプリケーション スレッドのカルチャを定義するプロパティ。  
  
 値を設定、明示的にそれがされていない限り、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>プロパティは`null`、アプリケーション ドメイン内の明示的なカルチャが割り当てられていないスレッドのカルチャは、Windows の既定のシステム カルチャによって定義されます。  
  
 カルチャ、スレッド、およびアプリケーション ドメインの詳細については、の「カルチャとスレッド」を参照してくださいと"カルチャとアプリケーション ドメイン"のセクションは、<xref:System.Globalization.CultureInfo>リファレンス ページです。  
  
   
  
## Examples  
 次の例は、新しいスレッドの現在のカルチャを定義する .NET Framework の既定の動作を示しています。 起動時に、例では、現在のカルチャと、現在の UI カルチャをフランス語 (フランス) の設定には既にフランス語 (フランス) にシステムの既定のカルチャ以外のすべてのシステムします。 既定のシステム カルチャがフランス語 (フランス) で既に場合、コードは、現在のカルチャと、現在の UI カルチャを英語 (米国) に設定します。 呼び出して、`DisplayRandomNumbers`ルーチンでは、3 つの乱数を生成し、通貨値として表示します。 次に、実行も、新しいスレッドを作成、`DisplayRandomNumbers`ルーチン。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 システム カルチャが英語 (米国) は、コンピューター上の例を実行すると、出力の例に示すよう、メイン スレッドには、フランス語 (フランス) カルチャの書式指定規則を使用して、通貨の値が表示されます。 ただし、ワーカー スレッドのカルチャはアプリケーションの現在のカルチャではなく、Windows システムの現在のカルチャから派生した、作業スレッドには、英語 (米国) カルチャの書式指定規則を使用して、通貨の値が表示されます。  
  
 次の例では、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>と<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>現在のカルチャと新しいアプリケーション スレッドの現在の UI カルチャを定義するプロパティ。 起動時に、例では、現在のカルチャと、現在の UI カルチャをフランス語 (フランス) の設定には既にフランス語 (フランス) にシステムの既定のカルチャ以外のすべてのシステムします。 既定のシステム カルチャがフランス語 (フランス) で既に場合、現在のカルチャと、現在の UI カルチャは英語 (米国) を設定します。 呼び出して、`DisplayRandomNumbers`ルーチンでは、3 つの乱数を生成し、通貨値として表示します。 次に、実行も、新しいスレッドを作成、`DisplayRandomNumbers`ルーチン。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 システム カルチャが英語 (米国) は、コンピューター上の例を実行すると、出力の例で示すように、メイン スレッドとワーカー スレッドの両方は、フランス語 (フランス) カルチャの書式指定規則を使用して、通貨の値を表示します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のアプリケーション ドメイン内のスレッドの既定 UI カルチャを取得または設定します。</summary>
        <value>現在のアプリケーション ドメイン内のスレッドの既定 UI カルチャ、または現在のシステム UI カルチャがアプリケーション ドメイン内の既定スレッド UI カルチャである場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]以前のバージョンでは、既定では、すべてのスレッド UI カルチャに設定されて、Windows のシステム カルチャ。 現在の UI カルチャは、システムの既定のカルチャによって異なります。 アプリケーションでは、この動作は多くの場合、望ましくありません。 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>プロパティを使用して、アプリケーション ドメイン内のすべてのスレッドの既定 UI カルチャを定義できます。  
  
> [!IMPORTANT]
>  UI カルチャを明示的に設定していない場合のアプリケーション ドメインの設定で実行する既存のすべてのスレッド、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>プロパティはこれらのスレッド カルチャも変更します。 ただし、これらのスレッドは、別のアプリケーション ドメインで実行して、そのカルチャがによって定義される場合、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>そのアプリケーション ドメインのプロパティ、または既定値は定義されていない場合、既定のシステム カルチャによって。 このため、することを勧めを常に明示的に、メイン アプリケーション スレッドのカルチャの設定に依存しない、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>メイン アプリケーション スレッドのカルチャを定義するプロパティ。  
  
 値を設定、明示的にそれがされていない限り、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>プロパティは`null`、明示的なカルチャが割り当てられていないアプリケーション ドメイン内のすべてのスレッドの現在のカルチャは、Windows の既定のシステム カルチャによって定義されます。  
  
 カルチャ、スレッド、およびアプリケーション ドメインの詳細については、の「カルチャとスレッド」を参照してくださいと"カルチャとアプリケーション ドメイン"のセクションは、<xref:System.Globalization.CultureInfo>リファレンス ページです。  
  
   
  
## Examples  
 次の例は、新しいスレッドの現在のカルチャを定義する .NET Framework の既定の動作を示しています。 英語、ロシア語の言語のリソースを使用します。 GreetingStrings.txt という名前の次のテキスト ファイルには、英語の言語リソースが含まれています。  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 使用して GreetingStrings.resources をという名前の .resources バイナリ ファイルにコンパイル、[リソース ファイル ジェネレーター](~/docs/framework/tools/resgen-exe-resource-file-generator.md)次のコマンドを使用します。  
  
```console  
resgen greetingstrings.txt  
```  
  
 次のテキスト ファイル ファイルに格納 GreetingStrings.ru という名前にはには、ロシア語の言語リソースが含まれています。  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 使用して GreetingStrings.ru RU.resources をという名前の .resources バイナリ ファイルにコンパイル、[リソース ファイル ジェネレーター](~/docs/framework/tools/resgen-exe-resource-file-generator.md)次のコマンドを使用します。  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 下図のように、アプリケーションのコードは、Example1.vb または Example1.cs という名前のファイルに存在します。 Visual Basic コンパイラの次のコマンドを使用して、実行可能ファイルにコンパイルします。  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 C# コンパイラでのコマンドは、似ています。  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 これは、そのフォールバック カルチャのリソースと一緒に例の実行可能コードを含むアセンブリを作成します。 使用することも、[アセンブリ リンカー](~/docs/framework/tools/al-exe-assembly-linker.md)次のコマンドを使用して、ロシア語 (ロシア) カルチャのリソース ファイルを作成します。  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 起動時に、例では、現在のカルチャと、現在の UI カルチャをロシア語 (ロシア) に設定を既定のシステム カルチャはロシア既にものを除くすべてのシステム (ロシア)。 システムの既定のカルチャが既にある場合ロシア語 (ロシア)、コードのセット、現在のカルチャと現在の UI カルチャ英語 (米国) にします。 呼び出して、`ShowGreeting`ルーチンで、後続のメソッド呼び出しで単純な文字列では、最初に呼び出されたときと少し異なる文字列が表示されます。 次に、実行も、新しいスレッドを作成、`ShowGreeting`ルーチン。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 システム カルチャが英語 (米国) は、コンピューター上の例を実行すると、出力の例で示すようにメイン スレッドには、ロシア語でその初期の文字列が表示されます。 ただし、ワーカー スレッドのカルチャは、アプリケーションの現在のカルチャではなく、Windows システムの現在のカルチャから派生するため、ワーカー スレッドは、英語でその文字列を表示します。  
  
 次の例では、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>と<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>現在のカルチャと新しいアプリケーション スレッドの現在の UI カルチャを定義するプロパティ。  
  
 前の例と同じリソース ファイルを使用します。 コンパイルして、ロシア語のローカライズされたリソースをサテライト アセンブリに埋め込むコマンドは、します実行可能アセンブリの名前が変更される点にも同じですが。  
  
 起動時に、例では、現在のカルチャと、現在の UI カルチャをロシア語 (ロシア) に設定を既定のシステム カルチャはロシア既にものを除くすべてのシステム (ロシア)。 システムの既定のカルチャはロシア語が既に場合 (ロシア)、設定、現在のカルチャと、現在の UI カルチャを英語 (米国) にします。 呼び出して、`ShowGreeting`ルーチンで、後続のメソッド呼び出しで単純な文字列では、最初に呼び出されたときと少し異なる文字列が表示されます。 次に、実行も、新しいスレッドを作成、`ShowGreeting`ルーチン。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 システム カルチャが英語 (米国) は、コンピューター上の例を実行すると、出力の例で示すようにメイン スレッドとワーカー スレッドの両方を表示、文字列ロシア語の言語で。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で、<see cref="P:System.Globalization.CultureInfo.Name" /> プロパティ値が正しくありません。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Globalization.CultureInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>完全にローカライズされたカルチャ名を取得します。</summary>
        <value>形式で完全にローカライズされたカルチャ名*languagefull* [*国/regionfull*] ここで、 *languagefull*言語の完全な名前と*国/regionfull*国/地域の完全な名前を指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティのローカライズされた名前を表す、<xref:System.Globalization.CultureInfo>オブジェクト。  
  
 カルチャ名は、スクリプトや書式設定規則により異なる場合があります。 使用して、返された名前を表示する必要があります、それを解析しようとします。  
  
 カスタム カルチャがによって作成された場合、<xref:System.Globalization.CultureAndRegionInfoBuilder>クラス、<xref:System.Globalization.CultureInfo.DisplayName%2A>プロパティの値に初期化されます、<xref:System.Globalization.CultureInfo.NativeName%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例では、ニュートラル カルチャのいくつかのプロパティが表示されます。  
  
> [!NOTE]
>  例には、それぞれ 0x0004 と 0x7c04 を使用のカルチャ識別子を持つ ZH-CHS および ZH-CHT のカルチャが表示されます。 ただし、Windows Vista アプリケーションでは、ZH-CHS および ZH-CHT のではなく Zh-hant 名ではなく Zh-hans 名を使用する必要があります。 Zh-hans および Zh-hant 名は、現在の標準を表すし、古い名前を使用する理由がないために使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnglishName : string" Usage="System.Globalization.CultureInfo.EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>英語で表した "*languagefull* [*country/regionfull*]" という形式のカルチャ名を取得します。</summary>
        <value>形式のカルチャ名*languagefull* [*国/regionfull*] 英語で*languagefull*言語の完全な名前と*国/regionfull*国/地域の完全な名前を指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 たとえば、<xref:System.Globalization.CultureInfo.EnglishName%2A>特定のカルチャ名 EN-US は「英語 (米国)」。  
  
 このプロパティの値は、.NET Framework の言語バージョンに関係なく同じです。  
  
   
  
## Examples  
 次のコード例では、ニュートラル カルチャのいくつかのプロパティが表示されます。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、ZH-CHS および ZH-CHT のではなく Zh-hant 名ではなく Zh-hans 名を使用する必要があります。 Zh-hans および Zh-hant 名は、現在の標準を表すし、古い名前を使用する理由がないために使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cultureInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">現在の <see cref="T:System.Globalization.CultureInfo" /> と比較するオブジェクト。</param>
        <summary>指定したオブジェクトが現在の <see cref="T:System.Globalization.CultureInfo" /> と同じカルチャかどうかを判断します。</summary>
        <returns>
          <paramref name="value" /> が現在の <see cref="T:System.Globalization.CultureInfo" /> と同じカルチャの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Object.Equals%2A?displayProperty=nameWithType> をオーバーライドします。  
  
 2 つ<xref:System.Globalization.CultureInfo>オブジェクトが等しいと見なされます場合、<xref:System.Globalization.CultureInfo.Name%2A>と<xref:System.Globalization.CultureInfo.CompareInfo%2A>プロパティが等しい。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberSignature Language="F#" Value="member this.GetConsoleFallbackUICulture : unit -&gt; System.Globalization.CultureInfo" Usage="cultureInfo.GetConsoleFallbackUICulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>グラフィック ユーザー インターフェイスの既定のカルチャが不適切な場合、コンソール アプリケーションに適した代替のユーザー インターフェイス カルチャを取得します。</summary>
        <returns>コンソール上のテキストの読み取りおよび表示に使用する代替カルチャ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アラビア語、ヘブライ語、ウルドゥ語、およびシリア語などの言語は、双方向のテキストに基づいています。 グラフィカル ユーザー インターフェイスを持ち、Windows アプリケーションでは、双方向言語をサポートします。 ただし、コンソール アプリケーション、オペレーティング システム コンソールのユーザー インターフェイスのテキストを使用しているためには、双方向サポートは提供されません。 そのため、アラビア語またはヘブライ語にコンソール アプリケーションをローカライズする場合、アプリケーションはコンソール画面に読み取り不可能なテキストを表示します。  
  
 ユーザー インターフェイスのカルチャでは、アプリケーションがユーザーの入力と出力をサポートするために必要があるあり、既定では、オペレーティング システムのカルチャと同じリソースを指定します。 たとえば、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>プロパティは、アラビア語のオペレーティング システムのアラビア語のカルチャを返します。 使用して、<xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A>コンソール アプリケーションのユーザー インターフェイスの適切なカルチャを取得します。 アプリケーションは、フォールバック ユーザー インターフェイスのカルチャを取得した後、現在のスレッドの現在のユーザー インターフェイス カルチャにカルチャを割り当てます。 詳細については、「明示的に設定、現在の UI カルチャ」セクションを参照してください、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティ。  
  
 定義済みカルチャ名から別のフォールバック ユーザー インターフェイス カルチャ名を持つ定義済みのカルチャを次に示します。  
  
|定義済みカルチャ|カルチャ名|フォールバック ユーザー インターフェイス カルチャ名|  
|------------------------|------------------|------------------------------------------|  
|アムハラ語|am|en-US|  
|アムハラ語 (エチオピア)|am ET|en-US|  
|(ニュートラル アラビア語)|ar|en-US|  
|アラビア語 (アラブ首長国連邦)|ar AE|en-US|  
|アラビア語 (バーレーン)|ar-BH|en-US|  
|アラビア語 (アルジェリア)|ar-DZ|fr-FR|  
|アラビア語 (エジプト)|ar-EG|en-US|  
|アラビア語 (イラク)|ar IQ|en-US|  
|アラビア語 (ヨルダン)|ar JO|en-US|  
|アラビア語 (クウェート)|ar-KW|en-US|  
|アラビア語 (レバノン)|ar-LB|en-US|  
|アラビア語 (リビア)|ar LY|en-US|  
|アラビア語 (モロッコ)|ar MA|fr-FR|  
|アラビア語 (オマーン)|ar OM|en-US|  
|アラビア語 (カタール)|ar-QA|en-US|  
|アラビア語 (サウジアラビア)|ar-SA|en-US|  
|アラビア語 (シリア)|ar-SY|en-US|  
|アラビア語 (チュニジア)|ar TN|fr-FR|  
|アラビア語 (イエメン)|ar-さらば|en-US|  
|アッサム|as|en-US|  
|アッサム語 (インド)|IN として|en-US|  
|ベンガル語|bn|en-US|  
|ベンガル語 (バングラデシュ)|bn BD|en-US|  
|ベンガル語 (インド)|bn IN|en-US|  
|チベット語|bo|en-US|  
|チベット語 (PRC)|bo CN|en-US|  
|ディベヒ語|dv|en-US|  
|ディベヒ語 (インド)|dv-MV|en-US|  
|ペルシャ語|fa|en-US|  
|ペルシャ語 (イラン)|fa-IR|en-US|  
|グジャラート語|gu|en-US|  
|グジャラート語 (インド)|gu IN|en-US|  
|ヘブライ語|he|en-US|  
|ヘブライ語 (イスラエル)|彼は IL|en-US|  
|ヒンディー語|こんにちは|en-US|  
|ヒンディー語 (インド)|こんにちは、IN|en-US|  
|イ語|ii|en-US|  
|イ語 (PRC)|ii CN|en-US|  
|イヌクティトット語のカナダ音節文字|iu 缶|en-US|  
|イヌクティトット語音節文字 (カナダ)|iu-CA 缶|en-US|  
|クメール語|km|en-US|  
|クメール語 (カンボジア)|km-KH|en-US|  
|カナラ語|kn|en-US|  
|カンナダ語 (インド)|kn-IN|en-US|  
|コーンクニー語|kok|en-US|  
|コーンクニー語 (インド)|kok IN|en-US|  
|ラオス語|lo|en-US|  
|ラオス語 (ラオス人民民主共和国)|lo-LA|en-US|  
|マラヤーラム語|ml|en-US|  
|マラヤーラム語 (インド)|ml-IN|en-US|  
|モホーク語|moh|en-US|  
|モホーク語 (カナダ)|moh CA|en-US|  
|マラーティー語|mr|en-US|  
|マラーティー語 (インド)|mr IN|en-US|  
|ネパール語|ne|en-US|  
|ネパール語 (ネパール)|ne NP|en-US|  
|ノルウェー語|Ｘ|nb-NO|  
|オリヤー語|または|en-US|  
|オリヤー語 (インド)|または、IN|en-US|  
|パンジャブ語|pa|en-US|  
|パンジャーブ語 (インド)|pa-IN|en-US|  
|ダリー語|プル要求|en-US|  
|ダリー語 (アフガニスタン)|pr AF|en-US|  
|パシュトゥー語|ps|en-US|  
|パシュトゥー語 (アフガニスタン)|ps-AF|en-US|  
|サンスクリット語|sa|en-US|  
|サンスクリット語 (インド)|sa の|en-US|  
|シンハラ語|si|en-US|  
|シンハラ語 (スリランカ)|si-LK|en-US|  
|シリア語|syr|en-US|  
|シリア語 (シリア)|syr SY|en-US|  
|タミール語|ta|en-US|  
|タミール語 (インド)|ta イン|en-US|  
|テルグ語|te|en-US|  
|テルグ語 (インド)|te IN|en-US|  
|タイ語|th|en-US|  
|タイ語 (タイ)|th Th|en-US|  
|ウイグル語|ug|en-US|  
|ウイグル語 (PRC)|ug CN|en-US|  
|ウルドゥー語|あなたの|en-US|  
|ウルドゥ語 (パキスタン)|ur-PK|en-US|  
|ベトナム語|vi|en-US|  
|ベトナム語 (ベトナム)|vi-VN|en-US|  
  
 アプリケーションで使用して<xref:System.Globalization.CultureAndRegionInfoBuilder>独自のコンソール フォールバック カルチャを持つことができます、カルチャ、およびそのカルチャの交換を作成します。  
  
   
  
## Examples  
 次のコード例では、カルチャ オブジェクトに関連付けられた代替のユーザー インターフェイスのカルチャが表示されます。  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>カルチャのキャッシュされた読み取り専用インスタンスを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">ロケール識別子 (LCID)。</param>
        <summary>指定されたカルチャ識別子を使用して、カルチャのキャッシュされた読み取り専用インスタンスを取得します。</summary>
        <returns>読み取り専用の <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの文字列オーバー ロードを使用することをお勧めします。 (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>)、Lcid ではなく、ロケール名を使用する必要があります。 カスタム ロケールでは、ロケール名が必要です。  
  
 場合`culture`は、返された現在のカルチャのロケール識別子<xref:System.Globalization.CultureInfo>オブジェクトはすべてのユーザー上書きが反映されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> が 0 未満です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> はサポートされていないカルチャを指定します。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以前のバージョンをスローして、<see cref="T:System.ArgumentException" />場合<paramref name="culture" />有効なカルチャ識別子ではありません。 以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このメソッドは、<see cref="T:System.Globalization.CultureNotFoundException" />します。 実行するアプリ以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]または後で Windows 7 以降、このメソッドを取得しよう、<see cref="T:System.Globalization.CultureInfo" />オブジェクト識別子を持つ<paramref name="culture" />オペレーティング システムは、そのカルチャをサポートしていない場合、オペレーティング システムから、メソッドがスローされます、<see cref="T:System.Globalization.CultureNotFoundException" />します。</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">カルチャの名前。 <paramref name="name" /> では、大文字と小文字は区別されません。</param>
        <summary>指定されたカルチャ名を使用して、カルチャのキャッシュされた読み取り専用インスタンスを取得します。</summary>
        <returns>読み取り専用の <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定義済みカルチャ名の一覧は、次を参照してください。、[各国語サポート (NLS) API リファレンス](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center にします。 さらに、Windows 10 以降で、`name`任意の有効な bcp-47 言語タグを指定できます。  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A>メソッドは、取得、キャッシュされた読み取り専用<xref:System.Globalization.CultureInfo>オブジェクト。 対応する呼び出しよりも優れたパフォーマンスを提供、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType>コンス トラクター。  
  
 場合`name`、返された現在のカルチャの名前を指定<xref:System.Globalization.CultureInfo>オブジェクトはすべてのユーザー上書きが反映されません。 これにより、メソッドのサーバー アプリケーションまたはツール、システム上の実際のユーザー アカウントがないと、複数のカルチャの読み込みを効率的にする必要があるに適しています。  
  
 場合`name`は<xref:System.String.Empty?displayProperty=nameWithType>、インバリアント カルチャを返します。 値を取得するのと同じ、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が null です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> はサポートされていないカルチャを指定します。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以前のバージョンをスローして、<see cref="T:System.ArgumentException" />場合<paramref name="name" />有効なカルチャ名ではありません。 以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このメソッドは、<see cref="T:System.Globalization.CultureNotFoundException" />します。 実行するアプリ以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]または後で Windows 7 以降、このメソッドを取得しよう、<see cref="T:System.Globalization.CultureInfo" />オブジェクト識別子を持つ<paramref name="name" />オペレーティング システムから、オペレーティング システムは、そのカルチャをサポートしていない場合、<paramref name="name" />補助または置換カルチャでのメソッドがスローされます名ではなく、<see cref="T:System.Globalization.CultureNotFoundException" />します。</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, altName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="altName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">カルチャの名前。 <paramref name="name" /> では、大文字と小文字は区別されません。</param>
        <param name="altName">
          <paramref name="name" /> の初期化に使用される <see cref="T:System.Globalization.TextInfo" /> オブジェクトおよび <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを提供するカルチャの名前。 <paramref name="altName" /> では、大文字と小文字は区別されません。</param>
        <summary>カルチャのキャッシュされた読み取り専用インスタンスを取得します。 パラメーターは、別のカルチャで指定された <see cref="T:System.Globalization.TextInfo" /> オブジェクトおよび <see cref="T:System.Globalization.CompareInfo" /> オブジェクトで初期化されたカルチャを指定します。</summary>
        <returns>読み取り専用の <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定義済みカルチャ名の一覧は、次を参照してください。、[各国語サポート (NLS) API リファレンス](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center にします。 さらに、Windows 10 以降で、`name`任意の有効な bcp-47 言語タグを指定できます。  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A>メソッドは、取得、キャッシュされた読み取り専用<xref:System.Globalization.CultureInfo>オブジェクト。 対応する呼び出しよりも優れたパフォーマンスを提供する<xref:System.Globalization.CultureInfo.%23ctor%2A>コンス トラクター。 指定されているのと同じカルチャを作成するメソッドが使用される、`name`パラメーターがさまざまな並べ替えと大文字小文字の区別ルールします。  
  
 場合`name`または`altName`名前は、現在のカルチャの返されたオブジェクトは反映されていませんすべてのユーザー上書きします。 場合`name`は<xref:System.String.Empty?displayProperty=nameWithType>、インバリアント カルチャを返します。 値を取得するのと同じ、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティ。 場合`altName`は<xref:System.String.Empty?displayProperty=nameWithType>書記と比較メソッドを使用して、インバリアント カルチャで指定された規則。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> または <paramref name="altName" /> が null です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> または <paramref name="altName" /> が、サポートされていないカルチャを指定しています。 詳細については、「呼び出し時の注意」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以前のバージョンをスローして、<see cref="T:System.ArgumentException" />場合<paramref name="name" />または<paramref name="altName" />有効なカルチャ名ではありません。 以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このメソッドは、<see cref="T:System.Globalization.CultureNotFoundException" />します。 実行するアプリ以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]または後で Windows 7 以降、このメソッドを取得しよう、<see cref="T:System.Globalization.CultureInfo" />オブジェクト識別子を持つ<paramref name="name" />オペレーティング システムから、オペレーティング システムは、そのカルチャをサポートしていない場合、<paramref name="name" />補助または置換カルチャでのメソッドがスローされます名ではなく、<see cref="T:System.Globalization.CultureNotFoundException" />例外。 実行するアプリ以降では、[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]または後で Windows 7 以降、このメソッドを取得しよう、<see cref="T:System.Globalization.CultureInfo" />オブジェクト識別子を持つ<paramref name="name" />オペレーティング システムから、オペレーティング システムは、そのカルチャをサポートしていない場合、<paramref name="name" />補助または置換カルチャでのメソッドがスローされます名ではなく、<see cref="T:System.Globalization.CultureNotFoundException" />例外。</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfoByIetfLanguageTag : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">RFC 4646 標準で指定された言語の名前。</param>
        <summary>非推奨。 指定された RFC 4646 言語タグで示される言語特性を持つ、読み取り専用 <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得します。</summary>
        <returns>読み取り専用の <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドと<xref:System.Globalization.CultureInfo.IetfLanguageTag%2A>プロパティが非推奨とされます。 これらの要素を使用する代わりに、アプリケーションで、新しい使用する<xref:System.Globalization.CultureInfo>オブジェクトを呼び出すと、<xref:System.Globalization.CultureInfo.Name%2A>プロパティ。 IETF タグおよび名は同じです。  
  
 Internet Engineering Task Force (IETF) によって維持される、RFC 4646 標準では、言語を識別する uniform 手段を提供する IETF 言語タグを定義します。 IETF 言語タグの形式はによって返されるカルチャ名と同じ、<xref:System.Globalization.CultureInfo.Name%2A>プロパティ、カルチャを一意に識別しません。 別のカルチャは、これらのカルチャの言語特性が同じ場合に、同じ IETF 言語タグを共有します。 カルチャの言語の特性に含まれる、<xref:System.Globalization.TextInfo>オブジェクトに関連付けられている、<xref:System.Globalization.CultureInfo>オブジェクト。  
  
 IETF 言語タグは、必須の言語識別子、オプションのスクリプト識別子、および省略可能なリージョン識別子で構成されます。  
  
 アプリケーションは、取得されたカルチャを使用して、スペルや文法チェッカーの管理などの言語固有のタスクを制御する必要があります。 アプリケーションでは、テキストの並べ替えや日付、時刻の書式設定など、カルチャに固有のタスクを制御するのに取得されたカルチャを使用する必要があります。  
  
 詳細については、「RFC 4646、「タグを識別する言語、」および最新ドラフト標準の下書きのプラス-langtags-05.txt、での使用」を参照していますください。 [ http://go.microsoft.com/fwlink/?LinkId=100231](https://go.microsoft.com/fwlink/?LinkId=100231)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が null です。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> は、サポートされているカルチャに対応していません。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]以前のバージョンをスローして、<see cref="T:System.ArgumentException" />場合<paramref name="name" />サポートされているカルチャの名前に対応していません。 以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、このメソッドは、<see cref="T:System.Globalization.CultureNotFoundException" />します。</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberSignature Language="F#" Value="static member GetCultures : System.Globalization.CultureTypes -&gt; System.Globalization.CultureInfo[]" Usage="System.Globalization.CultureInfo.GetCultures types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" />
      </Parameters>
      <Docs>
        <param name="types">取得するカルチャへのフィルターとして使用する列挙値のビットごとの組み合わせ。</param>
        <summary>サポートされているカルチャを、指定した <see cref="T:System.Globalization.CultureTypes" /> パラメーターでフィルター処理した結果のリストを取得します。</summary>
        <returns>
          <paramref name="types" /> パラメーターで指定されたカルチャを格納する配列。 カルチャの配列が並べ替えられていません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetCultures%2A>メソッドを呼び出すと最もよく、`types`パラメーターは、次の値に設定します。  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>、すべての特定のカルチャが返されます。  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>、すべてのニュートラル カルチャと、インバリアント カルチャが返されます。  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>、すべてのカルチャ ニュートラルまたは特定のカルチャ、カルチャ、Windows システムにインストールされていると、ユーザーによって作成されたカスタムのカルチャが返されます。  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>、によって登録されたものなど、すべてのカスタム カルチャが返されます、<xref:System.Globalization.CultureAndRegionInfoBuilder>クラス。 Windows 10 では、前に Windows のバージョンでは、<xref:System.Globalization.CultureTypes.UserCustomCulture>値ユーザー定義のカスタム カルチャのすべてに適用されます。 Windows 10 以降に適用されるカルチャの完全なデータがないし、ローカルの一意の識別子がないシステム カルチャによって示される、<xref:System.Globalization.CultureInfo.LCID%2A>プロパティの値。 結果として、次のコードは Windows 10 および Windows の以前のバージョンを実行した場合、異なる結果を返します。  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 次のコード例では、ニュートラル カルチャのいくつかのプロパティが表示されます。  
  
> [!NOTE]
>  例には、それぞれ 0x0004 と 0x7c04 を使用のカルチャ識別子を持つ ZH-CHS および ZH-CHT のカルチャが表示されます。 ただし、Windows Vista アプリケーションでは、ZH-CHS および ZH-CHT のではなく Zh-hant 名ではなく Zh-hans 名を使用する必要があります。 Zh-hans および Zh-hant 名は、現在の標準を表すし、古い名前を使用する理由がないために使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="types" /> で指定されている <see cref="T:System.Globalization.CultureTypes" /> 値の組み合わせが正しくありません。</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="cultureInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">書式指定オブジェクトを取得する <see cref="T:System.Type" />。 このメソッドは、<see cref="T:System.Globalization.NumberFormatInfo" /> 型と <see cref="T:System.Globalization.DateTimeFormatInfo" /> 型だけをサポートしています。</param>
        <summary>指定した型に書式指定する方法を定義するオブジェクトを取得します。</summary>
        <returns>
          <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> プロパティの値。<paramref name="formatType" /> が <see cref="T:System.Globalization.NumberFormatInfo" /> クラスの <see cref="T:System.Type" /> オブジェクトの場合は、現在の <see cref="T:System.Globalization.CultureInfo" /> の既定の数値書式情報が格納された <see cref="T:System.Globalization.NumberFormatInfo" /> です。  
  
- または - 
<see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> プロパティの値。<paramref name="formatType" /> が <see cref="T:System.Globalization.DateTimeFormatInfo" /> クラスの <see cref="T:System.Type" /> オブジェクトの場合は、現在の <see cref="T:System.Globalization.CultureInfo" /> の既定の日付および時刻の形式に関する情報が格納された <see cref="T:System.Globalization.DateTimeFormatInfo" /> です。  
  
- または - 
<paramref name="formatType" /> がその他のオブジェクトである場合は null。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> は、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> を実装します。  
  
 `NumberFormatInfo` 基本データ型の形式のメソッドと組み合わせて使用するカルチャ固有の数値書式を提供します。 `DateTimeFormatInfo` 日付と時刻の値が特定のカルチャの書式設定方法を制御します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cultureInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> のハッシュ関数として機能します。ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造での使用に適しています。</summary>
        <returns>現在の <see cref="T:System.Globalization.CultureInfo" /> のハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> をオーバーライドします。  
  
 このメソッドは、<xref:System.Globalization.CultureInfo.Equals%2A> メソッドによって等しいと評価された 2 つのオブジェクトに対して同じハッシュ コードを生成します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非推奨。 言語の RFC 4646 標準 ID を取得します。</summary>
        <value>言語の RFC 4646 標準 ID を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このプロパティと<xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A>メソッドが非推奨とされます。 代わりに、使用する必要があります、<xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>プロパティ。 IETF タグおよび名は同じです。  
  
 Internet Engineering Task Force (IETF) によって維持される、RFC 4646 標準では、言語を識別する uniform 手段を提供する IETF 言語タグを定義します。 IETF 言語タグの形式がによって返されるカルチャ名と同様に、<xref:System.Globalization.CultureInfo.Name%2A>プロパティ、カルチャを一意に識別しません。 つまり、異なるカルチャは、これらのカルチャの言語特性が同じ場合、同じ IETF 言語タグを共有します。 カルチャの言語の特性に含まれる、<xref:System.Globalization.TextInfo>オブジェクトに関連付けられている、<xref:System.Globalization.CultureInfo>オブジェクト。  
  
 IETF 言語タグは、必須の言語識別子、オプションのスクリプト識別子、および省略可能なリージョン識別子で構成されます。  
  
 詳細については、次を参照してください。 [RFC 5646、"特定の言語タグ](https://go.microsoft.com/fwlink/?LinkId=230876)します。 サブタグの一覧は、次を参照してください。 [IANA 言語サブタグ レジストリ](https://go.microsoft.com/fwlink/?LinkId=230877)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstalledUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オペレーティング システムと共にインストールされたカルチャを表す <see cref="T:System.Globalization.CultureInfo" /> を取得します。</summary>
        <value>オペレーティング システムと共にインストールされたカルチャを表す <see cref="T:System.Globalization.CultureInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows での日本語版など、ローカライズされたオペレーティング システムでは、このプロパティは、オペレーティング システムのカルチャを返します。 このプロパティと同等の`GetSystemDefaultUILanguage`Windows api。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに依存しない (インバリアントな) <see cref="T:System.Globalization.CultureInfo" /> オブジェクトを取得します。</summary>
        <value>カルチャに依存しない (インバリアントな) オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インバリアント カルチャがカルチャに依存しません。関連付けられているすべての国/地域ではなくが、英語の言語。 名前を空の文字列を使用して、インバリアント カルチャを指定して ("") への呼び出しで、<xref:System.Globalization.CultureInfo>メソッドをインスタンス化します。 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> また、インバリアント カルチャのインスタンスを取得します。 ほぼすべてのメソッドで使用できますが、<xref:System.Globalization>カルチャを必要とする名前空間。 などのプロパティによって返されるオブジェクト<xref:System.Globalization.CultureInfo.CompareInfo%2A>、 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>、および<xref:System.Globalization.CultureInfo.NumberFormat%2A>も反映文字列比較とインバリアント カルチャの規則を書式設定します。  
  
 カルチャに依存するデータは、ユーザーのカスタマイズによって、または .NET Framework またはオペレーティング システムの更新によって変更される可能性があるとは異なりは、インバリアント カルチャのデータは、時間の経過と共に、インストールされているカルチャに関係なくは、安定して、ユーザーがカスタマイズすることはできません。 これにより、インバリアント カルチャ、カルチャに依存しない結果を必要とする操作に特に役立ちます書式設定と解析を永続化操作は、データ、または並べ替えと順序付けにデータを表示することが必要な操作を書式設定など、カルチャに関係なく一定の順序。  
  
## <a name="string-operations"></a>文字列操作  
 カルチャに依存した文字列操作のない現在のスレッド カルチャの規則によって影響を受けるし、一貫性のあるカルチャに関係なく、インバリアント カルチャを使用できます。 たとえば、固定の順序で表示または現在のスレッド カルチャに関係なく文字列に大文字と小文字の規則の標準セットを適用する並べ替えられたデータをする可能性があります。 これを行うには、渡す、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>オブジェクトを持つメソッドを<xref:System.Globalization.CultureInfo>パラメーターなど<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29>と<xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>。  
  
## <a name="persisting-data"></a>データの保持  
 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>カルチャに依存しない形式でデータを保持するプロパティを使用できます。 これは、既知の形式は変更されませんし、カルチャに関係なくデータを逆シリアル化およびシリアル化に使用できるを提供します。 データの逆シリアル化後にフォーマットできます、現在のユーザーのカルチャの規則に基づいて、適切な。  
  
 たとえば、文字列形式の日付と時刻のデータを保持する場合は、渡すことができます、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>オブジェクトを<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>または<xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>、文字列を作成するメソッドに渡すことができます、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>オブジェクトを<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>または<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>文字列を日付と時刻の値に変換するメソッド。 この方法により、基になる日付と時刻の値は、データを読み取ったり、別のカルチャのユーザーによって作成されたときに変更されません。  
  
 次の例では、インバリアント カルチャを使用して永続化する、<xref:System.DateTime>を文字列として値。 文字列を解析し、フランス語 (フランス) とドイツ語 (ドイツ) カルチャの書式設定規則を使用してその値を表示します。  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>セキュリティ上の決定  
 (システム リソースへのアクセスを許可するかどうか) などのセキュリティに関する決定を行う場合、文字列の比較や大文字と小文字の変更の結果に基づき、する必要がありますいないインバリアント カルチャを使用します。 代わりが含まれるメソッドを呼び出してまたは区別しない序数に基づく比較を実行する必要があります、<xref:System.StringComparison>パラメーターは、いずれかを指定<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>または<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>を引数として。 カルチャに依存する文字列操作を実行するコードで、現在のカルチャが変更された場合、またはコードを実行しているコンピューター上のカルチャは、コードをテストするために使用するカルチャによって異なる場合、セキュリティの脆弱性が生じる場合があります。 これに対し、序数に基づく比較は、比較する文字のバイナリ値にのみ依存します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNeutralCulture : bool" Usage="System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> がニュートラル カルチャを表しているかどうかを示す値を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> がニュートラル カルチャを表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ニュートラル カルチャに関連付けられるカルチャは、国または地域ではなく、言語にします。 両方の言語と国または地域に関連付けられているカルチャが特定のカルチャとは異なります。 たとえば、fr は、FR-FR はフランスのフランス語のカルチャの名前、フランス語のニュートラル カルチャの名前です。  
  
 このプロパティを返す場合`false`カルチャが特定のカルチャまたはインバリアント カルチャのいずれか。  
  
   
  
## Examples  
 次のコード例では、中国語の言語を使用しているカルチャがニュートラル カルチャを決定します。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、ZH-CHS および ZH-CHT のではなく Zh-hant 名ではなく Zh-hans 名を使用する必要があります。 Zh-hans および Zh-hant 名は、現在の標準を表すし、古い名前を使用する理由がないために使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.CultureInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> が読み取り専用かどうかを示す値を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> が読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Globalization.CultureInfo>は読み取り専用、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>と<xref:System.Globalization.CultureInfo.NumberFormat%2A>インスタンスは、また読み取り専用です。  
  
   
  
## Examples  
 コード例を次に示します<xref:System.Globalization.CultureInfo.IsReadOnly%2A>を保護することができます、<xref:System.Globalization.DateTimeFormatInfo>と<xref:System.Globalization.NumberFormatInfo>インスタンスに関連付けられている、<xref:System.Globalization.CultureInfo>します。  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int" Usage="System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクティブな入力ロケール識別子を取得します。</summary>
        <value>入力ロケール識別子を指定する 32 ビットの符号付き数値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 入力ロケール識別子には、キーボードのレイアウトと呼んでいました。 入力ロケール識別子は、音声をテキスト コンバーター、入力方式エディター (IME)、またはその他の入力の形式を示している可能性もあるために、キーボード レイアウトをより広範な概念です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> のカルチャ識別子を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> のカルチャ識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの場合、カルチャ識別子は、対応する NLS ロケール識別子にマップされます。  
  
 Windows 10、ロケール識別子の前に Windows のバージョンで`LOCALE_CUSTOM_UNSPECIFIED`(0x1000、または 4096) は、ユーザーによって作成されたカスタムのカルチャに割り当てられます。 Windows 10 以降、任意のカルチャに固有のロケール識別子がありませんし、完全なシステム指定のデータが含まれないに割り当てられます。 その結果、カルチャを反復処理しを持つを取得するコード、 <xref:System.Globalization.CultureInfo.LCID%2A> @property`LOCALE_CUSTOM_UNSPECIFIED`の大きなサブセットを返します<xref:System.Globalization.CultureInfo>オブジェクトを Windows 10 で実行する場合。  
  
   
  
## Examples  
 次のコード例を作成する方法を示しています、<xref:System.Globalization.CultureInfo>スペイン語 (スペイン) 別のインターナショナル ソート順序と<xref:System.Globalization.CultureInfo>で、従来の並べ替え順序。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CultureInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>*languagecode2*-*country/regioncode2* という形式のカルチャ名を取得します。</summary>
        <value>形式のカルチャ名*languagecode2*-*country/regioncode2*します。 *languagecode2*は小文字の 2 文字コードを ISO 639-1 から派生します。 *country/regioncode2*は ISO 3166 から派生し、通常の 2 つの大文字または bcp-47 言語タグで構成されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定義済みカルチャ名と識別子の一覧を<xref:System.Globalization.CultureInfo.Name%2A>プロパティが返すことができますを参照してください、[各国語サポート (NLS) API リファレンス](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center にします。 さらに、Windows 10 以降で、`name`任意の有効な bcp-47 言語タグを指定できます。 カルチャ名が、変更される可能性はあるともことを反映するカスタムのカルチャの名前に注意してください。  
  
 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>プロパティで提供される名前付け標準に従い、<xref:System.Globalization.CultureInfo>クラスに関するトピック。 代替の並べ替え順序の情報を除外するカルチャ名の省略形を返します。 インスタンス化する場合など、 <xref:System.Globalization.CultureInfo> 、代替の並べ替え順序を反映するように文字列"de-de_phoneb"を使用して、オブジェクト、 <xref:System.Globalization.CultureInfo.Name%2A> "DE-DE"を返します。  
  
 カルチャの完全な名前を取得するには、使用する必要があります、 <xref:System.Globalization.CultureInfo.DisplayName%2A>、 <xref:System.Globalization.CultureInfo.EnglishName%2A>、または<xref:System.Globalization.CultureInfo.NativeName%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例では、ニュートラル カルチャのいくつかのプロパティが表示されます。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、ZH-CHS および ZH-CHT のではなく Zh-hant 名ではなく Zh-hans 名を使用する必要があります。 Zh-hans および Zh-hant 名は、現在の標準を表すし、古い名前を使用する理由がないために使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeName : string" Usage="System.Globalization.CultureInfo.NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャの表示設定である、言語、国/地域、およびオプションのスクリプトで構成されるカルチャ名を取得します。</summary>
        <value>カルチャ名。 言語の完全名、国/地域の完全名、およびオプションのスクリプトで構成されます。 形式については、<see cref="T:System.Globalization.CultureInfo" /> クラスの説明を参照してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの値は、.NET Framework の言語バージョンに関係なく同じです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureInfo.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値、通貨、割合を表示する、カルチャに対応する書式を定義する <see cref="T:System.Globalization.NumberFormatInfo" /> を取得または設定します。</summary>
        <value>数値、通貨、割合を表示する、カルチャに対応する書式を定義する <see cref="T:System.Globalization.NumberFormatInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>オーバーライド  
 ユーザーは、コントロール パネルの地域と言語に関するオプションを使用して Windows の現在のカルチャに関連付けられている値の一部をオーバーライドすることもできます。 など、ユーザーでは、カルチャの既定以外の通貨を使用するか別の形式で日付を表示することもできます。  
  
 場合<xref:System.Globalization.CultureInfo.UseUserOverride%2A>は`true`と指定したカルチャには、Windows の現在のカルチャが一致する、<xref:System.Globalization.CultureInfo>ユーザーのプロパティの設定など、これらの上書きを使用して、<xref:System.Globalization.DateTimeFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティプロパティと、<xref:System.Globalization.NumberFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo>、たとえば、選択したカレンダーは、のいずれかでがない場合、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>メソッドの結果と、プロパティの値が定義されていません。  
  
 値、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティおよび<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティは、ユーザー プロパティにアクセスするまで計算されません。 ユーザーがアプリケーションを実行し、アクセス中に、新しいカルチャを現在のカルチャを変更する、コントロール パネルを使用している場合、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>または<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ、アプリケーションが新しいカルチャの既定値を取得します。 元のカルチャのオーバーライドできません。 元の現在のカルチャのオーバーライドを保持するために、アプリケーションにアクセスする必要があります、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>と<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ、現在のカルチャを変更する前にします。  
  
   
  
## Examples  
 次のコード例に示します CultureInfo.Clone も複製、<xref:System.Globalization.DateTimeFormatInfo>と<xref:System.Globalization.NumberFormatInfo>インスタンスに関連付けられている、<xref:System.Globalization.CultureInfo>します。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが null に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> プロパティまたは <see cref="T:System.Globalization.NumberFormatInfo" /> プロパティのいずれかが設定されており、<see cref="T:System.Globalization.CultureInfo" /> は読み取り専用です。</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OptionalCalendars : System.Globalization.Calendar[]" Usage="System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャで使用できる暦の一覧を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> が表すカルチャで使用できる暦を表す <see cref="T:System.Globalization.Calendar" /> 型の配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションで現在使用する暦を変更<xref:System.Globalization.CultureInfo>を設定して、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>プロパティの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>のインスタンスである、<xref:System.Globalization.DateTimeFormatInfo>クラス。 新しい予定表が記載の予定表のいずれかを指定する必要があります<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>します。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 日付と時刻の書式設定と関連付けられたをカスタマイズするその他のプロパティがあります<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>します。  
  
   
  
## Examples  
 次のコード例を確認する方法を示します、<xref:System.Globalization.GregorianCalendar>カルチャでサポートされるバージョン。  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> の親カルチャを表す <see cref="T:System.Globalization.CultureInfo" /> を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> の親カルチャを表す <see cref="T:System.Globalization.CultureInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 階層があるカルチャ ニュートラル カルチャの親は、特定のカルチャの親がニュートラル カルチャを<xref:System.Globalization.CultureInfo.InvariantCulture%2A>との親、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>自体インバリアント カルチャです。 親カルチャには、その子の間で共通する情報のセットのみが含まれます。  
  
 特定のカルチャのリソースが、システムで利用できない場合は、ニュートラル カルチャのリソースが使用されます。 ニュートラル カルチャのリソースが利用できない場合は、メイン アセンブリに埋め込まれたリソースが使用されます。 リソース フォールバック プロセスの詳細については、次を参照してください。 [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)します。  
  
   
  
## Examples  
 次のコード例では、各体字中国語の言語を使用して特定のカルチャの親カルチャを決定します。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、ZH-CHS および ZH-CHT のではなく Zh-hant 名ではなく Zh-hans 名を使用する必要があります。 Zh-hans および Zh-hant 名は、現在の標準を表すし、古い名前を使用する理由がないために使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.CultureInfo -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.ReadOnly ci" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">ラップする <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</param>
        <summary>指定した <see cref="T:System.Globalization.CultureInfo" /> オブジェクトをラップする読み取り専用のラッパーを返します。</summary>
        <returns>
          <paramref name="ci" /> をラップする読み取り専用の <see cref="T:System.Globalization.CultureInfo" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このラッパーに`ci`、によって返されるオブジェクトや、`ci`します。<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> `ci`します。<xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティ。  
  
   
  
## Examples  
 例を次に示します、<xref:System.Globalization.CultureInfo.ReadOnly%2A>メソッドにより、保護、<xref:System.Globalization.DateTimeFormatInfo>と<xref:System.Globalization.NumberFormatInfo>インスタンスに関連付けられている、<xref:System.Globalization.CultureInfo>します。  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ci" /> が null です。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo" Usage="System.Globalization.CultureInfo.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに関連付けられている書記体系を定義する <see cref="T:System.Globalization.TextInfo" /> を取得します。</summary>
        <value>カルチャに関連付けられている書記体系を定義する <see cref="T:System.Globalization.TextInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.TextInfo%2A>プロパティは、文字列のカルチャに固有の大文字と小文字の情報を提供します。 カルチャを認識しない大文字と小文字を実行するアプリケーションを使用する必要があります、<xref:System.Globalization.CultureInfo.TextInfo%2A>プロパティの<xref:System.Globalization.CultureInfo.InvariantCulture%2A>します。  
  
   
  
## Examples  
 次のコード例を作成する方法を示しています、<xref:System.Globalization.CultureInfo>スペイン語 (スペイン) 別のインターナショナル ソート順序と<xref:System.Globalization.CultureInfo>で、従来の並べ替え順序。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> の言語に対する ISO 639-2 の 3 桁の文字コードを取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> の言語に対する ISO 639-2 の 3 桁文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 たとえば、英語の 3 文字コードは"eng"です。  
  
> [!NOTE]
>  間の通信を処理するか、完全なを使用する、多くのデータの永続化の向上と<xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>します。 言語だけを使用してはコンテキストとデータが失われることができます。  
  
   
  
## Examples  
 次のコード例では、ニュートラル カルチャのいくつかのプロパティが表示されます。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、ZH-CHS および ZH-CHT のではなく Zh-hant 名ではなく Zh-hans 名を使用する必要があります。 Zh-hans および Zh-hant 名は、現在の標準を表すし、古い名前を使用する理由がないために使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Windows API の定義に従って、言語に対する 3 文字コードを取得します。</summary>
        <value>Windows API で定義されている言語に対する 3 文字のコード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、Windows API のメソッドと同じ値を返します`GetLocaleInfo`は。 たとえば、英語 (米国) は、Windows API で定義されているの 3 文字コードでは、"enu"です。  
  
> [!NOTE]
>  間の通信を処理するか、完全なを使用する、多くのデータの永続化の向上と<xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>します。 言語だけを使用してはコンテキストとデータが失われることができます。  
  
   
  
## Examples  
 次のコード例では、ニュートラル カルチャのいくつかのプロパティが表示されます。  
  
> [!NOTE]
>  この例では、zh-CHS および zh-CHT の古いカルチャ名を、カルチャ識別子としてそれぞれ 0x0004 と 0x7C04 を使用して表示します。 ただし、Windows Vista アプリケーションでは、ZH-CHS および ZH-CHT のではなく Zh-hant 名ではなく Zh-hans 名を使用する必要があります。 Zh-hans および Zh-hant 名は、現在の標準を表すし、古い名前を使用する理由がないために使用する必要があります。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cultureInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>*languagecode2*-*country/regioncode2* という形式で、現在の <see cref="T:System.Globalization.CultureInfo" /> の名前を格納している文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Globalization.CultureInfo" /> の名前を格納している文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Object.ToString%2A?displayProperty=nameWithType> をオーバーライドします。 渡されるカルチャ名の正規化されたバージョンを返します、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>または<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>コンス トラクターまたは、<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>または<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>メソッド。 内の文字を変換することで、結果の文字列を正規化、 *languagecode2*で小文字と変換の文字を*country/regioncode2*を必要に応じて大文字に変換します。  
  
 定義済みカルチャ名が記載されて、[各国語サポート (NLS) API リファレンス](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center のページ。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> の言語に対する ISO 639-1 の 2 桁の文字コードを取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> の言語に対する ISO 639-1 の 2 桁文字コード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 たとえば、英語の 2 文字コードは"en"です。 <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>インバリアント カルチャのプロパティの値は"iv"。  
  
> [!NOTE]
>  間の通信を処理するか、完全なを使用する、多くのデータの永続化の向上と<xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>します。 言語だけを使用してはコンテキストとデータが失われることができます。  
  
 ISO 639-1 は、特定のカルチャの 2 文字の言語コードを定義していない場合、<xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>プロパティは、次の 3 つ以上の文字で構成される文字列を返します。 詳細については、例を参照してください。  
  
   
  
## Examples  
 次の例では、カルチャの表示が<xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>プロパティが 2 文字の言語コードの構成がありません。  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseUserOverride : bool" Usage="System.Globalization.CultureInfo.UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CultureInfo" /> オブジェクトでユーザーが選択したカルチャ設定を使用するかどうかを示す値を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CultureInfo" /> でユーザーが選択したカルチャ設定を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーは、コントロール パネルの地域と言語に関するオプションを使用して Windows の現在のカルチャに関連付けられている値の一部をオーバーライドすることもできます。 など、ユーザーでは、カルチャの既定以外の通貨を使用するか別の形式で日付を表示することもできます。  
  
 場合<xref:System.Globalization.CultureInfo.UseUserOverride%2A>は`true`と指定したカルチャには、Windows の現在のカルチャが一致する、<xref:System.Globalization.CultureInfo>ユーザーのプロパティの設定など、これらの上書きを使用して、<xref:System.Globalization.DateTimeFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティプロパティと、<xref:System.Globalization.NumberFormatInfo>によって返されるインスタンス、<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo>、たとえば、選択したカレンダーは、のいずれかでがない場合、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>メソッドの結果と、プロパティの値が定義されていません。  
  
 場合、このプロパティが設定、<xref:System.Globalization.CultureInfo>が作成されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>