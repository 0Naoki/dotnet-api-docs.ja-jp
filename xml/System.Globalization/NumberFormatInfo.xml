<Type Name="NumberFormatInfo" FullName="System.Globalization.NumberFormatInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="54c1d78889ff491ef8d8e7f64180acf300731477" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70454708" /></Metadata><TypeSignature Language="C#" Value="public sealed class NumberFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.NumberFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NumberFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class NumberFormatInfo sealed : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type NumberFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>数値を書式設定および解析するためのカルチャ固有の情報を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス<xref:System.Globalization.NumberFormatInfo>には、数値を書式設定および解析するときに使用されるカルチャ固有の情報が含まれています。 この情報には、通貨記号、小数点の記号、桁区切り記号、および正符号と負符号の記号が含まれます。  
  
-   [NumberFormatInfo オブジェクトのインスタンス化](#Instantiating)  
  
    -   [現在のカルチャの場合](#Instantiating_Current)  
  
    -   [インバリアントカルチャの場合](#Instantiating_Invariant)  
  
    -   [特定のカルチャの場合](#Instantiating_Specific)  
  
    -   [ニュートラルカルチャの場合](#Instantiating_Neutral)  
  
-   [NumberFormatInfo と動的データ](#dynamic)  
  
-   [IFormatProvider、NumberFormatInfo、および数値の書式設定](#formatProvider)  
  
-   [書式指定文字列と NumberFormatInfo プロパティ](#properties)  
  
-   [NumberFormatInfo プロパティの変更](#modifying)  
  
    -   [通貨記号とパターンの変更](#currency)  
  
    -   [National id 番号の書式設定](#id)  
  
-   [数値文字列の解析](#parsing)  
  
    -   [ユーザー文字列の解析](#ParseUser)  
  
    -   [数値データのシリアル化と逆シリアル化](#ParseSerial)  
  
<a name="Instantiating"></a>   
## <a name="instantiating-a-numberformatinfo-object"></a>NumberFormatInfo オブジェクトのインスタンス化  
 現在のカルチャ、 <xref:System.Globalization.NumberFormatInfo>インバリアントカルチャ、特定のカルチャ、またはニュートラルカルチャの書式指定規則を表すオブジェクトをインスタンス化できます。  
  
<a name="Instantiating_Current"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-current-culture"></a>現在のカルチャの NumberFormatInfo オブジェクトのインスタンス化  
 現在のスレッドカルチャ<xref:System.Globalization.NumberFormatInfo>のオブジェクトをインスタンス化するには、次のいずれかの方法を使用します。 どちらの場合も、返さ<xref:System.Globalization.NumberFormatInfo>れるオブジェクトは読み取り専用です。  
  
-   プロパティから現在<xref:System.Globalization.CultureInfo>のスレッドカルチャを表すオブジェクトを取得し、その<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>プロパティからオブジェクトを取得する。 <xref:System.Globalization.CultureInfo>  <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>  
  
-   `static` ( <xref:System.Globalization.NumberFormatInfo> Visual Basic) <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> プロパティによって返されたオブジェクトを取得する。`Shared`  
  
-   現在のカルチャ<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>を表す<xref:System.Globalization.CultureInfo>オブジェクトを使用してメソッドを呼び出す。  
  
 次の例では、この3つ<xref:System.Globalization.NumberFormatInfo>の方法を使用して、現在のカルチャの書式指定規則を表すオブジェクトを作成します。 また、 <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>プロパティの値を取得して、各オブジェクトが読み取り専用であることを示します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate1.vb#1)]  
  
 次のいずれかの<xref:System.Globalization.NumberFormatInfo>方法で、現在のスレッドカルチャの規則を表す書き込み可能なオブジェクトを作成できます。  
  
-   前のコード<xref:System.Globalization.NumberFormatInfo>例で示した方法でオブジェクトを取得し、返され<xref:System.Globalization.NumberFormatInfo>たオブジェクトに<xref:System.Globalization.NumberFormatInfo.Clone%2A>対してメソッドを呼び出します。 これ<xref:System.Globalization.NumberFormatInfo> により、元 `false` のオブジェクトのコピーが作成されます。ただし、プロパティがである点が異なります。 <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>  
  
-   <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>メソッドを呼び出して、現在の<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを作成し、 <xref:System.Globalization.NumberFormatInfo>その<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>プロパティを使用してオブジェクトを取得する。  
  
 次の例では、 <xref:System.Globalization.NumberFormatInfo>オブジェクトをインスタンス化する2つの方法を示し、その<xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>プロパティの値を表示して、オブジェクトが読み取り専用ではないことを示します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate2.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate2.vb#2)]  
  
 Windows オペレーティングシステムでは、ユーザーはコントロールパネルの [ <xref:System.Globalization.NumberFormatInfo> **地域と言語**] 項目を使用して、数値の書式設定および解析操作で使用されるプロパティ値の一部をオーバーライドできます。 たとえば、カルチャが英語 (米国) のユーザーは、通貨値を既定の $1.1 ではなく1.1 米ドルとして表示することができます。 前<xref:System.Globalization.NumberFormatInfo>に説明した方法で取得したオブジェクトは、これらのユーザーオーバーライドを反映しています。 これが望ましく<xref:System.Globalization.NumberFormatInfo>ない場合は、 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>コンストラクターを呼び出し、に値`false` `useUserOverride`を指定することによって、ユーザーのオーバーライドを反映しないオブジェクト (読み取り専用ではなく読み取り/書き込みも) を作成できます。引数. 次の例では、現在のカルチャが英語 (米国) であり、通貨記号が既定値の $ から USD に変更されているシステムについて説明します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate3.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate3.vb#3)]  
  
 `true` <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>プロパティがに設定されている場合、プロパティ、 <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> 、およびもユーザー設定から取得されます。 <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType> ユーザー設定が<xref:System.Globalization.CultureInfo>オブジェクトに関連付けられているカルチャと互換性がない場合 (たとえば、選択したカレンダーが<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>プロパティによって一覧表示されるカレンダーの1つではない場合など)、メソッドの結果とプロパティの値はになります。シンボル.  
  
<a name="Instantiating_Invariant"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-invariant-culture"></a>インバリアントカルチャの NumberFormatInfo オブジェクトのインスタンス化  
 インバリアントカルチャは、カルチャを認識しないカルチャを表します。 英語の言語に基づいていますが、特定の英語圏の国/地域にはありません。 特定のカルチャのデータは動的にすることができ、新しいカルチャ規則やユーザー設定を反映するように変更できますが、インバリアントカルチャのデータは変更されません。 イン<xref:System.Globalization.NumberFormatInfo>バリアントカルチャの書式指定規則を表すオブジェクトは、結果の文字列がカルチャによって異なることがない書式設定操作に使用できます。  
  
 インバリアントカルチャの<xref:System.Globalization.NumberFormatInfo>書式指定規則を表すオブジェクトは、次の方法でインスタンス化できます。  
  
-   <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>プロパティの値を取得する。 返され<xref:System.Globalization.NumberFormatInfo>たオブジェクトは読み取り専用です。  
  
-   プロパティによって<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>返された<xref:System.Globalization.CultureInfo>オブジェクトからプロパティの値を取得する。 返され<xref:System.Globalization.NumberFormatInfo>たオブジェクトは読み取り専用です。  
  
-   パラメーターなし<xref:System.Globalization.NumberFormatInfo.%23ctor%2A>のクラスコンストラクターを呼び出します。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
 次の例では、これらの各メソッドを<xref:System.Globalization.NumberFormatInfo>使用して、インバリアントカルチャを表すオブジェクトをインスタンス化します。 次に、オブジェクトが読み取り専用かどうかを示します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate4.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate4.vb#4)]  
  
<a name="Instantiating_Specific"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-specific-culture"></a>特定のカルチャの NumberFormatInfo オブジェクトのインスタンス化  
 特定のカルチャは、特定の国/地域で話される言語を表します。 たとえば、en-us は、米国で話されている英語を表す特定のカルチャであり、en-us はカナダで話されている英語の言語を表す特定のカルチャです。 次の方法で<xref:System.Globalization.NumberFormatInfo> 、特定のカルチャの書式指定規則を表すオブジェクトをインスタンス化できます。  
  
-   <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType>メソッドを呼び出し、返され<xref:System.Globalization.CultureInfo>たオブジェクトの<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティの値を取得します。 返され<xref:System.Globalization.NumberFormatInfo>たオブジェクトは読み取り専用です。  
  
-   静的<xref:System.Globalization.NumberFormatInfo> <xref:System.Globalization.CultureInfo> メソッドに取得するオブジェクトを持つカルチャを表すオブジェクトを渡す。 <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
-   <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>メソッドを呼び出し、返され<xref:System.Globalization.CultureInfo>たオブジェクトの<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティの値を取得します。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
-   <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>クラスコンストラクターの1つを呼び出し、返され<xref:System.Globalization.CultureInfo>たオブジェクトの<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティの値を取得します。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
 次の例では、これらの4つ<xref:System.Globalization.NumberFormatInfo>の方法を使用して、インドネシア語 (インドネシア) カルチャの書式指定規則を反映するオブジェクトを作成します。 また、各オブジェクトが読み取り専用かどうかも示します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate5.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate5.vb#5)]  
  
<a name="Instantiating_Neutral"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-neutral-culture"></a>ニュートラルカルチャの NumberFormatInfo オブジェクトのインスタンス化  
 ニュートラルカルチャは、国/地域に依存しないカルチャまたは言語を表します。 通常は、1つまたは複数の特定のカルチャの親になります。 たとえば、fr は、フランス語と fr-fr カルチャの親のニュートラルカルチャです。 特定のカルチャ<xref:System.Globalization.NumberFormatInfo>の書式指定規則を表すオブジェクトを<xref:System.Globalization.NumberFormatInfo>作成するのと同じ方法で、ニュートラルカルチャの書式指定規則を表すオブジェクトを作成します。  
  
> [!NOTE]
>  以前の[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]バージョンでは、ニュートラルカルチャの書式<xref:System.Globalization.NumberFormatInfo>指定規則を反映するオブジェクトを取得しようとする<xref:System.NotSupportedException>と、例外がスローされます。  
  
 ただし、ニュートラルカルチャは特定の国/地域に依存しないため、カルチャ固有の書式情報がありません。 .NET Framework は、オブジェクト<xref:System.Globalization.NumberFormatInfo>にジェネリック値を設定するのでは<xref:System.Globalization.NumberFormatInfo>なく、ニュートラルカルチャの子である特定のカルチャの書式指定規則を反映するオブジェクトを返します。 たとえば、 <xref:System.Globalization.NumberFormatInfo>ニュートラルカルチャのオブジェクトには en-us カルチャ<xref:System.Globalization.NumberFormatInfo>の書式指定規則が反映され、fr カルチャのオブジェクトには fr-fr カルチャの書式指定規則が反映されます。  
  
 次のようなコードを使用して、各ニュートラルカルチャが表す特定のカルチャの書式指定規則を決定できます。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate6c.vb#6)]  
  
<a name="dynamic"></a>   
## <a name="numberformatinfo-and-dynamic-data"></a>NumberFormatInfo と動的データ  
 クラスによっ<xref:System.Globalization.NumberFormatInfo>て提供される数値を書式設定するためのカルチャ固有のデータは、 <xref:System.Globalization.CultureInfo>クラスによって提供されるカルチャデータと同様に動的になります。 <xref:System.Globalization.NumberFormatInfo> 特定 <xref:System.Globalization.CultureInfo> のオブジェクトに関連付けられているオブジェクトの値の安定性について、想定しないでください。 インバリアントカルチャとそれに関連付けられた<xref:System.Globalization.NumberFormatInfo>オブジェクトによって提供されるデータのみが安定しています。 その他のデータは、次の理由により、アプリケーションセッション間、または1つのセッション内でも変更される可能性があります。  
  
-   **システムの更新プログラム。** 通貨記号や通貨の形式などのカルチャ設定は、時間の経過と共に変化します。 この場合、Windows Update には、特定の<xref:System.Globalization.NumberFormatInfo>カルチャのプロパティ値の変更が含まれます。  
  
-   **置換カルチャ。** クラス<xref:System.Globalization.CultureAndRegionInfoBuilder>を使用して、既存のカルチャのデータを置き換えることができます。  
  
-   **プロパティ値へのカスケード変更。** カルチャに関連する多数のプロパティが実行時に変更され、その結果<xref:System.Globalization.NumberFormatInfo> 、データが変更される可能性があります。 たとえば、現在のカルチャは、プログラムによって、またはユーザーの操作によって変更できます。 この場合、 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>プロパティに<xref:System.Globalization.NumberFormatInfo>よって返されるオブジェクトは、現在のカルチャに関連付けられているオブジェクトに変更されます。  
  
-   **ユーザー設定。** アプリケーションのユーザーは、コントロールパネルの [地域と言語のオプション] を使用して、現在のシステムのカルチャに関連付けられている値の一部をオーバーライドすることがあります。 たとえば、ユーザーが別の通貨記号または別の小数点の記号を選択する場合があります。 プロパティが (既定値) `true`に設定されている場合<xref:System.Globalization.NumberFormatInfo> 、オブジェクトのプロパティもユーザー設定から取得されます。 <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>  
  
 .NET Framework 2.0 以降では、オブジェクトの作成時に、オブジェクト<xref:System.Globalization.NumberFormatInfo>のすべてのユーザーがオーバーライドできるプロパティが初期化されます。 オブジェクトの作成もユーザーの上書きプロセスもアトミックであり、オブジェクトの作成中に関連する値が変更される可能性があるため、不整合が発生する可能性があります。 ただし、これらの不整合は非常にまれである必要があります。  
  
 現在のスレッドカルチャと同じカルチャを表す<xref:System.Globalization.NumberFormatInfo>オブジェクトに、ユーザーのオーバーライドを反映するかどうかを制御できます。 次の表に、オブジェクトを<xref:System.Globalization.NumberFormatInfo>取得する方法と、結果のオブジェクトにユーザーのオーバーライドが反映されるかどうかを示します。  
  
|CultureInfo オブジェクトと NumberFormatInfo オブジェクトのソース|ユーザーのオーバーライドを反映します|  
|-------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.NumberFormat` プロパティ|はい|  
|<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> プロパティ|はい|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> メソッド|[はい]|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> メソッド|いいえ|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> コンストラクター|はい|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> コンストラクター|パラメーターの値に`useUserOverride`よって異なります|  
  
 それ以外の理由がない限り、クライアントアプリケーションで<xref:System.Globalization.NumberFormatInfo>オブジェクトを使用してユーザー入力の書式設定と解析を行ったり、数値データを表示したりする場合は、ユーザーの上書きを考慮する必要があります。 サーバーアプリケーションや無人アプリケーションでは、ユーザーの上書きを尊重しないようにしてください。 ただし、文字列形式で数値データ<xref:System.Globalization.NumberFormatInfo>を保持するために明示的または暗黙的にオブジェクトを使用している場合<xref:System.Globalization.NumberFormatInfo>は、インバリアントカルチャの書式指定規則を反映するオブジェクトを使用するか、カルチャに関係なく使用するカスタム数値書式指定文字列。  
  
<a name="formatProvider"></a>   
## <a name="iformatprovider-numberformatinfo-and-numeric-formatting"></a>IFormatProvider、NumberFormatInfo、および数値の書式設定  
 オブジェクト<xref:System.Globalization.NumberFormatInfo>は、すべての数値書式指定操作で暗黙的または明示的に使用されます。 これには、次のメソッドの呼び出しが含まれます。  
  
-   <xref:System.Int32.ToString%2A?displayProperty=nameWithType> 、 <xref:System.Double.ToString%2A?displayProperty=nameWithType>  、 <xref:System.Convert.ToString%28System.Int32%29?displayProperty=nameWithType> など、すべての数値書式指定メソッド。  
  
-   メジャーの複合書式指定メソッド<xref:System.String.Format%2A?displayProperty=nameWithType>である。  
  
-   他の複合書式指定メソッド ( <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>や<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>など)。  
  
 すべての<xref:System.IFormatProvider>数値書式指定操作で実装を使用します。 インターフェイス<xref:System.IFormatProvider>には、 <xref:System.IFormatProvider.GetFormat%28System.Type%29>という1つのメソッドが含まれています。 これは、書式設定情報を提供する<xref:System.Type>ために必要な型を表すオブジェクトを渡すコールバックメソッドです。 メソッドは、その型`null`のインスタンスを返すか、型のインスタンスを提供できない場合はを返します。 .NET Framework には、 <xref:System.IFormatProvider>数値を書式設定するための2つの実装があります。  
  
-   <xref:System.Globalization.CultureInfo>クラス。特定のカルチャ (または特定の国/地域の特定の言語) を表します。 数値書式指定操作では、 <xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType>メソッドは<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>プロパティ<xref:System.Globalization.NumberFormatInfo>に関連付けられたオブジェクトを返します。  
  
-   <xref:System.Globalization.NumberFormatInfo>クラス。これは、関連付けられているカルチャの書式指定規則に関する情報を提供します。 メソッド<xref:System.Globalization.NumberFormatInfo.GetFormat%2A?displayProperty=nameWithType>は、それ自体のインスタンスを返します。  
  
 実装が書式指定メソッドに明示的に指定されて<xref:System.Globalization.CultureInfo>いない場合は<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 、現在のスレッドカルチャを表すプロパティによって返されるオブジェクトが使用されます。 <xref:System.IFormatProvider>  
  
 次の例は、カスタム<xref:System.IFormatProvider> <xref:System.IFormatProvider>実装を定義すること<xref:System.Globalization.NumberFormatInfo>で、書式設定操作におけるインターフェイスとクラスの関係を示しています。 この<xref:System.IFormatProvider.GetFormat%2A>メソッドは、書式設定操作によって要求されたオブジェクトの型名を表示します。 インターフェイスがオブジェクトを<xref:System.Globalization.NumberFormatInfo>要求している場合、このメソッドは、現在のスレッドカルチャの<xref:System.Globalization.NumberFormatInfo>オブジェクトを提供します。 この例の出力に示すように、 <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドは、 <xref:System.Globalization.NumberFormatInfo> <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>書式設定情報を提供するためにオブジェクトを<xref:System.Globalization.NumberFormatInfo>要求<xref:System.Globalization.DateTimeFormatInfo>します。一方、 <xref:System.ICustomFormatter>メソッドは、オブジェクトとオブジェクトを要求します。ション.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/formatprovider1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/formatprovider1.vb#1)]  
  
 数値書式指定メソッドの呼び出しで`CultureInfo.CurrentCulture.GetFormat` <xref:System.Globalization.NumberFormatInfo> 実装が明示的に指定されていない場合、メソッドはメソッドを呼び出します。このメソッドは、現在のスレッドカルチャに対応するオブジェクト <xref:System.IFormatProvider> を返します。  
  
<a name="properties"></a>   
## <a name="format-strings-and-numberformatinfo-properties"></a>書式指定文字列と NumberFormatInfo プロパティ  
 すべての書式設定操作では、標準またはカスタムの数値書式指定文字列のいずれかを使用して、数値から結果文字列を生成します。 場合によっては、次の例に示すように、書式指定文字列を使用して結果文字列を生成することが明示的に行われます。 このコードは、 <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドを呼び出して<xref:System.Decimal> 、en-us カルチャの書式指定規則を使用して、値をさまざまな文字列形式に変換します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties1.vb#2)]  
  
 それ以外の場合、書式指定文字列の使用は暗黙的です。 たとえば、次のメソッドが既定またはパラメーターなし<xref:System.Decimal.ToString?displayProperty=nameWithType>のメソッドを呼び出す場合、 <xref:System.Decimal>インスタンスの値は、一般 ("G") 書式指定子と現在のカルチャの規則 (この例では) を使用して書式設定されます。en-us カルチャ。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties2.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties2.vb#3)]  
  
 各標準の数値書式指定文字列では<xref:System.Globalization.NumberFormatInfo> 、1つまたは複数のプロパティを使用して、結果文字列で使用するパターンまたは記号を決定します。 同様に、"0" と "#" を除く各カスタム数値書式指定子は、プロパティによっ<xref:System.Globalization.NumberFormatInfo>て定義される結果文字列に記号を挿入します。 次の表に、標準およびカスタムの数値書式指定子と<xref:System.Globalization.NumberFormatInfo>それらに関連付けられているプロパティを示します。  特定のカルチャの結果文字列の外観を変更するには、「 [NumberFormatInfo プロパティの変更](#modifying)」セクションを参照してください。 これらの書式指定子の使用方法の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
|書式指定子|関連付けられたプロパティ|  
|----------------------|---------------------------|  
|"C" または "c" (通貨書式指定子)|<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>。既定の小数部の桁数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>。グループまたは桁区切り記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>。整数のグループのサイズを定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>負の通貨値のパターンを定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>。正の通貨の値のパターンを定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>通貨記号を定義する場合は。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。|  
|"D" または "d" (10 進書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。|  
|"E" または "e" (指数または指数書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>。仮数と指数の負の記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>。指数部に正符号記号を定義します。|  
|"F" または "f" (固定小数点書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>。既定の小数部の桁数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。|  
|"G" または "g" (一般的な書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>。指数形式で結果文字列の正符号記号を定義します。|  
|"N" または "n" (数値書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>。既定の小数部の桁数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>(桁区切り記号) を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>。グループ内の整数部の桁数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>。負の値の形式を定義します。|  
|"P" または "p" (パーセント書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>。既定の小数部の桁数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>。桁区切り記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>。グループ内の整数部の桁数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>を使用して、負の値のパーセント記号と負の記号の位置を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>。正の値のパーセント記号の位置を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>。パーセント記号を定義します。|  
|"R" または "r" (ラウンドトリップ書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>。指数部に正符号記号を定義します。|  
|"X" または "x" (16 進書式指定子)|なし。|  
|"."(小数点カスタム書式指定子)|<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。|  
|"," (桁区切り記号カスタム書式指定子)|<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>(桁区切り記号) を定義します。|  
|"%" (パーセントプレースホルダーカスタム書式指定子)|<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>。パーセント記号を定義します。|  
|"‰" (per-mille プレースホルダーカスタム書式指定子ごと)|<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>、per-mille 記号ごとにを定義します。|  
|"E" (指数表記のカスタム書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>。仮数と指数の負の記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>。指数部に正符号記号を定義します。|  
  
 クラスに<xref:System.Globalization.NumberFormatInfo>は、特定の<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>カルチャで使用される10進数の基数を指定するプロパティが含まれていることに注意してください。 ただし、プロパティは、書式設定操作では使用されません。結果の文字列では、基本のラテン数字 0 (U + 0030 ~) から 9 (U + 0039) のみが使用されます。 さらに、、 <xref:System.Single> 、 <xref:System.Double>および<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> `NaN` `PositiveInfinity`の値については、結果の文字列は、、、およびの各プロパティによって定義されたシンボルだけで構成されます。 `NegativeInfinity`4.3.  
  
<a name="modifying"></a>   
## <a name="modifying-numberformatinfo-properties"></a>NumberFormatInfo プロパティの変更  
 <xref:System.Globalization.NumberFormatInfo>オブジェクトのプロパティを変更して、数値書式設定操作で生成される結果文字列をカスタマイズできます。 この操作を行うには、次の手順を実行します。  
  
1.  書式指定規則を変更する<xref:System.Globalization.NumberFormatInfo>オブジェクトの読み取り/書き込みコピーを作成します。 詳細については、「 [NumberFormatInfo オブジェクトのインスタンス](#Instantiating)化」セクションを参照してください。  
  
2.  目的の結果文字列を生成するために使用されるプロパティを変更します。 書式指定メソッドでプロパティを使用<xref:System.Globalization.NumberFormatInfo>して結果文字列を定義する方法の詳細については、「[書式指定文字列と NumberFormatInfo プロパティ](#properties)」セクションを参照してください。  
  
3.  書式設定メソッド<xref:System.Globalization.NumberFormatInfo>の呼び出しで<xref:System.IFormatProvider>は、引数としてカスタムオブジェクトを使用します。  
  
> [!NOTE]
>  アプリケーションを起動するたびにカルチャのプロパティ値を動的に変更するのではなく、 <xref:System.Globalization.CultureAndRegionInfoBuilder>クラスを使用して、カスタムカルチャ (一意の名前を持ち、既存のカルチャを補足するカルチャ) または置換を定義することができます。カルチャ (特定のカルチャの代わりに使用されるカルチャ)。  
  
 次のセクションでは、例をいくつか紹介します。  
  
<a name="currency"></a>   
### <a name="modifying-the-currency-symbol-and-pattern"></a>通貨記号とパターンの変更  
 次の例では<xref:System.Globalization.NumberFormatInfo> 、en-us カルチャの書式指定規則を表すオブジェクトを変更します。 これにより、ISO-4217 通貨記号が<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>プロパティに割り当てられ、通貨記号の後にスペースと数値が続く通貨値のパターンが定義されます。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_currency1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_currency1.vb#1)]  
  
<a name="id"></a>   
### <a name="formatting-a-national-identification-number"></a>National id 番号の書式設定  
 国識別番号の多くは、数字だけで構成されているため、 <xref:System.Globalization.NumberFormatInfo>オブジェクトのプロパティを変更することで簡単に書式設定できます。 たとえば、米国の社会保障番号は、次`XXX-XX-XXXX`の9桁の数字で構成されます。 次の例では、社会保障番号が整数値として格納され、適切に書式設定されることを前提としています。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_ssn1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_ssn1.vb#2)]  
  
<a name="parsing"></a>   
## <a name="parsing-numeric-strings"></a>数値文字列の解析  
 解析では、数値の文字列形式を数値に変換する必要があります。 .NET Framework の各数値型には`Parse` 、とと`TryParse`いう2つのオーバーロードされた解析メソッドがあります。 メソッド`Parse`は、文字列を数値に変換し、変換に失敗した場合は例外をスローします。 メソッド`TryParse`は、文字列を数値に変換し、その数値を`out` <xref:System.Boolean>引数に割り当て、変換に成功したかどうかを示す値を返します。  
  
 解析メソッドは、 <xref:System.Globalization.NumberStyles>列挙値を暗黙的または明示的に使用して、解析操作が成功する場合に文字列内に存在できるスタイル要素 (グループ区切り記号、小数点の区切り記号、通貨記号など) を決定します。 メソッド呼び出しで<xref:System.Globalization.NumberStyles> <xref:System.Globalization.NumberStyles.Float> <xref:System.Globalization.NumberStyles.AllowThousands>値が指定されていない場合、既定値はフラグとフラグを含む値になります。これは、解析された文字列にグループシンボル、小数点の区切り文字、負の符号を含めることができることを指定します。 <xref:System.Globalization.NumberStyles>と空白文字、または指数表記による数値の文字列形式を使用できます。  
  
 また、解析メソッドは、解析対象の<xref:System.Globalization.NumberFormatInfo>文字列で発生する可能性がある特定のシンボルとパターンを定義するオブジェクトを暗黙的または明示的に使用します。 オブジェクトが指定されていない場合の既定<xref:System.Globalization.NumberFormatInfo>値は、現在のスレッドカルチャのです。 <xref:System.Globalization.NumberFormatInfo> 解析の詳細については、「」、「」、 <xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType>「」、「」、 <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29?displayProperty=nameWithType>「」、「」、「」などの個々の解析メソッド<xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29?displayProperty=nameWithType>を参照してください。  
  
 次の例は、カルチャに依存した文字列解析の性質を示しています。 この例では、en-us、fr-fr、およびインバリアントカルチャの規則を使用して、桁区切り記号を含む文字列を解析しようとしています。 コンマが桁区切り記号として含まれ、ピリオドが小数点として含まれる文字列は、fr-fr カルチャでは解析できません。また、コンマを桁区切り記号として使用すると、en-us およびインバリアントカルチャでは解析に失敗します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parse1.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parse1.vb#4)]  
  
 解析は通常、次の2つのコンテキストで行われます。  
  
-   ユーザー入力を数値に変換するように設計された操作として。  
  
-   数値をラウンドトリップするように設計された操作として。つまり、以前に文字列としてシリアル化された数値を逆シリアル化します。  
  
 以下のセクションでは、これら2つの操作について詳しく説明します。  
  
<a name="ParseUser"></a>   
### <a name="parsing-user-strings"></a>ユーザー文字列の解析  
 ユーザーによって入力された数値文字列を解析する場合は、 <xref:System.Globalization.NumberFormatInfo>ユーザーのカルチャ設定を反映するオブジェクトを常にインスタンス化する必要があります。 ユーザーのカスタマイズを反映する<xref:System.Globalization.NumberFormatInfo>オブジェクトをインスタンス化する方法については、「 [NumberFormatInfo and dynamic data](#dynamic) 」セクションを参照してください。  
  
 次の例は、ユーザーのカルチャ設定を反映する解析操作と、それ以外の設定を比較した場合の違いを示しています。 この場合、既定のシステムカルチャは en-us ですが、ユーザーは、"," を小数点記号として定義し、コントロールパネル、**地域と言語** の桁区切り記号として "." を定義しています。 通常、これらのシンボルは既定の en-us カルチャでは逆になります。 ユーザー設定を反映する文字列を入力すると、ユーザー設定 (上書き) を反映<xref:System.Globalization.NumberFormatInfo>するオブジェクトによって文字列が解析されると、解析操作によって正しい結果が返されます。 ただし、標準の en-us カルチャ設定を反映<xref:System.Globalization.NumberFormatInfo>するオブジェクトによって文字列が解析された場合は、桁区切り記号のコンマ記号が間違っていて、正しくない結果が返されます。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parseuser1.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parseuser1.vb#5)]  
  
<a name="ParseSerial"></a>   
### <a name="serializing-and-deserializing-numeric-data"></a>数値データのシリアル化と逆シリアル化  
 数値データを文字列形式でシリアル化し、後で逆シリアル化および解析する場合は、インバリアントカルチャの規則を使用して、文字列を生成および解析する必要があります。 書式設定および解析操作には、特定のカルチャの規則が反映されないようにする必要があります。 カルチャ固有の設定を使用する場合、データの移植性は厳密に制限されます。カルチャ固有の設定が、シリアル化されたスレッドと同じであるスレッドでのみ、正常に逆シリアル化できます。 場合によっては、これは、シリアル化されたのと同じシステム上でデータを正常に逆シリアル化することもできないことを意味します。  
  
 次の例は、この原則に違反した場合に発生する可能性があることを示しています。 現在のスレッドが en-us カルチャのカルチャ固有の設定を使用している場合、配列内の浮動小数点値は文字列に変換されます。 データは、en-us カルチャのカルチャ固有の設定を使用するスレッドによって解析されます。 この場合、各解析操作は成功しますが、データのラウンドトリップが正常に行われず、データの破損が発生します。 それ以外の場合は、解析操作が失敗し<xref:System.FormatException> 、例外がスローされる可能性があります。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parsepersisted.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parsepersisted.vb#6)]  
  
   
  
## Examples  
 次の例は、対応<xref:System.Globalization.NumberFormatInfo> <xref:System.Globalization.CultureInfo>するオブジェクトのオブジェクトを取得し、取得したオブジェクトを使用して、特定のカルチャの数値書式情報を照会する方法を示しています。  
  
 [!code-cpp[NumberFormatInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberFormatInfo/cpp/NumberFormatInfo.cpp#1)]
 [!code-csharp[NumberFormatInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberFormatInfo/CS/NumberFormatInfo.cs#1)]
 [!code-vb[NumberFormatInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberFormatInfo/vb/numberformatinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.IFormatProvider" />
    <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NumberFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NumberFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>カルチャに依存しない (インバリアントな) <see cref="T:System.Globalization.NumberFormatInfo" /> クラスの新しい書き込み可能インスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションでユーザー定義の書式設定が必要な場合は、新しいインスタンスのプロパティを変更できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="numberFormatInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトの簡易コピーを作成します。</summary>
        <returns>元の <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトからコピーされた新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元<xref:System.Globalization.NumberFormatInfo>のオブジェクトが読み取り専用であっても、複製は書き込み可能です。 そのため、複製のプロパティは、ユーザー定義のパターンで変更できます。  
  
 オブジェクトの簡易コピーは、オブジェクトのコピーにすぎません。 オブジェクトに他のオブジェクトへの参照が含まれている場合、シャローコピーは参照されるオブジェクトのコピーを作成しません。 代わりに、元のオブジェクトが参照されます。 一方、オブジェクトの詳細コピーでは、オブジェクトのコピーと、そのオブジェクトによって直接または間接的に参照されるすべてのもののコピーが作成されます。 オブジェクト参照を返すすべて<xref:System.Globalization.NumberFormatInfo>のプロパティが`static` (`Shared` Visual Basic) であるため、オブジェクトの場合、すべてのインスタンスプロパティをコピーするには簡易コピーが必要です。  
  
   
  
## Examples  
 次の例では<xref:System.Globalization.NumberFormatInfo.Clone%2A> 、メソッドを使用して、現在のスレッド<xref:System.Globalization.NumberFormatInfo>カルチャの数値書式指定規則を表すオブジェクトの読み取り/書き込みコピーを作成します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalDigits">
      <MemberSignature Language="C#" Value="public int CurrencyDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で使用する小数点以下の桁数を取得または設定します。</summary>
        <value>通貨の値で使用する小数点以下の桁数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>プロパティは、数値の書式設定操作で精度指定子を指定せずに、"C" 標準書式指定文字列と共に使用されます。 小数点区切り文字の後に表示される既定の小数部の桁数を定義します。 精度指定子が使用されている場合、この値はオーバーライドされます。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[CurrencyDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalDigits/CPP/currencydecimaldigits.cpp#1)]
 [!code-csharp[CurrencyDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalDigits/CS/currencydecimaldigits.cs#1)]
 [!code-vb[CurrencyDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalDigits/VB/currencydecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、99 より大きい値に設定されようとしています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で桁区切り記号として使用する文字列を取得または設定します。</summary>
        <value>通貨の値で桁区切り記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "." です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの初期値は、コントロールパネルの **[地域と言語]** 項目の設定から取得されます。  
  
 "C" 標準書式指定文字列でプロパティを使用して、小数部から整数を区切るシンボルを定義します。 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[CurrencyDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalSeparator/CPP/currencydecimalseparator.cpp#1)]
 [!code-csharp[CurrencyDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalSeparator/CS/currencydecimalseparator.cs#1)]
 [!code-vb[CurrencyDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalSeparator/VB/currencydecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">プロパティが空の文字列に設定されています。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で小数点の左にある数字のグループを区切る文字列を取得または設定します。</summary>
        <value>通貨の値で小数点の左にある数字のグループを区切る文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "," です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの初期値は、コントロールパネルの **[地域と言語**] 項目の設定から取得されます。  
  
 "C" 標準書式指定文字列でプロパティを使用して、整数の桁のグループを区切るシンボルを定義します。 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[CurrencyGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSeparator/CPP/currencygroupseparator.cpp#1)]
 [!code-csharp[CurrencyGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSeparator/CS/currencygroupseparator.cs#1)]
 [!code-vb[CurrencyGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSeparator/VB/currencygroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSizes">
      <MemberSignature Language="C#" Value="public int[] CurrencyGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CurrencyGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ CurrencyGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で小数点の左にある各グループの数字の数を取得または設定します。</summary>
        <value>通貨の値で小数点の左にある各グループの数字の数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 1 つだけの要素を持つ 1 次元配列であり、その要素は 3 に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "C" 標準書式指定文字列と共にプロパティを使用して、整数グループに出現する桁数を定義します。 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A> 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 1次元配列のすべての要素は、1 ~ 9 の整数である必要があります。 最後の要素には0を指定できます。  
  
 配列の最初の要素は、 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>の左側の最下位の数字グループに含まれる要素の数を定義します。 後続の各要素は、前のグループの左側にある次の重要な数字のグループを参照します。 配列の最後の要素が0でない場合、残りの数字は配列の最後の要素に基づいてグループ化されます。 最後の要素が0の場合、残りの桁はグループ化されません。  
  
 たとえば、配列に {3, 4, 5} が含まれている場合、数字は "$ 55, 55555, 55555, 55555, 4444, 333.00" のようにグループ化されます。 配列に {3, 4, 0} が含まれている場合、数字は "$ 55555555555555555, 4444, 333.00" のようにグループ化されます。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[CurrencyGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSizes/CPP/currencygroupsizes.cpp#1)]
 [!code-csharp[CurrencyGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSizes/CS/currencygroupsizes.cs#1)]
 [!code-vb[CurrencyGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSizes/VB/currencygroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定され、配列には 0 より小さいか、9 よりも大きいエントリが含まれています。  
  
 または  
  
 プロパティが設定され、配列には 0 に設定されているエントリ (最後のエントリ以外) が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyNegativePattern">
      <MemberSignature Language="C#" Value="public int CurrencyNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負の通貨値の形式パターンを取得または設定します。</summary>
        <value>負の通貨値の形式パターン。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"($n)" を表します。"$" は <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>プロパティは、負の通貨値のパターンを定義するために "C" 標準書式指定文字列と共に使用されます。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 このプロパティには、次の表のいずれかの値が含まれています。 記号 "$" は<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>で、記号 "-" <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>は`n`で、は数値です。  
  
|[値]|関連付けられたパターン|  
|-----------|------------------------|  
|0|($n)|  
|1|-$n|  
|2|$-n|  
|3|$n-|  
|4|(n $)|  
|5|-n $|  
|6|n-$|  
|7|n $-|  
|8|-n $|  
|9|-$ n|  
|10|n $-|  
|11|$ n-|  
|12|$-n|  
|13|n-$|  
|14|($ n)|  
|15|(n $)|  
  
   
  
## Examples  
 次の例は、プロパティ<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>が負の通貨値の形式を定義する方法を示しています。  ホストコンピューターに定義されている特定のカルチャをすべて取得し、各カルチャ<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>のプロパティ値、関連付けられているパターン、通貨値として書式設定された数値を表示します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/cs/currencynegativepattern1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/vb/currencynegativepattern1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、15 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyPositivePattern">
      <MemberSignature Language="C#" Value="public int CurrencyPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の正の値の形式パターンを取得または設定します。</summary>
        <value>通貨の正の値の形式パターン。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"$n" を表します。"$" は <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>プロパティは、正の通貨値のパターンを定義するために "C" 標準書式指定文字列と共に使用されます。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 このプロパティには、次の表のいずれかの値が含まれています。 記号 "$" はで、 <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> `n`は数値です。  
  
|[値]|関連付けられたパターン|  
|-----------|------------------------|  
|0|$n|  
|1|n $|  
|2|$ n|  
|3|n $|  
  
 このパターンでは、正符号はサポートされていないことに注意してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、または 3 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencySymbol">
      <MemberSignature Language="C#" Value="public string CurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨記号として使用する文字列を取得または設定します。</summary>
        <value>通貨記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "¤" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数値が "C" <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> [標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)で書式設定されている場合、プロパティに割り当てられた文字列は、結果の文字列に含まれます。  
  
   
  
## Examples  
 次の例では、現在のカルチャの通貨記号を表示し、"C" 標準の数値書式指定文字列を使用して通貨値の書式を設定します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/cs/currencysymbolex1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/vb/currencysymbolex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ CurrentInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカルチャに基づいて値を形式指定する読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" /> を取得します。</summary>
        <value>現在のスレッドのカルチャに基づく読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティからオブジェクトを取得することは、 `CultureInfo.CurrentCulture.NumberFormat`プロパティから<xref:System.Globalization.NumberFormatInfo>オブジェクトを取得することと同じです。 <xref:System.Globalization.NumberFormatInfo> <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>  
  
   
  
## Examples  
 次の例は、プロパティ<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>と`CultureInfo.CurrentCulture.NumberFormat`プロパティによって返されるオブジェクトが同一であることを示しています。 次に、リフレクションを使用し<xref:System.Globalization.NumberFormatInfo> <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>て、現在のカルチャが en-us であるシステム上のプロパティによって返されたオブジェクトのプロパティ値を表示します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/cs/currentinfo1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/vb/currentinfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitution">
      <MemberSignature Language="C#" Value="public System.Globalization.DigitShapes DigitSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.DigitShapes DigitSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitSubstitution As DigitShapes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DigitShapes DigitSubstitution { System::Globalization::DigitShapes get(); void set(System::Globalization::DigitShapes value); };" />
      <MemberSignature Language="F#" Value="member this.DigitSubstitution : System.Globalization.DigitShapes with get, set" Usage="System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DigitShapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グラフィカル ユーザー インターフェイスが数字の形状を表示する方法を指定する値を取得または設定します。</summary>
        <value>カルチャ固有の数字形状を指定する列挙値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  プロパティ<xref:System.Globalization.NumberFormatInfo.DigitSubstitution%2A>は将来使用するために予約されています。 現在、現在<xref:System.Globalization.NumberFormatInfo>のオブジェクトの解析操作または書式設定操作では使用されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">セット操作の値が正しい <see cref="T:System.Globalization.DigitShapes" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="numberFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">要求される形式指定サービスの <see cref="T:System.Type" />。</param>
        <summary>数値形式指定サービスを提供する指定した型のオブジェクトを取得します。</summary>
        <returns><paramref name="formatType" /> が現在の <see cref="T:System.Globalization.NumberFormatInfo" /> の型と同じ場合は、現在の <see cref="T:System.Globalization.NumberFormatInfo" />。それ以外の場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基本データ型でサポートされている<xref:System.Globalization.NumberFormatInfo> <xref:System.IFormatProvider> `Format(String, IFormatProvider)`メソッドは、現在のがパラメーターとして渡されたときに、このメソッドを呼び出します。 このメソッドは、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> を実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo GetInstance(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (formatProvider As IFormatProvider) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ GetInstance(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.GetInstance formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider"><see cref="T:System.IFormatProvider" /> を取得するために使用する <see cref="T:System.Globalization.NumberFormatInfo" />。  
  
または 
 <see langword="null" /> を取得する <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />。</param>
        <summary>指定された <see cref="T:System.Globalization.NumberFormatInfo" /> に関連付けられている <see cref="T:System.IFormatProvider" /> を取得します。</summary>
        <returns>指定した <see cref="T:System.Globalization.NumberFormatInfo" /> に関連付けられている <see cref="T:System.IFormatProvider" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> `formatProvider`を型パラメーター <xref:System.Globalization.NumberFormatInfo>として使用するメソッドを使用します。 が`formatProvider`の`null`場合、また`null`はがを返し<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>た<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>場合、このメソッドはを返します。  
  
 アプリケーションは<xref:System.Globalization.NumberFormatInfo> 、次のいずれかの方法を使用して、特定のカルチャのオブジェクトを取得します。  
  
-   プロパティを<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>使用します。  
  
-   メソッドを使用し`provider`ます。 <xref:System.Globalization.CultureInfo>ここで、はです。 <xref:System.Globalization.NumberFormatInfo.GetInstance%2A>  
  
 <xref:System.Globalization.NumberFormatInfo>オブジェクトは、ニュートラルカルチャではなく、特定のカルチャに対してのみ作成されます。 インバリアントカルチャ、特定のカルチャ、およびニュートラルカルチャの詳細については<xref:System.Globalization.CultureInfo> 、クラスを参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ InvariantInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに依存しない (インバリアントな) 読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトを取得します。</summary>
        <value>カルチャに依存しない (インバリアントな) 読み取り専用オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Globalization.NumberFormatInfo>のカルチャに関係なく、このプロパティによって返されるこのオブジェクトは変更されません。 これは、英語の言語に関連付けられているが国/地域に関連付けられていないカルチャであるインバリアントカルチャの書式指定規則を表します。 インバリアントカルチャは、カルチャに依存しない書式設定操作や、複数のカルチャにわたる表示に適した結果文字列を生成する書式指定操作で使用されます。  
  
   
  
## Examples  
 次の例では、 <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>の既定のプロパティ値を表示します。  
  
 [!code-cpp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CPP/invariantinfo.cpp#1)]
 [!code-csharp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CS/invariantinfo.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/VB/invariantinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトが読み取り専用かどうかを示す値を取得します。</summary>
        <value><see langword="true" /> が読み取り専用である場合は <see cref="T:System.Globalization.NumberFormatInfo" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 読み取り<xref:System.Globalization.NumberFormatInfo>専用のプロパティへの割り当てを実行しようとすると、 <xref:System.InvalidOperationException>が発生します。  
  
 次の例に<xref:System.Globalization.NumberFormatInfo.Clone%2A>示すように、メソッドを呼び出し<xref:System.Globalization.NumberFormatInfo>て、読み取り専用のオブジェクトから読み取り/書き込みオブジェクトを作成できます。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="NaNSymbol">
      <MemberSignature Language="C#" Value="public string NaNSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NaNSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NaNSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NaNSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NaNSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>IEEE NaN (非数) 値を表す文字列を取得または設定します。</summary>
        <value>IEEE NaN (非数) 値を表す文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "NaN" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 NaN 値の詳細については<xref:System.Double> 、 <xref:System.Single>「」または「」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      </Docs>
    </Member>
    <Member MemberName="NativeDigits">
      <MemberSignature Language="C#" Value="public string[] NativeDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] NativeDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NativeDigits As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ NativeDigits { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NativeDigits : string[] with get, set" Usage="System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>西洋数字 0 ～ 9 に等しいネイティブ数字の文字列配列を取得または設定します。</summary>
        <value>西洋数字 0 ～ 9 に等しいネイティブ数字を含む文字列配列。 既定値は "0"、"1"、"2"、"3"、"4"、"5"、"6"、"7"、"8"、"9" を要素に持つ配列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>プロパティによって指定された文字セットは、解析または書式設定操作には影響しません。 数値または日付と時刻の値を書式設定または解析する場合は、基本ラテン数字 0 (U + 0030 ~) から 9 (U + 0039) のみが使用されます。  
  
   
  
## Examples  
 プロパティの<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>例を次に示します。  
  
 [!code-cpp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cpp/nd.cpp#1)]
 [!code-csharp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cs/nd.cs#1)]
 [!code-vb[sys.glob.NFI.nativeDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/vb/nd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で値が <see langword="null" /> です。  
  
- または - 
設定操作で値配列の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">設定操作で値配列に 10 個の要素がありません。  
  
- または - 
設定操作で、値配列の要素に単一の <see cref="T:System.Char" /> オブジェクトまたはサロゲート ペアを構成する一対の <see cref="T:System.Char" /> オブジェクトが含まれていません。  
  
- または - 
設定操作で、値配列の要素が [Unicode 規格](https://go.microsoft.com/fwlink/?linkid=37123)で定義された数字ではありません。 つまり、配列要素中の数字は Unicode <see langword="Number, Decimal Digit" /> (Nd) General Category 値を持ちません。  
  
- または - 
設定操作で、値配列内の要素の数値は配列内の要素の位置に対応していません。 つまり、配列の 1 番目であるインデックス 0 の要素の数値が 0 でなく、インデックス 1 の要素の数値が 1 でありません。</exception>
        <altmember cref="T:System.Globalization.DigitShapes" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinitySymbol">
      <MemberSignature Language="C#" Value="public string NegativeInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負の無限大を表す文字列を取得または設定します。</summary>
        <value>負の無限大を表す文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "-Infinity" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 負の無限大の詳細について<xref:System.Double>は<xref:System.Single>、「」または「」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、 <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSign">
      <MemberSignature Language="C#" Value="public string NegativeSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>関連付けられた数値が負であることを示す文字列を取得または設定します。</summary>
        <value>関連付けられた数値が負であることを示す文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "-" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、書式設定と解析の両方の操作で使用されます。 書式設定操作での使用方法の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、インバリアント<xref:System.Globalization.CultureInfo>カルチャを表す読み取り/書き込みオブジェクトをインスタンス化し、その<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>プロパティに先頭線文字 (U + 203e) を割り当てます。 次に、この<xref:System.Globalization.CultureInfo>オブジェクトを使用して、負の浮動小数点数の配列を書式設定します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/cs/negativesign1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/vb/negativesign1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalDigits">
      <MemberSignature Language="C#" Value="public int NumberDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で使用する小数点以下の桁数を取得または設定します。</summary>
        <value>数値で使用する小数点以下の桁数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>プロパティは、数値の書式設定操作で精度指定子を使用せずに、"F" および "N" 標準書式指定文字列と共に使用されます。 小数点区切り文字の後に表示される既定の小数部の桁数を定義します。 精度指定子が使用されている場合、この値はオーバーライドされます。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[NumberDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalDigits/CPP/numberdecimaldigits.cpp#1)]
 [!code-csharp[NumberDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalDigits/CS/numberdecimaldigits.cs#1)]
 [!code-vb[NumberDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalDigits/VB/numberdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、99 より大きい値に設定されようとしています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalSeparator">
      <MemberSignature Language="C#" Value="public string NumberDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で桁区切り記号として使用する文字列を取得または設定します。</summary>
        <value>数値で桁区切り記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "." です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>プロパティは、小数点以下の整数を区切るシンボルを定義するために、"E"、"F"、"G"、"N"、および "R" の標準書式指定文字列と共に使用されます。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
 このプロパティの初期値は、コントロールパネルの **[地域と言語]** 項目の設定から取得されます。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[NumberDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalSeparator/CPP/numberdecimalseparator.cpp#1)]
 [!code-csharp[NumberDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalSeparator/CS/numberdecimalseparator.cs#1)]
 [!code-vb[NumberDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalSeparator/VB/numberdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">プロパティが空の文字列に設定されています。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSeparator">
      <MemberSignature Language="C#" Value="public string NumberGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で小数点の左にある数字のグループを区切る文字列を取得または設定します。</summary>
        <value>数値で小数点の左にある数字のグループを区切る文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "," です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "N" 標準書式指定文字列と共にプロパティを使用して、整数の桁のグループを区切るシンボルを定義します。 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
 このプロパティの初期値は、コントロールパネルの **[地域と言語]** 項目の設定から取得されます。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[NumberGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSeparator/CPP/numbergroupseparator.cpp#1)]
 [!code-csharp[NumberGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSeparator/CS/numbergroupseparator.cs#1)]
 [!code-vb[NumberGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSeparator/VB/numbergroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSizes">
      <MemberSignature Language="C#" Value="public int[] NumberGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] NumberGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ NumberGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で小数点の左にある各グループの数字の数を取得または設定します。</summary>
        <value>数値で小数点の左にある各グループの数字の数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 1 つだけの要素を持つ 1 次元配列であり、その要素は 3 に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>プロパティの値は、"N" を使用して書式設定された数値の結果に影響します。 カスタム数値書式指定文字列またはその他の標準の数値書式指定文字列が使用さ<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>れている場合、プロパティの値は無視されます。  
  
 1次元配列のすべての要素は、1 ~ 9 の整数である必要があります。 最後の要素には0を指定できます。  
  
 配列の最初の要素は、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>の左側の最下位の数字グループに含まれる要素の数を定義します。 後続の各要素は、前のグループの左側にある次の重要な数字のグループを参照します。 配列の最後の要素が0でない場合、残りの数字は配列の最後の要素に基づいてグループ化されます。 最後の要素が0の場合、残りの桁はグループ化されません。  
  
 たとえば、配列に {3, 4, 5} が含まれている場合、数字は "55, 55555, 55555, 55555, 4444, 333.00" のようにグループ化されます。 配列に {3, 4, 0} が含まれている場合、数字は "55555555555555555, 4444, 333.00" のようにグループ化されます。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[NumberGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSizes/CPP/numbergroupsizes.cpp#1)]
 [!code-csharp[NumberGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSizes/CS/numbergroupsizes.cs#1)]
 [!code-vb[NumberGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSizes/VB/numbergroupsizes.vb#1)]  
  
 次の例では、異なる<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>配列を使用して値を出力します。  
  
 [!code-cpp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定され、配列には 0 より小さいか、9 よりも大きいエントリが含まれています。  
  
 または  
  
 プロパティが設定され、配列には 0 に設定されているエントリ (最後のエントリ以外) が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="NumberNegativePattern">
      <MemberSignature Language="C#" Value="public int NumberNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負の数値の形式パターンを取得または設定します。</summary>
        <value>負の数値の形式パターン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>は、標準の数値書式指定文字列 "N" で書式設定された負の値の書式を定義します。 このプロパティには、次の表のいずれかの値が含まれています。 記号 "-" はで、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> `n`は数値です。  
  
|[値]|関連付けられたパターン|  
|-----------|------------------------|  
|0|非該当|  
|1|-n|  
|2|-n|  
|3|非該当|  
|4|非該当|  
  
 <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>プロパティによって返されるインバリアントカルチャの既定値は1で、"-n" を表します。 *n*は数値です。  
  
   
  
## Examples  
 次の例では、さまざまな<xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>パターンを使用して値を表示します。  
  
 [!code-cpp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、4 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalDigits">
      <MemberSignature Language="C#" Value="public int PercentDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で使用する小数点以下の桁数を取得または設定します。</summary>
        <value>パーセント値で使用する小数点以下の桁数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>プロパティは、数値の書式設定操作で精度指定子が指定されていない "P" 標準書式指定文字列と共に使用されます。 小数点区切り文字の後に表示される既定の小数部の桁数を定義します。 精度指定子が使用されている場合、この値はオーバーライドされます。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[PercentDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalDigits/CPP/percentdecimaldigits.cpp#1)]
 [!code-csharp[PercentDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalDigits/CS/percentdecimaldigits.cs#1)]
 [!code-vb[PercentDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalDigits/VB/percentdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、99 より大きい値に設定されようとしています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalSeparator">
      <MemberSignature Language="C#" Value="public string PercentDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で桁区切り記号として使用する文字列を取得または設定します。</summary>
        <value>パーセント値で桁区切り記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "." です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "P" 標準書式指定文字列と共にプロパティを使用して、小数部から整数を区切るシンボルを定義します。 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[PercentDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalSeparator/CPP/percentdecimalseparator.cpp#1)]
 [!code-csharp[PercentDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalSeparator/CS/percentdecimalseparator.cs#1)]
 [!code-vb[PercentDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalSeparator/VB/percentdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">プロパティが空の文字列に設定されています。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSeparator">
      <MemberSignature Language="C#" Value="public string PercentGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で小数点の左にある数字のグループを区切る文字列を取得または設定します。</summary>
        <value>パーセント値で小数点の左にある数字のグループを区切る文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "," です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>プロパティは、整数のグループを区切るシンボルを定義するために "P" 標準書式指定文字列と共に使用されます。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[PercentGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSeparator/CPP/percentgroupseparator.cpp#1)]
 [!code-csharp[PercentGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSeparator/CS/percentgroupseparator.cs#1)]
 [!code-vb[PercentGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSeparator/VB/percentgroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSizes">
      <MemberSignature Language="C#" Value="public int[] PercentGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] PercentGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ PercentGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で小数点の左にある各グループの数字の数を取得または設定します。</summary>
        <value>パーセント値で小数点の左にある各グループの数字の数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 1 つだけの要素を持つ 1 次元配列であり、その要素は 3 に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>プロパティは、"P" 標準書式指定文字列と共に使用して、整数グループに出現する桁数を定義します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 1次元配列のすべての要素は、1 ~ 9 の整数である必要があります。 最後の要素には0を指定できます。  
  
 配列の最初の要素は、 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>の左側の最下位の数字グループに含まれる要素の数を定義します。 後続の各要素は、前のグループの左側にある次の重要な数字のグループを参照します。 配列の最後の要素が0でない場合、残りの数字は配列の最後の要素に基づいてグループ化されます。 最後の要素が0の場合、残りの桁はグループ化されません。  
  
 たとえば、配列に {3, 4, 5} が含まれている場合、数字は "55, 55555, 55555, 55555, 4444, 333.00%" のようにグループ化されます。 配列に {3, 4, 0} が含まれている場合、数字は "55555555555555555, 4444, 333.00%" のようにグループ化されます。  
  
   
  
## Examples  
 次の例は、プロパティを<xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>変更した場合の影響を示しています。  
  
 [!code-cpp[PercentGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSizes/CPP/percentgroupsizes.cpp#1)]
 [!code-csharp[PercentGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSizes/CS/percentgroupsizes.cs#1)]
 [!code-vb[PercentGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSizes/VB/percentgroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定され、配列には 0 より小さいか、9 よりも大きいエントリが含まれています。  
  
 - または -  
  
 プロパティが設定され、配列には 0 に設定されているエントリ (最後のエントリ以外) が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="PercentNegativePattern">
      <MemberSignature Language="C#" Value="public int PercentNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負のパーセント値の形式パターンを取得または設定します。</summary>
        <value>負のパーセント値の形式パターン。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"-n %" を表します。"%" は <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>プロパティは、"P" 標準書式指定文字列と共に使用して、負のパーセンテージ値のパターンを定義します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 このプロパティには、次の表のいずれかの値が含まれています。 シンボル "%" は<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>で、記号 "-" <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>は`n`で、は数値です。 値3-11 は .NET Framework 2.0 で導入されたものであり、以前のバージョンでは使用できません。  
  
|[値]|関連付けられたパターン|  
|-----------|------------------------|  
|0|非該当|  
|1|非該当|  
|2|-% n|  
|3|%-n|  
|4|非該当|  
|5|n-%|  
|6|n%-|  
|7|-% n|  
|8|n%-|  
|9|非該当|  
|10|%-n|  
|11|n-%|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、または 11 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentPositivePattern">
      <MemberSignature Language="C#" Value="public int PercentPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正のパーセント値の形式パターンを取得または設定します。</summary>
        <value>正のパーセント値の形式パターン。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"n %" を表します。"%" は <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>プロパティは、"P" 標準書式指定文字列と共に使用して、正のパーセント値のパターンを定義します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 このプロパティには、次の表のいずれかの値が含まれています。 シンボル "%" はで、 <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> `n`は数値です。  
  
|[値]|関連付けられたパターン|  
|-----------|------------------------|  
|0|非該当|  
|1|非該当|  
|2|% n|  
|3|% n|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、または 3 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentSymbol">
      <MemberSignature Language="C#" Value="public string PercentSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント記号として使用する文字列を取得または設定します。</summary>
        <value>パーセント記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "%" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数値が "P" <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>で書式設定されている場合、または書式指定文字列に "%" が含まれている場合は、プロパティに割り当てられた文字列が結果文字列に含まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PerMilleSymbol">
      <MemberSignature Language="C#" Value="public string PerMilleSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PerMilleSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PerMilleSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PerMilleSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PerMilleSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーミル記号として使用する文字列を取得または設定します。</summary>
        <value>パーミル記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "‰" です。これは Unicode 文字の U+2030 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数値が "‰" <xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>を含む書式指定文字列で書式設定されている場合、プロパティに割り当てられた文字列が結果文字列に含まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinitySymbol">
      <MemberSignature Language="C#" Value="public string PositiveInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正の無限大を表す文字列を取得または設定します。</summary>
        <value>正の無限大を表す文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "Infinity" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正の無限大の詳細につい<xref:System.Double>て<xref:System.Single>は、「」または「」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSign">
      <MemberSignature Language="C#" Value="public string PositiveSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>関連付けられた数値が正であることを示す文字列を取得または設定します。</summary>
        <value>関連付けられた数値が正であることを示す文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "+" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、書式設定ではなく、数値文字列の解析にのみ使用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作で、割り当てられる値は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo ReadOnly(class System.Globalization.NumberFormatInfo nfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (nfi As NumberFormatInfo) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ ReadOnly(System::Globalization::NumberFormatInfo ^ nfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.NumberFormatInfo -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.ReadOnly nfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nfi" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="nfi">ラップする <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
        <summary>読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" /> ラッパーを返します。</summary>
        <returns><paramref name="nfi" /> をラップする読み取り専用の <see cref="T:System.Globalization.NumberFormatInfo" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このラッパーは、に変更`nfi`を加えないようにします。  
  
 読み取り<xref:System.Globalization.NumberFormatInfo>専用のプロパティへの割り当てを実行しようとすると、 <xref:System.InvalidOperationException>が発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="nfi" /> は <see langword="null" />です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      </Docs>
    </Member>
  </Members>
</Type>
