<Type Name="NumberFormatInfo" FullName="System.Globalization.NumberFormatInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e09605a585c890e0d9c16ada13be0f291cb4f774" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51918740" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class NumberFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.NumberFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NumberFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class NumberFormatInfo sealed : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type NumberFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>数値を書式設定および解析するためのカルチャ固有の情報を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo>クラスには、書式設定や数値の値を解析する際に使用されるカルチャ固有の情報が含まれています。 この情報には、通貨記号、小数点の記号、桁区切り記号、および正と負の記号のシンボルが含まれています。  
  
-   [NumberFormatInfo オブジェクトをインスタンス化します。](#Instantiating)  
  
    -   [現在のカルチャ](#Instantiating_Current)  
  
    -   [インバリアント カルチャの](#Instantiating_Invariant)  
  
    -   [特定のカルチャ](#Instantiating_Specific)  
  
    -   [ニュートラル カルチャ](#Instantiating_Neutral)  
  
-   [NumberFormatInfo と動的データ](#dynamic)  
  
-   [IFormatProvider、NumberFormatInfo、および数値の書式設定](#formatProvider)  
  
-   [NumberFormatInfo のプロパティおよび書式指定文字列](#properties)  
  
-   [NumberFormatInfo のプロパティを変更します。](#modifying)  
  
    -   [通貨記号とパターンの変更](#currency)  
  
    -   [国民識別番号を書式設定](#id)  
  
-   [数値文字列の解析](#parsing)  
  
    -   [ユーザー文字列の解析](#ParseUser)  
  
    -   [シリアル化して、数値データを逆シリアル化](#ParseSerial)  
  
<a name="Instantiating"></a>   
## <a name="instantiating-a-numberformatinfo-object"></a>NumberFormatInfo オブジェクトをインスタンス化します。  
 インスタンス化することができます、<xref:System.Globalization.NumberFormatInfo>現在のカルチャ、インバリアント カルチャ、特定のカルチャまたはニュートラル カルチャの書式指定規則を表すオブジェクト。  
  
<a name="Instantiating_Current"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-current-culture"></a>現在のカルチャの NumberFormatInfo オブジェクトをインスタンス化します。  
 インスタンス化することができます、<xref:System.Globalization.NumberFormatInfo>の次の方法のいずれかで現在のスレッド カルチャ オブジェクト。 返された各ケースで<xref:System.Globalization.NumberFormatInfo>オブジェクトは読み取り専用です。  
  
-   取得することによって、<xref:System.Globalization.CultureInfo>から現在のスレッド カルチャを表すオブジェクトを<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティ、および取得する、<xref:System.Globalization.CultureInfo>オブジェクトからその<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>プロパティ。  
  
-   取得することによって、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、 `static` (`Shared` Visual Basic で)<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>プロパティ。  
  
-   呼び出すことによって、<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>メソッドを<xref:System.Globalization.CultureInfo>現在のカルチャを表すオブジェクト。  
  
 次のコードの例では、これら 3 つの方法を作成する<xref:System.Globalization.NumberFormatInfo>現在のカルチャの書式指定規則を表すオブジェクト。 値を取得、<xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>プロパティを各オブジェクトは読み取り専用のことを示しています。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate1.vb#1)]  
  
 書き込み可能なを作成する<xref:System.Globalization.NumberFormatInfo>次の方法のいずれかで現在のスレッド カルチャの規則を表すオブジェクト。  
  
-   取得することによって、<xref:System.Globalization.NumberFormatInfo>オブジェクトの前のコード例に示すおよび呼び出す方法のいずれかで、<xref:System.Globalization.NumberFormatInfo.Clone%2A>メソッドで返された<xref:System.Globalization.NumberFormatInfo>オブジェクト。 元のコピーが作成<xref:System.Globalization.NumberFormatInfo>点を除いて、オブジェクト、<xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>プロパティは`false`します。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>を作成する方法、<xref:System.Globalization.CultureInfo>を使用して、現在のカルチャを表すオブジェクトをその<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>プロパティを取得する、<xref:System.Globalization.NumberFormatInfo>オブジェクト。  
  
 次の例では、これら 2 つのインスタンス化する方法を示しています、<xref:System.Globalization.NumberFormatInfo>オブジェクトし、の値を表示、<xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A>プロパティをオブジェクトが読み取り専用でがないことを示しています。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate2.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate2.vb#2)]  
  
 Windows オペレーティング システムでは、ユーザーの一部をオーバーライドすることに注意してください、<xref:System.Globalization.NumberFormatInfo>プロパティ値が数値の書式設定と解析を通じて操作で使用される、**地域と言語**コントロール パネルの項目。 たとえば、カルチャが英語 (米国) は、ユーザーは、通貨値をドル 1.1 の既定ではなく 1.1 (米ドル) として表示こともできます。 <xref:System.Globalization.NumberFormatInfo>説明した方法で取得したオブジェクト以前すべて反映これらのユーザー上書きします。 これが望ましくない場合は作成できます、<xref:System.Globalization.NumberFormatInfo>ユーザー オーバーライドを反映していないオブジェクト (読み取り/書き込みではまた、読み取り専用ではなく) を呼び出して、<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>コンス トラクターとの値を提供する`false`の`useUserOverride`引数。 次の例は、現在のカルチャが英語 (米国) とが通貨記号が米国ドルに $ の既定値から変更されましたの図をシステムを提供します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate3.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate3.vb#3)]  
  
 場合、<xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>プロパティに設定されて`true`、プロパティ<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>、 <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>、および<xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType>ものユーザー設定から取得されます。 ユーザー設定が関連付けられているカルチャと互換性がないかどうか、<xref:System.Globalization.CultureInfo>オブジェクト (選択したカレンダーでないごとに一覧表示の予定表のいずれかの場合など、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>プロパティ)、メソッドの結果と、プロパティの値は、定義されていません。  
  
<a name="Instantiating_Invariant"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-invariant-culture"></a>インバリアント カルチャの NumberFormatInfo オブジェクトをインスタンス化します。  
 インバリアント カルチャでは、カルチャに依存しないられるカルチャを表します。 すべて特定英語圏の国/地域ではなく、英語の言語に基づいています。 特定のカルチャのデータは、動的であっても、新しいカルチャの規則やユーザー設定を反映するように変更することができます、インバリアント カルチャのデータは変わりません。 A<xref:System.Globalization.NumberFormatInfo>カルチャで書式設定操作の結果文字列は異なる必要がありますいないをインバリアント カルチャの書式指定規則を表すオブジェクトを使用できます。  
  
 インスタンス化することができます、<xref:System.Globalization.NumberFormatInfo>次の方法でインバリアント カルチャの書式指定規則を表すオブジェクト。  
  
-   値を取得することによって、<xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>プロパティ。 返された<xref:System.Globalization.NumberFormatInfo>オブジェクトは読み取り専用です。  
  
-   値を取得することによって、<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>プロパティから、<xref:System.Globalization.CultureInfo>オブジェクトによって返される、<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>プロパティ。 返された<xref:System.Globalization.NumberFormatInfo>オブジェクトは読み取り専用です。  
  
-   パラメーターなしで呼び出すことによって<xref:System.Globalization.NumberFormatInfo.%23ctor%2A>クラスのコンス トラクター。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
 次の例がこれらの各メソッドをインスタンス化するには、<xref:System.Globalization.NumberFormatInfo>インバリアント カルチャを表すオブジェクト。 オブジェクトが読み取り専用であるかどうかを示します  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate4.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate4.vb#4)]  
  
<a name="Instantiating_Specific"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-specific-culture"></a>特定のカルチャの NumberFormatInfo オブジェクトをインスタンス化します。  
 特定のカルチャでは、特定の国/地域で話されている言語を表します。 たとえば、EN-US では、米国で話される英語の言語を表す特定のカルチャと EN-CA はカナダで話される英語の言語を表す特定のカルチャ。 インスタンス化することができます、<xref:System.Globalization.NumberFormatInfo>次の方法で、特定のカルチャの書式指定規則を表すオブジェクト。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType>メソッドと、返された値を取得する<xref:System.Globalization.CultureInfo>オブジェクトの<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 返された<xref:System.Globalization.NumberFormatInfo>オブジェクトは読み取り専用です。  
  
-   渡すことによって、<xref:System.Globalization.CultureInfo>カルチャを表すオブジェクトを持つ<xref:System.Globalization.NumberFormatInfo>、静的なを取得するオブジェクトを<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>メソッド。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
-   呼び出すことによって、<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>メソッドと、返された値を取得する<xref:System.Globalization.CultureInfo>オブジェクトの<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
-   いずれかを呼び出すことによって、<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>クラスのコンス トラクターと、返された値を取得する<xref:System.Globalization.CultureInfo>オブジェクトの<xref:System.Globalization.CultureInfo.NumberFormat%2A>プロパティ。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り/書き込み可能です。  
  
 次のコードの例では、これら 4 つの方法を作成する、<xref:System.Globalization.NumberFormatInfo>インドネシア語 (インドネシア) カルチャの書式指定規則を反映するオブジェクト。 また、各オブジェクトは読み取り専用かどうかを示します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate5.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate5.vb#5)]  
  
<a name="Instantiating_Neutral"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-neutral-culture"></a>ニュートラル カルチャの NumberFormatInfo オブジェクトをインスタンス化します。  
 ニュートラル カルチャでは、カルチャまたは言語、国/地域の独立したを表します。 通常は 1 つまたは複数の特定のカルチャの親です。 たとえば、fr は、フランス語の言語と、FR-FR カルチャの親のニュートラル カルチャです。 作成する、<xref:System.Globalization.NumberFormatInfo>を作成するのと同様に、ニュートラル カルチャの書式指定規則を表すオブジェクトを<xref:System.Globalization.NumberFormatInfo>特定のカルチャの書式指定規則を表すオブジェクト。  
  
> [!NOTE]
>  [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]取得しようとしています。 以前のバージョン、<xref:System.Globalization.NumberFormatInfo>ニュートラル カルチャの書式指定規則を反映するオブジェクトをスロー、<xref:System.NotSupportedException>例外。  
  
 ただし、特定の国/リージョンに依存しないため、ニュートラル カルチャにカルチャ固有の書式情報が不足しています。 設定ではなく、<xref:System.Globalization.NumberFormatInfo>ジェネリックの値を持つオブジェクトに、.NET Framework が返す、<xref:System.Globalization.NumberFormatInfo>ニュートラル カルチャの子である、特定の書式指定規則のカルチャを反映するオブジェクト。 たとえば、 <xref:System.Globalization.NumberFormatInfo> en のニュートラル カルチャは EN-US カルチャの書式指定規則を反映するためのオブジェクトと<xref:System.Globalization.NumberFormatInfo>fr カルチャ、FR-FR カルチャの書式設定規則を反映するためのオブジェクトします。  
  
 次のようなコードを使用すると、各ニュートラル カルチャを表すどの特定のカルチャの書式指定規則を決定します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate6c.vb#6)]  
  
<a name="dynamic"></a>   
## <a name="numberformatinfo-and-dynamic-data"></a>NumberFormatInfo と動的データ  
 カルチャに固有のデータによって提供される数値の書式設定を<xref:System.Globalization.NumberFormatInfo>クラスは動的で提供されるカルチャのデータと同様に、<xref:System.Globalization.CultureInfo>クラス。 値の安定性に関する想定をする必要がありますいない<xref:System.Globalization.NumberFormatInfo>オブジェクトが関連付けられている特定<xref:System.Globalization.CultureInfo>オブジェクト。 インバリアント カルチャとそれに関連付けられたによって提供されるデータのみ<xref:System.Globalization.NumberFormatInfo>オブジェクトは安定しています。 アプリケーションのセッション間で、または、次の理由の 1 つのセッション内であっても、その他のデータを変更できます。  
  
-   **システムの更新プログラム。** 通貨記号、通貨の書式などのカルチャの設定は、時間の経過と共に変更します。 Windows 更新プログラムにはへの変更が含まれています、これが発生したとき、<xref:System.Globalization.NumberFormatInfo>特定のカルチャのプロパティの値。  
  
-   **置換カルチャ。** <xref:System.Globalization.CultureAndRegionInfoBuilder>既存のカルチャのデータを置換するクラスを使用できます。  
  
-   **プロパティ値に対する変更を連鎖します。** これにより、実行時にさまざまなカルチャ関連のプロパティを変更できます<xref:System.Globalization.NumberFormatInfo>データを変更します。 たとえば、プログラム、またはユーザーの操作によっては、現在のカルチャを変更できます。 このような場合、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>プロパティは、現在のカルチャに関連付けられているオブジェクトに変更します。  
  
-   **ユーザー設定。** アプリケーションのユーザーには、コントロール パネルの 地域と言語のオプションを使って現在のシステム カルチャに関連付けられている値の一部をオーバーライド可能性があります。 たとえば、ユーザーは、さまざまな通貨記号、または別の 10 進区切り記号選択可能性があります。 場合、<xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType>プロパティに設定されて`true`(既定値) のプロパティ、<xref:System.Globalization.NumberFormatInfo>オブジェクトは、ユーザーの設定からも取得されます。  
  
 すべてのユーザー オーバーライド可能なプロパティ、.NET Framework 2.0 以降で、<xref:System.Globalization.NumberFormatInfo>オブジェクトは、オブジェクトの作成時に初期化されます。 可能性があるが、不整合のため、どちらもオブジェクトの作成やユーザー オーバーライドのプロセスがアトミックで、オブジェクトの作成中に、関連する値を変更することがあります。 ただし、これらの不整合が非常にまれなはずです。  
  
 ユーザー オーバーライドを反映するかどうかを制御する<xref:System.Globalization.NumberFormatInfo>現在のスレッド カルチャと同じカルチャを表すオブジェクト。 次の表に、方法、<xref:System.Globalization.NumberFormatInfo>オブジェクトを取得して、結果のオブジェクトがユーザー オーバーライドを反映するかどうかを示します。  
  
|CultureInfo と NumberFormatInfo オブジェクトのソース|ユーザー オーバーライドが反映されます。|  
|-------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.NumberFormat` プロパティ|[はい]|  
|<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> プロパティ|[はい]|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> メソッド|[はい]|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> メソッド|×|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> コンストラクター|[はい]|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> コンストラクター|値に依存`useUserOverride`パラメーター|  
  
 使用する場合、ユーザー オーバーライドを尊重する必要がありますそれ以外の場合は特別な理由がある場合を除き、<xref:System.Globalization.NumberFormatInfo>を書式設定し、ユーザー入力を解析または数値データを表示するクライアント アプリケーション内のオブジェクト。 サーバー アプリケーションまたは自動アプリケーションの場合は、ユーザー オーバーライドを使用する必要があります。 ただし、使用する場合、<xref:System.Globalization.NumberFormatInfo>いずれかのオブジェクトを明示的または暗黙的に文字列の形式で数値データを保持するには、するには使用するか、<xref:System.Globalization.NumberFormatInfo>インバリアント カルチャの書式設定規則を反映するオブジェクトを指定する必要があります、カルチャに関係なく使用するカスタム数値書式指定文字列。  
  
<a name="formatProvider"></a>   
## <a name="iformatprovider-numberformatinfo-and-numeric-formatting"></a>IFormatProvider、NumberFormatInfo、および数値の書式設定  
 A<xref:System.Globalization.NumberFormatInfo>オブジェクトがすべての数値を書式設定操作の暗黙的または明示的に使用されます。 次のメソッドの呼び出しが含まれます。  
  
-   すべての数値書式指定メソッドがなど<xref:System.Int32.ToString%2A?displayProperty=nameWithType>、 <xref:System.Double.ToString%2A?displayProperty=nameWithType>、および<xref:System.Convert.ToString%28System.Int32%29?displayProperty=nameWithType>します。  
  
-   書式指定メソッド主要な複合<xref:System.String.Format%2A?displayProperty=nameWithType>します。  
  
-   書式指定メソッドがなどその他の複合<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>と<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>します。  
  
 すべての数値書式設定操作の使用、<xref:System.IFormatProvider>実装します。 <xref:System.IFormatProvider>インターフェイスには、1 つのメソッドが含まれています。<xref:System.IFormatProvider.GetFormat%28System.Type%29>します。 これは、渡されるコールバック メソッド、<xref:System.Type>書式設定情報を提供するために必要な型を表すオブジェクト。 その型のインスタンスを返すため、このメソッドはまたは`null`型のインスタンスを提供できない場合、します。 .NET Framework には 2 つ<xref:System.IFormatProvider>数値の書式設定の実装。  
  
-   <xref:System.Globalization.CultureInfo>を特定のカルチャ (または特定の国/地域で特定の言語) を表すクラス。 書式設定操作では、数値、<xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType>メソッドを返します、<xref:System.Globalization.NumberFormatInfo>オブジェクトに関連付けられているその<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>プロパティ。  
  
-   <xref:System.Globalization.NumberFormatInfo>クラスを関連付けられているカルチャの書式指定規則に関する情報を提供します。 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A?displayProperty=nameWithType>メソッド自体のインスタンスを返します。  
  
 場合、<xref:System.IFormatProvider>実装が指定されていない書式設定メソッドを明示的に、<xref:System.Globalization.CultureInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>現在のスレッド カルチャを表すプロパティを使用します。  
  
 次の例の間のリレーションシップを示しています、<xref:System.IFormatProvider>インターフェイスと<xref:System.Globalization.NumberFormatInfo>カスタムを定義することで、書式設定操作でクラス<xref:System.IFormatProvider>実装します。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドは、書式設定操作によって要求されたオブジェクトの型名を表示します。 インターフェイスが要求している場合、<xref:System.Globalization.NumberFormatInfo>オブジェクト、この方法では、<xref:System.Globalization.NumberFormatInfo>の現在のスレッド カルチャ オブジェクト。 例を示しますから出力として、<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッド要求を<xref:System.Globalization.NumberFormatInfo>オブジェクトを書式設定情報を提供する、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>メソッド要求<xref:System.Globalization.NumberFormatInfo>と<xref:System.Globalization.DateTimeFormatInfo>オブジェクトだけでなく、 <xref:System.ICustomFormatter>実装です。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/formatprovider1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/formatprovider1.vb#1)]  
  
 場合、<xref:System.IFormatProvider>実装がメソッドの呼び出し、メソッド呼び出しの書式指定で明示的に指定されていない、`CultureInfo.CurrentCulture.GetFormat`を返すメソッド、<xref:System.Globalization.NumberFormatInfo>現在のスレッド カルチャに対応するオブジェクト。  
  
<a name="properties"></a>   
## <a name="format-strings-and-numberformatinfo-properties"></a>NumberFormatInfo のプロパティおよび書式指定文字列  
 すべての書式設定操作では、結果の文字列数値からを生成するために、標準またはカスタム数値書式指定文字列を使用します。 場合によっては、結果の文字列を生成するために書式設定文字列の使用は、次の例のように、明示的なは。 このコードは、<xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>に変換するメソッド、<xref:System.Decimal>値を EN-US カルチャの書式設定規則を使用して別の文字列表現。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties1.vb#2)]  
  
 それ以外の場合、書式指定文字列の使用は暗黙的です。 たとえば、次のメソッド呼び出しの既定値またはパラメーターなしで<xref:System.Decimal.ToString?displayProperty=nameWithType>の値は、メソッド、<xref:System.Decimal>インスタンスは一般 ("G") 書式指定子とここでは、現在のカルチャの規則を使用して書式設定、EN-US カルチャ。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties2.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties2.vb#3)]  
  
 各標準の数値書式指定文字列は、1 つ以上を使用<xref:System.Globalization.NumberFormatInfo>プロパティを確認して、パターンまたは結果の文字列で使用される記号。 同様に、各カスタム数値書式指定子「0」、「#」記号を挿入で定義されている結果の文字列の点を除いて<xref:System.Globalization.NumberFormatInfo>プロパティ。 次の表は、標準およびカスタム数値書式指定子とそれに関連付けられた<xref:System.Globalization.NumberFormatInfo>プロパティ。  特定のカルチャの結果文字列の外観を変更するを参照してください。、[変更 NumberFormatInfo のプロパティ](#modifying)セクション。 これらの使用方法の詳細の書式指定子を参照してください[Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)します。  
  
|書式指定子|関連付けられたプロパティ|  
|----------------------|---------------------------|  
|"C"または"c"(通貨の書式指定子)|<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>、小数部桁数の既定値を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、何千台ものグループを定義する区切り記号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>、整数のグループのサイズを定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>、負の通貨値のパターンを定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>、通貨の正の値のパターンを定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>、通貨記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。|  
|"D"または"d"(10 進数の書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。|  
|"E"または"e"(指数関数的または指数の書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>、仮数と指数部の負の記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>、指数部の正の記号を定義します。|  
|"F"または"f"(固定小数点の書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>、小数部桁数の既定値を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。|  
|"G"または"g"(一般的な形式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>、指数形式で結果の文字列の正の記号を定義します。|  
|"N"または"n"(数値書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>、小数部桁数の既定値を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>、(数千) を区切り記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>、グループ内の整数の桁の数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>、負の値の形式を定義します。|  
|"P"または"p"(パーセント書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>、小数部桁数の既定値を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>、桁区切り記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>、グループ内の整数の桁の数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>、パーセント記号と負の値の負の符号の位置を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>を正の値のパーセント記号の位置を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>、パーセント記号を定義します。|  
|"R"または"r"(ラウンドト リップ書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> (マイナス記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>、指数部の正の記号を定義します。|  
|"X"または"x"(16 進数の書式指定子)|なし。|  
|"."(小数点 10 進数のカスタム書式指定子)|<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> (小数点の記号を定義します)。|  
|"、"(グループ区切り記号のカスタム書式指定子)|<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>、グループ (1,000 単位) の区切り記号を定義します。|  
|「%」(パーセント プレース ホルダーのカスタム書式指定子)|<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>、パーセント記号を定義します。|  
|「‰」(あたりパーミル プレース ホルダーのカスタム書式指定子)|<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>を定義する、パーミル記号。|  
|"E"(指数表記のカスタム書式指定子)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>、仮数と指数部の負の記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>、指数部の正の記号を定義します。|  
  
 なお、<xref:System.Globalization.NumberFormatInfo>クラスが含まれています、<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>特定のカルチャで使用される基本の 10 桁を指定するプロパティ。 ただし、プロパティを書式設定操作; で使用できません。基本ラテンの数字 0 のみ (u+0030) 9 から (u+0039)、結果の文字列で使用されます。 さらに、<xref:System.Single>と<xref:System.Double>の値`NaN`、`PositiveInfinity`と`NegativeInfinity`、結果の文字列だけで構成されてによって定義されているシンボル、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、および<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>プロパティ、それぞれします。  
  
<a name="modifying"></a>   
## <a name="modifying-numberformatinfo-properties"></a>NumberFormatInfo のプロパティを変更します。  
 プロパティを変更することができます、<xref:System.Globalization.NumberFormatInfo>数値書式設定操作で生成される結果の文字列をカスタマイズするオブジェクト。 この操作を行うには、次の手順を実行します。  
  
1.  読み取り/書き込みコピーを作成、<xref:System.Globalization.NumberFormatInfo>書式指定規則を変更するオブジェクト。 詳細については、次を参照してください。、 [NumberFormatInfo オブジェクトをインスタンス化する](#Instantiating)セクション。  
  
2.  プロパティまたは目的の結果文字列を生成するために使用されるプロパティを変更します。 どのように書式設定メソッドの使用については<xref:System.Globalization.NumberFormatInfo>結果の文字列を定義するプロパティを参照してください、[書式指定文字列と NumberFormatInfo のプロパティ](#properties)セクション。  
  
3.  ユーザー設定を使用して、<xref:System.Globalization.NumberFormatInfo>オブジェクトとして、<xref:System.IFormatProvider>書式指定メソッドの呼び出しで引数。  
  
> [!NOTE]
>  動的にアプリケーションを起動するたびのカルチャのプロパティの値を変更、代わりに使用することができます、<xref:System.Globalization.CultureAndRegionInfoBuilder>カスタム カルチャ (カルチャ固有の名前を持つし、既存のカルチャのドキュメントを補足する) または代替のいずれかを定義するクラス(1 つは、特定のカルチャではなく) のカルチャ。  
  
 次のセクションでは、いくつかの例を提供します。  
  
<a name="currency"></a>   
### <a name="modifying-the-currency-symbol-and-pattern"></a>通貨記号とパターンの変更  
 次の例では、変更、 <xref:System.Globalization.NumberFormatInfo> EN-US カルチャの書式指定規則を表すオブジェクトします。 ISO 4217 通貨記号を割り当てます、<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>プロパティを通貨記号の後にスペースと数値で構成される通貨の値のパターンを定義します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_currency1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_currency1.vb#1)]  
  
<a name="id"></a>   
### <a name="formatting-a-national-identification-number"></a>国民識別番号を書式設定  
 多くの身分登録番号の数字だけで構成し、そのためのプロパティを変更して簡単にフォーマットできます、<xref:System.Globalization.NumberFormatInfo>オブジェクト。 米国の社会保障番号が次のように配置された 9 の数字で構成されてなど:`XXX-XX-XXXX`します。 次の例では、整数値に適切に書式設定として社会保障番号が格納されている前提としています。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_ssn1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_ssn1.vb#2)]  
  
<a name="parsing"></a>   
## <a name="parsing-numeric-strings"></a>数値文字列の解析  
 解析するには、数値の文字列形式を数値に変換する必要があります。 .NET Framework の各数値型には、2 つのオーバー ロードされた解析メソッドが含まれています:`Parse`と`TryParse`します。 `Parse`メソッドは文字列を数値に変換し、変換が失敗した場合に例外をスローします。 `TryParse`メソッドは文字列を数値に変換に番号を割り当てます、`out`引数を返します、<xref:System.Boolean>変換が成功したかどうかを示す値です。  
  
 暗黙的または明示的に使用して解析メソッドを<xref:System.Globalization.NumberStyles>(グループ区切り記号、小数点記号、通貨記号など) には、どのようなスタイル要素は、解析操作が成功する場合、文字列内に存在するかを決定する列挙値。 場合、<xref:System.Globalization.NumberStyles>値は既定では、メソッド呼び出しで指定されていない、<xref:System.Globalization.NumberStyles>を含む値、<xref:System.Globalization.NumberStyles.Float>と<xref:System.Globalization.NumberStyles.AllowThousands>グループ記号、小数点区切り文字、負の符号に解析された文字列を含めることができますを指定するフラグ空白文字、またはそれには、指数表記の数値の文字列形式を指定できます。  
  
 解析メソッドも暗黙的または明示的に使用して、<xref:System.Globalization.NumberFormatInfo>パターンを特定のシンボルを定義するオブジェクトを解析する文字列で発生する可能性が。 場合、<xref:System.Globalization.NumberFormatInfo>オブジェクトが指定されていない、既定値は、<xref:System.Globalization.NumberFormatInfo>の現在のスレッド カルチャ。 解析の詳細についてなど、個々 の解析メソッドを参照してください<xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType>、 <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>、 <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>、 <xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType>、 <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29?displayProperty=nameWithType>、および<xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29?displayProperty=nameWithType>します。  
  
 次の例では、文字列の解析のカルチャに依存する性質を示します。 数千ものを含む文字列を解析しようと、EN-US、FR-FR、およびインバリアント カルチャの規則を使用して区切り記号。 小数点区切り文字を FR-FR カルチャで解析できない場合に、グループ区切り記号、ピリオド、コンマを含む文字列と、グループ区切り記号として white space と 10 進区切り記号としてコンマ文字列は EN-US およびインバリアント カルチャの解析に失敗します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parse1.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parse1.vb#4)]  
  
 通常の解析は、2 つのコンテキストで行われます。  
  
-   としてユーザー入力を数値に変換するように設計された操作。  
  
-   設計されている操作として数値の値をラウンドト リップさせるつまり、数値を文字列としてシリアル化された以前の逆シリアル化します。  
  
 次のセクションには、さらに詳しくこれら 2 つの操作について説明します。  
  
<a name="ParseUser"></a>   
### <a name="parsing-user-strings"></a>ユーザー文字列の解析  
 常にインスタンス化する必要がある、ユーザーが入力した数値の文字列を解析するときに、<xref:System.Globalization.NumberFormatInfo>ユーザーのカルチャ設定を反映するオブジェクト。 インスタンスを作成する方法については、<xref:System.Globalization.NumberFormatInfo>ユーザーによるカスタマイズを反映するオブジェクトを参照してください、 [NumberFormatInfo と動的データ](#dynamic)セクション。  
  
 次の例は、ユーザーのカルチャ設定を反映する解析操作とにはない 1 つの違いを示しています。 この場合、システムの既定のカルチャは EN-US が、ユーザーが定義されている小数点記号として「,」と"."コントロール パネルで、グループ区切り記号として**地域と言語**します。 通常、これらのシンボルは、既定値 EN-US カルチャで取り消されます。 ときにユーザーが、ユーザー設定を反映する文字列を入力し、によって文字列が解析、<xref:System.Globalization.NumberFormatInfo>も (上書き) のユーザー設定が反映されているオブジェクトが解析操作が正しい結果を返します。 ただし、文字列の解析時で、<xref:System.Globalization.NumberFormatInfo>標準的な EN-US カルチャの設定を反映するオブジェクト、グループ区切り記号としてコンマ シンボルは誤りし、不適切な結果を返します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parseuser1.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parseuser1.vb#5)]  
  
<a name="ParseSerial"></a>   
### <a name="serializing-and-deserializing-numeric-data"></a>シリアル化して、数値データを逆シリアル化  
 数値データが文字列の形式でシリアル化し、後で逆シリアル化で、解析時に、文字列を生成およびインバリアント カルチャの規則を使用して解析する必要があります。 書式設定と解析操作では、特定のカルチャの規則は反映されませんする必要があります。 データの移植性が厳密に制限されます。 カルチャに固有の設定を使用する場合カルチャに固有の設定は、シリアル化されたスレッドのと同じスレッドでのみ正常に逆シリアル化されたことができます。 場合によっては、データのこともできないことを意味するシリアル化された同じシステム上で正常に逆シリアル化されました。  
  
 この原則に違反した場合、何が起こり、次の例を示しています。 現在のスレッドは、EN-US カルチャのカルチャに固有の設定を使用する場合は、配列内の浮動小数点値を文字列に変換します。 EN-GB カルチャのカルチャに固有の設定を使用するスレッドによってデータが解析されます。 ここでは、各解析操作が成功すると、データされていませんラウンド トリップが正常とデータの破損が発生します。 その他の場合は、解析操作が失敗して、<xref:System.FormatException>例外がスローされることです。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parsepersisted.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parsepersisted.vb#6)]  
  
   
  
## Examples  
 次の例は、取得する方法を示します、<xref:System.Globalization.NumberFormatInfo>オブジェクトを対応する<xref:System.Globalization.CultureInfo>オブジェクト、およびクエリの数が特定のカルチャの書式設定情報を取得したオブジェクトを使用します。  
  
 [!code-cpp[NumberFormatInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberFormatInfo/cpp/NumberFormatInfo.cpp#1)]
 [!code-csharp[NumberFormatInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberFormatInfo/CS/NumberFormatInfo.cs#1)]
 [!code-vb[NumberFormatInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberFormatInfo/vb/numberformatinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.IFormatProvider" />
    <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">カスタム数値書式指定文字列</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NumberFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NumberFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>カルチャに依存しない (インバリアントな) <see cref="T:System.Globalization.NumberFormatInfo" /> クラスの新しい書き込み可能インスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションでは、ユーザー定義の書式設定が必要な場合、新しいインスタンスのプロパティを変更できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="numberFormatInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトの簡易コピーを作成します。</summary>
        <returns>元の <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトからコピーされた新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クローンが書き込み可能な場合でも、元の<xref:System.Globalization.NumberFormatInfo>オブジェクトは読み取り専用です。 そのため、ユーザー定義のパターンを使用、複製のプロパティを変更できます。  
  
 オブジェクトのシャロー コピーは、のみ、オブジェクトのコピーです。 オブジェクトに他のオブジェクトへの参照が含まれている場合、シャロー コピーは、参照されるオブジェクトのコピーを作成できません。 代わりに元のオブジェクトを参照します。 その一方で、オブジェクトのディープ コピーでは、オブジェクトのコピーと、直接または間接的には、そのオブジェクトが参照するすべてのコピーを作成します。 場合、<xref:System.Globalization.NumberFormatInfo>オブジェクトの簡易コピーは、すべてのプロパティをオブジェクト参照を返すため、すべてのインスタンスのプロパティをコピーするための十分な`static`(`Shared` Visual Basic で)。  
  
   
  
## Examples  
 次の例では、<xref:System.Globalization.NumberFormatInfo.Clone%2A>の読み取り/書き込みコピーを作成する方法、<xref:System.Globalization.NumberFormatInfo>数値の書式設定の現在のスレッド カルチャの規則を表すオブジェクト。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalDigits">
      <MemberSignature Language="C#" Value="public int CurrencyDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で使用する小数点以下の桁数を取得または設定します。</summary>
        <value>通貨の値で使用する小数点以下の桁数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>数値の書式設定操作の有効桁数指定子がない"C"標準書式指定文字列でプロパティを使用します。 小数部の桁数、小数点区切り文字の後に表示される既定の数を定義します。 精度指定子を使用する場合、この値はオーバーライドされます。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>プロパティ。  
  
 [!code-cpp[CurrencyDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalDigits/CPP/currencydecimaldigits.cpp#1)]
 [!code-csharp[CurrencyDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalDigits/CS/currencydecimaldigits.cs#1)]
 [!code-vb[CurrencyDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalDigits/VB/currencydecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、99 より大きい値に設定されようとしています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で桁区切り記号として使用する文字列を取得または設定します。</summary>
        <value>通貨の値で桁区切り記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "." です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの初期値が設定から派生した、**地域と言語**コントロール パネルの項目。  
  
 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>桁の小数部から整数型を分離するシンボルを定義するプロパティは、"C"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>プロパティ。  
  
 [!code-cpp[CurrencyDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalSeparator/CPP/currencydecimalseparator.cpp#1)]
 [!code-csharp[CurrencyDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalSeparator/CS/currencydecimalseparator.cs#1)]
 [!code-vb[CurrencyDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalSeparator/VB/currencydecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">プロパティが空の文字列に設定されています。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で小数点の左にある数字のグループを区切る文字列を取得または設定します。</summary>
        <value>通貨の値で小数点の左にある数字のグループを区切る文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "," です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの初期値が設定から派生した、**地域と言語**コントロール パネルの項目。  
  
 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>整数の桁のグループを区切る記号を定義するプロパティは、"C"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>プロパティ。  
  
 [!code-cpp[CurrencyGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSeparator/CPP/currencygroupseparator.cpp#1)]
 [!code-csharp[CurrencyGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSeparator/CS/currencygroupseparator.cs#1)]
 [!code-vb[CurrencyGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSeparator/VB/currencygroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSizes">
      <MemberSignature Language="C#" Value="public int[] CurrencyGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CurrencyGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ CurrencyGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で小数点の左にある各グループの数字の数を取得または設定します。</summary>
        <value>通貨の値で小数点の左にある各グループの数字の数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 1 つだけの要素を持つ 1 次元配列であり、その要素は 3 に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>整数グループで表示される桁数を定義するプロパティは、"C"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 1 次元の配列内のすべての要素は、1 ~ 9 の整数である必要があります。 最後の要素には、0 を指定できます。  
  
 配列の最初の要素の左側にすぐにある数字のグループの最下位要素の数を定義する、<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>します。 後続の各要素は、前のグループの左側にある数字の次の重要なグループを指します。 配列の最後の要素がある場合、0 ではなく、残りの数字に基づいてグループ化されます、配列の最後の要素。 最後の要素が 0 の場合、残りの部分はグループ化されません。  
  
 たとえば、{3, 4, 5} が、配列が含まれる場合、桁の数字は「$55,55555,55555,55555,4444,333.00」のようなグループ化されます。 {3, 4, 0} が、配列が含まれる場合、数字を「$55555555555555555,4444,333.00」のようなグループ化します。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>プロパティ。  
  
 [!code-cpp[CurrencyGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSizes/CPP/currencygroupsizes.cpp#1)]
 [!code-csharp[CurrencyGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSizes/CS/currencygroupsizes.cs#1)]
 [!code-vb[CurrencyGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSizes/VB/currencygroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定され、配列には 0 より小さいか、9 よりも大きいエントリが含まれています。  
  
- または - 
プロパティが設定され、配列には 0 に設定されているエントリ (最後のエントリ以外) が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyNegativePattern">
      <MemberSignature Language="C#" Value="public int CurrencyNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負の通貨値の形式パターンを取得または設定します。</summary>
        <value>負の通貨値の形式パターン。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"($n)" を表します。"$" は <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>プロパティが負の通貨値のパターンを定義する、"C"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 このプロパティは、次の表に、値の 1 つを持ちます。 「$」記号が、 <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>、記号"-"は、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>、および`n`は数値です。  
  
|[値]|関連付けられているパターン|  
|-----------|------------------------|  
|0|($n)|  
|1|-$n|  
|2|$ n|  
|3|$n-|  
|4|(n $)|  
|5|-n$|  
|6|n $|  
|7|n$-|  
|8|-n $|  
|9|-$ n|  
|10|n $-|  
|11|$-n|  
|12|$ -n|  
|13|n-$|  
|14|($ n)|  
|16|(n $)|  
  
   
  
## Examples  
 次の例は、どのように<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>プロパティが負の通貨値の書式を定義します。  ホスト コンピューターで定義され、カルチャごとに表示されるすべての特定のカルチャを取得<xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>プロパティの値、その関連するパターン、および数値が通貨値として書式設定します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/cs/currencynegativepattern1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/vb/currencynegativepattern1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、15 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyPositivePattern">
      <MemberSignature Language="C#" Value="public int CurrencyPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の正の値の形式パターンを取得または設定します。</summary>
        <value>通貨の正の値の形式パターン。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"$n" を表します。"$" は <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>通貨の正の値のパターンを定義するプロパティは、"C"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 このプロパティは、次の表に、値の 1 つを持ちます。 「$」記号が、<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>と`n`は数値です。  
  
|[値]|関連付けられているパターン|  
|-----------|------------------------|  
|0|$n|  
|1|n$|  
|2|$ n|  
|3|n $|  
  
 パターンでは、正の記号はサポートされていないことに注意してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、または 3 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencySymbol">
      <MemberSignature Language="C#" Value="public string CurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨記号として使用する文字列を取得または設定します。</summary>
        <value>通貨記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "¤" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 割り当てられた文字列、<xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>数値の値が"C"に設定されると、結果の文字列のプロパティが含まれている[標準数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)します。  
  
   
  
## Examples  
 次の例では、現在のカルチャの通貨記号が表示され、"C"標準の数値書式指定文字列を使用して通貨値の書式設定します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/cs/currencysymbolex1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/vb/currencysymbolex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ CurrentInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカルチャに基づいて値を形式指定する読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" /> を取得します。</summary>
        <value>現在のスレッドのカルチャに基づく読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 取得する、<xref:System.Globalization.NumberFormatInfo>オブジェクトから、<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>プロパティを取得するのには、<xref:System.Globalization.NumberFormatInfo>オブジェクトから、`CultureInfo.CurrentCulture.NumberFormat`プロパティ。  
  
   
  
## Examples  
 例を次に示しますによって返されるオブジェクト、<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>と`CultureInfo.CurrentCulture.NumberFormat`プロパティは同じです。 プロパティ値を表示するリフレクションを使用し、<xref:System.Globalization.NumberFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>現在のカルチャが EN-US でシステムのプロパティ。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/cs/currentinfo1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/vb/currentinfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitution">
      <MemberSignature Language="C#" Value="public System.Globalization.DigitShapes DigitSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.DigitShapes DigitSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitSubstitution As DigitShapes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DigitShapes DigitSubstitution { System::Globalization::DigitShapes get(); void set(System::Globalization::DigitShapes value); };" />
      <MemberSignature Language="F#" Value="member this.DigitSubstitution : System.Globalization.DigitShapes with get, set" Usage="System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DigitShapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グラフィカル ユーザー インターフェイスが数字の形状を表示する方法を指定する値を取得または設定します。</summary>
        <value>カルチャ固有の数字形状を指定する列挙値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Globalization.NumberFormatInfo.DigitSubstitution%2A>プロパティは将来使用するために予約されています。 現時点では、その解析または書式設定、現在の操作のいずれかで使用されていない<xref:System.Globalization.NumberFormatInfo>オブジェクト。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">セット操作の値が正しい <see cref="T:System.Globalization.DigitShapes" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="numberFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">要求される形式指定サービスの <see cref="T:System.Type" />。</param>
        <summary>数値形式指定サービスを提供する指定した型のオブジェクトを取得します。</summary>
        <returns>
          <paramref name="formatType" /> が現在の <see cref="T:System.Globalization.NumberFormatInfo" /> の型と同じ場合は、現在の <see cref="T:System.Globalization.NumberFormatInfo" />。それ以外の場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Format(String, IFormatProvider)`基本データ型でサポートされるメソッドは、このメソッドを呼び出すときに、現在<xref:System.Globalization.NumberFormatInfo>として渡される、<xref:System.IFormatProvider>パラメーター。 このメソッドは、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> を実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo GetInstance(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (formatProvider As IFormatProvider) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ GetInstance(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.GetInstance formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">
          <see cref="T:System.Globalization.NumberFormatInfo" /> を取得するために使用する <see cref="T:System.IFormatProvider" />。  
  
- または - 
 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> を取得する <see langword="null" />。</param>
        <summary>指定された <see cref="T:System.Globalization.NumberFormatInfo" /> に関連付けられている <see cref="T:System.IFormatProvider" /> を取得します。</summary>
        <returns>指定した <see cref="T:System.Globalization.NumberFormatInfo" /> に関連付けられている <see cref="T:System.IFormatProvider" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>メソッドの`formatProvider`を使用して<xref:System.Globalization.NumberFormatInfo>型パラメーターとして。 場合`formatProvider`は`null`場合<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>返します`null`、このメソッドが戻る<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>します。  
  
 アプリケーションの取得、<xref:System.Globalization.NumberFormatInfo>特定のカルチャを使用して、次のメソッドのいずれかのオブジェクト。  
  
-   を通じて、<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>プロパティ。  
  
-   を通じて、<xref:System.Globalization.NumberFormatInfo.GetInstance%2A>メソッド、`provider`は、<xref:System.Globalization.CultureInfo>します。  
  
 A<xref:System.Globalization.NumberFormatInfo>を特定のカルチャまたはニュートラル カルチャは、インバリアント カルチャのみのオブジェクトが作成されます。 インバリアント カルチャや特定のカルチャのニュートラル カルチャの詳細については、次を参照してください。、<xref:System.Globalization.CultureInfo>クラス。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ InvariantInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに依存しない (インバリアントな) 読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトを取得します。</summary>
        <value>カルチャに依存しない (インバリアントな) 読み取り専用オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、<xref:System.Globalization.NumberFormatInfo>現在のカルチャに関係なく、このプロパティによって返されるオブジェクトが変更されません。 これは、すべての国/地域ではなくが、英語の言語に関連付けられているカルチャである、インバリアント カルチャの書式指定規則を表します。 インバリアント カルチャは、カルチャに依存しない、または複数のカルチャに関係なく表示に適した結果文字列を生成する操作を書式設定に使用されます。  
  
   
  
## Examples  
 次の例の既定のプロパティ値を表示する、<xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>します。  
  
 [!code-cpp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CPP/invariantinfo.cpp#1)]
 [!code-csharp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CS/invariantinfo.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/VB/invariantinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトが読み取り専用かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Globalization.NumberFormatInfo" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 読み取り専用のプロパティへの代入を実行しようとしています。<xref:System.Globalization.NumberFormatInfo>により、<xref:System.InvalidOperationException>します。  
  
 呼び出すことができます、<xref:System.Globalization.NumberFormatInfo.Clone%2A>読み取り/書き込みを作成するメソッドを<xref:System.Globalization.NumberFormatInfo>オブジェクトの読み取り専用オブジェクトでは、次の例に示すようにします。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="NaNSymbol">
      <MemberSignature Language="C#" Value="public string NaNSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NaNSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NaNSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NaNSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NaNSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>IEEE NaN (非数) 値を表す文字列を取得または設定します。</summary>
        <value>IEEE NaN (非数) 値を表す文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "NaN" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 NaN 値の詳細については、次を参照してください。<xref:System.Double>または<xref:System.Single>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      </Docs>
    </Member>
    <Member MemberName="NativeDigits">
      <MemberSignature Language="C#" Value="public string[] NativeDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] NativeDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NativeDigits As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ NativeDigits { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NativeDigits : string[] with get, set" Usage="System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>西洋数字 0 ～ 9 に等しいネイティブ数字の文字列配列を取得または設定します。</summary>
        <value>西洋数字 0 ～ 9 に等しいネイティブ数字を含む文字列配列。 既定値は "0"、"1"、"2"、"3"、"4"、"5"、"6"、"7"、"8"、"9" を要素に持つ配列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  指定されている文字セット、<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>プロパティは解析または書式設定操作に影響を与えません。 基本ラテンの数字 0 のみ (u+0030) 9 から (u+0039) 書式設定または数値または日付と時刻の値を解析するときに使用されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Globalization.NumberFormatInfo.NativeDigits%2A>プロパティ。  
  
 [!code-cpp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cpp/nd.cpp#1)]
 [!code-csharp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cs/nd.cs#1)]
 [!code-vb[sys.glob.NFI.nativeDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/vb/nd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で値が <see langword="null" /> です。  
  
- または - 
設定操作で値配列の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">設定操作で値配列に 10 個の要素がありません。  
  
- または - 
設定操作で、値配列の要素に単一の <see cref="T:System.Char" /> オブジェクトまたはサロゲート ペアを構成する一対の <see cref="T:System.Char" /> オブジェクトが含まれていません。  
  
- または - 
設定操作で、値配列の要素が [Unicode 規格](https://go.microsoft.com/fwlink/?linkid=37123)で定義された数字ではありません。 つまり、配列要素中の数字は Unicode <see langword="Number, Decimal Digit" /> (Nd) General Category 値を持ちません。  
  
- または - 
設定操作で、値配列内の要素の数値は配列内の要素の位置に対応していません。 つまり、配列の 1 番目であるインデックス 0 の要素の数値が 0 でなく、インデックス 1 の要素の数値が 1 でありません。</exception>
        <altmember cref="T:System.Globalization.DigitShapes" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinitySymbol">
      <MemberSignature Language="C#" Value="public string NegativeInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負の無限大を表す文字列を取得または設定します。</summary>
        <value>負の無限大を表す文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "-Infinity" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 負の無限大の詳細については、次を参照してください。<xref:System.Double>または<xref:System.Single>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSign">
      <MemberSignature Language="C#" Value="public string NegativeSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>関連付けられた数値が負であることを示す文字列を取得または設定します。</summary>
        <value>関連付けられた数値が負であることを示す文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "-" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、書式設定して、解析操作で使用されます。 書式設定操作で使用する方法の詳細については、次を参照してください。、 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)トピック。  
  
   
  
## Examples  
 次の例では、読み取り/書き込みをインスタンス化<xref:System.Globalization.CultureInfo>オブジェクトをインバリアント カルチャを表し、上線文字 (U + 203E) に割り当てます、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>プロパティ。 これは、後使用してこの<xref:System.Globalization.CultureInfo>負の値の浮動小数点数の配列の書式を指定するオブジェクト。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/cs/negativesign1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/vb/negativesign1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalDigits">
      <MemberSignature Language="C#" Value="public int NumberDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で使用する小数点以下の桁数を取得または設定します。</summary>
        <value>数値で使用する小数点以下の桁数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>数値の書式設定操作の有効桁数指定子がない"F"と"N"標準書式指定文字列でプロパティを使用します。 小数部の桁数、小数点区切り文字の後に表示される既定の数を定義します。 精度指定子を使用する場合、この値はオーバーライドされます。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>プロパティ。  
  
 [!code-cpp[NumberDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalDigits/CPP/numberdecimaldigits.cpp#1)]
 [!code-csharp[NumberDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalDigits/CS/numberdecimaldigits.cs#1)]
 [!code-vb[NumberDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalDigits/VB/numberdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、99 より大きい値に設定されようとしています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalSeparator">
      <MemberSignature Language="C#" Value="public string NumberDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で桁区切り記号として使用する文字列を取得または設定します。</summary>
        <value>数値で桁区切り記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "." です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>桁の小数部から整数型を分離するシンボルを定義する"E"、"F"、"G"、"N"および"R"標準書式指定文字列でプロパティを使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
 このプロパティの初期値が設定から派生した、**地域と言語**コントロール パネルの項目。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>プロパティ。  
  
 [!code-cpp[NumberDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalSeparator/CPP/numberdecimalseparator.cpp#1)]
 [!code-csharp[NumberDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalSeparator/CS/numberdecimalseparator.cs#1)]
 [!code-vb[NumberDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalSeparator/VB/numberdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">プロパティが空の文字列に設定されています。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSeparator">
      <MemberSignature Language="C#" Value="public string NumberGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で小数点の左にある数字のグループを区切る文字列を取得または設定します。</summary>
        <value>数値で小数点の左にある数字のグループを区切る文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "," です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>整数の桁のグループを区切る記号を定義するプロパティは、"N"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
 このプロパティの初期値が設定から派生した、**地域と言語**コントロール パネルの項目。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>プロパティ。  
  
 [!code-cpp[NumberGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSeparator/CPP/numbergroupseparator.cpp#1)]
 [!code-csharp[NumberGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSeparator/CS/numbergroupseparator.cs#1)]
 [!code-vb[NumberGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSeparator/VB/numbergroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSizes">
      <MemberSignature Language="C#" Value="public int[] NumberGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] NumberGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ NumberGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で小数点の左にある各グループの数字の数を取得または設定します。</summary>
        <value>数値で小数点の左にある各グループの数字の数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 1 つだけの要素を持つ 1 次元配列であり、その要素は 3 に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>プロパティ"N"を使用して書式設定されている数値の結果に影響します。 カスタムの数値形式の文字列またはその他の標準数値書式指定文字列を使用するの値の場合、<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>プロパティは無視されます。  
  
 1 次元の配列内のすべての要素は、1 ~ 9 の整数である必要があります。 最後の要素には、0 を指定できます。  
  
 配列の最初の要素の左側にすぐにある数字のグループの最下位要素の数を定義する、<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>します。 後続の各要素は、前のグループの左側にある数字の次の重要なグループを指します。 配列の最後の要素がある場合、0 ではなく、残りの数字に基づいてグループ化されます、配列の最後の要素。 最後の要素が 0 の場合、残りの部分はグループ化されません。  
  
 たとえば、{3, 4, 5} が、配列が含まれる場合、桁の数字は「55,55555,55555,55555,4444,333.00」のようなグループ化されます。 {3, 4, 0} が、配列が含まれる場合、数字を「55555555555555555,4444,333.00」のようなグループ化します。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>プロパティ。  
  
 [!code-cpp[NumberGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSizes/CPP/numbergroupsizes.cpp#1)]
 [!code-csharp[NumberGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSizes/CS/numbergroupsizes.cs#1)]
 [!code-vb[NumberGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSizes/VB/numbergroupsizes.vb#1)]  
  
 次の例は、異なる値を出力<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>配列。  
  
 [!code-cpp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定され、配列には 0 より小さいか、9 よりも大きいエントリが含まれています。  
  
- または - 
プロパティが設定され、配列には 0 に設定されているエントリ (最後のエントリ以外) が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="NumberNegativePattern">
      <MemberSignature Language="C#" Value="public int NumberNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負の数値の形式パターンを取得または設定します。</summary>
        <value>負の数値の形式パターン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>プロパティは、"N"の標準の数値書式指定文字列でフォーマットされた負の値の書式を定義します。 このプロパティは、次の表に、値の 1 つを持ちます。 シンボル"-"は、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>と`n`は数値です。  
  
|[値]|関連付けられているパターン|  
|-----------|------------------------|  
|0|(n)|  
|1|-n|  
|2|-n|  
|3|n-|  
|4|n -|  
  
 によって返されるインバリアント カルチャの既定値、<xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>プロパティを表す、1 は、"-n"ここで、 *n*は数値です。  
  
   
  
## Examples  
 次の例は、異なる値を表示します。<xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>パターン。  
  
 [!code-cpp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、4 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalDigits">
      <MemberSignature Language="C#" Value="public int PercentDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で使用する小数点以下の桁数を取得または設定します。</summary>
        <value>パーセント値で使用する小数点以下の桁数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>数値の書式設定操作の有効桁数指定子がない"P"標準書式指定文字列でプロパティを使用します。 小数部の桁数、小数点区切り文字の後に表示される既定の数を定義します。 精度指定子を使用する場合、この値はオーバーライドされます。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>プロパティ。  
  
 [!code-cpp[PercentDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalDigits/CPP/percentdecimaldigits.cpp#1)]
 [!code-csharp[PercentDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalDigits/CS/percentdecimaldigits.cs#1)]
 [!code-vb[PercentDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalDigits/VB/percentdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、99 より大きい値に設定されようとしています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalSeparator">
      <MemberSignature Language="C#" Value="public string PercentDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で桁区切り記号として使用する文字列を取得または設定します。</summary>
        <value>パーセント値で桁区切り記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "." です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>桁の小数部から整数型を分離するシンボルを定義するプロパティは、"P"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>プロパティ。  
  
 [!code-cpp[PercentDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalSeparator/CPP/percentdecimalseparator.cpp#1)]
 [!code-csharp[PercentDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalSeparator/CS/percentdecimalseparator.cs#1)]
 [!code-vb[PercentDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalSeparator/VB/percentdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">プロパティが空の文字列に設定されています。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSeparator">
      <MemberSignature Language="C#" Value="public string PercentGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で小数点の左にある数字のグループを区切る文字列を取得または設定します。</summary>
        <value>パーセント値で小数点の左にある数字のグループを区切る文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "," です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>整数のグループを区切る記号を定義するプロパティは、"P"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>プロパティ。  
  
 [!code-cpp[PercentGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSeparator/CPP/percentgroupseparator.cpp#1)]
 [!code-csharp[PercentGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSeparator/CS/percentgroupseparator.cs#1)]
 [!code-vb[PercentGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSeparator/VB/percentgroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSizes">
      <MemberSignature Language="C#" Value="public int[] PercentGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] PercentGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ PercentGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で小数点の左にある各グループの数字の数を取得または設定します。</summary>
        <value>パーセント値で小数点の左にある各グループの数字の数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 1 つだけの要素を持つ 1 次元配列であり、その要素は 3 に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>整数グループで表示される桁数を定義するプロパティは、"P"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 1 次元の配列内のすべての要素は、1 ~ 9 の整数である必要があります。 最後の要素には、0 を指定できます。  
  
 配列の最初の要素の左側にすぐにある数字のグループの最下位要素の数を定義する、<xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>します。 後続の各要素は、前のグループの左側にある数字の次の重要なグループを指します。 配列の最後の要素がある場合、0 ではなく、残りの数字に基づいてグループ化されます、配列の最後の要素。 最後の要素が 0 の場合、残りの部分はグループ化されません。  
  
 たとえば、{3, 4, 5} が、配列が含まれる場合、数字をグループ化のような"55,55555,55555,55555,4444,333.00%"です。 {3, 4, 0} が、配列が含まれる場合、数字のようなグループ化"55555555555555555,4444,333.00%"です。  
  
   
  
## Examples  
 次の例では、変更した結果、<xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>プロパティ。  
  
 [!code-cpp[PercentGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSizes/CPP/percentgroupsizes.cpp#1)]
 [!code-csharp[PercentGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSizes/CS/percentgroupsizes.cs#1)]
 [!code-vb[PercentGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSizes/VB/percentgroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定され、配列には 0 より小さいか、9 よりも大きいエントリが含まれています。  
  
- または - 
プロパティが設定され、配列には 0 に設定されているエントリ (最後のエントリ以外) が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="PercentNegativePattern">
      <MemberSignature Language="C#" Value="public int PercentNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負のパーセント値の形式パターンを取得または設定します。</summary>
        <value>負のパーセント値の形式パターン。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"-n %" を表します。"%" は <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>プロパティが負の値の割合の値のパターンを定義する、"P"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 このプロパティは、次の表に、値の 1 つを持ちます。 「%」記号が、 <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>、記号"-"は、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>、および`n`は数値です。 3-11 の値は、.NET Framework 2.0 で導入され、以前のバージョンでは使用できません。  
  
|[値]|関連付けられているパターン|  
|-----------|------------------------|  
|0|-n %|  
|1|-n%|  
|2|-%n|  
|3|% n|  
|4|%n-|  
|5|n-%|  
|6|n%-|  
|7|-% n|  
|8|n %-|  
|9|n の %|  
|10|% n|  
|11|n %|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、または 11 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentPositivePattern">
      <MemberSignature Language="C#" Value="public int PercentPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正のパーセント値の形式パターンを取得または設定します。</summary>
        <value>正のパーセント値の形式パターン。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"n %" を表します。"%" は <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>正のパーセンテージの値のパターンを定義するプロパティは、"P"標準書式指定文字列で使用します。 詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」を参照してください。 このプロパティは、次の表に、値の 1 つを持ちます。 「%」記号が、<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>と`n`は数値です。  
  
|[値]|関連付けられているパターン|  
|-----------|------------------------|  
|0|n %|  
|1|n%|  
|2|%n|  
|3|%n|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、または 3 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentSymbol">
      <MemberSignature Language="C#" Value="public string PercentSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント記号として使用する文字列を取得または設定します。</summary>
        <value>パーセント記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "%" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 割り当てられた文字列、<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>数値を書式設定すると、"P"または「%」を含む書式指定文字列ときに、結果の文字列のプロパティが含まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PerMilleSymbol">
      <MemberSignature Language="C#" Value="public string PerMilleSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PerMilleSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PerMilleSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PerMilleSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PerMilleSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーミル記号として使用する文字列を取得または設定します。</summary>
        <value>パーミル記号として使用する文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "‰" です。これは Unicode 文字の U+2030 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 割り当てられた文字列、<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>数値の値は「‰」を含む書式指定文字列に設定されると、結果の文字列のプロパティが含まれています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinitySymbol">
      <MemberSignature Language="C#" Value="public string PositiveInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正の無限大を表す文字列を取得または設定します。</summary>
        <value>正の無限大を表す文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "Infinity" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正の無限大の詳細については、次を参照してください。<xref:System.Double>または<xref:System.Single>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSign">
      <MemberSignature Language="C#" Value="public string PositiveSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>関連付けられた数値が正であることを示す文字列を取得または設定します。</summary>
        <value>関連付けられた数値が正であることを示す文字列。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "+" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、書式設定ではなく、数値の文字列を解析するためだけに使用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作で、割り当てられる値は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo ReadOnly(class System.Globalization.NumberFormatInfo nfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (nfi As NumberFormatInfo) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ ReadOnly(System::Globalization::NumberFormatInfo ^ nfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.NumberFormatInfo -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.ReadOnly nfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nfi" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="nfi">ラップする <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
        <summary>読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" /> ラッパーを返します。</summary>
        <returns>
          <paramref name="nfi" /> をラップする読み取り専用の <see cref="T:System.Globalization.NumberFormatInfo" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このラッパーに`nfi`します。  
  
 読み取り専用のプロパティへの代入を実行しようとしています。<xref:System.Globalization.NumberFormatInfo>により、<xref:System.InvalidOperationException>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nfi" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      </Docs>
    </Member>
  </Members>
</Type>