<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bd30f77413c59342284130b5dccade98487183f9" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52385265" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo&#xA;Implements IDeserializationCallback" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo : System::Runtime::Serialization::IDeserializationCallback" />
  <TypeSignature Language="F#" Value="type CompareInfo = class&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>カルチャごとに異なる文字列比較を行うための一連のメソッドを実装します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データの並べ替えと比較の規則には、カルチャが異なります。 たとえば、並べ替え順序は、発音や文字の視覚的表現に基づく可能性があります。 東アジア圏の言語では、文字が表意文字の画数と部首によって並べ替えられます。 また、並べ替えは、言語やカルチャで使用されているアルファベットの順序によっても異なります。 たとえば、デンマーク語の文字 "Æ" は、アルファベットでは "Z" の後に位置します。 さらに、大文字や大文字と小文字の比較があり、大文字小文字の規則はカルチャによっても異なる場合があります。 <xref:System.Globalization.CompareInfo>クラスはこのカルチャに依存した文字列比較データを保持する、カルチャに依存する文字列操作の実行を担当します。  
  
 通常、インスタンス化する必要はありません、<xref:System.Globalization.CompareInfo>はすべての非序数の文字列比較操作で暗黙的に使用されるため、直接オブジェクトへの呼び出しなど、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド。 ただし、取得する場合、<xref:System.Globalization.CompareInfo>オブジェクトに、次の方法のいずれかで行うことができます。  
  
-   値を取得することによって、<xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType>特定のカルチャのプロパティ。  
  
-   静的なを呼び出すことによって<xref:System.Globalization.CompareInfo.GetCompareInfo%2A>カルチャ名を含むメソッド。 これにより、遅延バインディングにアクセスするため、<xref:System.Globalization.CompareInfo>オブジェクト。  
  
## <a name="ignored-search-values"></a>検索値を無視  
 文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 などの比較メソッド<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>カルチャに依存した比較を実行するときにこのような文字を考慮されません。 無視できる文字は次のとおりです。  
  
-   <xref:System.String.Empty?displayProperty=nameWithType>。 カルチャに依存した比較メソッドは、検索対象文字列の先頭 (インデックス 0) に空の文字列を検索するは常にします。  
  
-   文字または文字列で構成される文字コード ポイント比較オプションを特に、ため、操作は考慮されませんが、<xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=nameWithType>と<xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=nameWithType>オプションが生成するシンボルと非スペーシング組み合わせでの検索文字は無視されます。  
  
-   言語的な意味を持たないコード ポイントを含む文字列。 たとえば、ソフト ハイフン (U + 00AD) はカルチャに依存する文字列比較では常に無視されます。  
  
## <a name="security-considerations"></a>セキュリティの考慮事項  
 セキュリティ上の決定は、文字列の比較や大文字と小文字の変更に依存する場合は使用、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく、一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、文字列比較メソッドを持つ型のパラメーターを使用する必要があります<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は方法、<xref:System.Globalization.CompareInfo>オブジェクトに関連付けられている、<xref:System.Globalization.CultureInfo>オブジェクトが文字列比較に影響します。  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  

 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://www.microsoft.com/en-us/download/details.aspx?id=10921">並べ替えの重みのテーブルの Windows オペレーティング システム</related>
    <related type="ExternalDocumentation" href="https://www.unicode.org/Public/UCA/latest/allkeys.txt">Unicode 照合順序 Elemeent の既定のテーブル、Linux と macOS</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの文字列を比較します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int&#xA;override this.Compare : string * string -&gt; int" Usage="compareInfo.Compare (string1, string2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <summary>2 つの文字列を比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 条件 
 </description></listheader><item><term> ゼロ 
 </term><description> 2 つの文字列は等価。  
  
 </description></item><item><term> 0 より小さい値 
 </term><description><paramref name="string1" /> は <paramref name="string2" /> より小さい値です。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="string1" /> が <paramref name="string2" /> より大きくなっています。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、比較を使用して実行<xref:System.Globalization.CompareOptions.None?displayProperty=nameWithType>します。 セキュリティ上の決定は、文字列の比較や大文字と小文字の変更に依存する場合は使用、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、異なる 2 つの文字列の部分を比較<xref:System.Globalization.CompareInfo>オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo> インターナショナル ソートのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> 従来の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられている、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 次の例では、<xref:System.Globalization.CompareInfo.Compare%2A> メソッドを呼び出す方法を示しています。  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。 たとえば、"animal"と「ani-正しくない」(ソフト ハイフン、または U + 00AD 使用) のカルチャに依存する比較では、2 つの文字列は同等ですが、次の例を示すことを示します。  
  
[! コード vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)] 
文字列比較で無視できる文字を認識するように呼び出す、<see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />メソッドと値のいずれかの供給<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, string2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="options">
          <paramref name="string1" /> と <paramref name="string2" /> の比較方法を定義する値。 <paramref name="options" /> は、それ自体で使用する列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、<see cref="F:System.Globalization.CompareOptions.StringSort" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、2 つの文字列を比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 条件 
 </description></listheader><item><term> ゼロ 
 </term><description> 2 つの文字列は等価。  
  
 </description></item><item><term> 0 より小さい値 
 </term><description><paramref name="string1" /> は <paramref name="string2" /> より小さい値です。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="string1" /> が <paramref name="string2" /> より大きくなっています。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 セキュリティ上の決定は、文字列の比較や大文字と小文字の変更に依存する場合は使用、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、異なる 2 つの文字列を比較<xref:System.Globalization.CompareOptions>設定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  
  
 次の例では、<xref:System.Globalization.CompareInfo.Compare%2A> メソッドを呼び出す方法を示しています。  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。 比較で無視できる文字を認識するように、値を与える<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int -&gt; int&#xA;override this.Compare : string * int * string * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">
          <paramref name="string1" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">
          <paramref name="string2" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <summary>文字列の末尾部分と別の文字列の末尾部分とを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 条件 
 </description></listheader><item><term> ゼロ 
 </term><description> 2 つの文字列は等価。  
  
 </description></item><item><term> 0 より小さい値 
 </term><description><paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より小さい。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より大きい。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 セキュリティ上の決定は、文字列の比較や大文字と小文字の変更に依存する場合は使用、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、異なる 2 つの文字列の部分を比較<xref:System.Globalization.CompareInfo>オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo> インターナショナル ソートのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> 従来の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられている、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> または <paramref name="offset2" /> が 0 未満です。  
  
- または - 
 <paramref name="offset1" /> が <paramref name="string1" /> の文字数以上です。  
  
- または - 
 <paramref name="offset2" /> が <paramref name="string2" /> の文字数以上です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />言語またはカルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。 比較で無視できる文字を認識するように呼び出す、<see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />メソッドの値を指定して<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">
          <paramref name="string1" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">
          <paramref name="string2" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="options">
          <paramref name="string1" /> と <paramref name="string2" /> の比較方法を定義する値。 <paramref name="options" /> は、それ自体で使用する列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、<see cref="F:System.Globalization.CompareOptions.StringSort" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、文字列の末尾部分と別の文字列の末尾部分とを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 条件 
 </description></listheader><item><term> ゼロ 
 </term><description> 2 つの文字列は等価。  
  
 </description></item><item><term> 0 より小さい値 
 </term><description><paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より小さい。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より大きい。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 セキュリティ上の決定は、文字列の比較や大文字と小文字の変更に依存する場合は使用、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、異なる 2 つの文字列の部分を比較<xref:System.Globalization.CompareOptions>設定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> または <paramref name="offset2" /> が 0 未満です。  
  
- または - 
 <paramref name="offset1" /> が <paramref name="string1" /> の文字数以上です。  
  
- または - 
 <paramref name="offset2" /> が <paramref name="string2" /> の文字数以上です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />ユーザーは、カルチャに依存した比較を実行するときに、メソッドにはこのような文字は考慮されません。 比較で無視できる文字を認識するように、値を与える<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int -&gt; int&#xA;override this.Compare : string * int * int * string * int * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">
          <paramref name="string1" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="length1">比較対象の <paramref name="string1" /> に含まれる連続する文字の数。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">
          <paramref name="string2" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="length2">比較対象の <paramref name="string2" /> に含まれる連続する文字の数。</param>
        <summary>文字列のセクションと別の文字列のセクションとを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 条件 
 </description></listheader><item><term> ゼロ 
 </term><description> 2 つの文字列は等価。  
  
 </description></item><item><term> 0 より小さい値 
 </term><description><paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より小さい。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より大きい。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 セキュリティ上の決定は、文字列の比較や大文字と小文字の変更に依存する場合は使用、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、文字列比較メソッドを持つ型のパラメーターを使用する必要があります<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、異なる 2 つの文字列の部分を比較<xref:System.Globalization.CompareInfo>オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo> インターナショナル ソートのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> 従来の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられている、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" />、<paramref name="length1" />、<paramref name="offset2" />、または <paramref name="length2" /> が 0 未満です。  
  
- または - 
 <paramref name="offset1" /> が <paramref name="string1" /> の文字数以上です。  
  
- または - 
 <paramref name="offset2" /> が <paramref name="string2" /> の文字数以上です。  
  
- または - 
 <paramref name="length1" /> が、<paramref name="offset1" /> から <paramref name="string1" /> の末尾までの文字数を超えています。  
  
- または - 
 <paramref name="length2" /> が、<paramref name="offset2" /> から <paramref name="string2" /> の末尾までの文字数を超えています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />言語またはカルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。 比較で無視できる文字を認識するように呼び出す、<see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドの値を指定して<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">
          <paramref name="string1" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="length1">比較対象の <paramref name="string1" /> に含まれる連続する文字の数。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">
          <paramref name="string2" /> 内の比較を開始する位置にある文字の 0 から始まるインデックス。</param>
        <param name="length2">比較対象の <paramref name="string2" /> に含まれる連続する文字の数。</param>
        <param name="options">
          <paramref name="string1" /> と <paramref name="string2" /> の比較方法を定義する値。 <paramref name="options" /> は、それ自体で使用する列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、<see cref="F:System.Globalization.CompareOptions.StringSort" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、ある文字列のセクションと別の文字列のセクションとを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 条件 
 </description></listheader><item><term> ゼロ 
 </term><description> 2 つの文字列は等価。  
  
 </description></item><item><term> 0 より小さい値 
 </term><description><paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より小さい。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="string1" /> の指定部分は <paramref name="string2" /> の指定部分より大きい。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 セキュリティ上の決定は、文字列の比較や大文字と小文字の変更に依存する場合は使用、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、異なる 2 つの文字列の部分を比較<xref:System.Globalization.CompareOptions>設定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" />、<paramref name="length1" />、<paramref name="offset2" />、または <paramref name="length2" /> が 0 未満です。  
  
- または - 
 <paramref name="offset1" /> が <paramref name="string1" /> の文字数以上です。  
  
- または - 
 <paramref name="offset2" /> が <paramref name="string2" /> の文字数以上です。  
  
- または - 
 <paramref name="length1" /> が、<paramref name="offset1" /> から <paramref name="string1" /> の末尾までの文字数を超えています。  
  
- または - 
 <paramref name="length2" /> が、<paramref name="offset2" /> から <paramref name="string2" /> の末尾までの文字数を超えています。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />カルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。 比較で無視できる文字を認識するように、値を与える<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compareInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">現在の <see cref="T:System.Globalization.CompareInfo" /> と比較するオブジェクト。</param>
        <summary>指定したオブジェクトが、現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトと等しいかどうかを判断します。</summary>
        <returns>指定したオブジェクトが現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトと等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 つ<xref:System.Globalization.CompareInfo>オブジェクトが等しい場合、<xref:System.Globalization.CompareInfo.LCID%2A>と<xref:System.Globalization.CompareInfo.Name%2A>プロパティが等しい。  
  
 このメソッドは、<xref:System.Object.Equals%2A?displayProperty=nameWithType> をオーバーライドします。  
  
 セキュリティ上の決定は、文字列の比較や大文字と小文字の変更に依存する場合は使用、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">カルチャ識別子を表す整数。</param>
        <summary>指定した識別子のカルチャに関連付けられている新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを初期化します。</summary>
        <returns>指定した識別子のカルチャに関連付けられ、現在の <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、異なる 2 つの文字列の部分を比較<xref:System.Globalization.CompareInfo>オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo> インターナショナル ソートのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> 従来の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられている、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">カルチャ名を表す文字列。</param>
        <summary>指定した名前のカルチャに関連付けられている新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを初期化します。</summary>
        <returns>指定した識別子のカルチャに関連付けられ、現在の <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、異なる 2 つの文字列の部分を比較<xref:System.Globalization.CompareInfo>オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo> インターナショナル ソートのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> 従来の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられている、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> が無効なカルチャ名です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (culture, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="culture">カルチャ識別子を表す整数。</param>
        <param name="assembly">使用する文字列比較メソッドを含む <see cref="T:System.Reflection.Assembly" />。</param>
        <summary>指定したカルチャに関連付けられ、指定した <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクトを初期化します。</summary>
        <returns>指定した識別子のカルチャに関連付けられ、現在の <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドの動作は予測できません。 アプリケーションのバージョンをアセンブリの入力を受け取らないこのメソッドの使用をお勧めします。  
  
 `assembly`パラメーターと同じ型でなければなりません<xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assembly" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assembly" /> が無効な型です。</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (name, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="name">カルチャ名を表す文字列。</param>
        <param name="assembly">使用する文字列比較メソッドを含む <see cref="T:System.Reflection.Assembly" />。</param>
        <summary>指定したカルチャに関連付けられ、指定した <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクトを初期化します。</summary>
        <returns>指定した識別子のカルチャに関連付けられ、現在の <see cref="T:System.Globalization.CompareInfo" /> 内の文字列比較メソッドを使用する新しい <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドの動作は予測できません。 このアセンブリの入力を受け取らないメソッドのバージョンを使用することをお勧めします。  
  
 `assembly`パラメーターと同じ型でなければなりません<xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="assembly" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> が無効なカルチャ名です。  
  
- または - 
 <paramref name="assembly" /> が無効な型です。</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Globalization.CompareInfo" /> インスタンスまたは特定の文字列のハッシュ コードを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compareInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CompareInfo" /> のハッシュ関数として機能し、ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造に使用されます。</summary>
        <returns>現在の <see cref="T:System.Globalization.CompareInfo" /> のハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> をオーバーライドします。  
  
 このメソッドは、<xref:System.Globalization.CompareInfo.Equals%2A> メソッドによって等しいと評価された 2 つのオブジェクトに対して同じハッシュ コードを生成します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (source As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">ハッシュ コードが返される文字列。</param>
        <param name="options">文字列の比較方法を決定する値。</param>
        <summary>指定した比較オプションに基づいて文字列のハッシュ コードを取得します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 動作<xref:System.Globalization.CompareInfo.GetHashCode%2A>は別に、共通言語ランタイムの 1 つのバージョンから、または 1 つの .NET Framework プラットフォームから変わる可能性のある、その実装に依存します。  
  
> [!IMPORTANT]
>  2 つの文字列オブジェクトが等しい場合、<xref:System.Globalization.CompareInfo.GetHashCode%2A>メソッドと同じ値を返します。 ただし、一意の文字列値ごとに一意のハッシュ コード値はありません。 別の文字列には、同じハッシュ コードを返すことができます。  
>   
>  ハッシュ コード自体には、安定しているは限りません。 同じ文字列のハッシュ コードは、.NET Framework のバージョンとの .NET Framework の 1 つのバージョン (32 ビットおよび 64 ビット) などのプラットフォーム全体に異なります。 場合によっては、アプリケーション ドメインによっても異なることができます。  
>   
>  ハッシュ コードで作成された、アプリケーション ドメインの外部で使用しないでください、結果として、コレクション内のキー フィールドとして使用する必要がありますしないと、永続化することはありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列の <see cref="T:System.Globalization.SortKey" /> オブジェクトを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">
          <see cref="T:System.Globalization.SortKey" /> オブジェクトを取得する対象となる文字列。</param>
        <summary>指定した文字列の並べ替えキーを取得します。</summary>
        <returns>指定した文字列の並べ替えキーを含む <see cref="T:System.Globalization.SortKey" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列内の各文字には、複数のカテゴリの並べ替えウェイト、スクリプト、アルファベット順、大文字、および発音が与えられます。 並べ替えキーは、特定の文字列には、このような重みのリポジトリです。 たとえば、並べ替えキーにはアルファベット順ウェイトの文字列、大文字小文字のウェイトの文字列などが特定の順序で格納されています。 <xref:System.Globalization.CompareInfo.GetSortKey%2A>メソッドは、Windows API メソッドに相当`LCMapString`LCMAP_SORTKEY フラグを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String, options As CompareOptions) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">
          <see cref="T:System.Globalization.SortKey" /> オブジェクトを取得する対象となる文字列。</param>
        <param name="options">並べ替えキーの計算方法を定義する、次の列挙値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、<see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字列の <see cref="T:System.Globalization.SortKey" /> オブジェクトを取得します。</summary>
        <returns>指定した文字列の並べ替えキーを含む <see cref="T:System.Globalization.SortKey" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列内の各文字には、複数のカテゴリの並べ替えウェイト、スクリプト、アルファベット順、大文字、および発音が与えられます。 並べ替えキーは、特定の文字列には、このような重みのリポジトリです。 たとえば、並べ替えキーにはアルファベット順ウェイトの文字列、大文字小文字のウェイトの文字列などが特定の順序で格納されています。 <xref:System.Globalization.CompareInfo.GetSortKey%2A>メソッドは、Windows API メソッドに相当`LCMapString`LCMAP_SORTKEY フラグを使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列または部分文字列内にある値のうち、最初に出現する値の、0 から始まるインデックス番号を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char -&gt; int&#xA;override this.IndexOf : string * char -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <summary>指定した文字を検索し、検索対象文字列全体内で最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="source" /> 内で <paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は 0 (ゼロ) を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、文字列の末尾に文字列の先頭からのソース文字列を検索します。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 場合`value`角丸 Unicode 文字を表して、合字「Æ」など (U + 00 C 6)、"AE"など、正しいシーケンスでは、そのコンポーネントの検索に考慮する場合があります (u+0041、u+0045)、カルチャによって異なります。 序数 (カルチャに依存しない) 検索を実行する、文字と見なされます別の文字と同じだけで、Unicode コード ポイントが同じ場合、オーバー ロードを呼び出す必要がありますを型のパラメーターを持つ<xref:System.Globalization.CompareOptions>を使用して、 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>値。 異なり<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>のオーバー ロードをカルチャに依存した比較を実行する、<xref:System.String.IndexOf%2A?displayProperty=nameWithType>文字列を検索するオーバー ロードは、カルチャに依存した比較を実行するを序数の比較を実行する、文字を検索するメソッド。  
  
> [!NOTE]
>  可能であれば、文字列比較メソッドを持つ型のパラメーターを使用する必要があります<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 ここで、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />メソッドは常に 0 (ゼロ) の先頭に一致が見つかったことを示すを返します<paramref name="source" />します。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />メソッドを使用して、2 つの文字列にソフト ハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ためソフト ハイフンは無視できる文字をメソッドを返します 0 (ゼロ) を示す、一致が見つかったが、文字列の先頭にします。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)] [! コード vb[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string -&gt; int&#xA;override this.IndexOf : string * string -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列全体内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="source" /> 内で <paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は 0 (ゼロ) を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送、文字列の先頭から開始し、文字列の末尾で終了ソース文字列が検索されます。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 Unicode 値が比較されます、序数 (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを使用する必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />メソッドは常に 0 (ゼロ) の先頭に一致が見つかったことを示すを返します<paramref name="source" />します。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />メソッドを使用して、2 つの文字列 (ソフト ハイフン (U + 00AD)、"n"の後にソフト ハイフンおよびソフト ハイフン、および"m") の 3 つの部分文字列を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 各ケースでソフト ハイフンが、無視できる文字であるため、結果は、場合と同じにソフト ハイフンが含まれていない必要がある<paramref name="value" />します。 ソフト ハイフンのみを検索するときに、文字列の先頭に一致が検出されたことを示す、0 (ゼロ) を返します。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)] [! コード vb[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <param name="options">文字列の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象文字列全体内でその文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="source" /> 内で <paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は 0 (ゼロ) を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送、文字列の先頭から開始し、文字列の末尾で終了ソース文字列が検索されます。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数 (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、別の文字を同等と見なされます。 オーバー ロード<xref:System.String.IndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、文字列比較メソッドを持つ型のパラメーターを使用する必要があります<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 ここで、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />メソッドは常に 0 (ゼロ) の先頭に一致が見つかったことを示すを返します<paramref name="source" />します。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />にソフト ハイフン (U + 00AD) 2 つの文字列を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンが、無視できる文字であるため、カルチャに依存検索が返されます 0 (ゼロ) を一致が見つかったを示すために、文字列の先頭にします。 ただし、序数に基づく検索は、正常に 1 つの文字列でソフト ハイフンを検索して、それが存在しないことを報告 2 番目の文字列から。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)] [! コード vb[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int -&gt; int&#xA;override this.IndexOf : string * char * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスから文字列の末尾までの範囲内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="startIndex" /> から <paramref name="source" /> の末尾までの <paramref name="source" /> のセクション内で、<paramref name="value" /> が見つかった場合は、最初に出現する位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、元の文字列を検索`startIndex`と文字列の末尾で終了します。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 実行するには、序数 (カルチャに依存しない) 検索場所文字は Unicode 値が同じ場合にのみ別の文字と同じ考慮、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、 <xref:System.Globalization.CompareOptions.Ordinal>値。 オーバー ロード<xref:System.String.IndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>同じであっても、文字列の異なる部分で検索を`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />メソッドを使用して、2 つの文字列で"n"の後にソフト ハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンが、無視できる文字であるために、メソッドは"n"の位置にある一致を発見したことを示す 1 を返します。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)] [! コード vb[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象文字列全体内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="source" /> 内で <paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は 0 (ゼロ) を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送、文字列の先頭から開始し、文字列の末尾で終了ソース文字列が検索されます。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードを実行、序数 (カルチャに依存しない) 検索 Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />メソッドは常に 0 (ゼロ) の先頭に一致が見つかったことを示すを返します<paramref name="source" />します。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />メソッドを使用して、2 つの文字列 (ソフト ハイフン (U + 00AD)、"n"の後にソフト ハイフンおよびソフト ハイフン、および"m") の 3 つの部分文字列を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 ソフト ハイフンが無視できる文字であるため、カルチャに依存した検索は、検索文字列にソフト ハイフンが含まれていないかどうかを返すことは同じ値を返します。 ただし、序数に基づく検索は、正常に 1 つの文字列でソフト ハイフンを検索して、それが存在しないことを報告 2 番目の文字列から。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)] [! コード vb[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int -&gt; int&#xA;override this.IndexOf : string * string * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスから文字列の末尾までの範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="startIndex" /> から <paramref name="source" /> の末尾までの <paramref name="source" /> のセクション内で、<paramref name="value" /> が見つかった場合は、最初に出現する位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、元の文字列を検索`startIndex`と文字列の末尾で終了します。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 Unicode 値が比較されます、序数 (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>同じであっても、文字列の異なる部分で検索を`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。  
  
次の例では、 <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> 2 つの文字列で"m"の後にソフト ハイフン (U + 00AD) の位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンが、無視できる文字であるために、メソッドは、文字列内の"m"のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)] [! コード vb[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象文字列の指定したインデックスから文字列の末尾までのセクション内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="startIndex" /> から <paramref name="source" /> の末尾までの <paramref name="source" /> のセクション内で、<paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、元の文字列を検索`startIndex`と文字列の末尾で終了します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数 (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、別の文字を同等と見なされます。 オーバー ロード<xref:System.String.IndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>同じであっても、文字列の異なる部分で検索を`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 ここで、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />検索の最初の開始位置の文字の位置。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />メソッドを使用して、2 つの文字列で"n"の後にソフト ハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンが、無視できる文字であるために、カルチャに依存した検索は"n"の位置にある一致を発見したことを示す 1 を返します。 ただし、序数に基づく検索は、正常に 1 つの文字列でソフト ハイフンを検索して、それが存在しないことを報告 2 番目の文字列から。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)] [! コード vb[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int -&gt; int&#xA;override this.IndexOf : string * char * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="startIndex" /> から始まり、<paramref name="count" /> で指定した数の要素を含んでいる <paramref name="source" /> の範囲内で、<paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、元の文字列を検索`startIndex`で終わる`startIndex`  +  `count` - 1。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 実行するには、序数 (カルチャに依存しない) 検索場所文字は Unicode 値が同じ場合にのみ別の文字と同じ考慮、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、 <xref:System.Globalization.CompareOptions.Ordinal>値。 オーバー ロード<xref:System.String.IndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の最初の開始位置の文字の位置。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />メソッドを使用して、2 つの文字列で"n"の後にソフト ハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンが、無視できる文字であるために、メソッドは"n"の位置にある一致を発見したことを示す 1 を返します。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)] [! コード vb[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象文字列の指定したインデックスから文字列の末尾までの範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="startIndex" /> から <paramref name="source" /> の末尾までの <paramref name="source" /> のセクション内で、<paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、元の文字列を検索`startIndex`と文字列の末尾で終了します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードを実行、序数 (カルチャに依存しない) 検索 Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>同じであっても、文字列の異なる部分で検索を`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。  
  
次の例では、 <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> "m"の 2 つの文字列の 3 番目の文字位置から開始後にソフト ハイフン (U + 00AD) の位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)] [! コード vb[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int -&gt; int&#xA;override this.IndexOf : string * string * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="startIndex" /> から始まり、<paramref name="count" /> で指定した数の要素を含んでいる <paramref name="source" /> の範囲内で、<paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、元の文字列を検索`startIndex`で終わる`startIndex`  +  `count` - 1。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 Unicode 値が比較されます、序数 (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。  
  
次の例では、 <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> "m"で、3 番目の 2 つの文字列内の 6 番目の文字位置から開始後にソフト ハイフン (U + 00AD) の位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)] [! コード vb[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="startIndex" /> から始まり、<paramref name="count" /> で指定した数の要素を含んでいる <paramref name="source" /> の範囲内で、<paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、元の文字列を検索`startIndex`で終わる`startIndex`  +  `count` - 1。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数 (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、別の文字を同等と見なされます。 オーバー ロード<xref:System.String.IndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の最初の開始位置の文字の位置。 次の例では、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドを使用して、2 つの文字列で"n"の後にソフト ハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンが、無視できる文字であるために、カルチャに依存した検索は"n"の位置にある一致を発見したことを示す 1 を返します。 ただし、序数に基づく検索は、正常に 1 つの文字列でソフト ハイフンを検索して、それが存在しないことを報告 2 番目の文字列から。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)] [! コード vb[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="startIndex" /> から始まり、<paramref name="count" /> で指定した数の要素を含んでいる <paramref name="source" /> の範囲内で、<paramref name="value" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、元の文字列を検索`startIndex`で終わる`startIndex`  +  `count` - 1。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードを実行、序数 (カルチャに依存しない) 検索 Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。  
  
次の例では、 <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> "m"で、3 番目の 2 つの文字列内の 6 番目の文字位置から開始後にソフト ハイフン (U + 00AD) の位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 序数に基づく比較を実行するときに、部分文字列のみで見つけた最初の文字列。 最初の文字列は、"m"の後にソフト ハイフンが含まれている場合、メソッドはソフト ハイフンのインデックスを返すが失敗したが代わりに、カルチャに依存した比較を実行するときに、"m"のインデックスを返しますに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。  
  
[! コード csharp[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)] [! コード vb[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列が特定のプレフィックスで始まるかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string -&gt; bool&#xA;override this.IsPrefix : string * string -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="prefix">
          <paramref name="source" /> の先頭と比較する文字列。</param>
        <summary>指定した検索対象文字列が指定したプリフィックスで始まるかどうかを判断します。</summary>
        <returns>
          <paramref name="prefix" /> の長さが <paramref name="source" /> の長さ以下で、<paramref name="source" /> が <paramref name="prefix" /> で始まる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての文字列が開始し、空の部分文字列で終了 ("");そのため場合、`prefix`空の文字列は、このメソッドが返される`true`します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、文字列が、プレフィックスまたはサフィックスを別の文字列かどうかを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="prefix" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="prefix">
          <paramref name="source" /> の先頭と比較する文字列。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="prefix" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した検索対象文字列が指定したプレフィックスで始まるかどうかを判断します。</summary>
        <returns>
          <paramref name="prefix" /> の長さが <paramref name="source" /> の長さ以下で、<paramref name="source" /> が <paramref name="prefix" /> で始まる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての文字列が開始し、空の部分文字列で終了 ("");そのため場合、`prefix`空の文字列は、このメソッドが返される`true`します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、文字列は、プレフィックスまたはサフィックスを別の文字列を使用するかどうかを判断<xref:System.Globalization.CompareOptions>します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="prefix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した Unicode 文字または文字列の並べ替えが可能かどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (ch As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(char ch);" />
      <MemberSignature Language="F#" Value="static member IsSortable : char -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Unicode 文字。</param>
        <summary>指定した Unicode 文字の並べ替えが可能かどうかを示します。</summary>
        <returns>
          <paramref name="ch" /> パラメーターが並べ替え可能な場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ch`パラメーターの内部で定義されている Unicode 文字である場合は、並べ替えが<xref:System.Globalization.CompareInfo>クラスの並べ替えテーブル、およびプライベートの使用または高または低の対になっていないサロゲート文字ではありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsSortable : string -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">0 個以上の Unicode 文字から構成される文字列。</param>
        <summary>指定した Unicode 文字列の並べ替えが可能かどうかを示します。</summary>
        <returns>
          <paramref name="str" /> パラメーターが空の文字列 ("") ではなく、<paramref name="str" /> 内のすべての Unicode 文字が並べ替え可能である場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の各 Unicode 文字、`str`パラメーターは、いずれかで表される、または複数の utf-16 でエンコードされた<xref:System.Char>オブジェクト。 `str`パラメーターの内部で各 Unicode 文字が定義されている場合は、並べ替えが<xref:System.Globalization.CompareInfo>クラスの並べ替えテーブル、およびプライベートの使用または高または低の対になっていないサロゲート文字ではありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列が特定のサフィックスで終わるかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string -&gt; bool&#xA;override this.IsSuffix : string * string -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="suffix">
          <paramref name="source" /> の末尾と比較する文字列。</param>
        <summary>指定した検索対象文字列が指定したサフィックスで終わるかどうかを判断します。</summary>
        <returns>
          <paramref name="suffix" /> の長さが <paramref name="source" /> の長さ以下であり、<paramref name="source" /> が <paramref name="suffix" /> で終わる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての文字列が開始し、空の部分文字列で終了 ("");そのため場合、`suffix`空の文字列は、このメソッドが返される`true`します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、文字列が、プレフィックスまたはサフィックスを別の文字列かどうかを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="suffix" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="suffix">
          <paramref name="source" /> の末尾と比較する文字列。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="suffix" /> の比較方法を定義する値。 <paramref name="options" /> は、それ自体で使用する列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した検索対象文字列が、指定したサフィックスで終わるかどうかを判断します。</summary>
        <returns>
          <paramref name="suffix" /> の長さが <paramref name="source" /> の長さ以下であり、<paramref name="source" /> が <paramref name="suffix" /> で終わる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての文字列が開始し、空の部分文字列で終了 ("");そのため場合、`suffix`空の文字列は、このメソッドが返される`true`します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、文字列は、プレフィックスまたはサフィックスを別の文字列を使用するかどうかを判断<xref:System.Globalization.CompareOptions>します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="suffix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列または部分文字列内にある値のうち、最後に出現する値の、0 から始まるインデックス番号を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char -&gt; int&#xA;override this.LastIndexOf : string * char -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <summary>指定した文字を検索し、検索対象文字列全体内でその文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="source" /> 内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後方の文字列の末尾から開始し、文字列の先頭で終了ソース文字列が検索されます。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 実行するには、序数 (カルチャに依存しない) 検索場所文字は Unicode 値が同じ場合にのみ別の文字と同じ考慮、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、 <xref:System.Globalization.CompareOptions.Ordinal>値。 オーバー ロード<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 ここで、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />メソッドは常にでは、最後のインデックス位置を返します<paramref name="source" />の最後に、一致が見つかったことを示す<paramref name="source" />します。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />メソッドを使用して、2 つの文字列にソフト ハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンは無視できる文字、ために、メソッドは、文字列の末尾で一致を発見したことを示す文字列の最後のインデックス位置を返します。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string -&gt; int&#xA;override this.LastIndexOf : string * string -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列全体内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="source" /> 内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後方の文字列の末尾から開始し、文字列の先頭で終了ソース文字列が検索されます。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 Unicode 値が比較されます、序数 (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />メソッドは常に返します<paramref name="source" />します。<see cref="P:System.String.Length" /> – 最後のインデックス位置を表す 1、<paramref name="source" />します。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />メソッドを使用して、2 つの文字列 (ソフト ハイフン (U + 00AD)、"n"の後にソフト ハイフンおよびソフト ハイフン、および"m") の 3 つの部分文字列を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 各ケースでソフト ハイフンが、無視できる文字であるため、結果は、場合と同じにソフト ハイフンが含まれていない必要がある<paramref name="value" />します。 ソフト ハイフンのみを検索する場合、メソッドは、6、5 を返します。 これらの値は、2 つの文字列の最後の文字のインデックスに対応します。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象文字列全体内でその文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="source" /> 内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後方の文字列の末尾から開始し、文字列の先頭で終了ソース文字列が検索されます。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数 (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、別の文字を同等と見なされます。 オーバー ロード<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 ここで、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />メソッドは常にでは、最後の文字位置を返します<paramref name="source" />の最後に、一致が見つかったことを示す<paramref name="source" />します。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />にソフト ハイフン (U + 00AD) 2 つの文字列を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンが、無視できる文字であるために、カルチャに依存した検索は、元の文字列の最後のインデックス位置を返します。 これに対し、序数に基づく検索が正常にソフト ハイフンで 1 つの文字列を見つけてそれが存在しないことを報告 2 番目の文字列から。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int -&gt; int&#xA;override this.LastIndexOf : string * char * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した文字を検索し、検索対象文字列の先頭から指定したインデックスまでの範囲内で、その文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="source" /> の先頭から <paramref name="startIndex" /> までの <paramref name="source" /> の範囲内で、<paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンと開始位置として`startIndex`と文字列の先頭に終了します。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 実行するには、序数 (カルチャに依存しない) 検索場所文字は Unicode 値が同じ場合にのみ別の文字と同じ考慮、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、 <xref:System.Globalization.CompareOptions.Ordinal>値。 オーバー ロード<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>同じであっても、文字列の異なる部分で検索を`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />メソッドを使用して、2 つの文字列の最後の"m"の前にソフト ハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ためソフト ハイフンは無視できる文字は、メソッドを返します、"m"は、値のインデックス位置の<paramref name="startIndex" />します。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象文字列全体内でその部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="source" /> 内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後方の文字列の末尾から開始し、文字列の先頭で終了ソース文字列が検索されます。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードを実行、序数 (カルチャに依存しない) 検索 Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="source" />します。<see cref="P:System.String.Length" /> – 最後のインデックス位置を表す 1、<paramref name="source" />します。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />メソッドを使用して、2 つの文字列 (ソフト ハイフン (U + 00AD)、"n"の後にソフト ハイフンおよびソフト ハイフン、および"m") の 3 つの部分文字列を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 ソフト ハイフンが無視できる文字であるため、カルチャに依存した検索は、検索文字列にソフト ハイフンが含まれていないかどうかを返すことは同じ値を返します。 ただし、序数に基づく検索は、正常に 1 つの文字列でソフト ハイフンを検索して、それが存在しないことを報告 2 番目の文字列から。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int -&gt; int&#xA;override this.LastIndexOf : string * string * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の先頭から指定したインデックスまでの範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="source" /> の先頭から <paramref name="startIndex" /> までの <paramref name="source" /> の範囲内で、<paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンと開始位置として`startIndex`と文字列の先頭に終了します。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 Unicode 値が比較されます、序数 (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>同じであっても、文字列の異なる部分で検索を`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />ソフト ハイフン (U + 00AD) が含まれ、前または最後の"m"を文字列に含まれます部分文字列を検索するメソッドを使用します。 検索文字列にソフト ハイフンが無視されるため、ソフト ハイフンで構成される部分文字列を検索する呼び出しは、ソフト ハイフンと"m"で構成される部分文字列が文字列で、"m"の位置を返し、"n"を返しますを検索するメソッドを呼び出すこと、 "n"の位置。 メソッドが、"m"の値を表すのインデックスを返します、検索文字列には、ソフト ハイフンのみが含まれている、<paramref name="startIndex" />します。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象の文字列の先頭から指定したインデックスまでの範囲内で、その文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="source" /> の先頭から <paramref name="startIndex" /> までの <paramref name="source" /> の範囲内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンと開始位置として`startIndex`と文字列の先頭に終了します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数 (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、別の文字を同等と見なされます。 オーバー ロード<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>同じであっても、文字列の異なる部分で検索を`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />メソッドを使用して、2 つの文字列の最後の"m"の前にソフト ハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンが、無視できる文字であるために、カルチャに依存した検索は、"m"のインデックス位置を返します。 ただし、序数に基づく検索は、正常に 1 つの文字列でソフト ハイフンを検索して、それが存在しないことを報告 2 番目の文字列から。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int -&gt; int&#xA;override this.LastIndexOf : string * char * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="startIndex" /> で終わり、<paramref name="count" /> で指定した数の要素を含んでいる <paramref name="source" /> の範囲内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンと開始位置として`startIndex`で終わる`startIndex`  -  `count` + 1 です。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 実行するには、序数 (カルチャに依存しない) 検索場所文字は Unicode 値が同じ場合にのみ別の文字と同じ考慮、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、 <xref:System.Globalization.CompareOptions.Ordinal>値。 オーバー ロード<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />メソッドを使用して、2 つの文字列の最後の"m"の前にソフト ハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ためソフト ハイフンは無視できる文字は、メソッドを返します、"m"は、値のインデックス位置の<paramref name="startIndex" />します。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象の文字列の先頭から指定したインデックスまでの範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="source" /> の先頭から <paramref name="startIndex" /> までの <paramref name="source" /> の範囲内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンと開始位置として`startIndex`と文字列の先頭に終了します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードを実行、序数 (カルチャに依存しない) 検索 Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>同じであっても、文字列の異なる部分で検索を`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。  
  
次の例では、 <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> "m"、"m"の 2 つの文字列の最後の開始後にソフト ハイフン (U + 00AD) の位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int -&gt; int&#xA;override this.LastIndexOf : string * string * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="startIndex" /> で終わり、<paramref name="count" /> で指定した数の要素を含んでいる <paramref name="source" /> の範囲内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンと開始位置として`startIndex`で終わる`startIndex`  -  `count` + 1 です。  
  
 このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 Unicode 値が比較されます、序数 (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。  
  
次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />メソッドは、"m"の後にソフト ハイフン (U + 00AD) の位置を検索する次の 3 つの文字の 2 つの文字列の最後の"m"の前で使用されます。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した文字を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="startIndex" /> で終わり、<paramref name="count" /> で指定した数の要素を含んでいる <paramref name="source" /> の範囲内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンと開始位置として`startIndex`で終わる`startIndex`  -  `count` + 1 です。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字が文字を表す Unicode 値の場合は、合字「Æ」(U +) などが検討する必要が"AE"など、正しいシーケンスでは、そのコンポーネントの検索 (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数 (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、別の文字を同等と見なされます。 オーバー ロード<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>カルチャに依存する検索を実行する文字列を検索するものが、文字の検索が、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索で場合<paramref name="value" />、無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。 次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドを使用して、2 つの文字列の最後の"m"の前にソフト ハイフン (U + 00AD) を検索します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンが、無視できる文字であるため、カルチャに依存する検索で返されます、"m"は、値のインデックス位置の<paramref name="startIndex" />します。 ただし、序数に基づく検索は、正常に 1 つの文字列でソフト ハイフンを検索して、それが存在しないことを報告 2 番目の文字列から。  
  
[! コード csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)] [! コード vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">
          <paramref name="source" /> 内で検索する文字列。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options">
          <paramref name="source" /> と <paramref name="value" /> の比較方法を定義する値。 <paramref name="options" /> は、列挙値 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> であるか、または <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> の 1 つ以上の値のビットごとの組み合わせです。</param>
        <summary>指定した <see cref="T:System.Globalization.CompareOptions" /> 値を使用して、指定した部分文字列を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した比較オプションを使用して、<paramref name="startIndex" /> で終わり、<paramref name="count" /> で指定した数の要素を含んでいる <paramref name="source" /> の範囲内で <paramref name="value" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号、それ以外の場合は -1 です。 <paramref name="value" /> が無視できる文字の場合は <paramref name="startIndex" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンと開始位置として`startIndex`で終わる`startIndex`  -  `count` + 1 です。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`は含まれません、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存する検索を実行します。 文字で合字「Æ」など (U + 00 C 6) を表す Unicode 値を"AE"などの正しいシーケンス内の文字のコンポーネントのと同じに思わ (u+0041、u+0045)、カルチャによって異なります。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードを実行、序数 (カルチャに依存しない) 検索 Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較を型のパラメーターを持つ<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則としてユーザー インターフェイスに表示される文字列を比較するため (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する、文字または文字列の一部内の部分文字列のインデックスを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> に無効な <see cref="T:System.Globalization.CompareOptions" /> 値が含まれています。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索の開始文字位置。  
  
次の例では、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドを使用して、2 つの文字列で、その後にすべての"m"ソフト ハイフン (U + 00AD) の位置が最後の"m"の前に、最初の文字位置を検索します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 序数に基づく比較を実行するときに、部分文字列のみで見つけた最初の文字列。 最初の文字列は、"m"の後にソフト ハイフンが含まれている場合、メソッドはソフト ハイフンのインデックスを返すが失敗したが代わりに、カルチャに依存した比較を実行するときに、"m"のインデックスを返しますに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。  
  
[! コード vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CompareInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CompareInfo" /> に対して適切な形式のカルチャ識別子を取得します。</summary>
        <value>現在の <see cref="T:System.Globalization.CompareInfo" /> に対して適切に書式指定されたカルチャ識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で、<xref:System.Globalization.CompareInfo.LCID%2A>プロパティ。  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CompareInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Globalization.CompareInfo" /> による並べ替え操作に使用されるカルチャの名前を取得します。</summary>
        <value>カルチャの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CompareInfo.Name%2A>と<xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType>プロパティは、異なる値を持つことができます。 たとえば、 <xref:System.Globalization.CompareInfo.LCID%2A> 0x10407 の 16 進数のプロパティの値をドイツ語の電話帳に表示される可能性がありますに名前を並べ替える代替の並べ替えカルチャを識別します。 <xref:System.Globalization.CompareInfo.Name%2A>一方、プロパティが"de-de_phoneb"の値を持つ、<xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType>関連のドイツ語 (ドイツ) カルチャのプロパティが"DE-DE"の値を持ちます。  
  
   
  
## Examples  
 次の例では、FR-FR および JA-JP カルチャを使用して 3 つの文字列を比較します。 <xref:System.Globalization.CultureInfo.Name%2A>プロパティの使用に各カルチャの名前を表示します。  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">コールバックを開始したオブジェクト。</param>
        <summary>オブジェクト グラフ全体が逆シリアル化された時点で実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは明示的なインターフェイス メンバーの実装ために使用できるの場合にのみ、現在<xref:System.Globalization.CompareInfo>オブジェクトにキャスト、<xref:System.Runtime.Serialization.IDeserializationCallback>インターフェイス。 詳細については、<xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> メソッドを参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="compareInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを表す文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Object.ToString%2A?displayProperty=nameWithType>メソッド。 クラス名とインスタンスの値で構成される文字列を返します<xref:System.Globalization.CompareInfo.Name%2A>プロパティ、ハイフンで区切ります。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>.NET Framework 4 で見つめて、<see cref="M:System.Globalization.CompareInfo.ToString" />メソッドは、クラス名の後にスペース、ハイフン、スペース、およびの値を返します、<see cref="P:System.Globalization.CompareInfo.Name" />プロパティ。 たとえば、 <see cref="T:System.Globalization.CompareInfo" /> 、EN-US カルチャを表すオブジェクトを<see cref="M:System.Globalization.CompareInfo.ToString" />"CompareInfo - EN-US"を返します。 .NET Framework の以前のバージョンで、クラス名の後にスペース、ハイフン、スペース、およびの値を返します、<see cref="P:System.Globalization.CompareInfo.LCID" />プロパティ。 たとえば、 <see cref="T:System.Globalization.CompareInfo" /> 、EN-US カルチャを表すオブジェクトを<see cref="M:System.Globalization.CompareInfo.ToString" />"CompareInfo - 1033"を返します。</para>
        </block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As SortVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::SortVersion ^ Version { System::Globalization::SortVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : System.Globalization.SortVersion" Usage="System.Globalization.CompareInfo.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文字列の比較および並べ替えに使用される Unicode のバージョンに関する情報を取得します。</summary>
        <value>文字列を比較および並べ替えるために使用される Unicode のバージョンに関する情報を含むオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 個々 の文字の重みと、そのための特定の文字列を比較または並べ替える方法は、.NET Framework の特定のバージョンを実装する Unicode 仕様のバージョンに依存します。 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、これによっても異なります、ホスト オペレーティング システムとして、次の表に示します。 サポートされている Unicode バージョンの一覧は、文字の比較と並べ替えに対してのみ適用されます。カテゴリ別での Unicode 文字の分類には適用されません。  
  
|.NET Framework のバージョン|オペレーティング システム|Unicode バージョン|  
|----------------------------|----------------------|---------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|すべてのオペレーティング システム|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降のバージョン|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降のバージョン|[!INCLUDE[win8](~/includes/win8-md.md)] 以降の Windows オペレーティング システム バージョン|Unicode 6.3|  
  
 <xref:System.Globalization.SortVersion>によって返されるオブジェクト、<xref:System.Globalization.CompareInfo.Version%2A>プロパティは、文字列の比較に使用される正確な Unicode バージョンを識別しません。 2 つを比較するときにのみ便利です<xref:System.Globalization.SortVersion>文字列を比較する同じ Unicode バージョンとカルチャを使用するかどうかを判断するオブジェクト。 詳細と例では、次を参照してください。、<xref:System.Globalization.SortVersion>リファレンス ページです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
  </Members>
</Type>