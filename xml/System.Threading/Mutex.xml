<Type Name="Mutex" FullName="System.Threading.Mutex">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7de03c355dd0d74e383476a827f9b04199da1cf4" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48748911" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Mutex : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Mutex extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Mutex" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Mutex&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Mutex sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Mutex = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="fb57a-101">同期プリミティブは、プロセス間の同期にも使用できます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb57a-101">A synchronization primitive that can also be used for interprocess synchronization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-102">2 つまたは複数のスレッドは、同時に共有リソースにアクセスする必要があります、システム同期メカニズム、一度に 1 つのスレッドが、リソースを使用することを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fb57a-102">When two or more threads need to access a shared resource at the same time, the system needs a synchronization mechanism to ensure that only one thread at a time uses the resource.</span></span> <span data-ttu-id="fb57a-103"><xref:System.Threading.Mutex> 同期は 1 つのスレッドを共有リソースへの排他アクセスを付与するプリミティブです。</span><span class="sxs-lookup"><span data-stu-id="fb57a-103"><xref:System.Threading.Mutex> is a synchronization primitive that grants exclusive access to the shared resource to only one thread.</span></span> <span data-ttu-id="fb57a-104">スレッドがミュー テックス、最初のスレッドがミュー テックスを解放するまで、ミュー テックスを取得しようとする 2 番目のスレッドが中断されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-104">If a thread acquires a mutex, the second thread that wants to acquire that mutex is suspended until the first thread releases the mutex.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="fb57a-105">この型は、<xref:System.IDisposable>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="fb57a-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="fb57a-106">型の使用が完了したら、直接的または間接的にそれを破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fb57a-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="fb57a-107">型の直接 dispose を呼び出してその<xref:System.IDisposable.Dispose%2A>メソッド、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="fb57a-108">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(で C# の場合) または`Using`(Visual Basic) でします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="fb57a-109">詳細については、"を使用して、オブジェクトを実装する IDisposable"のセクションを参照してください、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="fb57a-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="fb57a-110">使用することができます、<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>ミュー テックスの所有権を要求するメソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-110">You can use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method to request ownership of a mutex.</span></span> <span data-ttu-id="fb57a-111">呼び出し元のスレッド、次のいずれかが発生するまでをブロックします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-111">The calling thread blocks until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="fb57a-112">所有されていないことを示す、ミュー テックスが通知されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-112">The mutex is signaled to indicate that it is not owned.</span></span> <span data-ttu-id="fb57a-113">この場合、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドを返します。 `true`、呼び出し元のスレッドにミュー テックスの所有権を前提として、ミュー テックスで保護されているリソースにアクセスするとします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-113">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true`, and the calling thread assumes ownership of the mutex and accesses the resource protected by the mutex.</span></span> <span data-ttu-id="fb57a-114">リソースへのアクセスが完了したら、スレッドを呼び出す必要があります、<xref:System.Threading.Mutex.ReleaseMutex%2A>ミュー テックスの所有権を解放します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-114">When it has finished accessing the resource, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the mutex.</span></span> <span data-ttu-id="fb57a-115">「例」最初の例では、このパターンをを示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-115">The first example in the Examples section illustrates this pattern.</span></span>  
  
-   <span data-ttu-id="fb57a-116">呼び出しで指定されたタイムアウト間隔、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドを持つ、`millisecondsTimeout`または`timeout`パラメーターが経過しました。</span><span class="sxs-lookup"><span data-stu-id="fb57a-116">The time-out interval specified in the call to a <xref:System.Threading.WaitHandle.WaitOne%2A> method that has a `millisecondsTimeout` or `timeout` parameter has elapsed.</span></span> <span data-ttu-id="fb57a-117">この場合、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドを返します。 `false`、呼び出し元のスレッドにミュー テックスの所有権を取得しようがないとします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-117">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `false`, and the calling thread makes no further attempt to acquire ownership of the mutex.</span></span> <span data-ttu-id="fb57a-118">この場合、コードの構造は、呼び出し元のスレッドにミュー テックスによって保護されているリソースへのアクセスが拒否されたようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="fb57a-118">In this case, you should structure your code so that access to the resource that is protected by the mutex is denied to the calling thread.</span></span> <span data-ttu-id="fb57a-119">呼び出す必要がありますいないスレッドがミュー テックスの所有権を取得することはありませんので、<xref:System.Threading.Mutex.ReleaseMutex%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-119">Because the thread never acquired ownership of the mutex, it must not call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span> <span data-ttu-id="fb57a-120">「例」の 2 番目の例では、このパターンを示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-120">The second example in the Examples section illustrates this pattern.</span></span>  
  
 <span data-ttu-id="fb57a-121"><xref:System.Threading.Mutex>クラスを取得したスレッドでのみ、ミュー テックスを解放できるようにスレッドの id を適用します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-121">The <xref:System.Threading.Mutex> class enforces thread identity, so a mutex can be released only by the thread that acquired it.</span></span> <span data-ttu-id="fb57a-122">これに対し、<xref:System.Threading.Semaphore>クラスでは、スレッド id は強制されません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-122">By contrast, the <xref:System.Threading.Semaphore> class does not enforce thread identity.</span></span> <span data-ttu-id="fb57a-123">ミュー テックスは、アプリケーション ドメイン境界を越えて渡すこともできます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-123">A mutex can also be passed across application domain boundaries.</span></span>  
  
 <span data-ttu-id="fb57a-124">ミュー テックスを所有するスレッドが繰り返しの呼び出しで同じミュー テックスを要求できる<xref:System.Threading.WaitHandle.WaitOne%2A>せず、実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-124">The thread that owns a mutex can request the same mutex in repeated calls to <xref:System.Threading.WaitHandle.WaitOne%2A> without blocking its execution.</span></span> <span data-ttu-id="fb57a-125">ただし、スレッドを呼び出す必要があります、<xref:System.Threading.Mutex.ReleaseMutex%2A>メソッドと同じ回数、ミュー テックスの所有権を解放します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-125">However, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="fb57a-126"><xref:System.Threading.Mutex>クラスから継承<xref:System.Threading.WaitHandle>、静的なを呼び出すこともできます<xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType>と<xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType>保護されたリソースへのアクセスを同期する方法。</span><span class="sxs-lookup"><span data-stu-id="fb57a-126">Because the <xref:System.Threading.Mutex> class inherits from <xref:System.Threading.WaitHandle>, you can also call the static <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> and <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> methods to synchronize access to a protected resource.</span></span>  
  
 <span data-ttu-id="fb57a-127">ミュー テックスを所有しているスレッドが終了する場合、ミュー テックスを破棄するメンバーといいます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-127">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="fb57a-128">ミュー テックスの状態は、シグナル状態に設定して、次の待機スレッドが所有権を取得します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-128">The state of the mutex is set to signaled, and the next waiting thread gets ownership.</span></span> <span data-ttu-id="fb57a-129">.NET Framework のバージョン 2.0 以降では、<xref:System.Threading.AbandonedMutexException>が放棄されたミュー テックスを取得する次のスレッドでスローされます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-129">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the abandoned mutex.</span></span> <span data-ttu-id="fb57a-130">.NET Framework version 2.0 の前に例外がスローされません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-130">Before version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="fb57a-131">ミュー テックスの破棄には、重大なエラー コードの多くの場合を示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-131">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="fb57a-132">ミュー テックスを解放しないままスレッドが終了すると、ミュー テックスで保護されているデータ構造が一貫した状態でできません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-132">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="fb57a-133">次のスレッドにミュー テックスの所有権を要求するでは、この例外を処理でき、データ構造の整合性を検証できる場合、続行することができます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-133">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="fb57a-134">システム全体でミューテックスが有効な場合にミューテックスが破棄されたときは、アプリケーションが強制終了されたことを示している可能性があります (たとえば、Windows タスク マネージャを使用した終了)。</span><span class="sxs-lookup"><span data-stu-id="fb57a-134">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
 <span data-ttu-id="fb57a-135">ミュー テックスは次の 2 つの種類: と、名前付きシステム ミュー テックスをローカル ミュー テックスです。</span><span class="sxs-lookup"><span data-stu-id="fb57a-135">Mutexes are of two types: local mutexes, which are unnamed, and named system mutexes.</span></span> <span data-ttu-id="fb57a-136">ローカル ミューテックスは、現在のプロセス内にのみ存在します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-136">A local mutex exists only within your process.</span></span> <span data-ttu-id="fb57a-137">参照しているプロセス内のすべてのスレッドから使用できます、<xref:System.Threading.Mutex>ミュー テックスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-137">It can be used by any thread in your process that has a reference to the <xref:System.Threading.Mutex> object that represents the mutex.</span></span> <span data-ttu-id="fb57a-138">名前のない各<xref:System.Threading.Mutex>オブジェクトは、別のローカル ミュー テックスを表します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-138">Each unnamed <xref:System.Threading.Mutex> object represents a separate local mutex.</span></span>  
  
 <span data-ttu-id="fb57a-139">名前付きシステム ミュー テックスは、オペレーティング システム全体から参照でき、プロセスの動作を同期するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-139">Named system mutexes are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="fb57a-140">作成することができます、<xref:System.Threading.Mutex>名前を受け入れるコンス トラクターを使用して名前付きシステム ミュー テックスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-140">You can create a <xref:System.Threading.Mutex> object that represents a named system mutex by using a constructor that accepts a name.</span></span> <span data-ttu-id="fb57a-141">か、同時にオペレーティング システム オブジェクトを作成できます。 を作成する前に存在する可能性が、<xref:System.Threading.Mutex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-141">The operating-system object can be created at the same time, or it can exist before the creation of the <xref:System.Threading.Mutex> object.</span></span> <span data-ttu-id="fb57a-142">同じ名前付きシステム ミューテックスを表す複数の <xref:System.Threading.Mutex> オブジェクトを作成できます。また、<xref:System.Threading.Mutex.OpenExisting%2A> メソッドを使用して、既存の名前付きシステム ミューテックスを開くことができます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-142">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex, and you can use the <xref:System.Threading.Mutex.OpenExisting%2A> method to open an existing named system mutex.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb57a-143">ターミナル サービスを実行しているサーバーで名前付きシステム ミュー テックスには 2 つのレベルの可視性のことができます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-143">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="fb57a-144">その名前がプレフィックスで始まる場合は、"Global\\"、ミュー テックスはすべてのターミナル サーバー セッションに表示されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-144">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="fb57a-145">その名前がプレフィックスで始まる場合は、"ローカル\\"、ミュー テックスが作成されたにターミナル サーバー セッションでのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-145">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="fb57a-146">その場合は、同じ名前の別のミュー テックスは、それぞれのサーバー上の他のターミナル サーバー セッションに存在できます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-146">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="fb57a-147">プレフィックスがかかる場合、名前付きミュー テックスを作成するときに、プレフィックスを指定しないと、"ローカル\\"。</span><span class="sxs-lookup"><span data-stu-id="fb57a-147">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="fb57a-148">ターミナル サーバー セッション内で名前のプレフィックスのみが異なる 2 つのミュー テックスは別のミュー テックス、および両方は、ターミナル サーバー セッションですべてのプロセスを表示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-148">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="fb57a-149">プレフィックスの名前は、"Global\\"と"ローカル\\"ミュー テックスの名前のプロセスは、ターミナル サーバー セッションを基準のスコープについて説明します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-149">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

  
## Examples  
 <span data-ttu-id="fb57a-150">この例は、ローカルの方法では<xref:System.Threading.Mutex>オブジェクトは、保護されたリソースへのアクセスを同期するために使用します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-150">This example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="fb57a-151">呼び出す必要がありますが、ミュー テックスの所有権を取得するまでに各呼び出し元のスレッドがブロックされるため、<xref:System.Threading.Mutex.ReleaseMutex%2A>スレッドの所有権を解放するメソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-151">Because each calling thread is blocked until it acquires ownership of the mutex, it must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the thread.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Mutex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="fb57a-152">次の例では、各スレッドの呼び出し、<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29>メソッドはミュー テックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-152">In the following example, each thread calls the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> method to acquire the mutex.</span></span> <span data-ttu-id="fb57a-153">かどうか、タイムアウト間隔が経過すると、メソッドを返します`false`、およびスレッドでミュー テックスを獲得も、ミュー テックスが保護リソースにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-153">If the time-out interval elapses, the method returns `false`, and the thread neither acquires the mutex nor gains access to the resource the mutex protects.</span></span> <span data-ttu-id="fb57a-154"><xref:System.Threading.Mutex.ReleaseMutex%2A>メソッドはミュー テックスを獲得するスレッドによってのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-154">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is called only by the thread that acquires the mutex.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="fb57a-155">この型はスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb57a-155">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <altmember cref="T:System.Threading.Thread" />
    <related type="Article" href="~/docs/standard/threading/index.md">
      <span data-ttu-id="fb57a-156">マネージド スレッド処理</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb57a-156">Managed Threading</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/threading/mutexes.md">
      <span data-ttu-id="fb57a-157">ミューテックス</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb57a-157">Mutexes</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fb57a-158">
            <see cref="T:System.Threading.Mutex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-158">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fb57a-159">
            <see cref="T:System.Threading.Mutex" /> クラスの新しいインスタンスを、既定のプロパティを使用して初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-159">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-160">呼び出しと同じには、このコンス トラクター オーバー ロードを呼び出し、<xref:System.Threading.Mutex.%23ctor%28System.Boolean%29>コンス トラクター オーバー ロードを指定して`false`ミュー テックスの初期所有権をします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-160">Calling this constructor overload is the same as calling the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor overload and specifying `false` for initial ownership of the mutex.</span></span> <span data-ttu-id="fb57a-161">つまり、呼び出し元のスレッドがミュー テックスを所有していません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-161">That is, the calling thread does not own the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb57a-162">次のコード例に示す方法ローカル<xref:System.Threading.Mutex>オブジェクトは、保護されたリソースへのアクセスを同期するために使用します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-162">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="fb57a-163">ミュー テックスを作成するスレッドが所有していない、最初に。</span><span class="sxs-lookup"><span data-stu-id="fb57a-163">The thread that creates the mutex does not own it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="fb57a-164">マネージド スレッド処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-164">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md">
          <span data-ttu-id="fb57a-165">ミューテックス</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-165">Mutexes</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex initiallyOwned" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="fb57a-166">呼び出し元スレッドにミューテックスの初期所有権を与える場合は<see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-166">
              <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb57a-167">呼び出し元のスレッドにミューテックスの初期所有権があるかどうかを示すブール値を使用して、<see cref="T:System.Threading.Mutex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-167">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fb57a-168">次のコード例に示す方法ローカル<xref:System.Threading.Mutex>オブジェクトは、保護されたリソースへのアクセスを同期するために使用します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-168">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="fb57a-169">作成するスレッド、<xref:System.Threading.Mutex>最初に所有しています。</span><span class="sxs-lookup"><span data-stu-id="fb57a-169">The thread that creates the <xref:System.Threading.Mutex> owns it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="fb57a-170">マネージド スレッド処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-170">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md">
          <span data-ttu-id="fb57a-171">ミューテックス</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-171">Mutexes</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="fb57a-172">この呼び出しの結果として名前付きシステム ミューテックスが作成された場合に、呼び出し元スレッドに名前付きシステム ミューテックスの初期所有権を付与する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-172">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fb57a-173">
            <see cref="T:System.Threading.Mutex" /> の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-173">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="fb57a-174">値が <see langword="null" /> の場合、<see cref="T:System.Threading.Mutex" /> は無名になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-174">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb57a-175">呼び出し元のスレッドにミューテックスの初期所有権があるかどうかを示すブール値と、ミューテックスの名前を表す文字列を使用して、<see cref="T:System.Threading.Mutex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-175">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-176">場合`name`ない`null`と`initiallyOwned`は`true`、この呼び出しの結果として、名前付きシステム ミュー テックスが作成された場合にのみ、呼び出し元のスレッドがミュー テックスを所有します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-176">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the mutex only if the named system mutex was created as a result of this call.</span></span> <span data-ttu-id="fb57a-177">指定することをお勧め、名前付きシステム ミュー テックスが作成されたかどうかを決定するためのメカニズムがないため、`false`の`initiallyOwned`このコンス トラクター オーバー ロードを呼び出すときにします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-177">Since there is no mechanism for determining whether the named system mutex was created, it is better to specify `false` for `initiallyOwned` when calling this constructor overload.</span></span> <span data-ttu-id="fb57a-178">使用することができます、<xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29>コンス トラクターの初期所有権を確認する必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="fb57a-178">You can use the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> constructor if you need to determine initial ownership.</span></span>  
  
 <span data-ttu-id="fb57a-179">このコンス トラクターの初期化を<xref:System.Threading.Mutex>名前付きシステム ミュー テックスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-179">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="fb57a-180">複数作成できます<xref:System.Threading.Mutex>名前付きシステム ミュー テックスを同じを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-180">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="fb57a-181">アクセス制御のセキュリティでは、名前付きミュー テックスが既に作成されていて、呼び出し元が持たない<xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-181">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="fb57a-182">既存のスレッドのアクティビティを同期するために必要なアクセス許可のみを持つ名前付きミュー テックスを開くを参照してください。、<xref:System.Threading.Mutex.OpenExisting%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-182">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="fb57a-183">指定した場合`null`または空の文字列の`name`、ローカル ミュー テックスが作成されたことを呼び出した場合と、<xref:System.Threading.Mutex.%23ctor%28System.Boolean%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="fb57a-183">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="fb57a-184">この場合、`createdNew`は常に`true`します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-184">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="fb57a-185">これらは、システム全体であるために、プロセスの境界間でリソースの使用を調整する名前付きミュー テックスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-185">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb57a-186">ターミナル サービスを実行しているサーバーで名前付きシステム ミュー テックスには 2 つのレベルの可視性のことができます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-186">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="fb57a-187">その名前がプレフィックスで始まる場合は、"Global\\"、ミュー テックスはすべてのターミナル サーバー セッションに表示されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-187">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="fb57a-188">その名前がプレフィックスで始まる場合は、"ローカル\\"、ミュー テックスが作成されたにターミナル サーバー セッションでのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-188">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="fb57a-189">その場合は、同じ名前の別のミュー テックスは、それぞれのサーバー上の他のターミナル サーバー セッションに存在できます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-189">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="fb57a-190">プレフィックスがかかる場合、名前付きミュー テックスを作成するときに、プレフィックスを指定しないと、"ローカル\\"。</span><span class="sxs-lookup"><span data-stu-id="fb57a-190">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="fb57a-191">ターミナル サーバー セッション内で名前のプレフィックスのみが異なる 2 つのミュー テックスは別のミュー テックス、および両方は、ターミナル サーバー セッションですべてのプロセスを表示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-191">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="fb57a-192">プレフィックスの名前は、"Global\\"と"ローカル\\"ミュー テックスの名前のプロセスは、ターミナル サーバー セッションを基準のスコープについて説明します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-192">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

## Examples  
 <span data-ttu-id="fb57a-193">次の例では、名前付きミュー テックスを使用して 2 つの個別のプロセスで実行中のスレッド間で通知する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-193">The following example shows how a named mutex is used to signal between threads running in two separate processes.</span></span>  
  
 <span data-ttu-id="fb57a-194">このプログラムは、2 つ以上のコマンド ウィンドウから実行します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-194">Run this program from two or more command windows.</span></span> <span data-ttu-id="fb57a-195">各プロセスの作成、<xref:System.Threading.Mutex>名前付きミュー テックスを表すオブジェクトを`MyMutex`します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-195">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex `MyMutex`.</span></span> <span data-ttu-id="fb57a-196">名前付きミュー テックスがシステム オブジェクトの有効期間の有効期間に制限されます、<xref:System.Threading.Mutex>を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-196">The named mutex is a system object whose lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="fb57a-197">最初のプロセスを作成するときに、名前付きミュー テックスが作成されたその<xref:System.Threading.Mutex>オブジェクト。 この例で、名前付きミュー テックスがプログラムを実行する最初のプロセスが所有します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-197">The named mutex is created when the first process creates its <xref:System.Threading.Mutex> object; in this example, the named mutex is owned by the first process that runs the program.</span></span> <span data-ttu-id="fb57a-198">名前付きミュー テックスが破棄されるときにすべて、<xref:System.Threading.Mutex>リリースされたことを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-198">The named mutex is destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span>  
  
 <span data-ttu-id="fb57a-199">この例で使用されるコンス トラクターのオーバー ロードは、名前付きミュー テックスの初期所有権が付与されたかどうかを呼び出し元のスレッドに見分けることはできません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-199">The constructor overload used in this example cannot tell the calling thread whether initial ownership of the named mutex was granted.</span></span> <span data-ttu-id="fb57a-200">スレッドが名前付きミュー テックスを作成することを確認できますしない限り、初期所有権を要求するのにこのコンス トラクターを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="fb57a-200">You should not use this constructor to request initial ownership unless you can be certain that the thread will create the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="fb57a-201">アクセス制御セキュリティを使用した名前付きミューテックスが存在しますが、ユーザーに <see cref="F:System.Security.AccessControl.MutexRights.FullControl" /> がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-201">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="fb57a-202">Win32 エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-202">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="fb57a-203">名前付きミューテックスを作成できません。原因として、別の型の待機ハンドルに同じ名前が付けられていることが考えられます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-203">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fb57a-204">
            <paramref name="name" /> が 260 文字を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-204">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="fb57a-205">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-205">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="fb57a-206">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-206">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="fb57a-207">マネージド スレッド処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-207">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md">
          <span data-ttu-id="fb57a-208">ミューテックス</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-208">Mutexes</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string *  -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="fb57a-209">この呼び出しの結果として名前付きシステム ミューテックスが作成された場合に、呼び出し元スレッドに名前付きシステム ミューテックスの初期所有権を付与する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-209">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fb57a-210">
            <see cref="T:System.Threading.Mutex" /> の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-210">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="fb57a-211">値が <see langword="null" /> の場合、<see cref="T:System.Threading.Mutex" /> は無名になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-211">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="fb57a-212">このメソッドから制御が戻るとき、ローカル ミューテックスが作成された場合 (つまり <c>name</c> が <see langword="null" /> または空の文字列の場合) または指定した名前付きシステム ミューテックスが作成された場合は、ブール値 <see langword="true" /> が格納されます。指定した名前付きシステム ミューテックスが既に存在する場合は <see langword="false" /> が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-212">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="fb57a-213">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-213">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb57a-214">呼び出し元のスレッドにミューテックスの初期所有権があるかどうかを示すブール値、ミューテックスの名前を表す文字列、およびメソッドから戻るときにミューテックスの初期所有権が呼び出し元のスレッドに付与されたかどうかを示すブール値を指定して、<see cref="T:System.Threading.Mutex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-214">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-215">場合`name`ない`null`と`initiallyOwned`は`true`、呼び出し元のスレッドが場合にのみ、名前付きミュー テックスを所有している`createdNew`は`true`呼び出しの後にします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-215">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="fb57a-216">呼び出すことによって、スレッドがミュー テックスを要求するそれ以外の場合、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-216">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="fb57a-217">このコンス トラクターの初期化を<xref:System.Threading.Mutex>名前付きシステム ミュー テックスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-217">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="fb57a-218">複数作成できます<xref:System.Threading.Mutex>名前付きシステム ミュー テックスを同じを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-218">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="fb57a-219">アクセス制御のセキュリティでは、名前付きミュー テックスが既に作成されていて、呼び出し元が持たない<xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>権限、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-219">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> rights, an exception is thrown.</span></span> <span data-ttu-id="fb57a-220">既存のスレッドのアクティビティを同期するために必要なアクセス許可のみを持つ名前付きミュー テックスを開くを参照してください。、<xref:System.Threading.Mutex.OpenExisting%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-220">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="fb57a-221">指定した場合`null`または空の文字列の`name`、ローカル ミュー テックスが作成されたことを呼び出した場合と、<xref:System.Threading.Mutex.%23ctor%28System.Boolean%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="fb57a-221">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="fb57a-222">この場合、`createdNew`は常に`true`します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-222">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="fb57a-223">これらは、システム全体であるために、プロセスの境界間でリソースの使用を調整する名前付きミュー テックスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-223">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb57a-224">ターミナル サービスを実行しているサーバーで名前付きシステム ミュー テックスには 2 つのレベルの可視性のことができます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-224">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="fb57a-225">その名前がプレフィックスで始まる場合は、"Global\\"、ミュー テックスはすべてのターミナル サーバー セッションに表示されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-225">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="fb57a-226">その名前がプレフィックスで始まる場合は、"ローカル\\"、ミュー テックスが作成されたにターミナル サーバー セッションでのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-226">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="fb57a-227">その場合は、同じ名前の別のミュー テックスは、それぞれのサーバー上の他のターミナル サーバー セッションに存在できます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-227">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="fb57a-228">プレフィックスがかかる場合、名前付きミュー テックスを作成するときに、プレフィックスを指定しないと、"ローカル\\"。</span><span class="sxs-lookup"><span data-stu-id="fb57a-228">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="fb57a-229">ターミナル サーバー セッション内で名前のプレフィックスのみが異なる 2 つのミュー テックスは別のミュー テックス、および両方は、ターミナル サーバー セッションですべてのプロセスを表示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-229">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="fb57a-230">プレフィックスの名前は、"Global\\"と"ローカル\\"ミュー テックスの名前のプロセスは、ターミナル サーバー セッションを基準のスコープについて説明します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-230">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]   
  
## Examples  
 <span data-ttu-id="fb57a-231">次のコード例では、名前付きミュー テックスを使用してプロセスまたはスレッド間で通知する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-231">The following code example shows how a named mutex is used to signal between processes or threads.</span></span> <span data-ttu-id="fb57a-232">このプログラムは、2 つ以上のコマンド ウィンドウから実行します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-232">Run this program from two or more command windows.</span></span> <span data-ttu-id="fb57a-233">各プロセスの作成、 <xref:System.Threading.Mutex> 「で」の名前付きミュー テックスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-233">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex "MyMutex".</span></span> <span data-ttu-id="fb57a-234">名前付きミュー テックスは、システム オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="fb57a-234">The named mutex is a system object.</span></span> <span data-ttu-id="fb57a-235">この例では、その有効期間はの有効期間によって制限、<xref:System.Threading.Mutex>を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-235">In this example, its lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="fb57a-236">最初のプロセスは、ローカルを作成するときに、名前付きミュー テックスが作成された<xref:System.Threading.Mutex>オブジェクト、および破棄されるときにすべて、<xref:System.Threading.Mutex>リリースされたことを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-236">The named mutex is created when the first process creates its local <xref:System.Threading.Mutex> object, and destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span> <span data-ttu-id="fb57a-237">名前付きミュー テックスは最初のプロセスで最初に所有されています。</span><span class="sxs-lookup"><span data-stu-id="fb57a-237">The named mutex is initially owned by the first process.</span></span> <span data-ttu-id="fb57a-238">名前付きミュー テックスを解放する以前のプロセスの 2 番目のプロセスおよび後続のプロセスを待ちます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-238">The second process and any subsequent processes wait for earlier processes to release the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="fb57a-239">アクセス制御セキュリティを使用した名前付きミューテックスが存在しますが、ユーザーに <see cref="F:System.Security.AccessControl.MutexRights.FullControl" /> がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-239">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="fb57a-240">Win32 エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-240">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="fb57a-241">名前付きミューテックスを作成できません。原因として、別の型の待機ハンドルに同じ名前が付けられていることが考えられます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-241">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fb57a-242">
            <paramref name="name" /> が 260 文字を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-242">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="fb57a-243">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-243">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="fb57a-244">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-244">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="fb57a-245">マネージド スレッド処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-245">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md">
          <span data-ttu-id="fb57a-246">ミューテックス</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-246">Mutexes</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew, System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string *  * System.Security.AccessControl.MutexSecurity -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name, createdNew, mutexSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="fb57a-247">この呼び出しの結果として名前付きシステム ミューテックスが作成された場合に、呼び出し元スレッドに名前付きシステム ミューテックスの初期所有権を付与する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-247">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fb57a-248">システム ミューテックスの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-248">The name of the system mutex.</span>
          </span>
          <span data-ttu-id="fb57a-249">値が <see langword="null" /> の場合、<see cref="T:System.Threading.Mutex" /> は無名になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-249">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="fb57a-250">このメソッドから制御が戻るとき、ローカル ミューテックスが作成された場合 (つまり <c>name</c> が <see langword="null" /> または空の文字列の場合) または指定した名前付きシステム ミューテックスが作成された場合は、ブール値 <see langword="true" /> が格納されます。指定した名前付きシステム ミューテックスが既に存在する場合は <see langword="false" /> が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-250">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="fb57a-251">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-251">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="mutexSecurity">
          <span data-ttu-id="fb57a-252">名前付きシステム ミューテックスに適用するアクセス制御セキュリティを表す <see cref="T:System.Security.AccessControl.MutexSecurity" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-252">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb57a-253">呼び出し元のスレッドにミューテックスの初期所有権があるかどうかを示すブール値、ミューテックスの名前を表す文字列、メソッドが戻るときにミューテックスの初期所有権が呼び出し元のスレッドに付与されたかどうかを示すブール値変数、および名前付きミューテックスに適用するアクセス制御セキュリティを指定して、<see cref="T:System.Threading.Mutex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-253">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, a Boolean variable that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex, and the access control security to be applied to the named mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-254">場合`name`ない`null`と`initiallyOwned`は`true`、呼び出し元のスレッドが場合にのみ、名前付きミュー テックスを所有している`createdNew`は`true`呼び出しの後にします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-254">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="fb57a-255">呼び出すことによって、スレッドがミュー テックスを要求するそれ以外の場合、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-255">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="fb57a-256">このコンス トラクターを使用するが作成されると、他のコードが、ミュー テックスを乗っ取ることを防止、アクセス制御セキュリティを名前付きシステム ミュー テックスに適用できます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-256">Use this constructor to apply access control security to a named system mutex when it is created, preventing other code from taking control of the mutex.</span></span>  
  
 <span data-ttu-id="fb57a-257">このコンス トラクターの初期化を<xref:System.Threading.Mutex>名前付きシステム ミュー テックスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-257">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="fb57a-258">複数作成できます<xref:System.Threading.Mutex>名前付きシステム ミュー テックスを同じを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fb57a-258">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="fb57a-259">名前付きシステム ミュー テックスが存在しない場合は、指定したアクセス制御セキュリティで作成されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-259">If the named system mutex does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="fb57a-260">名前付きミュー テックスが存在する場合は、指定したアクセス制御セキュリティが無視されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-260">If the named mutex exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb57a-261">呼び出し元が新しく作成された完全な制御<xref:System.Threading.Mutex>オブジェクトいて`mutexSecurity`拒否するか、現在のユーザーへのいくつかのアクセス権の付与に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="fb57a-261">The caller has full control over the newly created <xref:System.Threading.Mutex> object even if `mutexSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="fb57a-262">ただし場合は、現在のユーザーが別の取得を試みます<xref:System.Threading.Mutex>オブジェクトを表す、同じ名前付きミュー テックス、いずれかを使用して、コンス トラクターまたは<xref:System.Threading.Mutex.OpenExisting%2A>メソッドでは、Windows アクセス制御セキュリティを適用します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-262">However, if the current user attempts to get another <xref:System.Threading.Mutex> object to represent the same named mutex, using either a constructor or the <xref:System.Threading.Mutex.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="fb57a-263">アクセス制御のセキュリティでは、名前付きミュー テックスが既に作成されていて、呼び出し元が持たない<xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-263">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="fb57a-264">既存のスレッドのアクティビティを同期するために必要なアクセス許可のみを持つ名前付きミュー テックスを開くを参照してください。、<xref:System.Threading.Mutex.OpenExisting%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-264">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="fb57a-265">指定した場合`null`または空の文字列の`name`、ローカル ミュー テックスが作成されたことを呼び出した場合と、<xref:System.Threading.Mutex.%23ctor%28System.Boolean%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="fb57a-265">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="fb57a-266">この場合、`createdNew`は常に`true`します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-266">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="fb57a-267">これらは、システム全体であるために、プロセスの境界間でリソースの使用を調整する名前付きミュー テックスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-267">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fb57a-268">ターミナル サービスを実行しているサーバーで名前付きシステム ミュー テックスには 2 つのレベルの可視性のことができます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-268">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="fb57a-269">その名前がプレフィックスで始まる場合は、"Global\\"、ミュー テックスはすべてのターミナル サーバー セッションに表示されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-269">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="fb57a-270">その名前がプレフィックスで始まる場合は、"ローカル\\"、ミュー テックスが作成されたにターミナル サーバー セッションでのみ表示されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-270">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="fb57a-271">その場合は、同じ名前の別のミュー テックスは、それぞれのサーバー上の他のターミナル サーバー セッションに存在できます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-271">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="fb57a-272">プレフィックスがかかる場合、名前付きミュー テックスを作成するときに、プレフィックスを指定しないと、"ローカル\\"。</span><span class="sxs-lookup"><span data-stu-id="fb57a-272">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="fb57a-273">ターミナル サーバー セッション内で名前のプレフィックスのみが異なる 2 つのミュー テックスは別のミュー テックス、および両方は、ターミナル サーバー セッションですべてのプロセスを表示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-273">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="fb57a-274">プレフィックスの名前は、"Global\\"と"ローカル\\"ミュー テックスの名前のプロセスは、ターミナル サーバー セッションを基準のスコープについて説明します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-274">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]  
   
  
## Examples  
 <span data-ttu-id="fb57a-275">次のコード例では、アクセス制御セキュリティを名前付きミュー テックスのプロセス間の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-275">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="fb57a-276">この例では、<xref:System.Threading.Mutex.OpenExisting%28System.String%29>名前付きミュー テックスの存在をテストするメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-276">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="fb57a-277">ミュー テックスが存在しない場合は、初期所有権と、ミュー テックスを使用する権利を現在のユーザーに拒否の読み取りし、ミュー テックスのアクセス許可を変更する権限を付与するアクセス制御セキュリティで作成されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-277">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="fb57a-278">2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます<xref:System.Threading.Mutex.OpenExisting%28System.String%29>します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-278">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="fb57a-279">例外がキャッチされ、例では、<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>メソッドのオーバー ロードを読み取って、アクセス許可を変更するために必要な権限を持つ、ミュー テックスを開きます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-279">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="fb57a-280">アクセス許可が変更された後、ミュー テックスは、入力し、解放に必要な権限で開かれます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-280">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="fb57a-281">3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用してを実行します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-281">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="fb57a-282">Win32 エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-282">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="fb57a-283">アクセス制御セキュリティを使用した名前付きミューテックスが存在しますが、ユーザーに <see cref="F:System.Security.AccessControl.MutexRights.FullControl" /> がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-283">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="fb57a-284">名前付きミューテックスを作成できません。原因として、別の型の待機ハンドルに同じ名前が付けられていることが考えられます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-284">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fb57a-285">
            <paramref name="name" /> が 260 文字を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-285">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="fb57a-286">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-286">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="fb57a-287">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-287">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.MutexSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.MutexSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As MutexSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::MutexSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.MutexSecurity" Usage="mutex.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.MutexSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fb57a-288">名前付きミューテックスのアクセス制御セキュリティを表す <see cref="T:System.Security.AccessControl.MutexSecurity" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-288">Gets a <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb57a-289">名前付きミューテックスのアクセス制御セキュリティを表す <see cref="T:System.Security.AccessControl.MutexSecurity" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-289">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-290"><xref:System.Threading.Mutex.GetAccessControl%2A>メソッドは次のフラグ (ビットごとの OR 演算を使用して結合) の組み合わせを使用してアクセス許可を検索する: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>、 <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>、および<xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-290">The <xref:System.Threading.Mutex.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="fb57a-291">ユーザーがいる必要があります<xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>をこのメソッドをおよび、ミュー テックスを呼び出す必要がありますが開かれていると<xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-291">The user must have <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb57a-292">次のコード例では、アクセス制御セキュリティを名前付きミュー テックスのプロセス間の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-292">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="fb57a-293">この例では、<xref:System.Threading.Mutex.OpenExisting%28System.String%29>名前付きミュー テックスの存在をテストするメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-293">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="fb57a-294">ミュー テックスが存在しない場合は、初期所有権と、ミュー テックスを使用する権利を現在のユーザーに拒否の読み取りし、ミュー テックスのアクセス許可を変更する権限を付与するアクセス制御セキュリティで作成されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-294">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="fb57a-295">2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます<xref:System.Threading.Mutex.OpenExisting%28System.String%29>します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-295">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="fb57a-296">例外がキャッチされ、例では、<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>メソッドのオーバー ロードを読み取ってを使用して、アクセス許可を変更するために必要な権限を持つ、ミュー テックスを開き、<xref:System.Threading.Mutex.GetAccessControl%2A>と<xref:System.Threading.Mutex.SetAccessControl%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-296">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="fb57a-297">アクセス許可が変更された後、ミュー テックスは、入力し、解放に必要な権限で開かれます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-297">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="fb57a-298">3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用してを実行します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-298">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="fb57a-299">現在の <see cref="T:System.Threading.Mutex" /> オブジェクトは名前付きシステム ミューテックスを表していますが、ユーザーに <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" /> がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-299">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
          <span data-ttu-id="fb57a-300">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-300">-or-</span>
          </span>
          <span data-ttu-id="fb57a-301">現在の <see cref="T:System.Threading.Mutex" /> オブジェクトは名前付きシステム ミューテックスを表しており、<see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" /> で開かれませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-301">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, and was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="fb57a-302">Windows 98 または Windows Millennium Edition はサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-302">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fb57a-303">既に存在する場合は、指定した名前付きミューテックスを開きます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-303">Opens a specified named mutex, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Mutex" Usage="System.Threading.Mutex.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fb57a-304">開くシステム ミューテックスの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-304">The name of the system mutex to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb57a-305">既に存在する場合は、指定した名前付きミューテックスを開きます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-305">Opens the specified named mutex, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb57a-306">名前付きシステム ミューテックスを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-306">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-307"><xref:System.Threading.Mutex.OpenExisting%2A>メソッドを開こうと指定した名前付きシステム ミュー テックスです。</span><span class="sxs-lookup"><span data-stu-id="fb57a-307">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open the specified named system mutex.</span></span> <span data-ttu-id="fb57a-308">システム ミュー テックスが存在しない場合、このメソッドは、システム オブジェクトを作成する代わりに、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-308">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="fb57a-309">既に存在しない場合にシステム ミュー テックスを作成するには、いずれかを使用、<xref:System.Threading.Mutex.%23ctor%2A>コンス トラクターを持つ、`name`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="fb57a-309">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="fb57a-310">このメソッドに同じ値を使用する複数の呼び出し`name`必ずしも返さない同じ<xref:System.Threading.Mutex>場合でも、返されるオブジェクトが同じ名前付きシステム ミュー テックスを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-310">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="fb57a-311">このメソッドのオーバー ロードの呼び出しと同じですが、<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>メソッドのオーバー ロードを指定して<xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType>と<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>権限、ビットごとの OR 演算を使用して結合します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-311">This method overload is equivalent to calling the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="fb57a-312">指定する、<xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType>フラグによって、スレッドにミュー テックスの待機を指定して、<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>フラグによって、スレッドを呼び出す、<xref:System.Threading.Mutex.ReleaseMutex%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-312">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="fb57a-313">このメソッドは、ミュー テックスの所有権を要求しません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-313">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb57a-314">次のコード例では、アクセス制御セキュリティを名前付きミュー テックスのプロセス間の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-314">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="fb57a-315">この例では、<xref:System.Threading.Mutex.OpenExisting%28System.String%29>名前付きミュー テックスの存在をテストするメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-315">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="fb57a-316">ミュー テックスが存在しない場合は、初期所有権と、ミュー テックスを使用する権利を現在のユーザーに拒否の読み取りし、ミュー テックスのアクセス許可を変更する権限を付与するアクセス制御セキュリティで作成されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-316">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="fb57a-317">2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます<xref:System.Threading.Mutex.OpenExisting%28System.String%29>します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-317">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="fb57a-318">例外がキャッチされ、例では、<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>メソッドのオーバー ロードを読み取って、アクセス許可を変更するために必要な権限を持つ、ミュー テックスを開きます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-318">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="fb57a-319">アクセス許可が変更された後、ミュー テックスは、入力し、解放に必要な権限で開かれます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-319">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="fb57a-320">3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用してを実行します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-320">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fb57a-321">
            <paramref name="name" /> が空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-321">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="fb57a-322">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-322">-or-</span>
          </span>
          <span data-ttu-id="fb57a-323">
            <paramref name="name" /> が 260 文字を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-323">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fb57a-324">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-324">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="fb57a-325">名前付きミューテックスが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-325">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="fb57a-326">Win32 エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-326">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="fb57a-327">名前付きミューテックスは存在しますが、それを使用するために必要なセキュリティ アクセスがユーザーにありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-327">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="fb57a-328">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-328">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="fb57a-329">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-329">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name, System.Security.AccessControl.MutexRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As MutexRights) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.MutexRights -&gt; System.Threading.Mutex" Usage="System.Threading.Mutex.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fb57a-330">開くシステム ミューテックスの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-330">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="fb57a-331">必要なセキュリティ アクセス権を表す列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-331">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb57a-332">既に存在する場合は、必要なセキュリティ アクセスで指定した名前付きミューテックスを開きます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-332">Opens the specified named mutex, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb57a-333">名前付きシステム ミューテックスを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-333">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-334">`rights`パラメーターを含める必要があります、 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 、ミュー テックスを待機するスレッドを許可するフラグ、<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>を呼び出すスレッドを許可するフラグ、<xref:System.Threading.Mutex.ReleaseMutex%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-334">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="fb57a-335"><xref:System.Threading.Mutex.OpenExisting%2A>メソッドが、既存の名前付きミュー テックスを開こうとします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-335">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open an existing named mutex.</span></span> <span data-ttu-id="fb57a-336">システム ミュー テックスが存在しない場合、このメソッドは、システム オブジェクトを作成する代わりに、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-336">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="fb57a-337">既に存在しない場合にシステム ミュー テックスを作成するには、いずれかを使用、<xref:System.Threading.Mutex.%23ctor%2A>コンス トラクターを持つ、`name`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="fb57a-337">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="fb57a-338">このメソッドに同じ値を使用する複数の呼び出し`name`必ずしも返さない同じ<xref:System.Threading.Mutex>場合でも、返されるオブジェクトが同じ名前付きシステム ミュー テックスを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-338">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="fb57a-339">このメソッドは、ミュー テックスの所有権を要求しません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-339">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb57a-340">次のコード例では、アクセス制御セキュリティを名前付きミュー テックスのプロセス間の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-340">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="fb57a-341">この例では、<xref:System.Threading.Mutex.OpenExisting%28System.String%29>名前付きミュー テックスの存在をテストするメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-341">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="fb57a-342">ミュー テックスが存在しない場合は、初期所有権と、ミュー テックスを使用する権利を現在のユーザーに拒否の読み取りし、ミュー テックスのアクセス許可を変更する権限を付与するアクセス制御セキュリティで作成されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-342">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="fb57a-343">2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます<xref:System.Threading.Mutex.OpenExisting%28System.String%29>します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-343">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="fb57a-344">例外がキャッチされ、例では、<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>メソッドのオーバー ロードを読み取って、アクセス許可を変更するために必要な権限を持つ、ミュー テックスを開きます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-344">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="fb57a-345">アクセス許可が変更された後、ミュー テックスは、入力し、解放に必要な権限で開かれます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-345">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="fb57a-346">3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用してを実行します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-346">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fb57a-347">
            <paramref name="name" /> が空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-347">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="fb57a-348">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-348">-or-</span>
          </span>
          <span data-ttu-id="fb57a-349">
            <paramref name="name" /> が 260 文字を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-349">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fb57a-350">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-350">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="fb57a-351">名前付きミューテックスが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-351">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="fb57a-352">Win32 エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-352">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="fb57a-353">名前付きミューテックスは存在しますが、必要なセキュリティ アクセスがユーザーにありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-353">The named mutex exists, but the user does not have the desired security access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="fb57a-354">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-354">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="fb57a-355">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-355">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMutex">
      <MemberSignature Language="C#" Value="public void ReleaseMutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseMutex() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.ReleaseMutex" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMutex ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseMutex();" />
      <MemberSignature Language="F#" Value="member this.ReleaseMutex : unit -&gt; unit" Usage="mutex.ReleaseMutex " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fb57a-356">
            <see cref="T:System.Threading.Mutex" /> を一度解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-356">Releases the <see cref="T:System.Threading.Mutex" /> once.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-357">スレッドがミュー テックスを取得するたびに (など、呼び出すことによってその<xref:System.Threading.WaitHandle.WaitOne%2A>メソッド)、後で呼び出す必要があります<xref:System.Threading.Mutex.ReleaseMutex%2A>ミュー テックスの所有権を放棄して、ミュー テックスの所有権を取得しようとしている他のスレッドのブロックを解除します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-357">Whenever a thread acquires a mutex (for example, by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method), it must subsequently call <xref:System.Threading.Mutex.ReleaseMutex%2A> to relinquish ownership of the mutex and unblock other threads that are trying to gain ownership of the mutex.</span></span> <span data-ttu-id="fb57a-358">ミュー テックスの所有権の取得に失敗したが失敗したかどうか (への呼び出し時などに、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドを`millisecondsTimeout`または`timeout`パラメーターを返します`false`要求がタイムアウトになるため)、スレッドを呼び出すことはできません<xref:System.Threading.Mutex.ReleaseMutex%2A>、この場合も、スレッドもできませんとして次の例は、ミュー テックスで保護されているリソースにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-358">If the attempt to get ownership of the mutex fails (for example, when a call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method with a `millisecondsTimeout` or a `timeout` parameter returns `false` because the request times out), the thread shouldn't call <xref:System.Threading.Mutex.ReleaseMutex%2A>, In this case, the thread should also not be allowed to access the resource protected by the mutex, as the following example shows.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 <span data-ttu-id="fb57a-359">ミュー テックスを所有するスレッドは、その実行をブロックすることがなく、繰り返される関数呼び出しで同じミュー テックスを指定できます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-359">A thread that owns a mutex can specify the same mutex in repeated wait function calls without blocking its execution.</span></span> <span data-ttu-id="fb57a-360">呼び出しの数は、共通言語ランタイムで保持されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-360">The number of calls is kept by the common language runtime.</span></span> <span data-ttu-id="fb57a-361">スレッドを呼び出す必要があります<xref:System.Threading.Mutex.ReleaseMutex%2A>ミュー テックスの所有権を解放するのと同じ回数。</span><span class="sxs-lookup"><span data-stu-id="fb57a-361">The thread must call <xref:System.Threading.Mutex.ReleaseMutex%2A> the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="fb57a-362">ミュー テックスを所有しているスレッドが終了する場合、ミュー テックスを破棄するメンバーといいます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-362">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="fb57a-363">ミュー テックスの状態がシグナル状態に設定して、次の待機スレッドが所有権を取得します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-363">The state of the mutex is set to signaled and the next waiting thread gets ownership.</span></span> <span data-ttu-id="fb57a-364">ミュー テックスを所有していない場合、ミュー テックスの状態が通知されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-364">If no one owns the mutex, the state of the mutex is signaled.</span></span> <span data-ttu-id="fb57a-365">.NET Framework のバージョン 2.0 以降では、<xref:System.Threading.AbandonedMutexException>がミュー テックスを獲得する次のスレッドでスローされます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-365">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the mutex.</span></span> <span data-ttu-id="fb57a-366">.NET Framework version 2.0 の前に例外がスローされません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-366">Prior to version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="fb57a-367">ミュー テックスの破棄には、重大なエラー コードの多くの場合を示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-367">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="fb57a-368">ミュー テックスを解放しないままスレッドが終了すると、ミュー テックスで保護されているデータ構造が一貫した状態でできません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-368">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="fb57a-369">次のスレッドにミュー テックスの所有権を要求するでは、この例外を処理でき、データ構造の整合性を検証できる場合、続行することができます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-369">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="fb57a-370">システム全体でミューテックスが有効な場合にミューテックスが破棄されたときは、アプリケーションが強制終了されたことを示している可能性があります (たとえば、Windows タスク マネージャを使用した終了)。</span><span class="sxs-lookup"><span data-stu-id="fb57a-370">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb57a-371">次の例は、どのローカル<xref:System.Threading.Mutex>オブジェクトは、保護されたリソースへのアクセスを同期するために使用します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-371">The following example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="fb57a-372">ミュー テックスを作成するスレッドが所有していない、最初に。</span><span class="sxs-lookup"><span data-stu-id="fb57a-372">The thread that creates the mutex does not own it initially.</span></span> <span data-ttu-id="fb57a-373"><xref:System.Threading.Mutex.ReleaseMutex%2A>不要になったときにミュー テックスを解放するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-373">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is used to release the mutex when it is no longer needed.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="fb57a-374">呼び出しスレッドに独自のミューテックスがありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-374">The calling thread does not own the mutex.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="fb57a-375">現在のインスタンスは既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-375">The current instance has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="fb57a-376">マネージド スレッド処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-376">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md">
          <span data-ttu-id="fb57a-377">ミューテックス</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-377">Mutexes</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.MutexSecurity -&gt; unit" Usage="mutex.SetAccessControl mutexSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="mutexSecurity">
          <span data-ttu-id="fb57a-378">名前付きシステム ミューテックスに適用するアクセス制御セキュリティを表す <see cref="T:System.Security.AccessControl.MutexSecurity" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-378">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb57a-379">名前付きシステム ミューテックスのアクセス制御セキュリティを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-379">Sets the access control security for a named system mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-380">ユーザーがいる必要があります<xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>で、このメソッドと、ミュー テックスを呼び出す権限が開かれている必要があります<xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-380">The user must have <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb57a-381">次のコード例では、アクセス制御セキュリティを名前付きミュー テックスのプロセス間の動作を示します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-381">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="fb57a-382">この例では、<xref:System.Threading.Mutex.OpenExisting%28System.String%29>名前付きミュー テックスの存在をテストするメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-382">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="fb57a-383">ミュー テックスが存在しない場合は、初期所有権と、ミュー テックスを使用する権利を現在のユーザーに拒否の読み取りし、ミュー テックスのアクセス許可を変更する権限を付与するアクセス制御セキュリティで作成されます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-383">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="fb57a-384">2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます<xref:System.Threading.Mutex.OpenExisting%28System.String%29>します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-384">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="fb57a-385">例外がキャッチされ、例では、<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>メソッドのオーバー ロードを読み取ってを使用して、アクセス許可を変更するために必要な権限を持つ、ミュー テックスを開き、<xref:System.Threading.Mutex.GetAccessControl%2A>と<xref:System.Threading.Mutex.SetAccessControl%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-385">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="fb57a-386">アクセス許可が変更された後、ミュー テックスは、入力し、解放に必要な権限で開かれます。</span><span class="sxs-lookup"><span data-stu-id="fb57a-386">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="fb57a-387">3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用してを実行します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-387">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fb57a-388">
            <paramref name="mutexSecurity" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-388">
              <paramref name="mutexSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="fb57a-389">ユーザーに <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" /> がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-389">The user does not have <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
          <span data-ttu-id="fb57a-390">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-390">-or-</span>
          </span>
          <span data-ttu-id="fb57a-391">ミューテックスは <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" /> で開かれませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-391">The mutex was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="fb57a-392">現在の <see cref="T:System.Threading.Mutex" /> オブジェクトは名前付きシステム ミューテックスを表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-392">The current <see cref="T:System.Threading.Mutex" /> object does not represent a named system mutex.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fb57a-393">既に存在する場合は、指定した名前付きミューテックスを開き操作が成功したかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-393">Opens a specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Mutex.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Mutex" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fb57a-394">開くシステム ミューテックスの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-394">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="fb57a-395">このメソッドから戻るときに、呼び出しに成功した場合は名前付きミューテックスを表す <see cref="T:System.Threading.Mutex" /> オブジェクトが格納されます。呼び出しに失敗した場合は <see langword="null" /> が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-395">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="fb57a-396">このパラメーターは初期化前として処理されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-396">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb57a-397">既に存在する場合は、指定した名前付きミューテックスを開き操作が成功したかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-397">Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb57a-398">名前付きミューテックスが正常に開かれた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-398">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-399">名前付きミュー テックスが存在しない場合このメソッドはいない作成しません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-399">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="fb57a-400">既に存在しない場合にシステム ミュー テックスを作成するには、いずれかを使用、<xref:System.Threading.Mutex.%23ctor%2A>コンス トラクターを持つ、`name`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="fb57a-400">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="fb57a-401">名前付きミュー テックスが存在するかどうかが不明な場合は、代わりにこのメソッドのオーバー ロードを使用して、<xref:System.Threading.Mutex.OpenExisting%28System.String%29>メソッド オーバー ロードで、ミュー テックスが存在しない場合は、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-401">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="fb57a-402">このメソッドに同じ値を使用する複数の呼び出し`name`必ずしも返さない同じ<xref:System.Threading.Mutex>場合でも、返されるオブジェクトが同じ名前付きシステム ミュー テックスを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-402">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="fb57a-403">このメソッドのオーバー ロードの呼び出しと同じですが、<xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29>メソッドのオーバー ロードを指定して<xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType>と<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>権限、ビットごとの OR 演算を使用して結合します。</span><span class="sxs-lookup"><span data-stu-id="fb57a-403">This method overload is equivalent to calling the <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="fb57a-404">指定する、<xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType>フラグによって、スレッドにミュー テックスの待機を指定して、<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>フラグによって、スレッドを呼び出す、<xref:System.Threading.Mutex.ReleaseMutex%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-404">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="fb57a-405">このメソッドは、ミュー テックスの所有権を要求しません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-405">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fb57a-406">
            <paramref name="name" /> が空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-406">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="fb57a-407">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-407">-or-</span>
          </span>
          <span data-ttu-id="fb57a-408">
            <paramref name="name" /> が 260 文字を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-408">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fb57a-409">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-409">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="fb57a-410">Win32 エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-410">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="fb57a-411">名前付きミューテックスは存在しますが、それを使用するために必要なセキュリティ アクセスがユーザーにありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-411">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="fb57a-412">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-412">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="fb57a-413">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-413">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.MutexRights rights, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As MutexRights, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.MutexRights *  -&gt; bool" Usage="System.Threading.Mutex.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="result" Type="System.Threading.Mutex" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fb57a-414">開くシステム ミューテックスの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-414">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="fb57a-415">必要なセキュリティ アクセス権を表す列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-415">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="fb57a-416">このメソッドから戻るときに、呼び出しに成功した場合は名前付きミューテックスを表す <see cref="T:System.Threading.Mutex" /> オブジェクトが格納されます。呼び出しに失敗した場合は <see langword="null" /> が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-416">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="fb57a-417">このパラメーターは初期化前として処理されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-417">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb57a-418">既に存在する場合は、必要なセキュリティ アクセスを使用して指定した名前付きミューテックスを開き、操作が成功したかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-418">Opens the specified named mutex, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fb57a-419">名前付きミューテックスが正常に開かれた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-419">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb57a-420">名前付きミュー テックスが存在しない場合このメソッドはいない作成しません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-420">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="fb57a-421">既に存在しない場合にシステム ミュー テックスを作成するには、いずれかを使用、<xref:System.Threading.Mutex.%23ctor%2A>コンス トラクターを持つ、`name`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="fb57a-421">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="fb57a-422">名前付きミュー テックスが存在するかどうかが不明な場合は、代わりにこのメソッドのオーバー ロードを使用して、<xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29>メソッド オーバー ロードで、ミュー テックスが存在しない場合は、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-422">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="fb57a-423">`rights`パラメーターを含める必要があります、 <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> 、ミュー テックスを待機するスレッドを許可するフラグ、<xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType>を呼び出すスレッドを許可するフラグ、<xref:System.Threading.Mutex.ReleaseMutex%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="fb57a-423">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="fb57a-424">このメソッドに同じ値を使用する複数の呼び出し`name`必ずしも返さない同じ<xref:System.Threading.Mutex>場合でも、返されるオブジェクトが同じ名前付きシステム ミュー テックスを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="fb57a-424">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="fb57a-425">このメソッドは、ミュー テックスの所有権を要求しません。</span><span class="sxs-lookup"><span data-stu-id="fb57a-425">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fb57a-426">
            <paramref name="name" /> が空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-426">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="fb57a-427">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-427">-or-</span>
          </span>
          <span data-ttu-id="fb57a-428">
            <paramref name="name" /> が 260 文字を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-428">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fb57a-429">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-429">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="fb57a-430">Win32 エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-430">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="fb57a-431">名前付きミューテックスは存在しますが、それを使用するために必要なセキュリティ アクセスがユーザーにありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-431">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="fb57a-432">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-432">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="fb57a-433">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb57a-433">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>