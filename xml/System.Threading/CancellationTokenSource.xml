<Type Name="CancellationTokenSource" FullName="System.Threading.CancellationTokenSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32c289a81dc6f07c93f466308dcfb4a4b2c6c543" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48666135" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CancellationTokenSource : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CancellationTokenSource extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationTokenSource" />
  <TypeSignature Language="VB.NET" Value="Public Class CancellationTokenSource&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CancellationTokenSource : IDisposable" />
  <TypeSignature Language="F#" Value="type CancellationTokenSource = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="84bc5-101">取り消す必要があることを <see cref="T:System.Threading.CancellationToken" /> に通知します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="84bc5-101">Signals to a <see cref="T:System.Threading.CancellationToken" /> that it should be canceled.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84bc5-102">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、.NET Framework では、2 つのオブジェクトを含む非同期または長時間同期操作の連携によるキャンセルの統一されたモデルを使用します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-102">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:</span></span>  
  
-   <span data-ttu-id="84bc5-103">A<xref:System.Threading.CancellationTokenSource>を通じてキャンセル トークンを提供するオブジェクトは、その<xref:System.Threading.CancellationTokenSource.Token%2A>プロパティおよび取り消しを呼び出すことによってメッセージ送信の<xref:System.Threading.CancellationTokenSource.Cancel%2A>または<xref:System.Threading.CancellationTokenSource.CancelAfter%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="84bc5-103">A <xref:System.Threading.CancellationTokenSource> object, which provides a cancellation token through its <xref:System.Threading.CancellationTokenSource.Token%2A> property and sends a cancellation message by calling its <xref:System.Threading.CancellationTokenSource.Cancel%2A> or <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> method.</span></span>  
  
-   <span data-ttu-id="84bc5-104">A<xref:System.Threading.CancellationToken>オブジェクトで、キャンセルが要求されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-104">A <xref:System.Threading.CancellationToken> object, which indicates whether cancellation is requested.</span></span>  
  
 <span data-ttu-id="84bc5-105">連携によるキャンセル処理モデルを実装するための一般的なパターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="84bc5-105">The general pattern for implementing the cooperative cancellation model is:</span></span>  
  
-   <span data-ttu-id="84bc5-106"><xref:System.Threading.CancellationTokenSource> オブジェクトのインスタンスを作成します。このオブジェクトでは、個々のキャンセル トークンへのキャンセル通知を管理し、送信します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-106">Instantiate a <xref:System.Threading.CancellationTokenSource> object, which manages and sends cancellation notification to the individual cancellation tokens.</span></span>  
  
-   <span data-ttu-id="84bc5-107"><xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> プロパティによって返されるトークンを、キャンセルをリッスンしているそれぞれのタスクまたはスレッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-107">Pass the token returned by the <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property to each task or thread that listens for cancellation.</span></span>  
  
-   <span data-ttu-id="84bc5-108">呼び出す、<xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType>キャンセル トークンを受信する操作からのメソッド。</span><span class="sxs-lookup"><span data-stu-id="84bc5-108">Call the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType> method from operations that receive the cancellation token.</span></span> <span data-ttu-id="84bc5-109">各タスクまたはスレッドのキャンセル要求に応答するためのメカニズムを提供します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-109">Provide a mechanism for each task or thread to respond to a cancellation request.</span></span> <span data-ttu-id="84bc5-110">キャンセル操作、および正確にその方法を選択するかどうかは、アプリケーション ロジックに依存します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-110">Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.</span></span>  
  
-   <span data-ttu-id="84bc5-111">キャンセルの通知を提供する <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-111">Call the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to provide notification of cancellation.</span></span> <span data-ttu-id="84bc5-112">これにより設定、<xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType>プロパティにキャンセル トークンのすべてのコピーを`true`します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-112">This sets the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType> property on every copy of the cancellation token to `true`.</span></span>  
  
-   <span data-ttu-id="84bc5-113">呼び出す、<xref:System.Threading.CancellationTokenSource.Dispose%2A>メソッドが完了したら、<xref:System.Threading.CancellationTokenSource>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="84bc5-113">Call the <xref:System.Threading.CancellationTokenSource.Dispose%2A> method when you are finished with the <xref:System.Threading.CancellationTokenSource> object.</span></span>  
  
 <span data-ttu-id="84bc5-114">詳細については、「[マネージド スレッドのキャンセル](~/docs/standard/threading/cancellation-in-managed-threads.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="84bc5-114">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="84bc5-115">この型は、<xref:System.IDisposable>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="84bc5-115">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="84bc5-116">型のインスタンスを使用してが完了したら、直接的または間接的にそれを破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="84bc5-116">When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="84bc5-117">型の直接 dispose を呼び出してその<xref:System.IDisposable.Dispose%2A>メソッド、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="84bc5-117">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="84bc5-118">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(で C# の場合) または`Using`(Visual Basic) でします。</span><span class="sxs-lookup"><span data-stu-id="84bc5-118">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="84bc5-119">詳細については、"を使用して、オブジェクトを実装する IDisposable"のセクションを参照してください、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="84bc5-119">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84bc5-120">次の例では、乱数ジェネレーターを使用して、エミュレートを 11 個の異なる instruments から 10 個の整数値を読み取るデータ コレクションのアプリケーション。</span><span class="sxs-lookup"><span data-stu-id="84bc5-120">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="84bc5-121">値 0 は、測定が、操作を取り消す必要がある場合とない全体の平均を計算する必要が 1 つのインストルメント化に失敗したことを示します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-121">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="84bc5-122">例では、インスタンス化可能な操作のキャンセルを処理するために、<xref:System.Threading.CancellationTokenSource>に渡されるキャンセル トークンを生成するオブジェクト、<xref:System.Threading.Tasks.TaskFactory>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="84bc5-122">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="84bc5-123"><xref:System.Threading.Tasks.TaskFactory>オブジェクトを渡しますキャンセル トークンのタスクのそれぞれに特定のインストルメント化の測定値の収集を担当します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-123">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="84bc5-124"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>メソッドが呼び出され、すべての測定値が正常に収集された後でのみ平均を計算することを確認します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-124">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="84bc5-125">タスクがキャンセルされたためではなく、呼び出し、<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType>メソッドが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="84bc5-125">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="84bc5-126">すべてのパブリックおよびプロテクト メンバー<see cref="T:System.Threading.CancellationTokenSource" />スレッド セーフでは、例外として、複数のスレッドから同時に使用できます<see cref="M:System.Threading.CancellationTokenSource.Dispose" />、ときに使用する必要がありますの他のすべての操作、<see cref="T:System.Threading.CancellationTokenSource" />オブジェクトが完了します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="84bc5-126">All public and protected members of <see cref="T:System.Threading.CancellationTokenSource" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.CancellationTokenSource.Dispose" />, which must only be used when all other operations on the <see cref="T:System.Threading.CancellationTokenSource" /> object have completed.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
      <span data-ttu-id="84bc5-127">キャンセル</span>
      <span class="sxs-lookup">
        <span data-stu-id="84bc5-127">Cancellation</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
      <span data-ttu-id="84bc5-128">タスクのキャンセル</span>
      <span class="sxs-lookup">
        <span data-stu-id="84bc5-128">Task Cancellation</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="84bc5-129">
            <see cref="T:System.Threading.CancellationTokenSource" /> を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-129">Initializes the <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationTokenSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationTokenSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="84bc5-130">
            <see cref="T:System.Threading.CancellationTokenSource" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-130">Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="84bc5-131">キャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-131">Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="84bc5-132">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-132">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationTokenSource (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (millisecondsDelay As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationTokenSource(int millisecondsDelay);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationTokenSource : int -&gt; System.Threading.CancellationTokenSource" Usage="new System.Threading.CancellationTokenSource millisecondsDelay" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="84bc5-133">この <see cref="T:System.Threading.CancellationTokenSource" /> を取り消すまで待機する時間間隔 (ミリ秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-133">The time interval in milliseconds to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="84bc5-134">指定した遅延 (ミリ秒単位) が経過した後に取り消される <see cref="T:System.Threading.CancellationTokenSource" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-134">Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class that will be canceled after the specified delay in milliseconds.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84bc5-135">カウント ダウン、`millisecondsDelay`コンス トラクターの呼び出し中に開始します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-135">The countdown for the `millisecondsDelay` starts during the call to the constructor.</span></span>  <span data-ttu-id="84bc5-136">ときに、`millisecondsDelay`有効期限が切れる、構築された<xref:System.Threading.CancellationTokenSource>(既にキャンセルされていないいる) 場合は取り消されます。</span><span class="sxs-lookup"><span data-stu-id="84bc5-136">When the `millisecondsDelay` expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled (if it has not been canceled already).</span></span>  
  
 <span data-ttu-id="84bc5-137">後続の呼び出し<xref:System.Threading.CancellationTokenSource.CancelAfter%2A>はリセット、`millisecondsDelay`の構築された<xref:System.Threading.CancellationTokenSource>既にキャンセルされていない場合は、します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-137">Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the `millisecondsDelay` for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="84bc5-138">
            <paramref name="millisecondsDelay" /> が -1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-138">
              <paramref name="millisecondsDelay" /> is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationTokenSource (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (delay As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationTokenSource(TimeSpan delay);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationTokenSource : TimeSpan -&gt; System.Threading.CancellationTokenSource" Usage="new System.Threading.CancellationTokenSource delay" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="84bc5-139">この <see cref="T:System.Threading.CancellationTokenSource" /> を取り消すまで待機する時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-139">The time interval to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="84bc5-140">指定した期間の後に取り消される <see cref="T:System.Threading.CancellationTokenSource" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-140">Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class that will be canceled after the specified time span.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84bc5-141">コンス トラクターの呼び出し中に、遅延のカウント ダウンを開始します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-141">The countdown for the delay starts during the call to the constructor.</span></span> <span data-ttu-id="84bc5-142">遅延時間が経過した場合、構築された<xref:System.Threading.CancellationTokenSource>既にキャンセルされていない場合、キャンセルします。</span><span class="sxs-lookup"><span data-stu-id="84bc5-142">When the delay expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.</span></span>  
  
 <span data-ttu-id="84bc5-143">後続の呼び出し<xref:System.Threading.CancellationTokenSource.CancelAfter%2A>、構築済みの遅延がリセット<xref:System.Threading.CancellationTokenSource>既にキャンセルされていない場合は、します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-143">Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the delay for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="84bc5-144">
            <paramref name="delay" />
            <see langword="." />
            <see cref="P:System.TimeSpan.TotalMilliseconds" /> が -1 未満か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-144">
              <paramref name="delay" />
              <see langword="." />
              <see cref="P:System.TimeSpan.TotalMilliseconds" /> is less than -1 or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="  &#xA;            T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="84bc5-145">
            <paramref name="delay" />
            <see langword="." />
            <see cref="P:System.TimeSpan.TotalMilliseconds" /> が -1 未満か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-145">
              <paramref name="delay" />
              <see langword="." />
              <see cref="P:System.TimeSpan.TotalMilliseconds" /> is less than -1 or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Cancel">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="84bc5-146">取り消しの要求を伝えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-146">Communicates a request for cancellation.</span>
          </span>
        </summary>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="84bc5-147">キャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-147">Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="84bc5-148">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-148">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; unit" Usage="cancellationTokenSource.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="84bc5-149">取り消しの要求を伝えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-149">Communicates a request for cancellation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84bc5-150">関連付けられている<xref:System.Threading.CancellationToken>、キャンセルの通知し、状態に遷移を<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>true を返します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-150">The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns true.</span></span>  
  
 <span data-ttu-id="84bc5-151">登録されているすべてのコールバックまたはキャンセル可能な操作、<xref:System.Threading.CancellationToken>が実行されます。</span><span class="sxs-lookup"><span data-stu-id="84bc5-151">Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.</span></span>  
  
 <span data-ttu-id="84bc5-152">キャンセル可能な操作とコールバックに登録されていることをお勧めします。<xref:System.Threading.CancellationToken>例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="84bc5-152">We recommend that cancelable operations and callbacks registered with <xref:System.Threading.CancellationToken> not throw exceptions.</span></span> 
 
 <span data-ttu-id="84bc5-153">[キャンセル] のこのオーバー ロードにスローされた例外が集計されます、<xref:System.AggregateException>例外がスローされる 1 つのコールバックが実行されるその他の登録済みのコールバックを妨げませんようにします。</span><span class="sxs-lookup"><span data-stu-id="84bc5-153">This overload of Cancel will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</span></span> 
   
  
## Examples  
 <span data-ttu-id="84bc5-154">次の例では、乱数ジェネレーターを使用して、エミュレートを 11 個の異なる instruments から 10 個の整数値を読み取るデータ コレクションのアプリケーション。</span><span class="sxs-lookup"><span data-stu-id="84bc5-154">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="84bc5-155">値 0 は、測定が、操作を取り消す必要がある場合とない全体の平均を計算する必要が 1 つのインストルメント化に失敗したことを示します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-155">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="84bc5-156">例では、インスタンス化可能な操作のキャンセルを処理するために、<xref:System.Threading.CancellationTokenSource>に渡されるキャンセル トークンを生成するオブジェクト、<xref:System.Threading.Tasks.TaskFactory>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="84bc5-156">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="84bc5-157"><xref:System.Threading.Tasks.TaskFactory>オブジェクトを渡しますキャンセル トークンのタスクのそれぞれに特定のインストルメント化の測定値の収集を担当します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-157">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="84bc5-158"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType>メソッドが呼び出され、すべての測定値が正常に収集された後でのみ平均を計算することを確認します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-158">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="84bc5-159">タスクがキャンセルされたためではなく、呼び出し、<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType>メソッドが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="84bc5-159">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="84bc5-160">この <see cref="T:System.Threading.CancellationTokenSource" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-160">This <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="84bc5-161">関連付けられた<see cref="T:System.Threading.CancellationToken" /> に関する登録されたコールバックによってスローされるすべての例外を含む集計例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-161">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="84bc5-162">キャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-162">Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="84bc5-163">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-163">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel (bool throwOnFirstException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel(bool throwOnFirstException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel (throwOnFirstException As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel(bool throwOnFirstException);" />
      <MemberSignature Language="F#" Value="member this.Cancel : bool -&gt; unit" Usage="cancellationTokenSource.Cancel throwOnFirstException" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throwOnFirstException" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="throwOnFirstException">
          <span data-ttu-id="84bc5-164">例外を直ちに伝達する場合は <see langword="true" /> 。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-164">
              <see langword="true" /> if exceptions should immediately propagate; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="84bc5-165">キャンセルの要求を伝え、例外が発生した場合に残りのコールバックとキャンセル可能な操作を続けるかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-165">Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed if an exception occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84bc5-166">関連付けられている<xref:System.Threading.CancellationToken>、キャンセルの通知し、状態に遷移を<xref:System.Threading.CancellationToken.IsCancellationRequested%2A>返します`true`します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-166">The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns `true`.</span></span>  
  
 <span data-ttu-id="84bc5-167">登録されているすべてのコールバックまたはキャンセル可能な操作、<xref:System.Threading.CancellationToken>が実行されます。</span><span class="sxs-lookup"><span data-stu-id="84bc5-167">Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.</span></span> <span data-ttu-id="84bc5-168">コールバックは、LIFO の順序で同期的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="84bc5-168">Callbacks will be executed synchronously in LIFO order.</span></span> 
  
 <span data-ttu-id="84bc5-169">キャンセル可能な操作とコールバックに登録されていることをお勧めします。<xref:System.Threading.CancellationToken>例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="84bc5-169">We recommend that cancelable operations and callbacks registered with <xref:System.Threading.CancellationToken> not throw exceptions.</span></span> 
  
 <span data-ttu-id="84bc5-170">場合`throwOnFirstException`は`true`、例外が呼び出しから伝達されることがすぐに<xref:System.Threading.CancellationTokenSource.Cancel%2A>、残りのコールバックとキャンセル可能な操作の処理を回避します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-170">If `throwOnFirstException` is `true`, an exception will immediately propagate out of the call to <xref:System.Threading.CancellationTokenSource.Cancel%2A>, preventing the remaining callbacks and cancelable operations from being processed.</span></span>  
  
 <span data-ttu-id="84bc5-171">場合`throwOnFirstException`は`false`、このオーバー ロードにスローされた例外が集計されます、<xref:System.AggregateException>例外がスローされる 1 つのコールバックが実行されるその他の登録済みのコールバックを妨げませんようにします。</span><span class="sxs-lookup"><span data-stu-id="84bc5-171">If `throwOnFirstException` is `false`, this overload will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="84bc5-172">この <see cref="T:System.Threading.CancellationTokenSource" /> は破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-172">This <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="84bc5-173">関連付けられた<see cref="T:System.Threading.CancellationToken" /> に関する登録されたコールバックによってスローされるすべての例外を含む集計例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-173">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="84bc5-174">キャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-174">Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="84bc5-175">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-175">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CancelAfter">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="84bc5-176">この <see cref="T:System.Threading.CancellationTokenSource" /> の取り消し操作をスケジュールします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-176">Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CancelAfter">
      <MemberSignature Language="C#" Value="public void CancelAfter (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAfter(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAfter (millisecondsDelay As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAfter(int millisecondsDelay);" />
      <MemberSignature Language="F#" Value="member this.CancelAfter : int -&gt; unit" Usage="cancellationTokenSource.CancelAfter millisecondsDelay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="84bc5-177">この <see cref="T:System.Threading.CancellationTokenSource" /> を取り消すまで待機する時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-177">The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="84bc5-178">指定したミリ秒数が経過した後の、この <see cref="T:System.Threading.CancellationTokenSource" /> の取り消し操作をスケジュールします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-178">Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource" /> after the specified number of milliseconds.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84bc5-179">カウント ダウン、`millisecondsDelay`この呼び出し中に起動します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-179">The countdown for the `millisecondsDelay` starts during this call.</span></span> <span data-ttu-id="84bc5-180">ときに、`millisecondsDelay`経過すると、この<xref:System.Threading.CancellationTokenSource>既にキャンセルされていない場合、キャンセルします。</span><span class="sxs-lookup"><span data-stu-id="84bc5-180">When the `millisecondsDelay` expires, this <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.</span></span>  
  
 <span data-ttu-id="84bc5-181">CancelAfter 後続の呼び出しはリセット、`millisecondsDelay`この<xref:System.Threading.CancellationTokenSource>既にキャンセルされていない場合は、します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-181">Subsequent calls to CancelAfter will reset the `millisecondsDelay` for this <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="84bc5-182">この <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されているきにスローされる例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-182">The exception thrown when this <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="84bc5-183">
            <paramref name="millisecondsDelay" /> が -1 より小さいときにスローされる例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-183">The exception thrown when <paramref name="millisecondsDelay" /> is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelAfter">
      <MemberSignature Language="C#" Value="public void CancelAfter (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAfter(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAfter (delay As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAfter(TimeSpan delay);" />
      <MemberSignature Language="F#" Value="member this.CancelAfter : TimeSpan -&gt; unit" Usage="cancellationTokenSource.CancelAfter delay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="84bc5-184">この <see cref="T:System.Threading.CancellationTokenSource" /> を取り消すまで待機する時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-184">The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="84bc5-185">指定した期間が経過した後の、この <see cref="T:System.Threading.CancellationTokenSource" /> の取り消し操作を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-185">Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource" /> after the specified time span.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="84bc5-186">この <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されているきにスローされる例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-186">The exception thrown when this <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="84bc5-187">
            <paramref name="delay" /> が -1 より小さいか、Int32.MaxValue より大きい場合にスローされる例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-187">The exception that is thrown when <paramref name="delay" /> is less than -1 or greater than Int32.MaxValue.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateLinkedTokenSource">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="84bc5-188">すべてのソース トークンが取り消された状態であるときに、取り消された状態になる <see cref="T:System.Threading.CancellationTokenSource" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-188">Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens are in the canceled state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateLinkedTokenSource">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationTokenSource CreateLinkedTokenSource (params System.Threading.CancellationToken[] tokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.CancellationTokenSource CreateLinkedTokenSource(valuetype System.Threading.CancellationToken[] tokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateLinkedTokenSource (ParamArray tokens As CancellationToken()) As CancellationTokenSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::CancellationTokenSource ^ CreateLinkedTokenSource(... cli::array &lt;System::Threading::CancellationToken&gt; ^ tokens);" />
      <MemberSignature Language="F#" Value="static member CreateLinkedTokenSource : System.Threading.CancellationToken[] -&gt; System.Threading.CancellationTokenSource" Usage="System.Threading.CancellationTokenSource.CreateLinkedTokenSource tokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokens" Type="System.Threading.CancellationToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tokens">
          <span data-ttu-id="84bc5-189">観察するためのキャンセル トークン インスタンスを含む配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-189">An array that contains the cancellation token instances to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="84bc5-190">指定された配列のすべてのソース トークンが取り消された状態であるときに、取り消された状態になる <see cref="T:System.Threading.CancellationTokenSource" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-190">Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="84bc5-191">ソース トークンにリンクされている <see cref="T:System.Threading.CancellationTokenSource" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-191">A <see cref="T:System.Threading.CancellationTokenSource" /> that is linked to the source tokens.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="84bc5-192">ソース トークンのいずれかに関連付けられている <see cref="T:System.Threading.CancellationTokenSource" /> は破棄されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-192">A <see cref="T:System.Threading.CancellationTokenSource" /> associated with one of the source tokens has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="84bc5-193">
            <paramref name="tokens" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-193">
              <paramref name="tokens" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="84bc5-194">
            <paramref name="tokens" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-194">
              <paramref name="tokens" /> is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="84bc5-195">キャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-195">Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="84bc5-196">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-196">Task Cancellation</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/6f4f3804-2ed7-41b4-a97a-6e32b93f6e05">
          <span data-ttu-id="84bc5-197">方法: 複数のキャンセル要求を待機する</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-197">How to: Listen for Multiple Cancellation Requests</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CreateLinkedTokenSource">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationTokenSource CreateLinkedTokenSource (System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.CancellationTokenSource CreateLinkedTokenSource(valuetype System.Threading.CancellationToken token1, valuetype System.Threading.CancellationToken token2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateLinkedTokenSource (token1 As CancellationToken, token2 As CancellationToken) As CancellationTokenSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::CancellationTokenSource ^ CreateLinkedTokenSource(System::Threading::CancellationToken token1, System::Threading::CancellationToken token2);" />
      <MemberSignature Language="F#" Value="static member CreateLinkedTokenSource : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; System.Threading.CancellationTokenSource" Usage="System.Threading.CancellationTokenSource.CreateLinkedTokenSource (token1, token2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token1" Type="System.Threading.CancellationToken" />
        <Parameter Name="token2" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="token1">
          <span data-ttu-id="84bc5-198">観察する最初のキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-198">The first cancellation token to observe.</span>
          </span>
        </param>
        <param name="token2">
          <span data-ttu-id="84bc5-199">観察する 2 番目のキャンセル トークン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-199">The second cancellation token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="84bc5-200">すべてのソース トークンが取り消された状態であるときに、取り消された状態になる <see cref="T:System.Threading.CancellationTokenSource" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-200">Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens are in the canceled state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="84bc5-201">ソース トークンにリンクされている <see cref="T:System.Threading.CancellationTokenSource" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-201">A <see cref="T:System.Threading.CancellationTokenSource" /> that is linked to the source tokens.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="84bc5-202">ソース トークンのいずれかに関連付けられている <see cref="T:System.Threading.CancellationTokenSource" /> は破棄されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-202">A <see cref="T:System.Threading.CancellationTokenSource" /> associated with one of the source tokens has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="84bc5-203">キャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-203">Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="84bc5-204">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-204">Task Cancellation</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/6f4f3804-2ed7-41b4-a97a-6e32b93f6e05">
          <span data-ttu-id="84bc5-205">方法: 複数のキャンセル要求を待機する</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-205">How to: Listen for Multiple Cancellation Requests</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="84bc5-206">
            <see cref="T:System.Threading.CancellationTokenSource" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-206">Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cancellationTokenSource.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="84bc5-207">
            <see cref="T:System.Threading.CancellationTokenSource" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-207">Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84bc5-208">`Dispose` を使い終わったら <xref:System.Threading.CancellationTokenSource> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-208">Call `Dispose` when you are finished using the <xref:System.Threading.CancellationTokenSource>.</span></span> <span data-ttu-id="84bc5-209">`Dispose` メソッドによって、<xref:System.Threading.CancellationTokenSource> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="84bc5-209">The `Dispose` method leaves the <xref:System.Threading.CancellationTokenSource> in an unusable state.</span></span> <span data-ttu-id="84bc5-210">呼び出した後`Dispose`へのすべての参照を解放する必要があります、<xref:System.Threading.CancellationTokenSource>ガベージ コレクターがメモリをクリアできるようにする、<xref:System.Threading.CancellationTokenSource>によって占有されていた。</span><span class="sxs-lookup"><span data-stu-id="84bc5-210">After calling `Dispose`, you must release all references to the <xref:System.Threading.CancellationTokenSource> so the garbage collector can reclaim the memory that the <xref:System.Threading.CancellationTokenSource> was occupying.</span></span>  
  
 <span data-ttu-id="84bc5-211">詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)します。</span><span class="sxs-lookup"><span data-stu-id="84bc5-211">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="84bc5-212">`Dispose` への最後の参照を解放する前に、必ず <xref:System.Threading.CancellationTokenSource> を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="84bc5-212">Always call `Dispose` before you release your last reference to the <xref:System.Threading.CancellationTokenSource>.</span></span> <span data-ttu-id="84bc5-213">そうしないと、ガベージ コレクターが <xref:System.Threading.CancellationTokenSource> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="84bc5-213">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CancellationTokenSource> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="cancellationTokenSource.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="84bc5-214">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-214">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="84bc5-215">
            <see cref="T:System.Threading.CancellationTokenSource" /> クラスによって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-215">Releases the unmanaged resources used by the <see cref="T:System.Threading.CancellationTokenSource" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationTokenSource.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationTokenSource.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="84bc5-216">この <see cref="T:System.Threading.CancellationTokenSource" /> に対して取り消しが要求されているかどうかを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-216">Gets whether cancellation has been requested for this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="84bc5-217">この <see cref="T:System.Threading.CancellationTokenSource" /> に対して取り消しが要求されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-217">
              <see langword="true" /> if cancellation has been requested for this <see cref="T:System.Threading.CancellationTokenSource" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84bc5-218">このプロパティを示すかどうか取り消しが要求されたこのトークンのソースのように呼び出しによりその<xref:System.Threading.CancellationTokenSource.Cancel%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="84bc5-218">This property indicates whether cancellation has been requested for this token source, such as due to a call to its <xref:System.Threading.CancellationTokenSource.Cancel%2A> method.</span></span>  
  
 <span data-ttu-id="84bc5-219">このプロパティを返す場合`true`取り消しが要求されていることのみ保証されます。</span><span class="sxs-lookup"><span data-stu-id="84bc5-219">If this property returns `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="84bc5-220">対応するトークンを使用して登録されているすべてのハンドラーの実行が完了したことも、キャンセル要求のすべての登録済みハンドラーへの伝達が完了したことは保証されません。</span><span class="sxs-lookup"><span data-stu-id="84bc5-220">It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="84bc5-221">追加の同期は、特に関連するオブジェクトを同時にキャンセルされている状況で必要になる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="84bc5-221">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="84bc5-222">キャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-222">Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="84bc5-223">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-223">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken Token" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationTokenSource.Token" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Token As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken Token { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.Token : System.Threading.CancellationToken" Usage="System.Threading.CancellationTokenSource.Token" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="84bc5-224">この <see cref="T:System.Threading.CancellationToken" /> に関連付けられている <see cref="T:System.Threading.CancellationTokenSource" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-224">Gets the <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="84bc5-225">この <see cref="T:System.Threading.CancellationToken" /> に関連付けられている <see cref="T:System.Threading.CancellationTokenSource" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-225">The <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="84bc5-226">トークンのソースは破棄されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-226">The token source has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="84bc5-227">キャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-227">Cancellation</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="84bc5-228">タスクのキャンセル</span>
          <span class="sxs-lookup">
            <span data-stu-id="84bc5-228">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>