<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SemaphoreSlim.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb72268af4ec18ef9780af942f18f0369318755e0b83.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">268af4ec18ef9780af942f18f0369318755e0b83</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Represents a lightweight alternative to <ph id="ph1">&lt;see cref="T:System.Threading.Semaphore" /&gt;</ph> that limits the number of threads that can access a resource or pool of resources concurrently.</source>
          <target state="translated">リソースまたはリソースのプールに同時にアクセスできるスレッドの数を制限する <ph id="ph1">&lt;see cref="T:System.Threading.Semaphore" /&gt;</ph> の軽量版を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Semaphores are of two types: local semaphores and named system semaphores.</source>
          <target state="translated">セマフォの 2 つの型である: ローカル セマフォおよび名前付きシステム セマフォです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The former is local to an app.</source>
          <target state="translated">前者は、アプリに対してローカルです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The latter is visible throughout the operating system and is suitable for inter-process synchronization.</source>
          <target state="translated">後者は、オペレーティング システム全体にわたって参照し、プロセス間の同期の適しています。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> is a lightweight alternative to the <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> class that doesn't use Windows kernel semaphores.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>軽量な代替手段、 <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> Windows カーネルのセマフォを使用しないクラスです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class doesn't support named system semaphores.</source>
          <target state="translated">異なり、<ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph>クラス、<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>クラスは、名前付きシステム セマフォをサポートしていません。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>You can use it as a local semaphore only.</source>
          <target state="translated">ローカル セマフォのみとして使用することができます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class is the recommended semaphore for synchronization within a single app.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>クラスは、1 つのアプリ内での同期の推奨されるセマフォです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>A lightweight semaphore controls access to a pool of resources that is local to your application.</source>
          <target state="translated">軽量セマフォは、アプリケーションをローカルであるリソースのプールへのアクセスを制御します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</source>
          <target state="translated">セマフォをインスタンス化するときは、同時に、セマフォに入ることができるスレッドの最大数を指定できます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>You also specify the initial number of threads that can enter the semaphore concurrently.</source>
          <target state="translated">また、セマフォを同時に入力できるスレッドの初期数を指定します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>This defines the semaphore's count.</source>
          <target state="translated">これは、セマフォのカウントを定義します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</source>
          <target state="translated">カウントがデクリメント、スレッドがセマフォに入るたびに、たびにインクリメントされ、スレッドがセマフォを解放します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>To enter the semaphore, a thread calls one of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> overloads.</source>
          <target state="translated">セマフォに入ると、するスレッドの 1 つが呼び出す、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>オーバー ロードします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>To release the semaphore, it calls one of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> overloads.</source>
          <target state="translated">呼び出しの 1 つのセマフォを解放する、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>オーバー ロードします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When the count reaches zero, subsequent calls to one of the <ph id="ph1">`Wait`</ph> methods block until other threads release the semaphore.</source>
          <target state="translated">カウントが 0、後続の呼び出しのいずれかに達したとき、<ph id="ph1">`Wait`</ph>メソッドは、他のスレッドがセマフォを解放するまでブロックします。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</source>
          <target state="translated">複数のスレッドがブロックされている場合があります順序は保証されません、FIFO や LIFO などを制御しているスレッドがセマフォに入るとします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The basic structure for code that uses a semaphore to protect resources is:</source>
          <target state="translated">リソースを保護する、セマフォを使用するコードの基本的な構造です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</source>
          <target state="translated">すべてのスレッドがセマフォを解放、ときにカウントが最大値で指定されて、セマフォが作成されたとき。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The semaphore's count is available from the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property.</source>
          <target state="translated">セマフォのカウントがから利用可能な<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class doesn't enforce thread or task identity on calls to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>クラスへの呼び出しでスレッドまたはタスクの id を強制しません、 <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>In addition, if the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29&gt;</ph> constructor is used to instantiate the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object, the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property can increase beyond the value set by the constructor.</source>
          <target state="translated">さらに場合、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29&gt;</ph>コンス トラクターがインスタンス化に使用、<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>オブジェクト、<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>プロパティは、コンス トラクターによって設定された値を超える増やすことができます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>It is the programmer's responsibility to ensure that calls to <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> methods are appropriately paired with calls to <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods.</source>
          <target state="translated">呼び出し、プログラマの責任を負うは<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>メソッドへの呼び出しが対応する適切に<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</source>
          <target state="translated">次の例では、3 つのスレッドの最大数と 0 個のスレッドの最初の数をセマフォを作成します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The example starts five tasks, all of which block waiting for the semaphore.</source>
          <target state="translated">例では、セマフォの待機をブロックの 5 つのタスクを開始します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The main thread calls the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</source>
          <target state="translated">メイン スレッドの呼び出し、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph>のオーバー ロードをその最大値は、セマフォに入るための 3 つのタスクは、セマフォのカウントを増やします。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Each time the semaphore is released, the previous semaphore count is displayed.</source>
          <target state="translated">セマフォが解放されるたびに、前のセマフォのカウントが表示されます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Console messages track semaphore use.</source>
          <target state="translated">コンソール メッセージ追跡セマフォを使用します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The simulated work interval is increased slightly for each thread to make the output easier to read.</source>
          <target state="translated">シミュレートされた動作の間隔は、各スレッドの出力を読みやすくするために少し増加します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of <ph id="ph2">&lt;see cref="M:System.Threading.SemaphoreSlim.Dispose" /&gt;</ph>, which must be used only when all other operations on the <ph id="ph3">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> have completed.</source>
          <target state="translated">すべてのパブリックおよびプロテクト メンバー<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>スレッド セーフでは、例外を除いて、複数のスレッドから同時に使用可能性があります<ph id="ph2">&lt;see cref="M:System.Threading.SemaphoreSlim.Dispose" /&gt;</ph>、これを使用する必要がされる場合にのみに対するその他のすべての操作、<ph id="ph3">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>が完了します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>The initial number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">同時に許可されるセマフォの要求の初期数。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class, specifying the initial number of requests that can be granted concurrently.</source>
          <target state="translated">同時に許可される要求の初期数を指定して、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>The <ph id="ph1">`initialCount`</ph> parameter defines the number of concurrent requests to enter the semaphore that can be granted.</source>
          <target state="translated"><ph id="ph1">`initialCount`</ph>パラメーターが許可されるセマフォに入るへの同時要求の数を定義します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>However, it doesn't define the maximum number of requests that can be granted concurrently.</source>
          <target state="translated">ただし、同時に許可できる要求の最大数が定義されていません。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>A   <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object instantiated by calling this constructor doesn't throw a <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> exception if a call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> method increases the value of the <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property beyond <ph id="ph5">`initialCount`</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>このコンス トラクターを呼び出すことによってインスタンス化されるオブジェクトの例外がスローされない、<ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph>例外への呼び出し、<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>メソッドの値が増加、<ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>を超えてプロパティ<ph id="ph5">`initialCount`</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>This occurs if there are more calls to <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods than there are to <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> methods.</source>
          <target state="translated">これをこれ以上の呼び出しがある場合に発生<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>よりメソッドが<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">許可されるセマフォに入るへの同時要求の最大数を設定するには、呼び出し、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>The initial number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">同時に許可されるセマフォの要求の初期数。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>The maximum number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">同時に許可されるセマフォの要求の最大数。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class, specifying the initial and maximum number of requests that can be granted concurrently.</source>
          <target state="translated">同時に許可される要求の初期数および最大数を指定して、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> is less than 0, or <ph id="ph2">&lt;paramref name="initialCount" /&gt;</ph> is greater than <ph id="ph3">&lt;paramref name="maxCount" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="maxCount" /&gt;</ph> is equal to or less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> が 0 より小さいか、<ph id="ph2">&lt;paramref name="initialCount" /&gt;</ph> が <ph id="ph3">&lt;paramref name="maxCount" /&gt;</ph> を超えているか、または <ph id="ph4">&lt;paramref name="maxCount" /&gt;</ph> が 0 以下です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that can be used to wait on the semaphore.</source>
          <target state="translated">セマフォの待機に使用できる <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that can be used to wait on the semaphore.</source>
          <target state="translated">セマフォの待機に使用できる <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</source>
          <target state="translated">同じ待機ハンドルを使用して他のカーネル ベースの同期オブジェクトと SemaphoreSlim に待機する必要がある場合にのみ、このプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>A successful wait on the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A&gt;</ph> does not imply a successful wait on the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> itself, nor does it decrement the semaphore's count.</source>
          <target state="translated">正常に実行の待機、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A&gt;</ph>に成功した待機とは限りません、<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>自体、セマフォのカウントがデクリメントされることもできます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>After the available wait handle is signaled, you should wait on the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> specifically.</source>
          <target state="translated">使用可能な待機ハンドルがシグナル状態と後、待機する必要があります、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>具体的にします。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> は破棄されています。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>Gets the number of remaining threads that can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> オブジェクトに入る、残りのスレッド数を取得します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>The number of remaining threads that can enter the semaphore.</source>
          <target state="translated">セマフォに入る、残りのスレッド数。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>The initial value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is set by the call to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">初期値、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>プロパティへの呼び出しで設定されて、<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%2A&gt;</ph>クラスのコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>It is decremented by each call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method, and incremented by each call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> method.</source>
          <target state="translated">呼び出しごとに減少、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>メソッドを呼び出すたびに 1 を足した、<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> クラスの現在のインスタンスによって使用されているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> を使い終わったら <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> メソッドによって、<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> は使用不可の状態になります。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> was occupying.</source>
          <target state="translated">呼び出した後<ph id="ph1">`Dispose`</ph>へのすべての参照を解放する必要があります、<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>ガベージ コレクターがメモリを再利用できるようにする、<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>占有されていた。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>と<bpt id="p2">[</bpt>Dispose メソッドの実装<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> への最後の参照を解放する前に、必ず <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> を呼び出してください。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">そうしないと、ガベージ コレクターが <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> オブジェクトの <ph id="ph2">`Finalize`</ph> メソッドを呼び出すまで、使用されているリソースは解放されません。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> が使用しているアンマネージ リソースを解放します。オプションとして、マネージ リソースを解放することもできます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.</source>
          <target state="translated">ほとんどのメンバーとは異なり<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>、<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Dispose%2A&gt;</ph>スレッド セーフではないと、このインスタンスの他のメンバーと同時に使用できません。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> のオブジェクトを解放します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object once.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> のオブジェクトを一度解放します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The previous count of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> の前のカウント。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>A call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release&gt;</ph> method increments the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">呼び出し、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release&gt;</ph>メソッド刻み、<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>によって 1 つのプロパティです。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method to enter the semaphore.</source>
          <target state="translated">場合の値、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>このメソッドが呼び出される前に、プロパティが 0 の場合、メソッドは、1 つのスレッドまたはタスクへの呼び出しによってブロックされているにもできます、<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>セマフォに入るためのメソッドです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The current instance has already been disposed.</source>
          <target state="translated">現在のインスタンスは既に破棄されています。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has already reached its maximum size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> は、既にその最大サイズに達しました。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The number of times to exit the semaphore.</source>
          <target state="translated">セマフォから出る回数。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object a specified number of times.</source>
          <target state="translated">指定された回数だけ、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> オブジェクトを解放します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The previous count of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> の前のカウント。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>A call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> method increments the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by <ph id="ph3">`releaseCount`</ph>.</source>
          <target state="translated">呼び出し、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph>メソッド刻み、<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>によってプロパティ<ph id="ph3">`releaseCount`</ph>です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is zero before this method is called, the method also allows <ph id="ph2">`releaseCount`</ph> threads or tasks blocked by a call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method to enter the semaphore.</source>
          <target state="translated">場合の値、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>プロパティがこのメソッドが呼び出される前に 0 の場合、メソッドもにより、<ph id="ph2">`releaseCount`</ph>スレッドまたはタスクへの呼び出しによってブロックされている、<ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>または<ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>セマフォに入るためのメソッドです。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">現在のインスタンスは既に破棄されています。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="releaseCount" /&gt;</ph> is less than 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="releaseCount" /&gt;</ph> が 1 未満です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has already reached its maximum size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> は、既にその最大サイズに達しました。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に入れるようになるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に入れるようになるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">スレッドまたはタスクをセマフォに入ることがある場合、デクリメント、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>によって 1 つのプロパティです。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>The current instance has already been disposed.</source>
          <target state="translated">現在のインスタンスは既に破棄されています。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">待機するミリ秒数です。<ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) の場合は無期限に待機します。または、ゼロの場合は待機ハンドルの状態をテストしてすぐに返します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer that specifies the timeout.</source>
          <target state="translated">タイムアウト値を 32 ビット符号付き整数で指定して、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に入れるようになるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のスレッドが <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に正常に入った場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">タイムアウトは、-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">タイムアウト値は 0 ミリ秒に設定されている場合、メソッドをブロックしません。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">待機ハンドルの状態をテストし、直ちに返されます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">スレッドまたはタスクをセマフォに入ることがある場合、デクリメント、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>によって 1 つのプロパティです。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If a thread or task is blocked when calling <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29&gt;</ph> and the timeout interval specified by <ph id="ph2">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">呼び出すときに、スレッドまたはタスクがブロックされた場合<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29&gt;</ph>によって指定されたタイムアウト間隔と<ph id="ph2">`millisecondsTimeout`</ph>有効期限が切れます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">スレッドまたはタスクは、セマフォに入るしません。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>プロパティは、デクリメントします。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> が -1 (無制限のタイムアウト) 以外の負数です。または、タイムアウトが <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">観察する <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> トークン。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> を観察すると同時に、<ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> に入れるようになるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">スレッドまたはタスクをセマフォに入ることがある場合、デクリメント、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>によって 1 つのプロパティです。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the thread or task doesn't enter the semaphore, and the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">場合<ph id="ph1">`cancellationToken`</ph>が取り消された場合、スレッドまたはタスクがセマフォに入ると、および<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>プロパティは、デクリメントします。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>Instead, the method throws an <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">メソッドの代わりに、スロー、<ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> が取り消されました。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">現在のインスタンスは既に破棄されています。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> を作成した <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> は、待機するミリ秒数を表します。<ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> が -1 ミリ秒の場合は、無期限に待機します。<ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> が 0 ミリ秒の場合は、待機ハンドルをテストしてすぐに返します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to specify the timeout.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> を使用してタイムアウトを指定し、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に入れるようになるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のスレッドが <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に正常に入った場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">タイムアウトは、-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">タイムアウト値は 0 ミリ秒に設定されている場合、メソッドをブロックしません。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">待機ハンドルの状態をテストし、直ちに返されます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">スレッドまたはタスクをセマフォに入ることがある場合、デクリメント、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>によって 1 つのプロパティです。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If a thread or task is blocked when calling <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29&gt;</ph> and the timeout interval specified by <ph id="ph2">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">呼び出すときに、スレッドまたはタスクがブロックされた場合<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29&gt;</ph>によって指定されたタイムアウト間隔と<ph id="ph2">`millisecondsTimeout`</ph>有効期限が切れます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">スレッドまたはタスクは、セマフォに入るしません。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>プロパティは、デクリメントします。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> が -1 (無制限のタイムアウト) 以外の負数です。または、タイムアウトが <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The semaphoreSlim instance has been disposed <ph id="ph1">&lt;paramref name="." /&gt;</ph></source>
          <target state="translated">semaphoreSlim インスタンスが破棄されました。<ph id="ph1">&lt;paramref name="." /&gt;</ph></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">待機するミリ秒数です。<ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) の場合は無期限に待機します。または、ゼロの場合は待機ハンドルの状態をテストしてすぐに返します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">観察する <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer that specifies the timeout, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> を観察すると同時に、タイムアウト値を 32 ビット符号付き整数で指定して、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に入れるようになるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のスレッドが <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に正常に入った場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">タイムアウトは、-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">タイムアウト値は 0 ミリ秒に設定されている場合、メソッドをブロックしません。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">待機ハンドルの状態をテストし、直ちに返されます。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">スレッドまたはタスクをセマフォに入ることがある場合、デクリメント、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>によって 1 つのプロパティです。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, or if a thread or task is blocked when calling <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> and the timeout interval specified by <ph id="ph3">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">場合<ph id="ph1">`cancellationToken`</ph>が取り消されると呼び出し時に、スレッドまたはタスクがブロックされた場合または<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph>によって指定されたタイムアウト間隔と<ph id="ph3">`millisecondsTimeout`</ph>有効期限が切れます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">スレッドまたはタスクは、セマフォに入るしません。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>プロパティは、デクリメントします。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the method throws an   <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">場合<ph id="ph1">`cancellationToken`</ph>が取り消された場合、メソッドをスロー、<ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> が取り消されました。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> が -1 (無制限のタイムアウト) 以外の負数です。または、タイムアウトが <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> instance has been disposed, or the <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph3">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> インスタンスが破棄されたか、<ph id="ph3">&lt;paramref name="cancellationToken" /&gt;</ph> を作成した <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> が破棄されました。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> は、待機するミリ秒数を表します。<ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> が -1 ミリ秒の場合は、無期限に待機します。<ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> が 0 ミリ秒の場合は、待機ハンドルをテストしてすぐに返します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">観察する <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the timeout, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> を観察すると同時に、タイムアウトを指定する <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> を使用して、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に入れるようになるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のスレッドが <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に正常に入った場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">タイムアウトは、-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">タイムアウト値は 0 ミリ秒に設定されている場合、メソッドをブロックしません。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">待機ハンドルの状態をテストし、直ちに返されます。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">スレッドまたはタスクをセマフォに入ることがある場合、デクリメント、<ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>によって 1 つのプロパティです。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, or if a thread or task is blocked when calling <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> and the timeout interval specified by <ph id="ph3">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">場合<ph id="ph1">`cancellationToken`</ph>が取り消されると呼び出し時に、スレッドまたはタスクがブロックされた場合または<ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph>によって指定されたタイムアウト間隔と<ph id="ph3">`millisecondsTimeout`</ph>有効期限が切れます。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">スレッドまたはタスクは、セマフォに入るしません。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph>プロパティは、デクリメントします。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the method throws an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">場合<ph id="ph1">`cancellationToken`</ph>が取り消された場合、メソッドをスロー、<ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> が取り消されました。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> が -1 (無制限のタイムアウト) 以外の負数です。または、タイムアウトが <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The semaphoreSlim instance has been disposed <ph id="ph1">&lt;paramref name="." /&gt;</ph><ph id="ph2">&lt;paramref name="-or-" /&gt;</ph></source>
          <target state="translated">semaphoreSlim インスタンスが破棄されました。<ph id="ph1">&lt;paramref name="." /&gt;</ph><ph id="ph2">&lt;paramref name="-or-" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> を作成した <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に移行するために非同期に待機します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に移行するために非同期に待機します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync">
          <source>A task that will complete when the semaphore has been entered.</source>
          <target state="translated">セマフォに入っているときに完了するタスク。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">待機するミリ秒数です。<ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) の場合は無期限に待機します。または、ゼロの場合はハンドルの状態をテストしてすぐに返します。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer to measure the time interval.</source>
          <target state="translated">32 ビット符号付き整数を使用して時間間隔を測定しながら、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に移行するために非同期に待機します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のスレッドが正常に <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> を入力した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> で完了するタスク。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">タイムアウトは、-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">タイムアウト値は 0 ミリ秒に設定されている場合、メソッドをブロックしません。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">待機ハンドルの状態をテストし、直ちに返されます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">現在のインスタンスは既に破棄されています。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> が -1 (無制限のタイムアウト) 以外の負数です。または、タイムアウトが <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">観察する <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> トークン。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> を観察すると同時に、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に移行するために非同期に待機します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>A task that will complete when the semaphore has been entered.</source>
          <target state="translated">セマフォに入っているときに完了するタスク。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">現在のインスタンスは既に破棄されています。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> が取り消されました。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> は、待機するミリ秒数を表します。<ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> が -1 ミリ秒の場合は、無期限に待機します。<ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> が 0 ミリ秒の場合は、待機ハンドルをテストしてすぐに返します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> を使用して時間間隔を測定しながら、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に移行するために非同期に待機します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のスレッドが正常に <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> を入力した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> で完了するタスク。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">タイムアウトは、-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">タイムアウト値は 0 ミリ秒に設定されている場合、メソッドをブロックしません。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">待機ハンドルの状態をテストし、直ちに返されます。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">現在のインスタンスは既に破棄されています。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> が -1 (無制限のタイムアウト) 以外の負数です。または、タイムアウトが <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">待機するミリ秒数です。<ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) の場合は無期限に待機します。または、ゼロの場合はハンドルの状態をテストしてすぐに返します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">観察する <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer to measure the time interval, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">32 ビット符号付き整数を使用して時間間隔を測定しながら、<ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> を観察すると同時に、<ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> に移行するために非同期に待機します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のスレッドが正常に <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> を入力した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> で完了するタスク。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">タイムアウトは、-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">タイムアウト値は 0 ミリ秒に設定されている場合、メソッドをブロックしません。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">待機ハンドルの状態をテストし、直ちに返されます。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> が -1 (無制限のタイムアウト) 以外の数です。または、タイムアウトが <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">現在のインスタンスは既に破棄されています。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> が取り消されました。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> は、待機するミリ秒数を表します。<ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> が -1 ミリ秒の場合は、無期限に待機します。<ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> が 0 ミリ秒の場合は、待機ハンドルをテストしてすぐに返します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">観察する <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> トークン。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> を使用して時間間隔を測定しながら、<ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> を観察すると同時に、<ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> に移行するために非同期に待機します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のスレッドが正常に <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> を入力した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> で完了するタスク。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">タイムアウトは、-1 ミリ秒に設定されている場合、メソッドは無期限に待機します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">タイムアウト値は 0 ミリ秒に設定されている場合、メソッドをブロックしません。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">待機ハンドルの状態をテストし、直ちに返されます。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> が -1 (無制限のタイムアウト) 以外の負数です。または、タイムアウトが <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> が取り消されました。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>