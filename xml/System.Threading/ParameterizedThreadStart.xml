<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParameterizedThreadStart.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51f89ab27a5d48225389ff0ad41c3bbc265121c09.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f89ab27a5d48225389ff0ad41c3bbc265121c09</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ParameterizedThreadStart">
          <source>An object that contains data for the thread procedure.</source>
          <target state="translated">スレッド プロシージャ用のデータを含むオブジェクト。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Represents the method that executes on a <ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Thread" /&gt;</ph> で実行するメソッドを表します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>When a managed thread is created, the method that executes on the thread is represented by:</source>
          <target state="translated">マネージ スレッドが作成されると、スレッドで実行するメソッドとして表されます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> delegate that is passed to the <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>デリゲートに渡される、<ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Any method that has no parameters and that returns <ph id="ph1">`void`</ph> in C# or is a <ph id="ph2">`Sub`</ph> procedure in Visual Basic can represent the delegate.</source>
          <target state="translated">任意のメソッド パラメーターを持たずを返す<ph id="ph1">`void`</ph>(C#) または、 <ph id="ph2">`Sub`</ph> Visual Basic のプロシージャは、デリゲートを表すことができます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate that is passed to the <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>デリゲートに渡される、<ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Any method that has a single parameter of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</source>
          <target state="translated">型の 1 つのパラメーターを持つ任意のメソッド<ph id="ph1">&lt;xref:System.Object&gt;</ph>し、c# では、void を返しますまたは、Visual Basic では Sub プロシージャは、デリゲートを表すことができます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The thread does not begin executing until the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph> method is called.</source>
          <target state="translated">スレッドがまで実行を開始していない、<ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>または<ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>スレッドでデリゲートが呼び出され、デリゲートによって表されるメソッドの最初の行で実行を開始します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>In the case of the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate, the object that is passed to the <ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29&gt;</ph> method is passed to the delegate.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>デリゲートに渡されるオブジェクト、<ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29&gt;</ph>メソッドは、デリゲートに渡されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Visual Basic and C# users can omit the <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate constructor when creating a thread.</source>
          <target state="translated">Visual Basic および c# のユーザーを省略できます、<ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph>または<ph id="ph2">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>スレッドを作成するときに、デリゲート コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>In Visual Basic, use the <ph id="ph1">`AddressOf`</ph> operator when passing your method to the <ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%2A&gt;</ph> constructor; for example, <ph id="ph3">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.</source>
          <target state="translated">Visual Basic を使用して、<ph id="ph1">`AddressOf`</ph>演算子が、メソッドに渡すときに、<ph id="ph2">&lt;xref:System.Threading.Thread.%23ctor%2A&gt;</ph>コンス トラクター。 たとえば、<ph id="ph3">`Dim t As New Thread(AddressOf ThreadProc)`</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>In C#, simply specify the name of the thread procedure.</source>
          <target state="translated">C# の場合は、単にスレッド プロシージャの名前を指定します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The compiler selects the correct delegate constructor.</source>
          <target state="translated">コンパイラは、適切なデリゲート コンス トラクターを選択します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</source>
          <target state="translated">作成するときに、<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>インスタンス メソッドを C++ では、コンス トラクターの最初のパラメーターは、インスタンス変数を委任します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>For a static method, the first parameter of the constructor is zero.</source>
          <target state="translated">静的メソッドは、コンス トラクターの最初のパラメーターは 0 です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</source>
          <target state="translated">静的メソッドでは、デリゲート コンス トラクターには、1 つだけのパラメーターが必要です。 クラス名で修飾して、コールバック メソッドのアドレス。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate and the <ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <ph id="ph3">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>委任と<ph id="ph2">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>メソッドのオーバー ロードしやすいようにデータをスレッド プロシージャに渡すが、この手法はタイプ セーフであるに任意のオブジェクトを渡すことがあるため<ph id="ph3">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</source>
          <target state="translated">データをスレッド プロシージャに渡すより堅牢な方法は、ワーカーのオブジェクトをスレッド プロシージャと、データ フィールドの両方にです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Threads and Passing Data at Start Time<ept id="p1">](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>スレッドの作成と開始時にデータを渡す<ept id="p1">](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate supports only a single parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>デリゲートは、1 つのパラメーターのみをサポートしています。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>You can pass multiple data items to the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> by making that parameter one of the following:</source>
          <target state="translated">複数のデータ項目を渡すことができます、<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>させて、次のいずれかのパラメーター。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>An array.</source>
          <target state="translated">配列。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A collection type, if all of the data items are of the same type.</source>
          <target state="translated">コレクション型の場合、同じ種類のすべてのデータ項目の場合。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>A tuple type, such as <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> or <ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph>.</source>
          <target state="translated">組などの入力、<ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph>または<ph id="ph2">&lt;xref:System.Tuple%604&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The following code example uses a <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate to execute a static method and an instance method.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>静的メソッドとインスタンス メソッドを実行するデリゲート。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The first <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate is represented by the static <ph id="ph2">`DoWork`</ph> method and the second is represented by the instance <ph id="ph3">`DoMoreWork`</ph> method.</source>
          <target state="translated">最初の<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>デリゲートは、静的で表される<ph id="ph2">`DoWork`</ph>メソッドと、2 つ目は、インスタンスによって表される<ph id="ph3">`DoMoreWork`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Both methods match the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate signature; that is, they have a single parameter of type <ph id="ph2">&lt;xref:System.Object&gt;</ph> and don't return a value.</source>
          <target state="translated">両方のメソッドと一致、<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>デリゲートのシグネチャです。 つまり、型の 1 つのパラメーターがある<ph id="ph2">&lt;xref:System.Object&gt;</ph>し、値を返しません。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>The Visual Basic and C# compilers infer the <ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate from the signatures of the <ph id="ph2">`DoWork`</ph> and <ph id="ph3">`DoMoreWork`</ph> methods, and call the correct constructor.</source>
          <target state="translated">Visual Basic と c# コンパイラが推論、<ph id="ph1">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph>デリゲートのシグネチャから、<ph id="ph2">`DoWork`</ph>と<ph id="ph3">`DoMoreWork`</ph>メソッド、および正しいコンス トラクターの呼び出しです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ParameterizedThreadStart">
          <source>Thus, there is no explicit constructor call in the code.</source>
          <target state="translated">したがって、コードで明示的なコンス トラクターの呼び出しではありません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>