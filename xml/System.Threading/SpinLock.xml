<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SpinLock.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb72f5bcd330020fac61054fec09791305e50bf0a619.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5bcd330020fac61054fec09791305e50bf0a619</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.SpinLock">
          <source>Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</source>
          <target state="translated">ロックが使用可能になるまで繰り返しチェックするループ内で、ロックを取得しようとするスレッドが待機する相互排他ロック プリミティブを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>For an example of how to use a Spin Lock, see <bpt id="p1">[</bpt>How to: Use SpinLock for Low-Level Synchronization<ept id="p1">](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md)</ept>.</source>
          <target state="translated">スピン ロックを使用する方法の例は、次を参照してください。<bpt id="p1">[</bpt>する方法: の低レベルの同期を使用してスピンロック<ept id="p1">](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>Spin locks can be used for leaf-level locks where the object allocation implied by using a <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>, in size or due to garbage collection pressure, is overly expensive.</source>
          <target state="translated">スピンロック使用できるリーフ レベルのロックを使用してオブジェクトの割り当てが含まれる、<ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>サイズ、またはガベージ コレクションの不足のためは非常に高コストです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>A spin lock can be useful in to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</source>
          <target state="translated">スピンロックが; ブロックされないようにするに役に立ちますただし、膨大な量のブロックの場合は、過剰な回転のためのスピン ロックを使用可能性があります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</source>
          <target state="translated">回転とロックは、粒度の細かい (たとえば、リンク リスト内のノードごとのロック) の数が多いとロックの保持時間は常に非常に短いと役に立つことはできます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>In general, while holding a spin lock, one should avoid any of these actions:</source>
          <target state="translated">一般に、スピン ロックを保持しているときに 1 つ避ける必要があります、これらの操作。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>blocking,</source>
          <target state="translated">ブロックします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>calling anything that itself may block,</source>
          <target state="translated">何かの呼び出しを妨げる可能性があります、</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>holding more than one spin lock at once,</source>
          <target state="translated">一度に 1 つ以上のスピン ロックを保持しています。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>making dynamically dispatched calls (interface and virtuals),</source>
          <target state="translated">動的にディスパッチされる (インターフェイスおよび仮想メソッド) の呼び出し</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>making statically dispatched calls into any code one doesn't own, or</source>
          <target state="translated">1 つ所有していない、すべてのコードに呼び出しをディスパッチ静的にするか、</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>allocating memory.</source>
          <target state="translated">メモリを割り当てています。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> should only be used after you have been determined that doing so will improve an application's performance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> 行うのでパフォーマンスが向上アプリケーションの決定された後でのみ使用する必要があります。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>It is also important to note that <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> is a value type, for performance reasons.</source>
          <target state="translated">重要な点はも<ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>パフォーマンス上の理由の値の型は、します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>For this reason, you must be very careful not to accidentally copy a <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</source>
          <target state="translated">このため、非常にように注意してくださいに誤ってコピーしない、<ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>インスタンス、2 つのインスタンス (元およびコピー) の場合し、別の完全に独立して、アプリケーションの不適切な動作につながる可能性があります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>If a <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> instance must be passed around, it should be passed by reference rather than by value.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>の周囲のインスタンスを渡す必要があります、値ではなく、参照渡しで渡す必要があります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>Do not store <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> instances in readonly fields.</source>
          <target state="translated">保存しない<ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>読み取り専用フィールド内のインスタンス。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>:</source>
          <target state="translated">次の例を使用する方法を示しています、 <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>All members of <ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> are thread-safe and may be used from multiple threads concurrently.</source>
          <target state="translated">すべてのメンバー<ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph>スレッド セーフでは、複数のスレッドから同時に使用することがあります。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>Whether to capture and use thread IDs for debugging purposes.</source>
          <target state="translated">デバッグのためにスレッド ID をキャプチャして使用するかどうか。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> structure with the option to track thread IDs to improve debugging.</source>
          <target state="translated">デバッグを向上させるためにスレッド ID を追跡するオプションを使用して、<ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> 構造体の新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>The default constructor for <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> tracks thread ownership.</source>
          <target state="translated">既定のコンス トラクター<ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>トラックが所有権をスレッドです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>The following example demonstrates how a SpinLock may be used.</source>
          <target state="translated">次の例では、スピンロックが使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">ロックが取得された場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated">このメソッドを呼び出す前に、<bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> を false に初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">メソッド呼び出し内で例外が発生した場合でも、<ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> を確実に確認して、ロックが取得されたかどうかを判断できるような信頼性の高い方法で、ロックを取得します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> 再入不可能なロックは、スレッドがロックを保持している場合は、ことを意味、ロックを再入力することはできません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>If thread ownership tracking is enabled (whether it's enabled is available through <ph id="ph1">&lt;xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A&gt;</ph>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</source>
          <target state="translated">スレッドの所有権の追跡が有効になっている場合 (有効になっているかどうかはから利用できる<ph id="ph1">&lt;xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A&gt;</ph>)、スレッドが既に保持しているロックを再入力しようとするとき、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</source>
          <target state="translated">ただし、スレッドの所有権の追跡が無効になっている場合を既に保持されているロックを入力しようとすると、デッドロックが発生します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>If you call <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> without having first called <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> the internal state of the <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> can become corrupted.</source>
          <target state="translated">呼び出す場合<ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph>最初に呼び出されたことがなく<ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>の内部状態、<ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph>破損することができます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling Enter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> 引数は、Enter を呼び出す前に false に初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">スレッドの所有権の追跡が有効で、現在のスレッドは既にこのロックを取得しています。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Threading.SpinLock">
          <source>Releases the lock.</source>
          <target state="translated">ロックを解放します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit">
          <source>Releases the lock.</source>
          <target state="translated">ロックを解放します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit">
          <source>The default overload of <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> provides the same behavior as if calling <ph id="ph2">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> using true as the argument.</source>
          <target state="translated">既定のオーバー ロード<ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph>を呼び出す場合と同じ動作を提供<ph id="ph2">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph>引数として true を使用します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit">
          <source>If you call <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> without having first called <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> the internal state of the <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> can become corrupted.</source>
          <target state="translated">呼び出す場合<ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph>最初に呼び出されたことがなく<ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>の内部状態、<ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph>破損することができます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit">
          <source>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</source>
          <target state="translated">スレッドの所有権の追跡が有効で、現在のスレッドはこのロックの所有者ではありません。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</source>
          <target state="translated">終了操作を他のスレッドに直ちに発行するためにメモリ フェンスを発行する必要があるかどうかを示すブール値。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>Releases the lock.</source>
          <target state="translated">ロックを解放します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> with the <ph id="ph2">`useMemoryBarrier`</ph> argument set to true will improve the fairness of the lock at the expense of some performance.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph>で、<ph id="ph2">`useMemoryBarrier`</ph>引数が true に設定するにはいくつかのパフォーマンスを犠牲にしてロックの公平性が向上します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>The default <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> overload behaves as if specifying true for <ph id="ph2">`useMemoryBarrier`</ph>.</source>
          <target state="translated">既定値<ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph>に対して true を指定する場合のようにオーバー ロードが動作<ph id="ph2">`useMemoryBarrier`</ph>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>If you call <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> without having first called <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> the internal state of the <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> can become corrupted.</source>
          <target state="translated">呼び出す場合<ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph>最初に呼び出されたことがなく<ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>の内部状態、<ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph>破損することができます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</source>
          <target state="translated">スレッドの所有権の追跡が有効で、現在のスレッドはこのロックの所有者ではありません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsHeld">
          <source>Gets whether the lock is currently held by any thread.</source>
          <target state="translated">ロックが現在いずれかのスレッドによって保持されているかどうかを取得します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeld">
          <source>true if the lock is currently held by any thread; otherwise false.</source>
          <target state="translated">ロックが現在いずれかのスレッドによって保持されている場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>Gets whether the lock is held by the current thread.</source>
          <target state="translated">ロックが現在のスレッドによって保持されているかどうかを取得します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>true if the lock is held by the current thread; otherwise false.</source>
          <target state="translated">ロックが現在のスレッドによって保持されている場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</source>
          <target state="translated">ロックは、所有者のスレッドを追跡するために初期化が、これは、現在のスレッドによってロックが取得されたかどうか返します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>It is invalid to use this property when the lock was initialized to not track thread ownership.</source>
          <target state="translated">ロックがないスレッドの所有権を追跡するために初期化されたときに、このプロパティを使用して有効ではありません。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>Thread ownership tracking is disabled.</source>
          <target state="translated">スレッドの所有権の追跡が無効です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
          <source>Gets whether thread ownership tracking is enabled for this instance.</source>
          <target state="translated">このインスタンスに対してスレッド所有権の追跡が有効になっているかどうかを取得します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
          <source>true if thread ownership tracking is enabled for this instance; otherwise false.</source>
          <target state="translated">このインスタンスに対してスレッド所有権の追跡が有効になっている場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Threading.SpinLock">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">メソッド呼び出し内で例外が発生した場合でも、<ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> を確実に確認して、ロックが取得されたかどうかを判断できるような信頼性の高い方法で、ロックの取得を試みます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">ロックが取得された場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated">このメソッドを呼び出す前に、<bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> を false に初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">メソッド呼び出し内で例外が発生した場合でも、<ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> を確実に確認して、ロックが取得されたかどうかを判断できるような信頼性の高い方法で、ロックの取得を試みます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>Unlike <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter will not block waiting for the lock to be available.</source>
          <target state="translated">異なり<ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>TryEnter で使用できるロックの待機はブロックされません。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</source>
          <target state="translated">TryEnter が呼び出されたときに、ロックが使用できない場合は、せずに戻るがすぐに、さらに回転します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling TryEnter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> 引数は、TryEnter を呼び出す前に false に初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">スレッドの所有権の追跡が有効で、現在のスレッドは既にこのロックを取得しています。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">待機するミリ秒数。無制限に待機する場合は <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1)。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">ロックが取得された場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated">このメソッドを呼び出す前に、<bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> を false に初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">メソッド呼び出し内で例外が発生した場合でも、<ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> を確実に確認して、ロックが取得されたかどうかを判断できるような信頼性の高い方法で、ロックの取得を試みます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>Unlike <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter will not block indefinitely waiting for the lock to be available.</source>
          <target state="translated">異なり<ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>TryEnter は無期限に使用するロックを待機をブロックされません。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>It will block until either the lock is available or until the <ph id="ph1">`millisecondsTimeout`</ph> has expired.</source>
          <target state="translated">ブロックまで、またはいずれか、ロックが使用できるまで、<ph id="ph1">`millisecondsTimeout`</ph>期限が切れました。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> は無限のタイムアウトを表す -1 以外の負の数です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling TryEnter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> 引数は、TryEnter を呼び出す前に false に初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">スレッドの所有権の追跡が有効で、現在のスレッドは既にこのロックを取得しています。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">待機するミリ秒数を表す <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>。無制限に待機する場合は、-1 ミリ秒を表す <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">ロックが取得された場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated">このメソッドを呼び出す前に、<bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> を false に初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">メソッド呼び出し内で例外が発生した場合でも、<ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> を確実に確認して、ロックが取得されたかどうかを判断できるような信頼性の高い方法で、ロックの取得を試みます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>Unlike <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter will not block indefinitely waiting for the lock to be available.</source>
          <target state="translated">異なり<ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>TryEnter は無期限に使用するロックを待機をブロックされません。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>It will block until either the lock is available or until the <ph id="ph1">`timeout`</ph> has expired.</source>
          <target state="translated">ブロックまで、またはいずれか、ロックが使用できるまで、<ph id="ph1">`timeout`</ph>期限が切れました。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。または、タイムアウトが <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> ミリ秒を超えています。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling TryEnter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> 引数は、TryEnter を呼び出す前に false に初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">スレッドの所有権の追跡が有効で、現在のスレッドは既にこのロックを取得しています。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>