<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ef7963b99d115f4a7f54e535f80eb38d73ee365" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56394153" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8c09f-101">通知時に手動でリセットする必要のあるスレッド同期イベントを表します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-101">Represents a thread synchronization event that, when signaled, must be reset manually.</span></span> <span data-ttu-id="8c09f-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="8c09f-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <span data-ttu-id="8c09f-103">使用する`ManualResetEvent`、 <xref:System.Threading.AutoResetEvent>、および<xref:System.Threading.EventWaitHandle>スレッドの相互作用 (またはスレッドがシグナル通知)。</span><span class="sxs-lookup"><span data-stu-id="8c09f-103">You use `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="8c09f-104">詳細については、次を参照してください。、[スレッドの相互作用、またはシグナル](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling)のセクション、[同期プリミティブの概要](~/docs/standard/threading/overview-of-synchronization-primitives.md)記事。</span><span class="sxs-lookup"><span data-stu-id="8c09f-104">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  

 <span data-ttu-id="8c09f-105">スレッドの前に完了する必要がありますをアクティビティの開始時にスレッドの続行を呼び出します[ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A)に`ManualResetEvent`非シグナル状態にします。</span><span class="sxs-lookup"><span data-stu-id="8c09f-105">When a thread begins an activity that must complete before other threads proceed, it calls [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="8c09f-106">このスレッドを制御するとして考えることができます、`ManualResetEvent`します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-106">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="8c09f-107">スレッドの呼び出しに[ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A)ブロック、シグナルを待機しています。</span><span class="sxs-lookup"><span data-stu-id="8c09f-107">Threads that call [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) block, awaiting the signal.</span></span> <span data-ttu-id="8c09f-108">呼び出しスレッドを制御するには、アクティビティが完了すると、 [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A)を待機しているスレッドが進むことができます。</span><span class="sxs-lookup"><span data-stu-id="8c09f-108">When the controlling thread completes the activity, it calls [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="8c09f-109">すべての待機中のスレッドが解放されます。</span><span class="sxs-lookup"><span data-stu-id="8c09f-109">All waiting threads are released.</span></span>  

 <span data-ttu-id="8c09f-110">シグナル状態されて`ManualResetEvent`呼び出すことによって手動でリセットされるまでシグナル状態のまま、<xref:System.Threading.EventWaitHandle.Reset>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8c09f-110">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset by calling the <xref:System.Threading.EventWaitHandle.Reset> method.</span></span> <span data-ttu-id="8c09f-111">つまり、呼び出し<xref:System.Threading.WaitHandle.WaitOne%2A>すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-111">That is, calls to <xref:System.Threading.WaitHandle.WaitOne%2A> return immediately.</span></span>  

 <span data-ttu-id="8c09f-112">初期状態を制御することができます、`ManualResetEvent`コンス トラクターにブール値を渡すことによって:`true`初期状態はシグナル状態になる場合と`false`それ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="8c09f-112">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled, and `false` otherwise.</span></span>  
 
 <span data-ttu-id="8c09f-113">`ManualResetEvent` 使用することができますも、 `static` <xref:System.Threading.WaitHandle.WaitAll%2A>と<xref:System.Threading.WaitHandle.WaitAny%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8c09f-113">`ManualResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="8c09f-114">.NET Framework version 2.0 以降<xref:System.Threading.ManualResetEvent>から派生した、<xref:System.Threading.EventWaitHandle>クラス。</span><span class="sxs-lookup"><span data-stu-id="8c09f-114">Beginning with the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="8c09f-115">A<xref:System.Threading.ManualResetEvent>は機能的に等価、<xref:System.Threading.EventWaitHandle>で作成された<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-115">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="8c09f-116">異なり、<xref:System.Threading.ManualResetEvent>クラス、<xref:System.Threading.EventWaitHandle>クラスが名前付きシステム同期イベントへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-116">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  

 <span data-ttu-id="8c09f-117">.NET Framework バージョン 4.0 では、以降では、<xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType>クラスは、軽量版を<xref:System.Threading.ManualResetEvent>します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-117">Beginning with the .NET Framework version 4.0, the <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> class is a lightweight alternative to <xref:System.Threading.ManualResetEvent>.</span></span>    
   
   
  
## Examples  
 <span data-ttu-id="8c09f-118">次の例でどのように<xref:System.Threading.ManualResetEvent>動作します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="8c09f-119">例の先頭で、<xref:System.Threading.ManualResetEvent>非シグナル状態で (つまり、`false`コンス トラクターに渡される)。</span><span class="sxs-lookup"><span data-stu-id="8c09f-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="8c09f-120">この例では、3 つを作成、ブロックのそれぞれにスレッド、<xref:System.Threading.ManualResetEvent>を呼び出してその<xref:System.Threading.WaitHandle.WaitOne%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8c09f-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="8c09f-121">押されたとき、 **Enter**キーの例では、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドで、次の 3 つのスレッドをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="8c09f-122">動作とは対照的、<xref:System.Threading.AutoResetEvent>クラスは、各リリース後に自動的にリセットしています。 一度に 1 つのスレッドを解放します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="8c09f-123">キーを押して、 **」と入力**キーがもう一度ことを示します、<xref:System.Threading.ManualResetEvent>までシグナル状態のままになります、<xref:System.Threading.EventWaitHandle.Reset%2A>メソッドが呼び出されます。この例では、2 つのスレッドを開始します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="8c09f-124">呼び出し時に、これらのスレッドがブロックされません、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドが完了する代わりに実行します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="8c09f-125">キーを押して、 **」と入力**キーを呼び出す例では、もう一度押すと、<xref:System.Threading.EventWaitHandle.Reset%2A>メソッドを呼び出すときにブロックする 1 つ以上のスレッドを開始して<xref:System.Threading.WaitHandle.WaitOne%2A>します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="8c09f-126">キーを押して、 **」と入力**キー 1 つの呼び出しの最後に<xref:System.Threading.EventWaitHandle.Set%2A>リリース、最後のスレッドと、プログラムを終了します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8c09f-127">このクラスは、スレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="8c09f-127">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8c09f-128">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8c09f-128">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="8c09f-129">同期プリミティブの概要</span><span class="sxs-lookup"><span data-stu-id="8c09f-129">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="8c09f-130">初期状態をシグナル状態に設定する場合は <see langword="true" />。初期状態を非シグナル状態に設定する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8c09f-130"><see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span></span></param>
        <summary><span data-ttu-id="8c09f-131">初期状態をシグナル状態に設定するかどうかを示す Boolean 型の値を使用して、<see cref="T:System.Threading.ManualResetEvent" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8c09f-131">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c09f-132">場合の初期状態を<xref:System.Threading.ManualResetEvent>通知される (を渡すことによって作成されている場合は、`true`の`initialState`)、スレッドを待機している、<xref:System.Threading.ManualResetEvent>はブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8c09f-132">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="8c09f-133">スレッドがブロックされるまで初期状態が非シグナル状態の場合は、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8c09f-133">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="8c09f-134">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="8c09f-134">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="8c09f-135">同期プリミティブの概要</span><span class="sxs-lookup"><span data-stu-id="8c09f-135">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c09f-136">イベントの状態を非シグナル状態に設定し、スレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="8c09f-136">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="8c09f-137">正常に操作できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8c09f-137"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c09f-138">イベントの状態をシグナル状態に設定し、待機している 1 つ以上のスレッドが進行できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8c09f-138">Sets the state of the event to signaled, which allows one or more waiting threads to proceed.</span></span></summary>
        <returns><span data-ttu-id="8c09f-139">正常に操作できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8c09f-139"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="8c09f-140">までシグナル状態のまま待機ハンドルに Set メソッドを呼び出す、<xref:System.Threading.ManualResetEvent.Reset>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8c09f-140">Calling the Set method leaves the wait handle in a signaled state until the <xref:System.Threading.ManualResetEvent.Reset> method is called.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>