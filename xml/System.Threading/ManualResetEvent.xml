<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3c19185907e45c5b7b80aae8627946c15d4efd4f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605907" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="48989-101">イベントが発生したことを、1 つ以上の待機中のスレッドに通知します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="48989-101">Notifies one or more waiting threads that an event has occurred.</span>
      </span>
      <span data-ttu-id="48989-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="48989-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="48989-103">.NET framework version 2.0 では、<xref:System.Threading.ManualResetEvent>から新しい派生<xref:System.Threading.EventWaitHandle>クラスです。</span><span class="sxs-lookup"><span data-stu-id="48989-103">In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="48989-104">A<xref:System.Threading.ManualResetEvent>は機能的に等価、<xref:System.Threading.EventWaitHandle>で作成された<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="48989-104">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="48989-105">異なり、<xref:System.Threading.ManualResetEvent>クラス、<xref:System.Threading.EventWaitHandle>クラスは、名前付きシステム同期イベントへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="48989-105">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="48989-106"><xref:System.Threading.ManualResetEvent> 通知することによって互いに通信するためにスレッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="48989-106"><xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="48989-107">通常、この通信は、他のスレッドを続行する前にあるスレッドが完了する必要がありますタスクに関するものです。</span><span class="sxs-lookup"><span data-stu-id="48989-107">Typically, this communication concerns a task which one thread must complete before other threads can proceed.</span></span>  
  
 <span data-ttu-id="48989-108">スレッドが続行、呼び出しスレッドが他の前に完了する必要がありますのあるアクティビティが開始されると<xref:System.Threading.EventWaitHandle.Reset%2A>に`ManualResetEvent`非シグナル状態にします。</span><span class="sxs-lookup"><span data-stu-id="48989-108">When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="48989-109">このスレッドはようなものの制御、`ManualResetEvent`です。</span><span class="sxs-lookup"><span data-stu-id="48989-109">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="48989-110">スレッドの呼び出しに<xref:System.Threading.WaitHandle.WaitOne%2A>上、`ManualResetEvent`はブロックすると、シグナルを待機しています。</span><span class="sxs-lookup"><span data-stu-id="48989-110">Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal.</span></span> <span data-ttu-id="48989-111">呼び出しスレッドを制御するには、アクティビティが完了すると、<xref:System.Threading.EventWaitHandle.Set%2A>を待機中のスレッドが続行できることを通知します。</span><span class="sxs-lookup"><span data-stu-id="48989-111">When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="48989-112">すべての待機中のスレッドが解放されます。</span><span class="sxs-lookup"><span data-stu-id="48989-112">All waiting threads are released.</span></span>  
  
 <span data-ttu-id="48989-113">シグナル状態されて`ManualResetEvent`は手動でリセットされるまで、シグナル状態のままです。</span><span class="sxs-lookup"><span data-stu-id="48989-113">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset.</span></span> <span data-ttu-id="48989-114">つまり、呼び出し`WaitOne`は直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="48989-114">That is, calls to `WaitOne` return immediately.</span></span>  
  
 <span data-ttu-id="48989-115">初期状態を制御することができます、`ManualResetEvent`ブール値をコンス トラクターに渡すことによって`true`初期状態が通知される場合と`false`それ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="48989-115">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="48989-116">`ManualResetEvent` 使用することもできます、 `static` <xref:System.Threading.WaitHandle.WaitAll%2A>と<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="48989-116">`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="48989-117">スレッド同期機構の詳細については、次を参照してください。 [ManualResetEvent と ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)概念説明のドキュメントです。</span><span class="sxs-lookup"><span data-stu-id="48989-117">For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="48989-118">次の例でどのように<xref:System.Threading.ManualResetEvent>動作します。</span><span class="sxs-lookup"><span data-stu-id="48989-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="48989-119">この例の先頭、 <xref:System.Threading.ManualResetEvent> unsignaled 状態で (つまり、`false`コンス トラクターに渡される)。</span><span class="sxs-lookup"><span data-stu-id="48989-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="48989-120">3 つの例は、作成スレッドでブロックされるので、<xref:System.Threading.ManualResetEvent>を呼び出してその<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="48989-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="48989-121">押されたとき、 **Enter**キーの例では、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドで、次の 3 つのすべてのスレッドを解放します。</span><span class="sxs-lookup"><span data-stu-id="48989-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="48989-122">これは、動作と、<xref:System.Threading.AutoResetEvent>クラスは、各リリース後に自動的にリセットする、一度に 1 つのスレッドを解放します。</span><span class="sxs-lookup"><span data-stu-id="48989-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="48989-123">キーを押して、 **Enter**キーが再びことを示します、<xref:System.Threading.ManualResetEvent>までシグナルの状態のままになります、<xref:System.Threading.EventWaitHandle.Reset%2A>メソッドが呼び出された: 例では、次の 2 つ以上のスレッドを開始します。</span><span class="sxs-lookup"><span data-stu-id="48989-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="48989-124">呼び出すときに、これらのスレッドがブロックされない、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドが完了する代わりに実行します。</span><span class="sxs-lookup"><span data-stu-id="48989-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="48989-125">キーを押して、 **Enter**キーを呼び出す例によって、もう一度、<xref:System.Threading.EventWaitHandle.Reset%2A>メソッドしブロックを呼び出すときに 1 つの複数のスレッドを開始する<xref:System.Threading.WaitHandle.WaitOne%2A>です。</span><span class="sxs-lookup"><span data-stu-id="48989-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="48989-126">キーを押して、 **Enter**キー 1 つの最後に呼び出し<xref:System.Threading.EventWaitHandle.Set%2A>リリース最後のスレッドと、プログラムを終了します。</span><span class="sxs-lookup"><span data-stu-id="48989-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="48989-127">このクラスは、スレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="48989-127">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="48989-128">初期状態をシグナル状態に設定する場合は <see langword="true" />。初期状態を非シグナル状態に設定する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="48989-128">
              <see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="48989-129">初期状態をシグナル状態に設定するかどうかを示す Boolean 型の値を使用して、<see cref="T:System.Threading.ManualResetEvent" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="48989-129">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="48989-130">場合の初期状態、<xref:System.Threading.ManualResetEvent>通知される (を渡すことによって作成されている場合は、`true`の`initialState`)、スレッドを待機している、<xref:System.Threading.ManualResetEvent>はブロックしません。</span><span class="sxs-lookup"><span data-stu-id="48989-130">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="48989-131">スレッドがブロックされるまで初期状態が非シグナル状態の場合は、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="48989-131">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>