<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ef7963b99d115f4a7f54e535f80eb38d73ee365" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56394153" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>通知時に手動でリセットする必要のあるスレッド同期イベントを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 使用する`ManualResetEvent`、 <xref:System.Threading.AutoResetEvent>、および<xref:System.Threading.EventWaitHandle>スレッドの相互作用 (またはスレッドがシグナル通知)。 詳細については、次を参照してください。、[スレッドの相互作用、またはシグナル](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling)のセクション、[同期プリミティブの概要](~/docs/standard/threading/overview-of-synchronization-primitives.md)記事。  

 スレッドの前に完了する必要がありますをアクティビティの開始時にスレッドの続行を呼び出します[ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A)に`ManualResetEvent`非シグナル状態にします。 このスレッドを制御するとして考えることができます、`ManualResetEvent`します。 スレッドの呼び出しに[ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A)ブロック、シグナルを待機しています。 呼び出しスレッドを制御するには、アクティビティが完了すると、 [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A)を待機しているスレッドが進むことができます。 すべての待機中のスレッドが解放されます。  

 シグナル状態されて`ManualResetEvent`呼び出すことによって手動でリセットされるまでシグナル状態のまま、<xref:System.Threading.EventWaitHandle.Reset>メソッド。 つまり、呼び出し<xref:System.Threading.WaitHandle.WaitOne%2A>すぐに返します。  

 初期状態を制御することができます、`ManualResetEvent`コンス トラクターにブール値を渡すことによって:`true`初期状態はシグナル状態になる場合と`false`それ以外の場合。  
 
 `ManualResetEvent` 使用することができますも、 `static` <xref:System.Threading.WaitHandle.WaitAll%2A>と<xref:System.Threading.WaitHandle.WaitAny%2A>メソッド。  
  
 .NET Framework version 2.0 以降<xref:System.Threading.ManualResetEvent>から派生した、<xref:System.Threading.EventWaitHandle>クラス。 A<xref:System.Threading.ManualResetEvent>は機能的に等価、<xref:System.Threading.EventWaitHandle>で作成された<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>します。  
  
> [!NOTE]
> 異なり、<xref:System.Threading.ManualResetEvent>クラス、<xref:System.Threading.EventWaitHandle>クラスが名前付きシステム同期イベントへのアクセスを提供します。  

 .NET Framework バージョン 4.0 では、以降では、<xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType>クラスは、軽量版を<xref:System.Threading.ManualResetEvent>します。    
   
   
  
## Examples  
 次の例でどのように<xref:System.Threading.ManualResetEvent>動作します。 例の先頭で、<xref:System.Threading.ManualResetEvent>非シグナル状態で (つまり、`false`コンス トラクターに渡される)。 この例では、3 つを作成、ブロックのそれぞれにスレッド、<xref:System.Threading.ManualResetEvent>を呼び出してその<xref:System.Threading.WaitHandle.WaitOne%2A>メソッド。 押されたとき、 **Enter**キーの例では、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドで、次の 3 つのスレッドをすべて解放します。 動作とは対照的、<xref:System.Threading.AutoResetEvent>クラスは、各リリース後に自動的にリセットしています。 一度に 1 つのスレッドを解放します。  
  
 キーを押して、 **」と入力**キーがもう一度ことを示します、<xref:System.Threading.ManualResetEvent>までシグナル状態のままになります、<xref:System.Threading.EventWaitHandle.Reset%2A>メソッドが呼び出されます。この例では、2 つのスレッドを開始します。 呼び出し時に、これらのスレッドがブロックされません、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドが完了する代わりに実行します。  
  
 キーを押して、 **」と入力**キーを呼び出す例では、もう一度押すと、<xref:System.Threading.EventWaitHandle.Reset%2A>メソッドを呼び出すときにブロックする 1 つ以上のスレッドを開始して<xref:System.Threading.WaitHandle.WaitOne%2A>します。 キーを押して、 **」と入力**キー 1 つの呼び出しの最後に<xref:System.Threading.EventWaitHandle.Set%2A>リリース、最後のスレッドと、プログラムを終了します。  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>このクラスは、スレッド セーフです。</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">同期プリミティブの概要</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">初期状態をシグナル状態に設定する場合は <see langword="true" />。初期状態を非シグナル状態に設定する場合は <see langword="false" />。</param>
        <summary>初期状態をシグナル状態に設定するかどうかを示す Boolean 型の値を使用して、<see cref="T:System.Threading.ManualResetEvent" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合の初期状態を<xref:System.Threading.ManualResetEvent>通知される (を渡すことによって作成されている場合は、`true`の`initialState`)、スレッドを待機している、<xref:System.Threading.ManualResetEvent>はブロックしません。 スレッドがブロックされるまで初期状態が非シグナル状態の場合は、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">同期プリミティブの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>イベントの状態を非シグナル状態に設定し、スレッドをブロックします。</summary>
        <returns>正常に操作できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>イベントの状態をシグナル状態に設定し、待機している 1 つ以上のスレッドが進行できるようにします。</summary>
        <returns>正常に操作できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
までシグナル状態のまま待機ハンドルに Set メソッドを呼び出す、<xref:System.Threading.ManualResetEvent.Reset>メソッドが呼び出されます。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>