<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadLocal`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b0866e1f64c7260da8823cd7e69e0b2646eebf23.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0866e1f64c7260da8823cd7e69e0b2646eebf23</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadLocal`1">
          <source>Specifies the type of data stored per-thread.</source>
          <target state="translated">スレッドごとに格納されているデータの種類を指定します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadLocal`1">
          <source>Provides thread-local storage of data.</source>
          <target state="translated">データのスレッド ローカル ストレージを提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadLocal`1">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> を使用する方法を次の例に示します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadLocal`1">
          <source>With the exception of <ph id="ph1">&lt;see cref="M:System.Threading.ThreadLocal`1.Dispose" /&gt;</ph>, all public and protected members of <ph id="ph2">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads.</source>
          <target state="translated">例外を除いて<ph id="ph1">&lt;see cref="M:System.Threading.ThreadLocal`1.Dispose" /&gt;</ph>、すべてのパブリックのプロテクト メンバーおよび<ph id="ph2">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph>スレッド セーフでは、複数のスレッドから同時に使用される可能性があります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadLocal`1">
          <source>The value returned for the <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.IsValueCreated" /&gt;</ph> properties is specific for the thread on which the property is accessed.</source>
          <target state="translated">返される値、<ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph>と<ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.IsValueCreated" /&gt;</ph>プロパティがプロパティにアクセスするスレッドを特定します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadLocal`1">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor">
          <source>The default value of <ph id="ph1">`T`</ph> is used to initialize the instance when <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> is accessed for the first time.</source>
          <target state="translated">既定値<ph id="ph1">`T`</ph>インスタンスを初期化するために使用されるときに<ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph>が最初にアクセスします。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor">
          <source>This constructor is equivalent to calling the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.%23ctor%28System.Boolean%29&gt;</ph> constructor with a value of <ph id="ph2">`false`</ph> for the <ph id="ph3">`trackAllValues`</ph> argument.</source>
          <target state="translated">このコンス トラクターは呼び出すことと同じ、<ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.%23ctor%28System.Boolean%29&gt;</ph>の値を持つコンス トラクター<ph id="ph2">`false`</ph>の<ph id="ph3">`trackAllValues`</ph>引数。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to track all values set on the instance and expose them through the <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Values" /&gt;</ph> property; <ph id="ph3">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、インスタンスに設定されているすべての値を追跡し、それらの値を <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Values" /&gt;</ph> プロパティを通じて公開します。そうしない場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> にします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance and specifies whether all values are accessible from any thread.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスを初期化し、すべての値がどのスレッドからもアクセスできるかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
          <source>If <ph id="ph1">`trackAllValues`</ph> is <ph id="ph2">`false`</ph>, only the value of this instance for the current thread is accessible.</source>
          <target state="translated">場合<ph id="ph1">`trackAllValues`</ph>は<ph id="ph2">`false`</ph>、現在のスレッドのこのインスタンスの値にアクセスできるのみです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
          <source>Attempting to use the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Values%2A&gt;</ph> property to retrieve all values throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">使用すると、<ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Values%2A&gt;</ph>をすべて取得するプロパティの値がスローされます、<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
          <source>The  <ph id="ph1">&lt;see cref="T:System.Func`1" /&gt;</ph> invoked to produce a lazily-initialized value when an attempt is made to retrieve <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> without it having been previously initialized.</source>
          <target state="translated">前もって初期化せずに <ph id="ph1">&lt;see cref="T:System.Func`1" /&gt;</ph> を取得しようとすると、後で初期化された値を生成するために <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> が呼び出されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance with the specified <ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> function.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> 関数を指定して、<ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> が null 参照 (Visual Basic では Nothing) です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Func`1" /&gt;</ph> invoked to produce a lazily-initialized value when an attempt is made to retrieve <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> without it having been previously initialized.</source>
          <target state="translated">前もって初期化せずに <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> を取得しようとすると、後で初期化された値を生成するために <ph id="ph1">&lt;see cref="T:System.Func`1" /&gt;</ph> が呼び出されます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to track all values set on the instance and expose them through the <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Values" /&gt;</ph> property; <ph id="ph3">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は、インスタンスに設定されているすべての値を追跡し、それらの値を <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Values" /&gt;</ph> プロパティを通じて公開します。そうしない場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> にします。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance with the specified <ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> function and a flag that indicates whether all values are accessible from any thread.</source>
          <target state="translated">指定した <ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> 関数とすべての値がどのスレッドからもアクセスできるかどうかを示すフラグを使用して、<ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source>If <ph id="ph1">`trackAllValues`</ph> is <ph id="ph2">`false`</ph>, only the value of this instance for the current thread is accessible.</source>
          <target state="translated">場合<ph id="ph1">`trackAllValues`</ph>は<ph id="ph2">`false`</ph>、現在のスレッドのこのインスタンスの値にアクセスできるのみです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Attempting to use the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Values%2A&gt;</ph> property to retrieve all values throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">使用すると、<ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Values%2A&gt;</ph>をすべて取得するプロパティの値がスローされます、<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is a <ph id="ph2">&lt;see langword="null" /&gt;</ph> reference (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> 参照 (Visual Basic の場合は <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>) です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadLocal`1">
          <source>Releases the resources used by this <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスによって使用されているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> を使い終わったら <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> メソッドによって、<ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> は使用不可の状態になります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> was occupying.</source>
          <target state="translated">呼び出した後<ph id="ph1">`Dispose`</ph>へのすべての参照を解放する必要があります、<ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>ガベージ コレクターがメモリを再利用できるようにする、<ph id="ph3">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>占有されていた。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>と<bpt id="p2">[</bpt>Dispose メソッドの実装<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> への最後の参照を解放する前に、必ず <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> を呼び出してください。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">そうしないと、ガベージ コレクターが <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> オブジェクトの <ph id="ph2">`Finalize`</ph> メソッドを呼び出すまで、使用されているリソースは解放されません。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
          <source>A Boolean value that indicates whether this method is being called due to a call to <ph id="ph1">&lt;see cref="M:System.Threading.ThreadLocal`1.Dispose" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.ThreadLocal`1.Dispose" /&gt;</ph> が呼び出されたことが原因でこのメソッドが呼び出されているかどうかを示すブール値。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
          <source>Releases the resources used by this <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスによって使用されているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>, this method is not thread-safe.</source>
          <target state="translated">ほとんどのメンバーとは異なり<ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>、このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.Finalize">
          <source>Releases the resources used by this <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスによって使用されているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.IsValueCreated">
          <source>Gets whether <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> is initialized on the current thread.</source>
          <target state="translated">現在のスレッドで <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> が初期化されているかどうかを取得します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.IsValueCreated">
          <source>true if <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> is initialized on the current thread; otherwise false.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> が現在のスレッドで初期化される場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.IsValueCreated">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスは破棄されています。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>Creates and returns a string representation of this instance for the current thread.</source>
          <target state="translated">現在のスレッドのこのインスタンスの文字列形式を作成して返します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>The result of calling <ph id="ph1">&lt;see cref="M:System.Object.ToString" /&gt;</ph> on the <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Object.ToString" /&gt;</ph> で <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> を呼び出した結果。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>Calling this method forces initialization for the current thread, as is the case with accessing <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> directly.</source>
          <target state="translated">アクセスの場合と同様に、現在のスレッドの初期化を強制するこのメソッドを呼び出す<ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph>直接です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスは破棄されています。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> for the current thread is a null reference (Nothing in Visual Basic).</source>
          <target state="translated">現在のスレッドの <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> は null 参照 (Visual Basic での Nothing) です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>The initialization function attempted to reference <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> recursively.</source>
          <target state="translated">初期化関数が、<ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> を再帰的に参照しようとしました。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>No default constructor is provided and no value factory is supplied.</source>
          <target state="translated">既定のコンストラクターが指定されず、値ファクトリが指定されていません。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>Gets or sets the value of this instance for the current thread.</source>
          <target state="translated">現在のスレッドのこのインスタンスの値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>Returns an instance of the object that this ThreadLocal is responsible for initializing.</source>
          <target state="translated">この ThreadLocal が初期化するオブジェクトのインスタンスを返します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>If this instance was not previously initialized for the current thread, accessing <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> will attempt to initialize it.</source>
          <target state="translated">アクセスする場合、このインスタンスは、現在のスレッドの前に初期化されませんでした、<ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph>初期化を試みます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>If an initialization function was supplied during the construction, that initialization will happen by invoking the function to retrieve the initial value for <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph>.</source>
          <target state="translated">初期値を取得する関数を呼び出すことによって初期化初期化関数は、構築時に指定されていました場合行わ<ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>Otherwise, the default value of will be used.</source>
          <target state="translated">それ以外の場合の既定値が使用されます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>If an exception is thrown, that exception is cached and thrown on each subsequent access of the property.</source>
          <target state="translated">例外がスローされた場合、その例外はキャッシュされ、各プロパティの以降のアクセスがスローされます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスは破棄されています。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>The initialization function attempted to reference <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> recursively.</source>
          <target state="translated">初期化関数が、<ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> を再帰的に参照しようとしました。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>No default constructor is provided and no value factory is supplied.</source>
          <target state="translated">既定のコンストラクターが指定されず、値ファクトリが指定されていません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Values">
          <source>Gets a list for all of the values currently stored by all of the threads that have accessed this instance.</source>
          <target state="translated">このインスタンスにアクセスした全スレッドによって現在格納されているすべての値のリストを取得します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Values">
          <source>A list for all of the values currently stored by all of the threads that have accessed this instance.</source>
          <target state="translated">このインスタンスにアクセスした全スレッドによって現在格納されているすべての値のリスト。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Values">
          <source>Values stored by all threads are not available because this instance was initialized with the <ph id="ph1">&lt;paramref name="trackAllValues" /&gt;</ph> argument set to <ph id="ph2">&lt;see langword="false" /&gt;</ph> in the call to a class constructor.</source>
          <target state="translated">このインスタンスは、クラスのコンストラクターの呼び出し時に、<ph id="ph1">&lt;paramref name="trackAllValues" /&gt;</ph> 引数を <ph id="ph2">&lt;see langword="false" /&gt;</ph> に設定して初期化されています。そのため、すべてのスレッドで格納される値を使用できません。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Values">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> インスタンスは破棄されています。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>