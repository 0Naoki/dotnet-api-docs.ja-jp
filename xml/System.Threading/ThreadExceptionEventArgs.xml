<Type Name="ThreadExceptionEventArgs" FullName="System.Threading.ThreadExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f672c8eb9235b3b4fcc0d7ecb7776b56eb28195a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58685315" /></Metadata><TypeSignature Language="C#" Value="public class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ThreadExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="19d68-101"><see cref="E:System.Windows.Forms.Application.ThreadException" /> イベントのデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="19d68-101">Provides data for the <see cref="E:System.Windows.Forms.Application.ThreadException" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19d68-102">A<xref:System.Threading.ThreadExceptionEventArgs>ハンドルされない例外が発生したときに、スレッドが作成されます。</span><span class="sxs-lookup"><span data-stu-id="19d68-102">A <xref:System.Threading.ThreadExceptionEventArgs> is created by a thread when an unhandled exception occurs.</span></span> <span data-ttu-id="19d68-103"><xref:System.Threading.ThreadExceptionEventArgs> 含まれています、<xref:System.Exception>が発生しました。</span><span class="sxs-lookup"><span data-stu-id="19d68-103"><xref:System.Threading.ThreadExceptionEventArgs> contains the <xref:System.Exception> that occurred.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19d68-104">させることにより、次の例を<xref:System.Windows.Forms.Application.ThreadException>イベントをクリックして`button1`フォーム。</span><span class="sxs-lookup"><span data-stu-id="19d68-104">The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form.</span></span> <span data-ttu-id="19d68-105">この例では、2 つのクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="19d68-105">The example creates two classes.</span></span> <span data-ttu-id="19d68-106">`ErrorHandler`フォームとボタンのイベントを発生させるクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="19d68-106">The `ErrorHandler` class creates the form and the button that raises the event.</span></span> <span data-ttu-id="19d68-107">`CustomExceptionHandler`クラス例外を処理するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="19d68-107">The `CustomExceptionHandler` class provides the methods to handle the exception.</span></span>  
  
 <span data-ttu-id="19d68-108">`Main`で、`ErrorHandler`クラス、例外処理は、クラスのインスタンスの新しいインスタンスを作成するコード、`CustomExceptionHandler`します。</span><span class="sxs-lookup"><span data-stu-id="19d68-108">In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`.</span></span> <span data-ttu-id="19d68-109">イベントに、インスタンスを追加し、し、アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="19d68-109">Then the instance is added to the event, and the application is run.</span></span>  
  
 <span data-ttu-id="19d68-110">`OnThreadException`メソッドで、`CustomExceptionHandler`クラス、例では、`try...catch...finally`例外を処理するステートメント。</span><span class="sxs-lookup"><span data-stu-id="19d68-110">In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception.</span></span> <span data-ttu-id="19d68-111">`ShowThreadExceptionDialog`メソッドは、表示するメッセージを作成し、メッセージ ボックスに表示します。</span><span class="sxs-lookup"><span data-stu-id="19d68-111">The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.</span></span>  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.ThreadExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadExceptionEventArgs (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadExceptionEventArgs(Exception ^ t);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadExceptionEventArgs : Exception -&gt; System.Threading.ThreadExceptionEventArgs" Usage="new System.Threading.ThreadExceptionEventArgs t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t"><span data-ttu-id="19d68-112">発生した <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="19d68-112">The <see cref="T:System.Exception" /> that occurred.</span></span></param>
        <summary><span data-ttu-id="19d68-113"><see cref="T:System.Threading.ThreadExceptionEventArgs" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="19d68-113">Initializes a new instance of the <see cref="T:System.Threading.ThreadExceptionEventArgs" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="19d68-114">させることにより、次の例を<xref:System.Windows.Forms.Application.ThreadException>イベントをクリックして`button1`フォーム。</span><span class="sxs-lookup"><span data-stu-id="19d68-114">The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form.</span></span> <span data-ttu-id="19d68-115">この例では、2 つのクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="19d68-115">The example creates two classes.</span></span> <span data-ttu-id="19d68-116">`ErrorHandler`フォームとボタンのイベントを発生させるクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="19d68-116">The `ErrorHandler` class creates the form and the button that raises the event.</span></span> <span data-ttu-id="19d68-117">`CustomExceptionHandler`クラス例外を処理するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="19d68-117">The `CustomExceptionHandler` class provides the methods to handle the exception.</span></span>  
  
 <span data-ttu-id="19d68-118">`Main`で、`ErrorHandler`クラス、例外処理は、クラスのインスタンスの新しいインスタンスを作成するコード、`CustomExceptionHandler`します。</span><span class="sxs-lookup"><span data-stu-id="19d68-118">In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`.</span></span> <span data-ttu-id="19d68-119">イベントに、インスタンスを追加し、し、アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="19d68-119">Then the instance is added to the event, and the application is run.</span></span>  
  
 <span data-ttu-id="19d68-120">`OnThreadException`メソッドで、`CustomExceptionHandler`クラス、例では、`try...catch...finally`例外を処理するステートメント。</span><span class="sxs-lookup"><span data-stu-id="19d68-120">In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception.</span></span> <span data-ttu-id="19d68-121">`ShowThreadExceptionDialog`メソッドは、表示するメッセージを作成し、メッセージ ボックスに表示します。</span><span class="sxs-lookup"><span data-stu-id="19d68-121">The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.</span></span>  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.ThreadStart" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19d68-122">発生した <see cref="T:System.Exception" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="19d68-122">Gets the <see cref="T:System.Exception" /> that occurred.</span></span></summary>
        <value><span data-ttu-id="19d68-123">発生した <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="19d68-123">The <see cref="T:System.Exception" /> that occurred.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="19d68-124">させることにより、次の例を<xref:System.Windows.Forms.Application.ThreadException>イベントをクリックして`button1`フォーム。</span><span class="sxs-lookup"><span data-stu-id="19d68-124">The following example allows you to raise a <xref:System.Windows.Forms.Application.ThreadException> event by clicking `button1` on a form.</span></span> <span data-ttu-id="19d68-125">この例では、2 つのクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="19d68-125">The example creates two classes.</span></span> <span data-ttu-id="19d68-126">`ErrorHandler`フォームとボタンのイベントを発生させるクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="19d68-126">The `ErrorHandler` class creates the form and the button that raises the event.</span></span> <span data-ttu-id="19d68-127">`CustomExceptionHandler`クラス例外を処理するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="19d68-127">The `CustomExceptionHandler` class provides the methods to handle the exception.</span></span>  
  
 <span data-ttu-id="19d68-128">`Main`で、`ErrorHandler`クラス、例外処理は、クラスのインスタンスの新しいインスタンスを作成するコード、`CustomExceptionHandler`します。</span><span class="sxs-lookup"><span data-stu-id="19d68-128">In `Main` in the `ErrorHandler` class, the code creates a new instance of the exception handling class, that is, an instance of the `CustomExceptionHandler`.</span></span> <span data-ttu-id="19d68-129">イベントに、インスタンスを追加し、し、アプリケーションを実行します。</span><span class="sxs-lookup"><span data-stu-id="19d68-129">Then the instance is added to the event, and the application is run.</span></span>  
  
 <span data-ttu-id="19d68-130">`OnThreadException`メソッドで、`CustomExceptionHandler`クラス、例では、`try...catch...finally`例外を処理するステートメント。</span><span class="sxs-lookup"><span data-stu-id="19d68-130">In the `OnThreadException` method in the `CustomExceptionHandler` class, the example uses a `try...catch...finally` statement to process the exception.</span></span> <span data-ttu-id="19d68-131">`ShowThreadExceptionDialog`メソッドは、表示するメッセージを作成し、メッセージ ボックスに表示します。</span><span class="sxs-lookup"><span data-stu-id="19d68-131">The `ShowThreadExceptionDialog` method creates the message to display, and displays it in a message box.</span></span>  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>