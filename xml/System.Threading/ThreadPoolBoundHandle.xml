<Type Name="ThreadPoolBoundHandle" FullName="System.Threading.ThreadPoolBoundHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="993b15649f48c4c60b78499e8a3e0f3d2abecdc1" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56400445" /></Metadata><TypeSignature Language="C#" Value="public sealed class ThreadPoolBoundHandle : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ThreadPoolBoundHandle extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPoolBoundHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadPoolBoundHandle&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPoolBoundHandle sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type ThreadPoolBoundHandle = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Overlapped</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netstandard-2.0">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9576e-101">システムのスレッド プールにバインドし、低レベルのコンポーネントが非同期 I/O 操作の通知を受信できるようにする I/O ハンドルを表します。</span><span class="sxs-lookup"><span data-stu-id="9576e-101">Represents an I/O handle that is bound to the system thread pool and enables low-level components to receive notifications for asynchronous I/O operations.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="AllocateNativeOverlapped">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9576e-102"><see cref="T:System.Threading.NativeOverlapped" /> 構造体へのアンマネージ ポインターを返します。</span><span class="sxs-lookup"><span data-stu-id="9576e-102">Returns an unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AllocateNativeOverlapped">
      <MemberSignature Language="C#" Value="public System.Threading.NativeOverlapped* AllocateNativeOverlapped (System.Threading.PreAllocatedOverlapped preAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.NativeOverlapped* AllocateNativeOverlapped(class System.Threading.PreAllocatedOverlapped preAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::NativeOverlapped* AllocateNativeOverlapped(System::Threading::PreAllocatedOverlapped ^ preAllocated);" />
      <MemberSignature Language="F#" Value="member this.AllocateNativeOverlapped : System.Threading.PreAllocatedOverlapped -&gt; nativeptr&lt;System.Threading.NativeOverlapped&gt;" Usage="threadPoolBoundHandle.AllocateNativeOverlapped preAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.NativeOverlapped*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preAllocated" Type="System.Threading.PreAllocatedOverlapped" />
      </Parameters>
      <Docs>
        <param name="preAllocated"><span data-ttu-id="9576e-103"><see cref="T:System.Threading.NativeOverlapped" /> ポインターの作成元のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9576e-103">An object from which to create the <see cref="T:System.Threading.NativeOverlapped" /> pointer.</span></span></param>
        <summary><span data-ttu-id="9576e-104">指定した <see cref="T:System.Threading.PreAllocatedOverlapped" /> オブジェクトに関連付けられているコールバック状態とバッファーを使用して、アンマネージ ポインターを <see cref="T:System.Threading.NativeOverlapped" /> 構造体に返します。</span><span class="sxs-lookup"><span data-stu-id="9576e-104">Returns an unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure using the callback state and buffers associated with the specified <see cref="T:System.Threading.PreAllocatedOverlapped" /> object.</span></span></summary>
        <returns><span data-ttu-id="9576e-105"><see cref="T:System.Threading.NativeOverlapped" /> 構造体へのアンマネージ ポインター。</span><span class="sxs-lookup"><span data-stu-id="9576e-105">An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9576e-106">オーバー ラップした I/O 操作で、オペレーティング システムには、このメソッドによって返されるアンマネージ ポインターを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="9576e-106">The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</span></span> <span data-ttu-id="9576e-107"><xref:System.Threading.NativeOverlapped>まで物理メモリ内構造は固定されて、<xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9576e-107">The  <xref:System.Threading.NativeOverlapped> structure is fixed in physical memory until the <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9576e-108"><paramref name="preAllocated" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="9576e-108"><paramref name="preAllocated" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9576e-109"><paramref name="preAllocated" /> は現在別の I/O 操作で使用中です。</span><span class="sxs-lookup"><span data-stu-id="9576e-109"><paramref name="preAllocated" /> is currently in use for another I/O operation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9576e-110">このメソッドは <see cref="T:System.Threading.ThreadPoolBoundHandle" /> が破棄された後に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="9576e-110">This method was called after the <see cref="T:System.Threading.ThreadPoolBoundHandle" /> was disposed.</span></span>  
  
<span data-ttu-id="9576e-111">または</span><span class="sxs-lookup"><span data-stu-id="9576e-111">-or-</span></span> 
<span data-ttu-id="9576e-112">このメソッドは <paramref name="preAllocated" /> が破棄された後に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="9576e-112">This method was called after <paramref name="preAllocated" /> was disposed.</span></span></exception>
        <altmember cref="T:System.Threading.PreAllocatedOverlapped" />
      </Docs>
    </Member>
    <Member MemberName="AllocateNativeOverlapped">
      <MemberSignature Language="C#" Value="public System.Threading.NativeOverlapped* AllocateNativeOverlapped (System.Threading.IOCompletionCallback callback, object state, object pinData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.NativeOverlapped* AllocateNativeOverlapped(class System.Threading.IOCompletionCallback callback, object state, object pinData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::NativeOverlapped* AllocateNativeOverlapped(System::Threading::IOCompletionCallback ^ callback, System::Object ^ state, System::Object ^ pinData);" />
      <MemberSignature Language="F#" Value="member this.AllocateNativeOverlapped : System.Threading.IOCompletionCallback * obj * obj -&gt; nativeptr&lt;System.Threading.NativeOverlapped&gt;" Usage="threadPoolBoundHandle.AllocateNativeOverlapped (callback, state, pinData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.NativeOverlapped*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.IOCompletionCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="pinData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="9576e-113">非同期 I/O 操作が完了したときに呼び出すコールバック メソッドを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="9576e-113">A delegate that represents the callback method to invoke when the asynchronous I/O operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="9576e-114">この <see cref="T:System.Threading.NativeOverlapped" /> インスタンスを他の <see cref="T:System.Threading.NativeOverlapped" /> インスタンスと区別する、ユーザー指定のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9576e-114">A user-provided object that distinguishes this <see cref="T:System.Threading.NativeOverlapped" /> instance from other <see cref="T:System.Threading.NativeOverlapped" /> instances.</span></span></param>
        <param name="pinData"><span data-ttu-id="9576e-115">操作の入力バッファーまたは出力バッファーを表す、1 つのオブジェクトまたはオブジェクトの配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9576e-115">An object or array of objects that represent the input or output buffer for the operation, or <see langword="null" />.</span></span> <span data-ttu-id="9576e-116">各オブジェクトは、バイト配列などのバッファーを表します。</span><span class="sxs-lookup"><span data-stu-id="9576e-116">Each object represents a buffer, such an array of bytes.</span></span></param>
        <summary><span data-ttu-id="9576e-117">アンマネージド ポインターを <see cref="T:System.Threading.NativeOverlapped" /> 構造体に返し、各非同期 I/O 操作が完了したときに呼び出されるデリゲート、コンテキストを提供するユーザー指定のオブジェクト、およびバッファーとして機能するマネージド オブジェクトを指定します。</span><span class="sxs-lookup"><span data-stu-id="9576e-117">Returns an unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete, a user-provided object that supplies context, and managed objects that serve as buffers.</span></span></summary>
        <returns><span data-ttu-id="9576e-118"><see cref="T:System.Threading.NativeOverlapped" /> 構造体へのアンマネージ ポインター。</span><span class="sxs-lookup"><span data-stu-id="9576e-118">An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9576e-119"><paramref name="callback" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="9576e-119"><paramref name="callback" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9576e-120">このメソッドは <see cref="T:System.Threading.ThreadPoolBoundHandle" /> オブジェクトが破棄された後に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="9576e-120">This method was called after the <see cref="T:System.Threading.ThreadPoolBoundHandle" /> object was disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static System.Threading.ThreadPoolBoundHandle BindHandle (System.Runtime.InteropServices.SafeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.ThreadPoolBoundHandle BindHandle(class System.Runtime.InteropServices.SafeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (handle As SafeHandle) As ThreadPoolBoundHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::ThreadPoolBoundHandle ^ BindHandle(System::Runtime::InteropServices::SafeHandle ^ handle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : System.Runtime.InteropServices.SafeHandle -&gt; System.Threading.ThreadPoolBoundHandle" Usage="System.Threading.ThreadPoolBoundHandle.BindHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPoolBoundHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="9576e-121">オペレーティング システム ハンドルを保持するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9576e-121">An object that holds the operating system handle.</span></span> <span data-ttu-id="9576e-122">ハンドルは、アンマネージ コードの重複 I/O 用に開かれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="9576e-122">The handle must have been opened for overlapped I/O in unmanaged code.</span></span></param>
        <summary><span data-ttu-id="9576e-123">指定したハンドルに対し、<see cref="T:System.Threading.ThreadPoolBoundHandle" /> が返され、システム スレッド プールにバインドされます。</span><span class="sxs-lookup"><span data-stu-id="9576e-123">Returns a <see cref="T:System.Threading.ThreadPoolBoundHandle" /> for the specified handle, which is bound to the system thread pool.</span></span></summary>
        <returns><span data-ttu-id="9576e-124"><paramref name="handle" /> の <see cref="T:System.Threading.ThreadPoolBoundHandle" />。システム スレッド プールにバインドされます。</span><span class="sxs-lookup"><span data-stu-id="9576e-124">A <see cref="T:System.Threading.ThreadPoolBoundHandle" /> for <paramref name="handle" />, which is bound to the system thread pool.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9576e-125">このメソッドは、ハンドルごと 1 回呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="9576e-125">This method should be called once per handle.</span></span>  
  
 <span data-ttu-id="9576e-126"><xref:System.Threading.ThreadPoolBoundHandle>オブジェクトの所有権を受け取らない`handle`; を呼び出す呼び出し元の責任は<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9576e-126">The <xref:System.Threading.ThreadPoolBoundHandle> object does not take ownership of `handle`; it remains the responsibility of the caller to call <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9576e-127"><paramref name="handle" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="9576e-127"><paramref name="handle" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9576e-128"><paramref name="handle" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="9576e-128"><paramref name="handle" /> has been disposed.</span></span>  
  
<span data-ttu-id="9576e-129">または</span><span class="sxs-lookup"><span data-stu-id="9576e-129">-or-</span></span> 
 <span data-ttu-id="9576e-130"><paramref name="handle" /> は有効な I/O ハンドルを参照していません。</span><span class="sxs-lookup"><span data-stu-id="9576e-130"><paramref name="handle" /> does not refer to a valid I/O handle.</span></span>  
  
<span data-ttu-id="9576e-131">または</span><span class="sxs-lookup"><span data-stu-id="9576e-131">-or-</span></span> 
 <span data-ttu-id="9576e-132"><paramref name="handle" /> は重複 I/O 用に開かれていないハンドルを参照しています。</span><span class="sxs-lookup"><span data-stu-id="9576e-132"><paramref name="handle" /> refers to a handle that has not been opened for overlapped I/O.</span></span>  
  
<span data-ttu-id="9576e-133">または</span><span class="sxs-lookup"><span data-stu-id="9576e-133">-or-</span></span> 
 <span data-ttu-id="9576e-134"><paramref name="handle" /> は既にバインドされているハンドルを参照しています。</span><span class="sxs-lookup"><span data-stu-id="9576e-134"><paramref name="handle" /> refers to a handle that has already been bound.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="threadPoolBoundHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9576e-135"><see cref="T:System.Threading.ThreadPoolBoundHandle" /> インスタンスによって使用されているすべてのアンマネージ リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="9576e-135">Releases all unmanaged resources used by the <see cref="T:System.Threading.ThreadPoolBoundHandle" /> instance.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeNativeOverlapped">
      <MemberSignature Language="C#" Value="public void FreeNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FreeNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FreeNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberSignature Language="F#" Value="member this.FreeNativeOverlapped : nativeptr&lt;System.Threading.NativeOverlapped&gt; -&gt; unit" Usage="threadPoolBoundHandle.FreeNativeOverlapped overlapped" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped"><span data-ttu-id="9576e-136">解放する <see cref="T:System.Threading.NativeOverlapped" /> 構造体へのアンマネージ ポインター。</span><span class="sxs-lookup"><span data-stu-id="9576e-136">An unmanaged pointer to the <see cref="T:System.Threading.NativeOverlapped" /> structure structure to be freed.</span></span></param>
        <summary><span data-ttu-id="9576e-137"><see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /> メソッドによって割り当てられた <see cref="T:System.Threading.NativeOverlapped" /> 構造体と関連付けられたメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="9576e-137">Frees the memory associated with a <see cref="T:System.Threading.NativeOverlapped" /> structure allocated by the <see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="9576e-138">呼び出す必要があります、<xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A>メソッドを厳密に 1 回ですべて<xref:System.Threading.NativeOverlapped>を使用して割り当てられたアンマネージ ポインター、<xref:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9576e-138">You must call the <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> method exactly once on every <xref:System.Threading.NativeOverlapped> unmanaged pointer allocated by using the <xref:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped%2A> method.</span></span> <span data-ttu-id="9576e-139">呼び出さない場合、<xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A>メソッドでは、メモリ リークが発生します。</span><span class="sxs-lookup"><span data-stu-id="9576e-139">If you do not call the <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> method, you will leak memory.</span></span> <span data-ttu-id="9576e-140">呼び出す場合、<xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A>メソッドのメソッドが、同じ 2 回以上<xref:System.Threading.NativeOverlapped>アンマネージ ポインターは、メモリが破損します。</span><span class="sxs-lookup"><span data-stu-id="9576e-140">If you call the <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> method method more than once on the same <xref:System.Threading.NativeOverlapped> unmanaged pointer, memory will be corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9576e-141"><paramref name="overlapped" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="9576e-141"><paramref name="overlapped" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9576e-142">このメソッドは <see cref="T:System.Threading.ThreadPoolBoundHandle" /> オブジェクトが破棄された後に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="9576e-142">This method was called after the <see cref="T:System.Threading.ThreadPoolBoundHandle" /> object was disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNativeOverlappedState">
      <MemberSignature Language="C#" Value="public static object GetNativeOverlappedState (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetNativeOverlappedState(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetNativeOverlappedState(System::Threading::NativeOverlapped* overlapped);" />
      <MemberSignature Language="F#" Value="static member GetNativeOverlappedState : nativeptr&lt;System.Threading.NativeOverlapped&gt; -&gt; obj" Usage="System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState overlapped" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped"><span data-ttu-id="9576e-143">関連するユーザー指定のオブジェクトを返す <see cref="T:System.Threading.NativeOverlapped" /> 構造体へのアンマネージ ポインター。</span><span class="sxs-lookup"><span data-stu-id="9576e-143">An unmanaged pointer to the <see cref="T:System.Threading.NativeOverlapped" /> structure from which to return the associated user-provided object.</span></span></param>
        <summary><span data-ttu-id="9576e-144"><see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" /> メソッドを呼び出して、<see cref="T:System.Threading.NativeOverlapped" /> インスタンスが割り当てられると、指定されたユーザー指定のオブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="9576e-144">Returns the user-provided object that was specified when the <see cref="T:System.Threading.NativeOverlapped" /> instance was allocated by calling the <see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="9576e-145">この <see cref="T:System.Threading.NativeOverlapped" /> インスタンスを別の <see cref="T:System.Threading.NativeOverlapped" /> インスタンス、または <see langword="null" /> と区別する、ユーザー指定のオブジェクト (<see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /> メソッドを呼び出してインスタンスが割り当てられたときにオブジェクトが指定されていない場合)。</span><span class="sxs-lookup"><span data-stu-id="9576e-145">A user-provided object that distinguishes this <see cref="T:System.Threading.NativeOverlapped" /> instance from other <see cref="T:System.Threading.NativeOverlapped" /> instances, or <see langword="null" /> if one was not specified when the intstance was allocated by calling the <see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /> method.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9576e-146"><paramref name="overlapped" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="9576e-146"><paramref name="overlapped" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.SafeHandle Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.SafeHandle Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadPoolBoundHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As SafeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::SafeHandle ^ Handle { System::Runtime::InteropServices::SafeHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : System.Runtime.InteropServices.SafeHandle" Usage="System.Threading.ThreadPoolBoundHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.SafeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9576e-147">バインドされているオペレーティング システム ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="9576e-147">Gets the bound operating system handle.</span></span></summary>
        <value><span data-ttu-id="9576e-148">バインドされているオペレーティング システム ハンドルを保持するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9576e-148">An object that holds the bound operating system handle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>