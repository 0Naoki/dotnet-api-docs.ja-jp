<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadPoolBoundHandle.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58d6d6bc39f371a703223dd853e8ab8ffdf1fb309.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d6d6bc39f371a703223dd853e8ab8ffdf1fb309</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.7.1,netstandard-2.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPoolBoundHandle">
          <source>Represents an I/O handle that is bound to the system thread pool and enables low-level components to receive notifications for asynchronous I/O operations.</source>
          <target state="translated">システムのスレッド プールにバインドし、低レベルのコンポーネントが非同期 I/O 操作の通知を受信できるようにする I/O ハンドルを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPoolBoundHandle">
          <source>Returns an unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 構造体へのアンマネージ ポインターを返します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>An object from which to create the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> pointer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> ポインターの作成元のオブジェクト。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>Returns an unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure using the callback state and buffers associated with the specified <ph id="ph2">&lt;see cref="T:System.Threading.PreAllocatedOverlapped" /&gt;</ph> object.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Threading.PreAllocatedOverlapped" /&gt;</ph> オブジェクトに関連付けられているコールバック状態とバッファーを使用して、アンマネージ ポインターを <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 構造体に返します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 構造体へのアンマネージ ポインター。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">このメソッドによって返されるアンマネージ ポインターは、オーバー ラップされた I/O 操作で、オペレーティング システムに渡すことができます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>The  <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure is fixed in physical memory until the <ph id="ph2">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph>まで物理メモリ内構造は固定されて、<ph id="ph2">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> is currently in use for another I/O operation.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> は現在別の I/O 操作で使用中です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>This method was called after the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> was disposed.</source>
          <target state="translated">このメソッドは <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> が破棄された後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)">
          <source>This method was called after <ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> was disposed.</source>
          <target state="translated">このメソッドは <ph id="ph1">&lt;paramref name="preAllocated" /&gt;</ph> が破棄された後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>A delegate that represents the callback method to invoke when the asynchronous I/O operation completes.</source>
          <target state="translated">非同期 I/O 操作が完了したときに呼び出すコールバック メソッドを表すデリゲート。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>A user-provided object that distinguishes this <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instance from other <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instances.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> インスタンスを他の <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> インスタンスと区別する、ユーザー指定のオブジェクト。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>An object or array of objects that represent the input or output buffer for the operation, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">操作の入力バッファーまたは出力バッファーを表す、1 つのオブジェクトまたはオブジェクトの配列、または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>Each object represents a buffer, such an array of bytes.</source>
          <target state="translated">各オブジェクトは、バイト配列などのバッファーを表します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>Returns an unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete, a user-provided object that supplies context, and managed objects that serve as buffers.</source>
          <target state="translated">アンマネージ ポインターを <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 構造体に返し、各非同期 I/O 操作が完了したときに呼び出されるデリゲート、コンテキストを提供するユーザー指定のオブジェクト、およびバッファーとして機能するマネージ オブジェクトを指定します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 構造体へのアンマネージ ポインター。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)">
          <source>This method was called after the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> object was disposed.</source>
          <target state="translated">このメソッドは <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> オブジェクトが破棄された後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>An object that holds the operating system handle.</source>
          <target state="translated">オペレーティング システム ハンドルを保持するオブジェクト。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The handle must have been opened for overlapped I/O in unmanaged code.</source>
          <target state="translated">ハンドルは、アンマネージ コードの重複 I/O 用に開かれている必要があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> for the specified handle, which is bound to the system thread pool.</source>
          <target state="translated">指定したハンドルに対し、<ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> が返され、システム スレッド プールにバインドされます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> for <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>, which is bound to the system thread pool.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="handle" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph>。システム スレッド プールにバインドされます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>This method should be called once per handle.</source>
          <target state="translated">このメソッドは、ハンドルごと 1 回呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle&gt;</ph> object does not take ownership of <ph id="ph2">`handle`</ph>; it remains the responsibility of the caller to call <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle&gt;</ph>オブジェクトの所有権を受け取らない<ph id="ph2">`handle`</ph>; を呼び出す呼び出し元の責任において、そのまま<ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> は破棄されています。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> does not refer to a valid I/O handle.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> は有効な I/O ハンドルを参照していません。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> refers to a handle that has not been opened for overlapped I/O.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> は重複 I/O 用に開かれていないハンドルを参照しています。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> refers to a handle that has already been bound.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> は既にバインドされているハンドルを参照しています。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.Dispose">
          <source>Releases all unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> インスタンスによって使用されているすべてのアンマネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>An unmanaged pointer to the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure structure to be freed.</source>
          <target state="translated">解放する <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 構造体へのアンマネージ ポインター。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Frees the memory associated with a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure allocated by the <ph id="ph2">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> メソッドによって割り当てられた <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 構造体と関連付けられたメモリを解放します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>You must call the <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method exactly once on every <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> unmanaged pointer allocated by using the <ph id="ph3">&lt;xref:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped%2A&gt;</ph> method.</source>
          <target state="translated">呼び出す必要があります、<ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph>メソッドを正確に 1 回にすべて<ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph>を使用して割り当てられたアンマネージ ポインター、<ph id="ph3">&lt;xref:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>If you do not call the <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method, you will leak memory.</source>
          <target state="translated">呼び出さない場合、<ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph>メソッド、メモリ リークが発生します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph> method method more than once on the same <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> unmanaged pointer, memory will be corrupted.</source>
          <target state="translated">呼び出す場合は、<ph id="ph1">&lt;xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A&gt;</ph>メソッドと同じで複数回<ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph>アンマネージ ポインターは、メモリが破損します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>This method was called after the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> object was disposed.</source>
          <target state="translated">このメソッドは <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPoolBoundHandle" /&gt;</ph> オブジェクトが破棄された後に呼び出されました。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source>An unmanaged pointer to the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure from which to return the associated user-provided object.</source>
          <target state="translated">関連するユーザー指定のオブジェクトを返す <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> 構造体へのアンマネージ ポインター。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source>Returns the user-provided object that was specified when the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instance was allocated by calling the <ph id="ph2">&lt;see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" /&gt;</ph> メソッドを呼び出して、<ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> インスタンスが割り当てられると、指定されたユーザー指定のオブジェクトが返されます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source>A user-provided object that distinguishes this <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instance from other <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> instances, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if one was not specified when the intstance was allocated by calling the <ph id="ph4">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> method.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> インスタンスを別の <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> インスタンス、または <ph id="ph3">&lt;see langword="null" /&gt;</ph> と区別する、ユーザー指定のオブジェクト (<ph id="ph4">&lt;see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /&gt;</ph> メソッドを呼び出してインスタンスが割り当てられたときにオブジェクトが指定されていない場合)。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="overlapped" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadPoolBoundHandle.Handle">
          <source>Gets the bound operating system handle.</source>
          <target state="translated">バインドされているオペレーティング システム ハンドルを取得します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadPoolBoundHandle.Handle">
          <source>An object that holds the bound operating system handle.</source>
          <target state="translated">バインドされているオペレーティング システム ハンドルを保持するオブジェクト。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>