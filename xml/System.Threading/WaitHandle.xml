<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0b6e3dd3b2837ebe70209ea950a3414c4d7dd591" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407231" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1790b-101">Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1790b-101">Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-102"><xref:System.Threading.WaitHandle>クラスは Win32 同期ハンドルをカプセル化し、複数の待機操作を許可する、ランタイム内のすべての同期オブジェクトを表すために使用します。</span><span class="sxs-lookup"><span data-stu-id="1790b-102">The <xref:System.Threading.WaitHandle> class encapsulates Win32 synchronization handles, and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="1790b-103">他の同期オブジェクトと待機ハンドルの比較を参照してください。[同期プリミティブの概要](~/docs/standard/threading/overview-of-synchronization-primitives.md)です。</span><span class="sxs-lookup"><span data-stu-id="1790b-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="1790b-104"><xref:System.Threading.WaitHandle>クラス自体は抽象クラスです。</span><span class="sxs-lookup"><span data-stu-id="1790b-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="1790b-105">派生したクラス<xref:System.Threading.WaitHandle>を取得または解放、共有リソースへのアクセスを示すシグナリング機構を定義しますが、使用、継承された<xref:System.Threading.WaitHandle>メソッドへのアクセスの待機中にブロックする共有リソースです。</span><span class="sxs-lookup"><span data-stu-id="1790b-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="1790b-106">派生したクラス<xref:System.Threading.WaitHandle>が含まれます。</span><span class="sxs-lookup"><span data-stu-id="1790b-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="1790b-107"><xref:System.Threading.Mutex> クラス</span><span class="sxs-lookup"><span data-stu-id="1790b-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="1790b-108">参照してください[ミュー テックス](~/docs/standard/threading/mutexes.md)です。</span><span class="sxs-lookup"><span data-stu-id="1790b-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="1790b-109"><xref:System.Threading.EventWaitHandle>クラスとその派生クラスでは、<xref:System.Threading.AutoResetEvent>と<xref:System.Threading.ManualResetEvent>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span> <span data-ttu-id="1790b-110">「[EventWaitHandle、AutoResetEvent、CountdownEvent、ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1790b-110">See [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md).</span></span>  
  
-   <span data-ttu-id="1790b-111"><xref:System.Threading.Semaphore> クラス</span><span class="sxs-lookup"><span data-stu-id="1790b-111">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="1790b-112">参照してください[Semaphore と SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md)です。</span><span class="sxs-lookup"><span data-stu-id="1790b-112">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="1790b-113">インスタンス メソッドを呼び出してスレッドをブロックできる個々 の待機ハンドル<xref:System.Threading.WaitHandle.WaitOne%2A>、これがから派生したクラスによって継承<xref:System.Threading.WaitHandle>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-113">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="1790b-114">派生クラス<xref:System.Threading.WaitHandle>のスレッド アフィニティが異なります。</span><span class="sxs-lookup"><span data-stu-id="1790b-114">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="1790b-115">イベント待機ハンドル (<xref:System.Threading.EventWaitHandle>、 <xref:System.Threading.AutoResetEvent>、および<xref:System.Threading.ManualResetEvent>) とスレッドの関係はありません; 任意のスレッドには、イベント待機ハンドルまたはセマフォを通知できます。</span><span class="sxs-lookup"><span data-stu-id="1790b-115">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="1790b-116">ミュー テックス、その一方はスレッド アフィニティです。ミュー テックスを所有するスレッドを解放する必要があります、およびスレッドが呼び出す場合、例外がスローされます、<xref:System.Threading.Mutex.ReleaseMutex%2A>ミュー テックスを所有していないメソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-116">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="1790b-117"><xref:System.Threading.WaitHandle>クラスから派生<xref:System.MarshalByRefObject>、これらのクラスは、アプリケーション ドメインの境界を越えてスレッドの活動を同期するために使用することができます。</span><span class="sxs-lookup"><span data-stu-id="1790b-117">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="1790b-118">その派生クラスだけでなく、<xref:System.Threading.WaitHandle>クラスには多数の 1 つまでスレッドをブロックする静的メソッドまたは複数の同期オブジェクトがシグナルを受信する.</span><span class="sxs-lookup"><span data-stu-id="1790b-118">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal..</span></span> <span data-ttu-id="1790b-119">次の設定があります。</span><span class="sxs-lookup"><span data-stu-id="1790b-119">These include:</span></span>  
  
-   <span data-ttu-id="1790b-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>、これにより、スレッドの待機ハンドルの 1 つの通知、および他の場所ですぐに待機します。</span><span class="sxs-lookup"><span data-stu-id="1790b-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="1790b-121"><xref:System.Threading.WaitHandle.WaitAll%2A>、これにより、配列内のすべての待機ハンドルがシグナルを受信するまで待機するスレッド。</span><span class="sxs-lookup"><span data-stu-id="1790b-121"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="1790b-122"><xref:System.Threading.WaitHandle.WaitAny%2A>、これにより、待機ハンドルの指定されたセットのいずれかが通知されてするまで待機するスレッド。</span><span class="sxs-lookup"><span data-stu-id="1790b-122"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled .</span></span>  
  
 <span data-ttu-id="1790b-123">これらのメソッドのオーバー ロードは、待機、および他のスレッドの同期コンテキストを使用できるようにするまでの待機に入る前に、同期コンテキストを終了する機会を放棄するためのタイムアウト間隔を提供します。</span><span class="sxs-lookup"><span data-stu-id="1790b-123">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1790b-124">この型は、<xref:System.IDisposable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="1790b-124">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="1790b-125">型またはその派生型を使用してが完了したら、直接的または間接的にそれを破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1790b-125">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="1790b-126">型の直接 dispose を呼び出す、<xref:System.Threading.WaitHandle.Close%2A>メソッドで、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="1790b-126">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="1790b-127">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(C# の場合) または`Using`(Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="1790b-127">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="1790b-128">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="1790b-128">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="1790b-129"><xref:System.Threading.WaitHandle> 実装する、<xref:System.IDisposable.Dispose%2A>パターン。</span><span class="sxs-lookup"><span data-stu-id="1790b-129"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="1790b-130">参照してください[Dispose パターン](~/docs/standard/design-guidelines/dispose-pattern.md)です。</span><span class="sxs-lookup"><span data-stu-id="1790b-130">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="1790b-131">派生したときに<xref:System.Threading.WaitHandle>を使用して、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>ネイティブ ハンドルのオペレーティング システム ハンドルを格納するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="1790b-131">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="1790b-132">保護されたをオーバーライドする必要はありません<xref:System.Threading.WaitHandle.Dispose%2A>メソッド追加のアンマネージ リソースを使用する場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="1790b-132">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-133">次のコード例に示す 2 つのスレッドができる方法はメイン中にバック グラウンド タスク スレッド、静的なを使用して完了するタスクを待機<xref:System.Threading.WaitHandle.WaitAny%2A>と<xref:System.Threading.WaitHandle.WaitAll%2A>のメソッド、<xref:System.Threading.WaitHandle>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1790b-133">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="1790b-134">この型はスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1790b-134">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1790b-135">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-135">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="waitHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1790b-136">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-136">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-137">このメソッドは、パブリックな実装の<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>のメソッド、<xref:System.Threading.WaitHandle>クラスとその派生クラス。</span><span class="sxs-lookup"><span data-stu-id="1790b-137">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="1790b-138">呼び出す標準的な実装を提供、`Dispose(Boolean)`を持つオーバー ロード、`true`引数を呼び出し、続いて、<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-138">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1790b-139">インスタンスによって保持されているすべてのリソースを解放するには、このメソッドを呼び出す`WaitHandle`または派生クラス。</span><span class="sxs-lookup"><span data-stu-id="1790b-139">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="1790b-140">このメソッドが呼び出されると、現在のインスタンスへの参照は、未定義の動作を発生します。</span><span class="sxs-lookup"><span data-stu-id="1790b-140">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1790b-141">常に呼び出す<xref:System.Threading.WaitHandle.Close%2A>または<xref:System.Threading.WaitHandle.Dispose>への参照を解放する前に、<xref:System.Threading.WaitHandle>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-141">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="1790b-142">それ以外の場合、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="1790b-142">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1790b-143">
            <para>オーバーライドする必要があります、<see langword="Dispose(Boolean)" />で割り当てられているリソースを解放するメソッドがクラスを派生します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-143">
              <para>You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1790b-144">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-144">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="waitHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1790b-145">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-145">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-146">このメソッドは、<xref:System.Threading.WaitHandle.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-146">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1790b-147">常に呼び出す<xref:System.Threading.WaitHandle.Close%2A>または<xref:System.Threading.WaitHandle.Dispose>への参照を解放する前に、<xref:System.Threading.WaitHandle>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-147">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="1790b-148">それ以外の場合、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="1790b-148">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="waitHandle.Dispose explicitDisposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing">
          <span data-ttu-id="1790b-149">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-149">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-150">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-150">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-151">このメソッドは、<xref:System.Threading.WaitHandle.Close%2A>と<xref:System.Threading.WaitHandle.Dispose>を持つメソッド、`explicitDisposing`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="1790b-151">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="1790b-152">ときに、`explicitDisposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放します。 この<xref:System.Threading.WaitHandle>オブジェクトが参照します。</span><span class="sxs-lookup"><span data-stu-id="1790b-152">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1790b-153">
            <para>オーバーライドする必要があります、<see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />で割り当てられているリソースを解放するメソッドがクラスを派生します。<see cref="M:System.Threading.WaitHandle.Close" />または<see cref="M:System.Threading.WaitHandle.Dispose" />メソッドは、他のオブジェクトから複数回呼び出すことができますされます。このメソッドをオーバーライドする場合は、事前に呼び出したで既に破棄されているオブジェクトを参照しないように注意する<see langword="Dispose" />または<see langword="Close" />です。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-153">
              <para>You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.  The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects. When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint with get, set" Usage="System.Threading.WaitHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1790b-154">Gets or sets the native operating system handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-154">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1790b-155">ネイティブ オペレーティング システム ハンドルを表す <see langword="IntPtr" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-155">An <see langword="IntPtr" /> representing the native operating system handle.</span>
          </span>
          <span data-ttu-id="1790b-156">既定値は <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> フィールドの値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-156">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-157">新しい値を割り当てる、<xref:System.Threading.WaitHandle.Handle%2A>プロパティは、前のハンドルを終了しません。</span><span class="sxs-lookup"><span data-stu-id="1790b-157">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="1790b-158">漏洩したハンドルになります。</span><span class="sxs-lookup"><span data-stu-id="1790b-158">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="1790b-159">.NET framework version 2.0 以降です。 このプロパティは使用しないでください。使用して、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>プロパティ代わりにします。</span><span class="sxs-lookup"><span data-stu-id="1790b-159">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="1790b-160">このプロパティの設定が有効なハンドルもセット、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>プロパティに設定すると、<xref:System.Threading.WaitHandle.InvalidHandle>漏洩したハンドルになります。</span><span class="sxs-lookup"><span data-stu-id="1790b-160">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="1790b-161">プロパティ値を設定する直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-161">Requires full trust for the immediate caller to set the property value.</span>
          </span>
          <span data-ttu-id="1790b-162">このメンバーは、部分的に信頼されているまたは透過的なコードで設定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-162">This member cannot be set by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="1790b-163">派生型があります<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />プロパティ値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-163">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to set the property value.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidHandle : nativeint" Usage="System.Threading.WaitHandle.InvalidHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1790b-164">Represents an invalid native operating system handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-164">Represents an invalid native operating system handle.</span>
          </span>
          <span data-ttu-id="1790b-165">This field is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-165">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-166">初期化するために内部的に使用される、<xref:System.Threading.WaitHandle.Handle%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="1790b-166">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1790b-167">
            <para>この値を使用するかどうか、<see cref="P:System.Threading.WaitHandle.Handle" />プロパティに有効なネイティブ オペレーティング システム ハンドルが含まれています。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-167">
              <para>You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeWaitHandle with get, set" Usage="System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1790b-168">Gets or sets the native operating system handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-168">Gets or sets the native operating system handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1790b-169">ネイティブ オペレーティング システム ハンドルを表す <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-169">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-170">新しい値を代入するときに、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>プロパティ、前のハンドルが閉じときに、以前<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>オブジェクトを収集します。</span><span class="sxs-lookup"><span data-stu-id="1790b-170">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="1790b-171">手動でハンドルを終了しないで、この結果であるため、<xref:System.ObjectDisposedException>ときに、<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>ハンドルを終了しようとしています。</span><span class="sxs-lookup"><span data-stu-id="1790b-171">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="1790b-172"><xref:System.Threading.WaitHandle> 実装する、<xref:System.IDisposable.Dispose%2A>パターン。</span><span class="sxs-lookup"><span data-stu-id="1790b-172"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="1790b-173">参照してください[Dispose パターン](~/docs/standard/design-guidelines/dispose-pattern.md)です。</span><span class="sxs-lookup"><span data-stu-id="1790b-173">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="1790b-174">派生したときに<xref:System.Threading.WaitHandle>を使用して、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A>ネイティブ ハンドルのオペレーティング システム ハンドルを格納するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="1790b-174">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="1790b-175">保護されたをオーバーライドする必要はありません<xref:System.Threading.WaitHandle.Dispose%2A>メソッド追加のアンマネージ リソースを使用する場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="1790b-175">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="1790b-176">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-176">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="1790b-177">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-177">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="1790b-178">派生型があります<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />をこのメンバーを呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-178">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to call this member.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1790b-179">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-179">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="1790b-180">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-180">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="1790b-181">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-181">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-182">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-182">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-183">
            <see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-183">
              <see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-184">この操作はアトミックは保証されません。</span><span class="sxs-lookup"><span data-stu-id="1790b-184">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="1790b-185">現在のスレッド信号後`toSignal`まで待機する前に、 `toWaitOn`、別のプロセッサで実行されているスレッドを示す可能性があります`toWaitOn`待機またはします。</span><span class="sxs-lookup"><span data-stu-id="1790b-185">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-186">次のコード例では、<xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29>メイン スレッドをブロックされたスレッドを通知し、スレッドがタスクを完了するまで待機を許可するメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="1790b-186">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="1790b-187">例では、5 つのスレッドを開始をブロックすることができます、<xref:System.Threading.EventWaitHandle>で作成された、<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>フラグと、ユーザーが ENTER キーを押したし、リリースの 1 つのスレッド時刻。</span><span class="sxs-lookup"><span data-stu-id="1790b-187">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="1790b-188">例は、別の 5 つのスレッド キューに配置し、すべてを使用して、解放、<xref:System.Threading.EventWaitHandle>で作成された、<xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>フラグ。</span><span class="sxs-lookup"><span data-stu-id="1790b-188">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-189">
            <paramref name="toSignal" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-189">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-190">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-190">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-191">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-191">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="1790b-192">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-192">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-193">
            <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-193">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-194">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-194">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-195">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-195">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="1790b-196">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-196">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="1790b-197">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-197">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1790b-198">An integer that represents the interval to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-198">An integer that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="1790b-199">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-199">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1790b-200">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-200">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-201">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-201">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-202">
            <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-202">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-203">この操作はアトミックは保証されません。</span><span class="sxs-lookup"><span data-stu-id="1790b-203">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="1790b-204">現在のスレッド信号後`toSignal`まで待機する前に、 `toWaitOn`、別のプロセッサで実行されているスレッドを示す可能性があります`toWaitOn`待機またはします。</span><span class="sxs-lookup"><span data-stu-id="1790b-204">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="1790b-205">場合`millisecondsTimeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-205">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-206">テストの状態、`toWaitOn`を直ちに返します。</span><span class="sxs-lookup"><span data-stu-id="1790b-206">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1790b-207">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="1790b-207">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1790b-208">`exitContext`パラメーター影響を及ぼしませんしない限り、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッドが既定以外のマネージ コンテキスト内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-208">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1790b-209">派生したクラスのインスタンスへの呼び出し内部に、スレッドがある場合に発生<xref:System.ContextBoundObject>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-209">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1790b-210">派生していないクラスのメソッドを実行されている場合でも<xref:System.ContextBoundObject>と同様、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="1790b-210">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1790b-211">既定以外のコンテキストでコードを実行するとときに、指定する`true`の`exitContext`既定以外のマネージ コンテキストを終了するスレッド (つまり、既定のコンテキストに遷移する) 実行する前に、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-211">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="1790b-212">スレッドが呼び出しの後に元の既定以外のコンテキストに戻る、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="1790b-212">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="1790b-213">これを利用する場合、コンテキスト バインド クラス<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-213">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1790b-214">その場合は、クラスのメンバーに対するすべての呼び出しが自動的に同期され、同期ドメインは、クラスのコードの本文全体です。</span><span class="sxs-lookup"><span data-stu-id="1790b-214">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1790b-215">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドの同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-215">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1790b-216">ときに、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッドが戻る同期ドメインを再入力する呼び出しを行ったスレッドを待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1790b-216">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-217">
            <paramref name="toSignal" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-217">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-218">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-218">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-219">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-219">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="1790b-220">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-220">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-221">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-221">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-222">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-222">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-223">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-223">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-224">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-224">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal">
          <span data-ttu-id="1790b-225">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-225">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span>
          </span>
        </param>
        <param name="toWaitOn">
          <span data-ttu-id="1790b-226">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-226">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1790b-227">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-227">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span>
          </span>
          <span data-ttu-id="1790b-228">If the value is -1, the wait is infinite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-228">If the value is -1, the wait is infinite.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1790b-229">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-229">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-230">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-230">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-231">
            <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-231">
              <see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-232">この操作はアトミックは保証されません。</span><span class="sxs-lookup"><span data-stu-id="1790b-232">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="1790b-233">現在のスレッド信号後`toSignal`まで待機する前に、 `toWaitOn`、別のプロセッサで実行されているスレッドを示す可能性があります`toWaitOn`待機またはします。</span><span class="sxs-lookup"><span data-stu-id="1790b-233">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="1790b-234">最大値`timeout`は<xref:System.Int32.MaxValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1790b-234">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="1790b-235">場合`timeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-235">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-236">テストの状態、`toWaitOn`を直ちに返します。</span><span class="sxs-lookup"><span data-stu-id="1790b-236">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1790b-237">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="1790b-237">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1790b-238">`exitContext`パラメーター影響を及ぼしませんしない限り、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッドが既定以外のマネージ コンテキスト内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-238">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1790b-239">派生したクラスのインスタンスへの呼び出し内部に、スレッドがある場合に発生<xref:System.ContextBoundObject>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-239">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1790b-240">派生していないクラスのメソッドを実行されている場合でも<xref:System.ContextBoundObject>と同様、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="1790b-240">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1790b-241">既定以外のコンテキストでコードを実行するとときに、指定する`true`の`exitContext`既定以外のマネージ コンテキストを終了するスレッド (つまり、既定のコンテキストに遷移する) 実行する前に、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-241">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="1790b-242">スレッドが呼び出しの後に元の既定以外のコンテキストに戻る、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="1790b-242">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="1790b-243">これを利用する場合、コンテキスト バインド クラス<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-243">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1790b-244">その場合は、クラスのメンバーに対するすべての呼び出しが自動的に同期され、同期ドメインは、クラスのコードの本文全体です。</span><span class="sxs-lookup"><span data-stu-id="1790b-244">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1790b-245">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドの同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-245">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1790b-246">ときに、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッドが戻る同期ドメインを再入力する呼び出しを行ったスレッドを待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1790b-246">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-247">
            <paramref name="toSignal" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-247">
              <paramref name="toSignal" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-248">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-248">-or-  <paramref name="toWaitOn" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-249">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-249">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="1790b-250">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-250">This method is not supported on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-251">
            <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-251">
              <paramref name="toSignal" /> is a semaphore, and it already has a full count.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-252">
            <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-252">
              <paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span>
          </span>
          <span data-ttu-id="1790b-253">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-253">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-254">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-254">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-255">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-255">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1790b-256">Waits for all the elements in the specified array to receive a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-256">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1790b-257">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-257">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="1790b-258">This array cannot contain multiple references to the same object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-258">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-259">Waits for all the elements in the specified array to receive a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-259">Waits for all the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-260">
            <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-260">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-261"><xref:System.Threading.AbandonedMutexException> .NET Framework version 2.0 の新機能です。</span><span class="sxs-lookup"><span data-stu-id="1790b-261"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1790b-262">以前のバージョンで、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドを返します。`true`ミュー テックスが破棄されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-262">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1790b-263">放棄されたミュー テックスは、多くの場合、重大なコーディング エラーを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-263">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1790b-264">システム全体のミュー テックス、可能性があります (たとえば、Windows タスク マネージャーを使用) して、アプリケーションが突然終了されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-264">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1790b-265">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1790b-265">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1790b-266"><xref:System.Threading.WaitHandle.WaitAll%2A>すべてのハンドルがシグナルを受け取るメソッドが返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-266">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="1790b-267">一部の実装では、64 を超えるハンドルが渡された場合に、<xref:System.NotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1790b-267">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="1790b-268">配列に重複が含まれている場合、呼び出しは、<xref:System.DuplicateWaitObjectException>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-268">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1790b-269"><xref:System.Threading.WaitHandle.WaitAll%2A>を持つスレッドでメソッドがサポートされていません<xref:System.STAThreadAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-269">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="1790b-270">呼び出すことと同じではこのメソッドのオーバー ロードを呼び出して、<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>メソッドのオーバー ロードは、-1 を指定する (または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) の`millisecondsTimeout`と`true`の`exitContext`します。</span><span class="sxs-lookup"><span data-stu-id="1790b-270">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-271">次のコード例では、スレッド プールを使用して非同期的に作成し、ファイルのグループへの書き込みをする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-271">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="1790b-272">個々 の書き込み操作は、作業項目と信号キューに登録が完了するとします。</span><span class="sxs-lookup"><span data-stu-id="1790b-272">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="1790b-273">メイン スレッドは、すべての項目からの通知を待機しして終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-273">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-274">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-274">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-275">-or-  One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-275">-or-  One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-276">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-276">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="1790b-277">
            <block subset="none" type="note">
              <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
            </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-277">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
              </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-278">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-278">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="1790b-279">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-279">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1790b-280">
            <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-280">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-281">The wait terminated because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-281">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-282">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-282">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-283">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-283">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1790b-284">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-284">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="1790b-285">This array cannot contain multiple references to the same object (duplicates).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-285">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1790b-286">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-286">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-287">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-287">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-288">
            <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-288">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-289">場合`millisecondsTimeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-289">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-290">これにより、待機ハンドルの状態をテストされ、すぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-290">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-291"><xref:System.Threading.WaitHandle.WaitAll%2A>待機が終了する、つまりすべてのハンドルがシグナルを受け取るか、またはタイムアウトが発生した場合に、メソッドが返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-291">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="1790b-292">一部の実装では、64 を超えるハンドルが渡された場合に、<xref:System.NotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1790b-292">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="1790b-293">配列に重複がある場合、呼び出しは、<xref:System.DuplicateWaitObjectException>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-293">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1790b-294"><xref:System.Threading.WaitHandle.WaitAll%2A>を持つスレッドでメソッドがサポートされていません<xref:System.STAThreadAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-294">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="1790b-295">このメソッドのオーバー ロードを呼び出すことは、呼び出し元と同じ、<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>オーバー ロードを指定して`false`の`exitContext`します。</span><span class="sxs-lookup"><span data-stu-id="1790b-295">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-296">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-296">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-297">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-297">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-298">-or-  <paramref name="waitHandles" /> is an array with no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-298">-or-  <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="1790b-299">
            <block subset="none" type="note">
              <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
            </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-299">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
              </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-300">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-300">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="1790b-301">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-301">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-302">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-302">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-303">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-303">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-304">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-304">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-305">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-305">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1790b-306">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-306">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="1790b-307">This array cannot contain multiple references to the same object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-307">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1790b-308">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-308">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-309">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-309">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-310">
            <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-310">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-311">場合`timeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-311">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-312">これにより、待機ハンドルの状態をテストされ、すぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-312">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-313"><xref:System.Threading.WaitHandle.WaitAll%2A>待機が終了すると、すべてのハンドルがシグナル状態になることを意味するか、タイムアウトが発生したときに、メソッドが返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-313">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="1790b-314">一部の実装では、64 を超えるハンドルが渡された場合に、<xref:System.NotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1790b-314">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="1790b-315">配列に重複が含まれている場合、呼び出しは失敗します。</span><span class="sxs-lookup"><span data-stu-id="1790b-315">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1790b-316"><xref:System.Threading.WaitHandle.WaitAll%2A>を持つスレッドでメソッドがサポートされていません<xref:System.STAThreadAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-316">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="1790b-317">最大値`timeout`は<xref:System.Int32.MaxValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1790b-317">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="1790b-318">このメソッドのオーバー ロードを呼び出すことは、呼び出し元と同じ、<xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>オーバー ロードを指定して`false`の`exitContext`します。</span><span class="sxs-lookup"><span data-stu-id="1790b-318">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-319">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-319">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-320">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-320">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-321">-or-  <paramref name="waitHandles" /> is an array with no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-321">-or-  <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="1790b-322">
            <block subset="none" type="note">
              <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
            </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-322">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.  </para>
              </block>  The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-323">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-323">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="1790b-324">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-324">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-325">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-325">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-326">The wait terminated because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-326">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-327">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-327">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-328">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-328">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1790b-329">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-329">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="1790b-330">This array cannot contain multiple references to the same object (duplicates).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-330">This array cannot contain multiple references to the same object (duplicates).</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1790b-331">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-331">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1790b-332">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-332">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-333">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-333">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-334">
            <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-334">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-335">場合`millisecondsTimeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-335">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-336">これにより、待機ハンドルの状態をテストされ、すぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-336">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-337"><xref:System.Threading.AbandonedMutexException> .NET Framework version 2.0 の新機能です。</span><span class="sxs-lookup"><span data-stu-id="1790b-337"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1790b-338">以前のバージョンで、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドを返します。`true`ミュー テックスが破棄されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-338">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1790b-339">放棄されたミュー テックスは、多くの場合、重大なコーディング エラーを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-339">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1790b-340">システム全体のミュー テックス、可能性があります (たとえば、Windows タスク マネージャーを使用) して、アプリケーションが突然終了されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-340">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1790b-341">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1790b-341">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1790b-342"><xref:System.Threading.WaitHandle.WaitAll%2A>待機が終了する、つまりすべてのハンドルがシグナルを受け取るか、またはタイムアウトが発生した場合に、メソッドが返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-342">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="1790b-343">一部の実装では、64 を超えるハンドルが渡された場合に、<xref:System.NotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1790b-343">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="1790b-344">配列に重複がある場合、呼び出しは、<xref:System.DuplicateWaitObjectException>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-344">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1790b-345"><xref:System.Threading.WaitHandle.WaitAll%2A>を持つスレッドでメソッドがサポートされていません<xref:System.STAThreadAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-345">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1790b-346">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="1790b-346">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1790b-347">`exitContext`パラメーター影響を及ぼしませんしない限り、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドが既定以外のマネージ コンテキスト内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-347">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1790b-348">派生したクラスのインスタンスへの呼び出し内部に、スレッドがある場合に発生<xref:System.ContextBoundObject>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-348">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1790b-349">派生していないクラスのメソッドを実行されている場合でも<xref:System.ContextBoundObject>と同様、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="1790b-349">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1790b-350">既定以外のコンテキストでコードを実行するとときに、指定する`true`の`exitContext`既定以外のマネージ コンテキストを終了するスレッド (つまり、既定のコンテキストに遷移する) 実行する前に、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-350">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="1790b-351">スレッドが呼び出しの後に元の既定以外のコンテキストに戻る、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="1790b-351">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="1790b-352">これを利用するときに、コンテキスト バインド クラスには、<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="1790b-352">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="1790b-353">その場合は、クラスのメンバーに対するすべての呼び出しが自動的に同期され、同期ドメインは、クラスのコードの本文全体です。</span><span class="sxs-lookup"><span data-stu-id="1790b-353">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1790b-354">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドの同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-354">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1790b-355">ときに、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドが戻る同期ドメインを再入力する呼び出しを行ったスレッドを待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1790b-355">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-356">次のコード例では、スレッド プールを使用して非同期的に作成し、ファイルのグループへの書き込みをする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-356">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="1790b-357">個々 の書き込み操作は、作業項目と信号キューに登録が完了するとします。</span><span class="sxs-lookup"><span data-stu-id="1790b-357">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="1790b-358">メイン スレッドは、すべての項目からの通知を待機しして終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-358">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-359">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-359">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-360">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-360">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-361">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-361">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="1790b-362">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-362">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-363">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-363">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="1790b-364">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-364">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1790b-365">
            <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-365">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-366">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-366">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-367">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-367">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-368">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-368">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-369">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-369">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1790b-370">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-370">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
          <span data-ttu-id="1790b-371">This array cannot contain multiple references to the same object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-371">This array cannot contain multiple references to the same object.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1790b-372">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-372">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1790b-373">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-373">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-374">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-374">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-375">
            <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-375">
              <see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-376">場合`timeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-376">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-377">これにより、待機ハンドルの状態をテストされ、すぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-377">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-378"><xref:System.Threading.AbandonedMutexException> .NET Framework version 2.0 の新機能です。</span><span class="sxs-lookup"><span data-stu-id="1790b-378"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1790b-379">以前のバージョンで、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドを返します。`true`ミュー テックスが破棄されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-379">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1790b-380">放棄されたミュー テックスは、多くの場合、重大なコーディング エラーを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-380">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1790b-381">システム全体のミュー テックス、可能性があります (たとえば、Windows タスク マネージャーを使用) して、アプリケーションが突然終了されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-381">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1790b-382">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1790b-382">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1790b-383"><xref:System.Threading.WaitHandle.WaitAll%2A>待機が終了すると、すべてのハンドルがシグナル状態になることを意味するか、タイムアウトが発生したときに、メソッドが返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-383">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="1790b-384">一部の実装では、64 を超えるハンドルが渡された場合に、<xref:System.NotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1790b-384">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="1790b-385">配列に重複が含まれている場合、呼び出しは失敗します。</span><span class="sxs-lookup"><span data-stu-id="1790b-385">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1790b-386"><xref:System.Threading.WaitHandle.WaitAll%2A>を持つスレッドでメソッドがサポートされていません<xref:System.STAThreadAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-386">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="1790b-387">最大値`timeout`は<xref:System.Int32.MaxValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1790b-387">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1790b-388">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="1790b-388">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1790b-389">`exitContext`パラメーター影響を及ぼしませんしない限り、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドが既定以外のマネージ コンテキスト内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-389">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1790b-390">派生したクラスのインスタンスへの呼び出し内部に、スレッドがある場合に発生<xref:System.ContextBoundObject>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-390">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1790b-391">派生していないクラスのメソッドを実行されている場合でも<xref:System.ContextBoundObject>と同様、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="1790b-391">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1790b-392">既定以外のコンテキストでコードを実行するとときに、指定する`true`の`exitContext`既定以外のマネージ コンテキストを終了するスレッド (つまり、既定のコンテキストに遷移する) 実行する前に、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-392">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="1790b-393">呼び出しの後に元の既定以外のコンテキストを返します、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="1790b-393">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="1790b-394">これを利用する場合、コンテキスト バインド クラス<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-394">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1790b-395">その場合は、クラスのメンバーに対するすべての呼び出しが自動的に同期され、同期ドメインは、クラスのコードの本文全体です。</span><span class="sxs-lookup"><span data-stu-id="1790b-395">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1790b-396">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドの同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-396">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1790b-397">ときに、<xref:System.Threading.WaitHandle.WaitAll%2A>メソッドが戻る同期ドメインを再入力する呼び出しを行ったスレッドを待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1790b-397">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-398">次のコード例では、スレッド プールを使用して非同期的に作成し、ファイルのグループへの書き込みをする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-398">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="1790b-399">個々 の書き込み操作は、作業項目と信号キューに登録が完了するとします。</span><span class="sxs-lookup"><span data-stu-id="1790b-399">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="1790b-400">メイン スレッドは、すべての項目からの通知を待機しして終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-400">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-401">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-401">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-402">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-402">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-403">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-403">-or-  <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <span data-ttu-id="1790b-404">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-404">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-405">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-405">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
          <span data-ttu-id="1790b-406">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-406">-or-  The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1790b-407">
            <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-407">
              <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-408">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-408">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-409">The wait terminated because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-409">The wait terminated because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-410">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-410">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-411">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-411">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1790b-412">Waits for any of the elements in the specified array to receive a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-412">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] -&gt; int" Usage="System.Threading.WaitHandle.WaitAny waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1790b-413">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-413">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-414">Waits for any of the elements in the specified array to receive a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-414">Waits for any of the elements in the specified array to receive a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-415">The array index of the object that satisfied the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-415">The array index of the object that satisfied the wait.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-416"><xref:System.Threading.AbandonedMutexException> .NET Framework version 2.0 の新機能です。</span><span class="sxs-lookup"><span data-stu-id="1790b-416"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1790b-417">以前のバージョンで、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドを返します。`true`ミュー テックスを破棄するために、待機が終了した場合。</span><span class="sxs-lookup"><span data-stu-id="1790b-417">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="1790b-418">放棄されたミュー テックスは、多くの場合、重大なコーディング エラーを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-418">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1790b-419">システム全体のミュー テックス、可能性があります (たとえば、Windows タスク マネージャーを使用) して、アプリケーションが突然終了されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-419">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1790b-420">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1790b-420">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1790b-421"><xref:System.Threading.WaitHandle.WaitAny%2A>メソッドがスローされます、<xref:System.Threading.AbandonedMutexException>放棄されたミュー テックスのため、待機が完了したときにのみです。</span><span class="sxs-lookup"><span data-stu-id="1790b-421">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="1790b-422">場合`waitHandles`放棄されたミュー テックスよりも低いインデックス番号を持つリリースされたミュー テックスが含まれています、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが正常に完了して、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="1790b-422">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1790b-423">.NET Framework バージョン 2.0 では、スレッドが終了したり、明示的に解放せず中止したりする場合よりも前のバージョンで、 <xref:System.Threading.Mutex>、および`Mutex`で 0 (ゼロ) のインデックス位置にある、`WaitAny`別のスレッドによって返されるインデックスで配列`WaitAny`は0 ではなく 128 です。</span><span class="sxs-lookup"><span data-stu-id="1790b-423">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="1790b-424">このメソッドは、いずれかのハンドルがシグナルを受け取るを返します。</span><span class="sxs-lookup"><span data-stu-id="1790b-424">This method returns when any handle is signaled.</span></span> <span data-ttu-id="1790b-425">1 つ以上のオブジェクトは、呼び出し時にシグナル状態になります、戻り値がシグナル状態のすべてのオブジェクトの最小のインデックス値を含むシグナル状態のオブジェクトの配列インデックス。</span><span class="sxs-lookup"><span data-stu-id="1790b-425">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="1790b-426">一部の実装では、64 のハンドルが渡される、複数の場合で、<xref:System.NotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1790b-426">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="1790b-427">呼び出すことと同じではこのメソッドのオーバー ロードを呼び出して、<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>メソッドのオーバー ロードは、-1 を指定する (または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) の`millisecondsTimeout`と`true`の`exitContext`します。</span><span class="sxs-lookup"><span data-stu-id="1790b-427">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-428">次のコード例を呼び出すことを示しています、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-428">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-429">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-429">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-430">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-430">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-431">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-431">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1790b-432">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-432">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-433">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-433">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-434">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-434">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1790b-435">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-435">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-436">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-436">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1790b-437">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-437">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1790b-438">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-438">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-439">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-439">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-440">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-440">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-441">場合`millisecondsTimeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-441">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-442">これにより、待機ハンドルの状態をテストされ、すぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-442">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-443"><xref:System.Threading.WaitHandle.WaitAny%2A>メソッドがスローされます、<xref:System.Threading.AbandonedMutexException>放棄されたミュー テックスのため、待機が完了したときにのみです。</span><span class="sxs-lookup"><span data-stu-id="1790b-443">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="1790b-444">場合`waitHandles`放棄されたミュー テックスよりも低いインデックス番号を持つリリースされたミュー テックスが含まれています、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが正常に完了して、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="1790b-444">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="1790b-445">このメソッドは、待機が終了すると、ハンドルのいずれかが通知されるとき、またはタイムアウトが発生したときに返します。</span><span class="sxs-lookup"><span data-stu-id="1790b-445">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="1790b-446">1 つ以上のオブジェクトは、呼び出し時にシグナル状態になります、戻り値がシグナル状態のすべてのオブジェクトの最小のインデックス値を含むシグナル状態のオブジェクトの配列インデックス。</span><span class="sxs-lookup"><span data-stu-id="1790b-446">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="1790b-447">一部の実装では、64 のハンドルが渡される、複数の場合で、<xref:System.NotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1790b-447">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="1790b-448">このメソッドのオーバー ロードを呼び出すことは、呼び出し元と同じ、<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29>オーバー ロードを指定して`false`の`exitContext`します。</span><span class="sxs-lookup"><span data-stu-id="1790b-448">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-449">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-449">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-450">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-450">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-451">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-451">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-452">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-452">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-453">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-453">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-454">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-454">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1790b-455">
            <paramref name="waitHandles" /> is an array with no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-455">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-456">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-456">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1790b-457">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-457">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1790b-458">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-458">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-459">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-459">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-460">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-460">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-461">場合`timeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-461">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-462">これにより、待機ハンドルの状態をテストされ、すぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-462">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-463"><xref:System.Threading.WaitHandle.WaitAny%2A>メソッドがスローされます、<xref:System.Threading.AbandonedMutexException>放棄されたミュー テックスのため、待機が完了したときにのみです。</span><span class="sxs-lookup"><span data-stu-id="1790b-463">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="1790b-464">場合`waitHandles`放棄されたミュー テックスよりも低いインデックス番号を持つリリースされたミュー テックスが含まれています、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが正常に完了して、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="1790b-464">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="1790b-465">このメソッドは、待機が終了すると、ハンドルのいずれかが通知されるとき、またはタイムアウトが発生したときに返します。</span><span class="sxs-lookup"><span data-stu-id="1790b-465">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="1790b-466">1 つ以上のオブジェクトは、呼び出し時にシグナル状態になります、戻り値がシグナル状態のすべてのオブジェクトの最小のインデックス値を含むシグナル状態のオブジェクトの配列インデックス。</span><span class="sxs-lookup"><span data-stu-id="1790b-466">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="1790b-467">一部の実装では、64 のハンドルが渡される、複数の場合で、<xref:System.NotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1790b-467">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="1790b-468">最大値`timeout`は<xref:System.Int32.MaxValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1790b-468">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="1790b-469">このメソッドのオーバー ロードを呼び出すことは、呼び出し元と同じ、<xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29>オーバー ロードを指定して`false`の`exitContext`します。</span><span class="sxs-lookup"><span data-stu-id="1790b-469">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-470">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-470">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-471">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-471">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-472">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-472">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-473">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-473">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-474">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-474">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-475">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-475">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1790b-476">
            <paramref name="waitHandles" /> is an array with no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-476">
              <paramref name="waitHandles" /> is an array with no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-477">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-477">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1790b-478">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-478">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1790b-479">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-479">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1790b-480">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-480">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-481">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-481">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-482">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-482">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-483">場合`millisecondsTimeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-483">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-484">これにより、待機ハンドルの状態をテストされ、すぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-484">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-485"><xref:System.Threading.AbandonedMutexException> .NET Framework version 2.0 の新機能です。</span><span class="sxs-lookup"><span data-stu-id="1790b-485"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1790b-486">以前のバージョンで、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドを返します。`true`ミュー テックスを破棄するために、待機が終了した場合。</span><span class="sxs-lookup"><span data-stu-id="1790b-486">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="1790b-487">放棄されたミュー テックスは、多くの場合、重大なコーディング エラーを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-487">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1790b-488">システム全体のミュー テックス、可能性があります (たとえば、Windows タスク マネージャーを使用) して、アプリケーションが突然終了されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-488">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1790b-489">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1790b-489">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1790b-490"><xref:System.Threading.WaitHandle.WaitAny%2A>メソッドがスローされます、<xref:System.Threading.AbandonedMutexException>放棄されたミュー テックスのため、待機が完了したときにのみです。</span><span class="sxs-lookup"><span data-stu-id="1790b-490">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="1790b-491">場合`waitHandles`放棄されたミュー テックスよりも低いインデックス番号を持つリリースされたミュー テックスが含まれています、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが正常に完了して、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="1790b-491">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1790b-492">.NET Framework バージョン 2.0 では、スレッドが終了したり、明示的に解放せず中止したりする場合よりも前のバージョンで、 <xref:System.Threading.Mutex>、および`Mutex`で 0 (ゼロ) のインデックス位置にある、`WaitAny`別のスレッドによって返されるインデックスで配列`WaitAny`は0 ではなく 128 です。</span><span class="sxs-lookup"><span data-stu-id="1790b-492">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="1790b-493">このメソッドは、待機が終了すると、ハンドルのいずれかが通知されるとき、またはタイムアウトが発生したときに返します。</span><span class="sxs-lookup"><span data-stu-id="1790b-493">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="1790b-494">1 つ以上のオブジェクトは、呼び出し時にシグナル状態になります、戻り値がシグナル状態のすべてのオブジェクトの最小のインデックス値を含むシグナル状態のオブジェクトの配列インデックス。</span><span class="sxs-lookup"><span data-stu-id="1790b-494">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="1790b-495">一部の実装では、64 のハンドルが渡される、複数の場合で、<xref:System.NotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1790b-495">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1790b-496">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="1790b-496">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1790b-497">`exitContext`パラメーター影響を及ぼしませんしない限り、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが既定以外のマネージ コンテキスト内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-497">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1790b-498">派生したクラスのインスタンスへの呼び出し内部に、スレッドがある場合に発生<xref:System.ContextBoundObject>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-498">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1790b-499">派生していないクラスのメソッドを実行されている場合でも<xref:System.ContextBoundObject>と同様、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="1790b-499">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1790b-500">既定以外のコンテキストでコードを実行するとときに、指定する`true`の`exitContext`既定以外のマネージ コンテキストを終了するスレッド (つまり、既定のコンテキストに遷移する) 実行する前に、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-500">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="1790b-501">スレッドが呼び出しの後に元の既定以外のコンテキストに戻る、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="1790b-501">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="1790b-502">これを利用する場合、コンテキスト バインド クラス<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-502">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1790b-503">その場合は、クラスのメンバーに対するすべての呼び出しが自動的に同期され、同期ドメインは、クラスのコードの本文全体です。</span><span class="sxs-lookup"><span data-stu-id="1790b-503">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1790b-504">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドの同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-504">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1790b-505">ときに、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが戻る同期ドメインを再入力する呼び出しを行ったスレッドを待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1790b-505">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-506">次のコード例では、同時に複数のディスク上のファイルを検索するスレッド プールを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-506">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="1790b-507">容量に関する考慮事項については、各ディスクのルート ディレクトリだけが検索されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-507">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-508">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-508">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-509">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-509">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-510">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-510">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1790b-511">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-511">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-512">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-512">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-513">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-513">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-514">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-514">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1790b-515">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-515">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-516">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-516">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles">
          <span data-ttu-id="1790b-517">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-517">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1790b-518">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-518">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1790b-519">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-519">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-520">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-520">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-521">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-521">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-522">場合`timeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-522">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-523">これにより、待機ハンドルの状態をテストされ、すぐに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-523">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-524"><xref:System.Threading.AbandonedMutexException> .NET Framework version 2.0 の新機能です。</span><span class="sxs-lookup"><span data-stu-id="1790b-524"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1790b-525">以前のバージョンで、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドを返します。`true`ミュー テックスを破棄するために、待機が終了した場合。</span><span class="sxs-lookup"><span data-stu-id="1790b-525">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="1790b-526">放棄されたミュー テックスは、多くの場合、重大なコーディング エラーを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-526">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1790b-527">システム全体のミュー テックス、可能性があります (たとえば、Windows タスク マネージャーを使用) して、アプリケーションが突然終了されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-527">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1790b-528">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1790b-528">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1790b-529"><xref:System.Threading.WaitHandle.WaitAny%2A>メソッドがスローされます、<xref:System.Threading.AbandonedMutexException>放棄されたミュー テックスのため、待機が完了したときにのみです。</span><span class="sxs-lookup"><span data-stu-id="1790b-529">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="1790b-530">場合`waitHandles`放棄されたミュー テックスよりも低いインデックス番号を持つリリースされたミュー テックスが含まれています、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが正常に完了して、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="1790b-530">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1790b-531">.NET Framework バージョン 2.0 では、スレッドが終了したり、明示的に解放せず中止したりする場合よりも前のバージョンで、 <xref:System.Threading.Mutex>、および`Mutex`で 0 (ゼロ) のインデックス位置にある、`WaitAny`別のスレッドによって返されるインデックスで配列`WaitAny`は0 ではなく 128 です。</span><span class="sxs-lookup"><span data-stu-id="1790b-531">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="1790b-532">このメソッドは、待機が終了すると、ハンドルのいずれかが通知されるとき、またはタイムアウトが発生したときに返します。</span><span class="sxs-lookup"><span data-stu-id="1790b-532">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="1790b-533">1 つ以上のオブジェクトは、呼び出し時にシグナル状態になります、戻り値がシグナル状態のすべてのオブジェクトの最小のインデックス値を含むシグナル状態のオブジェクトの配列インデックス。</span><span class="sxs-lookup"><span data-stu-id="1790b-533">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="1790b-534">一部の実装では、64 のハンドルが渡される、複数の場合で、<xref:System.NotSupportedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1790b-534">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="1790b-535">最大値`timeout`は<xref:System.Int32.MaxValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1790b-535">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1790b-536">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="1790b-536">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1790b-537">`exitContext`パラメーター影響を及ぼしませんしない限り、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが既定以外のマネージ コンテキスト内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-537">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1790b-538">派生したクラスのインスタンスへの呼び出し内部に、スレッドがある場合に発生<xref:System.ContextBoundObject>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-538">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1790b-539">派生していないクラスのメソッドを実行されている場合でも<xref:System.ContextBoundObject>と同様、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="1790b-539">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1790b-540">既定以外のコンテキストでコードを実行するとときに、指定する`true`の`exitContext`既定以外のマネージ コンテキストを終了するスレッド (つまり、既定のコンテキストに遷移する) 実行する前に、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-540">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="1790b-541">スレッドが呼び出しの後に元の既定以外のコンテキストに戻る、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="1790b-541">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="1790b-542">これを利用する場合、コンテキスト バインド クラス<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-542">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1790b-543">その場合は、クラスのメンバーに対するすべての呼び出しが自動的に同期され、同期ドメインは、クラスのコードの本文全体です。</span><span class="sxs-lookup"><span data-stu-id="1790b-543">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1790b-544">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドの同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-544">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1790b-545">ときに、<xref:System.Threading.WaitHandle.WaitAny%2A>メソッドが戻る同期ドメインを再入力する呼び出しを行ったスレッドを待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1790b-545">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-546">次のコード例では、同時に複数のディスク上のファイルを検索するスレッド プールを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-546">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="1790b-547">容量に関する考慮事項については、各ディスクのルート ディレクトリだけが検索されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-547">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1790b-548">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-548">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="1790b-549">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-549">-or-  One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1790b-550">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-550">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="1790b-551">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-551">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-552">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-552">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-553">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-553">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-554">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-554">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1790b-555">
            <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-555">
              <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-556">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-556">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1790b-557">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-557">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : unit -&gt; bool&#xA;override this.WaitOne : unit -&gt; bool" Usage="waitHandle.WaitOne " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1790b-558">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-558">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-559">
            <see langword="true" /> if the current instance receives a signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-559">
              <see langword="true" /> if the current instance receives a signal.</span>
          </span>
          <span data-ttu-id="1790b-560">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-560">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-561"><xref:System.Threading.AbandonedMutexException> .NET Framework version 2.0 の新機能です。</span><span class="sxs-lookup"><span data-stu-id="1790b-561"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1790b-562">以前のバージョンで、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドを返します。`true`ミュー テックスが破棄されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-562">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1790b-563">放棄されたミュー テックスは、多くの場合、重大なコーディング エラーを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-563">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1790b-564">システム全体のミュー テックス、可能性があります (たとえば、Windows タスク マネージャーを使用) して、アプリケーションが突然終了されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-564">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1790b-565">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1790b-565">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1790b-566">このメソッドは、現在のインスタンスまで、無期限にブロックの呼び出し元がシグナルを受信します。</span><span class="sxs-lookup"><span data-stu-id="1790b-566">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="1790b-567">このメソッドのブロックを使用して、<xref:System.Threading.WaitHandle>別のスレッドからがシグナルを受け取る、非同期操作が完了したときに、生成されるなどです。</span><span class="sxs-lookup"><span data-stu-id="1790b-567">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="1790b-568">詳細については、<xref:System.IAsyncResult> インターフェイスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1790b-568">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="1790b-569">呼び出すことと同じではこのメソッドのオーバー ロードを呼び出して、<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>メソッドのオーバー ロードは、-1 を指定するまたは<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、最初のパラメーターと`false`2 番目のパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="1790b-569">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="1790b-570">派生クラスの動作をカスタマイズするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="1790b-570">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-571">次のコード例では、待機ハンドルを使用して、バック グラウンド スレッドの実行が完了するまで待機するときに終了してから、プロセスの状態を保持する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-571">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1790b-572">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-572">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-573">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-573">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-574">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-574">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-575">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-575">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int -&gt; bool&#xA;override this.WaitOne : int -&gt; bool" Usage="waitHandle.WaitOne millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1790b-576">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-576">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-577">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-577">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-578">
            <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-578">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-579">場合`millisecondsTimeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-579">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-580">待機ハンドルの状態をテストし、直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-580">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-581">このメソッドはブロック、現在のインスタンス シグナルを受け取るか、タイムアウトまでの呼び出し元が発生します。</span><span class="sxs-lookup"><span data-stu-id="1790b-581">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="1790b-582">このメソッドのブロックを使用して、<xref:System.Threading.WaitHandle>別のスレッドからがシグナルを受け取る、非同期操作が完了したときに、生成されるなどです。</span><span class="sxs-lookup"><span data-stu-id="1790b-582">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="1790b-583">詳細については、<xref:System.IAsyncResult> インターフェイスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1790b-583">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="1790b-584">派生クラスの動作をカスタマイズするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="1790b-584">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="1790b-585">このメソッドのオーバー ロードを呼び出すことは、呼び出し元と同じ、<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>オーバー ロードを指定して`false`の`exitContext`します。</span><span class="sxs-lookup"><span data-stu-id="1790b-585">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-586">次のコード例では、待機ハンドルを使用して、バック グラウンド スレッドの実行が完了するまで待機するときに終了してから、プロセスの状態を保持する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-586">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1790b-587">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-587">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-588">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-588">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-589">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-589">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-590">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-590">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-591">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-591">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan -&gt; bool&#xA;override this.WaitOne : TimeSpan -&gt; bool" Usage="waitHandle.WaitOne timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1790b-592">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-592">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-593">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-593">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-594">
            <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-594">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-595">場合`timeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-595">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-596">待機ハンドルの状態をテストし、直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-596">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-597">このメソッドはブロック、現在のインスタンス シグナルを受け取るか、タイムアウトまでの呼び出し元が発生します。</span><span class="sxs-lookup"><span data-stu-id="1790b-597">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="1790b-598">このメソッドのブロックを使用して、<xref:System.Threading.WaitHandle>別のスレッドからがシグナルを受け取る、非同期操作が完了したときに、生成されるなどです。</span><span class="sxs-lookup"><span data-stu-id="1790b-598">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="1790b-599">詳細については、<xref:System.IAsyncResult> インターフェイスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1790b-599">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="1790b-600">派生クラスの動作をカスタマイズするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="1790b-600">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="1790b-601">最大値`timeout`は<xref:System.Int32.MaxValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1790b-601">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="1790b-602">このメソッドのオーバー ロードを呼び出すことは、呼び出し元と同じ、<xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29>オーバー ロードを指定して`false`の`exitContext`します。</span><span class="sxs-lookup"><span data-stu-id="1790b-602">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1790b-603">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-603">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-604">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-604">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-605">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-605">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-606">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-606">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-607">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-607">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int * bool -&gt; bool&#xA;override this.WaitOne : int * bool -&gt; bool" Usage="waitHandle.WaitOne (millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1790b-608">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-608">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1790b-609">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-609">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-610">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-610">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-611">
            <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-611">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-612">場合`millisecondsTimeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-612">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-613">待機ハンドルの状態をテストし、直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-613">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-614"><xref:System.Threading.AbandonedMutexException> .NET Framework version 2.0 の新機能です。</span><span class="sxs-lookup"><span data-stu-id="1790b-614"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1790b-615">以前のバージョンで、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドを返します。`true`ミュー テックスが破棄されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-615">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1790b-616">放棄されたミュー テックスは、多くの場合、重大なコーディング エラーを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-616">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1790b-617">システム全体のミュー テックス、可能性があります (たとえば、Windows タスク マネージャーを使用) して、アプリケーションが突然終了されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-617">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1790b-618">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1790b-618">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1790b-619">このメソッドはブロック、現在のインスタンス シグナルを受け取るか、タイムアウトまでの呼び出し元が発生します。</span><span class="sxs-lookup"><span data-stu-id="1790b-619">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="1790b-620">このメソッドのブロックを使用して、<xref:System.Threading.WaitHandle>別のスレッドからがシグナルを受け取る、非同期操作が完了したときに、生成されるなどです。</span><span class="sxs-lookup"><span data-stu-id="1790b-620">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="1790b-621">詳細については、<xref:System.IAsyncResult> インターフェイスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1790b-621">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="1790b-622">派生クラスの動作をカスタマイズするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="1790b-622">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1790b-623">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="1790b-623">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1790b-624">`exitContext`パラメーター影響を及ぼしませんしない限り、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドが既定以外のマネージ コンテキスト内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-624">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1790b-625">派生したクラスのインスタンスへの呼び出し内部に、スレッドがある場合に発生<xref:System.ContextBoundObject>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-625">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1790b-626">派生していないクラスのメソッドを実行されている場合でも<xref:System.ContextBoundObject>と同様、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="1790b-626">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1790b-627">既定以外のコンテキストでコードを実行するとときに、指定する`true`の`exitContext`既定以外のマネージ コンテキストを終了するスレッド (つまり、既定のコンテキストに遷移する) 実行する前に、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-627">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="1790b-628">スレッドが呼び出しの後に元の既定以外のコンテキストに戻る、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="1790b-628">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="1790b-629">これを利用する場合、コンテキスト バインド クラス<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-629">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1790b-630">その場合は、クラスのメンバーに対するすべての呼び出しが自動的に同期され、同期ドメインは、クラスのコードの本文全体です。</span><span class="sxs-lookup"><span data-stu-id="1790b-630">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1790b-631">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドの同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-631">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1790b-632">ときに、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドが戻る同期ドメインを再入力する呼び出しを行ったスレッドを待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1790b-632">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-633">例を次にどのように<xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29>メソッドのオーバー ロードは同期ドメイン内で呼び出された場合に動作します。</span><span class="sxs-lookup"><span data-stu-id="1790b-633">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="1790b-634">最初に、スレッドが待機する`exitContext`'éý'`false`し、待機のタイムアウト時間が経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="1790b-634">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="1790b-635">最初のスレッドが終了しで待機した後、2 番目のスレッドが実行される`exitContext`'éý'`true`です。</span><span class="sxs-lookup"><span data-stu-id="1790b-635">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="1790b-636">この 2 番目のスレッドの待機ハンドルの通知への呼び出しがブロックされていないと、印刷待ちタイムアウトする前に、スレッドが完了するとします。</span><span class="sxs-lookup"><span data-stu-id="1790b-636">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1790b-637">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-637">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-638">
            <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-638">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-639">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-639">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-640">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-640">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-641">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-641">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan * bool -&gt; bool&#xA;override this.WaitOne : TimeSpan * bool -&gt; bool" Usage="waitHandle.WaitOne (timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1790b-642">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-642">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="1790b-643">
            <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-643">
              <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1790b-644">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-644">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1790b-645">
            <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-645">
              <see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-646">場合`timeout`が 0 の場合、メソッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="1790b-646">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="1790b-647">待機ハンドルの状態をテストし、直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-647">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="1790b-648"><xref:System.Threading.AbandonedMutexException> .NET Framework version 2.0 の新機能です。</span><span class="sxs-lookup"><span data-stu-id="1790b-648"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="1790b-649">以前のバージョンで、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドを返します。`true`ミュー テックスが破棄されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-649">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="1790b-650">放棄されたミュー テックスは、多くの場合、重大なコーディング エラーを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-650">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="1790b-651">システム全体のミュー テックス、可能性があります (たとえば、Windows タスク マネージャーを使用) して、アプリケーションが突然終了されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-651">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="1790b-652">例外には、デバッグに役立つ情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1790b-652">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="1790b-653">このメソッドはブロック、現在のインスタンス シグナルを受け取るか、タイムアウトまでの呼び出し元が発生します。</span><span class="sxs-lookup"><span data-stu-id="1790b-653">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="1790b-654">このメソッドのブロックを使用して、<xref:System.Threading.WaitHandle>別のスレッドからがシグナルを受け取る、非同期操作が完了したときに、生成されるなどです。</span><span class="sxs-lookup"><span data-stu-id="1790b-654">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="1790b-655">詳細については、<xref:System.IAsyncResult> インターフェイスのトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="1790b-655">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="1790b-656">派生クラスの動作をカスタマイズするには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="1790b-656">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="1790b-657">最大値`timeout`は<xref:System.Int32.MaxValue?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1790b-657">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="1790b-658">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="1790b-658">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="1790b-659">`exitContext`パラメーター影響を及ぼしませんしない限り、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドが既定以外のマネージ コンテキスト内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-659">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="1790b-660">派生したクラスのインスタンスへの呼び出し内部に、スレッドがある場合に発生<xref:System.ContextBoundObject>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-660">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="1790b-661">派生していないクラスのメソッドを実行されている場合でも<xref:System.ContextBoundObject>と同様、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="1790b-661">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="1790b-662">既定以外のコンテキストでコードを実行するとときに、指定する`true`の`exitContext`既定以外のマネージ コンテキストを終了するスレッド (つまり、既定のコンテキストに遷移する) 実行する前に、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1790b-662">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="1790b-663">スレッドが呼び出しの後に元の既定以外のコンテキストに戻る、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="1790b-663">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="1790b-664">これを利用する場合、コンテキスト バインド クラス<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>です。</span><span class="sxs-lookup"><span data-stu-id="1790b-664">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="1790b-665">その場合は、クラスのメンバーに対するすべての呼び出しが自動的に同期され、同期ドメインは、クラスのコードの本文全体です。</span><span class="sxs-lookup"><span data-stu-id="1790b-665">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="1790b-666">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドの同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="1790b-666">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="1790b-667">ときに、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッドが戻る同期ドメインを再入力する呼び出しを行ったスレッドを待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1790b-667">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-668">次のコード例では、待機ハンドルを使用して、バック グラウンド スレッドの実行が完了するまで待機するときに終了してから、プロセスの状態を保持する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-668">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1790b-669">The current instance has already been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-669">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1790b-670">
            <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-670">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.  -or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.AbandonedMutexException">
          <span data-ttu-id="1790b-671">The wait completed because a thread exited without releasing a mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-671">The wait completed because a thread exited without releasing a mutex.</span>
          </span>
          <span data-ttu-id="1790b-672">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-672">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1790b-673">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-673">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberSignature Language="F#" Value="val mutable WaitTimeout : int" Usage="System.Threading.WaitHandle.WaitTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="1790b-674">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-674">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span>
          </span>
          <span data-ttu-id="1790b-675">This field is constant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1790b-675">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1790b-676">このフィールドは、の戻り値のいずれかの`WaitAny`します。</span><span class="sxs-lookup"><span data-stu-id="1790b-676">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1790b-677">次のコード例では、同時に複数のディスク上のファイルを検索するスレッド プールを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1790b-677">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="1790b-678">容量に関する考慮事項については、各ディスクのルート ディレクトリだけが検索されます。</span><span class="sxs-lookup"><span data-stu-id="1790b-678">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>