<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7d6511fffc182b113bbc69c98954d618ef23f1e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406900" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b0a21-101">遅延初期化ルーチンを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0a21-101">Provides lazy initialization routines.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0a21-102">これらのルーチンでは、アクセスされたときのみ、ターゲットが初期化されていることを確認する代わりに参照を使用して、遅延初期化の専用インスタンスを割り当てるに必要としないようにします。</span><span class="sxs-lookup"><span data-stu-id="b0a21-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0a21-103">次の例では、遅延初期化が既に発生したかどうかを追跡するために、ブール値を使用して値を初期化するために EnsureInitialized と相互排他ロックとして使用するオブジェクトを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b0a21-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="b0a21-104">メソッド<see cref="T:System.Threading.LazyInitializer" />はスレッド セーフであると同時に複数のスレッドから呼び出される場合があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0a21-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b0a21-105">まだ初期化されていない場合は、対象の型を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-105">Initializes a target type if it hasn't already been initialized.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0a21-106">初期化される参照の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-106">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="b0a21-107">まだ初期化されていない場合は、初期化する型 <c>T</c> の参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-107">A reference of type <c>T</c> to initialize if it has not already been initialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0a21-108">まだ初期化されていない場合、型の既定のコンストラクターを使用してターゲット参照型を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-108">Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0a21-109">型 <paramref name="T" /> の初期化された参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-109">The initialized reference of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0a21-110">このメソッドは、参照型でのみ使用可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b0a21-110">This method may only be used on reference types.</span></span> <span data-ttu-id="b0a21-111">値型の初期化には、EnsureInitialized の他のオーバー ロードを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b0a21-111">To ensure initialization of value types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="b0a21-112">このメソッドは同時に使用できます複数のスレッドで初期化するために`target`です。</span><span class="sxs-lookup"><span data-stu-id="b0a21-112">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="b0a21-113">複数のスレッドがこのメソッドを同時に複数のインスタンスをアクセスする`T`作成するには、月はありませんが、1 つだけに格納される`target`です。</span><span class="sxs-lookup"><span data-stu-id="b0a21-113">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="b0a21-114">このような見つかった位置のこのメソッドは保存されないので、オブジェクトの破棄しません。</span><span class="sxs-lookup"><span data-stu-id="b0a21-114">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="b0a21-115">このようなオブジェクトを破棄する必要がある場合、オブジェクトが使用されていないかどうかを判断し、適切にオブジェクトを破棄するには、呼び出し元の責任です。</span><span class="sxs-lookup"><span data-stu-id="b0a21-115">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="b0a21-116">型 <paramref name="T" /> のコンストラクターにアクセスするためのアクセス許可がありませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-116">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="b0a21-117">型 <paramref name="T" /> には既定のコンストラクターがありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-117">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0a21-118">初期化される参照の参照型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-118">The reference type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="b0a21-119">まだ初期化されていない場合は、初期化する型 <c>T</c> の参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-119">The reference of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="b0a21-120">参照を初期化するために呼び出される関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-120">The function that is called to initialize the reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0a21-121">まだ初期化されていない場合、指定された関数を使用してターゲット参照型を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-121">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0a21-122">型 <paramref name="T" /> の初期化された値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-122">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0a21-123">このメソッドは、参照型でのみ使用可能性がありますと`valueFactory`null 参照 (Visual Basic では Nothing) を返さない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b0a21-123">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="b0a21-124">値型の初期化を確認するか、null 参照の種類を許可するには、EnsureInitialized の他のオーバー ロードを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b0a21-124">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="b0a21-125">このメソッドは同時に使用できます複数のスレッドで初期化するために`target`です。</span><span class="sxs-lookup"><span data-stu-id="b0a21-125">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="b0a21-126">複数のスレッドがこのメソッドを同時に複数のインスタンスをアクセスする`T`作成するには、月はありませんが、1 つだけに格納される`target`です。</span><span class="sxs-lookup"><span data-stu-id="b0a21-126">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="b0a21-127">このような見つかった位置のこのメソッドは保存されないので、オブジェクトの破棄しません。</span><span class="sxs-lookup"><span data-stu-id="b0a21-127">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="b0a21-128">このようなオブジェクトを破棄する必要がある場合、オブジェクトが使用されていないかどうかを判断し、適切にオブジェクトを破棄するには、呼び出し元の責任です。</span><span class="sxs-lookup"><span data-stu-id="b0a21-128">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="b0a21-129">型 <paramref name="T" /> には既定のコンストラクターがありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-129">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0a21-130">
            <paramref name="valueFactory" />null (Visual Basic の場合は Nothing) を返しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-130">
              <paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0a21-131">初期化される参照の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-131">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="b0a21-132">まだ初期化されていない場合は、初期化する型 <c>T</c> の参照または値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-132">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="initialized">
          <span data-ttu-id="b0a21-133">ターゲットが既に初期化されているかどうかを判断するブール値への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-133">A reference to a Boolean value that determines whether the target has already been initialized.</span>
          </span>
        </param>
        <param name="syncLock">
          <span data-ttu-id="b0a21-134">
            <c>target</c> を初期化するために相互排他的ロックとして使用されるオブジェクトへの参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-134">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span>
          </span>
          <span data-ttu-id="b0a21-135">
            <c>syncLock</c> が <see langword="null" /> の場合、新しいオブジェクトがインスタンス化されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-135">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0a21-136">まだ初期化されていない場合、既定のコンストラクターを使用してターゲット参照または値型を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-136">Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0a21-137">型 <paramref name="T" /> の初期化された値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-137">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0a21-138">場合`intialized`が指定されていると true の場合、さらに初期化は行われません。</span><span class="sxs-lookup"><span data-stu-id="b0a21-138">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="b0a21-139">型 <paramref name="T" /> のコンストラクターにアクセスするためのアクセス許可がありませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-139">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="b0a21-140">型 <paramref name="T" /> には既定のコンストラクターがありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-140">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="b0a21-141">初期化される参照の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-141">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="b0a21-142">まだ初期化されていない場合は、初期化する型 <c>T</c> の参照または値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-142">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="initialized">
          <span data-ttu-id="b0a21-143">ターゲットが既に初期化されているかどうかを判断するブール値への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-143">A reference to a Boolean value that determines whether the target has already been initialized.</span>
          </span>
        </param>
        <param name="syncLock">
          <span data-ttu-id="b0a21-144">
            <c>target</c> を初期化するために相互排他的ロックとして使用されるオブジェクトへの参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-144">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span>
          </span>
          <span data-ttu-id="b0a21-145">
            <c>syncLock</c> が <see langword="null" /> の場合、新しいオブジェクトがインスタンス化されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-145">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="b0a21-146">参照または値を初期化するために呼び出される関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-146">The function that is called to initialize the reference or value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0a21-147">まだ初期化されていない場合、指定された関数を使用してターゲット参照または値型を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-147">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0a21-148">型 <paramref name="T" /> の初期化された値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-148">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0a21-149">場合`intialized`が指定されていると true の場合、さらに初期化は行われません。</span><span class="sxs-lookup"><span data-stu-id="b0a21-149">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="b0a21-150">型 <paramref name="T" /> のコンストラクターにアクセスするためのアクセス許可がありませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-150">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="b0a21-151">型 <paramref name="T" /> には既定のコンストラクターがありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0a21-151">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>