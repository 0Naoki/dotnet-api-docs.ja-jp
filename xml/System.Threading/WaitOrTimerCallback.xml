<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="289e1b5b821956cddb25a0678cc80180a46e2875" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48724835" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state"><span data-ttu-id="6e15b-101">コールバック メソッドが実行されるたびに使用する情報を格納したオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6e15b-101">An object containing information to be used by the callback method each time it executes.</span></span></param>
    <param name="timedOut"><span data-ttu-id="6e15b-102"><see cref="T:System.Threading.WaitHandle" /> がタイムアウトした場合は <see langword="true" />。シグナル通知された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6e15b-102"><see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span></span></param>
    <summary><span data-ttu-id="6e15b-103"><see cref="T:System.Threading.WaitHandle" /> がシグナル通知されたとき、またはタイムアウトしたときに呼び出されるメソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="6e15b-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6e15b-104"><xref:System.Threading.WaitOrTimerCallback> 登録済みの待機ハンドルがタイムアウトになるかがシグナル通知されたときに実行するコールバック メソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="6e15b-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="6e15b-105">コールバック メソッドを渡すことによって、デリゲートを作成、<xref:System.Threading.WaitOrTimerCallback>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="6e15b-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="6e15b-106">メソッドは、ここに示すシグネチャが必要です。</span><span class="sxs-lookup"><span data-stu-id="6e15b-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="6e15b-107">登録済みの待機ハンドルを渡すことによって作成、<xref:System.Threading.WaitOrTimerCallback>デリゲートと<xref:System.Threading.WaitHandle>に<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6e15b-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6e15b-108">たびに実行されるコールバック メソッド、<xref:System.Threading.WaitHandle>タイムアウトになるかが通知されます。</span><span class="sxs-lookup"><span data-stu-id="6e15b-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="6e15b-109">Visual Basic の場合は省略できます、<xref:System.Threading.WaitOrTimerCallback>コンス トラクター、および使用して、`AddressOf`演算子にコールバック メソッドを渡すときに<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>します。</span><span class="sxs-lookup"><span data-stu-id="6e15b-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="6e15b-110">Visual Basic は、自動的に適切なデリゲート コンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6e15b-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="6e15b-111">コールバック メソッドに情報を渡す場合は、必要な情報を格納しているオブジェクトを作成しに渡す<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>登録済みの待機ハンドルを作成する場合。</span><span class="sxs-lookup"><span data-stu-id="6e15b-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="6e15b-112">コールバック メソッドが実行されるたび、`state`パラメーターには、このオブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6e15b-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="6e15b-113">コールバック メソッドを使用して、スレッド プールのスレッドを同期する方法の詳細については、次を参照してください。[マネージ スレッド プール](~/docs/standard/threading/the-managed-thread-pool.md)します。</span><span class="sxs-lookup"><span data-stu-id="6e15b-113">For more information about using callback methods to synchronize thread pool threads, see [The managed thread pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6e15b-114">次の例は、使用する方法を示します、<xref:System.Threading.WaitOrTimerCallback>待機ハンドルがシグナル通知されたときに実行されるコールバック メソッドを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="6e15b-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="6e15b-115">使用する方法も示します、<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>指定した待機ハンドルがシグナル通知されたときに、指定されたコールバック メソッドを実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6e15b-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="6e15b-116">この例では、コールバック メソッドは`WaitProc`待機ハンドルがあり、<xref:System.Threading.AutoResetEvent>します。</span><span class="sxs-lookup"><span data-stu-id="6e15b-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="6e15b-117">例では、定義、`TaskInfo`を実行するときに、コールバックに渡される情報を保持するクラス。</span><span class="sxs-lookup"><span data-stu-id="6e15b-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="6e15b-118">例は、作成、`TaskInfo`オブジェクトし、文字列データを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="6e15b-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="6e15b-119"><xref:System.Threading.RegisteredWaitHandle>によって返される、<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>に割り当てられているメソッド、`Handle`のフィールド、`TaskInfo`オブジェクトをコールバック メソッドにアクセスできるように、<xref:System.Threading.RegisteredWaitHandle>します。</span><span class="sxs-lookup"><span data-stu-id="6e15b-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="6e15b-120">加え、`TaskInfo`オブジェクトへの呼び出し、<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>メソッドを指定します、<xref:System.Threading.AutoResetEvent>タスクの待機を<xref:System.Threading.WaitOrTimerCallback>を表すデリゲート、`WaitProc`コールバック メソッド、1 秒のタイムアウト間隔、および複数のコールバック.</span><span class="sxs-lookup"><span data-stu-id="6e15b-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="6e15b-121">メイン スレッドに通知すると、<xref:System.Threading.AutoResetEvent>を呼び出してその<xref:System.Threading.EventWaitHandle.Set%2A>メソッド、<xref:System.Threading.WaitOrTimerCallback>デリゲートが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6e15b-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="6e15b-122">`WaitProc`メソッド テスト<xref:System.Threading.RegisteredWaitHandle>にタイムアウトが発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6e15b-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="6e15b-123">待機ハンドルがシグナル通知されたため、コールバックが呼び出された場合、`WaitProc`メソッドの登録を解除、 <xref:System.Threading.RegisteredWaitHandle>、さらにコールバックを停止しています。</span><span class="sxs-lookup"><span data-stu-id="6e15b-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="6e15b-124">タイムアウトの場合は、タスクは、待機を続けます。</span><span class="sxs-lookup"><span data-stu-id="6e15b-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="6e15b-125">`WaitProc`メソッドは、コンソールにメッセージを出力することによって終了します。</span><span class="sxs-lookup"><span data-stu-id="6e15b-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="6e15b-126">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="6e15b-126">Threads and Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="6e15b-127">マネージド スレッド プール</span><span class="sxs-lookup"><span data-stu-id="6e15b-127">The managed thread pool</span></span></related>
  </Docs>
</Type>