<Type Name="Semaphore" FullName="System.Threading.Semaphore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dfd4af5a6146da7c3a1e0bf3e9198f1ae1ef7404" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52214171" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Semaphore : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Semaphore extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Semaphore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Semaphore&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Semaphore sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Semaphore = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>リソースまたはリソースのプールに同時にアクセスできるスレッドの数を制限します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Threading.Semaphore>リソースのプールへのアクセスを制御するクラス。 スレッドがセマフォに入る呼び出すことによって、<xref:System.Threading.WaitHandle.WaitOne%2A>から継承されるメソッド、<xref:System.Threading.WaitHandle>クラス、およびを呼び出してセマフォの解放、<xref:System.Threading.Semaphore.Release%2A>メソッド。  
  
 セマフォのカウントは、スレッドがセマフォに入るし、スレッドがセマフォを解放するときにインクリメントされますたびに減少します。 カウントが 0 の場合、後続の要求は他のスレッドがセマフォを解放するまでブロックします。 すべてのスレッドがセマフォを解放、ときにカウントが最大値で指定されて、セマフォが作成されたとき。  
  
 FIFO や LIFO、ブロックされたスレッドがセマフォに入るなどの保証の順序はありません。  
  
 スレッドはセマフォに入る、複数回呼び出すことによって、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッド繰り返し。 これらのエントリの一部またはすべてをリリースするには、スレッドをパラメーターなしに呼び出すことができます<xref:System.Threading.Semaphore.Release>メソッドのオーバー ロードが複数回、またはそれが呼び出すことができます、<xref:System.Threading.Semaphore.Release%28System.Int32%29>メソッドのオーバー ロードが解放されるエントリの数を指定します。  
  
 <xref:System.Threading.Semaphore>クラスへの呼び出しでスレッド id は強制されません<xref:System.Threading.WaitHandle.WaitOne%2A>または<xref:System.Threading.Semaphore.Release%2A>します。 あるスレッドはセマフォの解放回数が多すぎますのプログラマの責任になります。 たとえば、セマフォの最大カウントが 2 で、スレッド A とスレッド B が両方ともセマフォに入るとします。 スレッド B でのプログラミング エラー原因を呼び出せるかどうか<xref:System.Threading.Semaphore.Release%2A>2 回、両方の呼び出しが成功します。 セマフォのカウントがいっぱいになっているときに、スレッド A も <xref:System.Threading.Semaphore.Release%2A> を呼び出すと、<xref:System.Threading.SemaphoreFullException> がスローされます。  
  
 セマフォは次の 2 つの種類: ローカル セマフォおよび名前付きシステム セマフォです。 作成する場合、<xref:System.Threading.Semaphore>オブジェクト、名前を受け入れるコンス トラクターを使用してその名前のオペレーティング システム セマフォに関連付けられています。 名前付きシステム セマフォは、オペレーティング システム全体から参照でき、プロセスの動作を同期するために使用できます。 複数作成できます<xref:System.Threading.Semaphore>同じを表すオブジェクトの名前付きシステム セマフォの場合は、および使用することができます、<xref:System.Threading.Semaphore.OpenExisting%2A>メソッドを開き、既存の名前付きシステム セマフォです。  
  
 プロセス内でのみ、ローカル セマフォが存在します。 ローカル <xref:System.Threading.Semaphore> オブジェクトを参照するプロセス内のすべてのスレッドから使用できます。 各<xref:System.Threading.Semaphore>オブジェクトが別のローカル セマフォです。  
  
   
  
## Examples  
 次のコード例は、0 の最初の数の 3 つの最大数、およびセマフォを作成します。 例では、セマフォの待機をブロックする 5 つのスレッドを開始します。 メイン スレッドを使用して、<xref:System.Threading.Semaphore.Release%28System.Int32%29>メソッドのオーバー ロードは、次の 3 つのスレッドがセマフォに入るをできるように、最大容量にセマフォ カウントを増やします。 各スレッドを使用して、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッドが、作業し、呼び出しをシミュレートするために、1 秒間待機する、<xref:System.Threading.Semaphore.Release>セマフォを解放するメソッドのオーバー ロードします。 セマフォがリリースされるたびに、前のセマフォのカウントが表示されます。 コンソール メッセージ追跡セマフォを使用します。 各スレッドは、出力を読みやすくするために、シミュレートされた動作の間隔が若干増加します。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">同時に許可されるセマフォの要求の初期数。</param>
        <param name="maximumCount">同時に許可されるセマフォの要求の最大数。</param>
        <summary>エントリ数の初期値と同時実行エントリの最大数を指定して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターでは、無名のセマフォを初期化します。 このようなセマフォのインスタンスを使用するすべてのスレッドには、インスタンスへの参照が必要です。  
  
 場合`initialCount`がより小さい`maximumCount`、現在のスレッドを呼び出した場合と同じ効果が<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`マイナス`initialCount`) 時刻。 セマフォを作成するスレッドのエントリを予約したくない場合の同じ番号を使用して、`maximumCount`と`initialCount`します。  
  
   
  
## Examples  
 次の例は、0 の最初の数の 3 つの最大数、およびセマフォを作成します。 例では、セマフォの待機をブロックする 5 つのスレッドを開始します。 メイン スレッドを使用して、<xref:System.Threading.Semaphore.Release%28System.Int32%29>メソッドのオーバー ロードは、次の 3 つのスレッドがセマフォに入るをできるように、最大容量にセマフォ カウントを増やします。 各スレッドを使用して、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッドが、作業し、呼び出しをシミュレートするために、1 秒間待機する、<xref:System.Threading.Semaphore.Release>セマフォを解放するメソッドのオーバー ロードします。 セマフォがリリースされるたびに、前のセマフォのカウントが表示されます。 コンソール メッセージ追跡セマフォを使用します。 各スレッドは、出力を読みやすくするために、シミュレートされた動作の間隔が若干増加します。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> が <paramref name="maximumCount" /> より大きくなっています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> が 1 未満です。  
  
- または - 
 <paramref name="initialCount" /> が 0 未満です。</exception>
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialCount">同時に許可されるセマフォの要求の初期数。</param>
        <param name="maximumCount">同時に許可されるセマフォの要求の最大数。</param>
        <param name="name">名前付きシステム セマフォ オブジェクトの名前。</param>
        <summary>エントリ数の初期値と同時実行エントリの最大数を指定し、オプションでシステム セマフォ オブジェクトの名前を指定して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの初期化を<xref:System.Threading.Semaphore>名前付きシステム セマフォを表すオブジェクト。 複数作成できます<xref:System.Threading.Semaphore>名前付きシステム セマフォが同じを表すオブジェクト。  
  
 名前付きシステム セマフォが存在しない場合、最初の数で指定された最大数と作成`initialCount`と`maximumCount`します。 名前付きシステム セマフォが既に存在する場合`initialCount`と`maximumCount`を使用しないが、無効な値では例外が発生します。 かどうか、名前付きシステム セマフォが作成を決定する必要がある場合、使用、<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29>コンス トラクター オーバー ロードを代用します。  
  
> [!IMPORTANT]
>  同じ番号を指定する、推奨される方法は、このコンス トラクター オーバー ロードを使用して、`initialCount`と`maximumCount`します。 場合`initialCount`がより小さい`maximumCount`、し、名前付きシステム セマフォが作成された、現在のスレッドを呼び出した場合と同じ効果が<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`マイナス`initialCount`) 時刻。 ただし、このコンス トラクター オーバー ロードではありません、名前付きシステム セマフォが作成されたかどうかを判断する方法です。  
  
 指定した場合`null`または空の文字列の`name`、ローカル セマフォが作成されたことを呼び出した場合と、<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>コンス トラクター オーバー ロードします。  
  
 名前付きセマフォは、オペレーティング システム全体表示であるために、プロセス境界をまたいでリソースの使用を調整するため、使用できます。  
  
 名前付きシステム セマフォが存在するかどうかを確認、使用するかどうか、<xref:System.Threading.Semaphore.OpenExisting%2A>メソッド。 <xref:System.Threading.Semaphore.OpenExisting%2A>メソッドは、既存の名前付きセマフォを開こうとすると、システム セマフォが存在しない場合は、例外をスローします。  
  
   
  
## Examples  
 次のコード例では、名前付きセマフォのプロセス間の動作を示します。 例は、最大数が 5 つ、最大 5 人の最初の数と名前付きセマフォを作成します。 プログラムは、次の 3 つの呼び出し、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッド。 このため、2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーが 3 番目の呼び出しでブロックは<xref:System.Threading.WaitHandle.WaitOne%2A>します。 2 番目のブロックを解除するプログラムの最初のコピーで 1 つまたは複数のエントリを解放します。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> が <paramref name="maximumCount" /> より大きくなっています。  
  
- または - 
 <paramref name="name" /> が 260 文字を超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> が 1 未満です。  
  
- または - 
 <paramref name="initialCount" /> が 0 未満です。</exception>
        <exception cref="T:System.IO.IOException">Win32 エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">アクセス制御セキュリティを使用した名前付きセマフォが存在しており、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" /> がありません。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">名前付きセマフォを作成できません。原因として、別の型の待機ハンドルに同じ名前が付けられていることが考えられます。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">名前付きシステム セマフォを作成するアンマネージ コードを呼び出す。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)  
  
セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</permission>
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialCount">同時に満たされるセマフォの要求の初期数。</param>
        <param name="maximumCount">同時に満たされるセマフォの要求の最大数。</param>
        <param name="name">名前付きシステム セマフォ オブジェクトの名前。</param>
        <param name="createdNew">このメソッドから制御が戻るときに、ローカル セマフォが作成された場合 (<paramref name="name" /> が <see langword="null" /> または空の文字列の場合)、または指定した名前付きシステム セマフォが作成された場合は <see langword="true" /> が格納されます。指定した名前付きシステム セマフォが既に存在する場合は <see langword="false" /> が格納されます。 このパラメーターは初期化せずに渡されます。</param>
        <summary>エントリ数の初期値と同時実行エントリの最大数を指定し、オプションでシステム セマフォ オブジェクトの名前を指定し、新しいシステム セマフォが作成されたかどうかを示す値を受け取る変数を指定して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの初期化を<xref:System.Threading.Semaphore>名前付きシステム セマフォを表すオブジェクト。 複数作成できます<xref:System.Threading.Semaphore>名前付きシステム セマフォが同じを表すオブジェクト。  
  
 名前付きシステム セマフォが存在しない場合、最初の数で指定された最大数と作成`initialCount`と`maximumCount`します。 名前付きシステム セマフォが既に存在する場合`initialCount`と`maximumCount`を使用しないが、無効な値では例外が発生します。 使用`createdNew`システム セマフォが作成されたかどうかを判断します。  
  
 場合`initialCount`がより小さい`maximumCount`、および`createdNew`は`true`、現在のスレッドを呼び出した場合と同じ効果が<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`マイナス`initialCount`) 回。  
  
 指定した場合`null`または空の文字列の`name`、ローカル セマフォが作成されたことを呼び出した場合と、<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>コンス トラクター オーバー ロードします。 この場合、`createdNew`は常に`true`します。  
  
 名前付きセマフォは、オペレーティング システム全体表示であるために、プロセス境界をまたいでリソースの使用を調整するため、使用できます。  
  
   
  
## Examples  
 次のコード例では、名前付きセマフォのプロセス間の動作を示します。 例では、最大数が 5 つ、2 つの最初の数と名前付きセマフォを作成します。 つまり、コンス トラクターを呼び出すスレッドの 3 つのエントリを予約します。 場合`createNew`は`false`、プログラムは、次の 3 つの呼び出し、<xref:System.Threading.WaitHandle.WaitOne%2A>メソッド。 このため、2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーが 3 番目の呼び出しでブロックは<xref:System.Threading.WaitHandle.WaitOne%2A>します。 2 番目のブロックを解除するプログラムの最初のコピーで 1 つまたは複数のエントリを解放します。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> が <paramref name="maximumCount" /> より大きくなっています。  
  
- または - 
 <paramref name="name" /> が 260 文字を超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> が 1 未満です。  
  
- または - 
 <paramref name="initialCount" /> が 0 未満です。</exception>
        <exception cref="T:System.IO.IOException">Win32 エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">アクセス制御セキュリティを使用した名前付きセマフォが存在しており、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" /> がありません。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">名前付きセマフォを作成できません。原因として、別の型の待機ハンドルに同じ名前が付けられていることが考えられます。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">名前付きシステム セマフォを作成するアンマネージ コードを呼び出す。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)  
  
セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</permission>
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  * System.Security.AccessControl.SemaphoreSecurity -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew, semaphoreSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="initialCount">同時に満たされるセマフォの要求の初期数。</param>
        <param name="maximumCount">同時に満たされるセマフォの要求の最大数。</param>
        <param name="name">名前付きシステム セマフォ オブジェクトの名前。</param>
        <param name="createdNew">このメソッドから制御が戻るときに、ローカル セマフォが作成された場合 (<paramref name="name" /> が <see langword="null" /> または空の文字列の場合)、または指定した名前付きシステム セマフォが作成された場合は <see langword="true" /> が格納されます。指定した名前付きシステム セマフォが既に存在する場合は <see langword="false" /> が格納されます。 このパラメーターは初期化せずに渡されます。</param>
        <param name="semaphoreSecurity">名前付きシステム セマフォに適用するアクセス制御セキュリティを表す <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> オブジェクト。</param>
        <summary>エントリ数の初期値と同時実行エントリの最大数を指定し、オプションでシステム セマフォ オブジェクトの名前を指定し、新しいシステム セマフォが作成されたかどうかを示す値を受け取る変数を指定し、システム セマフォのセキュリティ アクセス制御を指定して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを使用すると、作成時、他のコードがセマフォを乗っ取ることを防止、アクセス制御セキュリティを名前付きシステム セマフォに適用できます。  
  
 このコンス トラクターの初期化を<xref:System.Threading.Semaphore>名前付きシステム セマフォを表すオブジェクト。 複数作成できます<xref:System.Threading.Semaphore>名前付きシステム セマフォが同じを表すオブジェクト。  
  
 名前付きシステム セマフォが存在しない場合は、指定したアクセス制御セキュリティで作成されます。 名前付きセマフォが存在する場合は、指定したアクセス制御セキュリティが無視されます。  
  
> [!NOTE]
>  呼び出し元が新しく作成された完全な制御<xref:System.Threading.Semaphore>オブジェクトいて`semaphoreSecurity`拒否するか、現在のユーザーへのいくつかのアクセス権の付与に失敗しました。 ただし場合は、現在のユーザーが別の取得を試みます<xref:System.Threading.Semaphore>オブジェクトを表す、同じ名前付きセマフォをいずれかを使用して、コンス トラクターまたは<xref:System.Threading.Semaphore.OpenExisting%2A>メソッドでは、Windows アクセス制御セキュリティを適用します。  
  
 名前付きシステム セマフォが存在しない場合、最初の数で指定された最大数と作成`initialCount`と`maximumCount`します。 名前付きシステム セマフォが既に存在する場合`initialCount`と`maximumCount`を使用しないが、無効な値では例外が発生します。 使用して、`createdNew`パラメーターをこのコンス トラクターによって、システム セマフォが作成されたかどうかを判断します。  
  
 場合`initialCount`がより小さい`maximumCount`、および`createdNew`は`true`、現在のスレッドを呼び出した場合と同じ効果が<xref:System.Threading.WaitHandle.WaitOne%2A>(`maximumCount`マイナス`initialCount`) 回。  
  
 指定した場合`null`または空の文字列の`name`、ローカル セマフォが作成されたことを呼び出した場合と、<xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29>コンス トラクター オーバー ロードします。 この場合、`createdNew`は常に`true`します。  
  
 名前付きセマフォは、オペレーティング システム全体表示であるために、プロセス境界をまたいでリソースの使用を調整するため、使用できます。  
  
   
  
## Examples  
 次のコード例では、アクセス制御セキュリティを名前付きセマフォのプロセス間の動作を示します。 この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>名前付きセマフォの存在をテストするメソッドのオーバー ロードします。 セマフォが存在しない場合、2 つの最大数と、セマフォを使用する権利を現在のユーザーに拒否の読み取りし、セマフォのアクセス許可を変更する権限を付与するアクセス制御セキュリティが作成されます。 2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>メソッド。 例外がキャッチされ、例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>メソッドのオーバー ロードを読み取って、アクセス許可を変更するために必要な権限を持つ、セマフォを開きます。  
  
 アクセス許可が変更された後、セマフォは、入力し、解放に必要な権限で開かれます。 3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用してを実行します。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="initialCount" /> が <paramref name="maximumCount" /> より大きくなっています。  
  
- または - 
 <paramref name="name" /> が 260 文字を超えています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumCount" /> が 1 未満です。  
  
- または - 
 <paramref name="initialCount" /> が 0 未満です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">アクセス制御セキュリティを使用した名前付きセマフォが存在しており、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" /> がありません。</exception>
        <exception cref="T:System.IO.IOException">Win32 エラーが発生しました。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">名前付きセマフォを作成できません。原因として、別の型の待機ハンドルに同じ名前が付けられていることが考えられます。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">名前付きシステム セマフォを作成するアンマネージ コードを呼び出す。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体) セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</permission>
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.SemaphoreSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As SemaphoreSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::SemaphoreSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.SemaphoreSecurity" Usage="semaphore.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>名前付きシステム セマフォのアクセス制御セキュリティを取得します。</summary>
        <returns>名前付きシステム セマフォのアクセス制御セキュリティを表す <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Semaphore.GetAccessControl%2A>メソッドは次のフラグ (ビットごとの OR 演算を使用して結合) の組み合わせを使用してアクセス許可を検索する: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>、 <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>、および<xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>します。  
  
 ユーザーがいる必要があります<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType>でこのメソッドでは、およびセマフォを呼び出す権限が開かれている必要があります<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType>権限。  
  
 ローカルのセマフォでアクセス制御セキュリティは関係ありません。 場合、<xref:System.Threading.Semaphore>オブジェクトは、名前付きシステム セマフォを表していません、このメソッドが戻る、<xref:System.Security.AccessControl.SemaphoreSecurity>任意のユーザーにすべての権限を付与するオブジェクトです。  
  
   
  
## Examples  
 次のコード例では、アクセス制御セキュリティを名前付きセマフォのプロセス間の動作を示します。 この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>名前付きセマフォの存在をテストするメソッドのオーバー ロードします。  
  
 セマフォが存在しない場合、2 つの最大数と、セマフォを使用する権利を現在のユーザーに拒否の読み取りし、セマフォのアクセス許可を変更する権限を付与するアクセス制御セキュリティが作成されます。  
  
 2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>メソッド。 例外がキャッチされ、例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>メソッドのオーバー ロードを読み取って、アクセス許可を変更するために必要な権限を持つ、セマフォを開きます。 使用して、システム セマフォのアクセス制御セキュリティを取得、<xref:System.Threading.Semaphore.GetAccessControl%2A>メソッド。  
  
 アクセス許可が変更された後、セマフォは、入力し、解放に必要な権限で開かれます。 3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用してを実行します。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">現在の <see cref="T:System.Threading.Semaphore" /> オブジェクトは名前付きシステム セマフォを表していますが、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 権限がありません。  
  
- または - 
現在の <see cref="T:System.Threading.Semaphore" /> オブジェクトは名前付きシステム セマフォを表しており、<see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 権限で開かれませんでした。</exception>
        <exception cref="T:System.NotSupportedException">Windows 98 または Windows Millennium Edition はサポートされていません。</exception>
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>既に存在する場合は、指定した名前付きセマフォを開きます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">開くシステム セマフォの名前。</param>
        <summary>既に存在する場合は、指定した名前付きセマフォを開きます。</summary>
        <returns>名前付きシステム セマフォを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Semaphore.OpenExisting%2A>メソッドが指定した名前付きセマフォを開こうとします。 システム セマフォが存在しない場合、このメソッドは、システム セマフォを作成する代わりに、例外をスローします。 既に存在しない場合にシステム セマフォを作成するには、いずれかを使用、<xref:System.Threading.Semaphore.%23ctor%2A>コンス トラクターを持つ、`name`パラメーター。  
  
 このメソッドに同じ値を使用する複数の呼び出し`name`必ずしも返さない同じ<xref:System.Threading.Semaphore>場合でも、表現が返されるオブジェクトと同じ名前付きシステム セマフォ オブジェクトします。  
  
 このメソッドのオーバー ロードの呼び出しと同じですが、<xref:System.Threading.Semaphore.OpenExisting%2A>メソッドのオーバー ロードを指定して<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>と<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>権限、ビットごとの OR 演算を使用して結合します。  
  
 指定する、<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>フラグによって、セマフォに入るためのスレッドを指定して、<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>フラグによって、スレッドを呼び出す、<xref:System.Threading.Semaphore.Release%2A>メソッド。  
  
   
  
## Examples  
 次のコード例では、アクセス制御セキュリティを名前付きセマフォのプロセス間の動作を示します。 この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>名前付きセマフォの存在をテストするメソッドのオーバー ロードします。  
  
 セマフォが存在しない場合、2 つの最大数と、セマフォを使用する権利が、現在のユーザーを拒否しますが、読み取りし、セマフォのアクセス許可を変更する権限を付与するアクセス制御のセキュリティが作成されます。  
  
 2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>メソッドのオーバー ロードします。 例外がキャッチされ、例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>メソッドのオーバー ロードを読み取って、アクセス許可を変更するために必要な権限を持つ、セマフォを開きます。  
  
 アクセス許可が変更された後、セマフォを入力し、それを解放するために必要な権限で開きます。 3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用してを実行します。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> が空の文字列です。  
  
- または - 
 <paramref name="name" /> が 260 文字を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">名前付きセマフォが存在しません。</exception>
        <exception cref="T:System.IO.IOException">Win32 エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">名前付きセマフォは存在しますが、それを使用するために必要なセキュリティ アクセスがユーザーにありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">名前付きシステム セマフォを開きをアンマネージ コードを呼び出す。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)  
  
セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</permission>
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As SemaphoreRights) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.SemaphoreRights -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
      </Parameters>
      <Docs>
        <param name="name">開くシステム セマフォの名前。</param>
        <param name="rights">必要なセキュリティ アクセス権を表す列挙値のビットごとの組み合わせ。</param>
        <summary>既に存在する場合は、必要なセキュリティ アクセスで指定した名前付きセマフォを開きます。</summary>
        <returns>名前付きシステム セマフォを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `rights`パラメーターを含める必要があります、 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 、セマフォに入るためのスレッドを許可するフラグ、<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>を呼び出すスレッドを許可するフラグ、<xref:System.Threading.Semaphore.Release%2A>メソッド。  
  
 <xref:System.Threading.Semaphore.OpenExisting%2A>メソッドが、既存の名前付きセマフォを開こうとします。 システム セマフォが存在しない場合、このメソッドは、システム セマフォを作成する代わりに、例外をスローします。 既に存在しない場合にシステム セマフォを作成するには、いずれかを使用、<xref:System.Threading.Semaphore.%23ctor%2A>コンス トラクターを持つ、`name`パラメーター。  
  
 このメソッドに同じ値を使用する複数の呼び出し`name`必ずしも返さない同じ<xref:System.Threading.Semaphore>場合でも、表現が返されるオブジェクトと同じ名前付きシステム セマフォ オブジェクトします。  
  
   
  
## Examples  
 次のコード例では、アクセス制御セキュリティを名前付きセマフォのプロセス間の動作を示します。 この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>名前付きセマフォの存在をテストするメソッドのオーバー ロードします。  
  
 セマフォが存在しない場合、2 つの最大数と、セマフォを使用する権利を現在のユーザーに拒否の読み取りし、セマフォのアクセス許可を変更する権限を付与するアクセス制御セキュリティが作成されます。  
  
 2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>メソッド。 例外がキャッチされ、例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>メソッドのオーバー ロードを読み取って、アクセス許可を変更するために必要な権限を持つ、セマフォを開きます。  
  
 アクセス許可が変更された後、セマフォを入力し、それを解放するために必要な権限で開きます。 3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用してを実行します。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> が空の文字列です。  
  
- または - 
 <paramref name="name" /> が 260 文字を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">名前付きセマフォが存在しません。</exception>
        <exception cref="T:System.IO.IOException">Win32 エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">名前付きセマフォは存在しますが、必要なセキュリティ アクセス権がユーザーにありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">名前付きシステム セマフォを作成するアンマネージ コードを呼び出す。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)  
  
セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</permission>
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>セマフォから出ます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphore.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>セマフォから出て、前のカウントを返します。</summary>
        <returns>
          <see cref="Overload:System.Threading.Semaphore.Release" /> メソッドが呼び出される前のセマフォのカウント。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スレッドを使用して、通常、<xref:System.Threading.WaitHandle.WaitOne%2A>セマフォ、およびそれらを通常入力する方法では、このメソッドのオーバー ロードを使用して、終了します。  
  
 場合、<xref:System.Threading.SemaphoreFullException>によってスローされる、<xref:System.Threading.Semaphore.Release%2A>メソッドを呼び出し元のスレッドに問題が必ずしも可能性はありません。 別のスレッドでのプログラミング エラーによって、そのスレッドがセマフォに回よりも、入力した原因と考えです。  
  
 場合、現在<xref:System.Threading.Semaphore>オブジェクトは、名前付きシステム セマフォを表す、ユーザーがいる必要があります<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>にする必要がありますに開かれた権限と、セマフォ<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>権限。  
  
   
  
## Examples  
 次のコード例は、0 の最初の数の 3 つの最大数、およびセマフォを作成します。 例では、セマフォの待機をブロックする 5 つのスレッドを開始します。 メイン スレッドを使用して、<xref:System.Threading.Semaphore.Release%28System.Int32%29>メソッドのオーバー ロードは、次の 3 つのスレッドがセマフォに入るをできるように、最大容量にセマフォ カウントを増やします。 各スレッドを使用して、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッドが、作業し、呼び出しをシミュレートするために、1 秒間待機する、<xref:System.Threading.Semaphore.Release>セマフォを解放するメソッドのオーバー ロードします。  
  
 セマフォがリリースされるたびに、前のセマフォのカウントが表示されます。 コンソール メッセージ追跡セマフォを使用します。 各スレッドは、出力を読みやすくするために、シミュレートされた動作の間隔が若干増加します。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SemaphoreFullException">セマフォのカウントは既に最大値です。</exception>
        <exception cref="T:System.IO.IOException">名前付きセマフォで Win32 エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">現在のセマフォは名前付きシステム セマフォを表していますが、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> がありません。  
  
- または - 
現在のセマフォは名前付きシステム セマフォを表していますが、<see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> で開かれませんでした。</exception>
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphore.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">セマフォから出る回数。</param>
        <summary>指定した回数だけセマフォから出て、前のカウントを返します。</summary>
        <returns>
          <see cref="Overload:System.Threading.Semaphore.Release" /> メソッドが呼び出される前のセマフォのカウント。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スレッドは、セマフォを複数回入力が、このメソッドのオーバー ロードでは、全体のセマフォのカウントを 1 回の呼び出しで復元するができます。  
  
 場合、<xref:System.Threading.SemaphoreFullException>によってスローされる、<xref:System.Threading.Semaphore.Release%2A>メソッドを呼び出し元のスレッドに問題が必ずしも可能性はありません。 別のスレッドでのプログラミング エラーによって、そのスレッドがセマフォに回よりも、入力した原因と考えです。  
  
 場合、現在<xref:System.Threading.Semaphore>オブジェクトは、名前付きシステム セマフォを表す、ユーザーがいる必要があります<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>にする必要がありますに開かれた権限と、セマフォ<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>権限。  
  
   
  
## Examples  
 次のコード例は、0 の最初の数の 3 つの最大数、およびセマフォを作成します。 例では、セマフォの待機をブロックする 5 つのスレッドを開始します。 メイン スレッドを使用して、<xref:System.Threading.Semaphore.Release%28System.Int32%29>メソッドのオーバー ロードは、次の 3 つのスレッドがセマフォに入るをできるように、最大容量にセマフォ カウントを増やします。 各スレッドを使用して、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッドが、作業し、呼び出しをシミュレートするために、1 秒間待機する、<xref:System.Threading.Semaphore.Release>セマフォを解放するメソッドのオーバー ロードします。  
  
 セマフォがリリースされるたびに、前のセマフォのカウントが表示されます。 コンソール メッセージ追跡セマフォを使用します。 各スレッドは、出力を読みやすくするために、シミュレートされた動作の間隔が若干増加します。  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="releaseCount" /> が 1 未満です。</exception>
        <exception cref="T:System.Threading.SemaphoreFullException">セマフォのカウントは既に最大値です。</exception>
        <exception cref="T:System.IO.IOException">名前付きセマフォで Win32 エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">現在のセマフォは名前付きシステム セマフォを表していますが、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 権限がありません。  
  
- または - 
現在のセマフォは名前付きシステム セマフォを表していますが、<see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 権限で開かれませんでした。</exception>
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.SemaphoreSecurity -&gt; unit" Usage="semaphore.SetAccessControl semaphoreSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="semaphoreSecurity">名前付きシステム セマフォに適用するアクセス制御セキュリティを表す <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> オブジェクト。</param>
        <summary>名前付きシステム セマフォのアクセス制御セキュリティを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 のみアクセス制御セキュリティを設定する<xref:System.Threading.Semaphore>名前付きシステム セマフォを表すオブジェクト。  
  
 ユーザーがいる必要があります<xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType>でこのメソッドでは、およびセマフォを呼び出す権限が開かれている必要があります<xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType>権限。  
  
   
  
## Examples  
 次のコード例では、アクセス制御セキュリティを名前付きセマフォのプロセス間の動作を示します。 この例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>名前付きセマフォの存在をテストするメソッドのオーバー ロードします。  
  
 セマフォが存在しない場合、2 つの最大数と、セマフォを使用する権利を現在のユーザーに拒否の読み取りし、セマフォのアクセス許可を変更する権限を付与するアクセス制御セキュリティが作成されます。  
  
 2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>メソッド。 例外がキャッチされ、例では、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>メソッドのオーバー ロードを読み取って、アクセス許可を変更するために必要な権限を持つ、セマフォを開きます。  
  
 使用して、アクセス許可が変更した後、<xref:System.Threading.Semaphore.SetAccessControl%2A>セマフォ、メソッドは入力し、解放に必要な権限によって開かれます。 3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用してを実行します。  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="semaphoreSecurity" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 権限がありません。  
  
- または - 
セマフォは <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 権限で開かれませんでした。</exception>
        <exception cref="T:System.NotSupportedException">現在の <see cref="T:System.Threading.Semaphore" /> オブジェクトは名前付きシステム セマフォを表していません。</exception>
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>既に存在する場合は、指定した名前付きセマフォを開き操作が成功したかどうかを示す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Semaphore" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">開くシステム セマフォの名前。</param>
        <param name="result">このメソッドから制御が戻るときに、呼び出しに成功した場合は名前付きセマフォを表す <see cref="T:System.Threading.Semaphore" /> オブジェクトが格納されます。呼び出しに失敗した場合は <see langword="null" /> が格納されます。 このパラメーターは初期化前として処理されます。</param>
        <summary>既に存在する場合は、指定した名前付きセマフォを開き操作が成功したかどうかを示す値を返します。</summary>
        <returns>名前付きのセマフォが正常に開かれた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名前付きセマフォが存在しない場合このメソッドはいない作成しません。 既に存在しない場合にシステム セマフォを作成するには、いずれかを使用、<xref:System.Threading.Semaphore.%23ctor%2A>コンス トラクターを持つ、`name`パラメーター。  
  
 名前付きセマフォが存在するかどうかが不明な場合は、代わりにこのメソッドのオーバー ロードを使用して、<xref:System.Threading.Semaphore.OpenExisting%28System.String%29>メソッド オーバー ロードで、セマフォが存在しない場合は、例外をスローします。  
  
 このメソッドのオーバー ロードの呼び出しと同じですが、<xref:System.Threading.Semaphore.TryOpenExisting%2A>メソッドのオーバー ロードを指定して<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>と<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>権限、ビットごとの OR 演算を使用して結合します。 指定する、<xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType>フラグによって、セマフォに入るためのスレッドを指定して、<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>フラグによって、スレッドを呼び出す、<xref:System.Threading.Semaphore.Release%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> が空の文字列です。  
  
- または - 
 <paramref name="name" /> が 260 文字を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">Win32 エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">名前付きセマフォは存在しますが、それを使用するために必要なセキュリティ アクセスがユーザーにありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As SemaphoreRights, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.SemaphoreRights *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="result" Type="System.Threading.Semaphore" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">開くシステム セマフォの名前。</param>
        <param name="rights">必要なセキュリティ アクセス権を表す列挙値のビットごとの組み合わせ。</param>
        <param name="result">このメソッドから制御が戻るときに、呼び出しに成功した場合は名前付きセマフォを表す <see cref="T:System.Threading.Semaphore" /> オブジェクトが格納されます。呼び出しに失敗した場合は <see langword="null" /> が格納されます。 このパラメーターは初期化前として処理されます。</param>
        <summary>既に存在する場合は、必要なセキュリティ アクセスを使って指定した名前付きセマフォを開き、操作が成功したかどうかを示す値を返します。</summary>
        <returns>名前付きのセマフォが正常に開かれた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名前付きセマフォが存在しない場合このメソッドはいない作成しません。 既に存在しない場合にシステム セマフォを作成するには、いずれかを使用、<xref:System.Threading.Semaphore.%23ctor%2A>コンス トラクターを持つ、`name`パラメーター。  
  
 名前付きセマフォが存在するかどうかが不明な場合は、代わりにこのメソッドのオーバー ロードを使用して、<xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29>メソッド オーバー ロードで、セマフォが存在しない場合は、例外をスローします。  
  
 `rights`パラメーターを含める必要があります、 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 、セマフォに入るためのスレッドを許可するフラグ、<xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType>を呼び出すスレッドを許可するフラグ、<xref:System.Threading.Semaphore.Release%2A>メソッド。  
  
 このメソッドに同じ値を使用する複数の呼び出し`name`必ずしも返さない同じ<xref:System.Threading.Semaphore>場合でも、表現が返されるオブジェクトと同じ名前付きシステム セマフォ オブジェクトします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> が空の文字列です。  
  
- または - 
 <paramref name="name" /> が 260 文字を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">Win32 エラーが発生しました。</exception>
        <exception cref="T:System.UnauthorizedAccessException">名前付きセマフォは存在しますが、それを使用するために必要なセキュリティ アクセスがユーザーにありません。</exception>
      </Docs>
    </Member>
  </Members>
</Type>