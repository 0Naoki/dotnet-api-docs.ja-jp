<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="975f9fe84ae180121f8d3ba53f7a2ddc2eb3da28" /><Meta Name="ms.sourcegitcommit" Value="690605a2d62010b93e13edf329aafe2bdc57423a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="07/11/2019" /><Meta Name="ms.locfileid" Value="67801592" /></Metadata><TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d8e05-101">オブジェクトへのアクセスを同期する機構を提供します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-101">Provides a mechanism that synchronizes access to objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-102"><xref:System.Threading.Monitor>クラスを使用して呼び出すことによって、特定のオブジェクトのロックを解放することによってコードの領域へのアクセスを同期する、 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>、 <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>、および<xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="d8e05-103">オブジェクトのロックは、一般クリティカル セクションと呼ばれる、コードのブロックへのアクセスを制限する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="d8e05-104">スレッドが所有するオブジェクトのロック中に他のスレッドを取得できますありませんそのロック。</span><span class="sxs-lookup"><span data-stu-id="d8e05-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="d8e05-105">使用することも、<xref:System.Threading.Monitor>アプリケーションのセクションにアクセスする他のスレッドが許可されないことを確認するにはクラスが他のスレッドがロックされている別のオブジェクトを使用してコードを実行する場合を除き、ロックの所有者によって実行されているをコードします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="d8e05-106">この記事の内容:</span><span class="sxs-lookup"><span data-stu-id="d8e05-106">In this article:</span></span>  
  
 <span data-ttu-id="d8e05-107">[Monitor クラス:概要](#Overview) </span><span class="sxs-lookup"><span data-stu-id="d8e05-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="d8e05-108">[ロック オブジェクト](#Lock) </span><span class="sxs-lookup"><span data-stu-id="d8e05-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="d8e05-109">[クリティカル セクション](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="d8e05-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="d8e05-110">[Pulse、PulseAll、および待機](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="d8e05-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="d8e05-111">モニターと待機ハンドル</span><span class="sxs-lookup"><span data-stu-id="d8e05-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="d8e05-112">Monitor クラス:概要</span><span class="sxs-lookup"><span data-stu-id="d8e05-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="d8e05-113"><xref:System.Threading.Monitor> 次の機能があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="d8e05-114">オンデマンドでオブジェクトに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="d8e05-115">バインドされている場合、これは、任意のコンテキストから直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="d8e05-116">インスタンス、<xref:System.Threading.Monitor>クラスを作成することはできません。 のメソッド、<xref:System.Threading.Monitor>クラスはすべて静的です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="d8e05-117">各メソッドには、アクセスを制御する同期オブジェクトが渡されます、クリティカル セクションにします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-118">使用して、<xref:System.Threading.Monitor>文字列以外のオブジェクトをロックするにはクラス (つまり、参照型を以外の<xref:System.String>)、いない値の型。</span><span class="sxs-lookup"><span data-stu-id="d8e05-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="d8e05-119">詳細については、「のオーバー ロード、<xref:System.Threading.Monitor.Enter%2A>メソッドと[ロック オブジェクト](#Lock)この記事で後述する「します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="d8e05-120">次の表では、同期されたオブジェクトにアクセスするスレッドで実行できるアクションについて説明します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="d8e05-121">アクション</span><span class="sxs-lookup"><span data-stu-id="d8e05-121">Action</span></span>|<span data-ttu-id="d8e05-122">説明</span><span class="sxs-lookup"><span data-stu-id="d8e05-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="d8e05-123"><xref:System.Threading.Monitor.Enter%2A>、 <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="d8e05-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="d8e05-124">オブジェクトのロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-124">Acquires a lock for an object.</span></span> <span data-ttu-id="d8e05-125">このアクションは、また、クリティカル セクションの先頭をマークします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="d8e05-126">他のスレッドは、別のロックされたオブジェクトを使用して、クリティカル セクションで、手順の実行されない限りはクリティカル セクションを入力しません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="d8e05-127">他のスレッドをロックし、オブジェクトへのアクセスを許可するには、オブジェクトのロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="d8e05-128">別のスレッドが、オブジェクトにアクセス中に、呼び出し元のスレッドが待機します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="d8e05-129">パルス信号を使用して、オブジェクトの状態の変更の待機中のスレッドを通知できます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="d8e05-130"><xref:System.Threading.Monitor.Pulse%2A> (信号) <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="d8e05-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="d8e05-131">1 つまたは複数の待機中のスレッドにシグナルを送信します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="d8e05-132">シグナル待機中のスレッドのロックされたオブジェクトの状態が変更されたことを通知して、ロックの所有者は、ロックを解放する準備ができてです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="d8e05-133">待機中のスレッドは、オブジェクトのロックが最終的に表示されるように、オブジェクトの準備完了キューに配置されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="d8e05-134">スレッドが、ロックを保持すると、必要な状態に達しているかどうかに表示するオブジェクトの新しい状態を確認できます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="d8e05-135">オブジェクトのロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-135">Releases the lock on an object.</span></span> <span data-ttu-id="d8e05-136">この操作は、ロックされたオブジェクトで保護されている、クリティカル セクションの終了を示します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="d8e05-137">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、2 つのオーバー ロードのセットがある、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.TryEnter%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="d8e05-138">オーバー ロードの 1 つのセットには、 `ref` (で C# の場合) または`ByRef`(Visual Basic) で<xref:System.Boolean>にアトミックに設定されているパラメーター`true`かどうか、ロックが取得、ロックを取得する際に、例外がスローされた場合でもです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="d8e05-139">一貫した状態でロックを保護するリソースができない可能性がある場合でも、すべてのケースでのロックを解除することが重要である場合は、これらのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="d8e05-140">ロック オブジェクト</span><span class="sxs-lookup"><span data-stu-id="d8e05-140">The lock object</span></span>  
 <span data-ttu-id="d8e05-141">Monitor クラスから成る`static`(で C# の場合) または`Shared`(Visual Basic) ではクリティカル セクションへのアクセスを制御するオブジェクトを操作するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="d8e05-142">次の情報は、同期されたオブジェクトごとに管理されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="d8e05-143">現在のロックを保持しているスレッドへの参照。</span><span class="sxs-lookup"><span data-stu-id="d8e05-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="d8e05-144">ロックを取得する準備ができているスレッドを格納する準備ができて、キューへの参照。</span><span class="sxs-lookup"><span data-stu-id="d8e05-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="d8e05-145">ロックされたオブジェクトの状態の変更の通知を待機しているスレッドが含まれている待機キューへの参照。</span><span class="sxs-lookup"><span data-stu-id="d8e05-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="d8e05-146"><xref:System.Threading.Monitor> は値型ではなく、オブジェクト (つまり、参照型) をロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d8e05-147">値型を <xref:System.Threading.Monitor.Enter%2A> と <xref:System.Threading.Monitor.Exit%2A> に渡すことができますが、値型は呼び出しごとに個別にボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="d8e05-148">呼び出しごとに個別のオブジェクトが作成されるので、<xref:System.Threading.Monitor.Enter%2A> は決してコードをブロックすることはなく、保護していると想定しているコードは実際には同期されません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="d8e05-149">さらに、<xref:System.Threading.Monitor.Exit%2A> に渡されたオブジェクトは <xref:System.Threading.Monitor.Enter%2A> に渡されたオブジェクトとは異なるため、<xref:System.Threading.Monitor> は「オブジェクトの同期メソッドが、コードの非同期ブロックから呼び出されました。」というメッセージとともに <xref:System.Threading.SynchronizationLockException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="d8e05-150">この問題を説明する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-150">The following example illustrates this problem.</span></span> <span data-ttu-id="d8e05-151">10 個のタスクが起動され、それぞれが 250 ミリ秒間スリープ状態になります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="d8e05-152">次に、各タスクはカウンター変数である `nTasks` を更新します。これは実際に起動、実行されるタスクの数をカウントするためのものです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="d8e05-153">`nTasks` は複数のタスクで同時に更新可能なグローバル変数なので、複数のタスクによる同時変更を防止するためにモニターを使用します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="d8e05-154">しかし、例に示す出力のように、各タスクは <xref:System.Threading.SynchronizationLockException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="d8e05-155">各タスクの <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> メソッドに対する呼び出しの前に `nTasks` 変数がボックス化されるため、各タスクは <xref:System.Threading.SynchronizationLockException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="d8e05-156">つまり、各メソッドの呼び出しは他のメソッドから独立している個別の変数に渡されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="d8e05-157">`nTasks` は <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> メソッドへの呼び出しで再びボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d8e05-158">こうして 10 個の新しいボックス化された変数が作成されます。これらは互いに独立したものであり、`nTasks` からも <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> メソッドへの呼び出しで作成された 10 個のボックス化された変数からも独立しています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d8e05-159">それで、以前ロックされていなかった新規に作成された変数のロックを解放しようとしているため、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="d8e05-160">次の例に示すように、<xref:System.Threading.Monitor.Enter%2A> と <xref:System.Threading.Monitor.Exit%2A> の呼び出しの前に値型の変数をボックス化したり、ボックス化された同じオブジェクトを両方のメソッドに渡したりできますが、これを行う利点はありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="d8e05-161">ボックス化解除された変数への変更は、ボックス化されたコピーには反映されません。またボックス化されたコピーの値を変更する方法はありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="d8e05-162">同期対象のオブジェクトを選択する場合は、プライベートまたは内部のオブジェクトでのみロックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="d8e05-163">外部オブジェクトをロック場合は、関連のないコードは、さまざまな目的でロックするのと同じオブジェクトを選択できるために、デッドロックを引き起こす可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="d8e05-164">注、ロックに使用されるオブジェクトがから派生している場合、複数のアプリケーション ドメイン内のオブジェクトに同期できる<xref:System.MarshalByRefObject>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="d8e05-165">クリティカル セクション</span><span class="sxs-lookup"><span data-stu-id="d8e05-165">The critical section</span></span>  
 <span data-ttu-id="d8e05-166">使用して、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>先頭とクリティカル セクションの末尾をマークするメソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-167">によって提供される機能、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>メソッドは、によって提供されるのと同じ、[ロック](~/docs/csharp/language-reference/keywords/lock-statement.md)(C#) ステートメント、 [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)点を除いて、Visual basic でのステートメント、言語構造のラップ、<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType>メソッドのオーバー ロードと<xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>メソッドで、 `try`.`finally`</span><span class="sxs-lookup"><span data-stu-id="d8e05-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="d8e05-168">モニターが解放されることを確認するブロック。</span><span class="sxs-lookup"><span data-stu-id="d8e05-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="d8e05-169">クリティカル セクションが連続する手順については後で取得したロックのセットの場合、<xref:System.Threading.Monitor.Enter%2A>メソッドは、1 つのスレッドだけがロックされたオブジェクトで囲まれたコードを実行できることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="d8e05-170">内のコードを配置すること勧めこの場合、`try`への呼び出しを配置して、ブロック、<xref:System.Threading.Monitor.Exit%2A>メソッドで、`finally`ブロック。</span><span class="sxs-lookup"><span data-stu-id="d8e05-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="d8e05-171">これにより、例外が発生しても必ずロックが解放されるようになります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="d8e05-172">次のコード フラグメントは、このパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="d8e05-173">この機能は通常、クラスのインスタンス メソッドまたは静的なへのアクセスを同期に使用されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="d8e05-174">ロック機能を配置することで実現できますクリティカル セクションでは、メソッド全体をまたがっている場合、<xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>メソッドで指定して、<xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized>のコンス トラクターで値<xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d8e05-175">この属性を使用すると、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>メソッドの呼び出しは必要ありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="d8e05-176">次のコード フラグメントは、このパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="d8e05-177">属性によって、メソッドが戻るまで、ロックを保持するために、現在のスレッドに注意してください。ロックがすぐに解放する場合は、使用、<xref:System.Threading.Monitor>クラスの C#[ロック](~/docs/csharp/language-reference/keywords/lock-statement.md)ステートメント、または Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)属性ではなく、メソッド内でステートメント。</span><span class="sxs-lookup"><span data-stu-id="d8e05-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="d8e05-178">それは可能ですが、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>をロックおよびメンバーまたはクラスの境界を通過する特定のオブジェクトを解放ステートメントでは、この方法は推奨されません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="d8e05-179">Pulse、PulseAll、および待機</span><span class="sxs-lookup"><span data-stu-id="d8e05-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="d8e05-180">呼び出すことができます、スレッドはロックを所有しているし、ロックを保護する重要なセクションが入力した、されたら、 <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>、 <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>、および<xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="d8e05-181">ときに、スレッドを保持するロック呼び出し<xref:System.Threading.Monitor.Wait%2A>、ロックが解放され、スレッドが同期されたオブジェクトの待機キューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-181">When the thread that holds the lock calls <xref:System.Threading.Monitor.Wait%2A>, the lock is released and the thread is added to the waiting queue of the synchronized object.</span></span> <span data-ttu-id="d8e05-182">準備完了のキューの最初のスレッド、存在する場合は、ロックを取得し、クリティカル セクションを入力します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-182">The first thread in the ready queue, if any, acquires the lock and enters the critical section.</span></span> <span data-ttu-id="d8e05-183">スレッドが待機キューから準備完了キューに移動時にいずれか、 <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> (移動するには、スレッドがあります、待機キューの先頭にある) または<xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType>メソッドは、ロックを保持しているスレッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-183">The thread is moved from the waiting queue to the ready queue when either the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> (to be moved, the thread must be at the head of the waiting queue) or the <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method is called by the thread that holds the lock.</span></span> <span data-ttu-id="d8e05-184"><xref:System.Threading.Monitor.Wait%2A>メソッドは呼び出し元のスレッドがロックを再取得を返します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-184">The <xref:System.Threading.Monitor.Wait%2A> method returns when the calling thread reacquires the lock.</span></span>  
  
 <span data-ttu-id="d8e05-185">ときに、スレッドを保持するロック呼び出し<xref:System.Threading.Monitor.Pulse%2A>、待機キューの先頭にあるスレッドが準備完了キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-185">When the thread that holds the lock calls <xref:System.Threading.Monitor.Pulse%2A>, the thread at the head of the waiting queue is moved to the ready queue.</span></span> <span data-ttu-id="d8e05-186">呼び出し、<xref:System.Threading.Monitor.PulseAll%2A>メソッドは、すべてのスレッドを待機キューから準備完了キューに移動します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-186">The call to the <xref:System.Threading.Monitor.PulseAll%2A> method moves all the threads from the waiting queue to the ready queue.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="d8e05-187">モニターと待機ハンドル</span><span class="sxs-lookup"><span data-stu-id="d8e05-187">Monitors and wait handles</span></span>  
 <span data-ttu-id="d8e05-188">使用の違いを確認することが重要、<xref:System.Threading.Monitor>クラスと<xref:System.Threading.WaitHandle>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-188">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="d8e05-189"><xref:System.Threading.Monitor>クラスは単なるマネージされた、完全に移植可能でありオペレーティング システムのリソース要件の観点から方が効率的です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-189">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="d8e05-190"><xref:System.Threading.WaitHandle> オブジェクトはオペレーティング システムの待機可能オブジェクトを表しており、マネージドとアンマネージド コード間で同期するのに便利です。また一度に多くのオブジェクトを待機できる機能などの高度なオペレーティング システム機能を公開します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-190"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8e05-191">次の例では、<xref:System.Threading.Monitor>クラスによって表される乱数ジェネレーターの 1 つのインスタンスへのアクセスを同期する、<xref:System.Random>クラス。</span><span class="sxs-lookup"><span data-stu-id="d8e05-191">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="d8e05-192">例では、スレッド プールのスレッドで非同期的に実行それぞれ 10 個のタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-192">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="d8e05-193">各タスクは、10,000 の乱数を生成、自分の平均を計算し、生成されたランダムな数字の数の合計およびその合計を維持する 2 つのプロシージャ レベル変数を更新します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-193">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="d8e05-194">すべてのタスクが実行すると、これら 2 つの値は、全体の平均を計算に使用されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-194">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="d8e05-195">変数へのアクセスをスレッド プールのスレッドで実行されているすべてのタスクからアクセスできる、ので`total`と`n`も同期されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-195">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="d8e05-196"><xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType>メソッドは、この目的に使用します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-196">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="d8e05-197">次の例と組み合わせて使用して、<xref:System.Threading.Monitor>クラス (で実装される、`lock`または`SyncLock`言語コンストラクト)、<xref:System.Threading.Interlocked>クラス、および<xref:System.Threading.AutoResetEvent>クラス。</span><span class="sxs-lookup"><span data-stu-id="d8e05-197">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="d8e05-198">2 つの `internal` クラス (C# の場合) または `Friend` クラス (Visual Basic の場合)、`SyncResource` と `UnSyncResource` を定義します。これらはそれぞれ、リソースへの同期アクセスと非同期アクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-198">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="d8e05-199">同期アクセスと非同期アクセスの違い (各メソッド呼び出しが迅速に完了する場合に違いが生じる可能性がある) を示すために、次の例では、メソッドにランダムな遅延を含めてあります。<xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> プロパティが偶数であるスレッドでは、メソッドが <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> を呼び出して、2,000 ミリ秒の遅延を生じさせます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-199">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="d8e05-200">`SyncResource` クラスはパブリックではなく、同期されたリソースでロックを取得するクライアント コードは存在しないので、内部クラス自体がロックを取得することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d8e05-200">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="d8e05-201">これにより、悪意のあるコードがパブリック オブジェクトでロックを取得するのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-201">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="d8e05-202">例では、リソースにアクセスしようとするスレッドの数を定義する変数 `numOps` を定義します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-202">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="d8e05-203">アプリケーション スレッドは、同期アクセスの場合も非同期アクセスの場合もそれぞれ 5 回、<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-203">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="d8e05-204"><xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> メソッドにはパラメーターが 1 つしかありません。パラメーターを受け入れず値を返さないデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-204">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="d8e05-205">同期アクセスの場合は `SyncUpdateResource` メソッドを呼び出し、非同期アクセスの場合は `UnSyncUpdateResource` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-205">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="d8e05-206">アプリケーション スレッドの呼び出し、メソッド呼び出しの各セットの後、 [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*)までブロックするためのメソッド、<xref:System.Threading.AutoResetEvent>インスタンスがシグナル状態にします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-206">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="d8e05-207">`SyncUpdateResource` メソッドを呼び出すたびに、内部 `SyncResource.Access` メソッドが呼び出され、<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> メソッドが呼び出されて、`numOps` カウンターがデクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-207">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="d8e05-208"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>メソッドを使用して、カウンターをデクリメントを値を変数に格納されているため、それ以外の場合は確信できません、最初のスレッドをデクリメントの前に、2 番目のスレッドに値をアクセスができます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-208">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="d8e05-209">最後の同期ワーカー スレッドをデクリメント カウンターをゼロに、すべてのスレッドを同期することを示す完了したことに、リソースへのアクセス、`SyncUpdateResource`メソッドの呼び出し、<xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType>メソッドは、メイン スレッドを続行するように通知します実行します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-209">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="d8e05-210">`UnSyncUpdateResource` メソッドを呼び出すたびに、内部 `UnSyncResource.Access` メソッドが呼び出され、<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> メソッドが呼び出されて、`numOps` カウンターがデクリメントされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-210">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="d8e05-211">もう一度、<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>エントリの最初のスレッドのデクリメントされた値が変数に割り当てられる前に、2 番目のスレッドは値がアクセスしないようにするカウンターをデクリメントするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-211">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="d8e05-212">最後の非同期ワーカー スレッドをデクリメント カウンターをゼロに、さらに、スレッド非同期ことを示す、リソースにアクセスする必要があります、`UnSyncUpdateResource`メソッドの呼び出し、<xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType>メソッドは、メイン スレッドの実行を続行するように通知します.</span><span class="sxs-lookup"><span data-stu-id="d8e05-212">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="d8e05-213">例の出力からわかるように、同期アクセスでは、呼び出し元スレッドが保護リソースを終了してからでないと別のスレッドがそれにアクセスできません。つまり各スレッドはその先行処理を待機します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-213">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="d8e05-214">その一方で、ロックがない `UnSyncResource.Access` メソッドは、スレッドが到達する順序で呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-214">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="d8e05-215">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-215">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.Thread" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-216">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-216">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md"><span data-ttu-id="d8e05-217">スレッド処理オブジェクトと機能</span><span class="sxs-lookup"><span data-stu-id="d8e05-217">Threading Objects and Features</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d8e05-218">指定したオブジェクトの排他ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-218">Acquires an exclusive lock on a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-219">モニター ロックを取得する対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-219">The object on which to acquire the monitor lock.</span></span></param>
        <summary><span data-ttu-id="d8e05-220">指定したオブジェクトの排他ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-220">Acquires an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-221">使用`Enter`を取得する、<xref:System.Threading.Monitor>パラメーターとして渡されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-221">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="d8e05-222">別のスレッドが実行された場合、`Enter`オブジェクトの対応がまだ実行されて、 <xref:System.Threading.Monitor.Exit%2A>、他のスレッドが、オブジェクトを解放するまで、現在のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-222">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="d8e05-223">同じスレッドを呼び出すことは`Enter`ブロックが 2 回以上です。 ただし、同じ数の`Exit`オブジェクトで待機している他のスレッドのブロックを解除する前に、呼び出しを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-223">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="d8e05-224">使用<xref:System.Threading.Monitor>(つまり、参照型) のオブジェクトをロック、いない値の型。</span><span class="sxs-lookup"><span data-stu-id="d8e05-224">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d8e05-225">値型の変数を渡すと`Enter`、オブジェクトとしてボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-225">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="d8e05-226">同じ変数を渡す場合`Enter`ここでも、個別のオブジェクトとしてボックス化され、スレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-226">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="d8e05-227">この場合は、コードを`Monitor`はおそらく保護が保護されていません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-227">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="d8e05-228">さらに、変数を渡すと`Exit`、まだ別のオブジェクトが作成されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-228">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="d8e05-229">オブジェクトが渡されるため`Exit`に渡されるオブジェクトとは異なる`Enter`、`Monitor`スロー<xref:System.Threading.SynchronizationLockException>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-229">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="d8e05-230">詳細については、概念説明のトピックを参照してください。[モニター](xref:System.Threading.Monitor)します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-230">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="d8e05-231"><xref:System.Threading.Thread.Interrupt%2A> 入力を待機しているスレッドを中断することができます、`Monitor`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-231"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="d8e05-232">A<xref:System.Threading.ThreadInterruptedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-232">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="d8e05-233">C# を使用して、 `try`.`finally`</span><span class="sxs-lookup"><span data-stu-id="d8e05-233">Use a C# `try`…`finally`</span></span> <span data-ttu-id="d8e05-234">ブロック (`Try`.`Finally`</span><span class="sxs-lookup"><span data-stu-id="d8e05-234">block (`Try`…`Finally`</span></span> <span data-ttu-id="d8e05-235">VVisual Basic)、モニターを解放するか、または、C# を使用する`lock`ステートメント (`SyncLock` Visual Basic でのステートメント)、ラップ、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>メソッド、`try`.`finally`</span><span class="sxs-lookup"><span data-stu-id="d8e05-235">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="d8e05-236">ブロックです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-236">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8e05-237">`Enter` メソッドの使用方法を次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-237">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-238"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-238">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-239">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-239">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-240">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-240">The object on which to wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="d8e05-241">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-241">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="d8e05-242">入力時には <see langword="false" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-242">The input must be <see langword="false" />.</span></span> <span data-ttu-id="d8e05-243">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-243">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="d8e05-244">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-244">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span>  
  
<span data-ttu-id="d8e05-245">メモ   例外が発生しない場合、このメソッドの出力は常に <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-245">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="d8e05-246">指定したオブジェクトの排他ロックを取得し、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-246">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-247">使用`Enter`を取得する、<xref:System.Threading.Monitor>として渡されたオブジェクトで、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d8e05-247">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="d8e05-248">別のスレッドが実行された場合、`Enter`オブジェクトの対応がまだ実行されて、 <xref:System.Threading.Monitor.Exit%2A>、他のスレッドが、オブジェクトを解放するまで、現在のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-248">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="d8e05-249">同じスレッドを呼び出すことは`Enter`ブロックが 2 回以上です。 ただし、同じ数の`Exit`オブジェクトで待機している他のスレッドのブロックを解除する前に、呼び出しを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-249">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="d8e05-250">指定した場合は、例外がスローされたために、ロックは取得されませんでした、変数、`lockTaken`パラメーターが`false`後、このメソッドが終了します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-250">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="d8e05-251">これにより、ロックを解除する必要があるかどうかをすべてのケースで決定するプログラムです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-251">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="d8e05-252">指定した変数に例外をスローせずにこのメソッドが戻る場合、`lockTaken`パラメーターは常に`true`、し、それをテストする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-252">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="d8e05-253">使用<xref:System.Threading.Monitor>(つまり、参照型) のオブジェクトをロック、いない値の型。</span><span class="sxs-lookup"><span data-stu-id="d8e05-253">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d8e05-254">値型の変数を渡すと`Enter`、オブジェクトとしてボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-254">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="d8e05-255">同じ変数を渡す場合`Enter`ここでも、個別のオブジェクトとしてボックス化され、スレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-255">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="d8e05-256">この場合は、コードを`Monitor`はおそらく保護が保護されていません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-256">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="d8e05-257">さらに、変数を渡すと`Exit`、別のオブジェクトが作成されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-257">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="d8e05-258">オブジェクトが渡されるため`Exit`に渡されるオブジェクトとは異なる`Enter`、`Monitor`スロー<xref:System.Threading.SynchronizationLockException>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-258">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="d8e05-259">詳細については、概念説明のトピックを参照してください。[モニター](xref:System.Threading.Monitor)します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-259">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="d8e05-260"><xref:System.Threading.Thread.Interrupt%2A> 入力を待機しているスレッドを中断することができます、`Monitor`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-260"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="d8e05-261">A<xref:System.Threading.ThreadInterruptedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-261">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8e05-262">次のコードは、基本的なパターンを使用するため、<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-262">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="d8e05-263">このオーバー ロードに渡される変数の値を常に設定する、`ref`パラメーター (`ByRef` Visual Basic で)`lockTaken`変数の値が、ロックするかどうかをテストする信頼性の高い方法であるため、メソッドに、例外がスローされる場合でも、リリースしました。</span><span class="sxs-lookup"><span data-stu-id="d8e05-263">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d8e05-264"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-264">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-265"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-265">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-266">ロックを解放する対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-266">The object on which to release the lock.</span></span></param>
        <summary><span data-ttu-id="d8e05-267">指定したオブジェクトの排他ロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-267">Releases an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-268">呼び出し元のスレッドのロックを所有する必要があります、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d8e05-268">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="d8e05-269">呼び出し元のスレッドが、指定したオブジェクトのロックを所有しているし、等しい数が行われている場合`Exit`と<xref:System.Threading.Monitor.Enter%2A>ロックを解放し、オブジェクトを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-269">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="d8e05-270">呼び出し元のスレッドが起動しない場合`Exit`同じ回数`Enter`ロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-270">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="d8e05-271">ロックが解放され、他のスレッドがオブジェクトの準備完了キューでは、スレッドのいずれかのロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-271">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="d8e05-272">他のスレッドが待機キューをロックの取得を待機している場合がいない自動的にキューに移動、準備ができて、ロックの所有者を呼び出すと`Exit`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-272">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="d8e05-273">キューに 1 つまたは複数の待機中のスレッドを移動するには、呼び出す<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>を呼び出す前に`Exit`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-273">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d8e05-274">`Exit` メソッドの使用方法を次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-274">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-275"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-275">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="d8e05-276">現在のスレッドが、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-276">The current thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-277">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-277">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-278">テストするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-278">The object to test.</span></span></param>
        <summary><span data-ttu-id="d8e05-279">現在のスレッドが指定したオブジェクトのロックを保持しているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-279">Determines whether the current thread holds the lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="d8e05-280">現在のスレッドが <paramref name="obj" /> のロックを保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-280"><see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-281">このメソッドの動作のメソッドを使用して取得されるロックに対してのみ、<xref:System.Threading.Monitor>クラス、またはを使用して、C#`lock`ステートメントまたは Visual Basic`SyncLock`ステートメントで実装される<xref:System.Threading.Monitor>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-281">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="d8e05-282">などの診断ツールでこのメソッドを使用して、<xref:System.Diagnostics.Debug.Assert%2A>メソッドと<xref:System.Diagnostics.Contracts.Contract>に関連するロックの問題をデバッグする、クラス、<xref:System.Threading.Monitor>クラス。</span><span class="sxs-lookup"><span data-stu-id="d8e05-282">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-283"><paramref name="obj" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-283"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LockContentionCount">
      <MemberSignature Language="C#" Value="public static long LockContentionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 LockContentionCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Monitor.LockContentionCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LockContentionCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long LockContentionCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LockContentionCount : int64" Usage="System.Threading.Monitor.LockContentionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d8e05-284">モニターのロックを取得しようとするときに、接続があった回数を取得します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-284">Gets the number of times there was contention when trying to take the monitor's lock.</span></span></summary>
        <value><span data-ttu-id="d8e05-285">発生回数の合計は、モニターのロックを取得しようとするときに競合をしました。</span><span class="sxs-lookup"><span data-stu-id="d8e05-285">The number of times there was contention when trying to take the monitor's lock.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-286">スレッドが待機するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-286">The object a thread is waiting for.</span></span></param>
        <summary><span data-ttu-id="d8e05-287">ロックされたオブジェクトの状態が変更されたことを、待機キュー内のスレッドに通知します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-287">Notifies a thread in the waiting queue of a change in the locked object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-288">ロックの現在の所有者を待機しているオブジェクトを使用して、シグナル状態にのみ`Pulse`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-288">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="d8e05-289">指定したオブジェクトのロックを所有しているスレッドは、ロックのでは、次のスレッドを通知するには、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-289">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="d8e05-290">パルスを受信すると、待機中のスレッドは、実行待ちキューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-290">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="d8e05-291">ときに、スレッドを呼び出した`Pulse`ロックを解放 (これは必ずしも実行するスレッド) 準備完了キューでは、次のスレッドがロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-291">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d8e05-292"><xref:System.Threading.Monitor>クラスがあることを示す状態を保持していない、<xref:System.Threading.Monitor.Pulse%2A>メソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="d8e05-292">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="d8e05-293">したがって、呼び出した場合<xref:System.Threading.Monitor.Pulse%2A>スレッドが待機しているときない、次のスレッドを呼び出す<xref:System.Threading.Monitor.Wait%2A>ブロックとして<xref:System.Threading.Monitor.Pulse%2A>が呼び出されたことはありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-293">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="d8e05-294">2 つのスレッドを使用している場合<xref:System.Threading.Monitor.Pulse%2A>と<xref:System.Threading.Monitor.Wait%2A>を操作するこれもデッドロックにつながる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-294">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="d8e05-295">動作とは対照的、<xref:System.Threading.AutoResetEvent>クラス。通知する場合、<xref:System.Threading.AutoResetEvent>を呼び出してその<xref:System.Threading.EventWaitHandle.Set%2A>メソッドを待機しているスレッドがないと、<xref:System.Threading.AutoResetEvent>スレッドを呼び出すまでシグナル状態のままに<xref:System.Threading.WaitHandle.WaitOne%2A>、 <xref:System.Threading.WaitHandle.WaitAny%2A>、または<xref:System.Threading.WaitHandle.WaitAll%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-295">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="d8e05-296"><xref:System.Threading.AutoResetEvent>そのスレッドを解放し、非シグナル状態に戻ります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-296">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="d8e05-297">同期済みオブジェクトが現在ロック、ロックを取得する準備ができているスレッドが含まれている、準備完了キューへの参照と、待機キューへの参照を保持しているスレッドへの参照を含む、いくつかの参照を保持しているを確認します。オブジェクトの状態の変更の通知を待機しているスレッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-297">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d8e05-298">`Pulse`、 <xref:System.Threading.Monitor.PulseAll%2A>、および<xref:System.Threading.Monitor.Wait%2A>メソッドは、同期されたコード ブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-298">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d8e05-299">複数のスレッドを通知するには、使用、<xref:System.Threading.Monitor.PulseAll%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-299">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-300"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-300">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="d8e05-301">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-301">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-302">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-302">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-303">パルスを送るオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-303">The object that sends the pulse.</span></span></param>
        <summary><span data-ttu-id="d8e05-304">オブジェクトの状態が変更されたことを、待機中のすべてのスレッドに通知します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-304">Notifies all waiting threads of a change in the object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-305">指定したオブジェクトのロックを所有しているスレッドは、オブジェクトのロックの取得を待機しているすべてのスレッドに通知するには、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-305">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="d8e05-306">信号が送信された後、待機中のスレッドが準備完了キューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-306">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="d8e05-307">ときに、スレッドを呼び出した`PulseAll`ロックを解放待ちのキューでは、次のスレッドがロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-307">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="d8e05-308">同期済みオブジェクトが現在ロック、ロックを取得する準備ができているスレッドが含まれている、準備完了キューへの参照と、待機キューへの参照を保持しているスレッドへの参照を含む、いくつかの参照を保持しているを確認します。オブジェクトの状態の変更の通知を待機しているスレッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-308">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d8e05-309"><xref:System.Threading.Monitor.Pulse%2A>、 `PulseAll`、および<xref:System.Threading.Monitor.Wait%2A>メソッドは、同期されたコード ブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-309">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d8e05-310">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドの動作について説明する場合は<xref:System.Threading.Monitor.Pulse%2A>スレッドが待機しているないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-310">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="d8e05-311">1 つのスレッドを通知するには、使用、`Pulse`メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-311">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-312"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-312">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="d8e05-313">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-313">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-314">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-314">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d8e05-315">指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-315">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-316">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-316">The object on which to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="d8e05-317">指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-317">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="d8e05-318">現在のスレッドがロックを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-318"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-319">かどうかは成功すると、このメソッド排他ロックを取得上、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d8e05-319">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="d8e05-320">このメソッドは、ロックが使用できるかどうか、すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-320">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="d8e05-321">このメソッドは<xref:System.Threading.Monitor.Enter%2A>が現在のスレッドがブロックされることはありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-321">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="d8e05-322">メソッドを返しますのかどうか、スレッドをブロックすることがなく入力できません、`false,`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-322">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-323">使用<xref:System.Threading.Monitor>(つまり、参照型) のオブジェクトをロック、いない値の型。</span><span class="sxs-lookup"><span data-stu-id="d8e05-323">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d8e05-324">詳細については、次を参照してください。、<xref:System.Threading.Monitor>記事。</span><span class="sxs-lookup"><span data-stu-id="d8e05-324">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="d8e05-325">スレッドがクリティカル セクションを入力していないことを確認するには、メソッドの戻り値を確認し、その戻り値が場合にのみ、クリティカル セクションのコードを実行する必要があります`true`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-325">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="d8e05-326">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-326">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d8e05-327">呼び出す必要がありますので注意<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-327">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="d8e05-328">次のコード例は、`TryEnter` メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-328">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-329"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-329">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-330">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-330">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-331">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-331">The object on which to acquire the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="d8e05-332">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-332">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="d8e05-333">入力時には <see langword="false" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-333">The input must be <see langword="false" />.</span></span> <span data-ttu-id="d8e05-334">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-334">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="d8e05-335">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-335">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="d8e05-336">指定したオブジェクトの排他ロックの取得を試み、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-336">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-337">かどうかは成功すると、このメソッド排他ロックを取得上、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d8e05-337">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="d8e05-338">このメソッドは、ロックが使用できるかどうか、すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-338">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="d8e05-339">指定した場合は、例外がスローされたために、ロックは取得されませんでした、変数、`lockTaken`パラメーターが`false`後、このメソッドが終了します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-339">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="d8e05-340">これにより、ロックを解除する必要があるかどうかをすべてのケースで決定するプログラムです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-340">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="d8e05-341">このメソッドは<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>が現在のスレッドがブロックされることはありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-341">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="d8e05-342">場合は、スレッドが、ブロックすることがなく入力ことはできません、`lockTaken`に設定されている引数`false`メソッドが返されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-342">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-343">使用<xref:System.Threading.Monitor>(つまり、参照型) のオブジェクトをロック、いない値の型。</span><span class="sxs-lookup"><span data-stu-id="d8e05-343">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d8e05-344">詳細については、「<xref:System.Threading.Monitor>」の記事を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d8e05-344">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="d8e05-345">スレッドがクリティカル セクションを入力していないことの値を調べる必要があります`lockTaken`、その値が場合にのみ、クリティカル セクションのコードの実行`true`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-345">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="d8e05-346">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-346">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d8e05-347">呼び出す必要がありますので注意<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-347">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="d8e05-348">次のコードは、基本的なパターンを使用するため、<xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-348">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="d8e05-349">このオーバー ロードに渡される変数の値を常に設定する、`ref`パラメーター (`ByRef` Visual Basic で)`lockTaken`変数の値が、ロックするかどうかをテストする信頼性の高い方法であるため、メソッドに、例外がスローされる場合でも、リリースしました。</span><span class="sxs-lookup"><span data-stu-id="d8e05-349">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d8e05-350"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-350">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-351"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-352">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-352">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="d8e05-353">ロックを待機するミリ秒単位の時間。</span><span class="sxs-lookup"><span data-stu-id="d8e05-353">The number of milliseconds to wait for the lock.</span></span></param>
        <summary><span data-ttu-id="d8e05-354">指定したミリ秒間に、指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-354">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="d8e05-355">現在のスレッドがロックを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-355"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-356">場合、`millisecondsTimeout`パラメーターと等しい<xref:System.Threading.Timeout.Infinite>、このメソッドは<xref:System.Threading.Monitor.Enter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-356">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="d8e05-357">場合`millisecondsTimeout`が 0 と等しい、このメソッドは<xref:System.Threading.Monitor.TryEnter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-357">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-358">使用<xref:System.Threading.Monitor>(つまり、参照型) のオブジェクトをロック、いない値の型。</span><span class="sxs-lookup"><span data-stu-id="d8e05-358">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d8e05-359">詳細については、次を参照してください。、<xref:System.Threading.Monitor>記事。</span><span class="sxs-lookup"><span data-stu-id="d8e05-359">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="d8e05-360">スレッドがクリティカル セクションを入力していないことを確認するには、メソッドの戻り値を確認し、その戻り値が場合にのみ、クリティカル セクションのコードを実行する必要があります`true`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-360">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="d8e05-361">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-361">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d8e05-362">呼び出す必要がありますので注意<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-362">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-363"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-363">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d8e05-364"><paramref name="millisecondsTimeout" /> は負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-364"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-365">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-365">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-366">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-366">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="d8e05-367">ロックを待機する時間を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-367">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span></span> <span data-ttu-id="d8e05-368">-1 ミリ秒という値は、無期限の待機を指定します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-368">A value of -1 millisecond specifies an infinite wait.</span></span></param>
        <summary><span data-ttu-id="d8e05-369">指定した時間内に、指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-369">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns><span data-ttu-id="d8e05-370">現在のスレッドがロックを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-370"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-371">場合の値、`timeout`ミリ秒に変換するパラメーターが等しい場合、このメソッドは<xref:System.Threading.Monitor.Enter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-371">If the value of the `timeout` parameter converted to milliseconds equals -1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="d8e05-372">場合の値`timeout`が 0 と等しい、このメソッドは<xref:System.Threading.Monitor.TryEnter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-372">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-373">使用<xref:System.Threading.Monitor>(つまり、参照型) のオブジェクトをロック、いない値の型。</span><span class="sxs-lookup"><span data-stu-id="d8e05-373">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d8e05-374">詳細については、次を参照してください。、<xref:System.Threading.Monitor>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="d8e05-374">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="d8e05-375">スレッドがクリティカル セクションを入力していないことを確認するには、メソッドの戻り値を確認し、その戻り値が場合にのみ、クリティカル セクションのコードを実行する必要があります`true`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-375">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="d8e05-376">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-376">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d8e05-377">呼び出す必要がありますので注意<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-377">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-378"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-378">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d8e05-379"><paramref name="timeout" /> ミリ秒の値が負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> (-1 ミリ秒) と等しくないか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-379">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-380">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-380">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-381">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-381">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="d8e05-382">ロックを待機するミリ秒単位の時間。</span><span class="sxs-lookup"><span data-stu-id="d8e05-382">The number of milliseconds to wait for the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="d8e05-383">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-383">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="d8e05-384">入力時には <see langword="false" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-384">The input must be <see langword="false" />.</span></span> <span data-ttu-id="d8e05-385">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-385">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="d8e05-386">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-386">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="d8e05-387">指定したオブジェクトの排他ロックの取得を指定したミリ秒間試み、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-387">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-388">場合、`millisecondsTimeout`パラメーターと等しい<xref:System.Threading.Timeout.Infinite>、このメソッドは<xref:System.Threading.Monitor.Enter%28System.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-388">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="d8e05-389">場合`millisecondsTimeout`が 0 と等しい、このメソッドは<xref:System.Threading.Monitor.TryEnter%28System.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-389">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="d8e05-390">指定した場合は、例外がスローされたために、ロックは取得されませんでした、変数、`lockTaken`パラメーターが`false`後、このメソッドが終了します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-390">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="d8e05-391">これにより、ロックを解除する必要があるかどうかをすべてのケースで決定するプログラムです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-391">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-392">使用<xref:System.Threading.Monitor>(つまり、参照型) のオブジェクトをロック、いない値の型。</span><span class="sxs-lookup"><span data-stu-id="d8e05-392">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d8e05-393">詳細については、次を参照してください。、<xref:System.Threading.Monitor>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="d8e05-393">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="d8e05-394">スレッドがクリティカル セクションを入力していないことの値を調べる必要があります`lockTaken`、その値が場合にのみ、クリティカル セクションのコードの実行`true`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-394">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="d8e05-395">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-395">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d8e05-396">呼び出す必要がありますので注意<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-396">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="d8e05-397">次のコードは、基本的なパターンを使用するため、<xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-397">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="d8e05-398">このオーバー ロードに渡される変数の値を常に設定する、`ref`パラメーター (`ByRef` Visual Basic で)`lockTaken`変数の値が、ロックするかどうかをテストする信頼性の高い方法であるため、メソッドに、例外がスローされる場合でも、リリースしました。</span><span class="sxs-lookup"><span data-stu-id="d8e05-398">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d8e05-399"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-399">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-400"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-400">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d8e05-401"><paramref name="millisecondsTimeout" /> は負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-401"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-402">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-402">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="d8e05-403">ロックを待機する時間。</span><span class="sxs-lookup"><span data-stu-id="d8e05-403">The amount of time to wait for the lock.</span></span> <span data-ttu-id="d8e05-404">-1 ミリ秒という値は、無期限の待機を指定します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-404">A value of -1 millisecond specifies an infinite wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="d8e05-405">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-405">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="d8e05-406">入力時には <see langword="false" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-406">The input must be <see langword="false" />.</span></span> <span data-ttu-id="d8e05-407">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-407">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="d8e05-408">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-408">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="d8e05-409">指定したオブジェクトの排他ロックの取得を指定した時間にわたって試み、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-409">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-410">場合の値、`timeout`ミリ秒に変換するパラメーターが等しい場合、このメソッドは<xref:System.Threading.Monitor.Enter%28System.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-410">If the value of the `timeout` parameter converted to milliseconds equals -1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="d8e05-411">場合の値`timeout`が 0 と等しい、このメソッドは<xref:System.Threading.Monitor.TryEnter%28System.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-411">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="d8e05-412">指定した場合は、例外がスローされたために、ロックは取得されませんでした、変数、`lockTaken`パラメーターが`false`後、このメソッドが終了します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-412">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="d8e05-413">これにより、ロックを解除する必要があるかどうかをすべてのケースで決定するプログラムです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-413">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-414">使用<xref:System.Threading.Monitor>(つまり、参照型) のオブジェクトをロック、いない値の型。</span><span class="sxs-lookup"><span data-stu-id="d8e05-414">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="d8e05-415">詳細については、次を参照してください。、<xref:System.Threading.Monitor>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="d8e05-415">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="d8e05-416">スレッドがクリティカル セクションを入力していないことの値を調べる必要があります`lockTaken`、その値が場合にのみ、クリティカル セクションのコードの実行`true`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-416">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="d8e05-417">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-417">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="d8e05-418">呼び出す必要がありますので注意<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-418">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d8e05-419"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-419">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-420"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-420">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d8e05-421"><paramref name="timeout" /> ミリ秒の値が負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> (-1 ミリ秒) と等しくないか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-421">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-422">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-422">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d8e05-423">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-423">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-424">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-424">The object on which to wait.</span></span></param>
        <summary><span data-ttu-id="d8e05-425">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-425">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
        <returns><span data-ttu-id="d8e05-426">呼び出し元が、指定したオブジェクトのロックを再取得したために呼び出しが返された場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-426"><see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span></span> <span data-ttu-id="d8e05-427">このメソッドは、ロックが再取得されないと制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-427">This method does not return if the lock is not reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-428">指定したオブジェクトのロックを所有しているスレッドは、別のスレッドがアクセスできるように、オブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-428">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="d8e05-429">呼び出し元は、ロックを再取得を待機中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-429">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="d8e05-430">呼び出し元が別のスレッドの操作の結果として発生する状態の変更を待機する必要がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-430">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="d8e05-431">スレッドを呼び出すと`Wait`オブジェクトのロックを解放し、オブジェクトの待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-431">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="d8e05-432">オブジェクトの準備完了キューでは、次のスレッドに (1 つである) 場合は、ロックを取得、オブジェクトを排他的に使用します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-432">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="d8e05-433">すべてのスレッドを呼び出す`Wait`からシグナルを受信するまで、待機キューに残ります<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>ロックの所有者によって送信されました。</span><span class="sxs-lookup"><span data-stu-id="d8e05-433">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="d8e05-434">場合`Pulse`送信されると、待機キューの先頭にあるスレッドのみが影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-434">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="d8e05-435">場合`PulseAll`オブジェクトを待機しているすべてのスレッドが影響を受ける、送信されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-435">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="d8e05-436">シグナルが受信したときに、1 つまたは複数のスレッドが待機キューのままにし、準備完了キューを入力します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-436">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="d8e05-437">準備完了キュー内のスレッドはロックを再取得が許可されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-437">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="d8e05-438">このメソッドは、呼び出し元のスレッドがオブジェクトのロックを再を返します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-438">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="d8e05-439">ロックの所有者が要求されていない場合、このメソッドは無期限にブロック注`Pulse`または`PulseAll`します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-439">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="d8e05-440">呼び出し元が実行される`Wait`回数に関係なく 1 回、<xref:System.Threading.Monitor.Enter%2A>指定したオブジェクトが呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-440">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="d8e05-441">概念的には、`Wait`メソッドが呼び出し元が呼び出された回数を格納`Enter`オブジェクトを呼び出すと`Exit`ロックされたオブジェクトを完全に解放するために必要な回数だけです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-441">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="d8e05-442">呼び出し元は、オブジェクトを再取得を待機中にブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-442">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="d8e05-443">呼び出し元がロックを再取得するとき、システムは`Enter`として保存されている復元に必要なだけ何度も`Enter`呼び出し元の数。</span><span class="sxs-lookup"><span data-stu-id="d8e05-443">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="d8e05-444">呼び出す`Wait`指定したオブジェクトのロックを解放するだけです。 呼び出し元がその他のオブジェクトのロックの所有者である場合は、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-444">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="d8e05-445">同期済みオブジェクトが現在ロック、ロックを取得する準備ができているスレッドが含まれている、準備完了キューへの参照と、待機キューへの参照を保持しているスレッドへの参照を含む、いくつかの参照を保持しているを確認します。オブジェクトの状態の変更の通知を待機しているスレッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-445">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d8e05-446"><xref:System.Threading.Monitor.Pulse%2A>、 <xref:System.Threading.Monitor.PulseAll%2A>、および`Wait`メソッドは、同期されたコード ブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-446">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d8e05-447">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドの動作について説明する場合は<xref:System.Threading.Monitor.Pulse%2A>スレッドが待機しているないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-447">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-448"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-448">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="d8e05-449">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-449">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="d8e05-450"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-450">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="d8e05-451">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-451">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-452">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-452">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-453">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-453">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="d8e05-454">スレッドが実行待ちキューに入るまでの待機時間 (ミリ秒)。</span><span class="sxs-lookup"><span data-stu-id="d8e05-454">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="d8e05-455">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-455">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="d8e05-456">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-456">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns><span data-ttu-id="d8e05-457">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-457"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="d8e05-458">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-458">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-459">このメソッドでは、返しませんで排他ロックが再取得されるまで、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d8e05-459">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="d8e05-460">指定したオブジェクトのロックを所有しているスレッドは、別のスレッドがアクセスできるように、オブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-460">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="d8e05-461">呼び出し元は、ロックを再取得を待機中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-461">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="d8e05-462">呼び出し元が別のスレッドの操作の結果として発生する状態の変更を待機する必要がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-462">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="d8e05-463">タイムアウトにより、現在のスレッドでブロックしないこと無期限に別のスレッドが最初に呼び出さずにロックを解放する場合、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-463">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="d8e05-464">また、スレッドをロックをすぐに再取得できるように、早まったり、待機キュー内の他のスレッドをバイパスして、準備完了キューに移動します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-464">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="d8e05-465">戻り値をテストできる、スレッド、<xref:System.Threading.Monitor.Wait%2A>タイムアウトする前にロックが再取得するかどうかを判断するメソッド。スレッドが、待機を入力する原因となった条件を評価できる場合に必要な呼び出し、<xref:System.Threading.Monitor.Wait%2A>メソッドを再度します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-465">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="d8e05-466">スレッドを呼び出すと`Wait`オブジェクトのロックを解放し、オブジェクトの待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-466">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="d8e05-467">オブジェクトの準備完了キューでは、次のスレッドに (1 つである) 場合は、ロックを取得、オブジェクトを排他的に使用します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-467">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="d8e05-468">呼び出したスレッド`Wait`されるまでの待機キューのままに、ロックを保持しているスレッドを呼び出す<xref:System.Threading.Monitor.PulseAll%2A>は、キュー内の次のロックを保持しているスレッドを起動や<xref:System.Threading.Monitor.Pulse%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-468">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="d8e05-469">ただし場合、`millisecondsTimeout`が別のスレッドがこのオブジェクトを呼び出す前に経過すると<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド、元のスレッドがロックを再取得するためにキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-469">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-470">場合<xref:System.Threading.Timeout.Infinite>が指定されて、`millisecondsTimeout`パラメーターでは、このメソッドはブロック無期限にロックの所有者を呼び出さない限り、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-470">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="d8e05-471">場合`millisecondsTimeout`0 を呼び出すスレッドを等しい`Wait`ロックを解放し、すぐにロックを再取得するためにキューに入る。</span><span class="sxs-lookup"><span data-stu-id="d8e05-471">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="d8e05-472">呼び出し元が実行される`Wait`回数に関係なく 1 回、<xref:System.Threading.Monitor.Enter%2A>指定したオブジェクトが呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-472">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="d8e05-473">概念的には、`Wait`メソッドが呼び出し元が呼び出された回数を格納<xref:System.Threading.Monitor.Enter%2A>オブジェクトを呼び出すと<xref:System.Threading.Monitor.Exit%2A>ロックされたオブジェクトを完全に解放するために必要な回数だけです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-473">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="d8e05-474">呼び出し元は、オブジェクトを再取得を待機中にブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-474">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="d8e05-475">呼び出し元がロックを再取得するとき、システムは<xref:System.Threading.Monitor.Enter%2A>として保存されている復元に必要なだけ何度も<xref:System.Threading.Monitor.Enter%2A>呼び出し元の数。</span><span class="sxs-lookup"><span data-stu-id="d8e05-475">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="d8e05-476">呼び出す`Wait`指定したオブジェクトのロックを解放するだけです。 呼び出し元がその他のオブジェクトのロックの所有者である場合は、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-476">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-477">同期済みオブジェクトが現在ロック、ロックを取得する準備ができているスレッドが含まれている、準備完了キューへの参照を含む待機キューへの参照を保持しているスレッドへの参照を含む、いくつかの参照を保持しますオブジェクトの状態の変更の通知を待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-477">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d8e05-478"><xref:System.Threading.Monitor.Pulse%2A>、 <xref:System.Threading.Monitor.PulseAll%2A>、および`Wait`メソッドは、同期されたコード ブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-478">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d8e05-479">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドの動作について説明する場合は<xref:System.Threading.Monitor.Pulse%2A>スレッドが待機しているないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-479">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-480"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-480">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="d8e05-481">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-481">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="d8e05-482"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-482">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="d8e05-483">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-483">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d8e05-484"><paramref name="millisecondsTimeout" /> パラメーターの値が負で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-484">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-485">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-485">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-486">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-486">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="d8e05-487">スレッドが実行待ちキューに入るまでの時間を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-487">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="d8e05-488">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-488">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="d8e05-489">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-489">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns><span data-ttu-id="d8e05-490">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-490"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="d8e05-491">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-491">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-492">このメソッドでは、返しませんで排他ロックが再取得されるまで、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d8e05-492">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="d8e05-493">指定したオブジェクトのロックを所有しているスレッドは、別のスレッドがアクセスできるように、オブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-493">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="d8e05-494">呼び出し元は、ロックを再取得を待機中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-494">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="d8e05-495">呼び出し元が別のスレッドの操作の結果として発生する状態の変更を待機する必要がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-495">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="d8e05-496">タイムアウトにより、現在のスレッドでブロックしないこと無期限に別のスレッドが最初に呼び出さずにロックを解放する場合、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-496">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="d8e05-497">また、スレッドをロックをすぐに再取得できるように、早まったり、待機キュー内の他のスレッドをバイパスして、準備完了キューに移動します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-497">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="d8e05-498">戻り値をテストできる、スレッド、<xref:System.Threading.Monitor.Wait%2A>タイムアウトする前にロックが再取得するかどうかを判断するメソッド。スレッドが、待機を入力する原因となった条件を評価できる場合に必要な呼び出し、<xref:System.Threading.Monitor.Wait%2A>メソッドを再度します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-498">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="d8e05-499">スレッドを呼び出すと`Wait`オブジェクトのロックを解放し、オブジェクトの待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-499">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="d8e05-500">オブジェクトの準備完了キューでは、次のスレッドに (1 つである) 場合は、ロックを取得、オブジェクトを排他的に使用します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-500">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="d8e05-501">呼び出したスレッド`Wait`されるまでの待機キューのままに、ロックを保持しているスレッドを呼び出す<xref:System.Threading.Monitor.PulseAll%2A>は、キュー内の次のロックを保持しているスレッドを起動や<xref:System.Threading.Monitor.Pulse%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-501">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="d8e05-502">ただし場合、`timeout`が別のスレッドがこのオブジェクトを呼び出す前に経過すると<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド、元のスレッドがロックを再取得するためにキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-502">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-503">場合、 <xref:System.TimeSpan> -1 ミリ秒を表すが指定されて、`timeout`パラメーターでは、このメソッドはブロック無期限にロックの所有者を呼び出さない限り、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-503">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="d8e05-504">場合`timeout`0 ミリ秒でを呼び出すスレッド`Wait`ロックを解放し、すぐにロックを再取得するためにキューに入る。</span><span class="sxs-lookup"><span data-stu-id="d8e05-504">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="d8e05-505">呼び出し元が実行される`Wait`回数に関係なく 1 回、<xref:System.Threading.Monitor.Enter%2A>指定したオブジェクトが呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-505">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="d8e05-506">概念的には、`Wait`メソッドが呼び出し元が呼び出された回数を格納<xref:System.Threading.Monitor.Enter%2A>オブジェクトを呼び出すと<xref:System.Threading.Monitor.Exit%2A>ロックされたオブジェクトを完全に解放するために必要な回数だけです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-506">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="d8e05-507">呼び出し元は、オブジェクトを再取得を待機中にブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-507">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="d8e05-508">呼び出し元がロックを再取得するとき、システムは<xref:System.Threading.Monitor.Enter%2A>として保存されている復元に必要なだけ何度も<xref:System.Threading.Monitor.Enter%2A>呼び出し元の数。</span><span class="sxs-lookup"><span data-stu-id="d8e05-508">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="d8e05-509">呼び出す`Wait`指定したオブジェクトのロックを解放するだけです。 呼び出し元がその他のオブジェクトのロックの所有者である場合は、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-509">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-510">同期済みオブジェクトが現在ロック、ロックを取得する準備ができているスレッドが含まれている、準備完了キューへの参照を含む待機キューへの参照を保持しているスレッドへの参照を含む、いくつかの参照を保持しますオブジェクトの状態の変更の通知を待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-510">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d8e05-511"><xref:System.Threading.Monitor.Pulse%2A>、 <xref:System.Threading.Monitor.PulseAll%2A>、および`Wait`メソッドは、同期されたコード ブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-511">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d8e05-512">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドの動作について説明する場合は<xref:System.Threading.Monitor.Pulse%2A>スレッドが待機しているないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-512">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-513"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-513">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="d8e05-514">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-514">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="d8e05-515"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-515">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="d8e05-516">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-516">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d8e05-517"><paramref name="timeout" /> パラメーターのミリ秒単位の値が負で、かつ <see cref="F:System.Threading.Timeout.Infinite" /> (-1 ミリ秒) ではありません。または <see cref="F:System.Int32.MaxValue" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-517">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-518">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-518">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-519">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-519">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="d8e05-520">スレッドが実行待ちキューに入るまでの待機時間 (ミリ秒)。</span><span class="sxs-lookup"><span data-stu-id="d8e05-520">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext"><span data-ttu-id="d8e05-521">待機の前にコンテキストの同期ドメイン (同期されたコンテキストの場合) を終了および再取得する場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-521"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="d8e05-522">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-522">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="d8e05-523">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-523">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="d8e05-524">このメソッドは、コンテキストの同期ドメイン (同期されたコンテキストの場合) が待機の前に終了し、後で再取得されるかどうかも指定します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-524">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span></span></summary>
        <returns><span data-ttu-id="d8e05-525">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-525"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="d8e05-526">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-526">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-527">このメソッドでは、返しませんで排他ロックが再取得されるまで、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d8e05-527">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="d8e05-528">指定したオブジェクトのロックを所有しているスレッドは、別のスレッドがアクセスできるように、オブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-528">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="d8e05-529">呼び出し元は、ロックを再取得を待機中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-529">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="d8e05-530">呼び出し元が別のスレッドの操作の結果として発生する状態の変更を待機する必要がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-530">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="d8e05-531">タイムアウトにより、現在のスレッドでブロックしないこと無期限に別のスレッドが最初に呼び出さずにロックを解放する場合、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-531">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="d8e05-532">また、スレッドをロックをすぐに再取得できるように、早まったり、待機キュー内の他のスレッドをバイパスして、準備完了キューに移動します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-532">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="d8e05-533">戻り値をテストできる、スレッド、<xref:System.Threading.Monitor.Wait%2A>タイムアウトする前にロックが再取得するかどうかを判断するメソッド。スレッドが、待機を入力する原因となった条件を評価できる場合に必要な呼び出し、<xref:System.Threading.Monitor.Wait%2A>メソッドを再度します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-533">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="d8e05-534">スレッドを呼び出すと`Wait`ロックを解放し、待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-534">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="d8e05-535">この時点では、次のスレッド準備完了キューに (1 つである) 場合の許容時間ロックを制御します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-535">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="d8e05-536">呼び出したスレッド`Wait`されるまでの待機キューのままに、ロックを保持しているスレッドを呼び出す<xref:System.Threading.Monitor.PulseAll%2A>は、キュー内の次のロックを保持しているスレッドを起動や<xref:System.Threading.Monitor.Pulse%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-536">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="d8e05-537">ただし場合、`millisecondsTimeout`が別のスレッドがこのオブジェクトを呼び出す前に経過すると<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド、元のスレッドがロックを再取得するためにキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-537">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-538">場合<xref:System.Threading.Timeout.Infinite>が指定されて、`millisecondsTimeout`パラメーターでは、このメソッドはブロック無期限にロックの所有者を呼び出さない限り、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-538">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="d8e05-539">場合`millisecondsTimeout`0 を呼び出すスレッドを等しい`Wait`ロックを解放し、すぐにロックを再取得するためにキューに入る。</span><span class="sxs-lookup"><span data-stu-id="d8e05-539">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="d8e05-540">呼び出し元が実行される`Wait`回数に関係なく 1 回、<xref:System.Threading.Monitor.Enter%2A>指定したオブジェクトが呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-540">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="d8e05-541">概念的には、`Wait`メソッドが呼び出し元が呼び出された回数を格納<xref:System.Threading.Monitor.Enter%2A>オブジェクトを呼び出すと<xref:System.Threading.Monitor.Exit%2A>ロックされたオブジェクトを完全に解放するために必要な回数だけです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-541">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="d8e05-542">呼び出し元は、オブジェクトを再取得を待機中にブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-542">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="d8e05-543">呼び出し元がロックを再取得するとき、システムは<xref:System.Threading.Monitor.Enter%2A>として保存されている復元に必要なだけ何度も<xref:System.Threading.Monitor.Enter%2A>呼び出し元の数。</span><span class="sxs-lookup"><span data-stu-id="d8e05-543">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="d8e05-544">呼び出す`Wait`指定したオブジェクトのロックを解放するだけです。 呼び出し元がその他のオブジェクトのロックの所有者である場合は、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-544">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-545">同期済みオブジェクトが現在ロック、ロックを取得する準備ができているスレッドが含まれている、準備完了キューへの参照を含む待機キューへの参照を保持しているスレッドへの参照を含む、いくつかの参照を保持しますオブジェクトの状態の変更の通知を待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-545">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d8e05-546"><xref:System.Threading.Monitor.Pulse%2A>、 <xref:System.Threading.Monitor.PulseAll%2A>、および`Wait`メソッドは、同期されたコード ブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-546">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d8e05-547">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドの動作について説明する場合は<xref:System.Threading.Monitor.Pulse%2A>スレッドが待機しているないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-547">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="d8e05-548">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="d8e05-548">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="d8e05-549">`exitContext`パラメーターには効果がない場合を除き、<xref:System.Threading.Monitor.Wait%2A>既定以外の管理対象のコンテキスト内からメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-549">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="d8e05-550">派生したクラスのインスタンスへの呼び出し、スレッドが場合に生じる<xref:System.ContextBoundObject>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-550">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="d8e05-551">派生していないクラスでメソッドを現在実行している場合でも<xref:System.ContextBoundObject>と同様に、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-551">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="d8e05-552">既定以外のコンテキストでコードを実行しているときに指定する`true`の`exitContext`が原因で、既定以外の管理コンテキストを終了するスレッド (つまり、既定のコンテキストへの移行) 実行する前に、<xref:System.Threading.Monitor.Wait%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-552">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="d8e05-553">呼び出しの後に元の既定以外のコンテキストを返します、<xref:System.Threading.Monitor.Wait%2A>メソッドが完了するとします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-553">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="d8e05-554">これは、便利な場合、コンテキスト バインド クラスには、<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>属性が適用されています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-554">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="d8e05-555">その場合は、クラスのメンバーに対するすべての呼び出しを自動的に同期し、同期ドメインは、クラスのコードの本文全体。</span><span class="sxs-lookup"><span data-stu-id="d8e05-555">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="d8e05-556">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.Monitor.Wait%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトのすべてのメンバーへの呼び出しでブロックされているスレッドを許可する、同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-556">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="d8e05-557">ときに、<xref:System.Threading.Monitor.Wait%2A>メソッドが戻る呼び出しを行ったスレッドが同期ドメインを再入力を待つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-557">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-558"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-558">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="d8e05-559"><see langword="Wait" /> は、同期されたコード ブロック内からは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-559"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="d8e05-560"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-560">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="d8e05-561">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-561">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d8e05-562"><paramref name="millisecondsTimeout" /> パラメーターの値が負で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-562">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-563">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-563">Managed Threading</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="exitContext" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d8e05-564">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d8e05-564">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="d8e05-565">スレッドが実行待ちキューに入るまでの時間を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-565">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext"><span data-ttu-id="d8e05-566">待機の前にコンテキストの同期ドメイン (同期されたコンテキストの場合) を終了および再取得する場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-566"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="d8e05-567">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-567">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="d8e05-568">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-568">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="d8e05-569">または、待機の前に同期化されたコンテキストの同期ドメインを終了し、ドメインを後で再取得します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-569">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span></span></summary>
        <returns><span data-ttu-id="d8e05-570">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8e05-570"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="d8e05-571">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-571">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8e05-572">このメソッドでは、返しませんで排他ロックが再取得されるまで、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d8e05-572">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="d8e05-573">指定したオブジェクトのロックを所有しているスレッドは、別のスレッドがアクセスできるように、オブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-573">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="d8e05-574">呼び出し元は、ロックを再取得を待機中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-574">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="d8e05-575">呼び出し元が別のスレッドの操作の結果として発生する状態の変更を待機する必要がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-575">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="d8e05-576">タイムアウトにより、現在のスレッドでブロックしないこと無期限に別のスレッドが最初に呼び出さずにロックを解放する場合、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-576">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="d8e05-577">また、スレッドをロックをすぐに再取得できるように、早まったり、待機キュー内の他のスレッドをバイパスして、準備完了キューに移動します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-577">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="d8e05-578">戻り値をテストできる、スレッド、<xref:System.Threading.Monitor.Wait%2A>タイムアウトする前にロックが再取得するかどうかを判断するメソッド。スレッドが、待機を入力する原因となった条件を評価できる場合に必要な呼び出し、<xref:System.Threading.Monitor.Wait%2A>メソッドを再度します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-578">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="d8e05-579">スレッドを呼び出すと`Wait`ロックを解放し、待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-579">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="d8e05-580">この時点では、次のスレッド準備完了キューに (1 つである) 場合の許容時間ロックを制御します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-580">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="d8e05-581">呼び出したスレッド`Wait`されるまでの待機キューのままに、ロックを保持しているスレッドを呼び出す<xref:System.Threading.Monitor.PulseAll%2A>は、キュー内の次のロックを保持しているスレッドを起動や<xref:System.Threading.Monitor.Pulse%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-581">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="d8e05-582">ただし場合、`timeout`別のスレッドがこのオブジェクトを呼び出すまでのミリ秒<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド、元のスレッドがロックを再取得するためにキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-582">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-583">場合、 <xref:System.TimeSpan> -1 ミリ秒を表すが指定されて、`timeout`パラメーターでは、このメソッドはブロック無期限にロックの所有者を呼び出さない限り、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-583">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="d8e05-584">場合`timeout`0 ミリ秒でを呼び出すスレッド`Wait`ロックを解放し、すぐにロックを再取得するためにキューに入る。</span><span class="sxs-lookup"><span data-stu-id="d8e05-584">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="d8e05-585">呼び出し元が実行される`Wait`回数に関係なく 1 回、<xref:System.Threading.Monitor.Enter%2A>指定したオブジェクトが呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-585">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="d8e05-586">概念的には、`Wait`メソッドが呼び出し元が呼び出された回数を格納<xref:System.Threading.Monitor.Enter%2A>オブジェクトを呼び出すと<xref:System.Threading.Monitor.Exit%2A>ロックされたオブジェクトを完全に解放するために必要な回数だけです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-586">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="d8e05-587">呼び出し元は、オブジェクトを再取得を待機中にブロックします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-587">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="d8e05-588">呼び出し元がロックを再取得するとき、システムは<xref:System.Threading.Monitor.Enter%2A>として保存されている復元に必要なだけ何度も<xref:System.Threading.Monitor.Enter%2A>呼び出し元の数。</span><span class="sxs-lookup"><span data-stu-id="d8e05-588">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="d8e05-589">呼び出す`Wait`指定したオブジェクトのロックを解放するだけです。 呼び出し元がその他のオブジェクトのロックの所有者である場合は、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-589">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d8e05-590">同期済みオブジェクトが現在ロック、ロックを取得する準備ができているスレッドが含まれている、準備完了キューへの参照を含む待機キューへの参照を保持しているスレッドへの参照を含む、いくつかの参照を保持しますオブジェクトの状態の変更の通知を待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-590">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="d8e05-591"><xref:System.Threading.Monitor.Pulse%2A>、 <xref:System.Threading.Monitor.PulseAll%2A>、および`Wait`メソッドは、同期されたコード ブロック内から呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-591">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="d8e05-592">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドの動作について説明する場合は<xref:System.Threading.Monitor.Pulse%2A>スレッドが待機しているないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-592">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="d8e05-593">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="d8e05-593">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="d8e05-594">`exitContext`パラメーターには効果がない場合を除き、<xref:System.Threading.Monitor.Wait%2A>既定以外の管理対象のコンテキスト内からメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-594">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="d8e05-595">派生したクラスのインスタンスへの呼び出し、スレッドが場合に生じる<xref:System.ContextBoundObject>します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-595">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="d8e05-596">派生していないクラスでメソッドを現在実行している場合でも<xref:System.ContextBoundObject>と同様に、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-596">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="d8e05-597">既定以外のコンテキストでコードを実行しているときに指定する`true`の`exitContext`が原因で、既定以外の管理コンテキストを終了するスレッド (つまり、既定のコンテキストへの移行) 実行する前に、<xref:System.Threading.Monitor.Wait%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d8e05-597">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="d8e05-598">呼び出しの後に元の既定以外のコンテキストを返します、<xref:System.Threading.Monitor.Wait%2A>メソッドが完了するとします。</span><span class="sxs-lookup"><span data-stu-id="d8e05-598">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="d8e05-599">これは、便利な場合、コンテキスト バインド クラスには、<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>属性が適用されています。</span><span class="sxs-lookup"><span data-stu-id="d8e05-599">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="d8e05-600">その場合は、クラスのメンバーに対するすべての呼び出しを自動的に同期し、同期ドメインは、クラスのコードの本文全体。</span><span class="sxs-lookup"><span data-stu-id="d8e05-600">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="d8e05-601">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.Monitor.Wait%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトのすべてのメンバーへの呼び出しでブロックされているスレッドを許可する、同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="d8e05-601">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="d8e05-602">ときに、<xref:System.Threading.Monitor.Wait%2A>メソッドが戻る呼び出しを行ったスレッドが同期ドメインを再入力を待つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-602">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d8e05-603"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d8e05-603">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="d8e05-604"><see langword="Wait" /> は、同期されたコード ブロック内からは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="d8e05-604"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="d8e05-605">Wait を呼び出すスレッドは、後で待機状態の途中で中断されます。</span><span class="sxs-lookup"><span data-stu-id="d8e05-605">The thread that invokes Wait is later interrupted from the waiting state.</span></span> <span data-ttu-id="d8e05-606">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="d8e05-606">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d8e05-607"><paramref name="timeout" /> パラメーターが負で <see cref="F:System.Threading.Timeout.Infinite" /> (-1 ミリ秒) を表していないか、<see cref="F:System.Int32.MaxValue" /> よりも大きいです。</span><span class="sxs-lookup"><span data-stu-id="d8e05-607">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="d8e05-608">マネージド スレッド処理</span><span class="sxs-lookup"><span data-stu-id="d8e05-608">Managed Threading</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
