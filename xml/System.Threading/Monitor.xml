<Type Name="Monitor" FullName="System.Threading.Monitor">
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="121b9-101">オブジェクトへのアクセスを同期する機構を提供します。</span><span class="sxs-lookup"><span data-stu-id="121b9-101">Provides a mechanism that synchronizes access to objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-102"><xref:System.Threading.Monitor>クラスでは、取得、呼び出すことによって、特定のオブジェクトのロックを開放する、コード領域へのアクセスを同期することができます、 <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>、 <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>、および<xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="121b9-103">オブジェクトのロックは、一般、クリティカル セクションと呼ばれる、コードのブロックへのアクセスを制限する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="121b9-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="121b9-104">スレッド オブジェクトのロックを所有しているときにその他のスレッドを取得できますありませんそのロック。</span><span class="sxs-lookup"><span data-stu-id="121b9-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="121b9-105">使用することも、<xref:System.Threading.Monitor>にクラスを他のスレッドができないアプリケーションのセクションにアクセスすることを確認するコード、ロックの所有者によって実行されているその他のスレッドが別のロックされたオブジェクトを使用して、コードを実行しない限り、します。</span><span class="sxs-lookup"><span data-stu-id="121b9-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="121b9-106">この記事の内容:</span><span class="sxs-lookup"><span data-stu-id="121b9-106">In this article:</span></span>  
  
 <span data-ttu-id="121b9-107">[Monitor クラス: 概要](#Overview) </span><span class="sxs-lookup"><span data-stu-id="121b9-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="121b9-108">[ロック オブジェクト](#Lock) </span><span class="sxs-lookup"><span data-stu-id="121b9-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="121b9-109">[クリティカル セクション](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="121b9-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="121b9-110">[パルス、PulseAll、および待機](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="121b9-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="121b9-111">モニターおよび待機ハンドル</span><span class="sxs-lookup"><span data-stu-id="121b9-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="121b9-112">Monitor クラス: 概要</span><span class="sxs-lookup"><span data-stu-id="121b9-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="121b9-113"><xref:System.Threading.Monitor> 次の機能があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="121b9-114">要求時にオブジェクトに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="121b9-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="121b9-115">バインドされている場合、これは、任意のコンテキストから直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="121b9-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="121b9-116">インスタンス、<xref:System.Threading.Monitor>クラスを作成することはできません。 のメソッド、<xref:System.Threading.Monitor>クラスはすべて静的です。</span><span class="sxs-lookup"><span data-stu-id="121b9-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="121b9-117">各メソッドには、アクセスを制御する同期オブジェクトが渡されますクリティカル セクションにします。</span><span class="sxs-lookup"><span data-stu-id="121b9-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-118">使用して、<xref:System.Threading.Monitor>文字列以外のオブジェクトをロックするクラス (つまり、参照型を以外の<xref:System.String>)、いない値の型。</span><span class="sxs-lookup"><span data-stu-id="121b9-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="121b9-119">詳細については、「のオーバー ロード、<xref:System.Threading.Monitor.Enter%2A>メソッドおよび[ロック オブジェクト](#Lock)この記事で後述する「します。</span><span class="sxs-lookup"><span data-stu-id="121b9-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="121b9-120">次の表では、同期されているオブジェクトにアクセスするスレッドで実行できる操作について説明します。</span><span class="sxs-lookup"><span data-stu-id="121b9-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="121b9-121">アクション</span><span class="sxs-lookup"><span data-stu-id="121b9-121">Action</span></span>|<span data-ttu-id="121b9-122">説明</span><span class="sxs-lookup"><span data-stu-id="121b9-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="121b9-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="121b9-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="121b9-124">オブジェクトのロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="121b9-124">Acquires a lock for an object.</span></span> <span data-ttu-id="121b9-125">この操作は、クリティカル セクションの先頭を示します。</span><span class="sxs-lookup"><span data-stu-id="121b9-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="121b9-126">その他のスレッド加わることはできませんクリティカル セクションの手順を別のロックされたオブジェクトを使用して、重要なセクションで実行されている場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="121b9-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="121b9-127">他のスレッドをロックし、オブジェクトへのアクセスを許可するためにオブジェクトのロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="121b9-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="121b9-128">別のスレッド オブジェクトにアクセスするときに、呼び出し元のスレッドが待機します。</span><span class="sxs-lookup"><span data-stu-id="121b9-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="121b9-129">パルス シグナルは、待機中のスレッド オブジェクトの状態の変更についての通知に使用されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="121b9-130"><xref:System.Threading.Monitor.Pulse%2A> (信号) <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="121b9-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="121b9-131">1 つ以上の待機中のスレッドにシグナルを送信します。</span><span class="sxs-lookup"><span data-stu-id="121b9-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="121b9-132">シグナルが待機中のスレッドのロックされたオブジェクトの状態が変更されたことを通知し、ロックの所有者にロックを解除する準備がします。</span><span class="sxs-lookup"><span data-stu-id="121b9-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="121b9-133">オブジェクトのロックが最終的に表示されるように、待機中のスレッドは、オブジェクトの実行待ちキューに配置されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="121b9-134">スレッドがロックを持つ、必要な状態に達しているかどうかはそのオブジェクトの新しい状態を確認できます。</span><span class="sxs-lookup"><span data-stu-id="121b9-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="121b9-135">オブジェクトのロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="121b9-135">Releases the lock on an object.</span></span> <span data-ttu-id="121b9-136">この操作もロック オブジェクトによって保護されている重要なセクションの末尾をマークします。</span><span class="sxs-lookup"><span data-stu-id="121b9-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="121b9-137">以降で、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、2 つのオーバー ロードのセットがある、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.TryEnter%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="121b9-138">オーバー ロードの 1 つのセットには、 `ref` (C# の場合) または`ByRef`(Visual Basic) の<xref:System.Boolean>にアトミックに設定されているパラメーター`true`かどうか、ロック、ロックを獲得するときに例外がスローされた場合でもです。</span><span class="sxs-lookup"><span data-stu-id="121b9-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="121b9-139">ロックを保護するリソースが一貫した状態にできない可能性がある場合でも、常にロックを解除することが重要である場合は、これらのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="121b9-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="121b9-140">ロック オブジェクト</span><span class="sxs-lookup"><span data-stu-id="121b9-140">The lock object</span></span>  
 <span data-ttu-id="121b9-141">Monitor クラスから成ります`static`(C# の場合) または`Shared`(Visual Basic) のクリティカル セクションへのアクセスを制御するオブジェクトを操作するメソッド。</span><span class="sxs-lookup"><span data-stu-id="121b9-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="121b9-142">次の情報は、同期するオブジェクトごとに保持されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="121b9-143">ロックを現在保持しているスレッドへの参照。</span><span class="sxs-lookup"><span data-stu-id="121b9-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="121b9-144">ロックを取得する準備ができているスレッドを格納する準備ができて、キューへの参照。</span><span class="sxs-lookup"><span data-stu-id="121b9-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="121b9-145">ロックされたオブジェクトの状態の変更の通知を待機しているスレッドを含む待機キューへの参照。</span><span class="sxs-lookup"><span data-stu-id="121b9-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="121b9-146"><xref:System.Threading.Monitor> は値型ではなく、オブジェクト (つまり、参照型) をロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="121b9-147">値型を <xref:System.Threading.Monitor.Enter%2A> と <xref:System.Threading.Monitor.Exit%2A> に渡すことができますが、値型は呼び出しごとに個別にボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="121b9-148">呼び出しごとに個別のオブジェクトが作成されるので、<xref:System.Threading.Monitor.Enter%2A> は決してコードをブロックすることはなく、保護していると想定しているコードは実際には同期されません。</span><span class="sxs-lookup"><span data-stu-id="121b9-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="121b9-149">さらに、<xref:System.Threading.Monitor.Exit%2A> に渡されたオブジェクトは <xref:System.Threading.Monitor.Enter%2A> に渡されたオブジェクトとは異なるため、<xref:System.Threading.Monitor> は「オブジェクトの同期メソッドが、コードの非同期ブロックから呼び出されました。」というメッセージとともに <xref:System.Threading.SynchronizationLockException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="121b9-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="121b9-150">この問題を説明する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="121b9-150">The following example illustrates this problem.</span></span> <span data-ttu-id="121b9-151">10 個のタスクが起動され、それぞれが 250 ミリ秒間スリープ状態になります。</span><span class="sxs-lookup"><span data-stu-id="121b9-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="121b9-152">次に、各タスクはカウンター変数である `nTasks` を更新します。これは実際に起動、実行されるタスクの数をカウントするためのものです。</span><span class="sxs-lookup"><span data-stu-id="121b9-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="121b9-153">`nTasks` は複数のタスクで同時に更新可能なグローバル変数なので、複数のタスクによる同時変更を防止するためにモニターを使用します。</span><span class="sxs-lookup"><span data-stu-id="121b9-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="121b9-154">しかし、例に示す出力のように、各タスクは <xref:System.Threading.SynchronizationLockException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="121b9-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="121b9-155">各タスクの <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> メソッドに対する呼び出しの前に `nTasks` 変数がボックス化されるため、各タスクは <xref:System.Threading.SynchronizationLockException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="121b9-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="121b9-156">つまり、各メソッドの呼び出しは他のメソッドから独立している個別の変数に渡されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="121b9-157">`nTasks` は <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> メソッドへの呼び出しで再びボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="121b9-158">こうして 10 個の新しいボックス化された変数が作成されます。これらは互いに独立したものであり、`nTasks` からも <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> メソッドへの呼び出しで作成された 10 個のボックス化された変数からも独立しています。</span><span class="sxs-lookup"><span data-stu-id="121b9-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="121b9-159">それで、以前ロックされていなかった新規に作成された変数のロックを解放しようとしているため、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="121b9-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="121b9-160">次の例に示すように、<xref:System.Threading.Monitor.Enter%2A> と <xref:System.Threading.Monitor.Exit%2A> の呼び出しの前に値型の変数をボックス化したり、ボックス化された同じオブジェクトを両方のメソッドに渡したりできますが、これを行う利点はありません。</span><span class="sxs-lookup"><span data-stu-id="121b9-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="121b9-161">ボックス化解除された変数への変更は、ボックス化されたコピーには反映されません。またボックス化されたコピーの値を変更する方法はありません。</span><span class="sxs-lookup"><span data-stu-id="121b9-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="121b9-162">同期対象のオブジェクトを選択すると、プライベートまたは内部のオブジェクトでのみロックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="121b9-163">外部オブジェクトをロック場合は、関連のないコードは、さまざまな目的でロックすると同じオブジェクトを選択できるために、デッドロックを引き起こす可能性があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="121b9-164">ロックに使用されるオブジェクトがから派生している場合、複数のアプリケーション ドメイン内のオブジェクトで同期することができますに注意してください<xref:System.MarshalByRefObject>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="121b9-165">クリティカル セクション</span><span class="sxs-lookup"><span data-stu-id="121b9-165">The critical section</span></span>  
 <span data-ttu-id="121b9-166">使用して、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>の先頭と末尾のクリティカル セクションをマークするメソッド。</span><span class="sxs-lookup"><span data-stu-id="121b9-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-167">によって提供される機能、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>メソッドはによって提供されるものと同じ、[ロック](~/docs/csharp/language-reference/keywords/lock-statement.md)(C#) ステートメント、および[SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)点を除いて Visual basic でのステートメント、言語は、ラップを構築、<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType>メソッドのオーバー ロードおよび<xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>メソッドで、`try`しています.`finally`</span><span class="sxs-lookup"><span data-stu-id="121b9-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="121b9-168">モニターが解放されることを確認するブロック。</span><span class="sxs-lookup"><span data-stu-id="121b9-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="121b9-169">クリティカル セクションが連続する手順についてで取得したロックのセットである場合、<xref:System.Threading.Monitor.Enter%2A>メソッドを 1 つのスレッドだけがロックされたオブジェクトで囲まれたコードを実行できることを保証します。</span><span class="sxs-lookup"><span data-stu-id="121b9-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="121b9-170">ここをお勧めからそのコードを配置すること、`try`ブロックへの呼び出しに置き、<xref:System.Threading.Monitor.Exit%2A>メソッドで、`finally`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="121b9-171">これにより、例外が発生しても必ずロックが解放されるようになります。</span><span class="sxs-lookup"><span data-stu-id="121b9-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="121b9-172">次のコード フラグメントは、このパターンを示します。</span><span class="sxs-lookup"><span data-stu-id="121b9-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="121b9-173">この機能は通常、静的なへのアクセスまたはクラスのインスタンス メソッドを同期するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="121b9-174">ロック機能を配置することによって実現できますメソッド全体をクリティカル セクションにまたがっている場合、<xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>方法で指定して、<xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized>のコンス トラクター内の値<xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="121b9-175">この属性を使用すると、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>メソッドの呼び出しは必要ありません。</span><span class="sxs-lookup"><span data-stu-id="121b9-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="121b9-176">次のコード フラグメントは、このパターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="121b9-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="121b9-177">属性によって、メソッドが戻るまで、ロックを保持するために、現在のスレッドに注意してください。ロックがすぐに解放する場合を使用して、<xref:System.Threading.Monitor>クラスの c#[ロック](~/docs/csharp/language-reference/keywords/lock-statement.md)ステートメント、または Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md)属性ではなく、メソッド内でステートメント。</span><span class="sxs-lookup"><span data-stu-id="121b9-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="121b9-178">ことができますが、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>ロックおよびメンバーまたはクラスの境界と交差する特定のオブジェクトを解放するステートメントでは、この方法はお勧めできません。</span><span class="sxs-lookup"><span data-stu-id="121b9-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="121b9-179">パルス、PulseAll、および待機</span><span class="sxs-lookup"><span data-stu-id="121b9-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="121b9-180">スレッドは、ロックを所有するされ、ロックを保護する重要なセクションが入った、呼び出すことができます、 <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>、 <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>、および<xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="121b9-181"><xref:System.Threading.Monitor.Wait%2A> 保持されている、待機中のスレッドまたはスレッドのロックを取得し、クリティカル セクションの入力を許可しへの呼び出しによって通知されるまで待機する場合、ロックを開放、<xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>または<xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-181"><xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="121b9-182"><xref:System.Threading.Monitor.Wait%2A>  に通知がなされると、制御が戻り、再度ロックが取得されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-182">When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.</span></span>  
  
 <span data-ttu-id="121b9-183"><xref:System.Threading.Monitor.Pulse%2A> および <xref:System.Threading.Monitor.PulseAll%2A> の両方が待機キューの次のスレッドに続行するよう信号を送ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-183">Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="121b9-184">モニターおよび待機ハンドル</span><span class="sxs-lookup"><span data-stu-id="121b9-184">Monitors and wait handles</span></span>  
 <span data-ttu-id="121b9-185">使用の違いを確認することが重要、<xref:System.Threading.Monitor>クラスおよび<xref:System.Threading.WaitHandle>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-185">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="121b9-186"><xref:System.Threading.Monitor>クラスは純粋なマネージ、完全に移植可能でありよりオペレーティング システムのリソース要件の観点で効率的な場合があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-186">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="121b9-187"><xref:System.Threading.WaitHandle> オブジェクトはオペレーティング システムの待機可能オブジェクトを表しており、マネージとアンマネージ コード間で同期するのに便利です。また一度に多くのオブジェクトを待機できる機能などの高度なオペレーティング システム機能を公開します。</span><span class="sxs-lookup"><span data-stu-id="121b9-187"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="121b9-188">次の例では、<xref:System.Threading.Monitor>クラスによって表される乱数ジェネレーターの 1 つのインスタンスへのアクセスを同期するために、<xref:System.Random>クラスです。</span><span class="sxs-lookup"><span data-stu-id="121b9-188">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="121b9-189">例では、タスクが 10 個のスレッド プールのスレッドで非同期的にそれぞれの実行を作成します。</span><span class="sxs-lookup"><span data-stu-id="121b9-189">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="121b9-190">各タスクは、10,000 の乱数を生成、その平均を計算し、生成された乱数の数の集計途中経過し、その合計を維持する 2 つのプロシージャ レベル変数を更新します。</span><span class="sxs-lookup"><span data-stu-id="121b9-190">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="121b9-191">すべてのタスクが実行された後に、これら 2 つの値は、全体の平均を計算に使用されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-191">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="121b9-192">変数へのアクセスをスレッド プールのスレッドで実行されているいずれかのタスクからアクセスできる、ため`total`と`n`も同期されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-192">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="121b9-193"><xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType>メソッドは、この目的で使用します。</span><span class="sxs-lookup"><span data-stu-id="121b9-193">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="121b9-194">次の例では、組み合わせて使用して、<xref:System.Threading.Monitor>クラス (を使用して実装、`lock`または`SyncLock`言語コンストラクト) では、<xref:System.Threading.Interlocked>クラス、および<xref:System.Threading.AutoResetEvent>クラスです。</span><span class="sxs-lookup"><span data-stu-id="121b9-194">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="121b9-195">2 つを定義する`internal`(C# の場合) または`Friend`(Visual Basic) のクラス、`SyncResource`と`UnSyncResource`、それぞれに、リソースへの同期と非同期アクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="121b9-195">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="121b9-196">(各メソッド呼び出しが迅速に完了した場合、大文字と小文字を生じる可能性) がある同期と非同期アクセスの違いの例は、メソッドにランダムな遅延時間が含まれています: のあるスレッド<xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType>プロパティが偶数でをメソッド呼び出し<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>2,000 ミリ秒の遅延を挿入します。</span><span class="sxs-lookup"><span data-stu-id="121b9-196">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="121b9-197">なお、ため、`SyncResource`クラスがパブリックでない同期されたリソースでロックを受け取るクライアント コードなし 以外の場合は、内部クラス自体がロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="121b9-197">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="121b9-198">これにより、悪意のあるコードがパブリック オブジェクトでロックを取得するのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="121b9-198">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="121b9-199">この例の変数を定義`numOps`リソースへのアクセスを試みるスレッドの数を定義します。</span><span class="sxs-lookup"><span data-stu-id="121b9-199">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="121b9-200">アプリケーションのスレッドの呼び出し、<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType>メソッドは同期し、非同期の 5 回それぞれアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="121b9-200">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="121b9-201"><xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType>メソッドが 1 つのパラメーター、パラメーターを受け取らず、値を返さないデリゲートです。</span><span class="sxs-lookup"><span data-stu-id="121b9-201">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="121b9-202">同期アクセスは、呼び出し、`SyncUpdateResource`メソッドを呼び出す、非同期アクセスの`UnSyncUpdateResource`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-202">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="121b9-203">各一連のメソッド呼び出しでは後、アプリケーション スレッドを呼び出して、 [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*)までをブロックするためのメソッド、<xref:System.Threading.AutoResetEvent>インスタンスがシグナル状態にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-203">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="121b9-204">呼び出しごとに、`SyncUpdateResource`メソッドを呼び出す内部`SyncResource.Access`メソッドを呼び出し、続いて、<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>デクリメントするためのメソッド、`numOps`カウンターです。</span><span class="sxs-lookup"><span data-stu-id="121b9-204">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="121b9-205"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>メソッドを使用して、カウンターをデクリメント、それ以外の場合にできないため、特定の 2 番目のスレッドがアクセスすること、値、最初のスレッドがデクリメントの前に値を変数に格納されています。</span><span class="sxs-lookup"><span data-stu-id="121b9-205">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="121b9-206">最後の同期ワーカー スレッド デクリメント カウンターをゼロに、すべての同期スレッドが完了した、リソースへのアクセス、`SyncUpdateResource`メソッドの呼び出し、<xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType>続行するメイン スレッドに通知するメソッド実行します。</span><span class="sxs-lookup"><span data-stu-id="121b9-206">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="121b9-207">呼び出しごとに、`UnSyncUpdateResource`メソッドを呼び出す内部`UnSyncResource.Access`メソッドを呼び出し、続いて、<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>デクリメントするためのメソッド、`numOps`カウンターです。</span><span class="sxs-lookup"><span data-stu-id="121b9-207">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="121b9-208">もう一度、<xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType>メソッドを使用して、2 番目のスレッドがアクセスしていないこと、値、最初のスレッドのデクリメントされた値が変数に割り当てられる前に、カウンターをデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="121b9-208">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="121b9-209">最後のカウンターをゼロにワーカー スレッド デクリメントが同期されていないときより非同期スレッドを示す、リソースにアクセスする必要があります、`UnSyncUpdateResource`メソッドの呼び出し、<xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType>実行を継続するメイン スレッドに通知するメソッド.</span><span class="sxs-lookup"><span data-stu-id="121b9-209">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="121b9-210">例の出力からわかるように、同期アクセスでは、呼び出し元スレッドが保護リソースを終了してからでないと別のスレッドがそれにアクセスできません。つまり各スレッドはその先行処理を待機します。</span><span class="sxs-lookup"><span data-stu-id="121b9-210">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="121b9-211">その一方で、ロックがない、`UnSyncResource.Access`スレッドが到達する順序でメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-211">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="121b9-212">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="121b9-212">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="121b9-213">指定したオブジェクトの排他ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="121b9-213">Acquires an exclusive lock on a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-214">モニター ロックを取得する対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-214">The object on which to acquire the monitor lock.</span></span></param>
        <summary><span data-ttu-id="121b9-215">指定したオブジェクトの排他ロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="121b9-215">Acquires an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-216">使用して`Enter`を取得する、<xref:System.Threading.Monitor>パラメーターとして渡されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-216">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="121b9-217">別のスレッドが実行された場合、`Enter`オブジェクトでまだ実行されていない対応するが、 <xref:System.Threading.Monitor.Exit%2A>、他のスレッドがオブジェクトを解放するまで、現在のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="121b9-217">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="121b9-218">同じスレッドの呼び出しに適合している`Enter`ブロックが 2 回以上です。 ただし、同数の`Exit`オブジェクトで待機している他のスレッドのブロックを解除する前に、呼び出しを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-218">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="121b9-219">使用して<xref:System.Threading.Monitor>オブジェクト (つまり、参照型) をロック、いない値の型にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-219">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="121b9-220">値型の変数を渡す場合`Enter`、オブジェクトとしてボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-220">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="121b9-221">同じ変数を渡す場合`Enter`もう一度、別個のオブジェクトとしてボックス化され、スレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="121b9-221">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="121b9-222">この場合、コードを`Monitor`が想定している保護が保護されていません。</span><span class="sxs-lookup"><span data-stu-id="121b9-222">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="121b9-223">さらに、変数を渡す場合`Exit`、まだ別のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="121b9-223">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="121b9-224">オブジェクトが渡されるため`Exit`に渡されたオブジェクトとは異なる`Enter`、`Monitor`スロー<xref:System.Threading.SynchronizationLockException>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-224">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="121b9-225">詳細については、概念説明のトピックを参照してください。[モニター](xref:System.Threading.Monitor)です。</span><span class="sxs-lookup"><span data-stu-id="121b9-225">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="121b9-226"><xref:System.Threading.Thread.Interrupt%2A> 入力を待機しているスレッドを中断することができます、`Monitor`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-226"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="121b9-227">A<xref:System.Threading.ThreadInterruptedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="121b9-227">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="121b9-228">C# を使用して`try`しています.`finally`</span><span class="sxs-lookup"><span data-stu-id="121b9-228">Use a C# `try`…`finally`</span></span> <span data-ttu-id="121b9-229">ブロック (`Try`.`Finally`</span><span class="sxs-lookup"><span data-stu-id="121b9-229">block (`Try`…`Finally`</span></span> <span data-ttu-id="121b9-230">Visual Basic の場合)、モニターを解放するか、または c# を使用する`lock`ステートメント (`SyncLock` Visual Basic でのステートメント) をラップ、<xref:System.Threading.Monitor.Enter%2A>と<xref:System.Threading.Monitor.Exit%2A>内のメソッド、`try`しています.`finally`</span><span class="sxs-lookup"><span data-stu-id="121b9-230">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="121b9-231">ブロックです。</span><span class="sxs-lookup"><span data-stu-id="121b9-231">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="121b9-232">`Enter` メソッドの使用方法を次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="121b9-232">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-233"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-233">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-234">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-234">The object on which to wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="121b9-235">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="121b9-235">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="121b9-236">入力は <see langword="false" /> でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="121b9-236">The input must be <see langword="false" />.</span></span> <span data-ttu-id="121b9-237">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-237">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="121b9-238">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-238">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span>  
  
 <span data-ttu-id="121b9-239">メモ   例外が発生しない場合、このメソッドの出力は常に <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-239">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="121b9-240">指定したオブジェクトの排他ロックを取得し、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="121b9-240">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-241">使用して`Enter`を取得する、<xref:System.Threading.Monitor>として渡されたオブジェクトで、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="121b9-241">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="121b9-242">別のスレッドが実行された場合、`Enter`オブジェクトでまだ実行されていない対応するが、 <xref:System.Threading.Monitor.Exit%2A>、他のスレッドがオブジェクトを解放するまで、現在のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="121b9-242">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="121b9-243">同じスレッドの呼び出しに適合している`Enter`ブロックが 2 回以上です。 ただし、同数の`Exit`オブジェクトで待機している他のスレッドのブロックを解除する前に、呼び出しを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-243">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="121b9-244">指定した場合は、例外がスローされたために、ロックは取得されませんでした、変数、`lockTaken`パラメーターは`false`後、このメソッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="121b9-244">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="121b9-245">これにより、ロックを解除する必要があるかどうかをすべてのケースを決定するプログラムです。</span><span class="sxs-lookup"><span data-stu-id="121b9-245">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="121b9-246">変数が指定された例外をスローせずにこのメソッドが返される場合、`lockTaken`パラメーターは、必ず`true`、し、それをテストする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="121b9-246">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="121b9-247">使用して<xref:System.Threading.Monitor>オブジェクト (つまり、参照型) をロック、いない値の型にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-247">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="121b9-248">値型の変数を渡す場合`Enter`、オブジェクトとしてボックス化されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-248">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="121b9-249">同じ変数を渡す場合`Enter`もう一度、別個のオブジェクトとしてボックス化され、スレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="121b9-249">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="121b9-250">この場合、コードを`Monitor`が想定している保護が保護されていません。</span><span class="sxs-lookup"><span data-stu-id="121b9-250">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="121b9-251">さらに、変数を渡す場合`Exit`、別のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="121b9-251">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="121b9-252">オブジェクトが渡されるため`Exit`に渡されたオブジェクトとは異なる`Enter`、`Monitor`スロー<xref:System.Threading.SynchronizationLockException>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-252">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="121b9-253">詳細については、概念説明のトピックを参照してください。[モニター](xref:System.Threading.Monitor)です。</span><span class="sxs-lookup"><span data-stu-id="121b9-253">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="121b9-254"><xref:System.Threading.Thread.Interrupt%2A> 入力を待機しているスレッドを中断することができます、`Monitor`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-254"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="121b9-255">A<xref:System.Threading.ThreadInterruptedException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="121b9-255">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="121b9-256">次のコードは、基本的なパターンを使用するため、<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="121b9-256">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="121b9-257">このオーバー ロードに渡される変数の値を常に設定する、`ref`パラメーター (`ByRef` Visual Basic で)`lockTaken`のため、変数の値は、信頼性の高い方法をロックするかどうかをテストするメソッドに、例外がスローされる場合でも、解放されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-257">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="121b9-258"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-258">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-259"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-259">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-260">ロックを解放する対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-260">The object on which to release the lock.</span></span></param>
        <summary><span data-ttu-id="121b9-261">指定したオブジェクトの排他ロックを解放します。</span><span class="sxs-lookup"><span data-stu-id="121b9-261">Releases an exclusive lock on the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-262">呼び出し元のスレッドは、上のロックを所有する必要があります、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="121b9-262">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="121b9-263">呼び出し元スレッドを指定したオブジェクトのロックを所有しているが、同じ数の場合、`Exit`と<xref:System.Threading.Monitor.Enter%2A>ロックを解放し、オブジェクトに対して呼び出します。</span><span class="sxs-lookup"><span data-stu-id="121b9-263">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="121b9-264">呼び出し元のスレッドが呼び出されない場合`Exit`回数だけ`Enter`ロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="121b9-264">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="121b9-265">ロックが解放され、他のスレッドがオブジェクトの準備完了キューには、スレッドのいずれかのロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="121b9-265">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="121b9-266">他のスレッドが、ロックの取得を待機している待機キューにある場合が自動的にときは移動しない実行待ちキューに、ロックの所有者を呼び出す`Exit`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-266">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="121b9-267">待ちキューに 1 つ以上の待機中のスレッドを移動するには、呼び出す<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>を呼び出す前に`Exit`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-267">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="121b9-268">`Exit` メソッドの使用方法を次の例に示します。</span><span class="sxs-lookup"><span data-stu-id="121b9-268">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-269"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-269">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="121b9-270">現在のスレッドが、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="121b9-270">The current thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-271">テストするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-271">The object to test.</span></span></param>
        <summary><span data-ttu-id="121b9-272">現在のスレッドが指定したオブジェクトのロックを保持しているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="121b9-272">Determines whether the current thread holds the lock on the specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="121b9-273">現在のスレッドが <paramref name="obj" /> のロックを保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-273"><see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-274">このメソッドのメソッドを使用して取得されるロックに対してのみ使用、<xref:System.Threading.Monitor>クラス、またはを使用して、c#`lock`ステートメントまたは Visual Basic`SyncLock`で実装されているステートメント<xref:System.Threading.Monitor>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-274">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="121b9-275">など、診断ツールは、このメソッドを使用して、<xref:System.Diagnostics.Debug.Assert%2A>メソッドおよび<xref:System.Diagnostics.Contracts.Contract>クラス、関連するロックの問題をデバッグする、<xref:System.Threading.Monitor>クラスです。</span><span class="sxs-lookup"><span data-stu-id="121b9-275">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="121b9-276"><paramref name="obj" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="121b9-276"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-277">スレッドが待機するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-277">The object a thread is waiting for.</span></span></param>
        <summary><span data-ttu-id="121b9-278">ロックされたオブジェクトの状態が変更されたことを、待機キュー内のスレッドに通知します。</span><span class="sxs-lookup"><span data-stu-id="121b9-278">Notifies a thread in the waiting queue of a change in the locked object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-279">ロックの現在の所有者が待機しているオブジェクトを使用して、シグナル送信専用`Pulse`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-279">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="121b9-280">指定したオブジェクトのロックを現在所有しているスレッドは、次のスレッドにロックのことを通知するには、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="121b9-280">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="121b9-281">パルスを受信したときに、待機中のスレッドが実行待ちキューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-281">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="121b9-282">ときに、スレッドを呼び出した`Pulse`ロックを解放待ちのキュー (これは必ずしも実行するスレッド) 内の次のスレッドがロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="121b9-282">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="121b9-283"><xref:System.Threading.Monitor>クラスがいることを示す状態を維持していない、<xref:System.Threading.Monitor.Pulse%2A>メソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="121b9-283">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="121b9-284">したがって、呼び出す場合は、<xref:System.Threading.Monitor.Pulse%2A>とスレッド待機中のない、次のスレッドを呼び出す<xref:System.Threading.Monitor.Wait%2A>ブロックとして<xref:System.Threading.Monitor.Pulse%2A>が呼び出されたことはありません。</span><span class="sxs-lookup"><span data-stu-id="121b9-284">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="121b9-285">2 つのスレッドを使用している場合<xref:System.Threading.Monitor.Pulse%2A>と<xref:System.Threading.Monitor.Wait%2A>対話するには、この結果、デッドロックが発生します。</span><span class="sxs-lookup"><span data-stu-id="121b9-285">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="121b9-286">動作と比較してみて、<xref:System.Threading.AutoResetEvent>クラス: ことを通知する場合、<xref:System.Threading.AutoResetEvent>を呼び出してその<xref:System.Threading.EventWaitHandle.Set%2A>メソッドを待機しているスレッドが存在しないと、<xref:System.Threading.AutoResetEvent>スレッドを呼び出すまで、シグナル状態のままに<xref:System.Threading.WaitHandle.WaitOne%2A>、 <xref:System.Threading.WaitHandle.WaitAny%2A>、または<xref:System.Threading.WaitHandle.WaitAll%2A>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-286">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="121b9-287"><xref:System.Threading.AutoResetEvent>そのスレッドを解放し、unsignaled 状態に戻ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-287">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="121b9-288">同期済みオブジェクトがロックを現在保持しているスレッドへの参照をロックを取得する準備ができているスレッドが含まれている実行待ちキューへの参照を含むオブジェクトの状態の変更の通知を待機しているスレッド待機キューへの参照など、複数の参照を保持していることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="121b9-288">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="121b9-289">`Pulse`、 <xref:System.Threading.Monitor.PulseAll%2A>、および<xref:System.Threading.Monitor.Wait%2A>メソッドは、同期されたコード ブロック内から呼び出される必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-289">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="121b9-290">複数のスレッドを通知するには、使用、<xref:System.Threading.Monitor.PulseAll%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-290">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-291"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-291">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="121b9-292">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="121b9-292">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-293">パルスを送るオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-293">The object that sends the pulse.</span></span></param>
        <summary><span data-ttu-id="121b9-294">オブジェクトの状態が変更されたことを、待機中のすべてのスレッドに通知します。</span><span class="sxs-lookup"><span data-stu-id="121b9-294">Notifies all waiting threads of a change in the object's state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-295">指定したオブジェクトのロックを現在所有しているスレッドは、オブジェクトのロックの取得を待機しているすべてのスレッドに通知するには、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="121b9-295">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="121b9-296">シグナルを送信すると、待機中のスレッドが実行待ちキューに移動されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-296">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="121b9-297">ときに、スレッドを呼び出した`PulseAll`ロックを解放待ちのキューの次のスレッドがロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="121b9-297">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="121b9-298">同期済みオブジェクトがロックを現在保持しているスレッドへの参照をロックを取得する準備ができているスレッドが含まれている実行待ちキューへの参照を含むオブジェクトの状態の変更の通知を待機しているスレッド待機キューへの参照など、複数の参照を保持していることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="121b9-298">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="121b9-299"><xref:System.Threading.Monitor.Pulse%2A>、 `PulseAll`、および<xref:System.Threading.Monitor.Wait%2A>メソッドは、同期されたコード ブロック内から呼び出される必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-299">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="121b9-300">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドうなるかを説明する場合は<xref:System.Threading.Monitor.Pulse%2A>待機中スレッドがないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-300">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="121b9-301">1 つのスレッドを通知するには、使用、`Pulse`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-301">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-302"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-302">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="121b9-303">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="121b9-303">The calling thread does not own the lock for the specified object.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="121b9-304">指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="121b9-304">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-305">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-305">The object on which to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="121b9-306">指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="121b9-306">Attempts to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="121b9-307">現在のスレッドがロックを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-307"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-308">かどうかは成功すると、このメソッド排他的にロックで、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="121b9-308">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="121b9-309">このメソッドは、ロックが使用できるかどうか、すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="121b9-309">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="121b9-310">このメソッドはのような<xref:System.Threading.Monitor.Enter%2A>、現在のスレッドはブロックされませんが、します。</span><span class="sxs-lookup"><span data-stu-id="121b9-310">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="121b9-311">このメソッドを返しますのかどうか、スレッドをブロックすることがなく入力できません、`false,`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-311">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-312">使用して<xref:System.Threading.Monitor>オブジェクト (つまり、参照型) をロック、いない値の型にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-312">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="121b9-313">詳細については、次を参照してください。、<xref:System.Threading.Monitor>資料です。</span><span class="sxs-lookup"><span data-stu-id="121b9-313">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="121b9-314">スレッドがクリティカル セクションを入力していないことを確認するには必要があります、メソッドの戻り値を確認し、その戻り値が場合にのみ、クリティカル セクションのコードを実行`true`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-314">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="121b9-315">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="121b9-315">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="121b9-316">呼び出す必要があります<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="121b9-316">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="121b9-317">次のコード例は、`TryEnter` メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="121b9-317">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-318"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-318">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-319">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-319">The object on which to acquire the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="121b9-320">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="121b9-320">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="121b9-321">入力は <see langword="false" /> でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="121b9-321">The input must be <see langword="false" />.</span></span> <span data-ttu-id="121b9-322">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-322">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="121b9-323">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-323">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="121b9-324">指定したオブジェクトの排他ロックの取得を試み、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="121b9-324">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-325">かどうかは成功すると、このメソッド排他的にロックで、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="121b9-325">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="121b9-326">このメソッドは、ロックが使用できるかどうか、すぐに返します。</span><span class="sxs-lookup"><span data-stu-id="121b9-326">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="121b9-327">指定した場合は、例外がスローされたために、ロックは取得されませんでした、変数、`lockTaken`パラメーターは`false`後、このメソッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="121b9-327">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="121b9-328">これにより、ロックを解除する必要があるかどうかをすべてのケースを決定するプログラムです。</span><span class="sxs-lookup"><span data-stu-id="121b9-328">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="121b9-329">このメソッドはのような<xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>、現在のスレッドはブロックされませんが、します。</span><span class="sxs-lookup"><span data-stu-id="121b9-329">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="121b9-330">スレッドをブロックすることがなく入力できない場合、`lockTaken`に設定されている引数`false`メソッドが返されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-330">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-331">使用して<xref:System.Threading.Monitor>オブジェクト (つまり、参照型) をロック、いない値の型にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-331">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="121b9-332">詳細については、「<xref:System.Threading.Monitor>」の記事を参照してください。</span><span class="sxs-lookup"><span data-stu-id="121b9-332">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="121b9-333">スレッドがクリティカル セクションを入力しないようにの値を調べる必要があります`lockTaken`しその値が場合にのみ、クリティカル セクションのコードを実行`true`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-333">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="121b9-334">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="121b9-334">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="121b9-335">呼び出す必要があります<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="121b9-335">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="121b9-336">次のコードは、基本的なパターンを使用するため、<xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="121b9-336">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="121b9-337">このオーバー ロードに渡される変数の値を常に設定する、`ref`パラメーター (`ByRef` Visual Basic で)`lockTaken`のため、変数の値は、信頼性の高い方法をロックするかどうかをテストするメソッドに、例外がスローされる場合でも、解放されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-337">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="121b9-338"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-338">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-339"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-339">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-340">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-340">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="121b9-341">ロックを待機するミリ秒単位の時間。</span><span class="sxs-lookup"><span data-stu-id="121b9-341">The number of milliseconds to wait for the lock.</span></span></param>
        <summary><span data-ttu-id="121b9-342">指定したミリ秒間に、指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="121b9-342">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="121b9-343">現在のスレッドがロックを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-343"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-344">場合、`millisecondsTimeout`パラメーターと等しい<xref:System.Threading.Timeout.Infinite>、このメソッドは<xref:System.Threading.Monitor.Enter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="121b9-344">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="121b9-345">場合`millisecondsTimeout`が 0 と等しい、このメソッドは<xref:System.Threading.Monitor.TryEnter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="121b9-345">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-346">使用して<xref:System.Threading.Monitor>オブジェクト (つまり、参照型) をロック、いない値の型にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-346">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="121b9-347">詳細については、次を参照してください。、<xref:System.Threading.Monitor>資料です。</span><span class="sxs-lookup"><span data-stu-id="121b9-347">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="121b9-348">スレッドがクリティカル セクションを入力していないことを確認するには必要があります、メソッドの戻り値を確認し、その戻り値が場合にのみ、クリティカル セクションのコードを実行`true`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-348">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="121b9-349">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="121b9-349">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="121b9-350">呼び出す必要があります<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="121b9-350">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-351"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="121b9-352"><paramref name="millisecondsTimeout" /> は負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="121b9-352"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-353">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-353">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="121b9-354">ロックを待機する時間を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-354">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span></span> <span data-ttu-id="121b9-355">–1 ミリ秒という値は、無期限の待機を指定します。</span><span class="sxs-lookup"><span data-stu-id="121b9-355">A value of –1 millisecond specifies an infinite wait.</span></span></param>
        <summary><span data-ttu-id="121b9-356">指定した時間内に、指定したオブジェクトの排他ロックの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="121b9-356">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="121b9-357">現在のスレッドがロックを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-357"><see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-358">場合の値、 `timeout` – 1 に等しいパラメーター (ミリ秒) に変換された、このメソッドは<xref:System.Threading.Monitor.Enter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="121b9-358">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="121b9-359">場合の値`timeout`が 0 と等しい、このメソッドは<xref:System.Threading.Monitor.TryEnter%2A>します。</span><span class="sxs-lookup"><span data-stu-id="121b9-359">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-360">使用して<xref:System.Threading.Monitor>オブジェクト (つまり、参照型) をロック、いない値の型にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-360">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="121b9-361">詳細については、次を参照してください。、<xref:System.Threading.Monitor>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="121b9-361">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="121b9-362">スレッドがクリティカル セクションを入力していないことを確認するには必要があります、メソッドの戻り値を確認し、その戻り値が場合にのみ、クリティカル セクションのコードを実行`true`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-362">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="121b9-363">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="121b9-363">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="121b9-364">呼び出す必要があります<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="121b9-364">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-365"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-365">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="121b9-366"><paramref name="timeout" /> ミリ秒の値が負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> (–1 ミリ秒) と等しくないか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="121b9-366">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-367">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-367">The object on which to acquire the lock.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="121b9-368">ロックを待機するミリ秒単位の時間。</span><span class="sxs-lookup"><span data-stu-id="121b9-368">The number of milliseconds to wait for the lock.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="121b9-369">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="121b9-369">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="121b9-370">入力は <see langword="false" /> でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="121b9-370">The input must be <see langword="false" />.</span></span> <span data-ttu-id="121b9-371">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-371">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="121b9-372">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-372">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="121b9-373">指定したオブジェクトの排他ロックの取得を指定したミリ秒間試み、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="121b9-373">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-374">場合、`millisecondsTimeout`パラメーターと等しい<xref:System.Threading.Timeout.Infinite>、このメソッドは<xref:System.Threading.Monitor.Enter%28System.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="121b9-374">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="121b9-375">場合`millisecondsTimeout`が 0 と等しい、このメソッドは<xref:System.Threading.Monitor.TryEnter%28System.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="121b9-375">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="121b9-376">指定した場合は、例外がスローされたために、ロックは取得されませんでした、変数、`lockTaken`パラメーターは`false`後、このメソッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="121b9-376">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="121b9-377">これにより、ロックを解除する必要があるかどうかをすべてのケースを決定するプログラムです。</span><span class="sxs-lookup"><span data-stu-id="121b9-377">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-378">使用して<xref:System.Threading.Monitor>オブジェクト (つまり、参照型) をロック、いない値の型にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-378">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="121b9-379">詳細については、次を参照してください。、<xref:System.Threading.Monitor>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="121b9-379">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="121b9-380">スレッドがクリティカル セクションを入力しないようにの値を調べる必要があります`lockTaken`しその値が場合にのみ、クリティカル セクションのコードを実行`true`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-380">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="121b9-381">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="121b9-381">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="121b9-382">呼び出す必要があります<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="121b9-382">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="121b9-383">次のコードは、基本的なパターンを使用するため、<xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="121b9-383">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="121b9-384">このオーバー ロードに渡される変数の値を常に設定する、`ref`パラメーター (`ByRef` Visual Basic で)`lockTaken`のため、変数の値は、信頼性の高い方法をロックするかどうかをテストするメソッドに、例外がスローされる場合でも、解放されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-384">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="121b9-385"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-385">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-386"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-386">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="121b9-387"><paramref name="millisecondsTimeout" /> は負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="121b9-387"><paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-388">ロックの取得が行われるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-388">The object on which to acquire the lock.</span></span></param>
        <param name="timeout"><span data-ttu-id="121b9-389">ロックを待機する時間。</span><span class="sxs-lookup"><span data-stu-id="121b9-389">The amount of time to wait for the lock.</span></span> <span data-ttu-id="121b9-390">–1 ミリ秒という値は、無期限の待機を指定します。</span><span class="sxs-lookup"><span data-stu-id="121b9-390">A value of –1 millisecond specifies an infinite wait.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="121b9-391">ロックを取得しようとした結果で、参照渡しです。</span><span class="sxs-lookup"><span data-stu-id="121b9-391">The result of the attempt to acquire the lock, passed by reference.</span></span> <span data-ttu-id="121b9-392">入力は <see langword="false" /> でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="121b9-392">The input must be <see langword="false" />.</span></span> <span data-ttu-id="121b9-393">ロックが取得された場合、出力は <see langword="true" /> になります。それ以外の場合、出力は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-393">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span></span> <span data-ttu-id="121b9-394">ロックを取得しようとしている間に例外が発生した場合でも、出力は設定されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-394">The output is set even if an exception occurs during the attempt to acquire the lock.</span></span></param>
        <summary><span data-ttu-id="121b9-395">指定したオブジェクトの排他ロックの取得を指定した時間にわたって試み、ロックが取得されたかどうかを示す値をアトミックに設定します。</span><span class="sxs-lookup"><span data-stu-id="121b9-395">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-396">場合の値、 `timeout` – 1 に等しいパラメーター (ミリ秒) に変換された、このメソッドは<xref:System.Threading.Monitor.Enter%28System.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="121b9-396">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="121b9-397">場合の値`timeout`が 0 と等しい、このメソッドは<xref:System.Threading.Monitor.TryEnter%28System.Object%29>します。</span><span class="sxs-lookup"><span data-stu-id="121b9-397">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="121b9-398">指定した場合は、例外がスローされたために、ロックは取得されませんでした、変数、`lockTaken`パラメーターは`false`後、このメソッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="121b9-398">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="121b9-399">これにより、ロックを解除する必要があるかどうかをすべてのケースを決定するプログラムです。</span><span class="sxs-lookup"><span data-stu-id="121b9-399">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-400">使用して<xref:System.Threading.Monitor>オブジェクト (つまり、参照型) をロック、いない値の型にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-400">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="121b9-401">詳細については、次を参照してください。、<xref:System.Threading.Monitor>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="121b9-401">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="121b9-402">スレッドがクリティカル セクションを入力しないようにの値を調べる必要があります`lockTaken`しその値が場合にのみ、クリティカル セクションのコードを実行`true`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-402">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="121b9-403">次のコード フラグメントは、このメソッドを呼び出すために使用パターンを示しています。</span><span class="sxs-lookup"><span data-stu-id="121b9-403">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="121b9-404">呼び出す必要があります<xref:System.Threading.Monitor.Exit%2A>で、`finally`ブロックに例外が発生した場合、呼び出し元のスレッドがクリティカル セクションのロックを解放ことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="121b9-404">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="121b9-405"><paramref name="lockTaken" /> への入力は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-405">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-406"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-406">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="121b9-407"><paramref name="timeout" /> ミリ秒の値が負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> (–1 ミリ秒) と等しくないか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="121b9-407">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="121b9-408">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-408">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-409">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-409">The object on which to wait.</span></span></param>
        <summary><span data-ttu-id="121b9-410">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-410">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span></summary>
        <returns>
          <span data-ttu-id="121b9-411">呼び出し元が、指定したオブジェクトのロックを再取得したために呼び出しが返された場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-411"><see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span></span> <span data-ttu-id="121b9-412">このメソッドは、ロックが再取得されないと制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="121b9-412">This method does not return if the lock is not reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-413">指定したオブジェクトのロックを現在所有しているスレッドは、別のスレッドがアクセスできるようにするオブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="121b9-413">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="121b9-414">呼び出し元は、ロックを再取得を待機中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="121b9-414">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="121b9-415">呼び出し元が、状態の変更が別のスレッドの操作の結果として発生するまで待機する必要がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-415">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="121b9-416">スレッドを呼び出すと`Wait`オブジェクトのロックを解放し、オブジェクトの待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-416">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="121b9-417">オブジェクトの実行待ちキューには、次のスレッドに (1 つである) 場合は、ロックを獲得おり、オブジェクトが排他的に使用します。</span><span class="sxs-lookup"><span data-stu-id="121b9-417">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="121b9-418">すべてのスレッドを呼び出す`Wait`からの信号を受信するまで待機しているキューに残る<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>ロックの所有者によって送信されました。</span><span class="sxs-lookup"><span data-stu-id="121b9-418">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="121b9-419">場合`Pulse`送信されると、待機キューの先頭にあるスレッドのみが影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="121b9-419">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="121b9-420">場合`PulseAll`送信されると、オブジェクトを待機しているすべてのスレッドが影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="121b9-420">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="121b9-421">シグナルを受信すると、1 つまたは複数のスレッドが待機キューのままにし、実行待ちキューを入力します。</span><span class="sxs-lookup"><span data-stu-id="121b9-421">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="121b9-422">待ちのキュー内のスレッドはロックを再取得を許可します。</span><span class="sxs-lookup"><span data-stu-id="121b9-422">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="121b9-423">このメソッドは、呼び出し元のスレッドがオブジェクトのロックを再取得時を返します。</span><span class="sxs-lookup"><span data-stu-id="121b9-423">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="121b9-424">ロックの所有者が要求されていない場合、このメソッドは無期限にブロック注`Pulse`または`PulseAll`です。</span><span class="sxs-lookup"><span data-stu-id="121b9-424">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="121b9-425">呼び出し元は、実行`Wait`回数に関係なく 1 回、<xref:System.Threading.Monitor.Enter%2A>指定したオブジェクトが呼び出されてです。</span><span class="sxs-lookup"><span data-stu-id="121b9-425">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="121b9-426">概念的には、`Wait`メソッドは、呼び出し元が呼び出された回数、格納`Enter`オブジェクトで呼び出されます`Exit`ロックされたオブジェクトを完全に解放するために必要な回数だけです。</span><span class="sxs-lookup"><span data-stu-id="121b9-426">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="121b9-427">呼び出し元は、オブジェクトを再取得を待機中に、ブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-427">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="121b9-428">呼び出し元は、ロックを再取得、システム呼び出し`Enter`保存していた復元するために必要な回数だけ`Enter`呼び出し元の数。</span><span class="sxs-lookup"><span data-stu-id="121b9-428">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="121b9-429">呼び出す`Wait`指定したオブジェクトのロックを解放するだけです。 呼び出し元がその他のオブジェクトに対するロックの所有者である場合は、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="121b9-429">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="121b9-430">同期済みオブジェクトがロックを現在保持しているスレッドへの参照をロックを取得する準備ができているスレッドが含まれている実行待ちキューへの参照を含むオブジェクトの状態の変更の通知を待機しているスレッド待機キューへの参照など、複数の参照を保持していることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="121b9-430">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="121b9-431"><xref:System.Threading.Monitor.Pulse%2A>、 <xref:System.Threading.Monitor.PulseAll%2A>、および`Wait`メソッドは、同期されたコード ブロック内から呼び出される必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-431">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="121b9-432">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドうなるかを説明する場合は<xref:System.Threading.Monitor.Pulse%2A>待機中スレッドがないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-432">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-433"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-433">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="121b9-434">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="121b9-434">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="121b9-435"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-435">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="121b9-436">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="121b9-436">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-437">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-437">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="121b9-438">スレッドが実行待ちキューに入るまでの待機時間 (ミリ秒)。</span><span class="sxs-lookup"><span data-stu-id="121b9-438">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="121b9-439">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-439">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="121b9-440">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-440">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns>
          <span data-ttu-id="121b9-441">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-441"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="121b9-442">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="121b9-442">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-443">排他ロックが再取得するまで、このメソッドは返されません、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="121b9-443">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="121b9-444">指定したオブジェクトのロックを現在所有しているスレッドは、別のスレッドがアクセスできるようにするオブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="121b9-444">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="121b9-445">呼び出し元は、ロックを再取得を待機中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="121b9-445">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="121b9-446">呼び出し元が、状態の変更が別のスレッドの操作の結果として発生するまで待機する必要がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-446">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="121b9-447">タイムアウトにより、現在のスレッドでブロックしないこと無期限に別のスレッド最初呼び出さずにロックを解放する場合、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-447">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="121b9-448">また、スレッドをロックをすぐに再取得できるように、待機キューの遅れたり他のスレッドをバイパスして、実行待ちキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="121b9-448">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="121b9-449">スレッドの戻り値をテストできます、<xref:System.Threading.Monitor.Wait%2A>タイムアウトする前に、ロックが再取得されるかどうかを調べます。スレッドは、待機状態になる原因となった条件を評価できる場合に必要な呼び出し、<xref:System.Threading.Monitor.Wait%2A>メソッドを再度です。</span><span class="sxs-lookup"><span data-stu-id="121b9-449">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="121b9-450">スレッドを呼び出すと`Wait`オブジェクトのロックを解放し、オブジェクトの待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-450">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="121b9-451">オブジェクトの実行待ちキューには、次のスレッドに (1 つである) 場合は、ロックを獲得おり、オブジェクトが排他的に使用します。</span><span class="sxs-lookup"><span data-stu-id="121b9-451">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="121b9-452">呼び出したスレッド`Wait`されるまで、待機キューのままにロックを保持しているスレッドを呼び出す<xref:System.Threading.Monitor.PulseAll%2A>、または次のキューであるし、ロックを保持しているスレッドを起動<xref:System.Threading.Monitor.Pulse%2A>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-452">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="121b9-453">ただし場合、`millisecondsTimeout`別のスレッドがこのオブジェクトを呼び出す前に経過する<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド、元のスレッドがロックを再取得するために実行待ちキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="121b9-453">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-454">場合<xref:System.Threading.Timeout.Infinite>が指定されて、`millisecondsTimeout`パラメーターでは、このメソッドは、ブロック無期限にロックの保持者呼び出さない限り、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-454">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="121b9-455">場合`millisecondsTimeout`0 を呼び出すスレッドを等しい`Wait`ロックを解放し、実行待ちキューがロックを再取得するためにすぐに入力します。</span><span class="sxs-lookup"><span data-stu-id="121b9-455">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="121b9-456">呼び出し元は、実行`Wait`回数に関係なく 1 回、<xref:System.Threading.Monitor.Enter%2A>指定したオブジェクトが呼び出されてです。</span><span class="sxs-lookup"><span data-stu-id="121b9-456">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="121b9-457">概念的には、`Wait`メソッドは、呼び出し元が呼び出された回数、格納<xref:System.Threading.Monitor.Enter%2A>オブジェクトで呼び出されます<xref:System.Threading.Monitor.Exit%2A>ロックされたオブジェクトを完全に解放するために必要な回数だけです。</span><span class="sxs-lookup"><span data-stu-id="121b9-457">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="121b9-458">呼び出し元は、オブジェクトを再取得を待機中に、ブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-458">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="121b9-459">呼び出し元は、ロックを再取得、システム呼び出し<xref:System.Threading.Monitor.Enter%2A>保存していた復元するために必要な回数だけ<xref:System.Threading.Monitor.Enter%2A>呼び出し元の数。</span><span class="sxs-lookup"><span data-stu-id="121b9-459">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="121b9-460">呼び出す`Wait`指定したオブジェクトのロックを解放するだけです。 呼び出し元がその他のオブジェクトに対するロックの所有者である場合は、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="121b9-460">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-461">同期オブジェクトでは、ロックを現在保持しているスレッドへの参照をロックを取得する準備ができているスレッドが含まれている実行待ちキューへの参照を含むオブジェクトの状態の変更の通知を待機しているスレッド待機キューへの参照など、複数の参照を保持します。</span><span class="sxs-lookup"><span data-stu-id="121b9-461">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="121b9-462"><xref:System.Threading.Monitor.Pulse%2A>、 <xref:System.Threading.Monitor.PulseAll%2A>、および`Wait`メソッドは、同期されたコード ブロック内から呼び出される必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-462">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="121b9-463">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドうなるかを説明する場合は<xref:System.Threading.Monitor.Pulse%2A>待機中スレッドがないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-463">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-464"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-464">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="121b9-465">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="121b9-465">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="121b9-466"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-466">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="121b9-467">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="121b9-467">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="121b9-468"><paramref name="millisecondsTimeout" /> パラメーターの値が負で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="121b9-468">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-469">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-469">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="121b9-470">スレッドが実行待ちキューに入るまでの時間を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-470">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <summary><span data-ttu-id="121b9-471">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-471">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="121b9-472">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-472">If the specified time-out interval elapses, the thread enters the ready queue.</span></span></summary>
        <returns>
          <span data-ttu-id="121b9-473">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-473"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="121b9-474">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="121b9-474">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-475">排他ロックが再取得するまで、このメソッドは返されません、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="121b9-475">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="121b9-476">指定したオブジェクトのロックを現在所有しているスレッドは、別のスレッドがアクセスできるようにするオブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="121b9-476">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="121b9-477">呼び出し元は、ロックを再取得を待機中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="121b9-477">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="121b9-478">呼び出し元が、状態の変更が別のスレッドの操作の結果として発生するまで待機する必要がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-478">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="121b9-479">タイムアウトにより、現在のスレッドでブロックしないこと無期限に別のスレッド最初呼び出さずにロックを解放する場合、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-479">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="121b9-480">また、スレッドをロックをすぐに再取得できるように、待機キューの遅れたり他のスレッドをバイパスして、実行待ちキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="121b9-480">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="121b9-481">スレッドの戻り値をテストできます、<xref:System.Threading.Monitor.Wait%2A>タイムアウトする前に、ロックが再取得されるかどうかを調べます。スレッドは、待機状態になる原因となった条件を評価できる場合に必要な呼び出し、<xref:System.Threading.Monitor.Wait%2A>メソッドを再度です。</span><span class="sxs-lookup"><span data-stu-id="121b9-481">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="121b9-482">スレッドを呼び出すと`Wait`オブジェクトのロックを解放し、オブジェクトの待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-482">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="121b9-483">オブジェクトの実行待ちキューには、次のスレッドに (1 つである) 場合は、ロックを獲得おり、オブジェクトが排他的に使用します。</span><span class="sxs-lookup"><span data-stu-id="121b9-483">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="121b9-484">呼び出したスレッド`Wait`されるまで、待機キューのままにロックを保持しているスレッドを呼び出す<xref:System.Threading.Monitor.PulseAll%2A>、または次のキューであるし、ロックを保持しているスレッドを起動<xref:System.Threading.Monitor.Pulse%2A>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-484">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="121b9-485">ただし場合、`timeout`別のスレッドがこのオブジェクトを呼び出す前に経過する<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド、元のスレッドがロックを再取得するために実行待ちキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="121b9-485">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-486">場合、 <xref:System.TimeSpan> – 1 ミリ秒を表すが指定されて、`timeout`パラメーターでは、このメソッドは、ブロック無期限にロックの保持者呼び出さない限り、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-486">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="121b9-487">場合`timeout`0 ミリ秒でを呼び出すスレッド`Wait`ロックを解放し、実行待ちキューがロックを再取得するためにすぐに入力します。</span><span class="sxs-lookup"><span data-stu-id="121b9-487">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="121b9-488">呼び出し元は、実行`Wait`回数に関係なく 1 回、<xref:System.Threading.Monitor.Enter%2A>指定したオブジェクトが呼び出されてです。</span><span class="sxs-lookup"><span data-stu-id="121b9-488">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="121b9-489">概念的には、`Wait`メソッドは、呼び出し元が呼び出された回数、格納<xref:System.Threading.Monitor.Enter%2A>オブジェクトで呼び出されます<xref:System.Threading.Monitor.Exit%2A>ロックされたオブジェクトを完全に解放するために必要な回数だけです。</span><span class="sxs-lookup"><span data-stu-id="121b9-489">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="121b9-490">呼び出し元は、オブジェクトを再取得を待機中に、ブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-490">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="121b9-491">呼び出し元は、ロックを再取得、システム呼び出し<xref:System.Threading.Monitor.Enter%2A>保存していた復元するために必要な回数だけ<xref:System.Threading.Monitor.Enter%2A>呼び出し元の数。</span><span class="sxs-lookup"><span data-stu-id="121b9-491">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="121b9-492">呼び出す`Wait`指定したオブジェクトのロックを解放するだけです。 呼び出し元がその他のオブジェクトに対するロックの所有者である場合は、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="121b9-492">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-493">同期オブジェクトでは、ロックを現在保持しているスレッドへの参照をロックを取得する準備ができているスレッドが含まれている実行待ちキューへの参照を含むオブジェクトの状態の変更の通知を待機しているスレッド待機キューへの参照など、複数の参照を保持します。</span><span class="sxs-lookup"><span data-stu-id="121b9-493">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="121b9-494"><xref:System.Threading.Monitor.Pulse%2A>、 <xref:System.Threading.Monitor.PulseAll%2A>、および`Wait`メソッドは、同期されたコード ブロック内から呼び出される必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-494">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="121b9-495">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドうなるかを説明する場合は<xref:System.Threading.Monitor.Pulse%2A>待機中スレッドがないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-495">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-496"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-496">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="121b9-497">呼び出し元のスレッドは、指定したオブジェクトのロックを所有していません。</span><span class="sxs-lookup"><span data-stu-id="121b9-497">The calling thread does not own the lock for the specified object.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="121b9-498"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-498">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="121b9-499">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="121b9-499">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="121b9-500"><paramref name="timeout" /> パラメーターのミリ秒単位の値が負で、かつ <see cref="F:System.Threading.Timeout.Infinite" /> (–1 ミリ秒) ではありません。または <see cref="F:System.Int32.MaxValue" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="121b9-500">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-501">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-501">The object on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="121b9-502">スレッドが実行待ちキューに入るまでの待機時間 (ミリ秒)。</span><span class="sxs-lookup"><span data-stu-id="121b9-502">The number of milliseconds to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext">
          <span data-ttu-id="121b9-503">待機の前にコンテキストの同期ドメイン (同期されたコンテキストの場合) を終了および再取得する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-503"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="121b9-504">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-504">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="121b9-505">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-505">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="121b9-506">このメソッドは、コンテキストの同期ドメイン (同期されたコンテキストの場合) が待機の前に終了し、後で再取得されるかどうかも指定します。</span><span class="sxs-lookup"><span data-stu-id="121b9-506">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span></span></summary>
        <returns>
          <span data-ttu-id="121b9-507">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-507"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="121b9-508">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="121b9-508">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-509">排他ロックが再取得するまで、このメソッドは返されません、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="121b9-509">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="121b9-510">指定したオブジェクトのロックを現在所有しているスレッドは、別のスレッドがアクセスできるようにするオブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="121b9-510">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="121b9-511">呼び出し元は、ロックを再取得を待機中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="121b9-511">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="121b9-512">呼び出し元が、状態の変更が別のスレッドの操作の結果として発生するまで待機する必要がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-512">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="121b9-513">タイムアウトにより、現在のスレッドでブロックしないこと無期限に別のスレッド最初呼び出さずにロックを解放する場合、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-513">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="121b9-514">また、スレッドをロックをすぐに再取得できるように、待機キューの遅れたり他のスレッドをバイパスして、実行待ちキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="121b9-514">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="121b9-515">スレッドの戻り値をテストできます、<xref:System.Threading.Monitor.Wait%2A>タイムアウトする前に、ロックが再取得されるかどうかを調べます。スレッドは、待機状態になる原因となった条件を評価できる場合に必要な呼び出し、<xref:System.Threading.Monitor.Wait%2A>メソッドを再度です。</span><span class="sxs-lookup"><span data-stu-id="121b9-515">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="121b9-516">スレッドを呼び出すと`Wait`、そのロックを解放し、待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-516">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="121b9-517">この時点では、次のスレッド実行待ちキューに (存在する場合) が許可されたロックを制御します。</span><span class="sxs-lookup"><span data-stu-id="121b9-517">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="121b9-518">呼び出したスレッド`Wait`されるまで、待機キューのままにロックを保持しているスレッドを呼び出す<xref:System.Threading.Monitor.PulseAll%2A>、または次のキューであるし、ロックを保持しているスレッドを起動<xref:System.Threading.Monitor.Pulse%2A>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-518">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="121b9-519">ただし場合、`millisecondsTimeout`別のスレッドがこのオブジェクトを呼び出す前に経過する<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド、元のスレッドがロックを再取得するために実行待ちキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="121b9-519">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-520">場合<xref:System.Threading.Timeout.Infinite>が指定されて、`millisecondsTimeout`パラメーターでは、このメソッドは、ブロック無期限にロックの保持者呼び出さない限り、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-520">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="121b9-521">場合`millisecondsTimeout`0 を呼び出すスレッドを等しい`Wait`ロックを解放し、実行待ちキューがロックを再取得するためにすぐに入力します。</span><span class="sxs-lookup"><span data-stu-id="121b9-521">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="121b9-522">呼び出し元は、実行`Wait`回数に関係なく 1 回、<xref:System.Threading.Monitor.Enter%2A>指定したオブジェクトが呼び出されてです。</span><span class="sxs-lookup"><span data-stu-id="121b9-522">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="121b9-523">概念的には、`Wait`メソッドは、呼び出し元が呼び出された回数、格納<xref:System.Threading.Monitor.Enter%2A>オブジェクトで呼び出されます<xref:System.Threading.Monitor.Exit%2A>ロックされたオブジェクトを完全に解放するために必要な回数だけです。</span><span class="sxs-lookup"><span data-stu-id="121b9-523">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="121b9-524">呼び出し元は、オブジェクトを再取得を待機中に、ブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-524">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="121b9-525">呼び出し元は、ロックを再取得、システム呼び出し<xref:System.Threading.Monitor.Enter%2A>保存していた復元するために必要な回数だけ<xref:System.Threading.Monitor.Enter%2A>呼び出し元の数。</span><span class="sxs-lookup"><span data-stu-id="121b9-525">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="121b9-526">呼び出す`Wait`指定したオブジェクトのロックを解放するだけです。 呼び出し元がその他のオブジェクトに対するロックの所有者である場合は、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="121b9-526">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-527">同期オブジェクトでは、ロックを現在保持しているスレッドへの参照をロックを取得する準備ができているスレッドが含まれている実行待ちキューへの参照を含むオブジェクトの状態の変更の通知を待機しているスレッド待機キューへの参照など、複数の参照を保持します。</span><span class="sxs-lookup"><span data-stu-id="121b9-527">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="121b9-528"><xref:System.Threading.Monitor.Pulse%2A>、 <xref:System.Threading.Monitor.PulseAll%2A>、および`Wait`メソッドは、同期されたコード ブロック内から呼び出される必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-528">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="121b9-529">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドうなるかを説明する場合は<xref:System.Threading.Monitor.Pulse%2A>待機中スレッドがないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-529">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="121b9-530">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="121b9-530">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="121b9-531">`exitContext`パラメーター影響を及ぼしませんしない限り、<xref:System.Threading.Monitor.Wait%2A>メソッドが既定以外のマネージ コンテキスト内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-531">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="121b9-532">派生したクラスのインスタンスへの呼び出し内部に、スレッドがある場合に発生<xref:System.ContextBoundObject>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-532">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="121b9-533">派生していないクラスのメソッドを実行されている場合でも<xref:System.ContextBoundObject>と同様、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-533">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="121b9-534">既定以外のコンテキストでコードを実行するとときに、指定する`true`の`exitContext`既定以外のマネージ コンテキストを終了するスレッド (つまり、既定のコンテキストに遷移する) 実行する前に、<xref:System.Threading.Monitor.Wait%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-534">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="121b9-535">呼び出しの後に元の既定以外のコンテキストを返します、<xref:System.Threading.Monitor.Wait%2A>メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="121b9-535">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="121b9-536">これを利用するときに、コンテキスト バインド クラスには、<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>属性を適用します。</span><span class="sxs-lookup"><span data-stu-id="121b9-536">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="121b9-537">その場合は、クラスのメンバーに対するすべての呼び出しが自動的に同期され、同期ドメインは、クラスのコードの本文全体です。</span><span class="sxs-lookup"><span data-stu-id="121b9-537">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="121b9-538">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.Monitor.Wait%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドの同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="121b9-538">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="121b9-539">ときに、<xref:System.Threading.Monitor.Wait%2A>メソッドが戻る同期ドメインを再入力する呼び出しを行ったスレッドを待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-539">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-540"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-540">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="121b9-541"><see langword="Wait" /> は、同期されたコード ブロック内からは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="121b9-541"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="121b9-542"><see langword="Wait" /> を呼び出したスレッドは、後で待機中の状態を中断されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-542">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span></span> <span data-ttu-id="121b9-543">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="121b9-543">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="121b9-544"><paramref name="millisecondsTimeout" /> パラメーターの値が負で、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="121b9-544">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="121b9-545">待機を行うオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="121b9-545">The object on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="121b9-546">スレッドが実行待ちキューに入るまでの時間を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-546">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span></span></param>
        <param name="exitContext">
          <span data-ttu-id="121b9-547">待機の前にコンテキストの同期ドメイン (同期されたコンテキストの場合) を終了および再取得する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-547"><see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="121b9-548">オブジェクトのロックを解放し、現在のスレッドがロックを再取得するまでそのスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-548">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span></span> <span data-ttu-id="121b9-549">指定されたタイムアウト期限を過ぎると、スレッドは実行待ちキューに入ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-549">If the specified time-out interval elapses, the thread enters the ready queue.</span></span> <span data-ttu-id="121b9-550">または、待機の前に同期化されたコンテキストの同期ドメインを終了し、ドメインを後で再取得します。</span><span class="sxs-lookup"><span data-stu-id="121b9-550">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span></span></summary>
        <returns>
          <span data-ttu-id="121b9-551">指定した時間が経過する前にロックが再取得された場合は <see langword="true" />。指定した時間が経過した後にロックが再取得された場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="121b9-551"><see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span></span> <span data-ttu-id="121b9-552">このメソッドは、ロックが再取得されるまで制御を戻しません。</span><span class="sxs-lookup"><span data-stu-id="121b9-552">The method does not return until the lock is reacquired.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="121b9-553">排他ロックが再取得するまで、このメソッドは返されません、`obj`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="121b9-553">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="121b9-554">指定したオブジェクトのロックを現在所有しているスレッドは、別のスレッドがアクセスできるようにするオブジェクトを解放するために、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="121b9-554">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="121b9-555">呼び出し元は、ロックを再取得を待機中にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="121b9-555">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="121b9-556">呼び出し元が、状態の変更が別のスレッドの操作の結果として発生するまで待機する必要がある場合は、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-556">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="121b9-557">タイムアウトにより、現在のスレッドでブロックしないこと無期限に別のスレッド最初呼び出さずにロックを解放する場合、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-557">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="121b9-558">また、スレッドをロックをすぐに再取得できるように、待機キューの遅れたり他のスレッドをバイパスして、実行待ちキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="121b9-558">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="121b9-559">スレッドの戻り値をテストできます、<xref:System.Threading.Monitor.Wait%2A>タイムアウトする前に、ロックが再取得されるかどうかを調べます。スレッドは、待機状態になる原因となった条件を評価できる場合に必要な呼び出し、<xref:System.Threading.Monitor.Wait%2A>メソッドを再度です。</span><span class="sxs-lookup"><span data-stu-id="121b9-559">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="121b9-560">スレッドを呼び出すと`Wait`、そのロックを解放し、待機キューに入ります。</span><span class="sxs-lookup"><span data-stu-id="121b9-560">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="121b9-561">この時点では、次のスレッド実行待ちキューに (存在する場合) が許可されたロックを制御します。</span><span class="sxs-lookup"><span data-stu-id="121b9-561">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="121b9-562">呼び出したスレッド`Wait`されるまで、待機キューのままにロックを保持しているスレッドを呼び出す<xref:System.Threading.Monitor.PulseAll%2A>、または次のキューであるし、ロックを保持しているスレッドを起動<xref:System.Threading.Monitor.Pulse%2A>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-562">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="121b9-563">ただし場合、`timeout`別のスレッドがこのオブジェクトを呼び出すまでのミリ秒<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>メソッド、元のスレッドがロックを再取得するために実行待ちキューに移動します。</span><span class="sxs-lookup"><span data-stu-id="121b9-563">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-564">場合、 <xref:System.TimeSpan> -1 ミリ秒を表すが指定されて、`timeout`パラメーターでは、このメソッドは、ブロック無期限にロックの保持者呼び出さない限り、<xref:System.Threading.Monitor.Pulse%2A>または<xref:System.Threading.Monitor.PulseAll%2A>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-564">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="121b9-565">場合`timeout`0 ミリ秒でを呼び出すスレッド`Wait`ロックを解放し、実行待ちキューがロックを再取得するためにすぐに入力します。</span><span class="sxs-lookup"><span data-stu-id="121b9-565">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="121b9-566">呼び出し元は、実行`Wait`回数に関係なく 1 回、<xref:System.Threading.Monitor.Enter%2A>指定したオブジェクトが呼び出されてです。</span><span class="sxs-lookup"><span data-stu-id="121b9-566">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="121b9-567">概念的には、`Wait`メソッドは、呼び出し元が呼び出された回数、格納<xref:System.Threading.Monitor.Enter%2A>オブジェクトで呼び出されます<xref:System.Threading.Monitor.Exit%2A>ロックされたオブジェクトを完全に解放するために必要な回数だけです。</span><span class="sxs-lookup"><span data-stu-id="121b9-567">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="121b9-568">呼び出し元は、オブジェクトを再取得を待機中に、ブロックします。</span><span class="sxs-lookup"><span data-stu-id="121b9-568">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="121b9-569">呼び出し元は、ロックを再取得、システム呼び出し<xref:System.Threading.Monitor.Enter%2A>保存していた復元するために必要な回数だけ<xref:System.Threading.Monitor.Enter%2A>呼び出し元の数。</span><span class="sxs-lookup"><span data-stu-id="121b9-569">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="121b9-570">呼び出す`Wait`指定したオブジェクトのロックを解放するだけです。 呼び出し元がその他のオブジェクトに対するロックの所有者である場合は、これらのロックは解放されません。</span><span class="sxs-lookup"><span data-stu-id="121b9-570">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="121b9-571">同期オブジェクトでは、ロックを現在保持しているスレッドへの参照をロックを取得する準備ができているスレッドが含まれている実行待ちキューへの参照を含むオブジェクトの状態の変更の通知を待機しているスレッド待機キューへの参照など、複数の参照を保持します。</span><span class="sxs-lookup"><span data-stu-id="121b9-571">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="121b9-572"><xref:System.Threading.Monitor.Pulse%2A>、 <xref:System.Threading.Monitor.PulseAll%2A>、および`Wait`メソッドは、同期されたコード ブロック内から呼び出される必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-572">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="121b9-573">「解説、<xref:System.Threading.Monitor.Pulse%2A>メソッドうなるかを説明する場合は<xref:System.Threading.Monitor.Pulse%2A>待機中スレッドがないときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-573">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="121b9-574">コンテキストの終了時の注意</span><span class="sxs-lookup"><span data-stu-id="121b9-574">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="121b9-575">`exitContext`パラメーター影響を及ぼしませんしない限り、<xref:System.Threading.Monitor.Wait%2A>メソッドが既定以外のマネージ コンテキスト内から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-575">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="121b9-576">派生したクラスのインスタンスへの呼び出し内部に、スレッドがある場合に発生<xref:System.ContextBoundObject>です。</span><span class="sxs-lookup"><span data-stu-id="121b9-576">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="121b9-577">派生していないクラスのメソッドを実行されている場合でも<xref:System.ContextBoundObject>と同様、 <xref:System.String>、既定以外のコンテキストであることができる場合、<xref:System.ContextBoundObject>が現在のアプリケーション ドメインで、スタック上にします。</span><span class="sxs-lookup"><span data-stu-id="121b9-577">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="121b9-578">既定以外のコンテキストでコードを実行するとときに、指定する`true`の`exitContext`既定以外のマネージ コンテキストを終了するスレッド (つまり、既定のコンテキストに遷移する) 実行する前に、<xref:System.Threading.Monitor.Wait%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="121b9-578">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="121b9-579">呼び出しの後に元の既定以外のコンテキストを返します、<xref:System.Threading.Monitor.Wait%2A>メソッドが完了しました。</span><span class="sxs-lookup"><span data-stu-id="121b9-579">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="121b9-580">これを利用するときに、コンテキスト バインド クラスには、<xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>属性を適用します。</span><span class="sxs-lookup"><span data-stu-id="121b9-580">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="121b9-581">その場合は、クラスのメンバーに対するすべての呼び出しが自動的に同期され、同期ドメインは、クラスのコードの本文全体です。</span><span class="sxs-lookup"><span data-stu-id="121b9-581">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="121b9-582">メンバーの呼び出し履歴内のコードを呼び出すかどうか、<xref:System.Threading.Monitor.Wait%2A>メソッドを指定して`true`の`exitContext`スレッドが続行する、オブジェクトの任意のメンバーへの呼び出しでブロックされているスレッドの同期ドメインを終了します。</span><span class="sxs-lookup"><span data-stu-id="121b9-582">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="121b9-583">ときに、<xref:System.Threading.Monitor.Wait%2A>メソッドが戻る同期ドメインを再入力する呼び出しを行ったスレッドを待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="121b9-583">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="121b9-584"><paramref name="obj" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="121b9-584">The <paramref name="obj" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="121b9-585"><see langword="Wait" /> は、同期されたコード ブロック内からは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="121b9-585"><see langword="Wait" /> is not invoked from within a synchronized block of code.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="121b9-586">Wait を呼び出すスレッドは、後で待機状態の途中で中断されます。</span><span class="sxs-lookup"><span data-stu-id="121b9-586">The thread that invokes Wait is later interrupted from the waiting state.</span></span> <span data-ttu-id="121b9-587">これは、他のスレッドがこのスレッドの <see cref="M:System.Threading.Thread.Interrupt" /> メソッドを呼び出すときに起こります。</span><span class="sxs-lookup"><span data-stu-id="121b9-587">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="121b9-588"><paramref name="timeout" /> パラメーターが負で <see cref="F:System.Threading.Timeout.Infinite" /> (-1 ミリ秒) を表していないか、<see cref="F:System.Int32.MaxValue" /> よりも大きいです。</span><span class="sxs-lookup"><span data-stu-id="121b9-588">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>