<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AutoResetEvent.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59087366b105fd0db08981653c09c4fc5801df013.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9087366b105fd0db08981653c09c4fc5801df013</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.AutoResetEvent">
          <source>Notifies a waiting thread that an event has occurred.</source>
          <target state="translated">イベントが発生したことを待機中のスレッドに通知します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.AutoResetEvent">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> allows threads to communicate with each other by signaling.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 通知することによって互いに通信するためにスレッドを使用できます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Typically, you use this class when threads need exclusive access to a resource.</source>
          <target state="translated">通常、スレッドがリソースへの排他アクセスを必要がある場合、このクラスを使用します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">この型は、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">型の直接 dispose を呼び出す、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドで、 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">直接ことのない破棄する場合など、言語コンストラクトを使用して<ph id="ph1">`using`</ph>(C# の場合) または<ph id="ph2">`Using`</ph>(Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスに関するトピック。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>A thread waits for a signal by calling <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id="ph2">`AutoResetEvent`</ph>.</source>
          <target state="translated">呼び出して、シグナル スレッドが待機<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>上、<ph id="ph2">`AutoResetEvent`</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If the <ph id="ph1">`AutoResetEvent`</ph> is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>.</source>
          <target state="translated">場合、<ph id="ph1">`AutoResetEvent`</ph>スレッドは現在呼び出すことによって、リソースが使用できることを通知するリソースを制御の待機中のスレッドがブロックを非シグナル状態では、<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Calling <ph id="ph1">`Set`</ph> signals <ph id="ph2">`AutoResetEvent`</ph> to release a waiting thread.</source>
          <target state="translated">呼び出す<ph id="ph1">`Set`</ph>信号<ph id="ph2">`AutoResetEvent`</ph>を待機中のスレッドを解放します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 1 つの待機中のスレッドが解放され、自動的に非シグナル状態に戻るまで、ままが通知されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If no threads are waiting, the state remains signaled indefinitely.</source>
          <target state="translated">無期限に待機しているスレッドがない場合に状態はシグナルです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If a thread calls <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> while the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is in the signaled state, the thread does not block.</source>
          <target state="translated">スレッドが呼び出す場合<ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>中に、<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>はシグナルの状態のスレッドをブロックしません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> releases the thread immediately and returns to the non-signaled state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>すぐに、スレッドを解放し、非シグナル状態に戻ります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>There is no guarantee that every call to the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method will release a thread.</source>
          <target state="translated">保証がないをすべての呼び出しに、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>メソッドは、スレッドを解放します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</source>
          <target state="translated">2 つの呼び出しが近すぎる、スレッドが解放される前に 2 番目の呼び出しが行われるように、1 つのスレッドが解放されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>It is as if the second call did not happen.</source>
          <target state="translated">2 番目の呼び出しが発生しなかったかのようをお勧めします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Also, if <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> is called when there are no threads waiting and the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is already signaled, the call has no effect.</source>
          <target state="translated">また場合、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>待機しているスレッドが存在しないときに呼び出されると、<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>が既にシグナル、呼び出しが影響を与えません。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>You can control the initial state of an <ph id="ph1">`AutoResetEvent`</ph> by passing a Boolean value to the constructor: <ph id="ph2">`true`</ph> if the initial state is signaled and <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">初期状態を制御することができます、<ph id="ph1">`AutoResetEvent`</ph>コンス トラクターにブール値を渡すことによって:<ph id="ph2">`true`</ph>初期状態が通知される場合と<ph id="ph3">`false`</ph>それ以外の場合。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source><ph id="ph1">`AutoResetEvent`</ph> can also be used with the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`AutoResetEvent`</ph> 使用することもできます、 <ph id="ph2">`static`</ph> <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>For more information about thread synchronization mechanisms, see <bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](~/docs/standard/threading/autoresetevent.md)</ept> in the conceptual documentation.</source>
          <target state="translated">スレッド同期機構の詳細については、次を参照してください。 <bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](~/docs/standard/threading/autoresetevent.md)</ept>概念説明のドキュメントです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Beginning with the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> derives from the new <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class.</source>
          <target state="translated">以降では .NET Framework version 2.0、<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>から新しい派生<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>An <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is functionally equivalent to an <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with <ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>は機能的に等価、<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で作成された<ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.</source>
          <target state="translated">異なり、<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>クラス、<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>クラスは、名前付きシステム同期イベントへのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to release one thread at a time, by calling the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method (on the base class) each time the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">次の例は、使用する方法を示しています。<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>を呼び出すことによって、一度に 1 つのスレッドを解放する、<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>メソッド (基本クラス) の各ユーザーがの時間、 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>キー。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The example starts three threads, which wait on an <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that was created in the signaled state.</source>
          <target state="translated">この例の先頭を待つの 3 つのスレッド、<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>シグナル状態で作成しました。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The first thread is released immediately, because the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> is already in the signaled state.</source>
          <target state="translated">最初のスレッドが解放、すぐに、<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>が既にシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This resets the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to the non-signaled state, so that subsequent threads block.</source>
          <target state="translated">これにより、リセット、<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>非シグナル状態に、後続のスレッドをブロックするようです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>The blocked threads are not released until the user releases them one at a time by pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">ブロックされたスレッドは解放するまで、ユーザーに 1 つはリリースされないキーを押して時に、 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>キー。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>After the threads are released from the first <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, they wait on another <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that was created in the non-signaled state.</source>
          <target state="translated">スレッドは最初のリリース後に<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>、別を待機して<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>非シグナル状態で作成しました。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>All three threads block, so the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method must be called three times to release them all.</source>
          <target state="translated">次の 3 つのすべてのスレッドをブロック、そのため、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>メソッドは、それらすべてを解放する 3 回呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AutoResetEvent">
          <source>This class is thread safe.</source>
          <target state="translated">このクラスは、スレッド セーフです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state to signaled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set the initial state to non-signaled.</source>
          <target state="translated">初期状態をシグナル状態に設定する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。初期状態を非シグナル状態に設定する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AutoResetEvent" /&gt;</ph> class with a Boolean value indicating whether to set the initial state to signaled.</source>
          <target state="translated">初期状態をシグナル状態に設定するかどうかを示す Boolean 型の値を使用して、<ph id="ph1">&lt;see cref="T:System.Threading.AutoResetEvent" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The following example uses an <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> to synchronize the activities of two threads.</source>
          <target state="translated">次の例では、 <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> 2 つのスレッドの活動を同期するためにします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The first thread, which is the application thread, executes <ph id="ph1">`Main`</ph>.</source>
          <target state="translated">アプリケーションのスレッドである、最初のスレッドが実行される<ph id="ph1">`Main`</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>It writes values to the protected resource, which is a <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) field named <ph id="ph3">`number`</ph>.</source>
          <target state="translated">保護されたリソースに値を書き込みます、 <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> Visual Basic で) という名前のフィールド<ph id="ph3">`number`</ph>です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The second thread executes the static <ph id="ph1">`ThreadProc`</ph> method, which reads the values written by <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">2 番目のスレッド、静的な<ph id="ph1">`ThreadProc`</ph>によって書き込まれた値を読み取るメソッド<ph id="ph2">`Main`</ph>です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The <ph id="ph1">`ThreadProc`</ph> method waits for the <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph>メソッドの待機、<ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>When <ph id="ph1">`Main`</ph> calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method on the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, the <ph id="ph4">`ThreadProc`</ph> method reads one value.</source>
          <target state="translated">ときに<ph id="ph1">`Main`</ph>呼び出し、<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>メソッドを<ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>、<ph id="ph4">`ThreadProc`</ph>メソッドは 1 つの値を読み取ります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> immediately resets, so the <ph id="ph2">`ThreadProc`</ph> method waits again.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>直後にリセットされ、そのため、<ph id="ph2">`ThreadProc`</ph>メソッドをもう一度待機します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>The program logic guarantees that the <ph id="ph1">`ThreadProc`</ph> method will never read the same value two times.</source>
          <target state="translated">プログラム ロジックを設定する、<ph id="ph1">`ThreadProc`</ph>メソッドは、同じ値の 2 倍を読み込みは行われません。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>It does not guarantee that the <ph id="ph1">`ThreadProc`</ph> method will read every value written by <ph id="ph2">`Main`</ph>.</source>
          <target state="translated">いるとは限りません、<ph id="ph1">`ThreadProc`</ph>メソッドはによって書き込まれたすべての値を読み取る<ph id="ph2">`Main`</ph>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>That guarantee would require a second <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> lock.</source>
          <target state="translated">その保証は、1 秒あたり<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>ロックします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>After each write operation, <ph id="ph1">`Main`</ph> yields by calling the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method, to give the second thread a chance to execute.</source>
          <target state="translated">個々 の書き込み操作の後に<ph id="ph1">`Main`</ph>呼び出すことによって生成、<ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph>メソッド、2 番目のスレッドを実行します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
          <source>Otherwise, on a single-processor computer <ph id="ph1">`Main`</ph> would write many values between any two read operations.</source>
          <target state="translated">それ以外の場合、シングル プロセッサ コンピューターで<ph id="ph1">`Main`</ph>読み取り操作を 2 つのいずれかの間の多くの値を書き込むはします。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>