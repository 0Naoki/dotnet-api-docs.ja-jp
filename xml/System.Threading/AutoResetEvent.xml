<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8fce8768b4a2ba80422edde0871cb31a0a891d1f" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51871744" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a963f-101">イベントが発生したことを待機中のスレッドに通知します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a963f-101">Notifies a waiting thread that an event has occurred.</span>
      </span>
      <span data-ttu-id="a963f-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a963f-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a963f-103">`AutoResetEvent` スレッドに通知することによって相互通信を使用できます。</span><span class="sxs-lookup"><span data-stu-id="a963f-103">`AutoResetEvent` allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="a963f-104">通常、スレッドがリソースへの排他アクセスを必要がある場合は、このクラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="a963f-104">Typically, you use this class when threads need exclusive access to a resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a963f-105">この型は、<xref:System.IDisposable>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="a963f-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="a963f-106">型の使用が完了したら、直接的または間接的にそれを破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a963f-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="a963f-107">型の直接 dispose を呼び出してその<xref:System.IDisposable.Dispose%2A>メソッド、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="a963f-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="a963f-108">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(で C# の場合) または`Using`(Visual Basic) でします。</span><span class="sxs-lookup"><span data-stu-id="a963f-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="a963f-109">詳細については、"を使用して、オブジェクトを実装する IDisposable"のセクションを参照してください、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="a963f-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="a963f-110">呼び出すことによって、スレッドがシグナルの待機<xref:System.Threading.WaitHandle.WaitOne%2A>上、`AutoResetEvent`します。</span><span class="sxs-lookup"><span data-stu-id="a963f-110">A thread waits for a signal by calling <xref:System.Threading.WaitHandle.WaitOne%2A> on the `AutoResetEvent`.</span></span> <span data-ttu-id="a963f-111">場合、`AutoResetEvent`待機スレッドが現在呼び出すことによって、リソースが使用可能なことを通知するリソースをコントロールには、スレッドがブロックを非シグナル状態にある<xref:System.Threading.EventWaitHandle.Set%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a963f-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <xref:System.Threading.EventWaitHandle.Set%2A>.</span></span>  
  
 <span data-ttu-id="a963f-112">呼び出す`Set`信号`AutoResetEvent`を待機中のスレッドを解放します。</span><span class="sxs-lookup"><span data-stu-id="a963f-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="a963f-113">`AutoResetEvent` 単一の待機スレッドが解放され、自動的に非シグナル状態に戻るまでシグナル状態に残ります。</span><span class="sxs-lookup"><span data-stu-id="a963f-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="a963f-114">無期限に待機しているスレッドがない場合に、状態ままシグナルです。</span><span class="sxs-lookup"><span data-stu-id="a963f-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="a963f-115">スレッドを呼び出す場合<xref:System.Threading.WaitHandle.WaitOne%2A>中に、<xref:System.Threading.AutoResetEvent>はシグナルの状態でスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="a963f-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="a963f-116"><xref:System.Threading.AutoResetEvent>すぐにスレッドを解放し、非シグナル状態に戻ります。</span><span class="sxs-lookup"><span data-stu-id="a963f-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a963f-117">保証はありませんが、呼び出すたび、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドは、スレッドを解放します。</span><span class="sxs-lookup"><span data-stu-id="a963f-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="a963f-118">2 つの呼び出しが近すぎる、スレッドが解放される前に 2 番目の呼び出しが行われるように、1 つのスレッドが解放されます。</span><span class="sxs-lookup"><span data-stu-id="a963f-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="a963f-119">2 番目の呼び出しが発生しなかったかのようになります。</span><span class="sxs-lookup"><span data-stu-id="a963f-119">It is as if the second call did not happen.</span></span> <span data-ttu-id="a963f-120">また場合、<xref:System.Threading.EventWaitHandle.Set%2A>待機しているスレッドがないときに呼び出されると、<xref:System.Threading.AutoResetEvent>が既にシグナル、呼び出しが影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="a963f-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="a963f-121">初期状態を制御することができます、`AutoResetEvent`コンス トラクターにブール値を渡すことによって:`true`初期状態をシグナルの場合と`false`それ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="a963f-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="a963f-122">`AutoResetEvent` 使用することができますも、 `static` <xref:System.Threading.WaitHandle.WaitAll%2A>と<xref:System.Threading.WaitHandle.WaitAny%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="a963f-122">`AutoResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="a963f-123">スレッドの同期機構の詳細については、次を参照してください。 [AutoResetEvent](~/docs/standard/threading/autoresetevent.md)概念説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="a963f-123">For more information about thread synchronization mechanisms, see [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) in the conceptual documentation.</span></span>  
  
 <span data-ttu-id="a963f-124">.NET Framework version 2.0 以降<xref:System.Threading.AutoResetEvent>から、新しい派生<xref:System.Threading.EventWaitHandle>クラス。</span><span class="sxs-lookup"><span data-stu-id="a963f-124">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="a963f-125"><xref:System.Threading.AutoResetEvent>は機能的に等価、<xref:System.Threading.EventWaitHandle>で作成された<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="a963f-125">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a963f-126">異なり、<xref:System.Threading.AutoResetEvent>クラス、<xref:System.Threading.EventWaitHandle>クラスが名前付きシステム同期イベントへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="a963f-126">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a963f-127">次の例は、使用する方法を示します<xref:System.Threading.AutoResetEvent>呼び出すことによって、一度に 1 つのスレッドを解放する、<xref:System.Threading.EventWaitHandle.Set%2A>メソッド (基底クラス) の各時間のユーザーが、 **Enter**キー。</span><span class="sxs-lookup"><span data-stu-id="a963f-127">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="a963f-128">例では、3 つのスレッドで待機を開始する、<xref:System.Threading.AutoResetEvent>シグナル状態で作成しました。</span><span class="sxs-lookup"><span data-stu-id="a963f-128">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="a963f-129">最初のスレッドはため、すぐに解放、<xref:System.Threading.AutoResetEvent>が既にシグナル状態にします。</span><span class="sxs-lookup"><span data-stu-id="a963f-129">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="a963f-130">これにより、リセット、<xref:System.Threading.AutoResetEvent>非シグナル状態にその後のスレッドをブロックするようです。</span><span class="sxs-lookup"><span data-stu-id="a963f-130">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="a963f-131">ブロックされたスレッドは、ユーザーを解放するまでに 1 つは解放されませんキーを押して一度に、 **Enter**キー。</span><span class="sxs-lookup"><span data-stu-id="a963f-131">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="a963f-132">スレッドは最初のリリース後<xref:System.Threading.AutoResetEvent>、別の待つ、<xref:System.Threading.AutoResetEvent>非シグナル状態で作成しました。</span><span class="sxs-lookup"><span data-stu-id="a963f-132">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="a963f-133">次の 3 つのすべてのスレッドをブロック、そのため、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドは、すべてリリースを 3 回呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="a963f-133">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="a963f-134">このクラスは、スレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a963f-134">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">
      <span data-ttu-id="a963f-135">マネージド スレッド処理</span>
      <span class="sxs-lookup">
        <span data-stu-id="a963f-135">Managed Threading</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/6d39c48d-6b37-4a9b-8631-f2924cfd9c18">
      <span data-ttu-id="a963f-136">AutoResetEvent</span>
      <span class="sxs-lookup">
        <span data-stu-id="a963f-136">AutoResetEvent</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="a963f-137">初期状態をシグナル状態に設定する場合は <see langword="true" />。初期状態を非シグナル状態に設定する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a963f-137">
              <see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a963f-138">初期状態をシグナル状態に設定するかどうかを示す Boolean 型の値を使用して、<see cref="T:System.Threading.AutoResetEvent" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a963f-138">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a963f-139">次の例では、 <xref:System.Threading.AutoResetEvent> 2 つのスレッドのアクティビティを同期します。</span><span class="sxs-lookup"><span data-stu-id="a963f-139">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="a963f-140">アプリケーション スレッドには、最初のスレッドが実行される`Main`します。</span><span class="sxs-lookup"><span data-stu-id="a963f-140">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="a963f-141">保護されたリソースに値を書き込みます、 `static` (`Shared` Visual Basic で) という名前のフィールド`number`します。</span><span class="sxs-lookup"><span data-stu-id="a963f-141">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="a963f-142">2 番目のスレッドは、静的な`ThreadProc`メソッドによって書き込まれた値を読み取る`Main`します。</span><span class="sxs-lookup"><span data-stu-id="a963f-142">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="a963f-143">`ThreadProc`メソッドは待機、<xref:System.Threading.AutoResetEvent>します。</span><span class="sxs-lookup"><span data-stu-id="a963f-143">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="a963f-144">ときに`Main`呼び出し、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドを<xref:System.Threading.AutoResetEvent>、`ThreadProc`メソッドは 1 つの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="a963f-144">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="a963f-145"><xref:System.Threading.AutoResetEvent>すぐにリセットされ、そのため、`ThreadProc`メソッドをもう一度待機します。</span><span class="sxs-lookup"><span data-stu-id="a963f-145">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="a963f-146">プログラム ロジックに必ず、`ThreadProc`メソッドは、同じ値の 2 倍を読み込みは行われません。</span><span class="sxs-lookup"><span data-stu-id="a963f-146">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="a963f-147">保証はなく、`ThreadProc`メソッドはによって書き込まれたすべての値を読み取る`Main`します。</span><span class="sxs-lookup"><span data-stu-id="a963f-147">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="a963f-148">その保証は、1 秒あたり<xref:System.Threading.AutoResetEvent>ロックします。</span><span class="sxs-lookup"><span data-stu-id="a963f-148">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="a963f-149">個々 の書き込み操作の後に`Main`呼び出すことによって生成、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッドは、2 番目のスレッドを実行できるようにします。</span><span class="sxs-lookup"><span data-stu-id="a963f-149">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="a963f-150">それ以外のシングル プロセッサ コンピューターで`Main`2 つの読み取り操作間の多くの値を書き込むとします。</span><span class="sxs-lookup"><span data-stu-id="a963f-150">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="a963f-151">マネージド スレッド処理</span>
          <span class="sxs-lookup">
            <span data-stu-id="a963f-151">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/6d39c48d-6b37-4a9b-8631-f2924cfd9c18">
          <span data-ttu-id="a963f-152">AutoResetEvent</span>
          <span class="sxs-lookup">
            <span data-stu-id="a963f-152">AutoResetEvent</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>