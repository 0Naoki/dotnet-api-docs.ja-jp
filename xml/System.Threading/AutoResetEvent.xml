<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8de0e56ea65d1342ab469a35e0061d04f2fb4695" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56405253" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>通知を受けたときに、単一の待機中のスレッドを解放した後、自動的にリセットされるスレッドの同期イベントを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する`AutoResetEvent`、 <xref:System.Threading.ManualResetEvent>、および<xref:System.Threading.EventWaitHandle>スレッドの相互作用 (またはスレッドがシグナル通知)。 詳細については、次を参照してください。、[スレッドの相互作用、またはシグナル](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling)のセクション、[同期プリミティブの概要](~/docs/standard/threading/overview-of-synchronization-primitives.md)記事。  
  
> [!IMPORTANT]
>  この型は <xref:System.IDisposable> インターフェイスを実装します。 型の使用が完了したら、直接的または間接的に型を破棄する必要があります。 直接的に型を破棄するには、`try` / `catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。 間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。 詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。  
  
 呼び出すことによって、スレッドがシグナルの待機[AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A)します。 場合、 `AutoResetEvent` 、スレッドがブロックされるまで、非シグナル状態にある[AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A)が呼び出されます。  
  
 呼び出す`Set`信号`AutoResetEvent`を待機中のスレッドを解放します。 `AutoResetEvent` 単一の待機スレッドが解放され、自動的に非シグナル状態に戻るまでシグナル状態に残ります。 無期限に待機しているスレッドがない場合に、状態ままシグナルです。  
  
 スレッドを呼び出す場合<xref:System.Threading.WaitHandle.WaitOne%2A>中に、<xref:System.Threading.AutoResetEvent>はシグナルの状態でスレッドをブロックしません。 <xref:System.Threading.AutoResetEvent>すぐにスレッドを解放し、非シグナル状態に戻ります。  
  
> [!IMPORTANT]
>  保証はありませんが、呼び出すたび、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドは、スレッドを解放します。 2 つの呼び出しが近すぎる、スレッドが解放される前に 2 番目の呼び出しが行われるように、1 つのスレッドが解放されます。 2 番目の呼び出しが発生しなかったかのようになります。 また場合、<xref:System.Threading.EventWaitHandle.Set%2A>待機しているスレッドがないときに呼び出されると、<xref:System.Threading.AutoResetEvent>が既にシグナル、呼び出しが影響を与えません。  
  
 初期状態を制御することができます、`AutoResetEvent`コンス トラクターにブール値を渡すことによって:`true`初期状態をシグナルの場合と`false`それ以外の場合。  
  
 `AutoResetEvent` 使用することができますも、 `static` <xref:System.Threading.WaitHandle.WaitAll%2A>と<xref:System.Threading.WaitHandle.WaitAny%2A>メソッド。  
  
 .NET Framework version 2.0 以降<xref:System.Threading.AutoResetEvent>から、新しい派生<xref:System.Threading.EventWaitHandle>クラス。 <xref:System.Threading.AutoResetEvent>は機能的に等価、<xref:System.Threading.EventWaitHandle>で作成された<xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>します。  
  
> [!NOTE]
>  異なり、<xref:System.Threading.AutoResetEvent>クラス、<xref:System.Threading.EventWaitHandle>クラスが名前付きシステム同期イベントへのアクセスを提供します。  
  
   
  
## Examples  
 次の例は、使用する方法を示します<xref:System.Threading.AutoResetEvent>呼び出すことによって、一度に 1 つのスレッドを解放する、<xref:System.Threading.EventWaitHandle.Set%2A>メソッド (基底クラス) の各時間のユーザーが、 **Enter**キー。 例では、3 つのスレッドで待機を開始する、<xref:System.Threading.AutoResetEvent>シグナル状態で作成しました。 最初のスレッドはため、すぐに解放、<xref:System.Threading.AutoResetEvent>が既にシグナル状態にします。 これにより、リセット、<xref:System.Threading.AutoResetEvent>非シグナル状態にその後のスレッドをブロックするようです。 ブロックされたスレッドは、ユーザーを解放するまでに 1 つは解放されませんキーを押して一度に、 **Enter**キー。  
  
 スレッドは最初のリリース後<xref:System.Threading.AutoResetEvent>、別の待つ、<xref:System.Threading.AutoResetEvent>非シグナル状態で作成しました。 次の 3 つのすべてのスレッドをブロック、そのため、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドは、すべてリリースを 3 回呼び出す必要があります。  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>このクラスは、スレッド セーフです。</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">同期プリミティブの概要</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">初期状態をシグナル状態に設定する場合は <see langword="true" />。初期状態を非シグナル状態に設定する場合は <see langword="false" />。</param>
        <summary>初期状態をシグナル状態に設定するかどうかを示す Boolean 型の値を使用して、<see cref="T:System.Threading.AutoResetEvent" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、 <xref:System.Threading.AutoResetEvent> 2 つのスレッドのアクティビティを同期します。 アプリケーション スレッドには、最初のスレッドが実行される`Main`します。 保護されたリソースに値を書き込みます、 `static` (`Shared` Visual Basic で) という名前のフィールド`number`します。 2 番目のスレッドは、静的な`ThreadProc`メソッドによって書き込まれた値を読み取る`Main`します。  
  
 `ThreadProc`メソッドは待機、<xref:System.Threading.AutoResetEvent>します。 ときに`Main`呼び出し、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドを<xref:System.Threading.AutoResetEvent>、`ThreadProc`メソッドは 1 つの値を読み取ります。 <xref:System.Threading.AutoResetEvent>すぐにリセットされ、そのため、`ThreadProc`メソッドをもう一度待機します。  
  
 プログラム ロジックに必ず、`ThreadProc`メソッドは、同じ値の 2 倍を読み込みは行われません。 保証はなく、`ThreadProc`メソッドはによって書き込まれたすべての値を読み取る`Main`します。 その保証は、1 秒あたり<xref:System.Threading.AutoResetEvent>ロックします。  
  
 個々 の書き込み操作の後に`Main`呼び出すことによって生成、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッドは、2 番目のスレッドを実行できるようにします。 それ以外のシングル プロセッサ コンピューターで`Main`2 つの読み取り操作間の多くの値を書き込むとします。  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">マネージド スレッド処理</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">同期プリミティブの概要</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>イベントの状態を非シグナル状態に設定し、スレッドをブロックします。</summary>
        <returns>正常に操作できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>イベントの状態をシグナル状態に設定し、待機している最大で 1 つのスレッドが進行できるようにします。</summary>
        <returns>正常に操作できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Set メソッドでは、1 つのスレッドを解放します。 待機中のスレッドがない場合は、待機ハンドルは、スレッドが、待機しようとするまで、またはその Reset メソッドが呼び出されるまでシグナル状態のままです。

> [!IMPORTANT]
> Set メソッドのすべての呼び出しがスレッドを解放する保証はありません。 2 つの呼び出しが近すぎる、スレッドが解放される前に 2 番目の呼び出しが行われるように場合、1 つだけのスレッドを解放すると、2 番目の呼び出しが発生しなかったかのよう。 また、待機しているスレッドがない場合に Set メソッドを呼び出すかどうか、<xref:System.Threading.AutoResetEvent>が既にシグナル、呼び出しが影響を与えません。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>