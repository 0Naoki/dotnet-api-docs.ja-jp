<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d0f264481ebfa384ad9cf9faa53a1002409139c6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37609015" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="564cf-101">指定した間隔で、スレッド プール スレッドでメソッドを実行するための機構を提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="564cf-101">Provides a mechanism for executing a method on a thread pool thread at specified intervals.</span>
      </span>
      <span data-ttu-id="564cf-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="564cf-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-103">使用して、<xref:System.Threading.TimerCallback>方法を指定するデリゲート、<xref:System.Threading.Timer>を実行します。</span><span class="sxs-lookup"><span data-stu-id="564cf-103">Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute.</span></span> <span data-ttu-id="564cf-104">署名、<xref:System.Threading.TimerCallback>デリゲートは。</span><span class="sxs-lookup"><span data-stu-id="564cf-104">The signature of the <xref:System.Threading.TimerCallback> delegate is:</span></span>  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 <span data-ttu-id="564cf-105">タイマーが構築され、変更することはできません、タイマーのデリゲートを指定します。</span><span class="sxs-lookup"><span data-stu-id="564cf-105">The timer delegate is specified when the timer is constructed, and cannot be changed.</span></span> <span data-ttu-id="564cf-106">メソッドは、タイマーは; を作成したスレッドで実行されません。上で実行、<xref:System.Threading.ThreadPool>システムによって付与されたスレッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-106">The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.</span></span>  
  
> [!TIP]
> <span data-ttu-id="564cf-107">.NET には、という名前の 4 つのクラスが含まれています。 `Timer`、それぞれ異なる機能を備えたの。</span><span class="sxs-lookup"><span data-stu-id="564cf-107">.NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>
> - <span data-ttu-id="564cf-108"><xref:System.Timers.Timer?displayProperty=nameWithType>、またはイベントの詳細については、一定の間隔でシンクをイベントを発生させるし、いずれかでコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="564cf-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, which fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="564cf-109">サーバー ベースとして使用またはマルチ スレッド環境でサービス コンポーネントのクラスが対象としていますユーザー インターフェイスがないと、実行時に表示されていません。</span><span class="sxs-lookup"><span data-stu-id="564cf-109">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="564cf-110"><xref:System.Threading.Timer?displayProperty=nameWithType>、一定の間隔でスレッド プールのスレッドで 1 つのコールバック メソッドを実行します。</span><span class="sxs-lookup"><span data-stu-id="564cf-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, which executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="564cf-111">タイマーがインスタンス化され、変更できないときに、コールバック メソッドが定義されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-111">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="564cf-112">ように、<xref:System.Timers.Timer?displayProperty=nameWithType>クラスでは、このクラスは、マルチ スレッド環境でサーバー ベースまたはサービス コンポーネントとして使用するためです。 ユーザー インターフェイスを持たないは実行時に表示されません。</span><span class="sxs-lookup"><span data-stu-id="564cf-112">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="564cf-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework のみ)、Windows フォーム コンポーネントでイベントが発生し、一定の間隔で 1 つまたは複数のイベント シンクにコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="564cf-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only), a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="564cf-114">コンポーネントのユーザー インターフェイスを持たないし、は、シングル スレッド環境で使用するために設計されていますUI スレッドで実行します。</span><span class="sxs-lookup"><span data-stu-id="564cf-114">The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.</span></span>
> - <span data-ttu-id="564cf-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework のみ) を定期的に非同期または同期の web ページのポストバックを実行する ASP.NET コンポーネント。</span><span class="sxs-lookup"><span data-stu-id="564cf-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only), an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>
  
 <span data-ttu-id="564cf-116">タイマーを作成するときに、メソッドの最初の実行前に待機する時間の量を指定できます (期限) と 2 回目以降 (ピリオド) 間の待機時間。</span><span class="sxs-lookup"><span data-stu-id="564cf-116">When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period).</span></span> <span data-ttu-id="564cf-117"><xref:System.Threading.Timer>クラスには、システム クロックと同じ解像度。</span><span class="sxs-lookup"><span data-stu-id="564cf-117">The <xref:System.Threading.Timer> class has the same resolution as the system clock.</span></span> <span data-ttu-id="564cf-118">つまり、期間は、システム時計の解像度より小さい場合、<xref:System.Threading.TimerCallback>デリゲートは、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒であるシステム時計の解像度で定義された間隔で実行されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-118">This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems.</span></span> <span data-ttu-id="564cf-119">期限を変更する時間と期間、または無効化を使用して、タイマー、<xref:System.Threading.Timer.Change%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-119">You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="564cf-120">使用している限り、<xref:System.Threading.Timer>への参照を保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="564cf-120">As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it.</span></span> <span data-ttu-id="564cf-121">管理対象のオブジェクトと同様、<xref:System.Threading.Timer>への参照がない場合に、ガベージ コレクションの対象です。</span><span class="sxs-lookup"><span data-stu-id="564cf-121">As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it.</span></span> <span data-ttu-id="564cf-122">事実を<xref:System.Threading.Timer>がまだアクティブでは収集されてから防止されません。</span><span class="sxs-lookup"><span data-stu-id="564cf-122">The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.</span></span>  
  
 <span data-ttu-id="564cf-123">使用して、タイマーを不要になったとき、<xref:System.Threading.Timer.Dispose%2A>タイマーによって保持されているリソースを解放するメソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-123">When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer.</span></span> <span data-ttu-id="564cf-124">コールバックが後に発生することことに注意してください、<xref:System.Threading.Timer.Dispose>メソッドのオーバー ロードが呼び出されたため、タイマー キューのスレッド プールのスレッドでコールバックを実行します。</span><span class="sxs-lookup"><span data-stu-id="564cf-124">Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="564cf-125">使用することができます、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>メソッドのオーバー ロードは、すべてのコールバックが完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="564cf-125">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
 <span data-ttu-id="564cf-126">呼び出されるために、タイマーが実行するコールバック メソッドが、再入可能にする必要があります<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-126">The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="564cf-127">コールバックは、タイマーの間隔がコールバックの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、コールバックが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="564cf-127">The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="564cf-128"><xref:System.Threading.Timer?displayProperty=nameWithType> コールバック メソッドを使用し、スレッド プールのスレッドによって処理されますが、単純で軽量なタイマーです。</span><span class="sxs-lookup"><span data-stu-id="564cf-128"><xref:System.Threading.Timer?displayProperty=nameWithType> is a simple, lightweight timer that uses callback methods and is served by thread pool threads.</span></span> <span data-ttu-id="564cf-129">これは、ユーザー インターフェイス スレッドでそのコールバックが発生しないため、Windows フォームで使用するため推奨されません。</span><span class="sxs-lookup"><span data-stu-id="564cf-129">It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread.</span></span> <span data-ttu-id="564cf-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> 使用する Windows フォームで使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="564cf-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> is a better choice for use with Windows Forms.</span></span> <span data-ttu-id="564cf-131">サーバー ベースのタイマーの機能の使用を検討できます<xref:System.Timers.Timer?displayProperty=nameWithType>イベントを発生させ、機能が追加されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-131">For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=nameWithType>, which raises events and has additional features.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="564cf-132">次の例では、定義、`StatusChecker`クラスが含まれる、`CheckStatus`メソッド シグネチャを持つ、同じとして、<xref:System.Threading.TimerCallback>デリゲートします。</span><span class="sxs-lookup"><span data-stu-id="564cf-132">The following example defines a `StatusChecker` class  that includes a `CheckStatus` method whose signature is the same as the <xref:System.Threading.TimerCallback> delegate.</span></span> <span data-ttu-id="564cf-133">`state`の引数、`CheckStatus`メソッドは、<xref:System.Threading.AutoResetEvent>アプリケーション スレッドとコールバック デリゲートを実行するスレッド プールのスレッドを同期するために使用するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="564cf-133">The  `state` argument of the `CheckStatus` method is an <xref:System.Threading.AutoResetEvent> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate.</span></span> <span data-ttu-id="564cf-134">`StatusChecker`クラスには、2 つの状態変数も含まれています。</span><span class="sxs-lookup"><span data-stu-id="564cf-134">The `StatusChecker` class also includes two state variables:</span></span>  
  
 `invokeCount`  
 <span data-ttu-id="564cf-135">コールバック メソッドが呼び出された回数を示します。</span><span class="sxs-lookup"><span data-stu-id="564cf-135">Indicates the number of times the callback method has been invoked.</span></span>  
  
 `maxCount`  
 <span data-ttu-id="564cf-136">コールバック メソッドを呼び出す必要が最大回数を決定します。</span><span class="sxs-lookup"><span data-stu-id="564cf-136">Determines the maximum number of times the callback method should be invoked.</span></span>  
  
 <span data-ttu-id="564cf-137">アプリケーション スレッドが 1 秒間待機しを実行すると、タイマーを作成、`CheckStatus`コールバック メソッド 250 ミリ秒ごと。</span><span class="sxs-lookup"><span data-stu-id="564cf-137">The application thread creates the timer, which waits one second and then executes  the `CheckStatus` callback method every 250 milliseconds.</span></span> <span data-ttu-id="564cf-138">されるまで、アプリケーション スレッドをブロックし、<xref:System.Threading.AutoResetEvent>オブジェクトがシグナル状態します。</span><span class="sxs-lookup"><span data-stu-id="564cf-138">The application thread then blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="564cf-139">ときに、`CheckStatus`コールバック メソッドが実行される`maxCount`回呼び出し、`AutoResetEvent.Set`の状態を設定するメソッドを<xref:System.Threading.AutoResetEvent>オブジェクトがシグナル状態にします。</span><span class="sxs-lookup"><span data-stu-id="564cf-139">When the `CheckStatus` callback method executes `maxCount` times, it calls the `AutoResetEvent.Set` method to set the state of the <xref:System.Threading.AutoResetEvent> object to signaled.</span></span> <span data-ttu-id="564cf-140">これは、最初に、アプリケーションのスレッドが、<xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29>メソッドのコールバック メソッドでは、0.5 秒おきようになりましたが実行されるようにします。</span><span class="sxs-lookup"><span data-stu-id="564cf-140">The first time this happens, the application thread calls the <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> method so that the callback method now executes every half second.</span></span> <span data-ttu-id="564cf-141">まで再度ブロック、<xref:System.Threading.AutoResetEvent>オブジェクトがシグナル状態します。</span><span class="sxs-lookup"><span data-stu-id="564cf-141">It once again blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="564cf-142">呼び出すことにより、タイマーが破棄されるこのような場合は、その<xref:System.Threading.Timer.Dispose%2A>メソッド、およびアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="564cf-142">When this happens, the timer is destroyed by calling its <xref:System.Threading.Timer.Dispose%2A> method, and the application terminates.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="564cf-143">この型はスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="564cf-143">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="564cf-144">
            <see langword="Timer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-144">Initializes a new instance of the <see langword="Timer" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="564cf-145">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-145">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="564cf-146">状態オブジェクトとして新しく作成した <see cref="T:System.Threading.Timer" /> を使用して、無制限の期間および無制限の期限を指定して <see cref="T:System.Threading.Timer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-146">Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class with an infinite period and an infinite due time, using the newly created <see cref="T:System.Threading.Timer" /> object as the state object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-147">使用するときに、このコンス トラクターを呼び出す、<xref:System.Threading.Timer>状態オブジェクトとしてオブジェクト自体です。</span><span class="sxs-lookup"><span data-stu-id="564cf-147">Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object.</span></span> <span data-ttu-id="564cf-148">タイマーを作成した後、<xref:System.Threading.Timer.Change%2A>間隔と時間の期限を設定します。</span><span class="sxs-lookup"><span data-stu-id="564cf-148">After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.</span></span>  
  
 <span data-ttu-id="564cf-149">このコンス トラクターは、無制限の期限を指定します。 時間は最初のコールバックと無限の間隔は最初のコールバックが前に発生するのを防止するために、コールバックの間の前に、<xref:System.Threading.Timer>オブジェクトは、状態オブジェクトに割り当てられています。</span><span class="sxs-lookup"><span data-stu-id="564cf-149">This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.</span></span>  
  
 <span data-ttu-id="564cf-150">指定されたメソッド`callback`で呼び出されるため、再入可能でなければなりません<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-150">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="564cf-151">メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="564cf-151">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="564cf-152">次のコード例では、状態オブジェクトとしてタイマー自体を使用して、新しいタイマーを作成します。</span><span class="sxs-lookup"><span data-stu-id="564cf-152">The following code example creates a new timer, using the timer itself as the state object.</span></span> <span data-ttu-id="564cf-153"><xref:System.Threading.Timer.Change%2A>タイマーを開始するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="564cf-153">The <xref:System.Threading.Timer.Change%2A> method is used to start the timer.</span></span> <span data-ttu-id="564cf-154">タイマーのコールバックが発生したときに、状態オブジェクトを使用して、タイマーの電源をオフにします。</span><span class="sxs-lookup"><span data-stu-id="564cf-154">When the timer callback occurs, the state object is used to turn the timer off.</span></span>  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="564cf-155">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-155">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="564cf-156">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-156">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="564cf-157">
            <c>callback</c> が呼び出される前の遅延時間 (ミリ秒単位) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-157">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-158">タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-158">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="564cf-159">0 を指定して、タイマーをすぐに開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-159">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="564cf-160">
            <c>callback</c> が呼び出される時間間隔 (ミリ秒単位) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-160">The time interval between invocations of <c>callback</c>, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-161">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-161">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="564cf-162">時間間隔を指定するために 32 ビット符号付き整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-162">Initializes a new instance of the <see langword="Timer" /> class, using a 32-bit signed integer to specify the time interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-163">指定されたデリゲート、`callback`パラメーターが後に 1 回呼び出される`dueTime`が経過すると、およびその後、毎回、`period`間隔が経過するまでの時間します。</span><span class="sxs-lookup"><span data-stu-id="564cf-163">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="564cf-164">場合`dueTime`はゼロ (0)`callback`がすぐに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-164">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="564cf-165">場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`は呼び出されません。 タイマーは無効になりますが、呼び出すことにより再度有効にすることができます、<xref:System.Threading.Timer.Change%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-165">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="564cf-166"><xref:System.Threading.Timer>クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒である、システム クロックと同じ解像度、`callback`デリゲートの実行間隔の場合、システム時計の解像度によって定義されたで`period`が、システム時計の解像度より小さい。</span><span class="sxs-lookup"><span data-stu-id="564cf-166">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="564cf-167">場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>と`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`が呼び出されるタイマーの定期的な動作が 1 回、無効ですを使用して再度有効にできます、<xref:System.Threading.Timer.Change%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-167">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="564cf-168">指定されたメソッド`callback`で呼び出されるため、再入可能でなければなりません<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-168">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="564cf-169">メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="564cf-169">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="564cf-170">次のコード例を作成する方法を示しています、`TimerCallback`を委任しの新しいインスタンスを初期化、`Timer`クラス。</span><span class="sxs-lookup"><span data-stu-id="564cf-170">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="564cf-171">
            <paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-171">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="564cf-172">
            <paramref name="callback" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-172">The <paramref name="callback" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="564cf-173">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-173">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="564cf-174">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-174">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="564cf-175">
            <c>callback</c> が呼び出される前の遅延時間 (ミリ秒単位) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-175">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-176">タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-176">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="564cf-177">0 を指定して、タイマーをすぐに開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-177">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="564cf-178">
            <c>callback</c> が呼び出される時間間隔 (ミリ秒単位) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-178">The time interval between invocations of <c>callback</c>, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-179">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-179">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="564cf-180">時間間隔を計るために 64 ビット符号付き整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-180">Initializes a new instance of the <see langword="Timer" /> class, using 64-bit signed integers to measure time intervals.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-181">指定されたデリゲート、`callback`パラメーターが後に 1 回呼び出される`dueTime`が経過すると、およびその後、毎回、`period`間隔が経過するまでの時間します。</span><span class="sxs-lookup"><span data-stu-id="564cf-181">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="564cf-182">場合`dueTime`はゼロ (0)`callback`がすぐに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-182">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="564cf-183">場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`は呼び出されません。 タイマーは無効になりますが、呼び出すことにより再度有効にすることができます、<xref:System.Threading.Timer.Change%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-183">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="564cf-184"><xref:System.Threading.Timer>クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒である、システム クロックと同じ解像度、`callback`デリゲートの実行間隔の場合、システム時計の解像度によって定義されたで`period`が、システム時計の解像度より小さい。</span><span class="sxs-lookup"><span data-stu-id="564cf-184">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="564cf-185">場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>と`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`が呼び出されるタイマーの定期的な動作が 1 回、無効ですを使用して再度有効にできます、<xref:System.Threading.Timer.Change%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-185">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="564cf-186">指定されたメソッド`callback`で呼び出されるため、再入可能でなければなりません<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-186">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="564cf-187">メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="564cf-187">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="564cf-188">
            <paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-188">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="564cf-189">
            <paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが 4294967294 より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-189">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="564cf-190">実行するメソッドを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-190">A delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="564cf-191">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-191">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="564cf-192">
            <c>callback</c> パラメーターがそのメソッドを呼び出す前に遅延する時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-192">The amount of time to delay before the <c>callback</c> parameter invokes its methods.</span>
          </span>
          <span data-ttu-id="564cf-193">-1 ミリ秒を指定して、タイマーが開始されないようにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-193">Specify negative one (-1) milliseconds to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="564cf-194">0 を指定して、タイマーをすぐに開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-194">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="564cf-195">
            <c>callback</c> によって参照されるメソッドの呼び出し時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-195">The time interval between invocations of the methods referenced by <c>callback</c>.</span>
          </span>
          <span data-ttu-id="564cf-196">-1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-196">Specify negative one (-1) milliseconds to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="564cf-197">時間間隔を計るために <see cref="T:System.TimeSpan" /> 値を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-197">Initializes a new instance of the <see langword="Timer" /> class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-198">指定されたデリゲート、`callback`パラメーターが後に 1 回呼び出される`dueTime`が経過すると、およびその後、毎回、`period`間隔が経過するまでの時間します。</span><span class="sxs-lookup"><span data-stu-id="564cf-198">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="564cf-199">場合`dueTime`はゼロ (0)`callback`がすぐに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-199">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="564cf-200">場合`dueTime`負 (-1) を 1 つ (ミリ秒単位) は、`callback`は呼び出されません。 タイマーは無効になりますが、呼び出すことにより再度有効にすることができます、<xref:System.Threading.Timer.Change%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-200">If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="564cf-201"><xref:System.Threading.Timer>クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒である、システム クロックと同じ解像度、`callback`デリゲートの実行間隔の場合、システム時計の解像度によって定義されたで`period`が、システム時計の解像度より小さい。</span><span class="sxs-lookup"><span data-stu-id="564cf-201">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="564cf-202">場合`period`がゼロ (0) または負の値の-1 ミリ秒と`dueTime`が正の値、`callback`が呼び出されるタイマーの定期的な動作が 1 回、無効ですを使用して再度有効にできます、<xref:System.Threading.Timer.Change%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-202">If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="564cf-203">指定されたメソッド`callback`で呼び出されるため、再入可能でなければなりません<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-203">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="564cf-204">メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="564cf-204">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="564cf-205">次のコード例を作成する方法を示しています、`TimerCallback`を委任しの新しいインスタンスを初期化、`Timer`クラス。</span><span class="sxs-lookup"><span data-stu-id="564cf-205">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="564cf-206">
            <paramref name="dueTime" /> または <paramref name="period" /> の値のミリ秒数が負の値で <see cref="F:System.Threading.Timeout.Infinite" /> と等しくないか、<see cref="F:System.Int32.MaxValue" /> より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-206">The number of milliseconds in the value of <paramref name="dueTime" /> or <paramref name="period" /> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite" />, or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="564cf-207">
            <paramref name="callback" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-207">The <paramref name="callback" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="564cf-208">実行するメソッドを表すデリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-208">A delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="564cf-209">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-209">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="564cf-210">
            <c>callback</c> が呼び出される前の遅延時間 (ミリ秒単位) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-210">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-211">タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-211">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="564cf-212">0 を指定して、タイマーをすぐに開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-212">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="564cf-213">
            <c>callback</c> が呼び出される時間間隔 (ミリ秒単位) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-213">The time interval between invocations of <c>callback</c>, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-214">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-214">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="564cf-215">時間間隔を計るために 32 ビット符号なし整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-215">Initializes a new instance of the <see langword="Timer" /> class, using 32-bit unsigned integers to measure time intervals.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-216">指定されたデリゲート、`callback`パラメーターが後に 1 回呼び出される`dueTime`が経過すると、およびその後、毎回、`period`間隔が経過するまでの時間します。</span><span class="sxs-lookup"><span data-stu-id="564cf-216">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="564cf-217">場合`dueTime`はゼロ (0)`callback`がすぐに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-217">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="564cf-218">場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`は呼び出されません。 タイマーは無効になりますが、呼び出すことにより再度有効にすることができます、<xref:System.Threading.Timer.Change%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-218">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="564cf-219"><xref:System.Threading.Timer>クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒である、システム クロックと同じ解像度、`callback`デリゲートの実行間隔の場合、システム時計の解像度によって定義されたで`period`が、システム時計の解像度より小さい。</span><span class="sxs-lookup"><span data-stu-id="564cf-219">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="564cf-220">場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>と`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`が呼び出されるタイマーの定期的な動作が 1 回、無効ですを使用して再度有効にできます、<xref:System.Threading.Timer.Change%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-220">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="564cf-221">指定されたメソッド`callback`で呼び出されるため、再入可能でなければなりません<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-221">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="564cf-222">メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。</span><span class="sxs-lookup"><span data-stu-id="564cf-222">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="564cf-223">
            <paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-223">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="564cf-224">
            <paramref name="callback" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-224">The <paramref name="callback" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="564cf-225">タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-225">Changes the start time and the interval between method invocations for a timer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="564cf-226">
            <see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-226">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-227">タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-227">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="564cf-228">0 を指定して、タイマーをすぐに再開します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-228">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="564cf-229">
            <see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-229">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-230">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-230">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="564cf-231">時間間隔を計るために 32 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-231">Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="564cf-232">タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-232">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-233">コールバック メソッドが後に 1 回呼び出される`dueTime`が経過すると、および各その後で指定された時間間隔の時間を`period`が経過するとします。</span><span class="sxs-lookup"><span data-stu-id="564cf-233">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="564cf-234">場合`dueTime`ゼロ (0) は、すぐに、コールバック メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-234">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="564cf-235">場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが呼び出されることはありません。 タイマーは無効です、呼び出すことにより再度有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`dueTime`します。</span><span class="sxs-lookup"><span data-stu-id="564cf-235">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="564cf-236">場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、および`dueTime`ない<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが 1 回呼び出されますタイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると。`period`.</span><span class="sxs-lookup"><span data-stu-id="564cf-236">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="564cf-237"><xref:System.Threading.Timer.Change%2A>からメソッドを呼び出すことができます、<xref:System.Threading.TimerCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="564cf-237">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="564cf-238">次のコード例は、開始する方法を示します、`Timer`し、呼び出しのセットの数、経過した後、期間を変更します。</span><span class="sxs-lookup"><span data-stu-id="564cf-238">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="564cf-239">
            <see cref="T:System.Threading.Timer" /> が既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-239">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="564cf-240">
            <paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-240">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="564cf-241">
            <see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-241">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-242">タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-242">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="564cf-243">0 を指定して、タイマーをすぐに再開します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-243">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="564cf-244">
            <see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-244">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-245">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-245">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="564cf-246">時間間隔を計るために 64 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-246">Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="564cf-247">タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-247">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-248">コールバック メソッドが後に 1 回呼び出される`dueTime`が経過すると、および各その後で指定された時間間隔の時間を`period`が経過するとします。</span><span class="sxs-lookup"><span data-stu-id="564cf-248">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="564cf-249">場合`dueTime`ゼロ (0) は、すぐに、コールバック メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-249">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="564cf-250">場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが呼び出されることはありません。 タイマーは無効です、呼び出すことにより再度有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`dueTime`します。</span><span class="sxs-lookup"><span data-stu-id="564cf-250">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="564cf-251">場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、および`dueTime`ない<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが 1 回呼び出されますタイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると。`period`.</span><span class="sxs-lookup"><span data-stu-id="564cf-251">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="564cf-252"><xref:System.Threading.Timer.Change%2A>からメソッドを呼び出すことができます、<xref:System.Threading.TimerCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="564cf-252">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="564cf-253">
            <see cref="T:System.Threading.Timer" /> が既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-253">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="564cf-254">
            <paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが -1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-254">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="564cf-255">
            <paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが 4294967294 より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-255">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="564cf-256">
            <see cref="T:System.TimeSpan" /> は、<see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-256">A <see cref="T:System.TimeSpan" /> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span>
          </span>
          <span data-ttu-id="564cf-257">タイマーが再開されないようにする -1 を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-257">Specify negative one (-1) milliseconds to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="564cf-258">0 を指定して、タイマーをすぐに再開します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-258">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="564cf-259">
            <see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-259">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span>
          </span>
          <span data-ttu-id="564cf-260">-1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-260">Specify negative one (-1) milliseconds to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="564cf-261">時間間隔を計るために <see cref="T:System.TimeSpan" /> 値を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-261">Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="564cf-262">タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-262">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-263">コールバック メソッドが後に 1 回呼び出される`dueTime`が経過すると、および各その後で指定された時間間隔の時間を`period`が経過するとします。</span><span class="sxs-lookup"><span data-stu-id="564cf-263">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="564cf-264">場合`dueTime`ゼロ (0) は、すぐに、コールバック メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-264">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="564cf-265">場合`dueTime`負の値の-1 ミリ秒は、コールバック メソッドが呼び出されることはありません。 タイマーが無効になっていることができますが呼び出すことにより再度有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`dueTime`します。</span><span class="sxs-lookup"><span data-stu-id="564cf-265">If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="564cf-266">場合`period`がゼロ (0) または負 (-1) を 1 つ (ミリ秒単位) と`dueTime`が正の値、コールバック メソッドが 1 回呼び出されますつまり、タイマーの定期的な動作を無効にしたが呼び出すことにより再度有効にすることができます<xref:System.Threading.Timer.Change%2A>より大きい値を指定すると。場合は 0`period`します。</span><span class="sxs-lookup"><span data-stu-id="564cf-266">If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`.</span></span>  
  
 <span data-ttu-id="564cf-267"><xref:System.Threading.Timer.Change%2A>からメソッドを呼び出すことができます、<xref:System.Threading.TimerCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="564cf-267">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="564cf-268">次のコード例は、開始する方法を示します、`Timer`し、呼び出しのセットの数、経過した後、期間を変更します。</span><span class="sxs-lookup"><span data-stu-id="564cf-268">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="564cf-269">
            <see cref="T:System.Threading.Timer" /> が既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-269">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="564cf-270">
            <paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが -1 未満です (ミリ秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-270">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="564cf-271">
            <paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが 4294967294 より大きい値です (ミリ秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-271">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is greater than 4294967294.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="564cf-272">
            <see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-272">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-273">タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-273">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="564cf-274">0 を指定して、タイマーをすぐに再開します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-274">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="564cf-275">
            <see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-275">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="564cf-276">周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-276">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="564cf-277">時間間隔を計るために 32 ビット符号なし整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-277">Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="564cf-278">タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-278">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-279">コールバック メソッドが後に 1 回呼び出される`dueTime`が経過すると、および各その後で指定された時間間隔の時間を`period`が経過するとします。</span><span class="sxs-lookup"><span data-stu-id="564cf-279">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="564cf-280">場合`dueTime`ゼロ (0) は、すぐに、コールバック メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="564cf-280">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="564cf-281">場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが呼び出されることはありません。 タイマーは無効です、呼び出すことにより再度有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`dueTime`します。</span><span class="sxs-lookup"><span data-stu-id="564cf-281">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="564cf-282">場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、および`dueTime`ない<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが 1 回呼び出されますタイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると。`period`.</span><span class="sxs-lookup"><span data-stu-id="564cf-282">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="564cf-283"><xref:System.Threading.Timer.Change%2A>からメソッドを呼び出すことができます、<xref:System.Threading.TimerCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="564cf-283">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="564cf-284">
            <see cref="T:System.Threading.Timer" /> が既に破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-284">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="564cf-285">
            <see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-285">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="564cf-286">
            <see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-286">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-287">呼び出す`Dispose`によって使用されるリソースの使用、<xref:System.Threading.Timer>他の目的で再割り当てします。</span><span class="sxs-lookup"><span data-stu-id="564cf-287">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="564cf-288">詳細については`Dispose`を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)します。</span><span class="sxs-lookup"><span data-stu-id="564cf-288">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="564cf-289">コールバックが後に発生することが、<xref:System.Threading.Timer.Dispose>メソッドのオーバー ロードが呼び出されたため、タイマー キューのスレッド プールのスレッドでコールバックを実行します。</span><span class="sxs-lookup"><span data-stu-id="564cf-289">Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="564cf-290">使用することができます、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>メソッドのオーバー ロードは、すべてのコールバックが完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="564cf-290">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="564cf-291">次のコード例は、保持されているリソースを解放する方法を示しています、`Timer`します。</span><span class="sxs-lookup"><span data-stu-id="564cf-291">The following code example shows how to free the resources held by a `Timer`.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject">
          <span data-ttu-id="564cf-292">
            <see langword="Timer" /> が破棄されたことが通知される <see cref="T:System.Threading.WaitHandle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-292">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the <see langword="Timer" /> has been disposed of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="564cf-293">
            <see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放し、タイマーが破棄されたときに通知します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-293">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="564cf-294">関数が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-294">
              <see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="564cf-295">呼び出す`Dispose`によって使用されるリソースの使用、<xref:System.Threading.Timer>他の目的で再割り当てします。</span><span class="sxs-lookup"><span data-stu-id="564cf-295">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="564cf-296">詳細については`Dispose`を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)します。</span><span class="sxs-lookup"><span data-stu-id="564cf-296">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="564cf-297">ときにこのメソッドが完了したら、通知、<xref:System.Threading.WaitHandle>で指定された、`notifyObject`パラメーター。このオーバー ロードを使用して、<xref:System.Threading.Timer.Dispose%2A>メソッドは、タイマーが破棄されたことを特定するまでブロックしたい場合。</span><span class="sxs-lookup"><span data-stu-id="564cf-297">When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed.</span></span> <span data-ttu-id="564cf-298">現在キューに置かれたすべてのコールバックが完了するまで、タイマーが破棄されていません。</span><span class="sxs-lookup"><span data-stu-id="564cf-298">The timer is not disposed until all currently queued callbacks have completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="564cf-299">コールバックで使用する場合、<xref:System.Threading.Timer.Change%2A>を設定するメソッド、`dueTime`競合状態が発生するパラメーターを 0 には、ときに、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>メソッドのオーバー ロードが呼び出されます: 場合は、タイマー キューに配置する前に新しいコールバック、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>メソッドのオーバー ロードを検出がありますコールバックがキューにありません、 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> ; はブロックされます、新しいコールバックはキューに配置されているときに、それ以外の場合、タイマーが破棄される<xref:System.ObjectDisposedException>新しいコールバックを呼び出す場合にスローされる、<xref:System.Threading.Timer.Change%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="564cf-299">If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="564cf-300">
            <paramref name="notifyObject" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="564cf-300">The <paramref name="notifyObject" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>