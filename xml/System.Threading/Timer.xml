<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f5514bf512db37c78e68399a108c5126414fd2d" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56369770" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定した間隔で、スレッド プール スレッドでメソッドを実行するための機構を提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Threading.TimerCallback>方法を指定するデリゲート、<xref:System.Threading.Timer>を実行します。 署名、<xref:System.Threading.TimerCallback>デリゲートは。  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 タイマーが構築され、変更することはできません、タイマーのデリゲートを指定します。 メソッドは、タイマーは; を作成したスレッドで実行されません。上で実行、<xref:System.Threading.ThreadPool>システムによって付与されたスレッド。  
  
> [!TIP]
> .NET には、という名前の 4 つのクラスが含まれています。 `Timer`、それぞれ異なる機能を備えたの。  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>、またはイベントの詳細については、一定の間隔でシンクをイベントを発生させるし、いずれかでコードを実行します。 サーバー ベースとして使用またはマルチ スレッド環境でサービス コンポーネントのクラスが対象としていますユーザー インターフェイスがないと、実行時に表示されていません。
> - <xref:System.Threading.Timer?displayProperty=nameWithType>、一定の間隔でスレッド プールのスレッドで 1 つのコールバック メソッドを実行します。 タイマーがインスタンス化され、変更できないときに、コールバック メソッドが定義されます。 ように、<xref:System.Timers.Timer?displayProperty=nameWithType>クラスでは、このクラスは、マルチ スレッド環境でサーバー ベースまたはサービス コンポーネントとして使用するためです。 ユーザー インターフェイスを持たないは実行時に表示されません。
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework のみ)、Windows フォーム コンポーネントでイベントが発生し、一定の間隔で 1 つまたは複数のイベント シンクにコードを実行します。 コンポーネントのユーザー インターフェイスを持たないし、は、シングル スレッド環境で使用するために設計されていますUI スレッドで実行します。
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework のみ) を定期的に非同期または同期の web ページのポストバックを実行する ASP.NET コンポーネント。
  
 タイマーを作成するときに、メソッドの最初の実行前に待機する時間の量を指定できます (期限) と 2 回目以降 (ピリオド) 間の待機時間。 <xref:System.Threading.Timer>クラスには、システム クロックと同じ解像度。 つまり、期間は、システム時計の解像度より小さい場合、<xref:System.Threading.TimerCallback>デリゲートは、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒であるシステム時計の解像度で定義された間隔で実行されます。 期限を変更する時間と期間、または無効化を使用して、タイマー、<xref:System.Threading.Timer.Change%2A>メソッド。  
  
> [!NOTE]
>  使用している限り、<xref:System.Threading.Timer>への参照を保持する必要があります。 管理対象のオブジェクトと同様、<xref:System.Threading.Timer>への参照がない場合に、ガベージ コレクションの対象です。 事実を<xref:System.Threading.Timer>がまだアクティブでは収集されてから防止されません。  
  
 使用して、タイマーを不要になったとき、<xref:System.Threading.Timer.Dispose%2A>タイマーによって保持されているリソースを解放するメソッド。 コールバックが後に発生することことに注意してください、<xref:System.Threading.Timer.Dispose>メソッドのオーバー ロードが呼び出されたため、タイマー キューのスレッド プールのスレッドでコールバックを実行します。 使用することができます、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>メソッドのオーバー ロードは、すべてのコールバックが完了するまで待機します。  
  
 呼び出されるために、タイマーが実行するコールバック メソッドが、再入可能にする必要があります<xref:System.Threading.ThreadPool>スレッド。 コールバックは、タイマーの間隔がコールバックの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、コールバックが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> コールバック メソッドを使用し、スレッド プールのスレッドによって処理されますが、単純で軽量なタイマーです。 これは、ユーザー インターフェイス スレッドでそのコールバックが発生しないため、Windows フォームで使用するため推奨されません。 <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> 使用する Windows フォームで使用することをお勧めします。 サーバー ベースのタイマーの機能の使用を検討できます<xref:System.Timers.Timer?displayProperty=nameWithType>イベントを発生させ、機能が追加されます。  
  
   
  
## Examples  
 次の例では、定義、`StatusChecker`クラスが含まれる、`CheckStatus`メソッド シグネチャを持つ、同じとして、<xref:System.Threading.TimerCallback>デリゲートします。 `state`の引数、`CheckStatus`メソッドは、<xref:System.Threading.AutoResetEvent>アプリケーション スレッドとコールバック デリゲートを実行するスレッド プールのスレッドを同期するために使用するオブジェクト。 `StatusChecker`クラスには、2 つの状態変数も含まれています。  
  
 `invokeCount`  
 コールバック メソッドが呼び出された回数を示します。  
  
 `maxCount`  
 コールバック メソッドを呼び出す必要が最大回数を決定します。  
  
 アプリケーション スレッドが 1 秒間待機しを実行すると、タイマーを作成、`CheckStatus`コールバック メソッド 250 ミリ秒ごと。 されるまで、アプリケーション スレッドをブロックし、<xref:System.Threading.AutoResetEvent>オブジェクトがシグナル状態します。 ときに、`CheckStatus`コールバック メソッドが実行される`maxCount`回呼び出し、`AutoResetEvent.Set`の状態を設定するメソッドを<xref:System.Threading.AutoResetEvent>オブジェクトがシグナル状態にします。 これは、最初に、アプリケーションのスレッドが、<xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29>メソッドのコールバック メソッドでは、0.5 秒おきようになりましたが実行されるようにします。 まで再度ブロック、<xref:System.Threading.AutoResetEvent>オブジェクトがシグナル状態します。 呼び出すことにより、タイマーが破棄されるこのような場合は、その<xref:System.Threading.Timer.Dispose%2A>メソッド、およびアプリケーションを終了します。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">マネージド スレッド プール</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</param>
        <summary>状態オブジェクトとして新しく作成した <see cref="T:System.Threading.Timer" /> を使用して、無制限の期間および無制限の期限を指定して <see cref="T:System.Threading.Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用するときに、このコンス トラクターを呼び出す、<xref:System.Threading.Timer>状態オブジェクトとしてオブジェクト自体です。 タイマーを作成した後、<xref:System.Threading.Timer.Change%2A>間隔と時間の期限を設定します。  
  
 このコンス トラクターは、無制限の期限を指定します。 時間は最初のコールバックと無限の間隔は最初のコールバックが前に発生するのを防止するために、コールバックの間の前に、<xref:System.Threading.Timer>オブジェクトは、状態オブジェクトに割り当てられています。  
  
 指定されたメソッド`callback`で呼び出されるため、再入可能でなければなりません<xref:System.Threading.ThreadPool>スレッド。 メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。  
  
   
  
## Examples  
 次のコード例では、状態オブジェクトとしてタイマー自体を使用して、新しいタイマーを作成します。 <xref:System.Threading.Timer.Change%2A>タイマーを開始するメソッドを使用します。 タイマーのコールバックが発生したときに、状態オブジェクトを使用して、タイマーの電源をオフにします。  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</param>
        <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</param>
        <param name="dueTime"><paramref name="callback" /> が呼び出される前の遅延時間 (ミリ秒単位) です。 タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period"><paramref name="callback" /> が呼び出される時間間隔 (ミリ秒単位) です。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を指定するために 32 ビット符号付き整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたデリゲート、`callback`パラメーターが後に 1 回呼び出される`dueTime`が経過すると、およびその後、毎回、`period`間隔が経過するまでの時間します。  
  
 場合`dueTime`はゼロ (0)`callback`がすぐに呼び出されます。 場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`は呼び出されません。 タイマーは無効になりますが、呼び出すことにより再度有効にすることができます、<xref:System.Threading.Timer.Change%2A>メソッド。  
  
 <xref:System.Threading.Timer>クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒である、システム クロックと同じ解像度、`callback`デリゲートの実行間隔の場合、システム時計の解像度によって定義されたで`period`が、システム時計の解像度より小さい。 場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>と`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`が呼び出されるタイマーの定期的な動作が 1 回、無効ですを使用して再度有効にできます、<xref:System.Threading.Timer.Change%2A>メソッド。  
  
 指定されたメソッド`callback`で呼び出されるため、再入可能でなければなりません<xref:System.Threading.ThreadPool>スレッド。 メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。  
  
   
  
## Examples  
 次のコード例を作成する方法を示しています、`TimerCallback`を委任しの新しいインスタンスを初期化、`Timer`クラス。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表す <see cref="T:System.Threading.TimerCallback" /> デリゲート。</param>
        <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</param>
        <param name="dueTime"><paramref name="callback" /> が呼び出される前の遅延時間 (ミリ秒単位) です。 タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period"><paramref name="callback" /> が呼び出される時間間隔 (ミリ秒単位) です。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を計るために 64 ビット符号付き整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたデリゲート、`callback`パラメーターが後に 1 回呼び出される`dueTime`が経過すると、およびその後、毎回、`period`間隔が経過するまでの時間します。  
  
 場合`dueTime`はゼロ (0)`callback`がすぐに呼び出されます。 場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`は呼び出されません。 タイマーは無効になりますが、呼び出すことにより再度有効にすることができます、<xref:System.Threading.Timer.Change%2A>メソッド。  
  
 <xref:System.Threading.Timer>クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒である、システム クロックと同じ解像度、`callback`デリゲートの実行間隔の場合、システム時計の解像度によって定義されたで`period`が、システム時計の解像度より小さい。 場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>と`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`が呼び出されるタイマーの定期的な動作が 1 回、無効ですを使用して再度有効にできます、<xref:System.Threading.Timer.Change%2A>メソッド。  
  
 指定されたメソッド`callback`で呼び出されるため、再入可能でなければなりません<xref:System.Threading.ThreadPool>スレッド。 メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが 4294967294 より大きい値です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表すデリゲート。</param>
        <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</param>
        <param name="dueTime"><paramref name="callback" /> パラメーターがそのメソッドを呼び出す前に遅延する時間。 -1 ミリ秒を指定して、タイマーが開始されないようにします。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period"><paramref name="callback" /> によって参照されるメソッドの呼び出し時間間隔。 -1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</param>
        <summary>時間間隔を計るために <see cref="T:System.TimeSpan" /> 値を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたデリゲート、`callback`パラメーターが後に 1 回呼び出される`dueTime`が経過すると、およびその後、毎回、`period`間隔が経過するまでの時間します。  
  
 場合`dueTime`はゼロ (0)`callback`がすぐに呼び出されます。 場合`dueTime`負 (-1) を 1 つ (ミリ秒単位) は、`callback`は呼び出されません。 タイマーは無効になりますが、呼び出すことにより再度有効にすることができます、<xref:System.Threading.Timer.Change%2A>メソッド。  
  
 <xref:System.Threading.Timer>クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒である、システム クロックと同じ解像度、`callback`デリゲートの実行間隔の場合、システム時計の解像度によって定義されたで`period`が、システム時計の解像度より小さい。 場合`period`がゼロ (0) または負の値の-1 ミリ秒と`dueTime`が正の値、`callback`が呼び出されるタイマーの定期的な動作が 1 回、無効ですを使用して再度有効にできます、<xref:System.Threading.Timer.Change%2A>メソッド。  
  
 指定されたメソッド`callback`で呼び出されるため、再入可能でなければなりません<xref:System.Threading.ThreadPool>スレッド。 メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。  
  
   
  
## Examples  
 次のコード例を作成する方法を示しています、`TimerCallback`を委任しの新しいインスタンスを初期化、`Timer`クラス。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> または <paramref name="period" /> の値のミリ秒数が負の値で <see cref="F:System.Threading.Timeout.Infinite" /> と等しくないか、<see cref="F:System.Int32.MaxValue" /> より大きい値です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表すデリゲート。</param>
        <param name="state">コールバック メソッドで使用される情報を格納するオブジェクト。または <see langword="null" />。</param>
        <param name="dueTime"><paramref name="callback" /> が呼び出される前の遅延時間 (ミリ秒単位) です。 タイマーが開始されないようにするには <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period"><paramref name="callback" /> が呼び出される時間間隔 (ミリ秒単位) です。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を計るために 32 ビット符号なし整数を使用して、<see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたデリゲート、`callback`パラメーターが後に 1 回呼び出される`dueTime`が経過すると、およびその後、毎回、`period`間隔が経過するまでの時間します。  
  
 場合`dueTime`はゼロ (0)`callback`がすぐに呼び出されます。 場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`は呼び出されません。 タイマーは無効になりますが、呼び出すことにより再度有効にすることができます、<xref:System.Threading.Timer.Change%2A>メソッド。  
  
 <xref:System.Threading.Timer>クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒である、システム クロックと同じ解像度、`callback`デリゲートの実行間隔の場合、システム時計の解像度によって定義されたで`period`が、システム時計の解像度より小さい。 場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>と`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、`callback`が呼び出されるタイマーの定期的な動作が 1 回、無効ですを使用して再度有効にできます、<xref:System.Threading.Timer.Change%2A>メソッド。  
  
 指定されたメソッド`callback`で呼び出されるため、再入可能でなければなりません<xref:System.Threading.ThreadPool>スレッド。 メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プール スレッドで同時に実行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。 タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を計るために 32 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コールバック メソッドが後に 1 回呼び出される`dueTime`が経過すると、および各その後で指定された時間間隔の時間を`period`が経過するとします。  
  
 場合`dueTime`ゼロ (0) は、すぐに、コールバック メソッドが呼び出されます。 場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが呼び出されることはありません。 タイマーは無効です、呼び出すことにより再度有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`dueTime`します。  
  
 場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、および`dueTime`ない<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが 1 回呼び出されますタイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`period`。  
  
 <xref:System.Threading.Timer.Change%2A>からメソッドを呼び出すことができます、<xref:System.Threading.TimerCallback>を委任します。  
  
   
  
## Examples  
 次のコード例は、開始する方法を示します、`Timer`し、呼び出しのセットの数、経過した後、期間を変更します。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> と等しくありません。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime"><see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。 タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を計るために 64 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コールバック メソッドが後に 1 回呼び出される`dueTime`が経過すると、および各その後で指定された時間間隔の時間を`period`が経過するとします。  
  
 場合`dueTime`ゼロ (0) は、すぐに、コールバック メソッドが呼び出されます。 場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが呼び出されることはありません。 タイマーは無効です、呼び出すことにより再度有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`dueTime`します。  
  
 場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、および`dueTime`ない<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが 1 回呼び出されますタイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`period`。  
  
 <xref:System.Threading.Timer.Change%2A>からメソッドを呼び出すことができます、<xref:System.Threading.TimerCallback>を委任します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが -1 未満です。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが 4294967294 より大きい値です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime"><see cref="T:System.TimeSpan" /> は、<see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間を表します。 タイマーが再開されないようにする -1 を指定します。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す時間間隔。 -1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</param>
        <summary>時間間隔を計るために <see cref="T:System.TimeSpan" /> 値を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コールバック メソッドが後に 1 回呼び出される`dueTime`が経過すると、および各その後で指定された時間間隔の時間を`period`が経過するとします。  
  
 場合`dueTime`ゼロ (0) は、すぐに、コールバック メソッドが呼び出されます。 場合`dueTime`負の値の-1 ミリ秒は、コールバック メソッドが呼び出されることはありません。 タイマーが無効になっていることができますが呼び出すことにより再度有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`dueTime`します。  
  
 場合`period`がゼロ (0) または負 (-1) を 1 つ (ミリ秒単位) と`dueTime`が正の値、コールバック メソッドが 1 回呼び出されますつまり、タイマーの定期的な動作を無効にしたが呼び出すことにより再度有効にすることができます<xref:System.Threading.Timer.Change%2A>より大きい値を指定すると。場合は 0`period`します。  
  
 <xref:System.Threading.Timer.Change%2A>からメソッドを呼び出すことができます、<xref:System.Threading.TimerCallback>を委任します。  
  
   
  
## Examples  
 次のコード例は、開始する方法を示します、`Timer`し、呼び出しのセットの数、経過した後、期間を変更します。  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが -1 未満です (ミリ秒単位)。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> パラメーターまたは <paramref name="period" /> パラメーターが 4294967294 より大きい値です (ミリ秒単位)。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><see cref="T:System.Threading.Timer" /> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。 タイマーが再開されないようにする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period"><see cref="T:System.Threading.Timer" /> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。 周期的なシグナル通知を無効にする <see cref="F:System.Threading.Timeout.Infinite" /> を指定します。</param>
        <summary>時間間隔を計るために 32 ビット符号なし整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>タイマーが正常に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コールバック メソッドが後に 1 回呼び出される`dueTime`が経過すると、および各その後で指定された時間間隔の時間を`period`が経過するとします。  
  
 場合`dueTime`ゼロ (0) は、すぐに、コールバック メソッドが呼び出されます。 場合`dueTime`は<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが呼び出されることはありません。 タイマーは無効です、呼び出すことにより再度有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`dueTime`します。  
  
 場合`period`はゼロ (0) または<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>、および`dueTime`ない<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>できますが、コールバック メソッドが 1 回呼び出されますタイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする<xref:System.Threading.Timer.Change%2A>の正の値を指定すると`period`。  
  
 <xref:System.Threading.Timer.Change%2A>からメソッドを呼び出すことができます、<xref:System.Threading.TimerCallback>を委任します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> が既に破棄されています。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す`Dispose`によって使用されるリソースの使用、<xref:System.Threading.Timer>他の目的で再割り当てします。 詳細については`Dispose`を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)します。  
  
> [!NOTE]
>  コールバックが後に発生することが、<xref:System.Threading.Timer.Dispose>メソッドのオーバー ロードが呼び出されたため、タイマー キューのスレッド プールのスレッドでコールバックを実行します。 使用することができます、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>メソッドのオーバー ロードは、すべてのコールバックが完了するまで待機します。  
  
   
  
## Examples  
 次のコード例は、保持されているリソースを解放する方法を示しています、`Timer`します。  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><see langword="Timer" /> が破棄されたことが通知される <see cref="T:System.Threading.WaitHandle" />。</param>
        <summary><see cref="T:System.Threading.Timer" /> の現在のインスタンスによって使用されているすべてのリソースを解放し、タイマーが破棄されたときに通知します。</summary>
        <returns>関数が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す`Dispose`によって使用されるリソースの使用、<xref:System.Threading.Timer>他の目的で再割り当てします。 詳細については`Dispose`を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)します。  
  
 ときにこのメソッドが完了したら、通知、<xref:System.Threading.WaitHandle>で指定された、`notifyObject`パラメーター。このオーバー ロードを使用して、<xref:System.Threading.Timer.Dispose%2A>メソッドは、タイマーが破棄されたことを特定するまでブロックしたい場合。 現在キューに置かれたすべてのコールバックが完了するまで、タイマーが破棄されていません。  
  
> [!NOTE]
>  コールバックで使用する場合、<xref:System.Threading.Timer.Change%2A>を設定するメソッド、`dueTime`競合状態が発生するパラメーターを 0 には、ときに、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>メソッドのオーバー ロードが呼び出されます。タイマー キューに配置する前に新しいコールバックする場合、<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>メソッドのオーバー ロードでは、コールバックがキューにありませんが検出<xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29>; はブロックされます、新しいコールバックはキューに配置されているときに、それ以外の場合、タイマーが破棄される<xref:System.ObjectDisposedException>ときにスローされる。コールバックの新しい呼び出し、<xref:System.Threading.Timer.Change%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="notifyObject" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">タイマー</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="member this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>