<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Timer.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac567fe19429800288028bf5585c9bd4f03134790db.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67fe19429800288028bf5585c9bd4f03134790db</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Timer">
          <source>Provides a mechanism for executing a method on a thread pool thread at specified intervals.</source>
          <target state="translated">指定した間隔で、スレッド プール スレッドでメソッドを実行するための機構を提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Timer">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>Use a <ph id="ph1">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate to specify the method you want the <ph id="ph2">&lt;xref:System.Threading.Timer&gt;</ph> to execute.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Threading.TimerCallback&gt;</ph>メソッドを指定するデリゲート、<ph id="ph2">&lt;xref:System.Threading.Timer&gt;</ph>を実行します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The signature of the <ph id="ph1">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate is:</source>
          <target state="translated">署名、<ph id="ph1">&lt;xref:System.Threading.TimerCallback&gt;</ph>デリゲートは。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The timer delegate is specified when the timer is constructed, and cannot be changed.</source>
          <target state="translated">タイマーのデリゲートは、タイマーが構築され、変更できないときに指定します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The method does not execute on the thread that created the timer; it executes on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread supplied by the system.</source>
          <target state="translated">メソッドが、タイマー; を作成したスレッドで実行されません。上で実行、<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>システムによって提供されるスレッドです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>.NET includes four classes named <ph id="ph1">`Timer`</ph>, each of which offers different functionality:</source>
          <target state="translated">.NET には、という 4 つのクラスが含まれています。 <ph id="ph1">`Timer`</ph>、それぞれの異なる機能を提供します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>, which fires an event and executes the code in one or more event sinks at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>、または複数のイベントが一定の間隔でシンクをイベントを発生させるし、いずれかでコードを実行します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">クラスは、サーバー ベースとして使用するか、マルチ スレッド環境でのサービス コンポーネントユーザー インターフェイスを持たないし、実行時に表示されていません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>, which executes a single callback method on a thread pool thread at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>、一定の間隔でスレッド プールのスレッドで単一のコールバック メソッドを実行します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The callback method is defined when the timer is instantiated and cannot be changed.</source>
          <target state="translated">コールバック メソッドは、タイマーがインスタンス化され、変更できないときに定義されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>Like the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">同様に、<ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>クラス、マルチ スレッド環境でのサーバー ベースまたはサービスのコンポーネントとして使用するこのクラスが目的としています。 これは、ユーザー インターフェイスを持たないは実行時に表示されません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> (.NET Framework only), a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> (.NET framework のみ) イベントを発生させるし、一定の間隔で 1 つまたは複数のイベント シンクでコードを実行する Windows フォームのコンポーネントです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.</source>
          <target state="translated">コンポーネントは、ユーザー インターフェイスを持たないし、は、シングル スレッド環境で使用するために設計されていますUI スレッドで実行します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph> (.NET Framework only), an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph> (.NET framework のみ) を定期的に非同期または同期の web ページのポストバックを実行するための ASP.NET コンポーネント。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period).</source>
          <target state="translated">タイマーを作成するときに、メソッドの最初の実行前に待機する時間の量を指定できます (期限)、および後続の実行 (ピリオド) 間の待機時間。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> class has the same resolution as the system clock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>クラスには、システム クロックと同じ解像度。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>This means that if the period is less than the resolution of the system clock, the <ph id="ph1">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems.</source>
          <target state="translated">つまり、期間は、システム クロックの解像度よりも小さい場合、<ph id="ph1">&lt;xref:System.Threading.TimerCallback&gt;</ph>デリゲートは、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒であるシステム時計の解像度で定義された間隔で実行されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>You can change the due time and period, or disable the timer, by using the <ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.</source>
          <target state="translated">期限を変更する時間と期間、または無効化を使用して、タイマー、<ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>As long as you are using a <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>, you must keep a reference to it.</source>
          <target state="translated">使用している限り、<ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>への参照を保持する必要があります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>As with any managed object, a <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> is subject to garbage collection when there are no references to it.</source>
          <target state="translated">任意のマネージ オブジェクトと同様、<ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>への参照がない場合に、ガベージ コレクションの対象とします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The fact that a <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> is still active does not prevent it from being collected.</source>
          <target state="translated">ファクトを<ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>がまだアクティブでは収集されてからできなくされません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>When a timer is no longer needed, use the <ph id="ph1">&lt;xref:System.Threading.Timer.Dispose%2A&gt;</ph> method to free the resources held by the timer.</source>
          <target state="translated">タイマーを不要になったときに使用して、<ph id="ph1">&lt;xref:System.Threading.Timer.Dispose%2A&gt;</ph>タイマーによって保持されているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>Note that callbacks can occur after the <ph id="ph1">&lt;xref:System.Threading.Timer.Dispose&gt;</ph> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</source>
          <target state="translated">コールバックが後に発生する可能性ことに注意してください、<ph id="ph1">&lt;xref:System.Threading.Timer.Dispose&gt;</ph>メソッドのオーバー ロードが呼び出されたため、タイマー キューにスレッド プールのスレッドでコールバックを実行します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> method overload to wait until all callbacks have completed.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph>メソッドのオーバー ロードは、すべてのコールバックが完了するまで待機します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The callback method executed by the timer should be reentrant, because it is called on <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.</source>
          <target state="translated">呼び出されるために、タイマーによって実行されるコールバック メソッドが、再入可能にする必要があります<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.</source>
          <target state="translated">コールバックは、タイマーの間隔は、コールバックの実行に必要な時間よりも小さい場合、またはすべてのスレッド プール スレッドが使用されており、コールバックが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> is a simple, lightweight timer that uses callback methods and is served by thread pool threads.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> コールバック メソッドを使用し、スレッド プールのスレッドによって処理されている単純で軽量なタイマーです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread.</source>
          <target state="translated">これは、ユーザー インターフェイス スレッドでコールバックが発生しないために、Windows フォームで使用するため推奨されません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> is a better choice for use with Windows Forms.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> Windows フォームで使用するためお勧めします。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>For server-based timer functionality, you might consider using <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>, which raises events and has additional features.</source>
          <target state="translated">サーバー ベースのタイマー機能の使用を検討できる<ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>イベントを発生させ、その他の機能をします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The following example defines a <ph id="ph1">`StatusChecker`</ph> class  that includes a <ph id="ph2">`CheckStatus`</ph> method whose signature is the same as the <ph id="ph3">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate.</source>
          <target state="translated">次の例、<ph id="ph1">`StatusChecker`</ph>含まれているクラス、<ph id="ph2">`CheckStatus`</ph>メソッド シグネチャを持つ同じとして、<ph id="ph3">&lt;xref:System.Threading.TimerCallback&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The  <ph id="ph1">`state`</ph> argument of the <ph id="ph2">`CheckStatus`</ph> method is an <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate.</source>
          <target state="translated"><ph id="ph1">`state`</ph>の引数、<ph id="ph2">`CheckStatus`</ph>メソッドは、<ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>アプリケーション スレッドとコールバック デリゲートを実行するスレッド プールのスレッドを同期するために使用されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The <ph id="ph1">`StatusChecker`</ph> class also includes two state variables:</source>
          <target state="translated"><ph id="ph1">`StatusChecker`</ph>クラスには、次の 2 つの状態変数も含まれています。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>Indicates the number of times the callback method has been invoked.</source>
          <target state="translated">コールバック メソッドが呼び出された回数を示します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>Determines the maximum number of times the callback method should be invoked.</source>
          <target state="translated">コールバック メソッドを呼び出す必要がある最大回数を決定します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The application thread creates the timer, which waits one second and then executes  the <ph id="ph1">`CheckStatus`</ph> callback method every 250 milliseconds.</source>
          <target state="translated">アプリケーションのスレッドが 1 秒間待機しを実行すると、タイマーを作成、<ph id="ph1">`CheckStatus`</ph>コールバック メソッドすべて 250 ミリ秒です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The application thread then blocks until the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> object is signaled.</source>
          <target state="translated">まで、アプリケーション スレッドをブロックし、<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>オブジェクトがシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>When the <ph id="ph1">`CheckStatus`</ph> callback method executes <ph id="ph2">`maxCount`</ph> times, it calls the <ph id="ph3">`AutoResetEvent.Set`</ph> method to set the state of the <ph id="ph4">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> object to signaled.</source>
          <target state="translated">ときに、<ph id="ph1">`CheckStatus`</ph>コールバック メソッドが実行される<ph id="ph2">`maxCount`</ph>呼び出して、時刻、<ph id="ph3">`AutoResetEvent.Set`</ph>の状態を設定するメソッドを<ph id="ph4">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>シグナル状態にオブジェクト。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>The first time this happens, the application thread calls the <ph id="ph1">&lt;xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29&gt;</ph> method so that the callback method now executes every half second.</source>
          <target state="translated">初めてこのようなアプリケーションのスレッドの呼び出し、<ph id="ph1">&lt;xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29&gt;</ph>メソッド、コールバック メソッドは、0.5 秒おきを今すぐ実行するようにします。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>It once again blocks until the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> object is signaled.</source>
          <target state="translated">まで再度ブロック、<ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>オブジェクトがシグナル状態にします。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>When this happens, the timer is destroyed by calling its <ph id="ph1">&lt;xref:System.Threading.Timer.Dispose%2A&gt;</ph> method, and the application terminates.</source>
          <target state="translated">呼び出して、タイマーが破棄されるこのような場合は、その<ph id="ph1">&lt;xref:System.Threading.Timer.Dispose%2A&gt;</ph>メソッド、およびアプリケーションを終了します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Timer">
          <source>This type is thread safe.</source>
          <target state="translated">この型はスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="T:System.Threading.Timer">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="Timer" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Timer" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.TimerCallback" /&gt;</ph> delegate representing a method to be executed.</source>
          <target state="translated">実行するメソッドを表す <ph id="ph1">&lt;see cref="T:System.Threading.TimerCallback" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> class with an infinite period and an infinite due time, using the newly created <ph id="ph2">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> object as the state object.</source>
          <target state="translated">状態オブジェクトとして新しく作成した <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> を使用して、無制限の期間および無制限の期限を指定して <ph id="ph2">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
          <source>Call this constructor when you want to use the <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> object itself as the state object.</source>
          <target state="translated">使用するときに、このコンス トラクターを呼び出す、<ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>状態オブジェクトとしてオブジェクト自体です。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
          <source>After creating the timer, use the <ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method to set the interval and due time.</source>
          <target state="translated">タイマーを作成すると、使用、<ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>間隔と時間の期限を設定します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
          <source>This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> object is assigned to the state object.</source>
          <target state="translated">このコンス トラクターは、無限の期限を指定します。 最初のコールバックと無限の間隔を、最初のコールバックが前に発生していることを防止するためのコールバックの前に時間、<ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>オブジェクトが、状態オブジェクトに割り当てられています。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
          <source>The method specified for <ph id="ph1">`callback`</ph> should be reentrant, because it is called on <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.</source>
          <target state="translated">指定されたメソッド<ph id="ph1">`callback`</ph>で呼び出されるために、再入可能でなければなりません<ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
          <source>The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</source>
          <target state="translated">メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プール スレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
          <source>The following code example creates a new timer, using the timer itself as the state object.</source>
          <target state="translated">次のコード例では、状態オブジェクトとしてそれ自体、タイマーを使用して、新しいタイマーを作成します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method is used to start the timer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>タイマーを開始するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
          <source>When the timer callback occurs, the state object is used to turn the timer off.</source>
          <target state="translated">タイマー コールバックが発生すると、タイマーをオフにする状態オブジェクトが使用されます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.TimerCallback" /&gt;</ph> delegate representing a method to be executed.</source>
          <target state="translated">実行するメソッドを表す <ph id="ph1">&lt;see cref="T:System.Threading.TimerCallback" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>An object containing information to be used by the callback method, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">コールバック メソッドで使用される情報を格納するオブジェクト。または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>The amount of time to delay before <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> is invoked, in milliseconds.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> が呼び出される前の遅延時間 (ミリ秒単位) です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to prevent the timer from starting.</source>
          <target state="translated">タイマーが開始されないようにするには <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>Specify zero (0) to start the timer immediately.</source>
          <target state="translated">0 を指定して、タイマーをすぐに開始します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>The time interval between invocations of <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept>, in milliseconds.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> が呼び出される時間間隔 (ミリ秒単位) です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to disable periodic signaling.</source>
          <target state="translated">周期的なシグナル通知を無効にする <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="Timer" /&gt;</ph> class, using a 32-bit signed integer to specify the time interval.</source>
          <target state="translated">時間間隔を指定するために 32 ビット符号付き整数を使用して、<ph id="ph1">&lt;see langword="Timer" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>The delegate specified by the <ph id="ph1">`callback`</ph> parameter is invoked once after <ph id="ph2">`dueTime`</ph> elapses, and thereafter each time the <ph id="ph3">`period`</ph> time interval elapses.</source>
          <target state="translated">によって指定されたデリゲート、<ph id="ph1">`callback`</ph>パラメーターが後に 1 回呼び出される<ph id="ph2">`dueTime`</ph>が経過すると、およびたびにその後、<ph id="ph3">`period`</ph>間隔が経過するまでの時間します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>If <ph id="ph1">`dueTime`</ph> is zero (0), <ph id="ph2">`callback`</ph> is invoked immediately.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>はゼロ (0)<ph id="ph2">`callback`</ph>が即座に呼び出されます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>If <ph id="ph1">`dueTime`</ph> is <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">`callback`</ph> is not invoked; the timer is disabled, but can be re-enabled by calling the <ph id="ph4">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>は<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>、<ph id="ph3">`callback`</ph>は呼び出されません。 タイマー無効ですが、呼び出すことにより再度有効にすることができます、<ph id="ph4">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <ph id="ph2">`callback`</ph> delegate executes at intervals defined by the resolution of the system clock if <ph id="ph3">`period`</ph> is less than the resolution of the system clock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>クラスには、システム クロック、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒であると同じ解像度、<ph id="ph2">`callback`</ph>場合、システム クロックの解像度によって定義された間隔で実行されるデリゲート<ph id="ph3">`period`</ph>が、システム クロックの解像度よりも小さいです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>If <ph id="ph1">`period`</ph> is zero (0) or <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">`dueTime`</ph> is not <ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">`callback`</ph> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <ph id="ph6">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">`period`</ph>はゼロ (0) または<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>と<ph id="ph3">`dueTime`</ph>は<ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>、<ph id="ph5">`callback`</ph>が呼び出される 1 回; タイマーの定期的な動作無効ですが、有効にできますを使用して、<ph id="ph6">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>The method specified for <ph id="ph1">`callback`</ph> should be reentrant, because it is called on <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.</source>
          <target state="translated">指定されたメソッド<ph id="ph1">`callback`</ph>で呼び出されるために、再入可能でなければなりません<ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</source>
          <target state="translated">メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プール スレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>The following code example shows how to create a <ph id="ph1">`TimerCallback`</ph> delegate and initialize a new instance of the <ph id="ph2">`Timer`</ph> class.</source>
          <target state="translated">次のコード例を作成する方法を示しています、<ph id="ph1">`TimerCallback`</ph>デリゲートし、の新しいインスタンスを初期化、<ph id="ph2">`Timer`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> or <ph id="ph2">&lt;paramref name="period" /&gt;</ph> parameter is negative and is not equal to <ph id="ph3">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="period" /&gt;</ph> パラメーターが負の値であり、<ph id="ph3">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> と等しくありません。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="callback" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.TimerCallback" /&gt;</ph> delegate representing a method to be executed.</source>
          <target state="translated">実行するメソッドを表す <ph id="ph1">&lt;see cref="T:System.Threading.TimerCallback" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>An object containing information to be used by the callback method, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">コールバック メソッドで使用される情報を格納するオブジェクト。または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>The amount of time to delay before <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> is invoked, in milliseconds.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> が呼び出される前の遅延時間 (ミリ秒単位) です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to prevent the timer from starting.</source>
          <target state="translated">タイマーが開始されないようにするには <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>Specify zero (0) to start the timer immediately.</source>
          <target state="translated">0 を指定して、タイマーをすぐに開始します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>The time interval between invocations of <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept>, in milliseconds.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> が呼び出される時間間隔 (ミリ秒単位) です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to disable periodic signaling.</source>
          <target state="translated">周期的なシグナル通知を無効にする <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="Timer" /&gt;</ph> class, using 64-bit signed integers to measure time intervals.</source>
          <target state="translated">時間間隔を計るために 64 ビット符号付き整数を使用して、<ph id="ph1">&lt;see langword="Timer" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>The delegate specified by the <ph id="ph1">`callback`</ph> parameter is invoked once after <ph id="ph2">`dueTime`</ph> elapses, and thereafter each time the <ph id="ph3">`period`</ph> time interval elapses.</source>
          <target state="translated">によって指定されたデリゲート、<ph id="ph1">`callback`</ph>パラメーターが後に 1 回呼び出される<ph id="ph2">`dueTime`</ph>が経過すると、およびたびにその後、<ph id="ph3">`period`</ph>間隔が経過するまでの時間します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>If <ph id="ph1">`dueTime`</ph> is zero (0), <ph id="ph2">`callback`</ph> is invoked immediately.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>はゼロ (0)<ph id="ph2">`callback`</ph>が即座に呼び出されます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>If <ph id="ph1">`dueTime`</ph> is <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">`callback`</ph> is not invoked; the timer is disabled, but can be re-enabled by calling the <ph id="ph4">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>は<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>、<ph id="ph3">`callback`</ph>は呼び出されません。 タイマー無効ですが、呼び出すことにより再度有効にすることができます、<ph id="ph4">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <ph id="ph2">`callback`</ph> delegate executes at intervals defined by the resolution of the system clock if <ph id="ph3">`period`</ph> is less than the resolution of the system clock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>クラスには、システム クロック、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒であると同じ解像度、<ph id="ph2">`callback`</ph>場合、システム クロックの解像度によって定義された間隔で実行されるデリゲート<ph id="ph3">`period`</ph>が、システム クロックの解像度よりも小さいです。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>If <ph id="ph1">`period`</ph> is zero (0) or <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">`dueTime`</ph> is not <ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">`callback`</ph> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <ph id="ph6">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">`period`</ph>はゼロ (0) または<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>と<ph id="ph3">`dueTime`</ph>は<ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>、<ph id="ph5">`callback`</ph>が呼び出される 1 回; タイマーの定期的な動作無効ですが、有効にできますを使用して、<ph id="ph6">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>The method specified for <ph id="ph1">`callback`</ph> should be reentrant, because it is called on <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.</source>
          <target state="translated">指定されたメソッド<ph id="ph1">`callback`</ph>で呼び出されるために、再入可能でなければなりません<ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</source>
          <target state="translated">メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プール スレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> or <ph id="ph2">&lt;paramref name="period" /&gt;</ph> parameter is negative and is not equal to <ph id="ph3">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="period" /&gt;</ph> パラメーターが負の値であり、<ph id="ph3">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> と等しくありません。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> or <ph id="ph2">&lt;paramref name="period" /&gt;</ph> parameter is greater than 4294967294.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="period" /&gt;</ph> パラメーターが 4294967294 より大きい値です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>A delegate representing a method to be executed.</source>
          <target state="translated">実行するメソッドを表すデリゲート。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>An object containing information to be used by the callback method, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">コールバック メソッドで使用される情報を格納するオブジェクト。または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>The amount of time to delay before the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> parameter invokes its methods.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> パラメーターがそのメソッドを呼び出す前に遅延する時間。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>Specify negative one (-1) milliseconds to prevent the timer from starting.</source>
          <target state="translated">-1 ミリ秒を指定して、タイマーが開始されないようにします。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>Specify zero (0) to start the timer immediately.</source>
          <target state="translated">0 を指定して、タイマーをすぐに開始します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>The time interval between invocations of the methods referenced by <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> によって参照されるメソッドの呼び出し時間間隔。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>Specify negative one (-1) milliseconds to disable periodic signaling.</source>
          <target state="translated">-1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="Timer" /&gt;</ph> class, using <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> values to measure time intervals.</source>
          <target state="translated">時間間隔を計るために <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 値を使用して、<ph id="ph1">&lt;see langword="Timer" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>The delegate specified by the <ph id="ph1">`callback`</ph> parameter is invoked once after <ph id="ph2">`dueTime`</ph> elapses, and thereafter each time the <ph id="ph3">`period`</ph> time interval elapses.</source>
          <target state="translated">によって指定されたデリゲート、<ph id="ph1">`callback`</ph>パラメーターが後に 1 回呼び出される<ph id="ph2">`dueTime`</ph>が経過すると、およびたびにその後、<ph id="ph3">`period`</ph>間隔が経過するまでの時間します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>If <ph id="ph1">`dueTime`</ph> is zero (0), <ph id="ph2">`callback`</ph> is invoked immediately.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>はゼロ (0)<ph id="ph2">`callback`</ph>が即座に呼び出されます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>If <ph id="ph1">`dueTime`</ph> is negative one (-1) milliseconds, <ph id="ph2">`callback`</ph> is not invoked; the timer is disabled, but can be re-enabled by calling the <ph id="ph3">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>負 (-1) 1 つ (ミリ秒単位) は、<ph id="ph2">`callback`</ph>は呼び出されません。 タイマー無効ですが、呼び出すことにより再度有効にすることができます、<ph id="ph3">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <ph id="ph2">`callback`</ph> delegate executes at intervals defined by the resolution of the system clock if <ph id="ph3">`period`</ph> is less than the resolution of the system clock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>クラスには、システム クロック、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒であると同じ解像度、<ph id="ph2">`callback`</ph>場合、システム クロックの解像度によって定義された間隔で実行されるデリゲート<ph id="ph3">`period`</ph>が、システム クロックの解像度よりも小さいです。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>If <ph id="ph1">`period`</ph> is zero (0) or negative one (-1) milliseconds and <ph id="ph2">`dueTime`</ph> is positive, <ph id="ph3">`callback`</ph> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <ph id="ph4">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">`period`</ph>はゼロ (0) または負の値の-1 ミリ秒および<ph id="ph2">`dueTime`</ph>が正の値、<ph id="ph3">`callback`</ph>が呼び出される 1 回; タイマーの定期的な動作無効ですが、有効にできますを使用して、<ph id="ph4">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>The method specified for <ph id="ph1">`callback`</ph> should be reentrant, because it is called on <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.</source>
          <target state="translated">指定されたメソッド<ph id="ph1">`callback`</ph>で呼び出されるために、再入可能でなければなりません<ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</source>
          <target state="translated">メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プール スレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>The following code example shows how to create a <ph id="ph1">`TimerCallback`</ph> delegate and initialize a new instance of the <ph id="ph2">`Timer`</ph> class.</source>
          <target state="translated">次のコード例を作成する方法を示しています、<ph id="ph1">`TimerCallback`</ph>デリゲートし、の新しいインスタンスを初期化、<ph id="ph2">`Timer`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>The number of milliseconds in the value of <ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> or <ph id="ph2">&lt;paramref name="period" /&gt;</ph> is negative and not equal to <ph id="ph3">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, or is greater than <ph id="ph4">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> または <ph id="ph2">&lt;paramref name="period" /&gt;</ph> の値のミリ秒数が負の値で <ph id="ph3">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> と等しくないか、<ph id="ph4">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> より大きい値です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="callback" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>A delegate representing a method to be executed.</source>
          <target state="translated">実行するメソッドを表すデリゲート。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>An object containing information to be used by the callback method, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">コールバック メソッドで使用される情報を格納するオブジェクト。または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>The amount of time to delay before <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> is invoked, in milliseconds.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> が呼び出される前の遅延時間 (ミリ秒単位) です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to prevent the timer from starting.</source>
          <target state="translated">タイマーが開始されないようにするには <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>Specify zero (0) to start the timer immediately.</source>
          <target state="translated">0 を指定して、タイマーをすぐに開始します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>The time interval between invocations of <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept>, in milliseconds.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> が呼び出される時間間隔 (ミリ秒単位) です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to disable periodic signaling.</source>
          <target state="translated">周期的なシグナル通知を無効にする <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="Timer" /&gt;</ph> class, using 32-bit unsigned integers to measure time intervals.</source>
          <target state="translated">時間間隔を計るために 32 ビット符号なし整数を使用して、<ph id="ph1">&lt;see langword="Timer" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>The delegate specified by the <ph id="ph1">`callback`</ph> parameter is invoked once after <ph id="ph2">`dueTime`</ph> elapses, and thereafter each time the <ph id="ph3">`period`</ph> time interval elapses.</source>
          <target state="translated">によって指定されたデリゲート、<ph id="ph1">`callback`</ph>パラメーターが後に 1 回呼び出される<ph id="ph2">`dueTime`</ph>が経過すると、およびたびにその後、<ph id="ph3">`period`</ph>間隔が経過するまでの時間します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>If <ph id="ph1">`dueTime`</ph> is zero (0), <ph id="ph2">`callback`</ph> is invoked immediately.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>はゼロ (0)<ph id="ph2">`callback`</ph>が即座に呼び出されます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>If <ph id="ph1">`dueTime`</ph> is <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">`callback`</ph> is not invoked; the timer is disabled, but can be re-enabled by calling the <ph id="ph4">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>は<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>、<ph id="ph3">`callback`</ph>は呼び出されません。 タイマー無効ですが、呼び出すことにより再度有効にすることができます、<ph id="ph4">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <ph id="ph2">`callback`</ph> delegate executes at intervals defined by the resolution of the system clock if <ph id="ph3">`period`</ph> is less than the resolution of the system clock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph>クラスには、システム クロック、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒であると同じ解像度、<ph id="ph2">`callback`</ph>場合、システム クロックの解像度によって定義された間隔で実行されるデリゲート<ph id="ph3">`period`</ph>が、システム クロックの解像度よりも小さいです。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>If <ph id="ph1">`period`</ph> is zero (0) or <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">`dueTime`</ph> is not <ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">`callback`</ph> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <ph id="ph6">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">`period`</ph>はゼロ (0) または<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>と<ph id="ph3">`dueTime`</ph>は<ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>、<ph id="ph5">`callback`</ph>が呼び出される 1 回; タイマーの定期的な動作無効ですが、有効にできますを使用して、<ph id="ph6">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>The method specified for <ph id="ph1">`callback`</ph> should be reentrant, because it is called on <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.</source>
          <target state="translated">指定されたメソッド<ph id="ph1">`callback`</ph>で呼び出されるために、再入可能でなければなりません<ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</source>
          <target state="translated">メソッドは、タイマーの間隔が、メソッドの実行に必要な時間より小さい場合、またはすべてのスレッド プール スレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>The <ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> or <ph id="ph2">&lt;paramref name="period" /&gt;</ph> parameter is negative and is not equal to <ph id="ph3">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="period" /&gt;</ph> パラメーターが負の値であり、<ph id="ph3">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> と等しくありません。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
          <source>The <ph id="ph1">&lt;paramref name="callback" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="T:System.Threading.Timer">
          <source>Changes the start time and the interval between method invocations for a timer.</source>
          <target state="translated">タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>The amount of time to delay before the invoking the callback method specified when the <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> was constructed, in milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to prevent the timer from restarting.</source>
          <target state="translated">タイマーが再開されないようにする <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>Specify zero (0) to restart the timer immediately.</source>
          <target state="translated">0 を指定して、タイマーをすぐに再開します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>The time interval between invocations of the callback method specified when the <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> was constructed, in milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to disable periodic signaling.</source>
          <target state="translated">周期的なシグナル通知を無効にする <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</source>
          <target state="translated">時間間隔を計るために 32 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the timer was successfully updated; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">タイマーが正常に更新された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>The callback method is invoked once after <ph id="ph1">`dueTime`</ph> elapses, and thereafter each time the time interval specified by <ph id="ph2">`period`</ph> elapses.</source>
          <target state="translated">コールバック メソッドの呼び出し後に 1 回<ph id="ph1">`dueTime`</ph>が経過すると、および各その後で指定された時間間隔の時間を<ph id="ph2">`period`</ph>が経過しました。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>If <ph id="ph1">`dueTime`</ph> is zero (0), the callback method is invoked immediately.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>ゼロ (0) は、すぐにコールバック メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>If <ph id="ph1">`dueTime`</ph> is <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <ph id="ph3">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id="ph4">`dueTime`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>は<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>できますが、コールバック メソッドが呼び出されることはありません。 タイマーを無効にすると、再度呼び出すことによって有効にする<ph id="ph3">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>の正の値を指定すると<ph id="ph4">`dueTime`</ph>です。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>If <ph id="ph1">`period`</ph> is zero (0) or <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">`dueTime`</ph> is not <ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <ph id="ph5">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id="ph6">`period`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`period`</ph>はゼロ (0) または<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>、および<ph id="ph3">`dueTime`</ph>は<ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>できますが、コールバック メソッドは 1 回呼び出されます。 タイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする<ph id="ph5">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>の正の値を指定すると<ph id="ph6">`period`</ph>です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method can be called from the <ph id="ph2">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>からメソッドを呼び出すことができます、<ph id="ph2">&lt;xref:System.Threading.TimerCallback&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>The following code example demonstrates how to start a <ph id="ph1">`Timer`</ph> and, after a set number of invocations, change its period.</source>
          <target state="translated">次のコード例を開始する方法を示しています、<ph id="ph1">`Timer`</ph>と、設定された数の呼び出し後の期間を変更します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> has already been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> が既に破棄されています。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> or <ph id="ph2">&lt;paramref name="period" /&gt;</ph> parameter is negative and is not equal to <ph id="ph3">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="period" /&gt;</ph> パラメーターが負の値であり、<ph id="ph3">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> と等しくありません。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>The amount of time to delay before the invoking the callback method specified when the <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> was constructed, in milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to prevent the timer from restarting.</source>
          <target state="translated">タイマーが再開されないようにする <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>Specify zero (0) to restart the timer immediately.</source>
          <target state="translated">0 を指定して、タイマーをすぐに再開します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>The time interval between invocations of the callback method specified when the <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> was constructed, in milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to disable periodic signaling.</source>
          <target state="translated">周期的なシグナル通知を無効にする <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</source>
          <target state="translated">時間間隔を計るために 64 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the timer was successfully updated; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">タイマーが正常に更新された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>The callback method is invoked once after <ph id="ph1">`dueTime`</ph> elapses, and thereafter each time the time interval specified by <ph id="ph2">`period`</ph> elapses.</source>
          <target state="translated">コールバック メソッドの呼び出し後に 1 回<ph id="ph1">`dueTime`</ph>が経過すると、および各その後で指定された時間間隔の時間を<ph id="ph2">`period`</ph>が経過しました。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>If <ph id="ph1">`dueTime`</ph> is zero (0), the callback method is invoked immediately.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>ゼロ (0) は、すぐにコールバック メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>If <ph id="ph1">`dueTime`</ph> is <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <ph id="ph3">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id="ph4">`dueTime`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>は<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>できますが、コールバック メソッドが呼び出されることはありません。 タイマーを無効にすると、再度呼び出すことによって有効にする<ph id="ph3">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>の正の値を指定すると<ph id="ph4">`dueTime`</ph>です。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>If <ph id="ph1">`period`</ph> is zero (0) or <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">`dueTime`</ph> is not <ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <ph id="ph5">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id="ph6">`period`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`period`</ph>はゼロ (0) または<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>、および<ph id="ph3">`dueTime`</ph>は<ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>できますが、コールバック メソッドは 1 回呼び出されます。 タイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする<ph id="ph5">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>の正の値を指定すると<ph id="ph6">`period`</ph>です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method can be called from the <ph id="ph2">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>からメソッドを呼び出すことができます、<ph id="ph2">&lt;xref:System.Threading.TimerCallback&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> has already been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> が既に破棄されています。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> or <ph id="ph2">&lt;paramref name="period" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="period" /&gt;</ph> パラメーターが -1 未満です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> or <ph id="ph2">&lt;paramref name="period" /&gt;</ph> parameter is greater than 4294967294.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="period" /&gt;</ph> パラメーターが 4294967294 より大きい値です。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> representing the amount of time to delay before invoking the callback method specified when the <ph id="ph2">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> was constructed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> は、<ph id="ph2">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> の構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間を表します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>Specify negative one (-1) milliseconds to prevent the timer from restarting.</source>
          <target state="translated">タイマーが再開されないようにする -1 を指定します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>Specify zero (0) to restart the timer immediately.</source>
          <target state="translated">0 を指定して、タイマーをすぐに再開します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>The time interval between invocations of the callback method specified when the <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> was constructed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> の構築時に指定されたコールバック メソッドを呼び出す時間間隔。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>Specify negative one (-1) milliseconds to disable periodic signaling.</source>
          <target state="translated">-1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>Changes the start time and the interval between method invocations for a timer, using <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> values to measure time intervals.</source>
          <target state="translated">時間間隔を計るために <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 値を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the timer was successfully updated; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">タイマーが正常に更新された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>The callback method is invoked once after <ph id="ph1">`dueTime`</ph> elapses, and thereafter each time the time interval specified by <ph id="ph2">`period`</ph> elapses.</source>
          <target state="translated">コールバック メソッドの呼び出し後に 1 回<ph id="ph1">`dueTime`</ph>が経過すると、および各その後で指定された時間間隔の時間を<ph id="ph2">`period`</ph>が経過しました。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>If <ph id="ph1">`dueTime`</ph> is zero (0), the callback method is invoked immediately.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>ゼロ (0) は、すぐにコールバック メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>If <ph id="ph1">`dueTime`</ph> is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <ph id="ph2">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id="ph3">`dueTime`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>負の値の-1 ミリ秒、コールバック メソッドが呼び出されることはありません; タイマーが無効になっていることができますが再度呼び出すことによって有効にする<ph id="ph2">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>の正の値を指定して<ph id="ph3">`dueTime`</ph>です。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>If <ph id="ph1">`period`</ph> is zero (0) or negative one (-1) milliseconds, and <ph id="ph2">`dueTime`</ph> is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <ph id="ph3">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a value greater than zero for <ph id="ph4">`period`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`period`</ph>はゼロ (0) または負 (-1) 1 つ (ミリ秒単位) と<ph id="ph2">`dueTime`</ph>が正の値、コールバック メソッドは 1 回呼び出されます。 タイマーの定期的な動作は無効になりますが、呼び出すことにより再度有効にすることができます<ph id="ph3">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>を 0 より大きい値を指定すると<ph id="ph4">`period`</ph>です。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method can be called from the <ph id="ph2">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>からメソッドを呼び出すことができます、<ph id="ph2">&lt;xref:System.Threading.TimerCallback&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>The following code example demonstrates how to start a <ph id="ph1">`Timer`</ph> and, after a set number of invocations, change its period.</source>
          <target state="translated">次のコード例を開始する方法を示しています、<ph id="ph1">`Timer`</ph>と、設定された数の呼び出し後の期間を変更します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> has already been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> が既に破棄されています。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> or <ph id="ph2">&lt;paramref name="period" /&gt;</ph> parameter, in milliseconds, is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="period" /&gt;</ph> パラメーターが -1 未満です (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> or <ph id="ph2">&lt;paramref name="period" /&gt;</ph> parameter, in milliseconds, is greater than 4294967294.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dueTime" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="period" /&gt;</ph> パラメーターが 4294967294 より大きい値です (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>The amount of time to delay before the invoking the callback method specified when the <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> was constructed, in milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> 構築時に指定されたコールバック メソッドを呼び出す前に遅延する時間 (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to prevent the timer from restarting.</source>
          <target state="translated">タイマーが再開されないようにする <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>Specify zero (0) to restart the timer immediately.</source>
          <target state="translated">0 を指定して、タイマーをすぐに再開します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>The time interval between invocations of the callback method specified when the <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> was constructed, in milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> の構築時に指定されたコールバック メソッドを呼び出す間隔の時間 (ミリ秒単位)。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>Specify <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> to disable periodic signaling.</source>
          <target state="translated">周期的なシグナル通知を無効にする <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> を指定します。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</source>
          <target state="translated">時間間隔を計るために 32 ビット符号なし整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the timer was successfully updated; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">タイマーが正常に更新された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>The callback method is invoked once after <ph id="ph1">`dueTime`</ph> elapses, and thereafter each time the time interval specified by <ph id="ph2">`period`</ph> elapses.</source>
          <target state="translated">コールバック メソッドの呼び出し後に 1 回<ph id="ph1">`dueTime`</ph>が経過すると、および各その後で指定された時間間隔の時間を<ph id="ph2">`period`</ph>が経過しました。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>If <ph id="ph1">`dueTime`</ph> is zero (0), the callback method is invoked immediately.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>ゼロ (0) は、すぐにコールバック メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>If <ph id="ph1">`dueTime`</ph> is <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <ph id="ph3">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id="ph4">`dueTime`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`dueTime`</ph>は<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>できますが、コールバック メソッドが呼び出されることはありません。 タイマーを無効にすると、再度呼び出すことによって有効にする<ph id="ph3">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>の正の値を指定すると<ph id="ph4">`dueTime`</ph>です。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>If <ph id="ph1">`period`</ph> is zero (0) or <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">`dueTime`</ph> is not <ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <ph id="ph5">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id="ph6">`period`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`period`</ph>はゼロ (0) または<ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>、および<ph id="ph3">`dueTime`</ph>は<ph id="ph4">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>できますが、コールバック メソッドは 1 回呼び出されます。 タイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする<ph id="ph5">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>の正の値を指定すると<ph id="ph6">`period`</ph>です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method can be called from the <ph id="ph2">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>からメソッドを呼び出すことができます、<ph id="ph2">&lt;xref:System.Threading.TimerCallback&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> has already been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> が既に破棄されています。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="T:System.Threading.Timer">
          <source>Releases all resources used by the current instance of <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> の現在のインスタンスによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Dispose">
          <source>Releases all resources used by the current instance of <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> の現在のインスタンスによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Dispose">
          <source>Calling <ph id="ph1">`Dispose`</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.Threading.Timer&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">呼び出す<ph id="ph1">`Dispose`</ph>によりによって使用されるリソース、<ph id="ph2">&lt;xref:System.Threading.Timer&gt;</ph>を他の目的に再割り当てされます。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Dispose">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">`Dispose`</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Dispose">
          <source>Callbacks can occur after the <ph id="ph1">&lt;xref:System.Threading.Timer.Dispose&gt;</ph> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</source>
          <target state="translated">コールバックが後に発生することが、<ph id="ph1">&lt;xref:System.Threading.Timer.Dispose&gt;</ph>メソッドのオーバー ロードが呼び出されたため、タイマー キューにスレッド プールのスレッドでコールバックを実行します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Dispose">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> method overload to wait until all callbacks have completed.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph>メソッドのオーバー ロードは、すべてのコールバックが完了するまで待機します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Dispose">
          <source>The following code example shows how to free the resources held by a <ph id="ph1">`Timer`</ph>.</source>
          <target state="translated">次のコード例によって保持されているリソースを解放する方法を示しています、<ph id="ph1">`Timer`</ph>です。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to be signaled when the <ph id="ph2">&lt;see langword="Timer" /&gt;</ph> has been disposed of.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="Timer" /&gt;</ph> が破棄されたことが通知される <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
          <source>Releases all resources used by the current instance of <ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> and signals when the timer has been disposed of.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Timer" /&gt;</ph> の現在のインスタンスによって使用されているすべてのリソースを解放し、タイマーが破棄されたときに通知します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the function succeeds; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">関数が成功した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
          <source>Calling <ph id="ph1">`Dispose`</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.Threading.Timer&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">呼び出す<ph id="ph1">`Dispose`</ph>によりによって使用されるリソース、<ph id="ph2">&lt;xref:System.Threading.Timer&gt;</ph>を他の目的に再割り当てされます。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">`Dispose`</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
          <source>When this method completes, it signals the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> specified by the <ph id="ph2">`notifyObject`</ph> parameter.Use this overload of the <ph id="ph3">&lt;xref:System.Threading.Timer.Dispose%2A&gt;</ph> method if you want to be able to block until you are certain that the timer has been disposed.</source>
          <target state="translated">このメソッドの完了時、通知、<ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph>によって指定された、<ph id="ph2">`notifyObject`</ph>パラメーター。このオーバー ロードを使用して、<ph id="ph3">&lt;xref:System.Threading.Timer.Dispose%2A&gt;</ph>メソッドが、タイマーが破棄されていないことを確実になるまでブロックしたい場合。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
          <source>The timer is not disposed until all currently queued callbacks have completed.</source>
          <target state="translated">現在キューに置かれたすべてのコールバックが完了するまで、タイマーが破棄されていません。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
          <source>If the callback uses the <ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method to set the <ph id="ph2">`dueTime`</ph> parameter to zero, a race condition can occur when the <ph id="ph3">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> method overload is called: If the timer queues a new callback before the <ph id="ph4">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> method overload detects that there are no callbacks queued, <ph id="ph5">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <ph id="ph6">&lt;xref:System.ObjectDisposedException&gt;</ph> is thrown when the new callback calls the <ph id="ph7">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.</source>
          <target state="translated">コールバックで使用する場合、<ph id="ph1">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>を設定するメソッド、<ph id="ph2">`dueTime`</ph>競合状態が発生するパラメーターを 0、ときに、<ph id="ph3">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph>メソッドのオーバー ロードが呼び出されます: 場合は、タイマー キューに配置する前に、新しいコールバック、<ph id="ph4">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph>コールバック キューに置かれませんはメソッドのオーバー ロードを検出<ph id="ph5">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph>ブロックです。 引き続き、新しいコールバックはキューに配置されているときに、それ以外の場合、タイマーが破棄される<ph id="ph6">&lt;xref:System.ObjectDisposedException&gt;</ph>、新しいコールバックを呼び出す場合にスローされる、<ph id="ph7">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
          <source>The <ph id="ph1">&lt;paramref name="notifyObject" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="notifyObject" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>