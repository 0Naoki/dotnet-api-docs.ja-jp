<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="701e103adf3ab9ec55715a289f91d30417501770" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70567433" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type RegisteredWaitHandle = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> を呼び出すときに登録されたハンドルを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、を<xref:System.Threading.RegisteredWaitHandle>使用して、コールバックメソッドが呼び出される理由、および待機ハンドルがシグナル状態になったためにコールバックが発生した場合にタスクを登録解除する方法を示しています。  
  
 また、この例では、指定<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>された待機ハンドルがシグナル状態になったときに、メソッドを使用して指定されたコールバックメソッドを実行する方法も示しています。 この例では`WaitProc`、コールバックメソッドはで、待機ハンドル<xref:System.Threading.AutoResetEvent>はです。  
  
 この例では`TaskInfo` 、実行時にコールバックに渡される情報を保持するクラスを定義します。 この例では`TaskInfo` 、オブジェクトを作成し、いくつかの文字列データを割り当てます。 メソッドに <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> よって返さ`TaskInfo` れるは <xref:System.Threading.RegisteredWaitHandle> 、コールバックメソッドがにアクセスできるように、オブジェクトのフィールドに割り当てられます。 `Handle`  <xref:System.Threading.RegisteredWaitHandle>  
  
 コールバックメソッドに`TaskInfo`渡すオブジェクトとしてを指定するだけでなく、 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>メソッドの呼び出しでは<xref:System.Threading.AutoResetEvent> 、タスクが`WaitProc`待機<xref:System.Threading.WaitOrTimerCallback>する、コールバックメソッドを表すデリゲート、1秒間のタイムアウト間隔と複数のコールバック。  
  
 メインスレッドが<xref:System.Threading.AutoResetEvent> <xref:System.Threading.EventWaitHandle.Set%2A>メソッドを<xref:System.Threading.WaitOrTimerCallback>呼び出すことによってを通知すると、デリゲートが呼び出されます。 メソッド`WaitProc`は、 <xref:System.Threading.RegisteredWaitHandle>タイムアウトが発生したかどうかを判断するためにテストを行います。 待機ハンドルがシグナル状態になったためにコールバックが`WaitProc`呼び出された<xref:System.Threading.RegisteredWaitHandle>場合、メソッドはを登録解除し、追加のコールバックを停止します。 タイムアウトの場合、タスクは待機を続けます。 メソッド`WaitProc`は、メッセージをコンソールに出力することによって終了します。  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">マネージド スレッド プール</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~RegisteredWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!RegisteredWaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="registeredWaitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister (waitObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister(System::Threading::WaitHandle ^ waitObject);" />
      <MemberSignature Language="F#" Value="member this.Unregister : System.Threading.WaitHandle -&gt; bool" Usage="registeredWaitHandle.Unregister waitObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject">シグナル状態になる <see cref="T:System.Threading.WaitHandle" />。</param>
        <summary><see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> メソッドで実行した登録済みの待機操作を取り消します。</summary>
        <returns>関数が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 を`waitObject`指定した場合、が正常に登録<xref:System.Threading.RegisteredWaitHandle>解除された場合にのみ通知されます。 実行時に<xref:System.Threading.RegisteredWaitHandle.Unregister%2A>コールバックメソッドが実行中で`waitObject`ある場合、は、コールバックメソッドが完了するまで通知されません。 特に、コールバックメソッドを実行<xref:System.Threading.RegisteredWaitHandle.Unregister%2A>する`waitObject`と、コールバックメソッドが完了するまで、は通知されません。  
  
   
  
## Examples  
 次の例は、 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>メソッドを使用して、待機ハンドルがシグナル状態になったためにコールバックが発生した場合にタスクの登録を解除する方法を示しています。  
  
 また、この例では、指定<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>された待機ハンドルがシグナル状態になったときに、メソッドを使用して指定されたコールバックメソッドを実行する方法も示しています。 この例では`WaitProc`、コールバックメソッドはで、待機ハンドル<xref:System.Threading.AutoResetEvent>はです。  
  
 この例では`TaskInfo` 、実行時にコールバックに渡される情報を保持するクラスを定義します。 この例では`TaskInfo` 、オブジェクトを作成し、いくつかの文字列データを割り当てます。 メソッドに <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> よって返さ`TaskInfo` れるは <xref:System.Threading.RegisteredWaitHandle> 、コールバックメソッドがにアクセスできるように、オブジェクトのフィールドに割り当てられます。 `Handle`  <xref:System.Threading.RegisteredWaitHandle>  
  
 コールバックメソッドに`TaskInfo`渡すオブジェクトとしてを指定するだけでなく、 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>メソッドの呼び出しでは<xref:System.Threading.AutoResetEvent> 、タスクが`WaitProc`待機<xref:System.Threading.WaitOrTimerCallback>する、コールバックメソッドを表すデリゲート、1秒間のタイムアウト間隔と複数のコールバック。  
  
 メインスレッドが<xref:System.Threading.AutoResetEvent> <xref:System.Threading.EventWaitHandle.Set%2A>メソッドを<xref:System.Threading.WaitOrTimerCallback>呼び出すことによってを通知すると、デリゲートが呼び出されます。 メソッド`WaitProc`は、 <xref:System.Threading.RegisteredWaitHandle>タイムアウトが発生したかどうかを判断するためにテストを行います。 待機ハンドルがシグナル状態になったためにコールバックが`WaitProc`呼び出された<xref:System.Threading.RegisteredWaitHandle>場合、メソッドはを登録解除し、追加のコールバックを停止します。 タイムアウトの場合、タスクは待機を続けます。 メソッド`WaitProc`は、メッセージをコンソールに出力することによって終了します。  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">マネージド スレッド プール</related>
      </Docs>
    </Member>
  </Members>
</Type>
