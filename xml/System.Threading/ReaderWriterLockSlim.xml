<Type Name="ReaderWriterLockSlim" FullName="System.Threading.ReaderWriterLockSlim">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2ff770bb9446d6ebe71649784ebe115f60734cc0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531356" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReaderWriterLockSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLockSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class ReaderWriterLockSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLockSlim : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="3d44c-101">リソースへのアクセス管理に使用するロックを表し、複数のスレッドによる読み取りや排他アクセスでの書き込みを許可します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3d44c-101">Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-102">使用して<xref:System.Threading.ReaderWriterLockSlim>を複数のスレッドによって読み取られ、一度に 1 つのスレッドによって書き込まれるされるリソースを保護します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-102">Use <xref:System.Threading.ReaderWriterLockSlim> to protect a resource that is read by multiple threads and written to by one thread at a time.</span></span> <span data-ttu-id="3d44c-103"><xref:System.Threading.ReaderWriterLockSlim> 複数のスレッドが読み取りモードである、1 つのスレッドで、ロックの排他的所有権書き込みモードに設定することができますできれたり、元のスレッドが解放することがなく 書き込みモードにアップグレードできます内にある読み取りアクセス権を持つ 1 つのスレッドs は、リソースへのアクセスを読み取る。</span><span class="sxs-lookup"><span data-stu-id="3d44c-103"><xref:System.Threading.ReaderWriterLockSlim> allows multiple threads to be in read mode, allows one thread to be in write mode with exclusive ownership of the lock, and allows one thread that has read access to be in upgradeable read mode, from which the thread can upgrade to write mode without having to relinquish its read access to the resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-104"><xref:System.Threading.ReaderWriterLockSlim> は <xref:System.Threading.ReaderWriterLock> と似ていますが、再帰の規則や、ロック状態のアップグレードおよびダウングレードの規則が簡素化されています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="3d44c-105"><xref:System.Threading.ReaderWriterLockSlim> は、デッドロックの可能性を大幅に回避します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="3d44c-106">さらに、<xref:System.Threading.ReaderWriterLockSlim> のパフォーマンスは <xref:System.Threading.ReaderWriterLock> と比較して格段に優れています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="3d44c-107">すべての新規開発で、<xref:System.Threading.ReaderWriterLockSlim> を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-107"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span>  
  
 <span data-ttu-id="3d44c-108">既定では、新しいインスタンス<xref:System.Threading.ReaderWriterLockSlim>で作成された、<xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>フラグ、再帰はできません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-108">By default, new instances of <xref:System.Threading.ReaderWriterLockSlim> are created with the <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> flag and do not allow recursion.</span></span> <span data-ttu-id="3d44c-109">再帰が不要な複雑さの一部を紹介し、により、コードのデッドロックを受けやすいために、すべての新しい開発では、この既定のポリシーがお勧めします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-109">This default policy is recommended for all new development, because recursion introduces unnecessary complications and makes your code more prone to deadlocks.</span></span> <span data-ttu-id="3d44c-110">既存のファイルからの移行が簡単に使用するをプロジェクト<xref:System.Threading.Monitor>または<xref:System.Threading.ReaderWriterLock>、使用することができます、<xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>のインスタンスを作成フラグ<xref:System.Threading.ReaderWriterLockSlim>再帰可能にします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-110">To simplify migration from existing projects that use <xref:System.Threading.Monitor> or <xref:System.Threading.ReaderWriterLock>, you can use the <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> flag to create instances of <xref:System.Threading.ReaderWriterLockSlim> that allow recursion.</span></span>  
  
 <span data-ttu-id="3d44c-111">スレッドは 3 つのモードでロックに入ることができます。 モード、書き込みモードでは、読み取りモードに入るを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-111">A thread can enter the lock in three modes: read mode, write mode, and upgradeable read mode.</span></span> <span data-ttu-id="3d44c-112">(このトピックの残りの部分で「アップグレード可能な読み取りモード」と呼びます「アップグレード可能モード」と"入力`x`モード"長い語句が %nd2 に関して使用"でロックに入る`x`モード"です)。</span><span class="sxs-lookup"><span data-stu-id="3d44c-112">(In the rest of this topic, "upgradeable read mode" is referred to as "upgradeable mode", and the phrase "enter `x` mode" is used in preference to the longer phrase "enter the lock in `x` mode".)</span></span>  
  
 <span data-ttu-id="3d44c-113">再帰ポリシーに関係なく 1 つだけことができるスレッド書き込みモードでいつでもできます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-113">Regardless of recursion policy, only one thread can be in write mode at any time.</span></span> <span data-ttu-id="3d44c-114">スレッドが書き込みモードでは、他のスレッドできますなしでロックに入るいずれかのモード。</span><span class="sxs-lookup"><span data-stu-id="3d44c-114">When a thread is in write mode, no other thread can enter the lock in any mode.</span></span> <span data-ttu-id="3d44c-115">1 つのスレッドをいつでもアップグレード可能モードにできます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-115">Only one thread can be in upgradeable mode at any time.</span></span> <span data-ttu-id="3d44c-116">任意の数のスレッドのことができます、読み取りモードでできが 1 つのスレッド アップグレード可能モードで他のスレッドが読み取りモードでします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-116">Any number of threads can be in read mode, and there can be one thread in upgradeable mode while other threads are in read mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3d44c-117">この型は、<xref:System.IDisposable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-117">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="3d44c-118">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-118">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="3d44c-119">型の直接 dispose を呼び出す、<xref:System.IDisposable.Dispose%2A>メソッドで、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-119">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="3d44c-120">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(C# の場合) または`Using`(Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="3d44c-120">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="3d44c-121">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="3d44c-121">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="3d44c-122"><xref:System.Threading.ReaderWriterLockSlim> スレッド アフィニティを管理します。つまり、各<xref:System.Threading.Thread>オブジェクトを入力し、ロック モードを終了する独自のメソッド呼び出しを行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-122"><xref:System.Threading.ReaderWriterLockSlim> has managed thread affinity; that is, each <xref:System.Threading.Thread> object must make its own method calls to enter and exit lock modes.</span></span> <span data-ttu-id="3d44c-123">別のスレッドのモードに変更できますスレッドはありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-123">No thread can change the mode of another thread.</span></span>  
  
 <span data-ttu-id="3d44c-124">場合、<xref:System.Threading.ReaderWriterLockSlim>再帰では、ロックに入るしようがいくつかの理由をブロックできますスレッドではできません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-124">If a <xref:System.Threading.ReaderWriterLockSlim> does not allow recursion, a thread that tries to enter the lock can block for several reasons:</span></span>  
  
-   <span data-ttu-id="3d44c-125">スレッドが書き込みモードまたは書き込みモードで 1 つのスレッドがあるかどうかの入力を待機している場合は、読み取りモードのブロックを入力しようとするスレッド。</span><span class="sxs-lookup"><span data-stu-id="3d44c-125">A thread that tries to enter read mode blocks if there are threads waiting to enter write mode or if there is a single thread in write mode.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="3d44c-126">ライターがキューに置かれたときに、新しいリーダーをブロックは、書き込みを優先するロックの公平性ポリシーです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-126">Blocking new readers when writers are queued is a lock fairness policy that favors writers.</span></span> <span data-ttu-id="3d44c-127">現在の公平性ポリシーは、最も一般的なシナリオでのスループットを昇格するには、リーダーとライターに公平性を分散します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-127">The current fairness policy balances fairness to readers and writers, to promote throughput in the most common scenarios.</span></span> <span data-ttu-id="3d44c-128">将来のバージョン、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]公平性の新しいポリシーを引き起こす可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-128">Future versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] may introduce new fairness policies.</span></span>  
  
-   <span data-ttu-id="3d44c-129">既にある場合、スレッド アップグレード可能モードでスレッドが書き込みモードに入るを待機している場合、または 1 つのスレッドが書き込みモードである場合、アップグレード可能モードのブロックを入力しようとするスレッド。</span><span class="sxs-lookup"><span data-stu-id="3d44c-129">A thread that tries to enter upgradeable mode blocks if there is already a thread in upgradeable mode, if there are threads waiting to enter write mode, or if there is a single thread in write mode.</span></span>  
  
-   <span data-ttu-id="3d44c-130">3 つのモードのいずれかのスレッドがある場合は、書き込みモードのブロックを入力しようとするスレッド。</span><span class="sxs-lookup"><span data-stu-id="3d44c-130">A thread that tries to enter write mode blocks if there is a thread in any of the three modes.</span></span>  
  
## <a name="upgrading-and-downgrading-locks"></a><span data-ttu-id="3d44c-131">アップグレードとダウン グレードのロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-131">Upgrading and Downgrading Locks</span></span>  
 <span data-ttu-id="3d44c-132">アップグレード可能モードは、ここで、スレッドは、通常、保護されたリソースから読み取ります。 ケースが、いくつかの条件が満たされた場合は、書き込みをする必要があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-132">Upgradeable mode is intended for cases where a thread usually reads from the protected resource, but might need to write to it if some condition is met.</span></span> <span data-ttu-id="3d44c-133">入力した、スレッド、<xref:System.Threading.ReaderWriterLockSlim>アップグレード可能モードでは、保護されたリソースへの読み取りアクセスと書き込みを呼び出してモードにアップグレードできます、<xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A>または<xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-133">A thread that has entered a <xref:System.Threading.ReaderWriterLockSlim> in upgradeable mode has read access to the protected resource, and can upgrade to write mode by calling the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> methods.</span></span> <span data-ttu-id="3d44c-134">存在できないためだけに 1 つのスレッド アップグレード可能モードで、一度に、書き込みモードにアップグレードすることはできませんデッドロックの再帰が許可されていない場合、これは、既定のポリシー。</span><span class="sxs-lookup"><span data-stu-id="3d44c-134">Because there can be only one thread in upgradeable mode at a time, upgrading to write mode cannot deadlock when recursion is not allowed, which is the default policy.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3d44c-135">再帰ポリシーに関係なく、最初に入力した読み取りスレッド パターンでは、デッドロックの可能性が作成されるため、アップグレード可能モードまたは、書き込みモードにアップグレードするモードが使用できません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-135">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span> <span data-ttu-id="3d44c-136">たとえば、両方を入力しよう読み取りモードで 2 つのスレッドは書き込みモード場合、デッドロックは発生します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-136">For example, if two threads in read mode both try to enter write mode, they will deadlock.</span></span> <span data-ttu-id="3d44c-137">アップグレード可能モードは、このようなデッドロックを回避するよう設計されています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-137">Upgradeable mode is designed to avoid such deadlocks.</span></span>  
  
 <span data-ttu-id="3d44c-138">ブロックのアップグレードは、スレッド、読み取りモードに他のスレッドがある場合です。</span><span class="sxs-lookup"><span data-stu-id="3d44c-138">If there are other threads in read mode, the thread that is upgrading blocks.</span></span> <span data-ttu-id="3d44c-139">スレッドがブロックされている間は、読み取りモードに入るしようとする他のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-139">While the thread is blocked, other threads that try to enter read mode are blocked.</span></span> <span data-ttu-id="3d44c-140">終了するとすべてのスレッドが読み取りモードから、ブロックされているアップグレード可能なスレッドが書き込みモードに入ります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-140">When all threads have exited from read mode, the blocked upgradeable thread enters write mode.</span></span> <span data-ttu-id="3d44c-141">入力を待機している他のスレッドが書き込みモードがある場合、ブロックされたまま、アップグレード可能モードでは、1 つのスレッドが原因で、リソースへの排他アクセスを防ぐためです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-141">If there are other threads waiting to enter write mode, they remain blocked, because the single thread that is in upgradeable mode prevents them from gaining exclusive access to the resource.</span></span>  
  
 <span data-ttu-id="3d44c-142">アップグレード可能モードでスレッドが書き込みモードを終了したときに、ので、入力を待機しているスレッドが書き込みモードである場合を除き、読み取りモードに入るを待機している他のスレッドが実行できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-142">When the thread in upgradeable mode exits write mode, other threads that are waiting to enter read mode can do so, unless there are threads waiting to enter write mode.</span></span> <span data-ttu-id="3d44c-143">アップグレード可能モードでのスレッドでは、アップグレードでき、保護されたリソースを書き込み、唯一のスレッドである限り、無期限にダウン グレードすることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-143">The thread in upgradeable mode can upgrade and downgrade indefinitely, as long as it is the only thread that writes to the protected resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3d44c-144">入力に複数のスレッドを許可する場合は、書き込みモードまたはアップグレード可能モードは、1 つのスレッドがアップグレード可能モードを独占できないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-144">If you allow multiple threads to enter write mode or upgradeable mode, you must not allow one thread to monopolize upgradeable mode.</span></span> <span data-ttu-id="3d44c-145">それ以外の場合、モード直接が無限にブロック、および他のスレッドが読み取りモードに入ることされますがブロックされた入力しようとするスレッドを記述します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-145">Otherwise, threads that try to enter write mode directly will be blocked indefinitely, and while they are blocked, other threads will be unable to enter read mode.</span></span>  
  
 <span data-ttu-id="3d44c-146">アップグレード可能モードでのスレッドは、最初の呼び出しで、読み取りモードにダウン グレードできますが、<xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A>メソッドを呼び出すことで、<xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-146">A thread in upgradeable mode can downgrade to read mode by first calling the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method and then calling the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method.</span></span> <span data-ttu-id="3d44c-147">このダウン グレード パターンがすべてのロック再帰ポリシーも許可されている<xref:System.Threading.LockRecursionPolicy.NoRecursion>です。</span><span class="sxs-lookup"><span data-stu-id="3d44c-147">This downgrade pattern is allowed for all lock recursion policies, even <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span></span>  
  
 <span data-ttu-id="3d44c-148">、読み取りモードにダウン グレードした後、スレッドできません再入力アップグレード可能モード読み取りモードを終了するまでします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-148">After downgrading to read mode, a thread cannot reenter upgradeable mode until it has exited from read mode.</span></span>  
  
## <a name="entering-the-lock-recursively"></a><span data-ttu-id="3d44c-149">再帰的にロックを入力します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-149">Entering the Lock Recursively</span></span>  
 <span data-ttu-id="3d44c-150">作成することができます、<xref:System.Threading.ReaderWriterLockSlim>を使用して再帰的なロックのエントリをサポートする、<xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29>ロック ポリシーを指定することを指定するコンス トラクター<xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="3d44c-150">You can create a <xref:System.Threading.ReaderWriterLockSlim> that supports recursive lock entry by using the <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> constructor that specifies lock policy, and specifying <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-151">新規の開発では、不要な複雑さの一部を紹介し、により、コードのデッドロックを受けやすいために、再帰の使用はお勧めできません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-151">The use of recursion is not recommended for new development, because it introduces unnecessary complications and makes your code more prone to deadlocks.</span></span>  
  
 <span data-ttu-id="3d44c-152"><xref:System.Threading.ReaderWriterLockSlim>再帰を利用できる、スレッドが入力できるモードは、次と言えます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-152">For a <xref:System.Threading.ReaderWriterLockSlim> that allows recursion, the following can be said about the modes a thread can enter:</span></span>  
  
-   <span data-ttu-id="3d44c-153">読み取りモードでのスレッドは読み取りモードを再帰的を入力できますが、書き込みモードか、アップグレード可能モードを入力することはできません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-153">A thread in read mode can enter read mode recursively, but cannot enter write mode or upgradeable mode.</span></span> <span data-ttu-id="3d44c-154">これを行うしようとすると、<xref:System.Threading.LockRecursionException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-154">If it tries to do this, a <xref:System.Threading.LockRecursionException> is thrown.</span></span> <span data-ttu-id="3d44c-155">入力を読み取るモード」と入力して、書き込みモード アップグレード可能モードには、デッドロックの確率が厳密なパターンがあるため、許可されていません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-155">Entering read mode and then entering write mode or upgradeable mode is a pattern with a strong probability of deadlocks, so it is not allowed.</span></span> <span data-ttu-id="3d44c-156">既に説明したように、アップグレード可能モードのロックをアップグレードする必要がある場合は指定できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-156">As discussed earlier, upgradeable mode is provided for cases where it is necessary to upgrade a lock.</span></span>  
  
-   <span data-ttu-id="3d44c-157">アップグレード可能モードでのスレッドは、書き込みモードまたは読み取りモードは、入力できの 3 つのモードの再帰的に入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-157">A thread in upgradeable mode can enter write mode and/or read mode, and can enter any of the three modes recursively.</span></span> <span data-ttu-id="3d44c-158">ただしに入ろうとする、書き込みモード ブロック読み取りモードで他のスレッドがあるかどうか。</span><span class="sxs-lookup"><span data-stu-id="3d44c-158">However, an attempt to enter write mode blocks if there are other threads in read mode.</span></span>  
  
-   <span data-ttu-id="3d44c-159">書き込みモードでのスレッドは読み取りモードやアップグレード可能モードを入力しの 3 つのモードの再帰的に入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-159">A thread in write mode can enter read mode and/or upgradeable mode, and can enter any of the three modes recursively.</span></span>  
  
-   <span data-ttu-id="3d44c-160">ロックに入ったがないことをスレッドには、どのモードを入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-160">A thread that has not entered the lock can enter any mode.</span></span> <span data-ttu-id="3d44c-161">この試行は、非再帰的なロックに入ろうとすると同じ理由でブロックできます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-161">This attempt can block for the same reasons as an attempt to enter a non-recursive lock.</span></span>  
  
 <span data-ttu-id="3d44c-162">スレッドは、何度でも、そのモードに入ったこととまったく同じように各モードを終了する限り、任意の順序でが入ったモードを終了できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-162">A thread can exit the modes it has entered in any order, as long as it exits each mode exactly as many times as it entered that mode.</span></span> <span data-ttu-id="3d44c-163">スレッドの試行回数が多すぎますモードを終了するかがない入力モードを終了する場合、<xref:System.Threading.SynchronizationLockException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-163">If a thread tries to exit a mode too many times, or to exit a mode it has not entered, a <xref:System.Threading.SynchronizationLockException> is thrown.</span></span>  
  
## <a name="lock-states"></a><span data-ttu-id="3d44c-164">ロックの状態</span><span class="sxs-lookup"><span data-stu-id="3d44c-164">Lock States</span></span>  
 <span data-ttu-id="3d44c-165">ロックの状態の観点で考えるとわかりやすくすることもあります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-165">You may find it useful to think of the lock in terms of its states.</span></span> <span data-ttu-id="3d44c-166">A <xref:System.Threading.ReaderWriterLockSlim> 4 つの状態のいずれかになります: 入力されていない、読み取り、アップグレード、および記述します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-166">A <xref:System.Threading.ReaderWriterLockSlim> can be in one of four states: not entered, read, upgrade, and write.</span></span>  
  
-   <span data-ttu-id="3d44c-167">入力されていません。 この状態で、スレッド ロックに入ったありません (またはすべてのスレッドがロックを終了)。</span><span class="sxs-lookup"><span data-stu-id="3d44c-167">Not entered: In this state, no threads have entered the lock (or all threads have exited the lock).</span></span>  
  
-   <span data-ttu-id="3d44c-168">お読みください: この状態で、1 つまたは複数のスレッド ロックに入った読み取りアクセスで保護されたリソースにします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-168">Read: In this state, one or more threads have entered the lock for read access to the protected resource.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="3d44c-169">スレッドを使用して読み取りモードでロックを入力することができます、<xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A>または<xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A>メソッド、またはアップグレード可能モードからダウン グレードしています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-169">A thread can enter the lock in read mode by using the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> methods, or by downgrading from upgradeable mode.</span></span>  
  
-   <span data-ttu-id="3d44c-170">アップグレード: この状態で、1 つのスレッドがロックに入った書き込みのアクセス許可にアップグレードするオプションを使用して、読み取りアクセス用 (つまり、アップグレード可能モードで)、読み取りアクセスでロックに入った 0 個以上のスレッドとします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-170">Upgrade: In this state, one thread has entered the lock for read access with the option to upgrade to write access (that is, in upgradeable mode), and zero or more threads have entered the lock for read access.</span></span> <span data-ttu-id="3d44c-171">一度に 2 つ以上のスレッドが; にアップグレードするオプションでロックに入ることができます。アップグレード可能モードに切り替わるしようとする追加のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-171">No more than one thread at a time can enter the lock with the option to upgrade; additional threads that try to enter upgradeable mode are blocked.</span></span>  
  
-   <span data-ttu-id="3d44c-172">書き込み: この状態で、1 つのスレッドがロックに入った書き込みアクセスの保護されたリソースにします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-172">Write: In this state, one thread has entered the lock for write access to the protected resource.</span></span> <span data-ttu-id="3d44c-173">そのスレッドは、ロックを所有している排他を持っています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-173">That thread has exclusive possession of the lock.</span></span> <span data-ttu-id="3d44c-174">何らかの理由でロックに入るしようとする他のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-174">Any other thread that tries to enter the lock for any reason is blocked.</span></span>  
  
 <span data-ttu-id="3d44c-175">次の表の場合、スレッドは再帰を許可されていないロックのロックの状態間の遷移`t`左端の列に説明されているアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-175">The following table describes the transitions between lock states, for locks that do not allow recursion, when a thread `t` takes the action described in the leftmost column.</span></span> <span data-ttu-id="3d44c-176">時に、その操作を行う`t`モードがありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-176">At the time it takes the action, `t` has no mode.</span></span> <span data-ttu-id="3d44c-177">(という特殊なケース場所`t`では、アップグレード可能モードは、表の脚注に記載されています)。一番上の行では、ロックの開始時の状態について説明します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-177">(The special case where `t` is in upgradeable mode is described in the table footnotes.) The top row describes the starting state of the lock.</span></span> <span data-ttu-id="3d44c-178">セルは、スレッドの処理を説明し、かっこ内にロック状態の変更を表示します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-178">The cells describe what happens to the thread, and show changes to the lock state in parentheses.</span></span>  
  
||<span data-ttu-id="3d44c-179">入っていない (N)</span><span class="sxs-lookup"><span data-stu-id="3d44c-179">Not entered (N)</span></span>|<span data-ttu-id="3d44c-180">Read (R)</span><span class="sxs-lookup"><span data-stu-id="3d44c-180">Read (R)</span></span>|<span data-ttu-id="3d44c-181">アップグレード (U)</span><span class="sxs-lookup"><span data-stu-id="3d44c-181">Upgrade (U)</span></span>|<span data-ttu-id="3d44c-182">書き込み (W)</span><span class="sxs-lookup"><span data-stu-id="3d44c-182">Write (W)</span></span>|  
|-|-----------------------|----------------|-------------------|-----------------|  
|<span data-ttu-id="3d44c-183">`t` 読み取りモードに入ります</span><span class="sxs-lookup"><span data-stu-id="3d44c-183">`t` enters read mode</span></span>|<span data-ttu-id="3d44c-184">`t` (R) を入力します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-184">`t` enters (R).</span></span>|<span data-ttu-id="3d44c-185">`t` スレッドが書き込みモードです。 を待機している場合それ以外の場合、`t`を入力します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-185">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.</span></span>|<span data-ttu-id="3d44c-186">`t` スレッドが書き込みモードです。 を待機している場合それ以外の場合、`t`を入力します<sup>。1</sup></span><span class="sxs-lookup"><span data-stu-id="3d44c-186">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.<sup>1</sup></span></span>|<span data-ttu-id="3d44c-187">`t` ブロックです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-187">`t` blocks.</span></span>|  
|<span data-ttu-id="3d44c-188">`t` アップグレード可能モードに入ります</span><span class="sxs-lookup"><span data-stu-id="3d44c-188">`t` enters upgradeable mode</span></span>|<span data-ttu-id="3d44c-189">`t` (U) を入力します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-189">`t` enters (U).</span></span>|<span data-ttu-id="3d44c-190">`t` スレッドが待機している場合は書き込みモードまたはアップグレード モードです。それ以外の場合、 `t` (U) を入力します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-190">`t` blocks if threads are waiting for write mode or upgrade mode; otherwise, `t` enters (U).</span></span>|<span data-ttu-id="3d44c-191">`t` ブロックです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-191">`t` blocks.</span></span>|<span data-ttu-id="3d44c-192">`t` ブロックです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-192">`t` blocks.</span></span>|  
|<span data-ttu-id="3d44c-193">`t` 書き込みモードに入ります</span><span class="sxs-lookup"><span data-stu-id="3d44c-193">`t` enters write mode</span></span>|<span data-ttu-id="3d44c-194">`t` 入力 (W)。</span><span class="sxs-lookup"><span data-stu-id="3d44c-194">`t` enters (W).</span></span>|<span data-ttu-id="3d44c-195">`t` ブロックです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-195">`t` blocks.</span></span>|<span data-ttu-id="3d44c-196">`t` ブロックです。<sup>2</sup></span><span class="sxs-lookup"><span data-stu-id="3d44c-196">`t` blocks.<sup>2</sup></span></span>|<span data-ttu-id="3d44c-197">`t` ブロックです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-197">`t` blocks.</span></span>|  
  
 <span data-ttu-id="3d44c-198"><sup>1</sup>場合`t`開始アウト アップグレード可能モードで読み取りモードに入ります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-198"><sup>1</sup> If `t` starts out in upgradeable mode, it enters read mode.</span></span> <span data-ttu-id="3d44c-199">このアクションを決してをブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-199">This action never blocks.</span></span> <span data-ttu-id="3d44c-200">ロックの状態は変更されません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-200">The lock state does not change.</span></span> <span data-ttu-id="3d44c-201">(スレッドは、アップグレード可能モードを終了することによって読み取りモードにダウン グレードを完了できますし、)。</span><span class="sxs-lookup"><span data-stu-id="3d44c-201">(The thread can then complete a downgrade to read mode by exiting upgradeable mode.)</span></span>  
  
 <span data-ttu-id="3d44c-202"><sup>2</sup>場合`t`アップグレード可能モードで開始、ブロックのスレッドが読み取りモードである場合。</span><span class="sxs-lookup"><span data-stu-id="3d44c-202"><sup>2</sup> If `t` starts out in upgradeable mode, it blocks if there are threads in read mode.</span></span> <span data-ttu-id="3d44c-203">それ以外の場合、これは書き込みモードにアップグレードします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-203">Otherwise it upgrades to write mode.</span></span> <span data-ttu-id="3d44c-204">ロック状態の変更に書き込み (W)。</span><span class="sxs-lookup"><span data-stu-id="3d44c-204">The lock state changes to Write (W).</span></span> <span data-ttu-id="3d44c-205">場合`t`、読み取りモードでスレッドがブロックの最後のスレッドが読み取りモードを終了するとすぐに書き込みモードに入りますが、入力を待機しているスレッドが書き込みモードである場合でもです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-205">If `t` blocks because there are threads in read mode, it enters write mode as soon as the last thread exits read mode, even if there are threads waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="3d44c-206">スレッドがロックを終了したため、状態の変更が発生したときに起動される次のスレッドがとおりに選択します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-206">When a state change occurs because a thread exits the lock, the next thread to be awakened is selected as follows:</span></span>  
  
-   <span data-ttu-id="3d44c-207">最初を待機しているスレッドは書き込みモードとが既に (あります多くてこのような 1 つのスレッド) アップグレード可能モードでします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-207">First, a thread that is waiting for write mode and is already in upgradeable mode (there can be at most one such thread).</span></span>  
  
-   <span data-ttu-id="3d44c-208">それがない場合は、書き込みモードを待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="3d44c-208">Failing that, a thread that is waiting for write mode.</span></span>  
  
-   <span data-ttu-id="3d44c-209">それがない場合は、アップグレード可能モードを待機しているスレッド。</span><span class="sxs-lookup"><span data-stu-id="3d44c-209">Failing that, a thread that is waiting for upgradeable mode.</span></span>  
  
-   <span data-ttu-id="3d44c-210">読み取りモードを待機しているすべてのスレッドを失敗しています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-210">Failing that, all threads that are waiting for read mode.</span></span>  
  
 <span data-ttu-id="3d44c-211">ロックの後続の状態は常に書き込み (W)、最初の 2 つのケースとアップグレード (U) スレッドの終了に伴って状態の変更をトリガーされたときに、ロックの状態に関係なく、3 番目のケースでします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-211">The subsequent state of the lock is always Write (W) in the first two cases and Upgrade (U) in the third case, regardless of the state of the lock when the exiting thread triggered the state change.</span></span> <span data-ttu-id="3d44c-212">最後の場合、ロックの状態アップグレード (U) ある場合がスレッド アップグレード可能モードで、状態の変更、および Read (R) 後にそれ以外の場合、以前の状態に関係なく。</span><span class="sxs-lookup"><span data-stu-id="3d44c-212">In the last case, the state of the lock is Upgrade (U) if there is a thread in upgradeable mode after the state change, and Read (R) otherwise, regardless of the prior state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-213">次の例では、整数キーを持つ文字列を保持する単純な同期されたキャッシュを示します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-213">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="3d44c-214">インスタンス<xref:System.Threading.ReaderWriterLockSlim>へのアクセスを同期するために使用される、<xref:System.Collections.Generic.Dictionary%602>内部キャッシュとして機能します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-214">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span>  
  
 <span data-ttu-id="3d44c-215">例では、単純なキャッシュへの追加、およびメソッド、キャッシュから削除するキャッシュからの読み取りにはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-215">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="3d44c-216">タイムアウトを示すためには、例には、指定したタイムアウト内で実行可能であれば、キャッシュに追加するメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-216">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="3d44c-217">アップグレード可能モードを示すためは、この例は、キーに関連付けられている値を取得する方法を説明し、新しい値を持つ比較します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-217">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="3d44c-218">値が変更されていない場合は、変更がないことを示すステータスを返します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-218">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="3d44c-219">これは、値が見つからないため、キー、キー/値ペアが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-219">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="3d44c-220">値が変更された場合は更新されます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-220">If the value has changed, it is updated.</span></span> <span data-ttu-id="3d44c-221">アップグレード可能モードでは、スレッドの書き込みアクセスを必要に応じて、デッドロックの危険を回避への読み取りアクセスからのアップグレードを許可します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-221">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="3d44c-222">この例には、アップグレード可能モードを示すメソッドの戻り値を指定する入れ子になった列挙体が含まれています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-222">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="3d44c-223">例では、既定のコンス トラクターを使用して、ロックを作成して、再帰は許可されません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-223">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="3d44c-224">プログラミング、<xref:System.Threading.ReaderWriterLockSlim>はロックで再帰が許可されない場合は、簡単かつエラーが発生しにくくなりました。</span><span class="sxs-lookup"><span data-stu-id="3d44c-224">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="3d44c-225">次のコードで使用して、`SynchronizedCache`野菜名の辞書を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3d44c-225">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="3d44c-226">3 つのタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-226">It creates three tasks.</span></span> <span data-ttu-id="3d44c-227">最初の配列に格納されている野菜の名前を書き込みます、`SynchronizedCache`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="3d44c-227">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="3d44c-228">2 番目と 3 番目のタスクは、野菜、昇順 (低インデックスから最も大きいインデックス)、降順で、2 つ目の最初の名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-228">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="3d44c-229">最後のタスクは、文字列「したきゅうり」を検索し、発見された場合を呼び出して、 <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> "緑 bean"文字列を置換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="3d44c-229">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="3d44c-230">この型はスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3d44c-230">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-231">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-231">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-232">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの新しいインスタンスを既定のプロパティ値で初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-232">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-233">A<xref:System.Threading.ReaderWriterLockSlim>これを初期化するコンス トラクターでは、再帰することはできません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-233">A <xref:System.Threading.ReaderWriterLockSlim> that is initialized with this constructor does not allow recursion.</span></span> <span data-ttu-id="3d44c-234">つまり、<xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> プロパティが <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> を返します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-234">That is, the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property returns <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="3d44c-235">再帰ポリシーとその影響の詳細については、次を参照してください。、<xref:System.Threading.LockRecursionPolicy>列挙型、および<xref:System.Threading.ReaderWriterLockSlim>クラスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-235">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-236">次の例では、整数キーを持つ文字列を保持する単純な同期されたキャッシュを示します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-236">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="3d44c-237">インスタンス<xref:System.Threading.ReaderWriterLockSlim>へのアクセスを同期するために使用される、<xref:System.Collections.Generic.Dictionary%602>内部キャッシュとして機能します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-237">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span> <span data-ttu-id="3d44c-238">パラメーターなしのコンス トラクターを使用して、ロックを作成できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-238">The parameterless constructor is used to create the lock.</span></span>  
  
 <span data-ttu-id="3d44c-239">例では、単純なキャッシュへの追加、およびメソッド、キャッシュから削除するキャッシュからの読み取りにはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-239">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="3d44c-240">タイムアウトを示すためには、例には、指定したタイムアウト内で実行可能であれば、キャッシュに追加するメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-240">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="3d44c-241">アップグレード可能モードを示すためは、この例は、キーに関連付けられている値を取得する方法を説明し、新しい値を持つ比較します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-241">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="3d44c-242">値が変更されていない場合は、変更がないことを示すステータスを返します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-242">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="3d44c-243">これは、値が見つからないため、キー、キー/値ペアが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-243">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="3d44c-244">値が変更された場合は更新されます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-244">If the value has changed, it is updated.</span></span> <span data-ttu-id="3d44c-245">アップグレード可能モードでは、スレッドの書き込みアクセスを必要に応じて、デッドロックの危険を回避への読み取りアクセスからのアップグレードを許可します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-245">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="3d44c-246">この例には、アップグレード可能モードを示すメソッドの戻り値を指定する入れ子になった列挙体が含まれています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-246">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="3d44c-247">例では、既定のコンス トラクターを使用して、ロックを作成して、再帰は許可されません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-247">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="3d44c-248">プログラミング、<xref:System.Threading.ReaderWriterLockSlim>はロックで再帰が許可されない場合は、簡単かつエラーが発生しにくくなりました。</span><span class="sxs-lookup"><span data-stu-id="3d44c-248">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="3d44c-249">次のコードで使用して、`SynchronizedCache`野菜名の辞書を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3d44c-249">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="3d44c-250">3 つのタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-250">It creates three tasks.</span></span> <span data-ttu-id="3d44c-251">最初の配列に格納されている野菜の名前を書き込みます、`SynchronizedCache`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="3d44c-251">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="3d44c-252">2 番目と 3 番目のタスクは、野菜、昇順 (低インデックスから最も大きいインデックス)、降順で、2 つ目の最初の名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-252">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="3d44c-253">最後のタスクは、文字列「したきゅうり」を検索し、発見された場合を呼び出して、 <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> "緑 bean"文字列を置換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="3d44c-253">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim (System.Threading.LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LockRecursionPolicy recursionPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recursionPolicy As LockRecursionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim(System::Threading::LockRecursionPolicy recursionPolicy);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recursionPolicy" Type="System.Threading.LockRecursionPolicy" />
      </Parameters>
      <Docs>
        <param name="recursionPolicy">
          <span data-ttu-id="3d44c-254">ロック再帰ポリシーを指定する列挙値のいずれか。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-254">One of the enumeration values that specifies the lock recursion policy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3d44c-255">ロック再帰ポリシーを指定して、<see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-255">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-256">再帰ポリシーでは、複数回ロックに入るスレッドに関する制限事項を決定します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-256">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="3d44c-257">たとえば、ロックの作成時の<xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>スレッドが、読み取りモードでロックに入ったと<xref:System.Threading.LockRecursionException>スレッドが読み取りモードでロックを再入力しようとした場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-257">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span> <span data-ttu-id="3d44c-258">同様に、スレッドが書き込みモードでロックに入った場合は、<xref:System.Threading.LockRecursionException>が、スレッドは、いずれかのモードでロックを再入力しようとした場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-258">Similarly, if a thread has entered the lock in write mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in any mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-259">アップグレード可能モードでのスレッドでは、書き込みモードにアップグレードしたり、読み取りロック再帰ポリシー設定に関係なくモードにダウン グレードすることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-259">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="3d44c-260">再帰ポリシーに関係なく、最初に入力した読み取りスレッド パターンでは、デッドロックの可能性が作成されるため、アップグレード可能モードまたは、書き込みモードにアップグレードするモードが使用できません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-260">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="3d44c-261">再帰ポリシーとその影響の詳細については、次を参照してください。、<xref:System.Threading.LockRecursionPolicy>列挙型、および<xref:System.Threading.ReaderWriterLockSlim>クラスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-261">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-262">次の例は、いずれかに依存している 2 つの例外シナリオ、<xref:System.Threading.LockRecursionPolicy>設定としない種類です。</span><span class="sxs-lookup"><span data-stu-id="3d44c-262">The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.</span></span>  
  
 <span data-ttu-id="3d44c-263">最初のシナリオでは、スレッドは、読み取りモードに入りますで、読み取りモードの再帰的を入力しようとします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-263">In the first scenario, the thread enters read mode and then tries to enter read mode recursively.</span></span> <span data-ttu-id="3d44c-264">場合、<xref:System.Threading.ReaderWriterLockSlim>再帰ポリシーを設定の既定のコンス トラクターを使用して作成された<xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-264">If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the default constructor, which sets recursion policy to <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="3d44c-265">場合<xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>作成に使用される、<xref:System.Threading.ReaderWriterLockSlim>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-265">If <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="3d44c-266">2 番目のシナリオでは、スレッドが読み取りモードに入ったし、入ろう書き込みますモード。</span><span class="sxs-lookup"><span data-stu-id="3d44c-266">In the second scenario, the thread enters read mode and then tries to enter write mode.</span></span> <span data-ttu-id="3d44c-267"><xref:System.Threading.LockRecursionException> ロック再帰ポリシーに関係なくがスローされます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-267"><xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#12)] 
[!code-vb[System.Threading.LockRecursionPolicy#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#12)]  
  
 <span data-ttu-id="3d44c-268">次のコードで使用して、`SynchronizedCache`野菜名の辞書を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3d44c-268">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="3d44c-269">3 つのタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-269">It creates three tasks.</span></span> <span data-ttu-id="3d44c-270">最初の配列に格納されている野菜の名前を書き込みます、`SynchronizedCache`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="3d44c-270">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="3d44c-271">2 番目と 3 番目のタスクは、野菜、昇順 (低インデックスから最も大きいインデックス)、降順で、2 つ目の最初の名前を表示します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-271">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="3d44c-272">最後のタスクは、文字列「したきゅうり」を検索し、発見された場合を呼び出して、 <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> "緑 bean"文字列を置換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="3d44c-272">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#13)] 
[!code-vb[System.Threading.LockRecursionPolicy#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
        <altmember cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="CurrentReadCount">
      <MemberSignature Language="C#" Value="public int CurrentReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentReadCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-273">読み取りモードでロックに入った一意のスレッドの総数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-273">Gets the total number of unique threads that have entered the lock in read mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-274">読み取りモードでロックに入った一意のスレッドの数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-274">The number of unique threads that have entered the lock in read mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-275">スレッドは 1 回だけカウントされますが、場合でも、再帰とスレッドを許可する、ロックがモードに入った読み取り複数回。</span><span class="sxs-lookup"><span data-stu-id="3d44c-275">A thread is counted only once, even if the lock allows recursion and the thread has entered read mode multiple times.</span></span>  
  
 <span data-ttu-id="3d44c-276">このプロパティを使用して、デバッグ、プロファイリング、およびログ記録の目的、に対してのみを除く、アルゴリズムの動作を制御します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-276">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="3d44c-277">結果は、計算が完了するとすぐに変更できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-277">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="3d44c-278">そのため、このプロパティに基づいた意思決定を行う安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-278">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-279">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A>読み取りモードでのスレッドの数がしきい値を超えた場合に、イベント ログ エントリを生成するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-279">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> property to generate an event log entry if the number of threads in read mode exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#2)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#11)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-280">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-280">Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-281"><xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> を使い終わったら <xref:System.Threading.ReaderWriterLockSlim> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-281">Call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> when you are finished using the <xref:System.Threading.ReaderWriterLockSlim>.</span></span> <span data-ttu-id="3d44c-282"><xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> メソッドによって、<xref:System.Threading.ReaderWriterLockSlim> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-282">The <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> method leaves the <xref:System.Threading.ReaderWriterLockSlim> in an unusable state.</span></span> <span data-ttu-id="3d44c-283">呼び出した後<xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>へのすべての参照を解放する必要があります、<xref:System.Threading.ReaderWriterLockSlim>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Threading.ReaderWriterLockSlim>占有されていた。</span><span class="sxs-lookup"><span data-stu-id="3d44c-283">After calling <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, you must release all references to the <xref:System.Threading.ReaderWriterLockSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ReaderWriterLockSlim> was occupying.</span></span> <span data-ttu-id="3d44c-284">詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。</span><span class="sxs-lookup"><span data-stu-id="3d44c-284">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-285">常に呼び出す<xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>への参照を解放する前に、<xref:System.Threading.ReaderWriterLockSlim>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3d44c-285">Always call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> before you release your last reference to the <xref:System.Threading.ReaderWriterLockSlim> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="3d44c-286">
            <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> が 0 より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-286">
              <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> is greater than zero.</span>
          </span>
          <span data-ttu-id="3d44c-287">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-287">-or-</span>
          </span>
          <span data-ttu-id="3d44c-288">
            <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> が 0 より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-288">
              <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> is greater than zero.</span>
          </span>
          <span data-ttu-id="3d44c-289">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-289">-or-</span>
          </span>
          <span data-ttu-id="3d44c-290">
            <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> が 0 より大きい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-290">
              <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> is greater than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnterReadLock">
      <MemberSignature Language="C#" Value="public void EnterReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterReadLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-291">読み取りモードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-291">Tries to enter the lock in read mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-292">このメソッドはブロックされるまで、呼び出し元のスレッドがロックに入るし、しない可能性がありますを返します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-292">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="3d44c-293">使用して、<xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A>その間隔の間に読み取りモードに指定した時間をブロックし、呼び出し元のスレッドが入力がないかどうかを返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="3d44c-293">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered read mode during that interval.</span></span>  
  
 <span data-ttu-id="3d44c-294">複数のスレッドは、同時に読み取りモードに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-294">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="3d44c-295">1 つまたは複数のスレッドが書き込みモードに入るを待機している場合、スレッドを呼び出す、<xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A>メソッドは、これらのスレッドがいずれかのブロックは、タイムアウトしたため、または書き込みモードに入ったからそれを終了します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-295">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-296">ロックは、再帰を許可する場合は、読み取りモードでロックに入ったスレッドは読み取りモードを再帰的に、書き込みモードに入る入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-296">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="3d44c-297">他のスレッドが読み取りモードでは、最大で 1 つのスレッドはアップグレード可能モードでできます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-297">At most one thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="3d44c-298">追加のスレッドがアップグレード可能モードに切り替わるを待機している書き込みモードに入るを待機しているスレッドが存在しない場合は、スレッドの呼び出し、<xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A>メソッドが読み取りモードをすぐに入力し、ブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-298">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-299">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A>読み取りモードでロックに入ることメソッドです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-299">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method to enter the lock in read mode.</span></span> <span data-ttu-id="3d44c-300">この例に示すようにメソッドでは、キーに関連付けられている値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-300">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="3d44c-301">キーが見つからなかったかどうか、内部によってスローされる例外<xref:System.Collections.Generic.Dictionary%602>terminate、メソッドを許可します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-301">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="3d44c-302">A`finally`ブロックの実行を使用して、<xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A>メソッドを呼び出し元が読み取りモードを終了することを確認します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-302">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span>  
  
 <span data-ttu-id="3d44c-303">このコードに示されている例の一部である、<xref:System.Threading.ReaderWriterLockSlim>クラスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-303">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3d44c-304">現在のスレッドは、読み込みロックを保持しながら書き込みロックを取得することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-304">The current thread cannot acquire the write lock when it holds the read lock.</span>
          </span>
          <span data-ttu-id="3d44c-305">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-305">-or-</span>
          </span>
          <span data-ttu-id="3d44c-306">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティは <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> です。現在のスレッドは、読み取りロックを保持しながら読み取りロックを取得しようとしました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-306">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the read lock.</span>
          </span>
          <span data-ttu-id="3d44c-307">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-307">-or-</span>
          </span>
          <span data-ttu-id="3d44c-308">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティは <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> です。現在のスレッドは、書き込みロックを保持しながら読み取りロックを取得しようとしました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-308">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the write lock.</span>
          </span>
          <span data-ttu-id="3d44c-309">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-309">-or-</span>
          </span>
          <span data-ttu-id="3d44c-310">再帰の回数は、カウンターの容量を超える可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-310">The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="3d44c-311">この制限は非常に大きいため、アプリケーションで、この例外が発生することはないはずです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-311">This limit is so large that applications should never encounter this exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3d44c-312">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-312">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void EnterUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterUpgradeableReadLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-313">アップグレード可能モードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-313">Tries to enter the lock in upgradeable mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-314">このメソッドはブロックされるまで、呼び出し元のスレッドがロックに入るし、しない可能性がありますを返します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-314">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="3d44c-315">使用して、<xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A>メソッドは、指定した時間のブロックをかどうか、呼び出し元スレッドがないモードに入ったアップグレード可能な時間中に返されます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-315">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered upgradeable mode during that interval.</span></span>  
  
 <span data-ttu-id="3d44c-316">スレッド通常によって保護されているリソースにアクセスするときにアップグレード可能モードを使用して、<xref:System.Threading.ReaderWriterLockSlim>に読み取りモードには、特定の条件が満たされた場合は、書き込みモードを入力する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-316">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="3d44c-317">アップグレード可能モードでのスレッドでは、読み取りモードにダウン グレードしたり、書き込みモードにアップグレードすることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-317">A thread in upgradeable mode can downgrade to read mode or upgrade to write mode.</span></span>  
  
 <span data-ttu-id="3d44c-318">1 つのスレッドは、特定の時点でアップグレード可能モードを入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-318">Only one thread can enter upgradeable mode at any given time.</span></span> <span data-ttu-id="3d44c-319">アップグレード可能モードに、スレッドが書き込みモードに入るを待機しているスレッドが存在しない場合は、任意の数の他のスレッドはアップグレード可能モードに切り替わるを待機しているスレッドがある場合でも、読み取りモードを入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-319">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="3d44c-320">1 つまたは複数のスレッドが書き込みモードに入るを待機している場合、スレッドを呼び出す、<xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A>メソッドは、これらのスレッドがいずれかのブロックは、タイムアウトしたため、または書き込みモードに入ったからそれを終了します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-320">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-321">ロックは、再帰を許可する場合は、アップグレード可能モードでロックに入ったスレッドはアップグレード可能モードの再帰的に、書き込みモードに入る入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-321">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-322">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A>アップグレード可能モードでロックに入ることメソッドです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-322">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method to enter the lock in upgradeable mode.</span></span> <span data-ttu-id="3d44c-323">A`finally`ブロックの実行を使用して、<xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A>メソッドを呼び出し元がアップグレード可能モードを終了することを確認します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-323">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="3d44c-324">例に示されたメソッドは、キーに関連付けられている値を取得し、新しい値と比較します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-324">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="3d44c-325">値が変更されていない場合は、変更がないことを示すステータスを返します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-325">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="3d44c-326">これは、値が見つからないため、キー、キー/値ペアが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-326">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="3d44c-327">値が変更された場合は更新されます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-327">If the value has changed, it is updated.</span></span> <span data-ttu-id="3d44c-328">アップグレード可能モードでは、スレッドなく必要に応じて、デッドロックの危険性は、読み取りロックをアップグレードします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-328">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="3d44c-329">例では、既定のコンス トラクターを使用して、ロックを作成して、再帰は許可されません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-329">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="3d44c-330">プログラミング、<xref:System.Threading.ReaderWriterLockSlim>はロックで再帰が許可されない場合は、簡単かつエラーが発生しにくくなりました。</span><span class="sxs-lookup"><span data-stu-id="3d44c-330">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="3d44c-331">このコードに示されている例の一部である、<xref:System.Threading.ReaderWriterLockSlim>クラスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-331">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3d44c-332">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にいずれかのモードでロックに入っています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-332">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span>
          </span>
          <span data-ttu-id="3d44c-333">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-333">-or-</span>
          </span>
          <span data-ttu-id="3d44c-334">現在のスレッドは既に読み取りモードに入っているため、アップグレード可能モードに入ろうとするとデッドロックの可能性が生じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-334">The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="3d44c-335">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-335">-or-</span>
          </span>
          <span data-ttu-id="3d44c-336">再帰の回数は、カウンターの容量を超える可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-336">The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="3d44c-337">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-337">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3d44c-338">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-338">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnterWriteLock">
      <MemberSignature Language="C#" Value="public void EnterWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterWriteLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-339">書き込みモードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-339">Tries to enter the lock in write mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-340">このメソッドはブロックされるまで、呼び出し元のスレッドがロックに入るし、しない可能性がありますを返します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-340">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="3d44c-341">使用して、<xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A>メソッドは、指定した時間のブロックをかどうか、呼び出し元スレッドがないモードに入った書き込み時間中に返されます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-341">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to block for a specified interval, and then return if the calling thread has not entered write mode during that interval.</span></span>  
  
 <span data-ttu-id="3d44c-342">他のスレッドは、読み取りモードでロックに入ったが場合、スレッドを呼び出す、<xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A>読み取りモードにメソッドは、これらのスレッドが終了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-342">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method blocks until those threads have exited read mode.</span></span> <span data-ttu-id="3d44c-343">書き込みモードに入るを待機しているスレッドが存在する場合、書き込みモードに入るを待機しているすべてのスレッドがあるかになるまで、読み取りモードまたはアップグレード可能モードのブロックを入力しようとする追加のスレッドはタイムアウトまたは書き込みモードに入ったし、そこから、終了しました。</span><span class="sxs-lookup"><span data-stu-id="3d44c-343">When there are threads waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-344">ロックは、再帰を許可する、他のスレッドが書き込みモードに入るを待機している場合でも、書き込みモードでロックに入ったスレッドは書き込みモードを入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-344">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-345">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A>書き込みモードでロックに入ることメソッドです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-345">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method to enter the lock in write mode.</span></span> <span data-ttu-id="3d44c-346">例に示すメソッドは、同期、キャッシュに新しいキー/値ペアを追加します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-346">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="3d44c-347">場合は、キーが、キャッシュでは、内部によってスローされる例外に既に<xref:System.Collections.Generic.Dictionary%602>terminate、メソッドを許可します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-347">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="3d44c-348">A`finally`ブロックの実行を使用して、<xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A>メソッドを呼び出し元が書き込みモードを終了することを確認します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-348">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span>  
  
 <span data-ttu-id="3d44c-349">このコードに示されている例の一部である、<xref:System.Threading.ReaderWriterLockSlim>クラスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-349">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3d44c-350">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にいずれかのモードでロックに入っています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-350">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span>
          </span>
          <span data-ttu-id="3d44c-351">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-351">-or-</span>
          </span>
          <span data-ttu-id="3d44c-352">現在のスレッドは読み取りモードに入っているため、書き込みモードでロックに入ろうとするとデッドロックの可能性が生じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-352">The current thread has entered read mode, so trying to enter the lock in write mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="3d44c-353">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-353">-or-</span>
          </span>
          <span data-ttu-id="3d44c-354">再帰の回数は、カウンターの容量を超える可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-354">The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="3d44c-355">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-355">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3d44c-356">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-356">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExitReadLock">
      <MemberSignature Language="C#" Value="public void ExitReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitReadLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-357">読み取りモードの再帰カウントを減らし、結果のカウントが 0 (ゼロ) の場合には読み取りモードを終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-357">Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-358">このメソッドは、再帰の順序に影響はありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-358">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="3d44c-359">たとえば、スレッドがアップグレード可能モードでロックに入った、読み取りモードでロックに入った場合、スレッドが 2 つのモードを終了する順序は関係ありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-359">For example, if a thread enters a lock in upgradeable mode and then enters the lock in read mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="3d44c-360">ロックは、再帰を許可する場合、スレッドできます書き込みモードでロックに入るし、入力を再帰的に読み取りモードであります。スレッドが終了する順序は、読み取りモードと、書き込みモードは関係ありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-360">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="3d44c-361">ロックを終了すると、その他の待機中のスレッドがシグナル可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-361">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-362">次の例を使用する方法を示しています、`finally`ブロックが実行、<xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A>メソッドを呼び出し元が読み取りモードを終了することを確認します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-362">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span> <span data-ttu-id="3d44c-363">この例に示すようにメソッドでは、キーに関連付けられている値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-363">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="3d44c-364">キーが見つからなかったかどうか、内部によってスローされる例外<xref:System.Collections.Generic.Dictionary%602>terminate、メソッドを許可します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-364">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="3d44c-365"><xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A>メソッドを使用して、読み取りモードを入力します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-365">The <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method is used to enter read mode.</span></span>  
  
 <span data-ttu-id="3d44c-366">このコードに示されている例の一部である、<xref:System.Threading.ReaderWriterLockSlim>クラスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-366">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="3d44c-367">現在のスレッドは読み取りモードでロックに入っていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-367">The current thread has not entered the lock in read mode.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExitUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void ExitUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitUpgradeableReadLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-368">アップグレード可能モードの再帰カウントを減らし、結果のカウントが 0 (ゼロ) の場合にはアップグレード可能モードを終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-368">Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-369">このメソッドは、再帰の順序に影響はありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-369">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="3d44c-370">たとえば、スレッドがアップグレード可能モードでロックに入ったし、書き込みモードでロックに入った場合、スレッドが 2 つのモードを終了する順序は関係ありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-370">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="3d44c-371">ロックは、再帰を許可する場合、スレッドできます書き込みモードでロックに入るし、入力を再帰的にアップグレード可能モードであります。スレッドがアップグレード可能モードと書き込みのモードを終了する順序は重要ではありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-371">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in upgradeable mode; the order in which the thread exits upgradeable mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="3d44c-372">ロックを終了すると、その他の待機中のスレッドがシグナル可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-372">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-373">次の例を使用する方法を示しています、`finally`ブロックが実行、<xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A>メソッドを呼び出し元がアップグレード可能モードを終了することを確認します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-373">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="3d44c-374">例に示されたメソッドは、キーに関連付けられている値を取得し、新しい値と比較します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-374">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="3d44c-375">値が変更されていない場合は、変更がないことを示すステータスを返します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-375">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="3d44c-376">これは、値が見つからないため、キー、キー/値ペアが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-376">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="3d44c-377">値が変更された場合は更新されます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-377">If the value has changed, it is updated.</span></span> <span data-ttu-id="3d44c-378">アップグレード可能モードでは、スレッドなく必要に応じて、デッドロックの危険性は、読み取りロックをアップグレードします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-378">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="3d44c-379">例では、既定のコンス トラクターを使用して、ロックを作成して、再帰は許可されません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-379">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="3d44c-380">プログラミング、<xref:System.Threading.ReaderWriterLockSlim>はロックで再帰が許可されない場合は、簡単かつエラーが発生しにくくなりました。</span><span class="sxs-lookup"><span data-stu-id="3d44c-380">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="3d44c-381">このコードに示されている例の一部である、<xref:System.Threading.ReaderWriterLockSlim>クラスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-381">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="3d44c-382">現在のスレッドはアップグレード可能モードでロックに入っていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-382">The current thread has not entered the lock in upgradeable mode.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExitWriteLock">
      <MemberSignature Language="C#" Value="public void ExitWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitWriteLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-383">書き込みモードの再帰カウントを減らし、結果のカウントが 0 (ゼロ) の場合には書き込みモードを終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-383">Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-384">このメソッドは、再帰の順序に影響はありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-384">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="3d44c-385">たとえば、スレッドがアップグレード可能モードでロックに入ったし、書き込みモードでロックに入った場合、スレッドが 2 つのモードを終了する順序は関係ありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-385">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="3d44c-386">ロックは、再帰を許可する場合、スレッドできます書き込みモードでロックに入るし、入力を再帰的に読み取りモードであります。スレッドが終了する順序は、読み取りモードと、書き込みモードは関係ありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-386">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="3d44c-387">ロックを終了すると、その他の待機中のスレッドがシグナル可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-387">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-388">次の例を使用する方法を示しています、`finally`ブロックが実行、<xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A>メソッドを呼び出し元が書き込みモードを終了することを確認します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-388">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span> <span data-ttu-id="3d44c-389">例に示すメソッドは、同期、キャッシュに新しいキー/値ペアを追加します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-389">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="3d44c-390">場合は、キーが、キャッシュでは、内部によってスローされる例外に既に<xref:System.Collections.Generic.Dictionary%602>terminate、メソッドを許可します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-390">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="3d44c-391"><xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A>メソッドは書き込みモードでロックに入るに使用します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-391">The <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method is used to enter the lock in write mode.</span></span>  
  
 <span data-ttu-id="3d44c-392">このコードに示されている例の一部である、<xref:System.Threading.ReaderWriterLockSlim>クラスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-392">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="3d44c-393">現在のスレッドは書き込みモードでロックに入っていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-393">The current thread has not entered the lock in write mode.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadLockHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-394">現在のスレッドが読み取りモードでロックに入ったかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-394">Gets a value that indicates whether the current thread has entered the lock in read mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-395">現在のスレッドが読み取りモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-395">
              <see langword="true" /> if the current thread has entered read mode; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-396">使用するアサートまたはその他のデバッグの目的では、このプロパティを目的としています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-396">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="3d44c-397">プログラム実行のフローを制御するのには使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="3d44c-397">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-398">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A>読み取りモードに予期せず、現在のスレッドが入力した場合は、アサートを生成するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-398">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> property to generate an assert if the current thread has entered read mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#21)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpgradeableReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsUpgradeableReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUpgradeableReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUpgradeableReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUpgradeableReadLockHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-399">現在のスレッドがアップグレード可能モードでロックに入ったかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-399">Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-400">現在のスレッドがアップグレード可能モードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-400">
              <see langword="true" /> if the current thread has entered upgradeable mode; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-401">使用するアサートまたはその他のデバッグの目的では、このプロパティを目的としています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-401">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="3d44c-402">プログラム実行のフローを制御するのには使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="3d44c-402">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-403">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A>プロパティを現在のスレッドがアップグレード可能モードを予期せずに入った場合は、アサートを生成します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-403">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> property to generate an assert if the current thread has entered upgradeable mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#22)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriteLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteLockHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-404">現在のスレッドが書き込みモードでロックに入ったかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-404">Gets a value that indicates whether the current thread has entered the lock in write mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-405">現在のスレッドが書き込みモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-405">
              <see langword="true" /> if the current thread has entered write mode; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-406">使用するアサートまたはその他のデバッグの目的では、このプロパティを目的としています。</span><span class="sxs-lookup"><span data-stu-id="3d44c-406">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="3d44c-407">プログラム実行のフローを制御するのには使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="3d44c-407">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-408">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A>プロパティを現在のスレッドが書き込みモードを予期せずに入った場合は、アサートを生成します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-408">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> property to generate an assert if the current thread has entered write mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#23)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursionPolicy">
      <MemberSignature Language="C#" Value="public System.Threading.LockRecursionPolicy RecursionPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.LockRecursionPolicy RecursionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursionPolicy As LockRecursionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::LockRecursionPolicy RecursionPolicy { System::Threading::LockRecursionPolicy get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-409">現在の <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトの再帰ポリシーを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-409">Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-410">ロック再帰ポリシーを指定する列挙値のいずれか。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-410">One of the enumeration values that specifies the lock recursion policy.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-411">再帰ポリシーでは、複数回ロックに入るスレッドに関する制限事項を決定します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-411">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="3d44c-412">たとえば、ロックの作成時の<xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>スレッドが、読み取りモードでロックに入ったと<xref:System.Threading.LockRecursionException>スレッドが読み取りモードでロックを再入力しようとした場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-412">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-413">アップグレード可能モードでのスレッドでは、書き込みモードにアップグレードしたり、読み取りロック再帰ポリシー設定に関係なくモードにダウン グレードすることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-413">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="3d44c-414">再帰ポリシーに関係なく、最初に入力した読み取りスレッド パターンでは、デッドロックの可能性が作成されるため、アップグレード可能モードまたは、書き込みモードにアップグレードするモードが使用できません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-414">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="3d44c-415">再帰ポリシーとその影響の詳細については、次を参照してください。、<xref:System.Threading.LockRecursionPolicy>列挙型、および<xref:System.Threading.ReaderWriterLockSlim>クラスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-415">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionException" />
      </Docs>
    </Member>
    <Member MemberName="RecursiveReadCount">
      <MemberSignature Language="C#" Value="public int RecursiveReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveReadCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-416">現在のスレッドが読み取りモードでロックに入った回数を、再帰を示す値として取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-416">Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-417">0 (ゼロ) に、現在のスレッドが入力されていない場合は、モードを読み取り、スレッドが読み取りモードに入ったが、されていない場合は 1 を入力して、再帰的にまたは*n* 、スレッドが再帰的にロックに入った場合*n* - 1 回です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-417">0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or *n* if the thread has entered the lock recursively *n* - 1 times.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-418">このプロパティを使用して、デバッグ、プロファイリング、およびログ記録の目的、に対してのみを除く、アルゴリズムの動作を制御します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-418">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="3d44c-419">結果は、計算が完了するとすぐに変更できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-419">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="3d44c-420">そのため、このプロパティに基づいた意思決定を行う安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-420">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveUpgradeCount">
      <MemberSignature Language="C#" Value="public int RecursiveUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveUpgradeCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-421">現在のスレッドがアップグレード可能モードでロックに入った回数を、再帰を示す値として取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-421">Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-422">現在のスレッドがアップグレード可能モードの場合は、スレッドがアップグレード可能モードに入ったがいない再帰的に、1 を入力していない場合は 0 または*n* 、スレッドが再帰的にアップグレード可能モードに入った場合*n* - 1時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-422">0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or *n* if the thread has entered upgradeable mode recursively *n* - 1 times.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-423">このプロパティを使用して、デバッグ、プロファイリング、およびログ記録の目的、に対してのみを除く、アルゴリズムの動作を制御します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-423">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="3d44c-424">結果は、計算が完了するとすぐに変更できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-424">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="3d44c-425">そのため、このプロパティに基づいた意思決定を行う安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-425">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveWriteCount">
      <MemberSignature Language="C#" Value="public int RecursiveWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveWriteCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-426">現在のスレッドが書き込みモードでロックに入った回数を、再帰を示す値として取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-426">Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-427">現在のスレッドが入力されていない場合は 0 を書き込みモードでは、1 スレッドが書き込みモードに入ったが、されていない場合、再帰的にまたは*n* 、スレッドが書き込みモードに入った場合*n* - 1 回です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-427">0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or *n* if the thread has entered write mode recursively *n* - 1 times.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-428">このプロパティを使用して、デバッグ、プロファイリング、およびログ記録の目的、に対してのみを除く、アルゴリズムの動作を制御します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-428">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="3d44c-429">結果は、計算が完了するとすぐに変更できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-429">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="3d44c-430">そのため、このプロパティに基づいた意思決定を行う安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-430">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-431">オプションのタイムアウトを指定して、読み取りモードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-431">Tries to enter the lock in read mode, with an optional time-out.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="3d44c-432">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-432">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3d44c-433">オプションのタイムアウトを表す整数を指定して、読み取りモードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-433">Tries to enter the lock in read mode, with an optional integer time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3d44c-434">呼び出し元のスレッドが読み取りモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-434">
              <see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-435">場合`millisecondsTimeout`0 (ゼロ) は、このメソッドはロック状態を確認し、返します`false`目的の状態が使用できない場合にすぐにします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-435">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="3d44c-436">複数のスレッドは、同時に読み取りモードに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-436">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="3d44c-437">1 つまたは複数のスレッドが書き込みモードに入るを待機している場合、スレッドを呼び出す、<xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A>メソッドは、呼び出し元スレッド独自のタイムアウト期限が切れたかそれらのスレッドか、タイムアウトまたは書き込みモードに入ったになりからを終了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-437">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-438">ロックは、再帰を許可する場合は、読み取りモードでロックに入ったスレッドは読み取りモードを再帰的に、書き込みモードに入る入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-438">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="3d44c-439">他のスレッドが読み取りモードでは、1 つのスレッドはアップグレード可能モードにできます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-439">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="3d44c-440">追加のスレッドがアップグレード可能モードに切り替わるを待機している書き込みモードに入るを待機しているスレッドが存在しない場合は、スレッドの呼び出し、<xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A>メソッドが読み取りモードをすぐに入力し、ブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-440">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3d44c-441">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-441">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="3d44c-442">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-442">-or-</span>
          </span>
          <span data-ttu-id="3d44c-443">再帰の回数は、カウンターの容量を超える可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-443">The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="3d44c-444">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-444">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3d44c-445">
            <paramref name="millisecondsTimeout" /> の値が負ですが、指定できる唯一の負の値である <see cref="F:System.Threading.Timeout.Infinite" /> (-1) と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-445">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3d44c-446">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-446">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3d44c-447">待機する間隔。無制限に待機する場合は -1 ミリ秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-447">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3d44c-448">オプションのタイムアウトを指定して、読み取りモードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-448">Tries to enter the lock in read mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3d44c-449">呼び出し元のスレッドが読み取りモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-449">
              <see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-450">場合`timeout`0 (ゼロ) は、このメソッドはロック状態を確認し、返します`false`目的の状態が使用できない場合にすぐにします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-450">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="3d44c-451">複数のスレッドは、同時に、読み取りモードでロックに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-451">Multiple threads can enter the lock in read mode at the same time.</span></span>  
  
 <span data-ttu-id="3d44c-452">1 つまたは複数のスレッドが書き込みモードに入るキューに格納している場合、スレッドを呼び出す、<xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A>メソッドは、呼び出し元スレッド独自のタイムアウト期限が切れたかそれらのスレッドか、タイムアウトまたは書き込みモードに入ったになりからを終了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-452">If one or more threads are queued to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-453">ロックは、再帰を許可する場合は、読み取りモードでロックに入ったスレッドは読み取りモードを再帰的に、書き込みモードに入る入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-453">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="3d44c-454">他のスレッドが読み取りモードでは、1 つのスレッドはアップグレード可能モードにできます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-454">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="3d44c-455">追加のスレッドがアップグレード可能モードに切り替わるを待機している書き込みモードに入るを待機しているスレッドが存在しない場合は、スレッドの呼び出し、<xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A>メソッドが読み取りモードをすぐに入力し、ブロックされません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-455">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3d44c-456">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-456">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="3d44c-457">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-457">-or-</span>
          </span>
          <span data-ttu-id="3d44c-458">再帰の回数は、カウンターの容量を超える可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-458">The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="3d44c-459">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-459">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3d44c-460">
            <paramref name="timeout" /> の値が負ですが、指定できる唯一の負の値である -1 ミリ秒と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-460">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          </span>
          <span data-ttu-id="3d44c-461">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-461">-or-</span>
          </span>
          <span data-ttu-id="3d44c-462">
            <paramref name="timeout" /> の値が <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-462">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3d44c-463">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-463">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterUpgradeableReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-464">オプションのタイムアウトを指定して、アップグレード可能モードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-464">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="3d44c-465">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-465">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3d44c-466">オプションのタイムアウトを指定して、アップグレード可能モードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-466">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3d44c-467">呼び出し元のスレッドがアップグレード可能モードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-467">
              <see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-468">場合`millisecondsTimeout`0 (ゼロ) は、このメソッドはロック状態を確認し、返します`false`目的の状態が使用できない場合にすぐにします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-468">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="3d44c-469">スレッド通常によって保護されているリソースにアクセスするときにアップグレード可能モードを使用して、<xref:System.Threading.ReaderWriterLockSlim>に読み取りモードには、特定の条件が満たされた場合は、書き込みモードを入力する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-469">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="3d44c-470">アップグレード可能モードでのスレッドでは、書き込みモードにアップグレードしたり、読み取りモードにダウン グレードすることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-470">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="3d44c-471">1 つのスレッドは特定の時点で、アップグレード可能モードでロックに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-471">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="3d44c-472">アップグレード可能モードに、スレッドが書き込みモードに入るを待機しているスレッドが存在しない場合は、任意の数の他のスレッドはアップグレード可能モードに切り替わるを待機しているスレッドがある場合でも、読み取りモードを入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-472">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="3d44c-473">1 つまたは複数のスレッドが書き込みモードに入るを待機している場合、スレッドを呼び出す、<xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A>メソッドは、呼び出し元スレッド独自のタイムアウト期限が切れたかそれらのスレッドか、タイムアウトまたは書き込みモードに入ったになりからを終了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-473">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-474">ロックは、再帰を許可する場合は、アップグレード可能モードでロックに入ったスレッドはアップグレード可能モードの再帰的に、書き込みモードに入る入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-474">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3d44c-475">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-475">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="3d44c-476">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-476">-or-</span>
          </span>
          <span data-ttu-id="3d44c-477">現在のスレッドは最初に読み取りモードでロックに入ったため、アップグレード可能モードに入ろうとするとデッドロックの可能性が生じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-477">The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="3d44c-478">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-478">-or-</span>
          </span>
          <span data-ttu-id="3d44c-479">再帰の回数は、カウンターの容量を超える可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-479">The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="3d44c-480">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-480">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3d44c-481">
            <paramref name="millisecondsTimeout" /> の値が負ですが、指定できる唯一の負の値である <see cref="F:System.Threading.Timeout.Infinite" /> (-1) と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-481">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3d44c-482">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-482">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3d44c-483">待機する間隔。無制限に待機する場合は -1 ミリ秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-483">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3d44c-484">オプションのタイムアウトを指定して、アップグレード可能モードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-484">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3d44c-485">呼び出し元のスレッドがアップグレード可能モードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-485">
              <see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-486">場合`timeout`0 (ゼロ) は、このメソッドはロック状態を確認し、返します`false`目的の状態が使用できない場合にすぐにします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-486">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="3d44c-487">スレッド通常によって保護されているリソースにアクセスするときにアップグレード可能モードを使用して、<xref:System.Threading.ReaderWriterLockSlim>に読み取りモードには、特定の条件が満たされた場合は、書き込みモードを入力する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3d44c-487">Use upgradeable mode when a thread usually accesses the resource protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="3d44c-488">アップグレード可能モードでのスレッドでは、書き込みモードにアップグレードしたり、読み取りモードにダウン グレードすることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-488">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="3d44c-489">1 つのスレッドは特定の時点で、アップグレード可能モードでロックに入ることができます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-489">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="3d44c-490">アップグレード可能モードに、スレッドが書き込みモードに入るを待機しているスレッドが存在しない場合は、任意の数の他のスレッドはアップグレード可能モードに切り替わるを待機しているスレッドがある場合でも、読み取りモードを入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-490">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="3d44c-491">1 つまたは複数のスレッドが書き込みモードに入るを待機している場合、スレッドを呼び出す、<xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A>メソッドは、呼び出し元スレッド独自のタイムアウト期限が切れたかそれらのスレッドか、タイムアウトまたは書き込みモードに入ったになりからを終了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-491">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-492">ロックは、再帰を許可する場合は、アップグレード可能モードでロックに入ったスレッドはアップグレード可能モードの再帰的に、書き込みモードに入る入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-492">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3d44c-493">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-493">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="3d44c-494">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-494">-or-</span>
          </span>
          <span data-ttu-id="3d44c-495">現在のスレッドは最初に読み取りモードでロックに入ったため、アップグレード可能モードに入ろうとするとデッドロックの可能性が生じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-495">The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="3d44c-496">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-496">-or-</span>
          </span>
          <span data-ttu-id="3d44c-497">再帰の回数は、カウンターの容量を超える可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-497">The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="3d44c-498">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-498">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3d44c-499">
            <paramref name="timeout" /> の値が負ですが、指定できる唯一の負の値である -1 ミリ秒と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-499">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          </span>
          <span data-ttu-id="3d44c-500">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-500">-or-</span>
          </span>
          <span data-ttu-id="3d44c-501">
            <paramref name="timeout" /> の値が <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-501">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3d44c-502">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-502">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterWriteLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-503">オプションのタイムアウトを指定して、書き込みモードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-503">Tries to enter the lock in write mode, with an optional time-out.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="3d44c-504">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-504">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3d44c-505">オプションのタイムアウトを指定して、書き込みモードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-505">Tries to enter the lock in write mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3d44c-506">呼び出し元のスレッドが書き込みモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-506">
              <see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-507">場合`millisecondsTimeout`0 (ゼロ) は、このメソッドはロック状態を確認し、返します`false`目的の状態が使用できない場合にすぐにします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-507">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="3d44c-508">他のスレッドは、読み取りモードでロックに入ったが場合、スレッドを呼び出す、<xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A>メソッドは、これらのスレッドが読み取りモードを終了するまで、またはタイムアウト間隔が経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-508">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="3d44c-509">書き込みモードに入るを待機しているスレッドがブロックされるときに、読み取りモードまたはアップグレード可能モードを入力しようとする追加のスレッドは、入力を待機しているすべてのスレッドがタイムアウト、または書き込みモードに入ったし、そこから終了し、書き込みモードになるまでをブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-509">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-510">ロックは、再帰を許可する、他のスレッドが書き込みモードに入るを待機している場合でも、書き込みモードでロックに入ったスレッドは書き込みモードを入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-510">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-511">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A>メソッドに、タイムアウトで、書き込みモードでロックに入ることです。例に示すメソッドは、同期、キャッシュに新しいキー/値ペアを追加します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-511">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to enter the lock in write mode, with a time-out. The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="3d44c-512">このメソッドを返しますのかどうかは、スレッド ロックに入る前に指定されたタイムアウト期間を過ぎると、`false`です。</span><span class="sxs-lookup"><span data-stu-id="3d44c-512">If the specified time-out interval elapses before the thread enters the lock, the method returns `false`.</span></span> <span data-ttu-id="3d44c-513">このメソッドを返します`true`場合は、キー/値ペアを追加します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-513">The method returns `true` if the key/value pair is added.</span></span>  
  
 <span data-ttu-id="3d44c-514">場合は、キーが、キャッシュでは、内部によってスローされる例外に既に<xref:System.Collections.Generic.Dictionary%602>terminate、メソッドを許可します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-514">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="3d44c-515">A`finally`ブロックの実行を使用して、<xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A>メソッドを呼び出し元がロックを終了したことを確認します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-515">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits the lock.</span></span>  
  
 <span data-ttu-id="3d44c-516">このコードに示されている例の一部である、<xref:System.Threading.ReaderWriterLockSlim>クラスです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-516">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3d44c-517">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-517">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="3d44c-518">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-518">-or-</span>
          </span>
          <span data-ttu-id="3d44c-519">現在のスレッドは最初に読み取りモードでロックに入ったため、書き込みモードに入ろうとするとデッドロックの可能性が生じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-519">The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="3d44c-520">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-520">-or-</span>
          </span>
          <span data-ttu-id="3d44c-521">再帰の回数は、カウンターの容量を超える可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-521">The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="3d44c-522">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-522">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3d44c-523">
            <paramref name="millisecondsTimeout" /> の値が負ですが、指定できる唯一の負の値である <see cref="F:System.Threading.Timeout.Infinite" /> (-1) と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-523">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3d44c-524">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-524">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3d44c-525">待機する間隔。無制限に待機する場合は -1 ミリ秒。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-525">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3d44c-526">オプションのタイムアウトを指定して、書き込みモードでロックに入ることを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-526">Tries to enter the lock in write mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3d44c-527">呼び出し元のスレッドが書き込みモードに入った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-527">
              <see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-528">場合`timeout`0 (ゼロ) は、このメソッドはロック状態を確認し、返します`false`目的の状態が使用できない場合にすぐにします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-528">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="3d44c-529">他のスレッドは、読み取りモードでロックに入ったが場合、スレッドを呼び出す、<xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A>メソッドは、これらのスレッドが読み取りモードを終了するまで、またはタイムアウト間隔が経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-529">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="3d44c-530">書き込みモードに入るを待機しているスレッドがブロックされるときに、読み取りモードまたはアップグレード可能モードを入力しようとする追加のスレッドは、入力を待機しているすべてのスレッドがタイムアウト、または書き込みモードに入ったし、そこから終了し、書き込みモードになるまでをブロックします。</span><span class="sxs-lookup"><span data-stu-id="3d44c-530">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3d44c-531">ロックは、再帰を許可する、他のスレッドが書き込みモードに入るを待機している場合でも、書き込みモードでロックに入ったスレッドは書き込みモードを入力できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-531">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3d44c-532">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> プロパティが <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> で、現在のスレッドは既にロックに入っています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-532">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="3d44c-533">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-533">-or-</span>
          </span>
          <span data-ttu-id="3d44c-534">現在のスレッドは最初に読み取りモードでロックに入ったため、書き込みモードに入ろうとするとデッドロックの可能性が生じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-534">The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="3d44c-535">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-535">-or-</span>
          </span>
          <span data-ttu-id="3d44c-536">再帰の回数は、カウンターの容量を超える可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-536">The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="3d44c-537">この容量は非常に大きいので、アプリケーションでこの状況が発生することは通常はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-537">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3d44c-538">
            <paramref name="timeout" /> の値が負ですが、指定できる唯一の負の値である -1 ミリ秒と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-538">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          </span>
          <span data-ttu-id="3d44c-539">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-539">-or-</span>
          </span>
          <span data-ttu-id="3d44c-540">
            <paramref name="timeout" /> の値が <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-540">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="3d44c-541">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> オブジェクトは破棄されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-541">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitingReadCount">
      <MemberSignature Language="C#" Value="public int WaitingReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingReadCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-542">読み取りモードでロックに入るのを待機しているスレッドの総数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-542">Gets the total number of threads that are waiting to enter the lock in read mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-543">読み取りモードに入るのを待機しているスレッドの総数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-543">The total number of threads that are waiting to enter read mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-544">このプロパティを使用して、デバッグ、プロファイリング、およびログ記録の目的、に対してのみを除く、アルゴリズムの動作を制御します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-544">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="3d44c-545">結果は、計算が完了するとすぐに変更できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-545">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="3d44c-546">そのため、このプロパティに基づいた意思決定を行う安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-546">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-547">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A>読み取りモードに入るを待機している、ブロックされているスレッドの数がしきい値を超えた場合に、イベント ログ エントリを生成するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-547">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter read mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#31)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingUpgradeCount">
      <MemberSignature Language="C#" Value="public int WaitingUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingUpgradeCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-548">アップグレード可能モードでロックに入るのを待機しているスレッドの総数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-548">Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-549">アップグレード可能モードに入るのを待機しているスレッドの総数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-549">The total number of threads that are waiting to enter upgradeable mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-550">このプロパティを使用して、デバッグ、プロファイリング、およびログ記録の目的、に対してのみを除く、アルゴリズムの動作を制御します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-550">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="3d44c-551">結果は、計算が完了するとすぐに変更できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-551">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="3d44c-552">そのため、このプロパティに基づいた意思決定を行う安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-552">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-553">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A>アップグレード可能モードに切り替わるを待機している、ブロックされているスレッドの数がしきい値を超えた場合に、イベント ログ エントリを生成するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-553">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter upgradeable mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#33)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingWriteCount">
      <MemberSignature Language="C#" Value="public int WaitingWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingWriteCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3d44c-554">書き込みモードでロックに入るのを待機しているスレッドの総数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-554">Gets the total number of threads that are waiting to enter the lock in write mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3d44c-555">書き込みモードに入るのを待機しているスレッドの総数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3d44c-555">The total number of threads that are waiting to enter write mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d44c-556">このプロパティを使用して、デバッグ、プロファイリング、およびログ記録の目的、に対してのみを除く、アルゴリズムの動作を制御します。</span><span class="sxs-lookup"><span data-stu-id="3d44c-556">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="3d44c-557">結果は、計算が完了するとすぐに変更できます。</span><span class="sxs-lookup"><span data-stu-id="3d44c-557">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="3d44c-558">そのため、このプロパティに基づいた意思決定を行う安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="3d44c-558">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d44c-559">次の例を使用する方法を示しています、<xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A>書き込みモードに入るを待機している、ブロックされているスレッドの数がしきい値を超えた場合に、イベント ログ エントリを生成するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="3d44c-559">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter write mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#32)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>