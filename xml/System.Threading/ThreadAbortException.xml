<Type Name="ThreadAbortException" FullName="System.Threading.ThreadAbortException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a77e7a2363e23a7235dcaeac3d260f53b4771dcd" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52346967" /></Metadata><TypeSignature Language="C#" Value="public sealed class ThreadAbortException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ThreadAbortException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadAbortException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadAbortException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadAbortException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type ThreadAbortException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="dd8fc-101"><see cref="M:System.Threading.Thread.Abort(System.Object)" /> メソッドが呼び出されるときにスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-101">The exception that is thrown when a call is made to the <see cref="M:System.Threading.Thread.Abort(System.Object)" /> method.</span></span> <span data-ttu-id="dd8fc-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd8fc-103">呼び出しはに対して行われた場合、<xref:System.Threading.Thread.Abort%2A>を共通言語ランタイムのスレッドを破棄するメソッドがスローされます、<xref:System.Threading.ThreadAbortException>します。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-103">When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="dd8fc-104"><xref:System.Threading.ThreadAbortException> 特別な例外をキャッチできますが、そのは自動的に再度発生の最後に、`catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-104"><xref:System.Threading.ThreadAbortException> is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block.</span></span> <span data-ttu-id="dd8fc-105">この例外が発生したときにすべてのランタイムが実行されます、`finally`スレッドを終了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-105">When this exception is raised, the runtime executes all the `finally` blocks before ending the thread.</span></span> <span data-ttu-id="dd8fc-106">スレッドで無制限の計算を実行できるため、`finally`ブロックや呼び出し<xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType>abort を取り消す場合に、スレッドがこれまでに終了される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-106">Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> to cancel the abort, there is no guarantee that the thread will ever end.</span></span> <span data-ttu-id="dd8fc-107">中止されたスレッドが終了するまで待機する場合は、呼び出すことが、<xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-107">If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="dd8fc-108"><xref:System.Threading.Thread.Join%2A> ブロッキング呼び出しスレッドが実際に実行を停止するまで戻りませんです。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-108"><xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dd8fc-109">共通言語ランタイム (CLR) は、マネージ実行可能ファイル内のすべてのフォア グラウンド スレッドが終了した後に、バック グラウンド スレッドを停止する場合は使用されません<xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-109">When the common language runtime (CLR) stops background threads after all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dd8fc-110">そのため、使用することはできません<xref:System.Threading.ThreadAbortException>バック グラウンド スレッドが CLR によって終了されるタイミングを検出します。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-110">Therefore, you cannot use <xref:System.Threading.ThreadAbortException> to detect when background threads are being terminated by the CLR.</span></span>  
  
 <span data-ttu-id="dd8fc-111"><xref:System.Threading.ThreadAbortException> 値は 0x80131530 HRESULT COR_E_THREADABORTED を使用します。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-111"><xref:System.Threading.ThreadAbortException> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dd8fc-112">継承された値<xref:System.Exception.Data%2A>プロパティは常に`null`します。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-112">The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dd8fc-113">次の例では、スレッドの中止を示します。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-113">The following example demonstrates aborting a thread.</span></span> <span data-ttu-id="dd8fc-114">スレッドを受信する、`ThreadAbortException`を使用して、<xref:System.Threading.Thread.ResetAbort%2A>メソッドを中断要求をキャンセルし、実行を続行します。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-114">The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.</span></span>  
  
 [!code-cpp[ThreadAbEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadAbEx/CPP/threadabex.cpp#1)]
 [!code-csharp[ThreadAbEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/CS/threadabex.cs#1)]
 [!code-vb[ThreadAbEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadAbEx/VB/threadabex.vb#1)]  
  
 <span data-ttu-id="dd8fc-115">このコードを実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-115">This code produces the following output:</span></span>  
  
```  
Thread - working.  
Main - aborting my thread.  
Thread - caught ThreadAbortException - resetting.  
Exception message: Thread was being aborted.  
Thread - still alive and working.  
Thread - finished working.  
Main ending.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
    <related type="Article" href="~/docs/standard/threading/destroying-threads.md"><span data-ttu-id="dd8fc-116">スレッドの破棄</span><span class="sxs-lookup"><span data-stu-id="dd8fc-116">Destroying threads</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ExceptionState">
      <MemberSignature Language="C#" Value="public object ExceptionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadAbortException.ExceptionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionState : obj" Usage="System.Threading.ThreadAbortException.ExceptionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dd8fc-117">スレッドの中止に関連するアプリケーション固有の情報を含むオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-117">Gets an object that contains application-specific information related to the thread abort.</span></span></summary>
        <value><span data-ttu-id="dd8fc-118">アプリケーション固有の情報を含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-118">An object containing application-specific information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd8fc-119">このプロパティによって返されるオブジェクトがで指定された、`stateInfo`のパラメーター、<xref:System.Threading.Thread.Abort%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-119">The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method.</span></span> <span data-ttu-id="dd8fc-120">正確な内容と、このオブジェクトの使用方法が定義されているアプリケーションです。通常、スレッドの中止にわかりやすい情報を伝達するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-120">The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dd8fc-121">次のコード例では、中止中のスレッドに情報を渡す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="dd8fc-121">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentThread" />
        <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md"><span data-ttu-id="dd8fc-122">スレッドの破棄</span><span class="sxs-lookup"><span data-stu-id="dd8fc-122">Destroying threads</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>