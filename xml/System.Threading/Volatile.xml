<Type Name="Volatile" FullName="System.Threading.Volatile">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b261da546be5a0f2e524761fa2d831a241aa1674" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39778815" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Volatile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Volatile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Volatile" />
  <TypeSignature Language="VB.NET" Value="Public Class Volatile" />
  <TypeSignature Language="C++ CLI" Value="public ref class Volatile abstract sealed" />
  <TypeSignature Language="F#" Value="type Volatile = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="6838b-101">揮発性メモリの操作を実行するためのメソッドを格納します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6838b-101">Contains methods for performing volatile memory operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-102">マルチプロセッサ システムでの volatile 書き込み操作により、メモリ位置に書き込まれた値がすべてのプロセッサをすぐに表示されています。</span><span class="sxs-lookup"><span data-stu-id="6838b-102">On a multiprocessor system, a volatile write operation ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="6838b-103">揮発性の読み取り操作では、すべてのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="6838b-103">A volatile read operation obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="6838b-104">これらの操作は、プロセッサのキャッシュは、パフォーマンスに影響する可能性をフラッシュする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6838b-104">These operations might require flushing processor caches, which can affect performance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6838b-105">ユニプロセッサ システムでは、揮発性の読み取りと書き込みを確認します値が読み取りまたはメモリに書き込まれます (たとえば、プロセッサのレジスタ) にはキャッシュされません。</span><span class="sxs-lookup"><span data-stu-id="6838b-105">On a uniprocessor system, volatile reads and writes ensure that a value is read or written to memory and not cached (for example, in a processor register).</span></span> <span data-ttu-id="6838b-106">したがって、これらの操作を使用して、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期することができます。</span><span class="sxs-lookup"><span data-stu-id="6838b-106">Thus, you can use these operations to synchronize access to a field that can be updated by another thread or by hardware.</span></span>  
  
 <span data-ttu-id="6838b-107">通常のロックではない代わりの同期では、特殊なケースは揮発性メモリ操作です。</span><span class="sxs-lookup"><span data-stu-id="6838b-107">Volatile memory operations are for special cases of synchronization, where normal locking is not an acceptable alternative.</span></span> <span data-ttu-id="6838b-108">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメントでは、および<xref:System.Threading.Monitor>クラスは、データへのアクセスを同期する最も簡単では、少なくともエラーが発生しやすい方法を提供し、<xref:System.Lazy%601>クラスには、単純な使用して直接なく遅延初期化コードを作成する方法の double-checked locking します。</span><span class="sxs-lookup"><span data-stu-id="6838b-108">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide the easiest and least error-prone way of synchronizing access to data, and the <xref:System.Lazy%601> class provides a simple way to write lazy initialization code without directly using double-checked locking.</span></span>  
  
 <span data-ttu-id="6838b-109"><xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType>と<xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>メソッドの言語でサポートされていない機能を有効にします。</span><span class="sxs-lookup"><span data-stu-id="6838b-109">The <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods enable functionality that is not supported in languages.</span></span> <span data-ttu-id="6838b-110">例:</span><span class="sxs-lookup"><span data-stu-id="6838b-110">For example:</span></span>  
  
-   <span data-ttu-id="6838b-111">Visual Basic など、一部の言語では、揮発性メモリの操作の概念は認識されません。</span><span class="sxs-lookup"><span data-stu-id="6838b-111">Some languages, such as Visual Basic, do not recognize the concept of volatile memory operations.</span></span> <span data-ttu-id="6838b-112"><xref:System.Threading.Volatile>クラスには、このような言語では、その機能が用意されています。</span><span class="sxs-lookup"><span data-stu-id="6838b-112">The <xref:System.Threading.Volatile> class provides that functionality in such languages.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6838b-113">これらのメソッドのいずれかを呼び出して、1 つのメモリ アクセスのみに影響します。</span><span class="sxs-lookup"><span data-stu-id="6838b-113">Calling one of these methods affects only a single memory access.</span></span> <span data-ttu-id="6838b-114">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType>と<xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6838b-114">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="6838b-115">C# の場合を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証、<xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType>と<xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>メソッドが、`volatile`修飾子は配列の要素に適用できません。</span><span class="sxs-lookup"><span data-stu-id="6838b-115">In C#, using the `volatile` modifier on a field guarantees that every access to that field uses the <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods, but the `volatile` modifier cannot be applied to array elements.</span></span> <span data-ttu-id="6838b-116"><xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType>と<xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>メソッドは、配列の要素で使用できます。</span><span class="sxs-lookup"><span data-stu-id="6838b-116">The <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods can be used on array elements.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6838b-117">フィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-117">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="6838b-118">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-118">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static bool Read (ref bool location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Read(bool&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Read(bool % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; bool" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-119">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-119">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-120">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-120">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-121">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-121">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-122">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-122">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-123">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-123">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-124">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-124">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static byte Read (ref byte location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Read(unsigned int8&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Read(System::Byte % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; byte" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-125">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-125">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-126">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-126">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-127">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-127">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-128">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-128">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-129">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-129">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-130">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-130">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static double Read (ref double location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Read(float64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Read(double % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; double" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-131">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-131">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-132">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-132">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-133">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-133">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-134">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-134">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-135">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-135">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-136">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-136">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static short Read (ref short location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Read(int16&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Read(short % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; int16" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-137">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-137">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-138">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-138">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-139">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-139">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-140">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-140">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-141">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-141">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-142">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-142">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read (ref int location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read(int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read(int % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; int" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-143">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-143">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-144">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-144">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-145">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-145">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-146">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-146">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-147">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-147">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-148">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-148">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static long Read (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Read(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Read(long % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; int64" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-149">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-149">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-150">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-150">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-151">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-151">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-152">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-152">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-153">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-153">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-154">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-154">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static IntPtr Read (ref IntPtr location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Read(native int&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Read(IntPtr % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; nativeint" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.IntPtr" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-155">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-155">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-156">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-156">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-157">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-157">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-158">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-158">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-159">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-159">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-160">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-160">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static sbyte Read (ref sbyte location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Read(int8&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Read(System::SByte % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; sbyte" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.SByte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-161">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-161">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-162">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-162">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-163">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-163">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-164">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-164">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-165">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-165">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-166">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-166">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static float Read (ref float location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Read(float32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Read(float % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; single" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-167">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-167">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-168">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-168">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-169">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-169">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-170">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-170">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-171">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-171">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-172">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-172">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static ushort Read (ref ushort location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Read(unsigned int16&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Read(System::UInt16 % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; uint16" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-173">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-173">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-174">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-174">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-175">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-175">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-176">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-176">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-177">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-177">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-178">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-178">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int16@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static uint Read (ref uint location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Read(unsigned int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Read(System::UInt32 % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; uint32" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-179">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-179">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-180">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-180">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-181">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-181">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-182">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-182">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-183">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-183">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-184">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-184">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static ulong Read (ref ulong location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Read(unsigned int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Read(System::UInt64 % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; uint64" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-185">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-185">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-186">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-186">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-187">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-187">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-188">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-188">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-189">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-189">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-190">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-190">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int64@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static UIntPtr Read (ref UIntPtr location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native unsigned int Read(native unsigned int&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UIntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UIntPtr) As UIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UIntPtr Read(UIntPtr % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; unativeint" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UIntPtr" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-191">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-191">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-192">指定されたフィールドの値を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-192">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="6838b-193">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-193">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-194">読み取られた値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-194">The value that was read.</span>
          </span>
          <span data-ttu-id="6838b-195">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-195">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-196">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-196">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.IntPtr@)" />
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ref T location) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;class T&gt;(!!T&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Class) (ByRef location As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T Read(T % location);" />
      <MemberSignature Language="F#" Value="static member Read :  -&gt; 'T (requires 'T : null)" Usage="System.Threading.Volatile.Read location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6838b-197">読み取るフィールドの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-197">The type of field to read.</span>
          </span>
          <span data-ttu-id="6838b-198">この型は、値型ではなく、参照型である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-198">This must be a reference type, not a value type.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="6838b-199">読み取るフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-199">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-200">指定したフィールドからオブジェクト参照を読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-200">Reads the object reference from the specified field.</span>
          </span>
          <span data-ttu-id="6838b-201">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの後に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの前へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-201">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6838b-202">読み取られた <paramref name="T" /> への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-202">The reference to <paramref name="T" /> that was read.</span>
          </span>
          <span data-ttu-id="6838b-203">この参照は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-203">This reference is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-204">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-204">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6838b-205">フィールドに値を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-205">Writes a value to a field.</span>
          </span>
          <span data-ttu-id="6838b-206">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-206">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref bool location, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool&amp; location, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Boolean, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool % location, bool value);" />
      <MemberSignature Language="F#" Value="static member Write :  * bool -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Boolean" RefType="ref" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-207">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-207">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-208">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-208">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-209">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-209">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-210">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-210">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-211">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-211">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-212">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-212">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref byte location, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int8&amp; location, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Byte, value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Byte % location, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member Write :  * byte -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Byte" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-213">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-213">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-214">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-214">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-215">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-215">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-216">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-216">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-217">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-217">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-218">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-218">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref double location, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64&amp; location, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Double, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double % location, double value);" />
      <MemberSignature Language="F#" Value="static member Write :  * double -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Double" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-219">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-219">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-220">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-220">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-221">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-221">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-222">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-222">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-223">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-223">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-224">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-224">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref short location, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int16&amp; location, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Short, value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(short % location, short value);" />
      <MemberSignature Language="F#" Value="static member Write :  * int16 -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int16" RefType="ref" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-225">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-225">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-226">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-226">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-227">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-227">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-228">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-228">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-229">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-229">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-230">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-230">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref int location, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32&amp; location, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Integer, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int % location, int value);" />
      <MemberSignature Language="F#" Value="static member Write :  * int -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-231">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-231">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-232">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-232">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-233">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-233">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-234">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-234">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-235">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-235">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-236">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-236">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref long location, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64&amp; location, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Long, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long % location, long value);" />
      <MemberSignature Language="F#" Value="static member Write :  * int64 -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-237">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-237">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-238">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-238">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-239">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-239">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-240">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-240">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-241">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前にメモリ操作が配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-241">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a memory operation appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-242">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-242">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref IntPtr location, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(native int&amp; location, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As IntPtr, value As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(IntPtr % location, IntPtr value);" />
      <MemberSignature Language="F#" Value="static member Write :  * nativeint -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.IntPtr" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-243">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-243">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-244">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-244">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-245">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-245">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-246">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-246">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-247">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-247">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-248">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-248">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref sbyte location, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int8&amp; location, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As SByte, value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::SByte % location, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member Write :  * sbyte -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.SByte" RefType="ref" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-249">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-249">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-250">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-250">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-251">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-251">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-252">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-252">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-253">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-253">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-254">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-254">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref float location, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32&amp; location, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Single, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float % location, float value);" />
      <MemberSignature Language="F#" Value="static member Write :  * single -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Single" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-255">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-255">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-256">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-256">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-257">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-257">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-258">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-258">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-259">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-259">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-260">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-260">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref ushort location, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int16&amp; location, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UShort, value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt16 % location, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member Write :  * uint16 -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt16" RefType="ref" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-261">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-261">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-262">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-262">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-263">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-263">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-264">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-264">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-265">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-265">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-266">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-266">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref uint location, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32&amp; location, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UInteger, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 % location, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member Write :  * uint32 -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32" RefType="ref" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-267">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-267">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-268">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-268">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-269">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-269">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-270">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-270">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-271">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-271">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-272">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-272">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref ulong location, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64&amp; location, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As ULong, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 % location, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member Write :  * uint64 -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt64" RefType="ref" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-273">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-273">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-274">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-274">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-275">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-275">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-276">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-276">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-277">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-277">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-278">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-278">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref UIntPtr location, UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(native unsigned int&amp; location, native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UIntPtr, value As UIntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(UIntPtr % location, UIntPtr value);" />
      <MemberSignature Language="F#" Value="static member Write :  * unativeint -&gt; unit" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UIntPtr" RefType="ref" />
        <Parameter Name="value" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="6838b-279">値を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-279">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-280">書き込む値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-280">The value to write.</span>
          </span>
          <span data-ttu-id="6838b-281">値は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-281">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-282">指定した値を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-282">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-283">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-283">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-284">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-284">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (ref T location, T value) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;class T&gt;(!!T&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write``1(``0@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Class) (ByRef location As T, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static void Write(T % location, T value);" />
      <MemberSignature Language="F#" Value="static member Write :  * 'T -&gt; unit (requires 'T : null)" Usage="System.Threading.Volatile.Write (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="6838b-285">書き込むフィールドの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-285">The type of field to write.</span>
          </span>
          <span data-ttu-id="6838b-286">この型は、値型ではなく、参照型である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-286">This must be a reference type, not a value type.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="6838b-287">オブジェクト参照を書き込むフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-287">The field where the object reference is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="6838b-288">書き込むオブジェクト参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-288">The object reference to write.</span>
          </span>
          <span data-ttu-id="6838b-289">参照は即座に書き込まれるため、コンピューター内のすべてのプロセッサに対して可視になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-289">The reference is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6838b-290">指定したオブジェクト参照を指定したフィールドに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-290">Writes the specified object reference to the specified field.</span>
          </span>
          <span data-ttu-id="6838b-291">これが求められるシステムにおいて、プロセッサがメモリ操作を並べ替えるのを防止するメモリ バリアを挿入します。つまり、コード内でこのメソッドの前に読み取りまたは書き込みが配置されている場合、プロセッサはその操作をこのメソッドの後へ移動できなくなります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6838b-291">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6838b-292">詳細については、<xref:System.Threading.Volatile> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6838b-292">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>