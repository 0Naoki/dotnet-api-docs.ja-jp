<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExecutionContext.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52d11eb2e08ac5047a81064d0fe34fde568252e1d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d11eb2e08ac5047a81064d0fe34fde568252e1d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ExecutionContext">
          <source>Manages the execution context for the current thread.</source>
          <target state="translated">現在のスレッドの実行コンテキストを管理します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ExecutionContext">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> class provides a single container for all information relevant to a logical thread of execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph>クラスは、すべての情報の論理的なスレッドに関連する実行の 1 つのコンテナーを提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>This includes security context, call context, and synchronization context.</source>
          <target state="translated">これには、セキュリティ コンテキスト、呼び出しのコンテキストとの同期コンテキストが含まれます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph>クラスをキャプチャし、このコンテキストをユーザー定義の非同期ポイント間で転送するユーザー コードの機能を提供します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>The common language runtime ensures that the <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> is consistently transferred across runtime-defined asynchronous points within the managed process.</source>
          <target state="translated">共通言語ランタイムにより、<ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph>は管理対象プロセス内でのランタイム定義の非同期ポイント間で一貫して転送します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>An execution context is the managed equivalent of a COM apartment.</source>
          <target state="translated">実行コンテキストは、COM アパートメントに対応するマネージです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>Within an application domain, the entire execution context must be transferred whenever a thread is transferred.</source>
          <target state="translated">アプリケーション ドメイン内でスレッドを転送するたびに全体の実行コンテキストを転送する必要があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>This situation occurs during transfers made by the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump.</source>
          <target state="translated">によって行われた転送中にこのような状況が発生した、<ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType&gt;</ph>メソッド、ほとんどのスレッド プールの操作、および Windows フォーム スレッドの Windows メッセージ ポンプを介してマーシャ リングします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>It does not occur in unsafe thread pool operations (such as the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> method), which do not transfer the compressed stack.</source>
          <target state="translated">安全でないスレッド プールの操作では実行されません (など、<ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>メソッド)、これは、圧縮されたスタックに転送しません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow.</source>
          <target state="translated">圧縮されたスタックがフローする、場所にマネージ プリンシパル、同期、ロケール、およびユーザーのコンテキストもフローします。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> class provides the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext.Capture%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.ExecutionContext.CreateCopy%2A&gt;</ph> methods to get the execution context and the <ph id="ph4">&lt;xref:System.Threading.ExecutionContext.Run%2A&gt;</ph> method to set the execution context for the current thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph>クラスを提供、<ph id="ph2">&lt;xref:System.Threading.ExecutionContext.Capture%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Threading.ExecutionContext.CreateCopy%2A&gt;</ph>実行コンテキストを取得するメソッドと<ph id="ph4">&lt;xref:System.Threading.ExecutionContext.Run%2A&gt;</ph>を現在のスレッドの実行コンテキストを設定するメソッド。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>An <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> that is associated with a thread cannot be set on another thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph>関連付けられているスレッドには、別のスレッドで設定できません。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>Attempting to do so will result in an exception being thrown.</source>
          <target state="translated">ようにしようとすると、スローされた例外が発生します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>To propagate the <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> from one thread to another, make a copy of the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.</source>
          <target state="translated">反映されるまで、<ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph>別に、1 つのスレッドからのコピーを作成、<ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>Internally, the <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> stores all data that is associated with the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.LogicalCallContext&gt;</ph>.</source>
          <target state="translated">内部的には、<ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph>に関連付けられているすべてのデータを格納、<ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.LogicalCallContext&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ExecutionContext">
          <source>This allows the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.LogicalCallContext&gt;</ph> data to be propagated when the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph> is copied and transferred.</source>
          <target state="translated">これにより、<ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.LogicalCallContext&gt;</ph>データを反映するときに、<ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>がコピーされ、転送します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Capture">
          <source>Captures the execution context from the current thread.</source>
          <target state="translated">現在のスレッドから実行コンテキストをキャプチャします。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Capture">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> object representing the execution context for the current thread.</source>
          <target state="translated">現在のスレッドの実行コンテキストを表す <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.Capture">
          <source>The captured execution context can be used as the <ph id="ph1">`executionContext`</ph> parameter for the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext.Run%2A&gt;</ph> method.</source>
          <target state="translated">キャプチャされた実行コンテキストとして使用できます、<ph id="ph1">`executionContext`</ph>のパラメーター、<ph id="ph2">&lt;xref:System.Threading.ExecutionContext.Run%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.CreateCopy">
          <source>Creates a copy of the current execution context.</source>
          <target state="translated">現在の実行コンテキストのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.CreateCopy">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> object representing the current execution context.</source>
          <target state="translated">現在の実行コンテキストを表す <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.CreateCopy">
          <source>This method is useful for propagating an execution context from one thread to another.</source>
          <target state="translated">このメソッドは、1 つのスレッドから別の実行コンテキストを反映するために役立ちます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.CreateCopy">
          <source>This context cannot be copied because it is used.</source>
          <target state="translated">このコンテキストは使用されているため、コピーできません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.CreateCopy">
          <source>Only newly captured contexts can be copied.</source>
          <target state="translated">コピーできるのは、新しくキャプチャされたコンテキストだけです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> を使い終わったら <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> メソッドによって、<ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph> は使用不可の状態になります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.ExecutionContext&gt;</ph> was occupying.</source>
          <target state="translated">呼び出した後<ph id="ph1">`Dispose`</ph>へのすべての参照を解放する必要があります、<ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>ガベージ コレクターがメモリを再利用できるようにする、<ph id="ph3">&lt;xref:System.Threading.ExecutionContext&gt;</ph>占有されていた。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>と<bpt id="p2">[</bpt>Dispose メソッドの実装<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> への最後の参照を解放する前に、必ず <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph> を呼び出してください。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">そうしないと、ガベージ コレクターが <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> オブジェクトの <ph id="ph2">`Finalize`</ph> メソッドを呼び出すまで、使用されているリソースは解放されません。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object to be populated with serialization information.</source>
          <target state="translated">シリアル化情報が設定される <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> structure representing the destination context of the serialization.</source>
          <target state="translated">シリアル化の対象コンテキストを表す <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Sets the specified <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with the logical context information needed to recreate an instance of the current execution context.</source>
          <target state="translated">現在の実行コンテキストのインスタンスを再作成するのに必要な論理コンテキスト情報を使用して、指定した <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> オブジェクトを設定します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;xref:System.Threading.ExecutionContext.GetObjectData%2A&gt;</ph> sets a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with the logical call context information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ExecutionContext.GetObjectData%2A&gt;</ph> 設定、<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>論理呼び出しコンテキスト情報。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>During deserialization, the execution context object is reconstituted from the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> transmitted over the stream.</source>
          <target state="translated">逆シリアル化実行コンテキストのオブジェクトはから再構成、<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>ストリームで転送します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.IsFlowSuppressed">
          <source>Indicates whether the flow of the execution context is currently suppressed.</source>
          <target state="translated">実行コンテキストのフローが現在抑制されているかどうかを示します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.IsFlowSuppressed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the flow is suppressed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">フローが抑制されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.IsFlowSuppressed">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A&gt;</ph> method is used by infrastructure components to determine whether to transfer the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph> during asynchronous operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A&gt;</ph>メソッドは、転送するかどうかを決定するインフラストラクチャ コンポーネントによって使用、<ph id="ph2">&lt;xref:System.Threading.ExecutionContext&gt;</ph>非同期操作中にします。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.RestoreFlow">
          <source>Restores the flow of the execution context across asynchronous threads.</source>
          <target state="translated">複数の非同期スレッド間における実行コンテキストのフローを復元します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.RestoreFlow">
          <source><ph id="ph1">&lt;xref:System.Threading.ExecutionContext.RestoreFlow%2A&gt;</ph> reverses the effect of a prior <ph id="ph2">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph> method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ExecutionContext.RestoreFlow%2A&gt;</ph> 前の効果を反転<ph id="ph2">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph>メソッドの呼び出しです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.RestoreFlow">
          <source>This method is called by the <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure returned by the <ph id="ph3">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>によって返される構造体、<ph id="ph3">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.RestoreFlow">
          <source>You should use the <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method to restore the flow of the execution context, not the <ph id="ph2">&lt;xref:System.Threading.ExecutionContext.RestoreFlow%2A&gt;</ph> method.</source>
          <target state="translated">使用する必要があります、<ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph>いない実行コンテキストのフローを復元する方法、<ph id="ph2">&lt;xref:System.Threading.ExecutionContext.RestoreFlow%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.RestoreFlow">
          <source>The context flow cannot be restored because it is not being suppressed.</source>
          <target state="translated">コンテキストのフローは抑制されていないため、復元できません。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph> to set.</source>
          <target state="translated">設定する <ph id="ph1">&lt;see cref="T:System.Threading.ExecutionContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.ContextCallback" /&gt;</ph> delegate that represents the method to be run in the provided execution context.</source>
          <target state="translated">指定した実行コンテキストで実行するメソッドを表す <ph id="ph1">&lt;see cref="T:System.Threading.ContextCallback" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source>The object to pass to the callback method.</source>
          <target state="translated">コールバック メソッドに渡すオブジェクト。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source>Runs a method in a specified execution context on the current thread.</source>
          <target state="translated">現在のスレッドで指定した実行コンテキストを使用してメソッドを実行します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source>The execution context is returned to its previous state when the method completes.</source>
          <target state="translated">メソッドが終了したときに、以前の状態、実行コンテキストが返されます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="executionContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="executionContext" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="executionContext" /&gt;</ph> was not acquired through a capture operation.</source>
          <target state="translated">キャプチャ操作で <ph id="ph1">&lt;paramref name="executionContext" /&gt;</ph> が取得されませんでした。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="executionContext" /&gt;</ph> has already been used as the argument to a <ph id="ph2">&lt;see cref="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" /&gt;</ph> call.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="executionContext" /&gt;</ph> は、<ph id="ph2">&lt;see cref="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)" /&gt;</ph> 呼び出しの引数として既に使用されています。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.SuppressFlow">
          <source>Suppresses the flow of the execution context across asynchronous threads.</source>
          <target state="translated">複数の非同期スレッド間における実行コンテキストのフローを抑制します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.SuppressFlow">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure for restoring the flow.</source>
          <target state="translated">フローを復元するための <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.SuppressFlow">
          <source>Use this method to suppress the flow of the <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> on the current thread.</source>
          <target state="translated">このメソッドを使用して抑制する状況のフロー、<ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph>現在のスレッドにします。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.SuppressFlow">
          <source>You must use the <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method on the returned <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure to restore the flow of the <ph id="ph3">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.</source>
          <target state="translated">使用する必要があります、<ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph>メソッドで返された<ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>のフローを復元する構造体、<ph id="ph3">&lt;xref:System.Threading.ExecutionContext&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.SuppressFlow">
          <source>This method is protected with a <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.Infrastructure?displayProperty=nameWithType&gt;</ph> permission.</source>
          <target state="translated">このメソッドで保護された、<ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.Infrastructure?displayProperty=nameWithType&gt;</ph>権限です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.SuppressFlow">
          <source>A fully trusted component can call this method to suppress the flow of the <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> during asynchronous calls.</source>
          <target state="translated">完全に信頼されたコンポーネントのフローを抑制するには、このメソッドを呼び出すことができます、<ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph>非同期呼び出し中にします。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.SuppressFlow">
          <source>While the flow is suppressed, the <ph id="ph1">&lt;xref:System.Security.SecurityContext.Capture%2A&gt;</ph> method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">フローの抑制中に、<ph id="ph1">&lt;xref:System.Security.SecurityContext.Capture%2A&gt;</ph>メソッドを返します。<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.ExecutionContext.SuppressFlow">
          <source>The context flow is already suppressed.</source>
          <target state="translated">コンテキストのフローは既に抑制されています。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.SuppressFlow">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ExecutionContext.SuppressFlow">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>