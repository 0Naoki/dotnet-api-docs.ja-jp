<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EventWaitHandle.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac504ca1c444cfd772670659b4609b267628b38c728.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04ca1c444cfd772670659b4609b267628b38c728</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.EventWaitHandle">
          <source>Represents a thread synchronization event.</source>
          <target state="translated">スレッドの同期イベントを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class allows threads to communicate with each other by signaling.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>クラスに通知を互いに通信するためにスレッドを使用できます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>Typically, one or more threads block on an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> until an unblocked thread calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, releasing one or more of the blocked threads.</source>
          <target state="translated">通常、1 つまたは複数のスレッドをブロック、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>ブロックされていないスレッドを呼び出すまで、<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>メソッドを 1 つ以上のブロックされたスレッドを解放します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>A thread can signal an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> and then block on it, by calling the <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) <ph id="ph4">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">スレッドがシグナル送信、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>から呼び出すことによって、ブロックし、 <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> Visual Basic で)<ph id="ph4">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>クラスは、名前付きシステム同期イベントへのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>The behavior of an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> that has been signaled depends on its reset mode.</source>
          <target state="translated">動作、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>をシグナル状態になった、リセット モードによって異なります。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>An <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph> flag resets automatically when signaled, after releasing a single waiting thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で作成された、<ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>シグナルを受け取ると、1 つの待機中のスレッドを解放した後に、フラグが自動的にリセットされます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>An <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph> flag remains signaled until its <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で作成された、<ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>フラグはまでシグナル状態のまま、<ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>Automatic reset events provide exclusive access to a resource.</source>
          <target state="translated">自動リセット イベントは、リソースへの排他アクセスを提供します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>If an automatic reset event is signaled when no threads are waiting, it remains signaled until a thread attempts to wait on it.</source>
          <target state="translated">自動リセット イベントが通知を受けたとき、待機中のスレッドがない場合は、スレッドが待機中になるまでシグナル状態のままです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>The event releases the thread and immediately resets, blocking subsequent threads.</source>
          <target state="translated">イベントはスレッドを解放してすぐにリセットされ、以降のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>Manual reset events are like gates.</source>
          <target state="translated">ゲートのようなイベントは、手動リセットします。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>When the event is not signaled, threads that wait on it will block.</source>
          <target state="translated">イベントがシグナル状態ではないときに待機しているスレッドがブロックされます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>When the event is signaled, all waiting threads are released, and the event remains signaled (that is, subsequent waits do not block) until its <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called.</source>
          <target state="translated">イベントがシグナル状態に、すべての待機中のスレッドがリリースされると、およびイベント シグナル状態のままと (つまり、後続の待機時間はブロックしません) までその<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>Manual reset events are useful when one thread must complete an activity before other threads can proceed.</source>
          <target state="translated">手動リセット イベントは他のスレッドを続行する前に、1 つのスレッドは、アクティビティを完了する必要がある場合に役立ちます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> objects can be used with the <ph id="ph2">`static`</ph>(<ph id="ph3">`Shared`</ph> in Visual Basic) <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph5">&lt;xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> オブジェクトで使用できる、 <ph id="ph2">`static`</ph>(<ph id="ph3">`Shared`</ph> Visual Basic で)<ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph5">&lt;xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>For more information about thread synchronization mechanisms, see <bpt id="p1">[</bpt>EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent<ept id="p1">](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)</ept>.</source>
          <target state="translated">スレッド同期機構の詳細については、次を参照してください。 <bpt id="p1">[</bpt>EventWaitHandle、AutoResetEvent、CountdownEvent、ManualResetEvent<ept id="p1">](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29&gt;</ph> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29&gt;</ph>メイン スレッドをブロックされたスレッドを通知し、スレッドがタスクを完了するまで待機を許可するメソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>The example starts five threads and allows them to block on an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph> flag, then releases one thread each time the user presses the ENTER key.</source>
          <target state="translated">例では、5 つのスレッドを開始しをブロックすることができます、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で作成された、<ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>フラグ、ENTER キーを押すのリリース 1 つのスレッドの時間。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>The example then queues another five threads and releases them all using an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">例は、別の 5 つのスレッド キューに配置し、すべてを使用して、解放、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で作成された、<ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.EventWaitHandle">
          <source>This type is thread safe.</source>
          <target state="translated">この型はスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Threading.EventWaitHandle">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state to signaled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set it to nonsignaled.</source>
          <target state="translated">初期状態をシグナル状態に設定する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。非シグナル状態に設定する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Threading.EventResetMode" /&gt;</ph> values that determines whether the event resets automatically or manually.</source>
          <target state="translated">イベントが自動的にリセットされるかまたは手動でリセットされるかを指定する <ph id="ph1">&lt;see cref="T:System.Threading.EventResetMode" /&gt;</ph> 値の 1 つ。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> class, specifying whether the wait handle is initially signaled, and whether it resets automatically or manually.</source>
          <target state="translated">待機ハンドルの初期状態をシグナル状態に設定するかどうか、および、待機ハンドルが自動的にリセットされるかまたは手動でリセットされるかを指定して、<ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
          <source>If the initial state of the event is nonsignaled, threads that wait on the event will block.</source>
          <target state="translated">イベントの初期状態が非シグナル状態の場合は、イベントを待機しているスレッドはブロックされます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
          <source>If the initial state is signaled, and the <ph id="ph1">&lt;xref:System.Threading.EventResetMode.ManualReset&gt;</ph> flag is specified for <ph id="ph2">`mode`</ph>, threads that wait on the event will not block.</source>
          <target state="translated">初期状態が通知される場合、<ph id="ph1">&lt;xref:System.Threading.EventResetMode.ManualReset&gt;</ph>フラグが指定されて<ph id="ph2">`mode`</ph>イベントを待機しているスレッドはブロックされません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
          <source>If the initial state is signaled, and <ph id="ph1">`mode`</ph> is <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset&gt;</ph>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</source>
          <target state="translated">初期状態が通知される場合と<ph id="ph1">`mode`</ph>は<ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset&gt;</ph>イベントで待機する最初のスレッドはすぐに解放される、その後、イベントはリセット、および後続のスレッドがブロックされます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29&gt;</ph> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29&gt;</ph>メイン スレッドをブロックされたスレッドを通知し、スレッドがタスクを完了するまで待機を許可するメソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
          <source>The example starts five threads and allows them to block on an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph> flag, then releases one thread each time the user presses ENTER key.</source>
          <target state="translated">例では、5 つのスレッドを開始しをブロックすることができます、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で作成された、<ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>フラグ、し、ENTER キーを押すのリリース 1 つのスレッドの時間。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
          <source>The example then queues another five threads and releases them all using an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">例は、別の 5 つのスレッド キューに配置し、すべてを使用して、解放、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で作成された、<ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state to signaled if the named event is created as a result of this call; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set it to nonsignaled.</source>
          <target state="translated">名前の付いたイベントがこの呼び出しの結果として作成された場合に、初期状態をシグナル状態に設定するには <ph id="ph1">&lt;see langword="true" /&gt;</ph>、非シグナル状態に設定するには <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Threading.EventResetMode" /&gt;</ph> values that determines whether the event resets automatically or manually.</source>
          <target state="translated">イベントが自動的にリセットされるかまたは手動でリセットされるかを指定する <ph id="ph1">&lt;see cref="T:System.Threading.EventResetMode" /&gt;</ph> 値の 1 つ。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>The name of a system-wide synchronization event.</source>
          <target state="translated">システム全体の同期イベントの名前。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, and the name of a system synchronization event.</source>
          <target state="translated">この呼び出しの結果として待機ハンドルが作成された場合に待機ハンドルの初期状態をシグナル状態に設定するかどうか、待機ハンドルが自動的にリセットされるかまたは手動でリセットされるか、およびシステムの同期イベントの名前を指定して、<ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>If <ph id="ph1">`name`</ph> is <ph id="ph2">`null`</ph> or an empty string, a local <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> is created.</source>
          <target state="translated">場合<ph id="ph1">`name`</ph>は<ph id="ph2">`null`</ph>または空の文字列、ローカル<ph id="ph3">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>を作成します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>If a system event with the name specified for the <ph id="ph1">`name`</ph> parameter already exists, the <ph id="ph2">`initialState`</ph> parameter is ignored.</source>
          <target state="translated">場合に指定された名前のシステム イベント、<ph id="ph1">`name`</ph>パラメーターが既に存在する、<ph id="ph2">`initialState`</ph>パラメーターは無視されます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>When using this constructor for named system events, specify <ph id="ph1">`false`</ph> for <ph id="ph2">`initialState`</ph>.</source>
          <target state="translated">このコンス トラクターの名前付きシステム イベントを使用する場合は、指定<ph id="ph1">`false`</ph>の<ph id="ph2">`initialState`</ph>します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>This constructor provides no way to determine whether a named system event was created, so you cannot make any assumptions about the state of the named event.</source>
          <target state="translated">このコンス トラクターには、名前付きのイベントの状態に関するどのような想定をすることはできませんので、名前付きシステム イベントが作成されたかどうかを決定する方法はありません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>To determine whether a named event was created, use the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%29&gt;</ph> constructor or the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%2CSystem.Security.AccessControl.EventWaitHandleSecurity%29&gt;</ph> constructor.</source>
          <target state="translated">指定したイベントが作成されたかどうかを確認するには<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%29&gt;</ph>コンス トラクターまたは<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.%23ctor%28System.Boolean%2CSystem.Threading.EventResetMode%2CSystem.String%2CSystem.Boolean%40%2CSystem.Security.AccessControl.EventWaitHandleSecurity%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>If the initial state of the event is nonsignaled, threads that wait on the event will block.</source>
          <target state="translated">イベントの初期状態が非シグナル状態の場合は、イベントを待機しているスレッドはブロックされます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>If the initial state is signaled, and the <ph id="ph1">&lt;xref:System.Threading.EventResetMode.ManualReset&gt;</ph> flag is specified for <ph id="ph2">`mode`</ph>, threads that wait on the event will not block.</source>
          <target state="translated">初期状態が通知される場合、<ph id="ph1">&lt;xref:System.Threading.EventResetMode.ManualReset&gt;</ph>フラグが指定されて<ph id="ph2">`mode`</ph>イベントを待機しているスレッドはブロックされません。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>If the initial state is signaled, and <ph id="ph1">`mode`</ph> is <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset&gt;</ph>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</source>
          <target state="translated">初期状態が通知される場合と<ph id="ph1">`mode`</ph>は<ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset&gt;</ph>イベントで待機する最初のスレッドはすぐに解放される、その後、イベントはリセット、および後続のスレッドがブロックされます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>A Win32 error occurred.</source>
          <target state="translated">Win32 エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>The named event exists and has access control security, but the user does not have <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" /&gt;</ph>.</source>
          <target state="translated">アクセス制御セキュリティを使用した名前付きイベントが存在しますが、ユーザーに <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" /&gt;</ph> がありません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>The named event cannot be created, perhaps because a wait handle of a different type has the same name.</source>
          <target state="translated">名前付きイベントを作成できません。別の型の待機ハンドルに同じ名前が付けられていることが原因として考えられます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is longer than 260 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が 260 文字を超えています。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state to signaled if the named event is created as a result of this call; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set it to nonsignaled.</source>
          <target state="translated">名前の付いたイベントがこの呼び出しの結果として作成された場合に、初期状態をシグナル状態に設定するには <ph id="ph1">&lt;see langword="true" /&gt;</ph>、非シグナル状態に設定するには <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Threading.EventResetMode" /&gt;</ph> values that determines whether the event resets automatically or manually.</source>
          <target state="translated">イベントが自動的にリセットされるかまたは手動でリセットされるかを指定する <ph id="ph1">&lt;see cref="T:System.Threading.EventResetMode" /&gt;</ph> 値の 1 つ。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>The name of a system-wide synchronization event.</source>
          <target state="translated">システム全体の同期イベントの名前。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>When this method returns, contains <ph id="ph1">&lt;see langword="true" /&gt;</ph> if a local event was created (that is, if <bpt id="p1">&lt;c&gt;</bpt>name<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty string) or if the specified named system event was created; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the specified named system event already existed.</source>
          <target state="translated">このメソッドから制御が戻るときに、ローカル イベントが作成された場合 (<bpt id="p1">&lt;c&gt;</bpt>name<ept id="p1">&lt;/c&gt;</ept> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> または空の文字列の場合)、または指定した名前付きシステム イベントが作成された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph> が格納されます。指定した名前付きシステム イベントが既に存在する場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> が格納されます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">このパラメーターは初期化せずに渡されます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, the name of a system synchronization event, and a Boolean variable whose value after the call indicates whether the named system event was created.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> クラスの新しいインスタンスを初期化し、待機ハンドルがこの呼び出しの結果として作成された場合に最初にシグナル状態になるかどうか、リセットは自動または手動か、システムの同期イベントの名前、呼び出しの後の値で名前の付いたシステム イベントが作成されたかどうかを示すブール値変数を指定します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>If a system event with the name specified for the <ph id="ph1">`name`</ph> parameter already exists, the <ph id="ph2">`initialState`</ph> parameter is ignored.</source>
          <target state="translated">場合に指定された名前のシステム イベント、<ph id="ph1">`name`</ph>パラメーターが既に存在する、<ph id="ph2">`initialState`</ph>パラメーターは無視されます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>After calling this constructor, use the value in the variable specified for the <ph id="ph1">`ref`</ph> parameter (<ph id="ph2">`ByRef`</ph> parameter in Visual Basic)<ph id="ph3">`createdNew`</ph> to determine whether the named system event already existed or was created.</source>
          <target state="translated">このコンス トラクターを呼び出すと、指定された変数の値を使用して、<ph id="ph1">`ref`</ph>パラメーター (<ph id="ph2">`ByRef`</ph> Visual Basic でのパラメーター)<ph id="ph3">`createdNew`</ph>を名前付きシステム イベントが既に存在していたか、作成されたかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>If the initial state of the event is nonsignaled, threads that wait on the event will block.</source>
          <target state="translated">イベントの初期状態が非シグナル状態の場合は、イベントを待機しているスレッドはブロックされます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>If the initial state is signaled, and the <ph id="ph1">&lt;xref:System.Threading.EventResetMode.ManualReset&gt;</ph> flag is specified for <ph id="ph2">`mode`</ph>, threads that wait on the event will not block.</source>
          <target state="translated">初期状態が通知される場合、<ph id="ph1">&lt;xref:System.Threading.EventResetMode.ManualReset&gt;</ph>フラグが指定されて<ph id="ph2">`mode`</ph>イベントを待機しているスレッドはブロックされません。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>If the initial state is signaled, and <ph id="ph1">`mode`</ph> is <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset&gt;</ph>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</source>
          <target state="translated">初期状態が通知される場合と<ph id="ph1">`mode`</ph>は<ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset&gt;</ph>イベントで待機する最初のスレッドはすぐに解放される、その後、イベントはリセット、および後続のスレッドがブロックされます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>A Win32 error occurred.</source>
          <target state="translated">Win32 エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>The named event exists and has access control security, but the user does not have <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" /&gt;</ph>.</source>
          <target state="translated">アクセス制御セキュリティを使用した名前付きイベントが存在しますが、ユーザーに <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" /&gt;</ph> がありません。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>The named event cannot be created, perhaps because a wait handle of a different type has the same name.</source>
          <target state="translated">名前付きイベントを作成できません。別の型の待機ハンドルに同じ名前が付けられていることが原因として考えられます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is longer than 260 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が 260 文字を超えています。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state to signaled if the named event is created as a result of this call; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set it to nonsignaled.</source>
          <target state="translated">名前の付いたイベントがこの呼び出しの結果として作成された場合に、初期状態をシグナル状態に設定するには <ph id="ph1">&lt;see langword="true" /&gt;</ph>、非シグナル状態に設定するには <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Threading.EventResetMode" /&gt;</ph> values that determines whether the event resets automatically or manually.</source>
          <target state="translated">イベントが自動的にリセットされるかまたは手動でリセットされるかを指定する <ph id="ph1">&lt;see cref="T:System.Threading.EventResetMode" /&gt;</ph> 値の 1 つ。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The name of a system-wide synchronization event.</source>
          <target state="translated">システム全体の同期イベントの名前。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>When this method returns, contains <ph id="ph1">&lt;see langword="true" /&gt;</ph> if a local event was created (that is, if <bpt id="p1">&lt;c&gt;</bpt>name<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty string) or if the specified named system event was created; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the specified named system event already existed.</source>
          <target state="translated">このメソッドから制御が戻るときに、ローカル イベントが作成された場合 (<bpt id="p1">&lt;c&gt;</bpt>name<ept id="p1">&lt;/c&gt;</ept> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> または空の文字列の場合)、または指定した名前付きシステム イベントが作成された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph> が格納されます。指定した名前付きシステム イベントが既に存在する場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> が格納されます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">このパラメーターは初期化せずに渡されます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> object that represents the access control security to be applied to the named system event.</source>
          <target state="translated">名前付きシステム イベントに適用するアクセス制御セキュリティを表す <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> class, specifying whether the wait handle is initially signaled if created as a result of this call, whether it resets automatically or manually, the name of a system synchronization event, a Boolean variable whose value after the call indicates whether the named system event was created, and the access control security to be applied to the named event if it is created.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> クラスの新しいインスタンスを初期化し、待機ハンドルがこの呼び出しの結果として作成された場合に最初にシグナル状態になるかどうか、リセットは自動または手動か、システムの同期イベントの名前、呼び出しの後の値で名前の付いたシステム イベントが作成されたかどうかを示すブール値変数、および名前の付いたシステム イベントが作成された場合は、そのイベントにアクセス制御セキュリティを適用するかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>Use this constructor to apply access control security to a named system event when it is created, preventing other code from taking control of the event.</source>
          <target state="translated">このコンス トラクターを使用すると、それが作成されるとき、その他のコードがイベントを制御するを妨げて名前付きシステム イベントにアクセス制御セキュリティを適用できます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>This constructor initializes an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object that represents a system event.</source>
          <target state="translated">このコンス トラクター、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>システム イベントを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>You can create multiple <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> objects that represent the same system event.</source>
          <target state="translated">複数作成できます<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>を同じシステム イベントを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If the system event does not exist, it is created with the specified access control security.</source>
          <target state="translated">システム イベントが存在しない場合、指定したアクセス制御セキュリティで作成されます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If the event exists, the specified access control security is ignored.</source>
          <target state="translated">イベントが存在する場合は、指定したアクセス制御セキュリティが無視されます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The caller has full control over the newly created <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object even if <ph id="ph2">`eventSecurity`</ph> denies or fails to grant some access rights to the current user.</source>
          <target state="translated">呼び出し元が新しく作成されたに対するフル コントロール<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>オブジェクト場合であっても<ph id="ph2">`eventSecurity`</ph>拒否するか、現在のユーザーには、いくつかのアクセス権限を付与が失敗します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>However, if the current user attempts to get another <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object to represent the same named event, using either a constructor or the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%2A&gt;</ph> method, Windows access control security is applied.</source>
          <target state="translated">ただし、現在のユーザーが別の取得を試みると<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>オブジェクトの同じを表すという名前を使用して、イベント、コンス トラクターまたは<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%2A&gt;</ph>メソッド、Windows アクセス制御セキュリティを適用します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If a system event with the name specified for the <ph id="ph1">`name`</ph> parameter already exists, the <ph id="ph2">`initialState`</ph> parameter is ignored.</source>
          <target state="translated">場合に指定された名前のシステム イベント、<ph id="ph1">`name`</ph>パラメーターが既に存在する、<ph id="ph2">`initialState`</ph>パラメーターは無視されます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>After calling this constructor, use the value in the variable specified for the <ph id="ph1">`ref`</ph> parameter (<ph id="ph2">`ByRef`</ph> parameter in Visual Basic) <ph id="ph3">`createdNew`</ph> to determine whether the named system event already existed or was created.</source>
          <target state="translated">このコンス トラクターを呼び出すと、指定された変数の値を使用して、<ph id="ph1">`ref`</ph>パラメーター (<ph id="ph2">`ByRef`</ph> Visual Basic でのパラメーター)<ph id="ph3">`createdNew`</ph>を名前付きシステム イベントが既に存在していたか、作成されたかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If the initial state of the event is nonsignaled, threads that wait on the event will block.</source>
          <target state="translated">イベントの初期状態が非シグナル状態の場合は、イベントを待機しているスレッドはブロックされます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If the initial state is signaled, and the <ph id="ph1">&lt;xref:System.Threading.EventResetMode.ManualReset&gt;</ph> flag is specified for <ph id="ph2">`mode`</ph>, threads that wait on the event will not block.</source>
          <target state="translated">初期状態が通知される場合、<ph id="ph1">&lt;xref:System.Threading.EventResetMode.ManualReset&gt;</ph>フラグが指定されて<ph id="ph2">`mode`</ph>イベントを待機しているスレッドはブロックされません。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If the initial state is signaled, and <ph id="ph1">`mode`</ph> is <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset&gt;</ph>, the first thread that waits on the event will be released immediately, after which the event will reset, and subsequent threads will block.</source>
          <target state="translated">初期状態が通知される場合と<ph id="ph1">`mode`</ph>は<ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset&gt;</ph>イベントで待機する最初のスレッドはすぐに解放される、その後、イベントはリセット、および後続のスレッドがブロックされます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The following code example demonstrates the cross-process behavior of a named system event with access control security.</source>
          <target state="translated">次のコード例は、アクセス制御セキュリティを名前付きシステム イベントのプロセス間の動作を示します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph> method overload to test for the existence of a named event.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>メソッドのオーバー ロードを名前付きイベントの存在をテストします。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</source>
          <target state="translated">イベントが存在しない場合は、初期所有権と現在のユーザーに、イベントを使用する権限を拒否読み取りし、イベントのアクセス許可を変更する権限を付与するアクセス制御セキュリティで作成されます。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>.</source>
          <target state="translated">2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The exception is caught, and the example uses the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph> method overload to wait on the event with the rights needed to read and change the permissions.</source>
          <target state="translated">例外をキャッチし、この例では、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph>メソッドのオーバー ロードを読み書きアクセス許可を変更するために必要な権限を持つイベントを待機します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>After the permissions are changed, the event is opened with the rights required to wait on it and signal it.</source>
          <target state="translated">アクセス許可を変更すると、イベントが待機して、通知に必要な権限で開かれます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If you run the compiled example from a third command window, the example runs using the new permissions.</source>
          <target state="translated">3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用する例が実行されます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>A Win32 error occurred.</source>
          <target state="translated">Win32 エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The named event exists and has access control security, but the user does not have <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" /&gt;</ph>.</source>
          <target state="translated">アクセス制御セキュリティを使用した名前付きイベントが存在しますが、ユーザーに <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.FullControl" /&gt;</ph> がありません。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The named event cannot be created, perhaps because a wait handle of a different type has the same name.</source>
          <target state="translated">名前付きイベントを作成できません。別の型の待機ハンドルに同じ名前が付けられていることが原因として考えられます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is longer than 260 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が 260 文字を超えています。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> object that represents the access control security for the named system event represented by the current <ph id="ph2">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> オブジェクトによって表される名前付きシステム イベントのアクセス制御セキュリティを表す <ph id="ph2">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> object that represents the access control security for the named system event.</source>
          <target state="translated">名前付きシステム イベントのアクセス制御セキュリティを表す <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A&gt;</ph> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A&gt;</ph>メソッドは、次のフラグ (ビットごとの OR 演算を使用して結合) の組み合わせを使用してアクセス許可を検索する: <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType&gt;</ph>、 <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType&gt;</ph>、および<ph id="ph4">&lt;xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>The user must have <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType&gt;</ph> rights to call this method, and the event must have been opened with the <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">ユーザーがいる必要があります<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType&gt;</ph>でこのメソッドとイベントを呼び出す権限が開かれている必要があります、<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions?displayProperty=nameWithType&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>The following code example demonstrates the cross-process behavior of a named system event with access control security.</source>
          <target state="translated">次のコード例は、アクセス制御セキュリティを名前付きシステム イベントのプロセス間の動作を示します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph> method overload to test for the existence of a named event.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>メソッドのオーバー ロードを名前付きイベントの存在をテストします。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</source>
          <target state="translated">イベントが存在しない場合は、初期所有権と現在のユーザーに、イベントを使用する権限を拒否読み取りし、イベントのアクセス許可を変更する権限を付与するアクセス制御セキュリティで作成されます。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>.</source>
          <target state="translated">2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>The exception is caught, and the example uses the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph> method overload to wait on the event with the rights needed to read and change the permissions.</source>
          <target state="translated">例外をキャッチし、この例では、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph>メソッドのオーバー ロードを読み書きアクセス許可を変更するために必要な権限を持つイベントを待機します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>After the permissions have been read, using the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A&gt;</ph> method, and changed, the event is opened with the rights required to wait on it and signal it.</source>
          <target state="translated">アクセス許可が読み取られるを使用して、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A&gt;</ph>メソッド、変更されると、イベントが開かれる待機し、そのことを通知するために必要な権限を持つとします。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>If you run the compiled example from a third command window, the example runs using the new permissions.</source>
          <target state="translated">3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用する例が実行されます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> object represents a named system event, and the user does not have <ph id="ph2">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> オブジェクトは名前付きシステム イベントを表していますが、ユーザーに <ph id="ph2">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" /&gt;</ph> がありません。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> object represents a named system event, and was not opened with <ph id="ph2">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> オブジェクトは名前付きシステム イベントを表していますが、<ph id="ph2">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.ReadPermissions" /&gt;</ph> で開かれませんでした。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>Not supported for Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Windows 98 または Windows Millennium Edition はサポートされていません。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.GetAccessControl">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> method was previously called on this <ph id="ph2">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> で <ph id="ph2">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> メソッドが既に呼び出されています。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="T:System.Threading.EventWaitHandle">
          <source>Opens a specified named synchronization event, if it already exists.</source>
          <target state="translated">既に存在する場合は、指定した名前付き同期イベントを開きます。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>The name of the system synchronization event to open.</source>
          <target state="translated">開くシステム同期イベントの名前。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>Opens the specified named synchronization event, if it already exists.</source>
          <target state="translated">既に存在する場合は、指定した名前付き同期イベントを開きます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>An  object that represents the named system event.</source>
          <target state="translated">名前付きシステム イベントを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%2A&gt;</ph> method tries to open the specified named system event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%2A&gt;</ph>メソッドは、指定した名前付きシステム イベントを開こうとするとします。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>If the system event does not exist, this method throws an exception instead of creating the system event.</source>
          <target state="translated">システム イベントが存在しない場合、このメソッドは、システム イベントを作成する代わりに例外をスローします。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>To create the system event when it does not already exist, use one of the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.%23ctor%2A&gt;</ph> constructors that has a <ph id="ph2">`name`</ph> parameter.</source>
          <target state="translated">イベントを作成する、システムが既に存在しない場合のいずれかの操作を使用して、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.%23ctor%2A&gt;</ph>コンス トラクターを持つ、<ph id="ph2">`name`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>Multiple calls to this method that use the same value for <ph id="ph1">`name`</ph> do not necessarily return the same <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object, even though the objects that are returned represent the same named system event.</source>
          <target state="translated">このメソッドに対して同じ値を使用する複数の呼び出し<ph id="ph1">`name`</ph>必ずしも返さない同じ<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>場合でも、返されるオブジェクトは、同じ名前付きシステム イベントを表すオブジェクトします。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>This method overload is equivalent to calling the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph> method overload and specifying <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph> rights, combined by using the bitwise OR operation.</source>
          <target state="translated">このメソッドはオーバー ロードを呼び出すことと同等、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph>メソッドのオーバー ロードを指定して<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph>と<ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph>権限、ビットごとの OR 演算を使用して結合します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>Specifying the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph> flag allows a thread to wait on the named system event, and specifying the <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph> flag allows a thread to call the <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> methods.</source>
          <target state="translated">指定する、<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph>フラグにより、スレッドは、名前付きシステム イベントで待機を指定して、<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph>フラグによって、スレッドを呼び出す、<ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>The following code example demonstrates the cross-process behavior of a named system event with access control security.</source>
          <target state="translated">次のコード例は、アクセス制御セキュリティを名前付きシステム イベントのプロセス間の動作を示します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph> method overload to test for the existence of a named event.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>メソッドのオーバー ロードを名前付きイベントの存在をテストします。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</source>
          <target state="translated">イベントが存在しない場合は、初期所有権と現在のユーザーに、イベントを使用する権限を拒否読み取りし、イベントのアクセス許可を変更する権限を付与するアクセス制御セキュリティで作成されます。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>.</source>
          <target state="translated">2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>The exception is caught, and the example uses the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph> method overload to wait on the event with the rights needed to read and change the permissions.</source>
          <target state="translated">例外をキャッチし、この例では、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph>メソッドのオーバー ロードを読み書きアクセス許可を変更するために必要な権限を持つイベントを待機します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>After the permissions are changed, the event is opened with the rights required to wait on it and signal it.</source>
          <target state="translated">アクセス許可を変更すると、イベントが待機して、通知に必要な権限で開かれます。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>If you run the compiled example from a third command window, the example runs using the new permissions.</source>
          <target state="translated">3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用する例が実行されます。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が空の文字列です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is longer than 260 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が 260 文字を超えています。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>The named system event does not exist.</source>
          <target state="translated">名前付きシステム イベントが存在しません。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>A Win32 error occurred.</source>
          <target state="translated">Win32 エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>The named event exists, but the user does not have the security access required to use it.</source>
          <target state="translated">名前付きイベントは存在しますが、それを使用するために必要なセキュリティ アクセスがユーザーにありません。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>The name of the system synchronization event to open.</source>
          <target state="translated">開くシステム同期イベントの名前。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>A bitwise combination of the enumeration values that represent the desired security access.</source>
          <target state="translated">必要なセキュリティ アクセス権を表す列挙値のビットごとの組み合わせ。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>Opens the specified named synchronization event, if it already exists, with the desired security access.</source>
          <target state="translated">これが既に存在する場合は、必要なセキュリティ アクセスで指定した名前付き同期イベントを開きます。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>An object that represents the named system event.</source>
          <target state="translated">名前付きシステム イベントを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>The <ph id="ph1">`rights`</ph> parameter must include the <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph> flag to allow threads to wait on the event, and the <ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph> flag to allow threads to call the <ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`rights`</ph>パラメーターを含める必要があります、<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph>をイベントを待機するスレッドを許可するフラグと<ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph>を呼び出すスレッドを許可するフラグ、<ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>と<ph id="ph5">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%2A&gt;</ph> method tries to open an existing named system event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%2A&gt;</ph>メソッドは、既存の名前付きシステム イベントを開こうとするとします。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>If the system event does not exist, this method throws an exception instead of creating the system event.</source>
          <target state="translated">システム イベントが存在しない場合、このメソッドは、システム イベントを作成する代わりに例外をスローします。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>To create the system event when it does not already exist, use one of the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.%23ctor%2A&gt;</ph> constructors that has a <ph id="ph2">`name`</ph> parameter.</source>
          <target state="translated">イベントを作成する、システムが既に存在しない場合のいずれかの操作を使用して、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.%23ctor%2A&gt;</ph>コンス トラクターを持つ、<ph id="ph2">`name`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>Multiple calls to this method that use the same value for <ph id="ph1">`name`</ph> do not necessarily return the same <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object, even though the objects that are returned represent the same named system event.</source>
          <target state="translated">このメソッドに対して同じ値を使用する複数の呼び出し<ph id="ph1">`name`</ph>必ずしも返さない同じ<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>場合でも、返されるオブジェクトは、同じ名前付きシステム イベントを表すオブジェクトします。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>The following code example demonstrates the cross-process behavior of a named system event with access control security.</source>
          <target state="translated">次のコード例は、アクセス制御セキュリティを名前付きシステム イベントのプロセス間の動作を示します。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph> method overload to test for the existence of a named event.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>メソッドのオーバー ロードを名前付きイベントの存在をテストします。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</source>
          <target state="translated">イベントが存在しない場合は、初期所有権と現在のユーザーに、イベントを使用する権限を拒否読み取りし、イベントのアクセス許可を変更する権限を付与するアクセス制御セキュリティで作成されます。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>.</source>
          <target state="translated">2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>The exception is caught, and the example uses the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph> method overload to wait on the event with the rights needed to read and change the permissions.</source>
          <target state="translated">例外をキャッチし、この例では、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph>メソッドのオーバー ロードを読み書きアクセス許可を変更するために必要な権限を持つイベントを待機します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>After the permissions are changed, the event is opened with the rights required to wait on it and signal it.</source>
          <target state="translated">アクセス許可を変更すると、イベントが待機して、通知に必要な権限で開かれます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>If you run the compiled example from a third command window, the example runs using the new permissions.</source>
          <target state="translated">3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用する例が実行されます。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が空の文字列です。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is longer than 260 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が 260 文字を超えています。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>The named system event does not exist.</source>
          <target state="translated">名前付きシステム イベントが存在しません。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>A Win32 error occurred.</source>
          <target state="translated">Win32 エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>The named event exists, but the user does not have the desired security access.</source>
          <target state="translated">名前付きイベントは存在しますが、必要なセキュリティ アクセスがユーザーにありません。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.Reset">
          <source>Sets the state of the event to nonsignaled, causing threads to block.</source>
          <target state="translated">イベントの状態を非シグナル状態に設定し、スレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.Reset">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation succeeds; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">正常に操作できた場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.Reset">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> method was previously called on this <ph id="ph2">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> で <ph id="ph2">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> メソッドが既に呼び出されています。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.Set">
          <source>Sets the state of the event to signaled, allowing one or more waiting threads to proceed.</source>
          <target state="translated">イベントの状態をシグナル状態に設定し、待機している 1 つ以上のスレッドが進行できるようにします。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.Set">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation succeeds; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">正常に操作できた場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.Set">
          <source>For an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> with <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph> (including <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>), the <ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method releases a single thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で<ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>(含む<ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>) では、<ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>メソッドが 1 つのスレッドを解放します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.Set">
          <source>If there are no waiting threads, the wait handle remains signaled until a thread attempts to wait on it, or until its <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called.</source>
          <target state="translated">待機スレッドが存在しない場合、待機ハンドル シグナル状態のままスレッドが、またはまでお待ちくださいしようとするまでその<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.Set">
          <source>There is no guarantee that every call to the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method will release a thread from an <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> whose reset mode is <ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">保証はありませんをすべての呼び出しに、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>メソッドはからスレッドを解放、<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>がリセット モードは<ph id="ph3">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.Set">
          <source>If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</source>
          <target state="translated">2 つの呼び出しが近すぎる、スレッドが解放される前に 2 番目の呼び出しが行われるように、1 つのスレッドが解放されます。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.Set">
          <source>It is as if the second call did not happen.</source>
          <target state="translated">2 番目の呼び出しが発生しなかったかのようをお勧めします。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.Set">
          <source>Also, if <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> is called when there are no threads waiting and the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> is already signaled, the call has no effect.</source>
          <target state="translated">また場合、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>待機しているスレッドが存在しないときに呼び出されると、<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>が既にシグナル、呼び出しが影響を与えません。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.Set">
          <source>For an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> with <ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph> (including <ph id="ph3">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>), calling the <ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method leaves the wait handle in a signaled state until its <ph id="ph5">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で<ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>(など<ph id="ph3">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>) を呼び出す、<ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>メソッドまでシグナル状態で、待機ハンドルのままにその<ph id="ph5">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.Set">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29&gt;</ph> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29&gt;</ph>メイン スレッドをブロックされたスレッドを通知し、スレッドがタスクを完了するまで待機を許可するメソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.Set">
          <source>The example starts five threads and allows them to block on an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph> flag, then releases one thread each time the user presses the ENTER key.</source>
          <target state="translated">例では、5 つのスレッドを開始しをブロックすることができます、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で作成された、<ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph>フラグ、ENTER キーを押すのリリース 1 つのスレッドの時間。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.Set">
          <source>The example then queues another five threads and releases them all using an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">例は、別の 5 つのスレッド キューに配置し、すべてを使用して、解放、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>で作成された、<ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.Set">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> method was previously called on this <ph id="ph2">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> で <ph id="ph2">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> メソッドが既に呼び出されています。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> object that represents the access control security to be applied to the named system event.</source>
          <target state="translated">名前付きシステム イベントに適用するアクセス制御セキュリティを表す <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.EventWaitHandleSecurity" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>Sets the access control security for a named system event.</source>
          <target state="translated">名前付きシステム イベントのアクセス制御セキュリティを設定します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The user must have <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType&gt;</ph> rights to call this method, and the event must have been opened with the <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">ユーザーがいる必要があります<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType&gt;</ph>でこのメソッドとイベントを呼び出す権限が開かれている必要があります、<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions?displayProperty=nameWithType&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The following code example demonstrates the cross-process behavior of a named system event with access control security.</source>
          <target state="translated">次のコード例は、アクセス制御セキュリティを名前付きシステム イベントのプロセス間の動作を示します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph> method overload to test for the existence of a named event.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>メソッドのオーバー ロードを名前付きイベントの存在をテストします。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If the event does not exist, it is created with initial ownership and access control security that denies the current user the right to use the event, but grants the right to read and change permissions on the event.</source>
          <target state="translated">イベントが存在しない場合は、初期所有権と現在のユーザーに、イベントを使用する権限を拒否読み取りし、イベントのアクセス許可を変更する権限を付与するアクセス制御セキュリティで作成されます。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>.</source>
          <target state="translated">2 つのコマンド ウィンドウからコンパイル済みの例を実行する場合、2 番目のコピーへの呼び出しでアクセス違反例外がスローされます<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The exception is caught, and the example uses the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph> method overload to wait on the event with the rights needed to read and change the permissions.</source>
          <target state="translated">例外をキャッチし、この例では、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph>メソッドのオーバー ロードを読み書きアクセス許可を変更するために必要な権限を持つイベントを待機します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>After the permissions are changed, using the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A&gt;</ph> method, the event is opened with the rights required to wait on it and signal it.</source>
          <target state="translated">使用して、アクセス許可が変更した後、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A&gt;</ph>待機し、そのことを通知するために必要な権限を持つメソッド、イベントを開きます。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>If you run the compiled example from a third command window, the example runs using the new permissions.</source>
          <target state="translated">3 番目のコマンド ウィンドウからコンパイル済みの例を実行する場合は、新しいアクセス許可を使用する例が実行されます。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source><ph id="ph1">&lt;paramref name="eventSecurity" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="eventSecurity" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The user does not have <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" /&gt;</ph>.</source>
          <target state="translated">ユーザーに <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" /&gt;</ph> がありません。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The event was not opened with <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" /&gt;</ph>.</source>
          <target state="translated">イベントは <ph id="ph1">&lt;see cref="F:System.Security.AccessControl.EventWaitHandleRights.ChangePermissions" /&gt;</ph> で開かれませんでした。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> object does not represent a named system event.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> オブジェクトは名前付きシステム イベントを表していません。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> method was previously called on this <ph id="ph2">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> で <ph id="ph2">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> メソッドが既に呼び出されています。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="T:System.Threading.EventWaitHandle">
          <source>Opens a specified named synchronization event, if it already exists, and returns a value that indicates whether the operation succeeded.</source>
          <target state="translated">既に存在する場合は、指定した名前付き同期イベントを開き操作が成功したかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>The name of the system synchronization event to open.</source>
          <target state="translated">開くシステム同期イベントの名前。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>When this method returns, contains a <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> object that represents the named synchronization event if the call succeeded, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the call failed.</source>
          <target state="translated">このメソッドから制御が戻るときに、呼び出しに成功した場合は名前付き同期イベントを表す <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> オブジェクトが格納されます。呼び出しに失敗した場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph> が格納されます。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>This parameter is treated as uninitialized.</source>
          <target state="translated">このパラメーターは初期化前として処理されます。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>Opens the specified named synchronization event, if it already exists, and returns a value that indicates whether the operation succeeded.</source>
          <target state="translated">既に存在する場合は、指定した名前付き同期イベントを開き操作が成功したかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the named synchronization event was opened successfully; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">名前付きの同期イベントが正常に開かれた場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>If the named synchronization event does not exist, this method does not create it.</source>
          <target state="translated">名前付きの同期イベントが存在しない場合、このメソッドが作成していません。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>To create the system event when it does not already exist, use one of the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.%23ctor%2A&gt;</ph> constructors that has a <ph id="ph2">`name`</ph> parameter.</source>
          <target state="translated">イベントを作成する、システムが既に存在しない場合のいずれかの操作を使用して、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.%23ctor%2A&gt;</ph>コンス トラクターを持つ、<ph id="ph2">`name`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>If you are uncertain whether a named synchronization event exists, use this method overload instead of the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph> method overload, which throws an exception if the synchronization event does not exist.</source>
          <target state="translated">名前付きの同期イベントが存在するかどうかが不明な場合は、代わりにこのメソッドのオーバー ロードを使用して、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%29&gt;</ph>メソッド オーバー ロードは、同期イベントが存在しない場合は、例外をスローします。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>This method overload is equivalent to calling the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Threading.EventWaitHandle%40%29&gt;</ph> method overload and specifying <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph> rights, combined by using the bitwise OR operation.</source>
          <target state="translated">このメソッドはオーバー ロードを呼び出すことと同等、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Threading.EventWaitHandle%40%29&gt;</ph>メソッドのオーバー ロードを指定して<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph>と<ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph>権限、ビットごとの OR 演算を使用して結合します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>Specifying the <ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph> flag allows a thread to wait on the named system event, and specifying the <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph> flag allows a thread to call the <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> methods.</source>
          <target state="translated">指定する、<ph id="ph1">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph>フラグにより、スレッドは、名前付きシステム イベントで待機を指定して、<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph>フラグによって、スレッドを呼び出す、<ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>Multiple calls to this method that use the same value for <ph id="ph1">`name`</ph> do not necessarily return the same <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object, even though the objects that are returned represent the same named system event.</source>
          <target state="translated">このメソッドに対して同じ値を使用する複数の呼び出し<ph id="ph1">`name`</ph>必ずしも返さない同じ<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>場合でも、返されるオブジェクトは、同じ名前付きシステム イベントを表すオブジェクトします。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が空の文字列です。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is longer than 260 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が 260 文字を超えています。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>A Win32 error occurred.</source>
          <target state="translated">Win32 エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>The named event exists, but the user does not have the desired security access.</source>
          <target state="translated">名前付きイベントは存在しますが、必要なセキュリティ アクセスがユーザーにありません。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>The name of the system synchronization event to open.</source>
          <target state="translated">開くシステム同期イベントの名前。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>A bitwise combination of the enumeration values that represent the desired security access.</source>
          <target state="translated">必要なセキュリティ アクセス権を表す列挙値のビットごとの組み合わせ。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>When this method returns, contains a <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> object that represents the named synchronization event if the call succeeded, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the call failed.</source>
          <target state="translated">このメソッドから制御が戻るときに、呼び出しに成功した場合は名前付き同期イベントを表す <ph id="ph1">&lt;see cref="T:System.Threading.EventWaitHandle" /&gt;</ph> オブジェクトが格納されます。呼び出しに失敗した場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph> が格納されます。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>This parameter is treated as uninitialized.</source>
          <target state="translated">このパラメーターは初期化前として処理されます。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>Opens the specified named synchronization event, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</source>
          <target state="translated">既に存在する場合は、必要なセキュリティ アクセスを使って指定した名前付き同期イベントを開き、操作が成功したかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the named synchronization event was opened successfully; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">名前付きの同期イベントが正常に開かれた場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>If the named synchronization event does not exist, this method does not create it.</source>
          <target state="translated">名前付きの同期イベントが存在しない場合、このメソッドが作成していません。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>To create the system event when it does not already exist, use one of the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.%23ctor%2A&gt;</ph> constructors that has a <ph id="ph2">`name`</ph> parameter.</source>
          <target state="translated">イベントを作成する、システムが既に存在しない場合のいずれかの操作を使用して、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.%23ctor%2A&gt;</ph>コンス トラクターを持つ、<ph id="ph2">`name`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>If you are uncertain whether a named synchronization event exists, use this method overload instead of the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph> method overload, which throws an exception if the synchronization event does not exist.</source>
          <target state="translated">名前付きの同期イベントが存在するかどうかが不明な場合は、代わりにこのメソッドのオーバー ロードを使用して、<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%28System.String%2CSystem.Security.AccessControl.EventWaitHandleRights%29&gt;</ph>メソッド オーバー ロードは、同期イベントが存在しない場合は、例外をスローします。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>The <ph id="ph1">`rights`</ph> parameter must include the <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph> flag to allow threads to wait on the event, and the <ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph> flag to allow threads to call the <ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`rights`</ph>パラメーターを含める必要があります、<ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType&gt;</ph>をイベントを待機するスレッドを許可するフラグと<ph id="ph3">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType&gt;</ph>を呼び出すスレッドを許可するフラグ、<ph id="ph4">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>と<ph id="ph5">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>Multiple calls to this method that use the same value for <ph id="ph1">`name`</ph> do not necessarily return the same <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object, even though the objects that are returned represent the same named system event.</source>
          <target state="translated">このメソッドに対して同じ値を使用する複数の呼び出し<ph id="ph1">`name`</ph>必ずしも返さない同じ<ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>場合でも、返されるオブジェクトは、同じ名前付きシステム イベントを表すオブジェクトします。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が空の文字列です。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is longer than 260 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が 260 文字を超えています。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>A Win32 error occurred.</source>
          <target state="translated">Win32 エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>The named event exists, but the user does not have the desired security access.</source>
          <target state="translated">名前付きイベントは存在しますが、必要なセキュリティ アクセスがユーザーにありません。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>