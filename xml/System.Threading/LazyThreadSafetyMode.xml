<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4502e79c5f83c66e066d94d6b0a8fddc75bfa4ea" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46646680" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="6a39e-101">
        <see cref="T:System.Lazy`1" /> インスタンスが複数のスレッド間でアクセスを同期する方法を指定します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6a39e-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a39e-102">この列挙体を使用して、`mode`パラメーターの<xref:System.Lazy%601>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="6a39e-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="6a39e-103">スレッドの同期でのすべてのコンス トラクターの影響があるかどうかに関して、この列挙体に記述できます`mode`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="6a39e-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="6a39e-104">A<xref:System.Lazy%601>初期化のユーザーが指定したメソッドまたはの既定のコンス トラクターのいずれかのインスタンスの初期化`T`します。</span><span class="sxs-lookup"><span data-stu-id="6a39e-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the default constructor for `T`.</span></span> <span data-ttu-id="6a39e-105">初期化メソッドがで指定された、`valueFactory`のパラメーターを<xref:System.Lazy%601>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="6a39e-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="6a39e-106">インスタンスを返します`T`のインスタンスによって遅延インスタンス化される型である<xref:System.Lazy%601>します。</span><span class="sxs-lookup"><span data-stu-id="6a39e-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="6a39e-107">コンス トラクターがない場合、`valueFactory`パラメーターでは、既定のコンス トラクターの`T`を初期化するために使用、<xref:System.Lazy%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="6a39e-107">If a constructor does not have a `valueFactory` parameter, the default constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="6a39e-108">どちらの場合の初期化するには、初めて呼び出すことが行われます。、<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="6a39e-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="6a39e-109">スレッド セーフを指定するだけでなく、<xref:System.Lazy%601>この列挙体のインスタンスでは、例外がキャッシュに影響します。</span><span class="sxs-lookup"><span data-stu-id="6a39e-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="6a39e-110">例外をキャッシュする場合、<xref:System.Lazy%601>インスタンス、インスタンスを初期化する機会を 1 つだけを取得します。</span><span class="sxs-lookup"><span data-stu-id="6a39e-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="6a39e-111">呼び出した場合、例外がスローされて初めて、<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>プロパティ、例外はキャッシュされ、以降すべての呼び出しで再スロー、<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="6a39e-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6a39e-112">例外をキャッシュする利点は、エラーが発生した場合でも、任意の 2 つのスレッドがその結果は同じを常に取得します。</span><span class="sxs-lookup"><span data-stu-id="6a39e-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="6a39e-113">PublicationOnly モードを指定すると、例外はキャッシュされません。</span><span class="sxs-lookup"><span data-stu-id="6a39e-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="6a39e-114">None を指定すると ExecutionAndPublication、キャッシュによって異なるかどうか、初期化メソッドを指定するか、許可の既定のコンス トラクターまたは`T`使用します。</span><span class="sxs-lookup"><span data-stu-id="6a39e-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for `T` to be used.</span></span> <span data-ttu-id="6a39e-115">初期化メソッドを指定すると、この 2 つのモードで例外キャッシュが有効になります。</span><span class="sxs-lookup"><span data-stu-id="6a39e-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="6a39e-116">初期化メソッドは非常に単純にすることができます。</span><span class="sxs-lookup"><span data-stu-id="6a39e-116">The initialization method can be very simple.</span></span> <span data-ttu-id="6a39e-117">たとえば、`T` に既定のコンストラクターを呼び出すことができます。C# の場合は `new Lazy<Contents>(() => new Contents(), mode)`、Visual Basic の場合は `New Lazy(Of Contents)(Function() New Contents())` です。</span><span class="sxs-lookup"><span data-stu-id="6a39e-117">For example, it might call the default constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="6a39e-118">既定のコンス トラクターからスローされる例外で、初期化メソッドを指定していないコンス トラクターを使用するかどうかは`T`はキャッシュされません。</span><span class="sxs-lookup"><span data-stu-id="6a39e-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for `T` are not cached.</span></span> <span data-ttu-id="6a39e-119">次の表は、例外がキャッシュの動作をまとめたものです。</span><span class="sxs-lookup"><span data-stu-id="6a39e-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="6a39e-120">モード</span><span class="sxs-lookup"><span data-stu-id="6a39e-120">Mode</span></span>|<span data-ttu-id="6a39e-121">初期化メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="6a39e-121">Using initialization method</span></span>|<span data-ttu-id="6a39e-122">既定のコンス トラクターを使用します。 `T`</span><span class="sxs-lookup"><span data-stu-id="6a39e-122">Using default constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="6a39e-123">なし</span><span class="sxs-lookup"><span data-stu-id="6a39e-123">None</span></span>|<span data-ttu-id="6a39e-124">キャッシュ済み</span><span class="sxs-lookup"><span data-stu-id="6a39e-124">Cached</span></span>|<span data-ttu-id="6a39e-125">キャッシュされていません。</span><span class="sxs-lookup"><span data-stu-id="6a39e-125">Not cached</span></span>|  
|<span data-ttu-id="6a39e-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="6a39e-126">PublicationOnly</span></span>|<span data-ttu-id="6a39e-127">キャッシュされていません。</span><span class="sxs-lookup"><span data-stu-id="6a39e-127">Not cached</span></span>|<span data-ttu-id="6a39e-128">キャッシュされていません。</span><span class="sxs-lookup"><span data-stu-id="6a39e-128">Not cached</span></span>|  
|<span data-ttu-id="6a39e-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="6a39e-129">ExecutionAndPublication</span></span>|<span data-ttu-id="6a39e-130">キャッシュ済み</span><span class="sxs-lookup"><span data-stu-id="6a39e-130">Cached</span></span>|<span data-ttu-id="6a39e-131">キャッシュされていません。</span><span class="sxs-lookup"><span data-stu-id="6a39e-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">
      <span data-ttu-id="6a39e-132">限定的な初期化</span>
      <span class="sxs-lookup">
        <span data-stu-id="6a39e-132">Lazy Initialization</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="6a39e-133">ロックを使って確実に 1 つのスレッドのみが <see cref="T:System.Lazy`1" /> インスタンスをスレッド セーフな方法で初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-133">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span>
          </span>
          <span data-ttu-id="6a39e-134">初期化メソッド (初期化メソッドがない場合は、既定のコンストラクター) は内部でロックを使うため、デッドロックが発生することがあります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-134">If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span>
          </span>
          <span data-ttu-id="6a39e-135">初期化メソッドを指定した (<paramref name="valueFactory" /> パラメーター) <see cref="T:System.Lazy`1" /> コンストラクターを使った場合に、<see cref="P:System.Lazy`1.Value" /> プロパティを初回に呼び出したときに初期化メソッドが例外をスローした (または例外のハンドルに失敗した) 場合、その例外はキャッシュされ、それ以降に <see cref="P:System.Lazy`1.Value" /> プロパティを呼び出した時点で再度スローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-135">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="6a39e-136">初期化メソッドを指定しない <see cref="T:System.Lazy`1" /> コンストラクターを使った場合、<paramref name="T" /> について既定のコンストラクターからスローされる例外はキャッシュされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-136">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="6a39e-137">その場合、<see cref="P:System.Lazy`1.Value" /> プロパティへの後続の呼び出しで <see cref="T:System.Lazy`1" /> インスタンスが正常に初期化される可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-137">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="6a39e-138">初期化メソッドが <see cref="T:System.Lazy`1" /> インスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティに再帰的にアクセスすると、<see cref="T:System.InvalidOperationException" /> がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-138">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="6a39e-139">
            <see cref="T:System.Lazy`1" /> インスタンスはスレッド セーフではありません。インスタンスに複数のスレッドからアクセスした場合の動作は未定義です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-139">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span>
          </span>
          <span data-ttu-id="6a39e-140">高いパフォーマンスが重要であり、<see cref="T:System.Lazy`1" /> インスタンスが複数のスレッドから初期化されないことが保証されている場合にのみ、このモードを使ってください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-140">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span>
          </span>
          <span data-ttu-id="6a39e-141">初期化メソッドを指定した (<paramref name="valueFactory" /> パラメーター) <see cref="T:System.Lazy`1" /> コンストラクターを使った場合に、<see cref="P:System.Lazy`1.Value" /> プロパティを初回に呼び出したときに初期化メソッドが例外をスローした (または例外のハンドルに失敗した) 場合、その例外はキャッシュされ、それ以降に <see cref="P:System.Lazy`1.Value" /> プロパティを呼び出した時点で再度スローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-141">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="6a39e-142">初期化メソッドを指定しない <see cref="T:System.Lazy`1" /> コンストラクターを使った場合、<paramref name="T" /> について既定のコンストラクターからスローされる例外はキャッシュされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-142">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="6a39e-143">その場合、<see cref="P:System.Lazy`1.Value" /> プロパティへの後続の呼び出しで <see cref="T:System.Lazy`1" /> インスタンスが正常に初期化される可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-143">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="6a39e-144">初期化メソッドが <see cref="T:System.Lazy`1" /> インスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティに再帰的にアクセスすると、<see cref="T:System.InvalidOperationException" /> がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-144">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="6a39e-145">複数のスレッドが <see cref="T:System.Lazy`1" /> のインスタンスを同時に初期化しようとすると、すべてのスレッドが初期化メソッド (または、初期化メソッドが存在しない場合は既定のコンストラクター) の実行を許可されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-145">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</span>
          </span>
          <span data-ttu-id="6a39e-146">最初に初期化を完了したスレッドが <see cref="T:System.Lazy`1" /> インスタンスの値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-146">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="6a39e-147">初期化メソッドを同時に実行したその他のスレッドには、その値が返されます。ただし、それらのスレッドで初期化メソッドが例外をスローした場合を除きます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-147">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span>
          </span>
          <span data-ttu-id="6a39e-148">競合するスレッドによって作成された <paramref name="T" /> のインスタンスは、すべて破棄されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-148">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span>
          </span>
          <span data-ttu-id="6a39e-149">いずれかのスレッドで初期化メソッドが例外をスローした場合、その例外はそのスレッドの <see cref="P:System.Lazy`1.Value" /> プロパティの外に伝達されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-149">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span>
          </span>
          <span data-ttu-id="6a39e-150">例外はキャッシュされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-150">The exception is not cached.</span>
          </span>
          <span data-ttu-id="6a39e-151">
            <see cref="P:System.Lazy`1.IsValueCreated" /> プロパティの値は <see langword="false" /> のままになります。その後、例外がスローされたスレッドまたは他のスレッドが <see cref="P:System.Lazy`1.Value" /> プロパティを呼び出すと、初期化メソッドは再実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-151">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span>
          </span>
          <span data-ttu-id="6a39e-152">初期化メソッドが <see cref="T:System.Lazy`1" /> インスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティに再帰的にアクセスしても、例外はスローされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a39e-152">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>