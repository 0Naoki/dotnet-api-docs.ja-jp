<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ManualResetEventSlim.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57525a47946f2ca16934b6f03acc5ce6bd78e6e66.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7525a47946f2ca16934b6f03acc5ce6bd78e6e66</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Provides a slimmed down version of <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> の規模を小さくしたバージョンを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>You can use this class for better performance than <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> when wait times are expected to be very short, and when the event does not cross a process boundary.</source>
          <target state="translated">このクラスを使用するにはよりもパフォーマンスを向上させるため<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>待機時間が非常に短くなると予想される場合、およびイベントは、プロセス境界を越えないです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> uses busy spinning for a short time while it waits for the event to become signaled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> は、イベントがシグナル状態になるまで待機している間、ビジー スピンを短時間使用します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>When wait times are short, spinning can be much less expensive than waiting by using wait handles.</source>
          <target state="translated">待機時間が短い場合、待機ハンドルを使用して待機するより、スピンを使用するほうが負荷が大幅に低くなります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>However, if the event does not become signaled within a certain period of time, <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> resorts to a regular event handle wait.</source>
          <target state="translated">ただし、特定の期間内にイベントがシグナル状態にならない場合、<ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> は通常のイベント ハンドル待機を使用します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
          <target state="translated">次の例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>For more information about the use of <ph id="ph1">`SpinCount`</ph> and other best practices concerning the use of this type, see <bpt id="p1">[</bpt>ManualResetEvent and ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept>.</source>
          <target state="translated">使用の詳細については<ph id="ph1">`SpinCount`</ph>し、この型の使用に関するその他のベスト プラクティスを参照してください<bpt id="p1">[</bpt>ManualResetEvent と ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of Dispose, which must only be used when all other operations on the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> have completed, and Reset, which should only be used when no other threads are accessing the event.</source>
          <target state="translated">すべてのパブリックおよびプロテクト メンバー<ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>はスレッド セーフであるとする必要がありますのみ Dispose を除き、複数のスレッドから同時に使用することがある場合に使用上の他のすべての操作、<ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>が完了し、リセット、する必要があります場合にのみ使用イベントにアクセスする他のスレッドがありません。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class with an initial state of nonsignaled.</source>
          <target state="translated">初期状態を非シグナル状態にして、<ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
          <source>true to set the initial state signaled; false to set the initial state to nonsignaled.</source>
          <target state="translated">初期状態をシグナル状態に設定する場合は true。初期状態を非シグナル状態に設定する場合は false。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class with a Boolean value indicating whether to set the intial state to signaled.</source>
          <target state="translated">初期状態をシグナル状態に設定するかどうかを示すブール値を使用して、<ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source>true to set the initial state to signaled; false to set the initial state to nonsignaled.</source>
          <target state="translated">初期状態をシグナル状態に設定する場合は true。初期状態を非シグナル状態に設定する場合は false。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source>The number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
          <target state="translated">カーネル ベースの待機操作に戻る前に発生するスピン待機の数。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count.</source>
          <target state="translated">初期状態をシグナル状態に設定するかどうかを示すブール値および指定されたスピン カウントを使用して、<ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="spinCount" /&gt;</ph> is less than 0 or greater than the maximum allowed value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="spinCount" /&gt;</ph> が 0 より小さいか、最大許可値より大きくなっています。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> クラスの現在のインスタンスによって使用されているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> を使い終わったら <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> メソッドによって、<ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> は使用不可の状態になります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> was occupying.</source>
          <target state="translated">呼び出した後<ph id="ph1">`Dispose`</ph>へのすべての参照を解放する必要があります、<ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>ガベージ コレクターがメモリを再利用できるようにする、<ph id="ph3">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>占有されていた。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>と<bpt id="p2">[</bpt>Dispose メソッドの実装<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> への最後の参照を解放する前に、必ず <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> を呼び出してください。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">そうしないと、ガベージ コレクターが <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> オブジェクトの <ph id="ph2">`Finalize`</ph> メソッドを呼び出すまで、使用されているリソースは解放されません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
          <source>true to release both managed and unmanaged resources; false to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は true、アンマネージ リソースだけを解放する場合は false。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> が使用しているアンマネージ リソースを解放します。オプションとして、マネージ リソースを解放することもできます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.</source>
          <target state="translated">ほとんどのメンバーとは異なり<ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>、<ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.Dispose%2A&gt;</ph>スレッド セーフではないと、このインスタンスの他のメンバーと同時に使用できません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Threading.ManualResetEventSlim.IsSet">
          <source>Gets whether the event is set.</source>
          <target state="translated">イベントが設定されているかどうかを取得します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.IsSet">
          <source>true if the event has is set; otherwise, false.</source>
          <target state="translated">イベントが設定されている場合は true。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Reset">
          <source>Sets the state of the event to nonsignaled, which causes threads to block.</source>
          <target state="translated">イベントの状態を非シグナル状態に設定し、スレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Reset">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim.Reset%2A&gt;</ph> can be called concurrently with all members except <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.WaitHandle%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim.Reset%2A&gt;</ph> 除くすべてのメンバーと同時に呼び出すことができる<ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.WaitHandle%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Reset">
          <source>The object has already been disposed.</source>
          <target state="translated">オブジェクトは既には帰されています。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Set">
          <source>Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.</source>
          <target state="translated">イベントの状態をシグナル状態に設定して、イベント上で待機している 1 つ以上のスレッドが進行できるようにします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Threading.ManualResetEventSlim.SpinCount">
          <source>Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
          <target state="translated">カーネル ベースの待機操作に戻る前に発生するスピン待機の数を取得します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.SpinCount">
          <source>Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
          <target state="translated">カーネル ベースの待機操作に戻る前に発生するスピン待機の数を返します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> が設定されるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> が設定されるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The caller of this method blocks indefinitely until the current instance is set.</source>
          <target state="translated">このメソッドは、現在のインスタンスまで、無期限にブロックの呼び出し元が設定されています。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The caller will return immediately if the event is currently in a set state.</source>
          <target state="translated">呼び出し元はかどうか、状態の設定で、イベントが現在はすぐに返します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">待機処理の最大数が制限を超えました。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The object has already been disposed.</source>
          <target state="translated">オブジェクトは既には帰されています。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely.</source>
          <target state="translated">待機するミリ秒数。無制限に待機する場合は <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1)。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a 32-bit signed integer to measure the time interval.</source>
          <target state="translated">32 ビット符号付き整数を使用して時間間隔を計測し、現在の <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> が設定されるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> が設定されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> は無限のタイムアウトを表す -1 以外の負の数です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">待機処理の最大数が制限を超えました。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>The object has already been disposed.</source>
          <target state="translated">オブジェクトは既には帰されています。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">観察する <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> receives a signal, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> を観察すると同時に、現在の <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> が信号を受信するまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The caller of this method blocks indefinitely until the current instance is set.</source>
          <target state="translated">このメソッドは、現在のインスタンスまで、無期限にブロックの呼び出し元が設定されています。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The caller will return immediately if the event is currently in a set state.</source>
          <target state="translated">呼び出し元はかどうか、状態の設定で、イベントが現在はすぐに返します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">待機処理の最大数が制限を超えました。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> が取り消されました。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The object has already been disposed or the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">オブジェクトがすでに破棄されているか、<ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> を作成した <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> が破棄されています。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">待機するミリ秒数を表す <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>。無制限に待機する場合は、-1 ミリ秒を表す <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> を使用して時間間隔を計測し、現在の <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> が設定されるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> が設定されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>The number of milliseconds in <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> のミリ秒数は <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> より大きくなります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">待機処理の最大数が制限を超えました。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>The object has already been disposed.</source>
          <target state="translated">オブジェクトは既には帰されています。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely.</source>
          <target state="translated">待機するミリ秒数。無制限に待機する場合は <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">観察する <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a 32-bit signed integer to measure the time interval, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> を観察すると同時に、32 ビット符号付き整数を使用して時間間隔を計測し、現在の <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> が設定されるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> が設定されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> が取り消されました。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> は無限のタイムアウトを表す -1 以外の負の数です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">待機処理の最大数が制限を超えました。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The object has already been disposed or the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">オブジェクトがすでに破棄されているか、<ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> を作成した <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> が破棄されています。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">待機するミリ秒数を表す <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>。無制限に待機する場合は、-1 ミリ秒を表す <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">観察する <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> を観察すると同時に、<ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> を使用して時間間隔を計測し、現在の <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> が設定されるまで、現在のスレッドをブロックします。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> が設定されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> が取り消されました。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The number of milliseconds in <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> のミリ秒数は <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> より大きくなります。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">待機処理の最大数が制限を超えました。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The object has already been disposed or the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">オブジェクトがすでに破棄されているか、<ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> を作成した <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> が破棄されています。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> の基になる <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> event object fore this <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> の基になる <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> イベント オブジェクト。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>Accessing this property forces initialization of an underlying event object if one hasn't already been created.</source>
          <target state="translated">いずれかまだ作成されていない場合、基になるイベント オブジェクトの初期化を強制するこのプロパティにアクセスします。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>To simply wait on this <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, the public Wait methods should be preferred.</source>
          <target state="translated">これで単純に待機する<ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>待機のパブリック メソッドを優先する必要があります。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>It is recommended to dispose the <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> instance after accessing this property, in order to prevent a resource leak.</source>
          <target state="translated">破棄することをお勧め、<ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>リソース リークを防ぐために、このプロパティにアクセスした後のインスタンス。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>