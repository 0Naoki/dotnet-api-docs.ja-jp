<Type Name="Interlocked" FullName="System.Threading.Interlocked">
  <TypeSignature Language="C#" Value="public static class Interlocked" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Interlocked extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Interlocked" />
  <TypeSignature Language="VB.NET" Value="Public Class Interlocked" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interlocked abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="75186-101">複数のスレッドで共有される変数にアトミックの操作を提供します。</span><span class="sxs-lookup"><span data-stu-id="75186-101">Provides atomic operations for variables that are shared by multiple threads.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-102">このクラスのメソッドは、スレッドの他のスレッドからアクセスできる変数を更新中に、スケジューラがコンテキストを切り替えたときに、または 2 つのスレッドが別々 のプロセッサで同時に実行するときに発生するエラーを防ぐ。</span><span class="sxs-lookup"><span data-stu-id="75186-102">The methods of this class help protect against errors that can occur when the scheduler switches contexts while a thread is updating a variable that can be accessed by other threads, or when two threads are executing concurrently on separate processors.</span></span> <span data-ttu-id="75186-103">このクラスのメンバーでは、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="75186-103">The members of this class do not throw exceptions.</span></span>  
  
 <span data-ttu-id="75186-104"><xref:System.Threading.Interlocked.Increment%2A>と<xref:System.Threading.Interlocked.Decrement%2A>メソッド インクリメントまたは変数をデクリメントし、単一の操作で、結果の値を格納します。</span><span class="sxs-lookup"><span data-stu-id="75186-104">The <xref:System.Threading.Interlocked.Increment%2A> and <xref:System.Threading.Interlocked.Decrement%2A> methods increment or decrement a variable and store the resulting value in a single operation.</span></span> <span data-ttu-id="75186-105">ほとんどのコンピューターで、変数をインクリメントする、次の手順を必要とする、分割不可能な操作ではありません。</span><span class="sxs-lookup"><span data-stu-id="75186-105">On most computers, incrementing a variable is not an atomic operation, requiring the following steps:</span></span>  
  
1.  <span data-ttu-id="75186-106">レジスタに、インスタンス変数から値を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="75186-106">Load a value from an instance variable into a register.</span></span>  
  
2.  <span data-ttu-id="75186-107">インクリメントまたはデクリメント値。</span><span class="sxs-lookup"><span data-stu-id="75186-107">Increment or decrement the value.</span></span>  
  
3.  <span data-ttu-id="75186-108">インスタンスの変数に値を格納します。</span><span class="sxs-lookup"><span data-stu-id="75186-108">Store the value in the instance variable.</span></span>  
  
 <span data-ttu-id="75186-109">使用しない場合<xref:System.Threading.Interlocked.Increment%2A>と<xref:System.Threading.Interlocked.Decrement%2A>、最初の 2 つの手順を実行した後に、スレッド プリエンプションの対象ことができます。</span><span class="sxs-lookup"><span data-stu-id="75186-109">If you do not use <xref:System.Threading.Interlocked.Increment%2A> and <xref:System.Threading.Interlocked.Decrement%2A>, a thread can be preempted after executing the first two steps.</span></span> <span data-ttu-id="75186-110">別のスレッドは、すべての 3 つの手順を実行し、できます。</span><span class="sxs-lookup"><span data-stu-id="75186-110">Another thread can then execute all three steps.</span></span> <span data-ttu-id="75186-111">最初のスレッドが実行を再開インスタンス変数の値を上書き、インクリメントまたはデクリメントが 2 番目のスレッドによって実行されるの影響が失われます。</span><span class="sxs-lookup"><span data-stu-id="75186-111">When the first thread resumes execution, it overwrites the value in the instance variable, and the effect of the increment or decrement performed by the second thread is lost.</span></span>  
  
 <span data-ttu-id="75186-112"><xref:System.Threading.Interlocked.Exchange%2A>メソッドが、指定された変数の値をアトミックに交換します。</span><span class="sxs-lookup"><span data-stu-id="75186-112">The <xref:System.Threading.Interlocked.Exchange%2A> method atomically exchanges the values of the specified variables.</span></span> <span data-ttu-id="75186-113"><xref:System.Threading.Interlocked.CompareExchange%2A>メソッド、2 つの操作を組み合わせて: 比較の結果に基づいて、変数のいずれかで格納する 3 つ目と 2 つの値を比較する値します。</span><span class="sxs-lookup"><span data-stu-id="75186-113">The <xref:System.Threading.Interlocked.CompareExchange%2A> method combines two operations: comparing two values and storing a third value in one of the variables, based on the outcome of the comparison.</span></span> <span data-ttu-id="75186-114">比較および交換操作は、アトミックな操作として実行されます。</span><span class="sxs-lookup"><span data-stu-id="75186-114">The compare and exchange operations are performed as an atomic operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="75186-115">次のコード例では、スレッド セーフであるリソースのロック メカニズムを示します。</span><span class="sxs-lookup"><span data-stu-id="75186-115">The following code example shows a thread-safe resource locking mechanism.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="75186-116">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="75186-116">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="75186-117">分割不可能な操作として、2 つの整数を加算し、最初の整数を合計で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-117">Adds two integers and replaces the first integer with the sum, as an atomic operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static int Add (ref int location1, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Add(int32&amp; location1, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (ByRef location1 As Integer, value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Add(int % location1, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-118">加算する最初の値を含む変数。</span><span class="sxs-lookup"><span data-stu-id="75186-118">A variable containing the first value to be added.</span></span> <span data-ttu-id="75186-119">2 つの値の合計は、<c>location1</c> に格納されます。</span><span class="sxs-lookup"><span data-stu-id="75186-119">The sum of the two values is stored in <c>location1</c>.</span></span></param>
        <param name="value"><span data-ttu-id="75186-120"><c>location1</c> にある整数に加算する値。</span><span class="sxs-lookup"><span data-stu-id="75186-120">The value to be added to the integer at <c>location1</c>.</span></span></param>
        <summary><span data-ttu-id="75186-121">分割不可能な操作として、2 つの 32 ビット整数を加算し、最初の整数を合計で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-121">Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-122"><paramref name="location1" /> に格納された新しい値。</span><span class="sxs-lookup"><span data-stu-id="75186-122">The new value stored at <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-123">このメソッドがラップすることによって、オーバーフロー状態を処理: 場合位置にある値`location1`は<xref:System.Int32.MaxValue?displayProperty=nameWithType>と`value`1 に設定されて、結果は<xref:System.Int32.MinValue?displayProperty=nameWithType>以外の場合は`value`が 2 の場合、結果は (<xref:System.Int32.MinValue?displayProperty=nameWithType> + 1) などです。</span><span class="sxs-lookup"><span data-stu-id="75186-123">This method handles an overflow condition by wrapping: if the value at `location1` is <xref:System.Int32.MaxValue?displayProperty=nameWithType> and `value` is 1, the result is <xref:System.Int32.MinValue?displayProperty=nameWithType>; if `value` is 2, the result is (<xref:System.Int32.MinValue?displayProperty=nameWithType> + 1); and so on.</span></span> <span data-ttu-id="75186-124">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="75186-124">No exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-125"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-125">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static long Add (ref long location1, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Add(int64&amp; location1, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (ByRef location1 As Long, value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Add(long % location1, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-126">加算する最初の値を含む変数。</span><span class="sxs-lookup"><span data-stu-id="75186-126">A variable containing the first value to be added.</span></span> <span data-ttu-id="75186-127">2 つの値の合計は、<c>location1</c> に格納されます。</span><span class="sxs-lookup"><span data-stu-id="75186-127">The sum of the two values is stored in <c>location1</c>.</span></span></param>
        <param name="value"><span data-ttu-id="75186-128"><c>location1</c> にある整数に加算する値。</span><span class="sxs-lookup"><span data-stu-id="75186-128">The value to be added to the integer at <c>location1</c>.</span></span></param>
        <summary><span data-ttu-id="75186-129">分割不可能な操作として、2 つの 64 ビット整数を加算し、最初の整数を合計で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-129">Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-130"><paramref name="location1" /> に格納された新しい値。</span><span class="sxs-lookup"><span data-stu-id="75186-130">The new value stored at <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-131">このメソッドがラップすることによって、オーバーフロー状態を処理: 場合位置にある値`location1`は<xref:System.Int64.MaxValue?displayProperty=nameWithType>と`value`1 に設定されて、結果は<xref:System.Int64.MinValue?displayProperty=nameWithType>以外の場合は`value`が 2 の場合、結果は (<xref:System.Int64.MinValue?displayProperty=nameWithType> + 1) などです。</span><span class="sxs-lookup"><span data-stu-id="75186-131">This method handles an overflow condition by wrapping: if the value at `location1` is <xref:System.Int64.MaxValue?displayProperty=nameWithType> and `value` is 1, the result is <xref:System.Int64.MinValue?displayProperty=nameWithType>; if `value` is 2, the result is (<xref:System.Int64.MinValue?displayProperty=nameWithType> + 1); and so on.</span></span> <span data-ttu-id="75186-132">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="75186-132">No exception is thrown.</span></span>  
  
 <span data-ttu-id="75186-133"><xref:System.Threading.Interlocked.Read%2A>メソッドおよびの 64 ビットのオーバー ロード、 <xref:System.Threading.Interlocked.Increment%2A>、 <xref:System.Threading.Interlocked.Decrement%2A>、および<xref:System.Threading.Interlocked.Add%2A>メソッドは、システムでのみアトミック本当にここで、 <xref:System.IntPtr?displayProperty=nameWithType> 64 ビット長。</span><span class="sxs-lookup"><span data-stu-id="75186-133">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="75186-134">他のシステムでは、これらのメソッドはに関する、互いが他のデータにアクセスする手段と分割不可能なです。</span><span class="sxs-lookup"><span data-stu-id="75186-134">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="75186-135">したがって、32 ビット システムでスレッド セーフである、64 ビット値へのアクセスできる必要のメンバーを<xref:System.Threading.Interlocked>クラスです。</span><span class="sxs-lookup"><span data-stu-id="75186-135">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-136"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-136">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
        <altmember cref="Overload:System.Threading.Interlocked.Increment" />
        <altmember cref="Overload:System.Threading.Interlocked.Decrement" />
        <altmember cref="M:System.Threading.Interlocked.Read(System.Int64@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareExchange">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="75186-137">2 つの値が等しいかどうかを比較します。等しい場合は、最初の値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-137">Compares two values for equality and, if they are equal, replaces the first value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static double CompareExchange (ref double location1, double value, double comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CompareExchange(float64&amp; location1, float64 value, float64 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Double, value As Double, comparand As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CompareExchange(double % location1, double value, double comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="comparand" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-138">値を <c>comparand</c> と比較し、場合によっては置き換える比較先。</span><span class="sxs-lookup"><span data-stu-id="75186-138">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span></span></param>
        <param name="value"><span data-ttu-id="75186-139">比較した結果が等しい場合に比較先の値を置き換える値。</span><span class="sxs-lookup"><span data-stu-id="75186-139">The value that replaces the destination value if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="75186-140"><c>location1</c> にある値と比較する値。</span><span class="sxs-lookup"><span data-stu-id="75186-140">The value that is compared to the value at <c>location1</c>.</span></span></param>
        <summary><span data-ttu-id="75186-141">2 つの倍精度浮動小数点数が等しいかどうかを比較します。等しい場合は、最初の値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-141">Compares two double-precision floating point numbers for equality and, if they are equal, replaces the first value.</span></span></summary>
        <returns><span data-ttu-id="75186-142"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-142">The original value in <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-143">場合`comparand`値と`location1`しが等しいか、`value`に格納されて`location1`です。</span><span class="sxs-lookup"><span data-stu-id="75186-143">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="75186-144">それ以外の場合は演算が実行されません。</span><span class="sxs-lookup"><span data-stu-id="75186-144">Otherwise, no operation is performed.</span></span> <span data-ttu-id="75186-145">比較および交換操作は、アトミックな操作として実行されます。</span><span class="sxs-lookup"><span data-stu-id="75186-145">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="75186-146">戻り値<xref:System.Threading.Interlocked.CompareExchange%2A>の元の値は、`location1`交換が行われるかどうか。</span><span class="sxs-lookup"><span data-stu-id="75186-146">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="75186-147">次のコード例は、累計を実行中のスレッド セーフであるメソッドを示します<xref:System.Double>値。</span><span class="sxs-lookup"><span data-stu-id="75186-147">The following code example demonstrates a thread-safe method that accumulates a running total of <xref:System.Double> values.</span></span> <span data-ttu-id="75186-148">2 つのスレッドの系列を追加する<xref:System.Double>スレッド セーフであるメソッドと通常の加算を使用して値を合計を比較する、スレッドが完了します。</span><span class="sxs-lookup"><span data-stu-id="75186-148">Two threads add a series of <xref:System.Double> values using the thread-safe method and ordinary addition, and when the threads complete the totals are compared.</span></span> <span data-ttu-id="75186-149">デュアル プロセッサのコンピューターでは、合計に大きな違いがあります。</span><span class="sxs-lookup"><span data-stu-id="75186-149">On a dual-processor computer, there is a significant difference in the totals.</span></span>  
  
 <span data-ttu-id="75186-150">メソッドでは、スレッド セーフである、実行中の合計の初期値を保存し、<xref:System.Threading.Interlocked.CompareExchange%2A>メソッドは、古い合計新しく計算された合計の交換に使用します。</span><span class="sxs-lookup"><span data-stu-id="75186-150">In the thread-safe method, the initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total.</span></span> <span data-ttu-id="75186-151">戻り値が累計の保存値と等しくない場合は、し、別のスレッドが更新合計いたしました。</span><span class="sxs-lookup"><span data-stu-id="75186-151">If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</span></span> <span data-ttu-id="75186-152">その場合は、実行中の合計を更新しようとするを繰り返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="75186-152">In that case, the attempt to update the running total must be repeated.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked CompareExchange Double#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Double/cs/source.cs#1)]
 [!code-vb[System.Threading.Interlocked CompareExchange Double#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Double/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-153"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-153">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static int CompareExchange (ref int location1, int value, int comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareExchange(int32&amp; location1, int32 value, int32 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Integer, value As Integer, comparand As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareExchange(int % location1, int value, int comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="comparand" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-154">値を <c>comparand</c> と比較し、場合によっては置き換える比較先。</span><span class="sxs-lookup"><span data-stu-id="75186-154">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span></span></param>
        <param name="value"><span data-ttu-id="75186-155">比較した結果が等しい場合に比較先の値を置き換える値。</span><span class="sxs-lookup"><span data-stu-id="75186-155">The value that replaces the destination value if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="75186-156"><c>location1</c> にある値と比較する値。</span><span class="sxs-lookup"><span data-stu-id="75186-156">The value that is compared to the value at <c>location1</c>.</span></span></param>
        <summary><span data-ttu-id="75186-157">2 つの 32 ビット符号付き整数が等しいかどうかを比較します。等しい場合は、最初の値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-157">Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.</span></span></summary>
        <returns><span data-ttu-id="75186-158"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-158">The original value in <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-159">場合`comparand`値と`location1`しが等しいか、`value`に格納されて`location1`です。</span><span class="sxs-lookup"><span data-stu-id="75186-159">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="75186-160">それ以外の場合は演算が実行されません。</span><span class="sxs-lookup"><span data-stu-id="75186-160">Otherwise, no operation is performed.</span></span> <span data-ttu-id="75186-161">比較および交換操作は、アトミックな操作として実行されます。</span><span class="sxs-lookup"><span data-stu-id="75186-161">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="75186-162">戻り値<xref:System.Threading.Interlocked.CompareExchange%2A>の元の値は、`location1`交換が行われるかどうか。</span><span class="sxs-lookup"><span data-stu-id="75186-162">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="75186-163">次のコード例では、集計途中経過を蓄積するスレッド セーフな方法を示します。</span><span class="sxs-lookup"><span data-stu-id="75186-163">The following code example demonstrates a thread-safe method that accumulates a running total.</span></span> <span data-ttu-id="75186-164">実行中の合計の初期値を保存し、<xref:System.Threading.Interlocked.CompareExchange%2A>メソッドは、古い合計新しく計算された合計の交換に使用します。</span><span class="sxs-lookup"><span data-stu-id="75186-164">The initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total.</span></span> <span data-ttu-id="75186-165">戻り値が累計の保存値と等しくない場合は、し、別のスレッドが更新合計いたしました。</span><span class="sxs-lookup"><span data-stu-id="75186-165">If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</span></span> <span data-ttu-id="75186-166">その場合は、実行中の合計を更新しようとするを繰り返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="75186-166">In that case, the attempt to update the running total must be repeated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="75186-167"><xref:System.Threading.Interlocked.Add%2A>メソッド、.NET Framework version 2.0 で導入されたは整数にスレッド セーフである集計途中経過を蓄積する方が便利な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="75186-167">The <xref:System.Threading.Interlocked.Add%2A> method, introduced in version 2.0 of the .NET Framework, provides a more convenient way to accumulate thread-safe running totals for integers.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/CS/source.cs#1)]
 [!code-vb[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-168"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-168">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static long CompareExchange (ref long location1, long value, long comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 CompareExchange(int64&amp; location1, int64 value, int64 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Long, value As Long, comparand As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long CompareExchange(long % location1, long value, long comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="comparand" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-169">値を <c>comparand</c> と比較し、場合によっては置き換える比較先。</span><span class="sxs-lookup"><span data-stu-id="75186-169">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span></span></param>
        <param name="value"><span data-ttu-id="75186-170">比較した結果が等しい場合に比較先の値を置き換える値。</span><span class="sxs-lookup"><span data-stu-id="75186-170">The value that replaces the destination value if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="75186-171"><c>location1</c> にある値と比較する値。</span><span class="sxs-lookup"><span data-stu-id="75186-171">The value that is compared to the value at <c>location1</c>.</span></span></param>
        <summary><span data-ttu-id="75186-172">2 つの 64 ビット符号付き整数が等しいかどうかを比較します。等しい場合は、最初の値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-172">Compares two 64-bit signed integers for equality and, if they are equal, replaces the first value.</span></span></summary>
        <returns><span data-ttu-id="75186-173"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-173">The original value in <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-174">場合`comparand`値と`location1`しが等しいか、`value`に格納されて`location1`です。</span><span class="sxs-lookup"><span data-stu-id="75186-174">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="75186-175">それ以外の場合は演算が実行されません。</span><span class="sxs-lookup"><span data-stu-id="75186-175">Otherwise, no operation is performed.</span></span> <span data-ttu-id="75186-176">比較および交換操作は、アトミックな操作として実行されます。</span><span class="sxs-lookup"><span data-stu-id="75186-176">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="75186-177">戻り値<xref:System.Threading.Interlocked.CompareExchange%2A>の元の値は、`location1`交換が行われるかどうか。</span><span class="sxs-lookup"><span data-stu-id="75186-177">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-178"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-178">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static IntPtr CompareExchange (ref IntPtr location1, IntPtr value, IntPtr comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CompareExchange(native int&amp; location1, native int value, native int comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As IntPtr, value As IntPtr, comparand As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr CompareExchange(IntPtr % location1, IntPtr value, IntPtr comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
        <Parameter Name="comparand" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-179">値を <c>comparand</c> の値と比較し、場合によっては <c>value</c> によって置き換える、比較先の <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="75186-179">The destination <see cref="T:System.IntPtr" />, whose value is compared with the value of <c>comparand</c> and possibly replaced by <c>value</c>.</span></span></param>
        <param name="value"><span data-ttu-id="75186-180">比較した結果が等しい場合に比較先の値を置き換える <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="75186-180">The <see cref="T:System.IntPtr" /> that replaces the destination value if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="75186-181"><c>location1</c> にある値と比較する <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="75186-181">The <see cref="T:System.IntPtr" /> that is compared to the value at <c>location1</c>.</span></span></param>
        <summary><span data-ttu-id="75186-182">2 つのプラットフォーム固有のハンドルまたはポインターが等しいかどうかを比較します。等しい場合は、最初の 1 つを置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-182">Compares two platform-specific handles or pointers for equality and, if they are equal, replaces the first one.</span></span></summary>
        <returns><span data-ttu-id="75186-183"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-183">The original value in <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-184">場合`comparand`値と`location1`しが等しいか、`value`に格納されて`location1`です。</span><span class="sxs-lookup"><span data-stu-id="75186-184">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="75186-185">それ以外の場合は演算が実行されません。</span><span class="sxs-lookup"><span data-stu-id="75186-185">Otherwise, no operation is performed.</span></span> <span data-ttu-id="75186-186">比較および交換操作は、アトミックな操作として実行されます。</span><span class="sxs-lookup"><span data-stu-id="75186-186">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="75186-187">このメソッドの戻り値の元の値は、`location1`交換が行われるかどうか。</span><span class="sxs-lookup"><span data-stu-id="75186-187">The return value of this method is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="75186-188"><xref:System.IntPtr> プラットフォーム固有の型。</span><span class="sxs-lookup"><span data-stu-id="75186-188"><xref:System.IntPtr> is a platform-specific type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-189"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-189">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static object CompareExchange (ref object location1, object value, object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CompareExchange(object&amp; location1, object value, object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Object, value As Object, comparand As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CompareExchange(System::Object ^ % location1, System::Object ^ value, System::Object ^ comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-190"><c>comparand</c> と比較し、場合によっては置き換える比較先のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="75186-190">The destination object that is compared with <c>comparand</c> and possibly replaced.</span></span></param>
        <param name="value"><span data-ttu-id="75186-191">比較した結果が等しい場合に比較先のオブジェクトを置き換えるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="75186-191">The object that replaces the destination object if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="75186-192"><c>location1</c> にあるオブジェクトと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="75186-192">The object that is compared to the object at <c>location1</c>.</span></span></param>
        <summary><span data-ttu-id="75186-193">2 つのオブジェクトの参照が等値であるかどうかを比較します。等しい場合は、最初のオブジェクトを置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-193">Compares two objects for reference equality and, if they are equal, replaces the first object.</span></span></summary>
        <returns><span data-ttu-id="75186-194"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-194">The original value in <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-195">場合`comparand`内のオブジェクトと`location1`しが等しいか、`value`に格納されて`location1`です。</span><span class="sxs-lookup"><span data-stu-id="75186-195">If `comparand` and the object in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="75186-196">それ以外の場合は演算が実行されません。</span><span class="sxs-lookup"><span data-stu-id="75186-196">Otherwise, no operation is performed.</span></span> <span data-ttu-id="75186-197">比較および交換操作は、アトミックな操作として実行されます。</span><span class="sxs-lookup"><span data-stu-id="75186-197">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="75186-198">戻り値<xref:System.Threading.Interlocked.CompareExchange%2A>の元の値は、`location1`交換が行われるかどうか。</span><span class="sxs-lookup"><span data-stu-id="75186-198">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
 <span data-ttu-id="75186-199">.NET framework version 2.0 では、以降、<xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29>メソッドのオーバー ロードは、参照型の場合、タイプ セーフな代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="75186-199">Beginning with .NET Framework version 2.0, the <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29> method overload provides a type-safe alternative for reference types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="75186-200">オブジェクトが参照の等価比較なく<xref:System.Object.Equals%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="75186-200">The objects are compared for reference equality, rather than <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="75186-201">その結果、同じ 2 つのボックス化されたインスタンス値の型 (たとえば、整数 3) 常に等しくない場合に表示され、操作は実行されません。</span><span class="sxs-lookup"><span data-stu-id="75186-201">As a result, two boxed instances of the same value type (for example, the integer 3) always appear to be unequal, and no operation is performed.</span></span> <span data-ttu-id="75186-202">値型では、このオーバー ロードを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="75186-202">Do not use this overload with value types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="75186-203"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-203">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static float CompareExchange (ref float location1, float value, float comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 CompareExchange(float32&amp; location1, float32 value, float32 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Single, value As Single, comparand As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float CompareExchange(float % location1, float value, float comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="comparand" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-204">値を <c>comparand</c> と比較し、場合によっては置き換える比較先。</span><span class="sxs-lookup"><span data-stu-id="75186-204">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span></span></param>
        <param name="value"><span data-ttu-id="75186-205">比較した結果が等しい場合に比較先の値を置き換える値。</span><span class="sxs-lookup"><span data-stu-id="75186-205">The value that replaces the destination value if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="75186-206"><c>location1</c> にある値と比較する値。</span><span class="sxs-lookup"><span data-stu-id="75186-206">The value that is compared to the value at <c>location1</c>.</span></span></param>
        <summary><span data-ttu-id="75186-207">2 つの単精度浮動小数点数が等しいかどうかを比較します。等しい場合は、最初の値を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-207">Compares two single-precision floating point numbers for equality and, if they are equal, replaces the first value.</span></span></summary>
        <returns><span data-ttu-id="75186-208"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-208">The original value in <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-209">場合`comparand`値と`location1`しが等しいか、`value`に格納されて`location1`です。</span><span class="sxs-lookup"><span data-stu-id="75186-209">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="75186-210">それ以外の場合は演算が実行されません。</span><span class="sxs-lookup"><span data-stu-id="75186-210">Otherwise, no operation is performed.</span></span> <span data-ttu-id="75186-211">比較および交換操作は、アトミックな操作として実行されます。</span><span class="sxs-lookup"><span data-stu-id="75186-211">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="75186-212">戻り値<xref:System.Threading.Interlocked.CompareExchange%2A>の元の値は、`location1`交換が行われるかどうか。</span><span class="sxs-lookup"><span data-stu-id="75186-212">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="75186-213">次のコード例は、累計を実行中のスレッド セーフであるメソッドを示します<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="75186-213">The following code example demonstrates a thread-safe method that accumulates a running total of <xref:System.Single> values.</span></span> <span data-ttu-id="75186-214">2 つのスレッドの系列を追加する<xref:System.Single>スレッド セーフであるメソッドと通常の加算を使用して値を合計を比較する、スレッドが完了します。</span><span class="sxs-lookup"><span data-stu-id="75186-214">Two threads add a series of <xref:System.Single> values using the thread-safe method and ordinary addition, and when the threads complete the totals are compared.</span></span> <span data-ttu-id="75186-215">デュアル プロセッサのコンピューターでは、合計に大きな違いがあります。</span><span class="sxs-lookup"><span data-stu-id="75186-215">On a dual-processor computer, there is a significant difference in the totals.</span></span>  
  
 <span data-ttu-id="75186-216">メソッドでは、スレッド セーフである、実行中の合計の初期値を保存し、<xref:System.Threading.Interlocked.CompareExchange%2A>メソッドは、古い合計新しく計算された合計の交換に使用します。</span><span class="sxs-lookup"><span data-stu-id="75186-216">In the thread-safe method, the initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total.</span></span> <span data-ttu-id="75186-217">戻り値が累計の保存値と等しくない場合は、し、別のスレッドが更新合計いたしました。</span><span class="sxs-lookup"><span data-stu-id="75186-217">If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</span></span> <span data-ttu-id="75186-218">その場合は、実行中の合計を更新しようとするを繰り返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="75186-218">In that case, the attempt to update the running total must be repeated.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked CompareExchange Single#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Single/cs/source.cs#1)]
 [!code-vb[System.Threading.Interlocked CompareExchange Single#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Single/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-219"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-219">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CompareExchange&lt;T&gt; (ref T location1, T value, T comparand) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CompareExchange&lt;class T&gt;(!!T&amp; location1, !!T value, !!T comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange(Of T As Class) (ByRef location1 As T, value As T, comparand As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T CompareExchange(T % location1, T value, T comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location1" Type="T&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="comparand" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="75186-220">使用する種類<c>location1</c>、<c>値</c>、および<c>比較対照値</c>です。</span><span class="sxs-lookup"><span data-stu-id="75186-220">The type to be used for <c>location1</c>, <c>value</c>, and <c>comparand</c>.</span></span> <span data-ttu-id="75186-221">この型は、参照型である必要があります。</span><span class="sxs-lookup"><span data-stu-id="75186-221">This type must be a reference type.</span></span></typeparam>
        <param name="location1"><span data-ttu-id="75186-222">値を <c>comparand</c> と比較し、場合によっては置き換える比較先。</span><span class="sxs-lookup"><span data-stu-id="75186-222">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span></span> <span data-ttu-id="75186-223">これは参照パラメーターです (C# では <see langword="ref" />、Visual Basic では <see langword="ByRef" />)。</span><span class="sxs-lookup"><span data-stu-id="75186-223">This is a reference parameter (<see langword="ref" /> in C#, <see langword="ByRef" /> in Visual Basic).</span></span></param>
        <param name="value"><span data-ttu-id="75186-224">比較した結果が等しい場合に比較先の値を置き換える値。</span><span class="sxs-lookup"><span data-stu-id="75186-224">The value that replaces the destination value if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="75186-225"><c>location1</c> にある値と比較する値。</span><span class="sxs-lookup"><span data-stu-id="75186-225">The value that is compared to the value at <c>location1</c>.</span></span></param>
        <summary><span data-ttu-id="75186-226">指定した参照型 <paramref name="T" /> の 2 つのインスタンスが等しいかどうかを比較します。等しい場合は、最初の 1 つを置き換えます。</span><span class="sxs-lookup"><span data-stu-id="75186-226">Compares two instances of the specified reference type <paramref name="T" /> for equality and, if they are equal, replaces the first one.</span></span></summary>
        <returns><span data-ttu-id="75186-227"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-227">The original value in <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-228">場合`comparand`値と`location1`しが等しいか、`value`に格納されて`location1`です。</span><span class="sxs-lookup"><span data-stu-id="75186-228">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="75186-229">それ以外の場合は演算が実行されません。</span><span class="sxs-lookup"><span data-stu-id="75186-229">Otherwise, no operation is performed.</span></span> <span data-ttu-id="75186-230">比較および交換は、アトミックな操作として実行されます。</span><span class="sxs-lookup"><span data-stu-id="75186-230">The comparison and the exchange are performed as an atomic operation.</span></span> <span data-ttu-id="75186-231">このメソッドの戻り値の元の値は、`location1`交換が行われるかどうか。</span><span class="sxs-lookup"><span data-stu-id="75186-231">The return value of this method is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
 <span data-ttu-id="75186-232">このメソッドは、参照型のみをサポートします。</span><span class="sxs-lookup"><span data-stu-id="75186-232">This method only supports reference types.</span></span> <span data-ttu-id="75186-233">オーバー ロードがあります、<xref:System.Threading.Interlocked.CompareExchange%2A>値型のメソッド<xref:System.Int32>、 <xref:System.Int64>、 <xref:System.IntPtr>、 <xref:System.Single>、および<xref:System.Double>、他の値型のサポートはありません。</span><span class="sxs-lookup"><span data-stu-id="75186-233">There are overloads of the <xref:System.Threading.Interlocked.CompareExchange%2A> method for the value types <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, and <xref:System.Double>, but there is no support for other value types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="75186-234">このメソッドはオーバー ロードを置き換える、<xref:System.Threading.Interlocked.CompareExchange%28System.Object%40%2CSystem.Object%2CSystem.Object%29>後者に遅延バインディング アクセスする対象のオブジェクトを必要とするため、メソッドをオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="75186-234">This method overload is preferable to the <xref:System.Threading.Interlocked.CompareExchange%28System.Object%40%2CSystem.Object%2CSystem.Object%29> method overload, because the latter requires the destination object to be accessed late-bound.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-235"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-235">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="75186-236">分割不可能な操作として、指定した変数をデクリメントし、結果を格納します。</span><span class="sxs-lookup"><span data-stu-id="75186-236">Decrements a specified variable and stores the result, as an atomic operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static int Decrement (ref int location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Decrement(int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Decrement(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrement (ByRef location As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Decrement(int % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location"><span data-ttu-id="75186-237">値がデクリメントされる変数。</span><span class="sxs-lookup"><span data-stu-id="75186-237">The variable whose value is to be decremented.</span></span></param>
        <summary><span data-ttu-id="75186-238">分割不可能な操作として、指定した変数をデクリメントし、結果を格納します。</span><span class="sxs-lookup"><span data-stu-id="75186-238">Decrements a specified variable and stores the result, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-239">デクリメントされた値。</span><span class="sxs-lookup"><span data-stu-id="75186-239">The decremented value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-240">このメソッドがラップすることによって、オーバーフロー状態を処理します。 場合`location`  =  <xref:System.Int32.MinValue?displayProperty=nameWithType>、 `location` - 1 =<xref:System.Int32.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="75186-240">This method handles an overflow condition by wrapping: If `location` = <xref:System.Int32.MinValue?displayProperty=nameWithType>, `location` - 1 = <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="75186-241">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="75186-241">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="75186-242">次の例では、中間値と 1,000 の乱数を生成する必要な範囲は 0 から 1,000 にランダムな番号の数を決定します。</span><span class="sxs-lookup"><span data-stu-id="75186-242">The following example determines how many random numbers that range from 0 to 1,000 are required to generate 1,000 random numbers with a midpoint value.</span></span> <span data-ttu-id="75186-243">中間値、変数の数を追跡するために`midpointCount`は 1,000 に等しいとデクリメントたびに設定する乱数ジェネレーターは、中間値を返します。</span><span class="sxs-lookup"><span data-stu-id="75186-243">To keep track of the number of midpoint values, a variable, `midpointCount`, is set equal to 1,000 and decremented each time the random number generator returns a midpoint value.</span></span> <span data-ttu-id="75186-244">3 つのスレッドは、乱数を生成するため、<xref:System.Threading.Interlocked.Decrement%28System.Int32%40%29>複数のスレッドを更新しないことを確認するメソッドが呼び出された`midpointCount`同時にします。</span><span class="sxs-lookup"><span data-stu-id="75186-244">Because three threads generate the random numbers, the <xref:System.Threading.Interlocked.Decrement%28System.Int32%40%29> method is called to ensure that multiple threads don't update `midpointCount` concurrently.</span></span> <span data-ttu-id="75186-245">ロックは、乱数ジェネレーターとを保護するためも使用されている、<xref:System.Threading.CountdownEvent>オブジェクトを使用していることを確認、`Main`メソッドが 3 つのスレッドの前に実行を完了します。</span><span class="sxs-lookup"><span data-stu-id="75186-245">Note that a lock is also used to protect the random number generator, and that a <xref:System.Threading.CountdownEvent> object is used to ensure that the `Main` method doesn't finish execution before the three threads.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Decrement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.decrement/cs/decrement1.cs#1)]
 [!code-vb[System.Threading.Interlocked.Decrement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.decrement/vb/decrement1.vb#1)]  
  
 <span data-ttu-id="75186-246">次の例と似ていますが、以前を使用する点を除いて、50,000 の中間点のランダムな整数を生成するスレッド プロシージャの代わりにします。</span><span class="sxs-lookup"><span data-stu-id="75186-246">The following example is similar to the previous one, except that it uses the  instead of a thread procedure to generate 50,000 random midpoint integers.</span></span> <span data-ttu-id="75186-247">この例では、ラムダ式が置き換えられます、`GenerateNumbers`スレッド プロシージャを呼び出すまで、<xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType>メソッドが不要、<xref:System.Threading.CountdownEvent>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="75186-247">In this example, a lambda expression replaces the `GenerateNumbers` thread procedure, and the call to the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method eliminates the need for the <xref:System.Threading.CountdownEvent> object.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Decrement#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.decrement/cs/decrement2.cs#2)]
 [!code-vb[System.Threading.Interlocked.Decrement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.decrement/vb/decrement2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="75186-248"><paramref name="location" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-248">The address of <paramref name="location" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static long Decrement (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Decrement(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Decrement(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrement (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Decrement(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location"><span data-ttu-id="75186-249">値がデクリメントされる変数。</span><span class="sxs-lookup"><span data-stu-id="75186-249">The variable whose value is to be decremented.</span></span></param>
        <summary><span data-ttu-id="75186-250">分割不可能な操作として、指定した変数をデクリメントしてその結果を格納します。</span><span class="sxs-lookup"><span data-stu-id="75186-250">Decrements the specified variable and stores the result, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-251">デクリメントされた値。</span><span class="sxs-lookup"><span data-stu-id="75186-251">The decremented value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-252">このメソッドがラップすることによって、オーバーフロー状態を処理します。 場合`location`  =  <xref:System.Int64.MinValue?displayProperty=nameWithType>、 `location` - 1 =<xref:System.Int64.MaxValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="75186-252">This method handles an overflow condition by wrapping: if `location` = <xref:System.Int64.MinValue?displayProperty=nameWithType>, `location` - 1 = <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="75186-253">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="75186-253">No exception is thrown.</span></span>  
  
 <span data-ttu-id="75186-254"><xref:System.Threading.Interlocked.Read%2A>メソッドおよびの 64 ビットのオーバー ロード、 <xref:System.Threading.Interlocked.Increment%2A>、 <xref:System.Threading.Interlocked.Decrement%2A>、および<xref:System.Threading.Interlocked.Add%2A>メソッドは、システムでのみアトミック本当にここで、 <xref:System.IntPtr?displayProperty=nameWithType> 64 ビット長。</span><span class="sxs-lookup"><span data-stu-id="75186-254">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="75186-255">他のシステムでは、これらのメソッドはに関する、互いが他のデータにアクセスする手段と分割不可能なです。</span><span class="sxs-lookup"><span data-stu-id="75186-255">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="75186-256">したがって、32 ビット システムでスレッド セーフである、64 ビット値へのアクセスできる必要のメンバーを<xref:System.Threading.Interlocked>クラスです。</span><span class="sxs-lookup"><span data-stu-id="75186-256">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="75186-257"><paramref name="location" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-257">The address of <paramref name="location" /> is a null pointer.</span></span></exception>
        <altmember cref="Overload:System.Threading.Interlocked.Increment" />
        <altmember cref="Overload:System.Threading.Interlocked.Add" />
        <altmember cref="M:System.Threading.Interlocked.Read(System.Int64@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Exchange">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="75186-258">分割不可能な操作として指定した値を変数として設定します。</span><span class="sxs-lookup"><span data-stu-id="75186-258">Sets a variable to a specified value as an atomic operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static double Exchange (ref double location1, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exchange(float64&amp; location1, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Double, value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Exchange(double % location1, double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-259">指定した値に設定する変数。</span><span class="sxs-lookup"><span data-stu-id="75186-259">The variable to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="75186-260"><c>location1</c> パラメーターに設定される値。</span><span class="sxs-lookup"><span data-stu-id="75186-260">The value to which the <c>location1</c> parameter is set.</span></span></param>
        <summary><span data-ttu-id="75186-261">分割不可能な操作として、指定した値を倍精度浮動小数点数として設定し、元の値を返します。</span><span class="sxs-lookup"><span data-stu-id="75186-261">Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-262"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-262">The original value of <paramref name="location1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-263"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-263">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static int Exchange (ref int location1, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Exchange(int32&amp; location1, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Integer, value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Exchange(int % location1, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-264">指定した値に設定する変数。</span><span class="sxs-lookup"><span data-stu-id="75186-264">The variable to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="75186-265"><c>location1</c> パラメーターに設定される値。</span><span class="sxs-lookup"><span data-stu-id="75186-265">The value to which the <c>location1</c> parameter is set.</span></span></param>
        <summary><span data-ttu-id="75186-266">分割不可能な操作として、指定した値を 32 ビット符号付き整数として設定し、元の値を返します。</span><span class="sxs-lookup"><span data-stu-id="75186-266">Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-267"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-267">The original value of <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="75186-268">次のコード例では、スレッド セーフであるリソースのロック メカニズムを示します。</span><span class="sxs-lookup"><span data-stu-id="75186-268">The following code example shows a thread-safe resource locking mechanism.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="75186-269"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-269">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static long Exchange (ref long location1, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Exchange(int64&amp; location1, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Long, value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Exchange(long % location1, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-270">指定した値に設定する変数。</span><span class="sxs-lookup"><span data-stu-id="75186-270">The variable to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="75186-271"><c>location1</c> パラメーターに設定される値。</span><span class="sxs-lookup"><span data-stu-id="75186-271">The value to which the <c>location1</c> parameter is set.</span></span></param>
        <summary><span data-ttu-id="75186-272">分割不可能な操作として、指定した値を 64 ビット符号付き整数として設定し、元の値を返します。</span><span class="sxs-lookup"><span data-stu-id="75186-272">Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-273"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-273">The original value of <paramref name="location1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-274"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-274">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static IntPtr Exchange (ref IntPtr location1, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Exchange(native int&amp; location1, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As IntPtr, value As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Exchange(IntPtr % location1, IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-275">指定した値に設定する変数。</span><span class="sxs-lookup"><span data-stu-id="75186-275">The variable to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="75186-276"><c>location1</c> パラメーターに設定される値。</span><span class="sxs-lookup"><span data-stu-id="75186-276">The value to which the <c>location1</c> parameter is set.</span></span></param>
        <summary><span data-ttu-id="75186-277">分割不可能な操作として、プラットフォーム固有のハンドルまたはポインターに指定した値を設定し、元の値を返します。</span><span class="sxs-lookup"><span data-stu-id="75186-277">Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-278"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-278">The original value of <paramref name="location1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-279"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-279">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static object Exchange (ref object location1, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Exchange(object&amp; location1, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Object, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Exchange(System::Object ^ % location1, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-280">指定した値に設定する変数。</span><span class="sxs-lookup"><span data-stu-id="75186-280">The variable to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="75186-281"><c>location1</c> パラメーターに設定される値。</span><span class="sxs-lookup"><span data-stu-id="75186-281">The value to which the <c>location1</c> parameter is set.</span></span></param>
        <summary><span data-ttu-id="75186-282">分割不可能な操作として、指定した値をオブジェクトとして設定し、元のオブジェクトへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="75186-282">Sets an object to a specified value and returns a reference to the original object, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-283"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-283">The original value of <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

> [!NOTE]
> <span data-ttu-id="75186-284">.NET framework version 2.0 では、以降、<xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29>メソッドのオーバー ロードは、参照型の場合、タイプ セーフな代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="75186-284">Beginning with .NET Framework version 2.0, the <xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29> method overload provides a type-safe alternative for reference types.</span></span>  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="75186-285"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-285">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static float Exchange (ref float location1, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Exchange(float32&amp; location1, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Single, value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Exchange(float % location1, float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location1"><span data-ttu-id="75186-286">指定した値に設定する変数。</span><span class="sxs-lookup"><span data-stu-id="75186-286">The variable to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="75186-287"><c>location1</c> パラメーターに設定される値。</span><span class="sxs-lookup"><span data-stu-id="75186-287">The value to which the <c>location1</c> parameter is set.</span></span></param>
        <summary><span data-ttu-id="75186-288">分割不可能な操作として、指定した値を単精度浮動小数点数として設定し、元の値を返します。</span><span class="sxs-lookup"><span data-stu-id="75186-288">Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-289"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-289">The original value of <paramref name="location1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-290"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-290">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Exchange&lt;T&gt; (ref T location1, T value) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Exchange&lt;class T&gt;(!!T&amp; location1, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange``1(``0@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange(Of T As Class) (ByRef location1 As T, value As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T Exchange(T % location1, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location1" Type="T&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="75186-291">使用する種類<c>location1</c>と<c>値</c>です。</span><span class="sxs-lookup"><span data-stu-id="75186-291">The type to be used for <c>location1</c> and <c>value</c>.</span></span> <span data-ttu-id="75186-292">この型は、参照型である必要があります。</span><span class="sxs-lookup"><span data-stu-id="75186-292">This type must be a reference type.</span></span></typeparam>
        <param name="location1"><span data-ttu-id="75186-293">指定した値に設定する変数。</span><span class="sxs-lookup"><span data-stu-id="75186-293">The variable to set to the specified value.</span></span> <span data-ttu-id="75186-294">これは参照パラメーターです (C# では <see langword="ref" />、Visual Basic では <see langword="ByRef" />)。</span><span class="sxs-lookup"><span data-stu-id="75186-294">This is a reference parameter (<see langword="ref" /> in C#, <see langword="ByRef" /> in Visual Basic).</span></span></param>
        <param name="value"><span data-ttu-id="75186-295"><c>location1</c> パラメーターに設定される値。</span><span class="sxs-lookup"><span data-stu-id="75186-295">The value to which the <c>location1</c> parameter is set.</span></span></param>
        <summary><span data-ttu-id="75186-296">分割不可能な操作として、指定した型 <paramref name="T" /> の変数に指定した値を設定し、元の値を返します。</span><span class="sxs-lookup"><span data-stu-id="75186-296">Sets a variable of the specified type <paramref name="T" /> to a specified value and returns the original value, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-297"><paramref name="location1" /> の元の値。</span><span class="sxs-lookup"><span data-stu-id="75186-297">The original value of <paramref name="location1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-298">このメソッドは、参照型のみをサポートします。</span><span class="sxs-lookup"><span data-stu-id="75186-298">This method only supports reference types.</span></span> <span data-ttu-id="75186-299">オーバー ロードがあります、<xref:System.Threading.Interlocked.Exchange%2A>のメソッド、 <xref:System.Int32>、 <xref:System.Int64>、 <xref:System.IntPtr>、 <xref:System.Single>、および<xref:System.Double>値の型が、他の値型はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="75186-299">There are overloads of the <xref:System.Threading.Interlocked.Exchange%2A> method for the <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, and <xref:System.Double> value types, but there is no support for other value types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="75186-300">このメソッドはオーバー ロードを置き換える、<xref:System.Threading.Interlocked.Exchange%28System.Object%40%2CSystem.Object%29>後者を対象オブジェクトの遅延バインディング アクセスを必要とするため、メソッドをオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="75186-300">This method overload is preferable to the <xref:System.Threading.Interlocked.Exchange%28System.Object%40%2CSystem.Object%29> method overload, because the latter requires late-bound access to the destination object .</span></span>  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-301"><paramref name="location1" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-301">The address of <paramref name="location1" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="75186-302">分割不可能な操作として、指定した変数をインクリメントし、結果を格納します。</span><span class="sxs-lookup"><span data-stu-id="75186-302">Increments a specified variable and stores the result, as an atomic operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static int Increment (ref int location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Increment(int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Increment(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Increment (ByRef location As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Increment(int % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location"><span data-ttu-id="75186-303">値がインクリメントされる変数。</span><span class="sxs-lookup"><span data-stu-id="75186-303">The variable whose value is to be incremented.</span></span></param>
        <summary><span data-ttu-id="75186-304">分割不可能な操作として、指定した変数をインクリメントし、結果を格納します。</span><span class="sxs-lookup"><span data-stu-id="75186-304">Increments a specified variable and stores the result, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-305">インクリメントされた値。</span><span class="sxs-lookup"><span data-stu-id="75186-305">The incremented value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-306">このメソッドがラップすることによって、オーバーフロー状態を処理します。 場合`location`  =  <xref:System.Int32.MaxValue?displayProperty=nameWithType>、 `location` + 1 =<xref:System.Int32.MinValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="75186-306">This method handles an overflow condition by wrapping: if `location` = <xref:System.Int32.MaxValue?displayProperty=nameWithType>, `location` + 1 = <xref:System.Int32.MinValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="75186-307">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="75186-307">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="75186-308">次の例では、中間値と 1,000 の乱数を生成する必要な範囲は 0 から 1,000 にランダムな番号の数を決定します。</span><span class="sxs-lookup"><span data-stu-id="75186-308">The following example determines how many random numbers that range from 0 to 1,000 are required to generate 1,000 random numbers with a midpoint value.</span></span> <span data-ttu-id="75186-309">中間値、変数の数を追跡するために`midpointCount`を 0 に設定および 10,000 に達するまで、乱数ジェネレーターが中間値を返すたびに増分されます。</span><span class="sxs-lookup"><span data-stu-id="75186-309">To keep track of the number of midpoint values, a variable, `midpointCount`, is set equal to 0 and incremented each time the random number generator returns a midpoint value until it reaches 10,000.</span></span> <span data-ttu-id="75186-310">3 つのスレッドは、乱数を生成するため、<xref:System.Threading.Interlocked.Increment%28System.Int32%40%29>複数のスレッドを更新しないことを確認するメソッドが呼び出された`midpointCount`同時にします。</span><span class="sxs-lookup"><span data-stu-id="75186-310">Because three threads generate the random numbers, the <xref:System.Threading.Interlocked.Increment%28System.Int32%40%29> method is called to ensure that multiple threads don't update `midpointCount` concurrently.</span></span> <span data-ttu-id="75186-311">ロックは、乱数ジェネレーターとを保護するためも使用されている、<xref:System.Threading.CountdownEvent>オブジェクトを使用していることを確認、`Main`メソッドが 3 つのスレッドの前に実行を完了します。</span><span class="sxs-lookup"><span data-stu-id="75186-311">Note that a lock is also used to protect the random number generator, and that a <xref:System.Threading.CountdownEvent> object is used to ensure that the `Main` method doesn't finish execution before the three threads.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Increment2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.increment2/cs/increment3.cs#3)]
 [!code-vb[System.Threading.Interlocked.Increment2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.increment2/vb/Increment3.vb#3)]  
  
 <span data-ttu-id="75186-312">次の例と似ていますが、以前を使用する点を除いて、50,000 の中間点のランダムな整数を生成するスレッド プロシージャの代わりにします。</span><span class="sxs-lookup"><span data-stu-id="75186-312">The following example is similar to the previous one, except that it uses the  instead of a thread procedure to generate 50,000 random midpoint integers.</span></span> <span data-ttu-id="75186-313">この例では、ラムダ式が置き換えられます、`GenerateNumbers`スレッド プロシージャを呼び出すまで、<xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType>メソッドが不要、<xref:System.Threading.CountdownEvent>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="75186-313">In this example, a lambda expression replaces the `GenerateNumbers` thread procedure, and the call to the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method eliminates the need for the <xref:System.Threading.CountdownEvent> object.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Increment2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.increment2/cs/increment4.cs#4)]
 [!code-vb[System.Threading.Interlocked.Increment2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.increment2/vb/Increment4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-314"><paramref name="location" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-314">The address of <paramref name="location" /> is a null pointer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static long Increment (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Increment(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Increment(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Increment (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Increment(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location"><span data-ttu-id="75186-315">値がインクリメントされる変数。</span><span class="sxs-lookup"><span data-stu-id="75186-315">The variable whose value is to be incremented.</span></span></param>
        <summary><span data-ttu-id="75186-316">分割不可能な操作として、指定した変数をインクリメントし、結果を格納します。</span><span class="sxs-lookup"><span data-stu-id="75186-316">Increments a specified variable and stores the result, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-317">インクリメントされた値。</span><span class="sxs-lookup"><span data-stu-id="75186-317">The incremented value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-318">このメソッドがラップすることによって、オーバーフロー状態を処理します。 場合`location`  =  <xref:System.Int64.MaxValue?displayProperty=nameWithType>、 `location` + 1 =<xref:System.Int64.MinValue?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="75186-318">This method handles an overflow condition by wrapping: if `location` = <xref:System.Int64.MaxValue?displayProperty=nameWithType>, `location` + 1 = <xref:System.Int64.MinValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="75186-319">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="75186-319">No exception is thrown.</span></span>  
  
 <span data-ttu-id="75186-320"><xref:System.Threading.Interlocked.Read%2A>メソッドおよびの 64 ビットのオーバー ロード、 <xref:System.Threading.Interlocked.Increment%2A>、 <xref:System.Threading.Interlocked.Decrement%2A>、および<xref:System.Threading.Interlocked.Add%2A>メソッドは、システムでのみアトミック本当にここで、 <xref:System.IntPtr?displayProperty=nameWithType> 64 ビット長。</span><span class="sxs-lookup"><span data-stu-id="75186-320">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="75186-321">他のシステムでは、これらのメソッドはに関する、互いが他のデータにアクセスする手段と分割不可能なです。</span><span class="sxs-lookup"><span data-stu-id="75186-321">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="75186-322">したがって、32 ビット システムでスレッド セーフである、64 ビット値へのアクセスできる必要のメンバーを<xref:System.Threading.Interlocked>クラスです。</span><span class="sxs-lookup"><span data-stu-id="75186-322">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="75186-323"><paramref name="location" /> のアドレスは null ポインターです。</span><span class="sxs-lookup"><span data-stu-id="75186-323">The address of <paramref name="location" /> is a null pointer.</span></span></exception>
        <altmember cref="Overload:System.Threading.Interlocked.Decrement" />
        <altmember cref="Overload:System.Threading.Interlocked.Add" />
        <altmember cref="M:System.Threading.Interlocked.Read(System.Int64@)" />
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrier">
      <MemberSignature Language="C#" Value="public static void MemoryBarrier ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrier() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.MemoryBarrier" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrier ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrier();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="75186-324">メモリ アクセスを同期します。現在のスレッドを実行中のプロセッサは、<see cref="M:System.Threading.Interlocked.MemoryBarrier" /> を呼び出す前のメモリ アクセスを <see cref="M:System.Threading.Interlocked.MemoryBarrier" /> の呼び出し後のメモリ アクセス以降に実行するように命令を並べ替えることはできなくなります。</span><span class="sxs-lookup"><span data-stu-id="75186-324">Synchronizes memory access as follows: The processor that executes the current thread cannot reorder instructions in such a way that memory accesses before the call to <see cref="M:System.Threading.Interlocked.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Interlocked.MemoryBarrier" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-325">このメソッドが追加された、<xref:System.Threading.Interlocked>クラス内で、[!INCLUDE[net_v45](~/includes/net-v45-md.md)]のラッパーである; 便宜を図って、<xref:System.Threading.Thread.MemoryBarrier%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="75186-325">This method was added to the <xref:System.Threading.Interlocked> class in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] as a convenience; it's a wrapper for the <xref:System.Threading.Thread.MemoryBarrier%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="75186-326"><xref:System.Threading.Interlocked.MemoryBarrier%2A> 順序付け (たとえば、複数の Intel Itanium プロセッサを採用しているシステム) と脆弱なメモリをマルチプロセッサ システムでのみが必要です。</span><span class="sxs-lookup"><span data-stu-id="75186-326"><xref:System.Threading.Interlocked.MemoryBarrier%2A> is required only on multiprocessor systems that have weak memory ordering (for example, a system that employs multiple Intel Itanium processors).</span></span>  
  
 <span data-ttu-id="75186-327">ほとんどの目的で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、または<xref:System.Threading.Monitor>クラスは、データを同期する簡単な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="75186-327">For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrierProcessWide">
      <MemberSignature Language="C#" Value="public static void MemoryBarrierProcessWide ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrierProcessWide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.MemoryBarrierProcessWide" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrierProcessWide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrierProcessWide();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static long Read (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Read(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Read(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Read(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location"><span data-ttu-id="75186-328">読み込む 64 ビット値。</span><span class="sxs-lookup"><span data-stu-id="75186-328">The 64-bit value to be loaded.</span></span></param>
        <summary><span data-ttu-id="75186-329">分割不可能な操作として 64 ビット値を読み込んで返します。</span><span class="sxs-lookup"><span data-stu-id="75186-329">Returns a 64-bit value, loaded as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="75186-330">読み込まれた値。</span><span class="sxs-lookup"><span data-stu-id="75186-330">The loaded value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75186-331"><xref:System.Threading.Interlocked.Read%2A>メソッドは、64 ビットの読み取り操作はアトミックが存在するので、64 ビット システムで必要ではありません。</span><span class="sxs-lookup"><span data-stu-id="75186-331">The <xref:System.Threading.Interlocked.Read%2A> method is unnecessary on 64-bit systems, because 64-bit read operations are already atomic.</span></span> <span data-ttu-id="75186-332">32 ビット システムで 64 ビットの読み取り操作を使用して実行しない限り、アトミックできない<xref:System.Threading.Interlocked.Read%2A>です。</span><span class="sxs-lookup"><span data-stu-id="75186-332">On 32-bit systems, 64-bit read operations are not atomic unless performed using <xref:System.Threading.Interlocked.Read%2A>.</span></span>  
  
 <span data-ttu-id="75186-333"><xref:System.Threading.Interlocked.Read%2A>メソッドおよびの 64 ビットのオーバー ロード、 <xref:System.Threading.Interlocked.Increment%2A>、 <xref:System.Threading.Interlocked.Decrement%2A>、および<xref:System.Threading.Interlocked.Add%2A>メソッドは、システムでのみアトミック本当にここで、 <xref:System.IntPtr?displayProperty=nameWithType> 64 ビット長。</span><span class="sxs-lookup"><span data-stu-id="75186-333">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="75186-334">他のシステムでは、これらのメソッドはに関する、互いが他のデータにアクセスする手段と分割不可能なです。</span><span class="sxs-lookup"><span data-stu-id="75186-334">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="75186-335">したがって、32 ビット システムでスレッド セーフである、64 ビット値へのアクセスできる必要のメンバーを<xref:System.Threading.Interlocked>クラスです。</span><span class="sxs-lookup"><span data-stu-id="75186-335">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="75186-336"><xref:System.IntPtr> プラットフォーム固有の型。</span><span class="sxs-lookup"><span data-stu-id="75186-336"><xref:System.IntPtr> is a platform-specific type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Threading.Interlocked.Increment" />
        <altmember cref="Overload:System.Threading.Interlocked.Decrement" />
        <altmember cref="Overload:System.Threading.Interlocked.Add" />
      </Docs>
    </Member>
  </Members>
</Type>
