<Type Name="Thread" FullName="System.Threading.Thread">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf1c34cf62016eefb34fdbf2a1c5591fea486b98" /><Meta Name="ms.sourcegitcommit" Value="cb4a1b695ae3cbb5d99ef8c39b476d40c35f42a2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/28/2019" /><Meta Name="ms.locfileid" Value="64580456" /></Metadata><TypeSignature Language="C#" Value="public sealed class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Runtime.InteropServices._Thread" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Thread extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.Runtime.InteropServices._Thread" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Thread" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Thread&#xA;Inherits CriticalFinalizerObject&#xA;Implements _Thread" />
  <TypeSignature Language="C++ CLI" Value="public ref class Thread sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, System::Runtime::InteropServices::_Thread" />
  <TypeSignature Language="F#" Value="type Thread = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface _Thread" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Thread</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Thread))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="44abe-101">スレッドを作成および制御し、その優先順位の設定およびステータスの取得を実行します。</span><span class="sxs-lookup"><span data-stu-id="44abe-101">Creates and controls a thread, sets its priority, and gets its status.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-102">プロセスの開始時に、共通言語ランタイムは自動的にアプリケーション コードを実行する 1 つのフォア グラウンド スレッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="44abe-102">When a process starts, the common language runtime automatically creates a single foreground thread to execute application code.</span></span> <span data-ttu-id="44abe-103">このメインのフォア グラウンド スレッドとプロセスは、プロセスに関連付けられたプログラム コードの一部を実行する 1 つまたは複数のスレッドを作成できます。</span><span class="sxs-lookup"><span data-stu-id="44abe-103">Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process.</span></span> <span data-ttu-id="44abe-104">これらのスレッドをフォア グラウンドまたはバック グラウンドで実行できます。</span><span class="sxs-lookup"><span data-stu-id="44abe-104">These threads can execute either in the foreground or in the background.</span></span> <span data-ttu-id="44abe-105">さらに、使用、<xref:System.Threading.ThreadPool>クラス、共通言語ランタイムによって管理されるワーカー スレッドでコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="44abe-105">In addition, you can use the <xref:System.Threading.ThreadPool> class to execute code on worker threads that are managed by the common language runtime.</span></span>  
  
 <span data-ttu-id="44abe-106">このセクションの内容</span><span class="sxs-lookup"><span data-stu-id="44abe-106">In this section</span></span>  
  
 <span data-ttu-id="44abe-107">[スレッドの開始](#Starting) </span><span class="sxs-lookup"><span data-stu-id="44abe-107">[Starting a thread](#Starting) </span></span>  
 <span data-ttu-id="44abe-108">[スレッド オブジェクトを取得します。](#Retrieving) </span><span class="sxs-lookup"><span data-stu-id="44abe-108">[Retrieving Thread objects](#Retrieving) </span></span>  
 <span data-ttu-id="44abe-109">[フォア グラウンドとバック グラウンド スレッド](#Foreground) </span><span class="sxs-lookup"><span data-stu-id="44abe-109">[Foreground and background threads](#Foreground) </span></span>  
 <span data-ttu-id="44abe-110">[カルチャとスレッド](#Culture) </span><span class="sxs-lookup"><span data-stu-id="44abe-110">[Culture and threads](#Culture) </span></span>  
 [<span data-ttu-id="44abe-111">情報を取得して、スレッドを制御します。</span><span class="sxs-lookup"><span data-stu-id="44abe-111">Getting information about and controlling threads</span></span>](#Properties)   
   
<a name="Starting"></a>   
## <a name="starting-a-thread"></a><span data-ttu-id="44abe-112">スレッドの開始</span><span class="sxs-lookup"><span data-stu-id="44abe-112">Starting a thread</span></span>  
 <span data-ttu-id="44abe-113">スレッドを開始するには、スレッドは、そのクラス コンス トラクターで実行するメソッドを表すデリゲートを指定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-113">You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor.</span></span> <span data-ttu-id="44abe-114">呼び出して、<xref:System.Threading.Thread.Start%2A>実行を開始するメソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-114">You then call the <xref:System.Threading.Thread.Start%2A> method to begin execution.</span></span>  
  
 <span data-ttu-id="44abe-115"><xref:System.Threading.Thread>コンス トラクターが実行されるメソッドに引数を渡すかどうかに応じて、2 つのデリゲート型のいずれかを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-115">The <xref:System.Threading.Thread> constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:</span></span>  
  
-   <span data-ttu-id="44abe-116">渡す引数を持つメソッドがない場合、<xref:System.Threading.ThreadStart>コンス トラクターにデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="44abe-116">If the method has no arguments, you pass a <xref:System.Threading.ThreadStart> delegate to  the constructor.</span></span> <span data-ttu-id="44abe-117">署名があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-117">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ThreadStart()  
    ```  
  
    ```vb  
    Public Delegate Sub ThreadStart()  
    ```  
  
     <span data-ttu-id="44abe-118">次の例は、作成しを実行するスレッドを開始、`ExecuteInForeground`メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-118">The following example creates and starts a thread that executes the `ExecuteInForeground` method.</span></span> <span data-ttu-id="44abe-119">メソッドは、一部のスレッド プロパティに関する情報を表示しを 0.5 秒の一時停止して経過秒数を表示します。 ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="44abe-119">The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds.</span></span> <span data-ttu-id="44abe-120">少なくとも 5 秒間、スレッドが実行されたときに、ループが終了し、スレッドが実行を終了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-120">When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.</span></span>  
  
     [!code-csharp[System.Threading.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart1.cs#1)]
     [!code-vb[System.Threading.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart1.vb#1)]  
  
-   <span data-ttu-id="44abe-121">メソッドに引数がある場合は、渡す、<xref:System.Threading.ParameterizedThreadStart>コンス トラクターにデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="44abe-121">If the method has an argument, you pass a <xref:System.Threading.ParameterizedThreadStart> delegate to the constructor.</span></span> <span data-ttu-id="44abe-122">署名があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-122">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ParameterizedThreadStart(object obj)  
    ```  
  
    ```vb  
    Public Delegate Sub ParameterizedThreadStart(obj As Object)  
    ```  
  
     <span data-ttu-id="44abe-123">デリゲートが実行するメソッドが、キャスト (c#) または (Visual Basic) では、パラメーターを適切な型に変換できます。</span><span class="sxs-lookup"><span data-stu-id="44abe-123">The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.</span></span>  
  
     <span data-ttu-id="44abe-124">呼び出すことを除いて、次の例は前のものと同じ、<xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="44abe-124">The following example is identical to the previous one, except that it calls the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor.</span></span> <span data-ttu-id="44abe-125">このバージョンの`ExecuteInForeground`メソッドには、ループは、実行するミリ秒単位の概数を表す 1 つのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="44abe-125">This version of the `ExecuteInForeground` method has a single parameter that represents the approximate number of milliseconds the loop is to execute.</span></span>  
  
     [!code-csharp[System.Threading.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart2.cs#2)]
     [!code-vb[System.Threading.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart2.vb#2)]  
  
 <span data-ttu-id="44abe-126">参照を保持する必要はありません、<xref:System.Threading.Thread>オブジェクトのスレッドを開始するとします。</span><span class="sxs-lookup"><span data-stu-id="44abe-126">It is not necessary to retain a reference to a <xref:System.Threading.Thread> object once you have started the thread.</span></span> <span data-ttu-id="44abe-127">スレッドは、スレッド プロシージャが完了するまでの実行を継続します。</span><span class="sxs-lookup"><span data-stu-id="44abe-127">The thread continues to execute until the thread procedure is complete.</span></span>  
  
<a name="Retrieving"></a>   
## <a name="retrieving-thread-objects"></a><span data-ttu-id="44abe-128">スレッド オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-128">Retrieving Thread objects</span></span>  
 <span data-ttu-id="44abe-129">静的なを使用することができます (`Shared` Visual Basic で)<xref:System.Threading.Thread.CurrentThread%2A>スレッドが実行されているコードから実行中のスレッドへの参照を取得するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-129">You can use the static (`Shared` in Visual Basic)  <xref:System.Threading.Thread.CurrentThread%2A> property to retrieve a reference to the currently executing thread from the code that the thread is executing.</span></span> <span data-ttu-id="44abe-130">次の例では、<xref:System.Threading.Thread.CurrentThread%2A>プロパティ、アプリケーションのメイン スレッド、もう 1 つのフォア グラウンド スレッド、バック グラウンド スレッドおよびスレッド プールのスレッドに関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-130">The following example uses the <xref:System.Threading.Thread.CurrentThread%2A> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.</span></span>  
  
 [!code-csharp[System.Threading.Thread#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/Instance1.cs#4)]
 [!code-vb[System.Threading.Thread#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/Instance1.vb#4)]  
  
<a name="Foreground"></a>   
## <a name="foreground-and-background-threads"></a><span data-ttu-id="44abe-131">フォア グラウンドとバック グラウンド スレッド</span><span class="sxs-lookup"><span data-stu-id="44abe-131">Foreground and background threads</span></span>  
 <span data-ttu-id="44abe-132">インスタンス、<xref:System.Threading.Thread>クラスは、フォア グラウンド スレッドまたはバック グラウンド スレッドを表します。</span><span class="sxs-lookup"><span data-stu-id="44abe-132">Instances of the <xref:System.Threading.Thread> class represent either foreground threads or background threads.</span></span> <span data-ttu-id="44abe-133">バック グラウンド スレッドは例外が 1 つのフォア グラウンド スレッドと同じです。 すべてのフォア グラウンド スレッドが終了した場合、バック グラウンド スレッドが実行されているプロセスを保持しません。</span><span class="sxs-lookup"><span data-stu-id="44abe-133">Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated.</span></span> <span data-ttu-id="44abe-134">すべてのフォア グラウンド スレッドを停止すると、ランタイムはすべてのバック グラウンド スレッドを停止し、シャット ダウンします。</span><span class="sxs-lookup"><span data-stu-id="44abe-134">Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.</span></span>  
  
 <span data-ttu-id="44abe-135">既定では、次のスレッドをフォア グラウンドで実行します。</span><span class="sxs-lookup"><span data-stu-id="44abe-135">By default, the following threads execute in the foreground:</span></span>  
  
-   <span data-ttu-id="44abe-136">メイン アプリケーション スレッドです。</span><span class="sxs-lookup"><span data-stu-id="44abe-136">The main application thread.</span></span>  
  
-   <span data-ttu-id="44abe-137">呼び出すことによって作成されたすべてのスレッドを<xref:System.Threading.Thread>クラスのコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="44abe-137">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="44abe-138">次のスレッドは、既定では、バック グラウンドで実行します。</span><span class="sxs-lookup"><span data-stu-id="44abe-138">The following threads execute in the background by default:</span></span>  
  
-   <span data-ttu-id="44abe-139">ランタイムによって管理されるワーカー スレッドのプールはプールのスレッドをスレッドです。</span><span class="sxs-lookup"><span data-stu-id="44abe-139">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span>  <span data-ttu-id="44abe-140">使用してスレッド プール スレッドでスレッド プールとスケジュールの作業を構成することができます、<xref:System.Threading.ThreadPool>クラス。</span><span class="sxs-lookup"><span data-stu-id="44abe-140">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="44abe-141">タスク ベースの非同期操作は、スレッド プールのスレッドで自動的に実行します。</span><span class="sxs-lookup"><span data-stu-id="44abe-141">Task-based asynchronous operations automatically execute on thread pool threads.</span></span> <span data-ttu-id="44abe-142">タスク ベースの非同期操作を使用して、<xref:System.Threading.Tasks.Task>と<xref:System.Threading.Tasks.Task%601>を実装するクラス、[タスクベースの非同期パターン](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)します。</span><span class="sxs-lookup"><span data-stu-id="44abe-142">Task-based asynchronous operations use the <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> classes to implement the [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).</span></span>  
  
-   <span data-ttu-id="44abe-143">アンマネージ コードからマネージ実行環境に入るすべてのスレッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-143">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
 <span data-ttu-id="44abe-144">設定して、バック グラウンドで実行するスレッドを変更することができます、<xref:System.Threading.Thread.IsBackground%2A>いつでもプロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-144">You can change a thread to execute in the background by setting the <xref:System.Threading.Thread.IsBackground%2A> property at any time.</span></span>  <span data-ttu-id="44abe-145">バック グラウンド スレッドは、アプリケーションが実行されているが、終了、ファイル システムの変更、または受信ソケット接続の監視などのアプリケーションをしないようにする必要があります限り継続する必要がある操作を行う場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="44abe-145">Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.</span></span>  
  
 <span data-ttu-id="44abe-146">次の例は、フォア グラウンドとバック グラウンド スレッドの違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="44abe-146">The following example illustrates the difference between foreground and background threads.</span></span> <span data-ttu-id="44abe-147">最初の例のようなもの、[スレッドを開始](#Starting)セクションで、それを開始する前に、バック グラウンドで実行するスレッドを設定する点が異なります。</span><span class="sxs-lookup"><span data-stu-id="44abe-147">It is like the first example in the [Starting a thread](#Starting) section, except that it sets the thread to execute in the background before starting it.</span></span> <span data-ttu-id="44abe-148">出力を 5 秒間の実行前に、ループが中断されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-148">As the output shows, the loop is interrupted before it executes for five seconds.</span></span>  
  
 [!code-csharp[System.Threading.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/BackgroundEx1.cs#3)]
 [!code-vb[System.Threading.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/BackgroundEx1.vb#3)]  
  
<a name="Culture"></a>   
## <a name="culture-and-threads"></a><span data-ttu-id="44abe-149">カルチャとスレッド</span><span class="sxs-lookup"><span data-stu-id="44abe-149">Culture and threads</span></span>  
 <span data-ttu-id="44abe-150">各スレッドが、カルチャによって表される、<xref:System.Threading.Thread.CurrentCulture%2A>によって表されるプロパティ、および UI カルチャ、<xref:System.Threading.Thread.CurrentUICulture%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-150">Each thread has a culture, represented by the <xref:System.Threading.Thread.CurrentCulture%2A> property, and a UI culture, represented by the <xref:System.Threading.Thread.CurrentUICulture%2A> property.</span></span>  <span data-ttu-id="44abe-151">現在のカルチャでは、解析および書式設定、文字列比較と並べ替えなどのカルチャに依存する操作をサポートしているしの書記体系やスレッドで使用する暦にも制御します。</span><span class="sxs-lookup"><span data-stu-id="44abe-151">The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread.</span></span> <span data-ttu-id="44abe-152">現在の UI カルチャは、リソース ファイル内のリソースのカルチャの取得を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-152">The current UI culture provides for culture-sensitive retrieval of resources in resource files.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="44abe-153"><xref:System.Threading.Thread.CurrentCulture>と<xref:System.Threading.Thread.CurrentUICulture>プロパティは、現在のスレッド以外の任意のスレッドを使用すると確実に機能しません。</span><span class="sxs-lookup"><span data-stu-id="44abe-153">The <xref:System.Threading.Thread.CurrentCulture> and <xref:System.Threading.Thread.CurrentUICulture> properties don't work reliably when used with any thread other than the current thread.</span></span> <span data-ttu-id="44abe-154">.NET framework では、これらのプロパティを読み取り、信頼性が高くはありませんが、現在のスレッド以外のスレッドのこれらのプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-154">In .NET Framework, reading these properties is reliable, although setting these properties for a thread other than the current thread is not.</span></span> <span data-ttu-id="44abe-155">.NET Core で、<xref:System.InvalidOperationException>スレッドが読み取りまたは別のスレッドでのこれらのプロパティの書き込みを試みるとスローされます。</span><span class="sxs-lookup"><span data-stu-id="44abe-155">On .NET Core, an <xref:System.InvalidOperationException> is thrown if a thread attempts to read or write these properties on a different thread.</span></span>
> <span data-ttu-id="44abe-156">使用することをお勧め、<xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType>と<xref:System.Globalization.CultureInfo.CurrentUICulture?displayProperty=nameWithType>プロパティを取得して、現在のカルチャを設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-156">We recommend that you use the <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.CurrentUICulture?displayProperty=nameWithType> properties to retrieve and set the current culture.</span></span>

 <span data-ttu-id="44abe-157">新しいスレッドがインスタンス化されるときは、によって、現在のシステム カルチャと UI カルチャ、およびカルチャと、新しいスレッドの作成元のスレッドの UI カルチャではなく、そのカルチャおよび UI カルチャが定義されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-157">When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created.</span></span> <span data-ttu-id="44abe-158">つまり、たとえば、現在のシステム カルチャが英語 (米国) とプライマリ アプリケーションのスレッドの現在のカルチャがフランス語 (フランス)、呼び出すことによって作成された新しいスレッドのカルチャの場合、<xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29>プライマリ スレッドからコンス トラクター英語 (米国) とフランス語 (フランス)。</span><span class="sxs-lookup"><span data-stu-id="44abe-158">This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor from the primary thread is English (United States), and not French (France).</span></span> <span data-ttu-id="44abe-159">詳細については、の「カルチャとスレッド」セクションを参照してください、<xref:System.Globalization.CultureInfo>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="44abe-159">For more information, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-160">対象とするアプリの非同期操作を実行するスレッドの場合は true でない、[!INCLUDE[net_v46](~/includes/net-v46-md.md)]以降のバージョンでこのケースでは、カルチャおよび UI カルチャでは、非同期の一部と操作のコンテキスト; いるスレッドで非同期操作によって実行される既定のカルチャおよび非同期操作の起動元のスレッドの UI カルチャを継承します。</span><span class="sxs-lookup"><span data-stu-id="44abe-160">This is not true of threads that execute asynchronous operations for apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)] and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched.</span></span> <span data-ttu-id="44abe-161">詳細については、<xref:System.Globalization.CultureInfo> クラスのトピックの「カルチャとタスク ベースの非同期の操作」セクションをご覧ください。</span><span class="sxs-lookup"><span data-stu-id="44abe-161">For more information, see the "Culture and task-based asynchronous operations" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
 <span data-ttu-id="44abe-162">いずれかを実行することのすべてのスレッドを確認するには、次は、同じカルチャおよび UI カルチャをアプリケーションで実行する共有します。</span><span class="sxs-lookup"><span data-stu-id="44abe-162">You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:</span></span>  
  
-   <span data-ttu-id="44abe-163">渡すことができます、<xref:System.Globalization.CultureInfo>そのカルチャを表すオブジェクト、<xref:System.Threading.ParameterizedThreadStart>委任または<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-163">You can pass a <xref:System.Globalization.CultureInfo> object that represents that culture to the <xref:System.Threading.ParameterizedThreadStart> delegate or the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="44abe-164">実行されるアプリ、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 、以降のバージョン、カルチャおよび UI カルチャの値を設定して、アプリケーション ドメインで作成されるすべてのスレッドに割り当てられるを定義できます、<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType>と<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-164">For apps running on the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="44abe-165">これはアプリケーションごとのドメインの設定であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="44abe-165">Note that this is a per-application domain setting.</span></span>  

 <span data-ttu-id="44abe-166">詳細と例については、の「カルチャとスレッド」セクションを参照してください、<xref:System.Globalization.CultureInfo>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="44abe-166">For more information and examples, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>

<a name="Properties"></a>   
## <a name="getting-information-about-and-controlling-threads"></a><span data-ttu-id="44abe-167">情報を取得して、スレッドを制御します。</span><span class="sxs-lookup"><span data-stu-id="44abe-167">Getting information about and controlling threads</span></span>  
 <span data-ttu-id="44abe-168">数のスレッドに関する情報を提供するプロパティ値を取得することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-168">You can retrieve a number of property values that provide information about a thread.</span></span> <span data-ttu-id="44abe-169">場合によっては、スレッドの操作を制御するこれらのプロパティ値を設定することもできます。</span><span class="sxs-lookup"><span data-stu-id="44abe-169">In some cases, you can also set these property values to control the operation of the thread.</span></span> <span data-ttu-id="44abe-170">これらのスレッド プロパティは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="44abe-170">These thread properties include:</span></span>  
  
-   <span data-ttu-id="44abe-171">名前。</span><span class="sxs-lookup"><span data-stu-id="44abe-171">A name.</span></span> <span data-ttu-id="44abe-172"><xref:System.Threading.Thread.Name%2A> 書き込みが可能-1 回、スレッドを識別するために使用できるプロパティです。</span><span class="sxs-lookup"><span data-stu-id="44abe-172"><xref:System.Threading.Thread.Name%2A> is a write-once property that you can use to identify a thread.</span></span>  <span data-ttu-id="44abe-173">既定値は`null`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-173">Its default value is `null`.</span></span>  
  
-   <span data-ttu-id="44abe-174">ハッシュ コードを呼び出すことによって取得できます、<xref:System.Threading.Thread.GetHashCode%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-174">A hash code, which you can retrieve by calling the <xref:System.Threading.Thread.GetHashCode%2A> method.</span></span> <span data-ttu-id="44abe-175">ハッシュ コードを使用してをスレッドを一意に識別することができます。スレッドの有効期間にわたって、そのハッシュ コードが、値を取得するアプリケーション ドメインに関係なく、他の任意のスレッドからの値の競合しません。</span><span class="sxs-lookup"><span data-stu-id="44abe-175">The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.</span></span>  
  
-   <span data-ttu-id="44abe-176">スレッド id です。</span><span class="sxs-lookup"><span data-stu-id="44abe-176">A thread ID.</span></span> <span data-ttu-id="44abe-177">読み取り専用の値<xref:System.Threading.Thread.ManagedThreadId%2A>プロパティは、ランタイムによって割り当てられているし、そのプロセス内のスレッドを一意に識別します。</span><span class="sxs-lookup"><span data-stu-id="44abe-177">The value of the read-only <xref:System.Threading.Thread.ManagedThreadId%2A> property is assigned by the runtime and uniquely identifies a thread within its process.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="44abe-178">オペレーティング システム [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) とマネージド スレッドの間には固定的な関係はありません。これは、アンマネージド ホストがマネージド スレッドとアンマネージド スレッドの間の関係を制御できるためです。</span><span class="sxs-lookup"><span data-stu-id="44abe-178">An operating-system [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads.</span></span> <span data-ttu-id="44abe-179">具体的には、高度なホストが使用できる、 [CLR ホスティング API](https://msdn.microsoft.com/library/ms404385.aspx)同じオペレーティング システム スレッドに対して多くのマネージ スレッドをスケジュールする、または別のオペレーティング システムのスレッド間でのマネージ スレッドを移動します。</span><span class="sxs-lookup"><span data-stu-id="44abe-179">Specifically, a sophisticated host can use the [CLR Hosting API](https://msdn.microsoft.com/library/ms404385.aspx) to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.</span></span>  
  
-   <span data-ttu-id="44abe-180">スレッドの現在の状態。</span><span class="sxs-lookup"><span data-stu-id="44abe-180">The thread's current state.</span></span> <span data-ttu-id="44abe-181">その存在の期間、スレッドは常に 1 つ以上のによって定義されている状態で、<xref:System.Threading.ThreadState>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-181">For the duration of its existence, a thread is always in one or more of the states defined by the <xref:System.Threading.ThreadState> property.</span></span>  
  
-   <span data-ttu-id="44abe-182">定義されているスケジュールの優先度レベル、<xref:System.Threading.ThreadPriority>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-182">A scheduling priority level, which is defined by the <xref:System.Threading.ThreadPriority> property.</span></span> <span data-ttu-id="44abe-183">スレッドの優先順位を要求するには、この値を設定できますが、オペレーティング システムによって受け入れられるには保証されません。</span><span class="sxs-lookup"><span data-stu-id="44abe-183">Although you can set this value to request a thread's priority, it is not guaranteed to be honored by the operating system.</span></span>  
  
-   <span data-ttu-id="44abe-184">読み取り専用<xref:System.Threading.Thread.IsThreadPoolThread%2A>プロパティで、スレッドがスレッド プールのスレッドでかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-184">The read-only <xref:System.Threading.Thread.IsThreadPoolThread%2A> property, which indicates whether a thread is  a thread pool thread.</span></span>  
  
-   <span data-ttu-id="44abe-185"><xref:System.Threading.Thread.IsBackground%2A> プロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-185">The <xref:System.Threading.Thread.IsBackground%2A> property.</span></span> <span data-ttu-id="44abe-186">詳細については、次を参照してください。、[フォア グラウンドとバック グラウンド スレッド](#Foreground)セクション。</span><span class="sxs-lookup"><span data-stu-id="44abe-186">For more information, see the [Foreground and background threads](#Foreground) section.</span></span>  
  
## Examples  
 <span data-ttu-id="44abe-187">次の例では、単純なスレッド処理の機能を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-187">The following example demonstrates simple threading functionality.</span></span>  
  
 [!code-cpp[Classic Thread Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Thread Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Thread Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Thread Example/CS/source.cs#1)]
 [!code-vb[Classic Thread Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Thread Example/VB/source.vb#1)]  
  
 <span data-ttu-id="44abe-188">このコードには、次のような出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-188">This code produces output similar to the following:</span></span>  
  
```  
[VB, C++, C#]  
Main thread: Start a second thread.  
Main thread: Do some work.  
ThreadProc: 0  
Main thread: Do some work.  
ThreadProc: 1  
Main thread: Do some work.  
ThreadProc: 2  
Main thread: Do some work.  
ThreadProc: 3  
Main thread: Call Join(), to wait until ThreadProc ends.  
ThreadProc: 4  
ThreadProc: 5  
ThreadProc: 6  
ThreadProc: 7  
ThreadProc: 8  
ThreadProc: 9  
Main thread: ThreadProc.Join has returned.  Press Enter to end program.  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="44abe-189">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="44abe-189">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="44abe-190">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-190">Threads and Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/using-threads-and-threading.md"><span data-ttu-id="44abe-191">スレッドの使用とスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-191">Using Threads and Threading</span></span></related>
    <related type="ExternalDocumentation" href="https://referencesource.microsoft.com/#mscorlib/system/threading/thread.cs#3980e012bae82e96"><span data-ttu-id="44abe-192">スレッド クラスのソースの参照</span><span class="sxs-lookup"><span data-stu-id="44abe-192">Reference Source for the Thread Class</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44abe-193"><see cref="T:System.Threading.Thread" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="44abe-193">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ParameterizedThreadStart -&gt; System.Threading.Thread" Usage="new System.Threading.Thread start" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="44abe-194">このスレッドが実行を開始するときに呼び出されるメソッドを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="44abe-194">A delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <summary><span data-ttu-id="44abe-195">スレッドの開始時にオブジェクトをスレッドに渡すことを許可するデリゲートを指定して、<see cref="T:System.Threading.Thread" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="44abe-195">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-196">スレッドでは、作成時にその実行は開始しません。</span><span class="sxs-lookup"><span data-stu-id="44abe-196">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="44abe-197">スレッドの実行をスケジュールするには、呼び出し、<xref:System.Threading.Thread.Start%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-197">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span> <span data-ttu-id="44abe-198">データ オブジェクトをスレッドに渡すを使用して、<xref:System.Threading.Thread.Start%28System.Object%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="44abe-198">To pass a data object to the thread, use the <xref:System.Threading.Thread.Start%28System.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-199">Visual Basic の場合は省略できます、<xref:System.Threading.ThreadStart>スレッドを作成するときに、コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="44abe-199">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="44abe-200">使用して、`AddressOf`演算子など、メソッドを渡すときに`Dim t As New Thread(AddressOf ThreadProc)`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-200">Use the `AddressOf` operator when passing your method, for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="44abe-201">Visual Basic を自動的に呼び出して、<xref:System.Threading.ThreadStart>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="44abe-201">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-202">次の例の作成と使用の構文を示しています、<xref:System.Threading.ParameterizedThreadStart>静的メソッドとインスタンス メソッドを持つデリゲート。</span><span class="sxs-lookup"><span data-stu-id="44abe-202">The following example shows the syntax for creating and using a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44abe-203"><paramref name="start" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="44abe-203"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
        <altmember cref="T:System.AppDomain" />
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="44abe-204">スレッドの作成</span><span class="sxs-lookup"><span data-stu-id="44abe-204">Creating Threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ThreadStart -&gt; System.Threading.Thread" Usage="new System.Threading.Thread start" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="44abe-205">このスレッドが実行を開始するときに呼び出されるメソッドを表す <see cref="T:System.Threading.ThreadStart" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="44abe-205">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <summary><span data-ttu-id="44abe-206"><see cref="T:System.Threading.Thread" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="44abe-206">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-207">スレッドでは、作成時にその実行は開始しません。</span><span class="sxs-lookup"><span data-stu-id="44abe-207">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="44abe-208">スレッドの実行をスケジュールするには、呼び出し、<xref:System.Threading.Thread.Start%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-208">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-209">Visual Basic の場合は省略できます、<xref:System.Threading.ThreadStart>スレッドを作成するときに、コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="44abe-209">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="44abe-210">使用して、`AddressOf`演算子など、メソッドを渡すときに`Dim t As New Thread(AddressOf ThreadProc)`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-210">Use the `AddressOf` operator when passing your method for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="44abe-211">Visual Basic を自動的に呼び出して、<xref:System.Threading.ThreadStart>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="44abe-211">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-212">次のコード例では、静的メソッドを実行するスレッドを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-212">The following code example shows how to create a thread that executes a static method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor/VB/source.vb#1)]  
  
 <span data-ttu-id="44abe-213">次のコード例では、インスタンス メソッドを実行するスレッドを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-213">The following code example shows how to create a thread that executes an instance method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44abe-214"><paramref name="start" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="44abe-214">The <paramref name="start" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="44abe-215">スレッドの作成</span><span class="sxs-lookup"><span data-stu-id="44abe-215">Creating Threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start, int maxStackSize);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ParameterizedThreadStart * int -&gt; System.Threading.Thread" Usage="new System.Threading.Thread (start, maxStackSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="maxStackSize" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="44abe-216">このスレッドが実行を開始するときに呼び出されるメソッドを表す <see cref="T:System.Threading.ParameterizedThreadStart" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="44abe-216">A <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="44abe-217">スレッドが使用する最大スタック サイズ (バイト単位)。実行可能ファイルのヘッダーで指定された既定の最大スタック サイズを使用する場合は 0。</span><span class="sxs-lookup"><span data-stu-id="44abe-217">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span></span>  
  
<span data-ttu-id="44abe-218">重要: 部分的に信頼されているコードでは、既定のスタック サイズを超える <paramref name="maxStackSize" /> は無視されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-218">Important   For partially trusted code, <paramref name="maxStackSize" /> is ignored if it is greater than the default stack size.</span></span> <span data-ttu-id="44abe-219">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-219">No exception is thrown.</span></span></param>
        <summary><span data-ttu-id="44abe-220"><see cref="T:System.Threading.Thread" /> クラスの新しいインスタンスを初期化して、スレッドの開始時にオブジェクトをスレッドに渡すことを許可するデリゲートとこのスレッドの最大スタック サイズを指定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-220">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-221">このコンス トラクター オーバー ロードを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="44abe-221">Avoid using this constructor overload.</span></span> <span data-ttu-id="44abe-222">使用される既定のスタック サイズ、<xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29>コンス トラクターのオーバー ロードは、スレッドの推奨されるスタック サイズ。</span><span class="sxs-lookup"><span data-stu-id="44abe-222">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="44abe-223">スレッドがある、メモリの問題、最も一般的な原因は無限再帰などのエラーをプログラミングします。</span><span class="sxs-lookup"><span data-stu-id="44abe-223">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-224">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、完全信頼コードで設定できる専用`maxStackSize`既定のスタック サイズ (1 メガバイト) よりも大きい値にします。</span><span class="sxs-lookup"><span data-stu-id="44abe-224">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="44abe-225">大きい値が指定されて場合`maxStackSize`部分信頼でコードが実行されているときに`maxStackSize`は無視されます、既定のスタック サイズを使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-225">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="44abe-226">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-226">No exception is thrown.</span></span> <span data-ttu-id="44abe-227">すべての信頼レベルでコードを設定できます`maxStackSize`が既定のスタック サイズより小さい値にします。</span><span class="sxs-lookup"><span data-stu-id="44abe-227">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-228">、部分的に信頼されたコードで使用される完全に信頼されたライブラリを開発しているし、スレッドを開始する必要がある場合は、大量の履歴を必要とするまたは、スレッドを作成する前に、完全な信頼をアサートする必要がありますが、既定のスタック サイズを使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-228">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="44abe-229">そうしないと、スレッドで実行されるコードを完全に制御する場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="44abe-229">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="44abe-230">場合`maxStackSize`が小さい最小スタックのサイズよりも、最小のスタック サイズが使用されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-230">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="44abe-231">場合`maxStackSize`倍数ではない、ページ サイズの大きいページ サイズの倍数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="44abe-231">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="44abe-232">たとえば、Windows Vista を .NET Framework version 2.0 を使用している場合 256 KB (262, 144 バイト) が最小のスタックのサイズとページ サイズは 64 KB (65,536 バイト)。</span><span class="sxs-lookup"><span data-stu-id="44abe-232">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-233">前に Windows XP および Windows Server 2003、Microsoft Windows のバージョンで`maxStackSize`は無視されますと、実行可能ファイルのヘッダーで指定されたスタック サイズが使用されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-233">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="44abe-234">非常に小さなスタック サイズを指定する場合は、スタック オーバーフローの検出を無効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-234">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="44abe-235">スタックが著しく制約されているときに、プローブできます自体、スタック オーバーフローが発生します。</span><span class="sxs-lookup"><span data-stu-id="44abe-235">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="44abe-236">スタック オーバーフローの検出を無効にするには、アプリケーション構成ファイルに、次を追加します。</span><span class="sxs-lookup"><span data-stu-id="44abe-236">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44abe-237"><paramref name="start" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="44abe-237"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="44abe-238"><paramref name="maxStackSize" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="44abe-238"><paramref name="maxStackSize" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start, int maxStackSize);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ThreadStart * int -&gt; System.Threading.Thread" Usage="new System.Threading.Thread (start, maxStackSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="maxStackSize" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="44abe-239">このスレッドが実行を開始するときに呼び出されるメソッドを表す <see cref="T:System.Threading.ThreadStart" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="44abe-239">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="44abe-240">スレッドが使用する最大スタック サイズ (バイト単位)。実行可能ファイルのヘッダーで指定された既定の最大スタック サイズを使用する場合は 0。</span><span class="sxs-lookup"><span data-stu-id="44abe-240">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span></span>  
  
<span data-ttu-id="44abe-241">重要: 部分的に信頼されているコードでは、既定のスタック サイズを超える <paramref name="maxStackSize" /> は無視されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-241">Important   For partially trusted code, <paramref name="maxStackSize" /> is ignored if it is greater than the default stack size.</span></span> <span data-ttu-id="44abe-242">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-242">No exception is thrown.</span></span></param>
        <summary><span data-ttu-id="44abe-243"><see cref="T:System.Threading.Thread" /> クラスの新しいインスタンスを初期化して、スレッドの最大スタック サイズを指定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-243">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying the maximum stack size for the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-244">このコンス トラクター オーバー ロードを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="44abe-244">Avoid using this constructor overload.</span></span> <span data-ttu-id="44abe-245">使用される既定のスタック サイズ、<xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29>コンス トラクターのオーバー ロードは、スレッドの推奨されるスタック サイズ。</span><span class="sxs-lookup"><span data-stu-id="44abe-245">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="44abe-246">スレッドがある、メモリの問題、最も一般的な原因は無限再帰などのエラーをプログラミングします。</span><span class="sxs-lookup"><span data-stu-id="44abe-246">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-247">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、完全信頼コードで設定できる専用`maxStackSize`既定のスタック サイズ (1 メガバイト) よりも大きい値にします。</span><span class="sxs-lookup"><span data-stu-id="44abe-247">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="44abe-248">大きい値が指定されて場合`maxStackSize`部分信頼でコードが実行されているときに`maxStackSize`は無視されます、既定のスタック サイズを使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-248">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="44abe-249">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-249">No exception is thrown.</span></span> <span data-ttu-id="44abe-250">すべての信頼レベルでコードを設定できます`maxStackSize`が既定のスタック サイズより小さい値にします。</span><span class="sxs-lookup"><span data-stu-id="44abe-250">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-251">、部分的に信頼されたコードで使用される完全に信頼されたライブラリを開発しているし、スレッドを開始する必要がある場合は、大量の履歴を必要とするまたは、スレッドを作成する前に、完全な信頼をアサートする必要がありますが、既定のスタック サイズを使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-251">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="44abe-252">そうしないと、スレッドで実行されるコードを完全に制御する場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="44abe-252">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="44abe-253">場合`maxStackSize`が小さい最小スタックのサイズよりも、最小のスタック サイズが使用されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-253">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="44abe-254">場合`maxStackSize`倍数ではない、ページ サイズの大きいページ サイズの倍数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="44abe-254">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="44abe-255">たとえば、Windows Vista を .NET Framework version 2.0 を使用している場合 256 KB (262, 144 バイト) が最小のスタックのサイズとページ サイズは 64 KB (65,536 バイト)。</span><span class="sxs-lookup"><span data-stu-id="44abe-255">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-256">前に Windows XP および Windows Server 2003、Microsoft Windows のバージョンで`maxStackSize`は無視されますと、実行可能ファイルのヘッダーで指定されたスタック サイズが使用されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-256">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="44abe-257">非常に小さなスタック サイズを指定する場合は、スタック オーバーフローの検出を無効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-257">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="44abe-258">スタックが著しく制約されているときに、プローブできます自体、スタック オーバーフローが発生します。</span><span class="sxs-lookup"><span data-stu-id="44abe-258">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="44abe-259">スタック オーバーフローの検出を無効にするには、アプリケーション構成ファイルに、次を追加します。</span><span class="sxs-lookup"><span data-stu-id="44abe-259">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44abe-260"><paramref name="start" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="44abe-260"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="44abe-261"><paramref name="maxStackSize" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="44abe-261"><paramref name="maxStackSize" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Abort">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44abe-262">このメソッドが呼び出された対象のスレッドで、そのスレッドの終了プロセスを開始する <see cref="T:System.Threading.ThreadAbortException" /> を発生させます。</span><span class="sxs-lookup"><span data-stu-id="44abe-262">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span></span> <span data-ttu-id="44abe-263">このメソッドを呼び出すと、通常、スレッドが終了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-263">Calling this method usually terminates the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> <span data-ttu-id="44abe-264">`Thread.Abort`メソッドは、注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-264">The `Thread.Abort` method should be used with caution.</span></span> <span data-ttu-id="44abe-265">現在のスレッド以外のスレッドの中止を呼び出すときに特にわからないが、どのようなコードの実行またはときに実行する失敗した、<xref:System.Threading.ThreadAbortException>がスローされたものアプリケーションの状態の特定またはアプリケーションとユーザー状態ことができます維持を担当します。</span><span class="sxs-lookup"><span data-stu-id="44abe-265">Particularly when you call it to abort a thread other than the current thread, you do not know what code has executed or failed to execute when the <xref:System.Threading.ThreadAbortException> is thrown, nor can you be certain of the state of your application or any application and user state that it is responsible for preserving.</span></span> <span data-ttu-id="44abe-266">たとえば、呼び出し`Thread.Abort`静的コンス トラクターが実行されないようにまたはアンマネージ リソースの解放を禁止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-266">For example, calling `Thread.Abort` may prevent static constructors from executing or prevent the release of unmanaged resources.</span></span> 
>
> <span data-ttu-id="44abe-267">なお、`Thread.Abort`メソッドは .NET Core でサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-267">Note that the `Thread.Abort` method is not supported on .NET Core.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="thread.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-268">このメソッドが呼び出された対象のスレッドで、そのスレッドの終了プロセスを開始する <see cref="T:System.Threading.ThreadAbortException" /> を発生させます。</span><span class="sxs-lookup"><span data-stu-id="44abe-268">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span></span> <span data-ttu-id="44abe-269">このメソッドを呼び出すと、通常、スレッドが終了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-269">Calling this method usually terminates the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-270">スレッドでこのメソッドが呼び出されると、システムがスローされます、<xref:System.Threading.ThreadAbortException>スレッドを中止することにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-270">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="44abe-271">`ThreadAbortException` アプリケーションのコードでキャッチできる特殊な例外の最後に再スローされますが、`catch`しない限りブロック<xref:System.Threading.Thread.ResetAbort%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-271">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="44abe-272">`ResetAbort` 中止するには要求をキャンセルできず、`ThreadAbortException`のスレッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-272">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="44abe-273">実行されていない`finally`ブロックは、スレッドが中止される前に実行されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-273">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-274">スレッドを呼び出すと`Abort`自体の効果は例外をスローすることに似ています、 <xref:System.Threading.ThreadAbortException> 、即座に実行され、結果は予測可能な。</span><span class="sxs-lookup"><span data-stu-id="44abe-274">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="44abe-275">ただし、1 つのスレッドを呼び出す場合`Abort`どのようなコードが実行されているが、中止、別のスレッドで中断します。</span><span class="sxs-lookup"><span data-stu-id="44abe-275">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="44abe-276">静的コンス トラクターが中断される可能性もあります。</span><span class="sxs-lookup"><span data-stu-id="44abe-276">There is also a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="44abe-277">まれに、そのクラスのインスタンスを防ぐため、そのアプリケーション ドメインで作成されない可能性がありますこれ。</span><span class="sxs-lookup"><span data-stu-id="44abe-277">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="44abe-278">スレッドが中止される可能性が可能性がある .NET Framework バージョン 1.0 および 1.1 では中、`finally`後者ブロックが実行されて、`finally`ブロックが中止されました。</span><span class="sxs-lookup"><span data-stu-id="44abe-278">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="44abe-279">スレッドは、すぐに、またはまったくを中止するは保証されません。</span><span class="sxs-lookup"><span data-stu-id="44abe-279">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="44abe-280">このような状況は、スレッドは計算量が境界のない場合に発生することができます、`finally`無期限のために、中止を遅延、中止手順の一部として呼び出されるブロック。</span><span class="sxs-lookup"><span data-stu-id="44abe-280">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="44abe-281">スレッドが中止されるまで待ってを呼び出すことができます、<xref:System.Threading.Thread.Join%2A>メソッドを呼び出した後、スレッド、<xref:System.Threading.Thread.Abort%2A>メソッド、待機が終了する保証はありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-281">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-282">呼び出すスレッド<xref:System.Threading.Thread.Abort%2A>場合などは、コードの保護領域で中止中のスレッドをブロックする可能性があります、`catch`ブロック、`finally`ブロック、または制約された実行領域。</span><span class="sxs-lookup"><span data-stu-id="44abe-282">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="44abe-283">かどうか、スレッドを呼び出す<xref:System.Threading.Thread.Abort%2A>デッドロックが発生することができますが、中止されたスレッドが必要なロックを保持します。</span><span class="sxs-lookup"><span data-stu-id="44abe-283">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="44abe-284">場合`Abort`と呼びますが開始されていないスレッドでスレッドが中止される場合<xref:System.Threading.Thread.Start%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-284">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="44abe-285">場合`Abort`と呼ばれるはブロックされているかスリープ状態のスレッドでスレッドが中断され、中止されました。</span><span class="sxs-lookup"><span data-stu-id="44abe-285">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="44abe-286">場合`Abort`が中断されたスレッドで呼び出されます、<xref:System.Threading.ThreadStateException>を呼び出したスレッドでスローされる<xref:System.Threading.Thread.Abort%2A>、および<xref:System.Threading.ThreadState.AbortRequested>に追加されます、<xref:System.Threading.Thread.ThreadState%2A>が中止されたスレッドのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-286">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="44abe-287">A<xref:System.Threading.ThreadAbortException>まで中断されたスレッドではスローされません<xref:System.Threading.Thread.Resume%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-287">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="44abe-288">場合`Abort`、アンマネージ コードの実行中に、マネージ スレッドで呼び出されます、`ThreadAbortException`スレッドがマネージ コードに戻るまではスローされません。</span><span class="sxs-lookup"><span data-stu-id="44abe-288">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="44abe-289">呼び出しは 2 つの場合`Abort`ものでは、同時に、1 回の呼び出しの状態情報を設定すると、その他の呼び出しを実行することは、`Abort`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-289">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="44abe-290">ただし、アプリケーションは、このような状況を検出することはできません。</span><span class="sxs-lookup"><span data-stu-id="44abe-290">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="44abe-291">後`Abort`が呼び出されたスレッドでスレッドの状態が含まれます<xref:System.Threading.ThreadState.AbortRequested>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-291">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="44abe-292">成功した呼び出しの結果として、スレッドが終了したら`Abort`、スレッドの状態に変更<xref:System.Threading.ThreadState.Stopped>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-292">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="44abe-293">十分なアクセス許可を備えた、スレッドの対象となる、`Abort`中止を使用して、取り消すことができます、`ResetAbort`メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-293">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="44abe-294">呼び出し元を示す例については、`ResetAbort`メソッドを参照してください、`ThreadAbortException`クラス。</span><span class="sxs-lookup"><span data-stu-id="44abe-294">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="44abe-295">.NET Core のみ: このメンバーはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-295">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="44abe-296">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-296">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-297">中止しようとしているスレッドが現在中断されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-297">The thread that is being aborted is currently suspended.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="44abe-298">スレッドでの高度な操作。</span><span class="sxs-lookup"><span data-stu-id="44abe-298">for advanced operations on threads.</span></span> <span data-ttu-id="44abe-299"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="44abe-299">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="44abe-300">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-300">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/using-threads-and-threading.md"><span data-ttu-id="44abe-301">スレッドの使用とスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-301">Using threads and threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md"><span data-ttu-id="44abe-302">スレッドの破棄</span><span class="sxs-lookup"><span data-stu-id="44abe-302">Destroying threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort (object stateInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort(object stateInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort (stateInfo As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort(System::Object ^ stateInfo);" />
      <MemberSignature Language="F#" Value="member this.Abort : obj -&gt; unit" Usage="thread.Abort stateInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateInfo" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="stateInfo"><span data-ttu-id="44abe-303">中止するスレッドで使用できる、状態などのアプリケーション固有の情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="44abe-303">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</span></span></param>
        <summary><span data-ttu-id="44abe-304">このメソッドが呼び出された対象のスレッドで、スレッドの終了プロセスを開始する <see cref="T:System.Threading.ThreadAbortException" /> を発生させます。またスレッドの終了に関する例外情報も提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-304">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination.</span></span> <span data-ttu-id="44abe-305">このメソッドを呼び出すと、通常、スレッドが終了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-305">Calling this method usually terminates the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-306">スレッドでこのメソッドが呼び出されると、システムがスローされます、<xref:System.Threading.ThreadAbortException>スレッドを中止することにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-306">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="44abe-307">`ThreadAbortException` アプリケーションのコードでキャッチできる特殊な例外の最後に再スローされますが、`catch`しない限りブロック<xref:System.Threading.Thread.ResetAbort%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-307">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="44abe-308">`ResetAbort` 中止するには要求をキャンセルできず、`ThreadAbortException`のスレッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-308">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="44abe-309">実行されていない`finally`ブロックは、スレッドが中止される前に実行されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-309">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-310">スレッドを呼び出すと`Abort`自体の効果は例外をスローすることに似ています、 <xref:System.Threading.ThreadAbortException> 、即座に実行され、結果は予測可能な。</span><span class="sxs-lookup"><span data-stu-id="44abe-310">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="44abe-311">ただし、1 つのスレッドを呼び出す場合`Abort`どのようなコードが実行されているが、中止、別のスレッドで中断します。</span><span class="sxs-lookup"><span data-stu-id="44abe-311">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="44abe-312">静的コンス トラクターが中断される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-312">There is a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="44abe-313">まれに、そのクラスのインスタンスを防ぐため、そのアプリケーション ドメインで作成されない可能性がありますこれ。</span><span class="sxs-lookup"><span data-stu-id="44abe-313">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="44abe-314">スレッドが中止される可能性が可能性がある .NET Framework バージョン 1.0 および 1.1 では中、`finally`後者ブロックが実行されて、`finally`ブロックが中止されました。</span><span class="sxs-lookup"><span data-stu-id="44abe-314">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="44abe-315">スレッドは、すぐに、またはまったくを中止するは保証されません。</span><span class="sxs-lookup"><span data-stu-id="44abe-315">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="44abe-316">このような状況は、スレッドは計算量が境界のない場合に発生することができます、`finally`無期限のために、中止を遅延、中止手順の一部として呼び出されるブロック。</span><span class="sxs-lookup"><span data-stu-id="44abe-316">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="44abe-317">スレッドが中止されるまで待ってを呼び出すことができます、<xref:System.Threading.Thread.Join%2A>メソッドを呼び出した後、スレッド、<xref:System.Threading.Thread.Abort%2A>メソッド、待機が終了されるという保証はありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-317">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee that the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-318">呼び出すスレッド<xref:System.Threading.Thread.Abort%2A>場合などは、コードの保護領域で中止中のスレッドをブロックする可能性があります、`catch`ブロック、`finally`ブロック、または制約された実行領域。</span><span class="sxs-lookup"><span data-stu-id="44abe-318">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="44abe-319">かどうか、スレッドを呼び出す<xref:System.Threading.Thread.Abort%2A>デッドロックが発生することができますが、中止されたスレッドが必要なロックを保持します。</span><span class="sxs-lookup"><span data-stu-id="44abe-319">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="44abe-320">場合`Abort`と呼びますが開始されていないスレッドでスレッドが中止される場合<xref:System.Threading.Thread.Start%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-320">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="44abe-321">場合`Abort`と呼ばれるはブロックされているかスリープ状態のスレッドでスレッドが中断され、中止されました。</span><span class="sxs-lookup"><span data-stu-id="44abe-321">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="44abe-322">場合`Abort`が中断されたスレッドで呼び出されます、<xref:System.Threading.ThreadStateException>を呼び出したスレッドでスローされる<xref:System.Threading.Thread.Abort%2A>、および<xref:System.Threading.ThreadState.AbortRequested>に追加されます、<xref:System.Threading.Thread.ThreadState%2A>が中止されたスレッドのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-322">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="44abe-323">A<xref:System.Threading.ThreadAbortException>まで中断されたスレッドではスローされません<xref:System.Threading.Thread.Resume%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-323">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="44abe-324">場合`Abort`、アンマネージ コードの実行中に、マネージ スレッドで呼び出されます、`ThreadAbortException`スレッドがマネージ コードに戻るまではスローされません。</span><span class="sxs-lookup"><span data-stu-id="44abe-324">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="44abe-325">呼び出しは 2 つの場合`Abort`ものでは、同時に、1 回の呼び出しの状態情報を設定すると、その他の呼び出しを実行することは、`Abort`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-325">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="44abe-326">ただし、アプリケーションは、このような状況を検出することはできません。</span><span class="sxs-lookup"><span data-stu-id="44abe-326">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="44abe-327">後`Abort`が呼び出されたスレッドでスレッドの状態が含まれます<xref:System.Threading.ThreadState.AbortRequested>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-327">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="44abe-328">成功した呼び出しの結果として、スレッドが終了したら`Abort`、スレッドの状態に変更<xref:System.Threading.ThreadState.Stopped>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-328">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="44abe-329">十分なアクセス許可を備えた、スレッドの対象となる、`Abort`中止を使用して、取り消すことができます、`ResetAbort`メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-329">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="44abe-330">呼び出し元を示す例については、`ResetAbort`メソッドを参照してください、`ThreadAbortException`クラス。</span><span class="sxs-lookup"><span data-stu-id="44abe-330">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-331">次のコード例では、中止中のスレッドに情報を渡す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-331">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="44abe-332">.NET Core のみ: このメンバーはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-332">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="44abe-333">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-333">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-334">中止しようとしているスレッドが現在中断されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-334">The thread that is being aborted is currently suspended.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="44abe-335">スレッドでの高度な操作。</span><span class="sxs-lookup"><span data-stu-id="44abe-335">for advanced operations on threads.</span></span> <span data-ttu-id="44abe-336"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="44abe-336">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="44abe-337">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-337">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/using-threads-and-threading.md"><span data-ttu-id="44abe-338">スレッドの使用とスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-338">Using threads and threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md"><span data-ttu-id="44abe-339">スレッドの破棄</span><span class="sxs-lookup"><span data-stu-id="44abe-339">Destroying threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AllocateDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateDataSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateDataSlot() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateDataSlot" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateDataSlot () As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateDataSlot();" />
      <MemberSignature Language="F#" Value="static member AllocateDataSlot : unit -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.AllocateDataSlot " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-340">無名のデータ スロットをすべてのスレッドに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-340">Allocates an unnamed data slot on all the threads.</span></span> <span data-ttu-id="44abe-341">パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-341">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="44abe-342">すべてのスレッドに割り当てられた名前付きのデータ スロット。</span><span class="sxs-lookup"><span data-stu-id="44abe-342">The allocated named data slot on all threads.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-343">.NET Framework には、スレッド ローカル ストレージ (TLS) を使用して 2 つのメカニズムが用意されています: スレッド相対静的フィールド (でマークされているフィールドは、<xref:System.ThreadStaticAttribute>属性) とデータ スロット。</span><span class="sxs-lookup"><span data-stu-id="44abe-343">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="44abe-344">スレッド相対静的フィールドは、データ スロットより優れたパフォーマンスを提供し、コンパイル時の型チェックを有効にします。</span><span class="sxs-lookup"><span data-stu-id="44abe-344">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="44abe-345">詳細については、TLS を使用して、次を参照してください。[スレッド ローカル ストレージ。スレッド相対静的フィールドとデータ スロット](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)します。</span><span class="sxs-lookup"><span data-stu-id="44abe-345">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="44abe-346">スロットのすべてのスレッドが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="44abe-346">The slot is allocated on all threads.</span></span>  
  
 <span data-ttu-id="44abe-347">スレッドは、スレッド固有のデータを格納するのにローカル ストアのメモリ メカニズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-347">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="44abe-348">共通言語ランタイムは、作成時に、各プロセスにマルチ スロットのデータ ストア配列を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-348">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="44abe-349">スレッドは、データ ストア内のデータ スロットを割り当てることができますが、格納および取得するデータ スロットの値し、スレッドの有効期限が切れた後に再利用するため、スロットを解放します。</span><span class="sxs-lookup"><span data-stu-id="44abe-349">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="44abe-350">データ スロットは、スレッドごとに一意です。</span><span class="sxs-lookup"><span data-stu-id="44abe-350">Data slots are unique per thread.</span></span> <span data-ttu-id="44abe-351">他のスレッド (子スレッドであっても) はそのデータを取得できません。</span><span class="sxs-lookup"><span data-stu-id="44abe-351">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-352">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="44abe-352">This section contains two code examples.</span></span> <span data-ttu-id="44abe-353">最初の例でマークされているフィールドを使用する方法を示しています、<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持する属性。</span><span class="sxs-lookup"><span data-stu-id="44abe-353">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="44abe-354">2 番目の例では、同じことを行うデータ スロットを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-354">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="44abe-355">**最初の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-355">**First Example**</span></span>  
  
 <span data-ttu-id="44abe-356">次の例でマークされているフィールドを使用する方法を示します<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持するためにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-356">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="44abe-357">この手法は、2 番目の例で示す方法よりも優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-357">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="44abe-358">**2 番目の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-358">**Second Example**</span></span>  
  
 <span data-ttu-id="44abe-359">次のコード例では、スレッド固有の情報を格納するデータ スロットを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-359">The following code example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="44abe-360">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-360">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="44abe-361">スレッド ローカル ストレージ:スレッド相対静的フィールドとデータ スロット</span><span class="sxs-lookup"><span data-stu-id="44abe-361">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AllocateNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member AllocateNamedDataSlot : string -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.AllocateNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="44abe-362">割り当てられるデータ スロットの名前。</span><span class="sxs-lookup"><span data-stu-id="44abe-362">The name of the data slot to be allocated.</span></span></param>
        <summary><span data-ttu-id="44abe-363">名前付きのデータ スロットをすべてのスレッドに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-363">Allocates a named data slot on all threads.</span></span> <span data-ttu-id="44abe-364">パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-364">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="44abe-365">すべてのスレッドに割り当てられた名前付きのデータ スロット。</span><span class="sxs-lookup"><span data-stu-id="44abe-365">The allocated named data slot on all threads.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-366">.NET Framework には、スレッド ローカル ストレージ (TLS) を使用して 2 つのメカニズムが用意されています: スレッド相対静的フィールド (でマークされているフィールドは、<xref:System.ThreadStaticAttribute>属性) とデータ スロット。</span><span class="sxs-lookup"><span data-stu-id="44abe-366">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="44abe-367">スレッド相対静的フィールドは、データ スロットより優れたパフォーマンスを提供し、コンパイル時の型チェックを有効にします。</span><span class="sxs-lookup"><span data-stu-id="44abe-367">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="44abe-368">詳細については、TLS を使用して、次を参照してください。[スレッド ローカル ストレージ。スレッド相対静的フィールドとデータ スロット](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)します。</span><span class="sxs-lookup"><span data-stu-id="44abe-368">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="44abe-369">スレッドは、スレッド固有のデータを格納するのにローカル ストアのメモリ メカニズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-369">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="44abe-370">共通言語ランタイムは、作成時に、各プロセスにマルチ スロットのデータ ストア配列を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-370">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="44abe-371">スレッドは、データ ストア内のデータ スロットを割り当てることができますが、格納および取得するデータ スロットの値し、スレッドの有効期限が切れた後に再利用するため、スロットを解放します。</span><span class="sxs-lookup"><span data-stu-id="44abe-371">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="44abe-372">データ スロットは、スレッドごとに一意です。</span><span class="sxs-lookup"><span data-stu-id="44abe-372">Data slots are unique per thread.</span></span> <span data-ttu-id="44abe-373">他のスレッド (子スレッドであっても) はそのデータを取得できません。</span><span class="sxs-lookup"><span data-stu-id="44abe-373">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="44abe-374">使用する必要はありません、 <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> 、名前付きデータ スロットを割り当てるため、メソッド、<xref:System.Threading.Thread.GetNamedDataSlot%2A>メソッドは、既に割り当てられていない場合に、スロットを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-374">It is not necessary to use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method to allocate a named data slot, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-375">場合、<xref:System.Threading.Thread.AllocateNamedDataSlot%2A>メソッドを使用して、指定した名前のスロットが既に割り当てられている場合に例外をスローしたためには、プログラムの起動時にメイン スレッドでという必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-375">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated.</span></span> <span data-ttu-id="44abe-376">スロットが既に割り当てられているかどうかをテストする方法はありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-376">There is no way to test whether a slot has already been allocated.</span></span>  
  
 <span data-ttu-id="44abe-377">このメソッドで割り当てられたスロットを解放する必要があります<xref:System.Threading.Thread.FreeNamedDataSlot%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-377">Slots allocated with this method must be freed with <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-378">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="44abe-378">This section contains two code examples.</span></span> <span data-ttu-id="44abe-379">最初の例でマークされているフィールドを使用する方法を示しています、<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持する属性。</span><span class="sxs-lookup"><span data-stu-id="44abe-379">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="44abe-380">2 番目の例では、同じことを行うデータ スロットを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-380">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="44abe-381">**最初の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-381">**First Example**</span></span>  
  
 <span data-ttu-id="44abe-382">次の例でマークされているフィールドを使用する方法を示します<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持するためにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-382">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="44abe-383">この手法は、2 番目の例で示す方法よりも優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-383">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="44abe-384">**2 番目の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-384">**Second Example**</span></span>  
  
 <span data-ttu-id="44abe-385">次の例では、名前付きデータ スロットを使用して、スレッド固有の情報を格納する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-385">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-386">コード例では使用しません、<xref:System.Threading.Thread.AllocateNamedDataSlot%2A>メソッド、ため、<xref:System.Threading.Thread.GetNamedDataSlot%2A>メソッドは、既に割り当てられていない場合に、スロットを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-386">The example code does not use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span> <span data-ttu-id="44abe-387">場合、<xref:System.Threading.Thread.AllocateNamedDataSlot%2A>メソッドを使用して、これは、プログラムの起動時にメイン スレッドで呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-387">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="44abe-388">指定された名前の名前付きデータ スロットは、すでに存在します。</span><span class="sxs-lookup"><span data-stu-id="44abe-388">A named data slot with the specified name already exists.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="44abe-389">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-389">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="44abe-390">スレッド ローカル ストレージ:スレッド相対静的フィールドとデータ スロット</span><span class="sxs-lookup"><span data-stu-id="44abe-390">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState ApartmentState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ApartmentState ApartmentState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Property ApartmentState As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ApartmentState ApartmentState { System::Threading::ApartmentState get(); void set(System::Threading::ApartmentState value); };" />
      <MemberSignature Language="F#" Value="member this.ApartmentState : System.Threading.ApartmentState with get, set" Usage="System.Threading.Thread.ApartmentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Deprecated in favor of GetApartmentState, SetApartmentState and TrySetApartmentState.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("The ApartmentState property has been deprecated.  Use GetApartmentState, SetApartmentState or TrySetApartmentState instead.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-391">このスレッドのアパートメント状態を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-391">Gets or sets the apartment state of this thread.</span></span></summary>
        <value><span data-ttu-id="44abe-392"><see cref="T:System.Threading.ApartmentState" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="44abe-392">One of the <see cref="T:System.Threading.ApartmentState" /> values.</span></span> <span data-ttu-id="44abe-393">初期値は <see langword="Unknown" /> です。</span><span class="sxs-lookup"><span data-stu-id="44abe-393">The initial value is <see langword="Unknown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-394">**<xref:System.Threading.Thread.ApartmentState%2A>プロパティは廃止されています。**</span><span class="sxs-lookup"><span data-stu-id="44abe-394">**The <xref:System.Threading.Thread.ApartmentState%2A> property is obsolete.**</span></span>  <span data-ttu-id="44abe-395">旧式でない代替手段は、<xref:System.Threading.Thread.GetApartmentState%2A>アパートメント状態を取得するメソッドと<xref:System.Threading.Thread.SetApartmentState%2A>アパートメント状態を設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-395">The non-obsolete alternatives are the <xref:System.Threading.Thread.GetApartmentState%2A> method to retrieve the apartment state and the   <xref:System.Threading.Thread.SetApartmentState%2A> method to set the apartment state.</span></span>  
  
 <span data-ttu-id="44abe-396">.NET Framework バージョン 1.0 および 1.1 で、`ApartmentState`プロパティは、スレッドを示すことがシングル スレッドまたはマルチ スレッド アパートメントで実行されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-396">In the .NET Framework versions 1.0 and 1.1, the `ApartmentState` property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment.</span></span> <span data-ttu-id="44abe-397">スレッドがの場合、このプロパティを設定できます、`Unstarted`または`Running`スレッドの状態です。 ただし、設定できます 1 回だけのスレッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-397">This property can be set when the thread is in the `Unstarted` or `Running` thread state; however, it can be set only once for a thread.</span></span> <span data-ttu-id="44abe-398">プロパティが設定されていないかどうかが返されます`Unknown`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-398">If the property has not been set, it returns `Unknown`.</span></span>  
  
 <span data-ttu-id="44abe-399">使用した場合、<xref:System.Threading.Thread.ApartmentState%2A>アパートメント状態が既に設定されているスレッドのアパートメント状態を設定するプロパティは無視されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-399">An attempt to use the <xref:System.Threading.Thread.ApartmentState%2A> property to set the apartment state of a thread whose apartment state has already been set is ignored.</span></span> <span data-ttu-id="44abe-400">ただし、<xref:System.Threading.Thread.SetApartmentState%2A>メソッドがスローされます、<xref:System.InvalidOperationException>ここでします。</span><span class="sxs-lookup"><span data-stu-id="44abe-400">However, the <xref:System.Threading.Thread.SetApartmentState%2A> method throws a <xref:System.InvalidOperationException> in this case.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-401">として、.NET Framework version 2.0 で新しいスレッドの初期化<xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>の開始される前に、そのアパートメント状態が設定されていない場合。</span><span class="sxs-lookup"><span data-stu-id="44abe-401">In the .NET Framework version 2.0, new threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="44abe-402">メイン アプリケーション スレッドに初期化<xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>既定。</span><span class="sxs-lookup"><span data-stu-id="44abe-402">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="44abe-403">不要になったにメイン アプリケーション スレッドを設定できます<xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>を設定して、<xref:System.Threading.ApartmentState?displayProperty=nameWithType>コードの最初の行のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-403">You can no longer set the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> by setting the <xref:System.Threading.ApartmentState?displayProperty=nameWithType> property on the first line of code.</span></span> <span data-ttu-id="44abe-404">使用して、<xref:System.STAThreadAttribute>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-404">Use the <xref:System.STAThreadAttribute> instead.</span></span>  
  
 <span data-ttu-id="44abe-405">.NET Framework version 2.0 では、COM スレッド モデルを使用して、C++ アプリケーションを指定することができます、 [/CLRTHREADATTRIBUTE (CLR スレッド属性の設定)](https://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8)リンカー オプション。</span><span class="sxs-lookup"><span data-stu-id="44abe-405">In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the [/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)](https://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8) linker option.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-406">次のコード例では、スレッドのアパートメント状態を設定する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-406">The following code example demonstrates how to set the apartment state of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="44abe-407">このプロパティを、有効ではないアパートメント状態に設定しようとしました (シングル スレッド アパートメント (<see langword="STA" />) またはマルチ スレッド アパートメント (<see langword="MTA" />) 以外の状態)。</span><span class="sxs-lookup"><span data-stu-id="44abe-407">An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<see langword="STA" />) or multithreaded apartment (<see langword="MTA" />)).</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
        <altmember cref="M:System.Threading.Thread.GetApartmentState" />
        <altmember cref="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      </Docs>
    </Member>
    <Member MemberName="BeginCriticalRegion">
      <MemberSignature Language="C#" Value="public static void BeginCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginCriticalRegion();" />
      <MemberSignature Language="F#" Value="static member BeginCriticalRegion : unit -&gt; unit" Usage="System.Threading.Thread.BeginCriticalRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-408">スレッドの中止または処理されない例外の影響によりアプリケーション ドメイン内の他のタスクが悪影響を受ける可能性があるコード領域に実行が入ることをホストに通知します。</span><span class="sxs-lookup"><span data-stu-id="44abe-408">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-409">Microsoft SQL Server 2005 などの共通言語ランタイム (CLR) のホストには、コードの重要および重大でないリージョン内のエラーのさまざまなポリシーを確立できます。</span><span class="sxs-lookup"><span data-stu-id="44abe-409">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="44abe-410">クリティカル領域では、するスレッドの中止または処理されない例外の影響があります、現在のタスクに制限されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-410">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="44abe-411">これに対し、中止または致命的でないコードの領域でエラーには、エラーが発生したタスクのみに影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-411">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="44abe-412">たとえば、ロックを保持しているときにメモリを割り当てようとするタスクを検討してください。</span><span class="sxs-lookup"><span data-stu-id="44abe-412">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="44abe-413">メモリの割り当てが失敗した場合がの安定性を確保するための十分な現在のタスクを中止していますが、 <xref:System.AppDomain>、同じロックを待機しているドメインを他のタスクにすることができますがあります。</span><span class="sxs-lookup"><span data-stu-id="44abe-413">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="44abe-414">現在のタスクが終了した場合は、その他のタスクがデッドロックでした。</span><span class="sxs-lookup"><span data-stu-id="44abe-414">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="44abe-415">全体をアンロードするホストがありますクリティカル領域で、障害が発生したときに<xref:System.AppDomain>可能性がある不安定な状態で実行を続けることのリスクを冒すよりもします。</span><span class="sxs-lookup"><span data-stu-id="44abe-415">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="44abe-416">コードがクリティカル領域を入力することをホストに通知をするために呼び出す<xref:System.Threading.Thread.BeginCriticalRegion%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-416">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="44abe-417">呼び出す<xref:System.Threading.Thread.EndCriticalRegion%2A>と重大でないコードの領域への実行を返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-417">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="44abe-418">SQL Server 2005 で実行されるコードでこのメソッドを使用するには、最上位のホストの保護レベルで実行されるコードが必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-418">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-419">次の例では、使用、<xref:System.Threading.Thread.BeginCriticalRegion%2A>と<xref:System.Threading.Thread.EndCriticalRegion%2A>重要および重大でない地域コードのブロックに分割する方法。</span><span class="sxs-lookup"><span data-stu-id="44abe-419">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.EndCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="BeginThreadAffinity">
      <MemberSignature Language="C#" Value="public static void BeginThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginThreadAffinity();" />
      <MemberSignature Language="F#" Value="static member BeginThreadAffinity : unit -&gt; unit" Usage="System.Threading.Thread.BeginThreadAffinity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-420">マネージド コードが現在のオペレーティング システムの物理スレッドの ID に依存する命令の実行を開始することをホストに通知します。</span><span class="sxs-lookup"><span data-stu-id="44abe-420">Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-421">Microsoft SQL Server 2005 など、共通言語ランタイムの一部のホストでは、独自のスレッド管理を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-421">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="44abe-422">独自のスレッド管理を提供するホストに移動できます実行中のタスク 1 つのオペレーティング システムの物理スレッドから別、いつでも。</span><span class="sxs-lookup"><span data-stu-id="44abe-422">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="44abe-423">ほとんどのタスクは、このを切り替えることでは受けません。</span><span class="sxs-lookup"><span data-stu-id="44abe-423">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="44abe-424">ただし、いくつかのタスクはスレッド アフィニティを設定する-は、オペレーティング システムの物理スレッドの id に依存します。</span><span class="sxs-lookup"><span data-stu-id="44abe-424">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="44abe-425">これらのタスクは、スイッチできないコードを実行するときをホストに通知する必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-425">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="44abe-426">呼び出す必要がありますの例では、オペレーティング システムを取得する、アプリケーション呼び出しシステム API をロックする場合、Win32 CRITICAL_SECTION など、スレッドの関係のある<xref:System.Threading.Thread.BeginThreadAffinity%2A>、ロックを取得する前に、<xref:System.Threading.Thread.EndThreadAffinity%2A>ロックを解放した後。</span><span class="sxs-lookup"><span data-stu-id="44abe-426">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="44abe-427">SQL Server 2005 で実行されるコードでこのメソッドを使用するには、最上位のホストの保護レベルで実行されるコードが必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-427">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-428">次の例では、使用、<xref:System.Threading.Thread.BeginThreadAffinity%2A>と<xref:System.Threading.Thread.EndThreadAffinity%2A>メソッドのコード ブロックは、オペレーティング システムの物理スレッドの id に依存しているホストに通知します。</span><span class="sxs-lookup"><span data-stu-id="44abe-428">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="44abe-429">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-429">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="44abe-430">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-430">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="44abe-431">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="44abe-431">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Threading.Thread.EndThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.Contexts.Context CurrentContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Runtime.Remoting.Contexts.Context CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentContext As Context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::Remoting::Contexts::Context ^ CurrentContext { System::Runtime::Remoting::Contexts::Context ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentContext : System.Runtime.Remoting.Contexts.Context" Usage="System.Threading.Thread.CurrentContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Contexts.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-432">スレッドが実行されている現在のコンテキストを取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-432">Gets the current context in which the thread is executing.</span></span></summary>
        <value><span data-ttu-id="44abe-433">現在のスレッド コンテキストを表す <see cref="T:System.Runtime.Remoting.Contexts.Context" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-433">A <see cref="T:System.Runtime.Remoting.Contexts.Context" /> representing the current thread context.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="44abe-434">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-434">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="44abe-435">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-435">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="44abe-436">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="44abe-436">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Threading.Thread.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-437">現在のスレッドのカルチャを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-437">Gets or sets the culture for the current thread.</span></span></summary>
        <value><span data-ttu-id="44abe-438">現在のスレッドでカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="44abe-438">An object that represents the culture for the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-439"><xref:System.Globalization.CultureInfo>と共にその関連付けられているオブジェクトでは、このプロパティによって返されるオブジェクトは、既定の日付の書式、時間、数値、通貨の値、テキストの順序を並べ替え、規則、大文字小文字の区別を特定し、文字列比較。</span><span class="sxs-lookup"><span data-stu-id="44abe-439">The <xref:System.Globalization.CultureInfo> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.</span></span> <span data-ttu-id="44abe-440">参照してください、<xref:System.Globalization.CultureInfo>クラスのカルチャの名前と識別子、インバリアント、中立、および特定のカルチャの違いについて説明し、スレッドとアプリケーション ドメインに影響を与える方法のカルチャ情報。</span><span class="sxs-lookup"><span data-stu-id="44abe-440">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="44abe-441">参照してください、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>プロパティをスレッドの既定のカルチャを決定する方法と、ユーザーが自分のコンピューターのカルチャ情報を設定する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="44abe-441">See the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property to learn how a thread's default culture is determined, and how users set culture information for their computers.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="44abe-442"><xref:System.Threading.Thread.CurrentCulture>プロパティは、現在のスレッド以外の任意のスレッドを使用すると確実に機能しません。</span><span class="sxs-lookup"><span data-stu-id="44abe-442">The <xref:System.Threading.Thread.CurrentCulture> property doesn't work reliably when used with any thread other than the current thread.</span></span> <span data-ttu-id="44abe-443">.NET framework のプロパティの読み取り、信頼性が高くはありませんが、現在のスレッド以外のスレッドを設定することです。</span><span class="sxs-lookup"><span data-stu-id="44abe-443">In .NET Framework, reading the property is reliable, although setting it for a thread other than the current thread is not.</span></span> <span data-ttu-id="44abe-444">.NET Core で、<xref:System.InvalidOperationException>スレッドが読み取りまたは書き込みを試みる場合にスローされる、<xref:System.Threading.Thread.CurrentCulture>別のスレッドでのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-444">On .NET Core, an <xref:System.InvalidOperationException> is thrown if a thread attempts to read or write the <xref:System.Threading.Thread.CurrentCulture> property on a different thread.</span></span>
> <span data-ttu-id="44abe-445">使用することをお勧め、<xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType>プロパティを取得して、現在のカルチャを設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-445">We recommend that you use the <xref:System.Globalization.CultureInfo.CurrentCulture?displayProperty=nameWithType> property to retrieve and set the current culture.</span></span>

 <span data-ttu-id="44abe-446">以降では、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、設定することができます、<xref:System.Threading.Thread.CurrentCulture%2A>ニュートラル カルチャのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-446">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can set the <xref:System.Threading.Thread.CurrentCulture%2A> property to a neutral culture.</span></span> <span data-ttu-id="44abe-447">これは、ための動作、<xref:System.Globalization.CultureInfo>クラスが変更されました。ニュートラル カルチャで、プロパティの値を表す場合 (具体的には、 <xref:System.Globalization.CultureInfo.Calendar%2A>、 <xref:System.Globalization.CultureInfo.CompareInfo%2A>、 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>、<xref:System.Globalization.CultureInfo.NumberFormat%2A>と<xref:System.Globalization.CultureInfo.TextInfo%2A>プロパティ) のニュートラル カルチャに関連付けられている特定のカルチャを反映します。</span><span class="sxs-lookup"><span data-stu-id="44abe-447">This is because the behavior of the <xref:System.Globalization.CultureInfo> class has changed: When it represents a neutral culture, its property values (in particular, the <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, and <xref:System.Globalization.CultureInfo.TextInfo%2A> properties) now reflect the specific culture that is associated with the neutral culture.</span></span> <span data-ttu-id="44abe-448">.NET Framework の以前のバージョンで、<xref:System.Threading.Thread.CurrentCulture%2A>プロパティをスローしました、<xref:System.NotSupportedException>ニュートラル カルチャが割り当てられたときに例外。</span><span class="sxs-lookup"><span data-stu-id="44abe-448">In earlier versions of the .NET Framework, the <xref:System.Threading.Thread.CurrentCulture%2A> property threw a <xref:System.NotSupportedException> exception when a neutral culture was assigned.</span></span>  
  
## Examples  
 <span data-ttu-id="44abe-449">次の例では、コントロール パネルで設定されているカルチャで表示する Windows フォーム アプリケーションのユーザー インターフェイス スレッドのステートメントを示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-449">The following example shows the threading statement that allows the user interface of a Windows Forms application to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="44abe-450">追加のコードが必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-450">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44abe-451">プロパティが <see langword="null" /> に設定されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-451">The property is set to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44abe-452">.NET Core のみ: 別のスレッドからのスレッドのカルチャの読み取りまたは書き込みはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-452">.NET Core only: Reading or writing the culture of a thread from another thread is not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="44abe-453">プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-453">for setting the property.</span></span> <span data-ttu-id="44abe-454">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span><span class="sxs-lookup"><span data-stu-id="44abe-454">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentPrincipal">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.IPrincipal CurrentPrincipal" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::IPrincipal ^ CurrentPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="System.Threading.Thread.CurrentPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-455">ロールベースのセキュリティに関する、スレッドの現在のプリンシパルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-455">Gets or sets the thread's current principal (for role-based security).</span></span></summary>
        <value><span data-ttu-id="44abe-456">セキュリティ コンテキストを表す <see cref="T:System.Security.Principal.IPrincipal" /> 値。</span><span class="sxs-lookup"><span data-stu-id="44abe-456">An <see cref="T:System.Security.Principal.IPrincipal" /> value representing the security context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="44abe-457">次のコード例では、設定およびスレッドのプリンシパルを取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-457">The following code example shows how to set and retrieve the principal of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="44abe-458">呼び出し元に、プリンシパルを設定するために必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-458">The caller does not have the permission required to set the principal.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="44abe-459">プリンシパル オブジェクトを操作します。</span><span class="sxs-lookup"><span data-stu-id="44abe-459">to manipulate the principal object.</span></span> <span data-ttu-id="44abe-460"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="44abe-460">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentThread">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread CurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Thread CurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentThread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Thread ^ CurrentThread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentThread : System.Threading.Thread" Usage="System.Threading.Thread.CurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-461">現在実行中のスレッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-461">Gets the currently running thread.</span></span></summary>
        <value><span data-ttu-id="44abe-462">現在実行中のスレッドを表す <see cref="T:System.Threading.Thread" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-462">A <see cref="T:System.Threading.Thread" /> that is the representation of the currently running thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="44abe-463">次の例では、さらに 20 件の子タスクを作成するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="44abe-463">The following example creates a task that in turn creates 20 child tasks.</span></span> <span data-ttu-id="44abe-464">それぞれのタスクとして、アプリケーション自体を呼び出す、`ShowThreadInformation`メソッドを使用して、<xref:System.Threading.Thread.CurrentThread%2A>プロパティが実行されているスレッドに関する情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-464">The application itself, as well as each task, calls the `ShowThreadInformation` method, which uses the <xref:System.Threading.Thread.CurrentThread%2A> property  to display information about the thread on which it is running.</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.currentthread/cs/currentthread2.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.currentthread/vb/currentthread2.vb#1)]  
  
 <span data-ttu-id="44abe-465">各子タスクでは、1 から 1,000,000 まで 100万乱数を生成し、平均値を返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-465">Each child task generates 1 million random numbers between 1 and 1 million and returns their mean.</span></span> <span data-ttu-id="44abe-466">親タスクの呼び出し、<xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType>各タスクによって返される、平均値を表示する前に、子タスクが完了したことを確認する方法および手段の平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="44abe-466">The parent task calls the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method to ensure that the child tasks have completed before displaying the mean returned by each task and calculating the mean of means.</span></span>  
  
 <span data-ttu-id="44abe-467">アプリケーションがフォア グラウンド スレッドで実行中にスレッド プールのスレッドで各タスクが実行に注意してください。</span><span class="sxs-lookup"><span data-stu-id="44abe-467">Note that while the application runs on a foreground thread, each task runs on a thread pool thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Threading.Thread.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-468">実行時にカルチャ固有のリソースを検索するためにリソース マネージャーで使用される、現在のカルチャを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-468">Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</span></span></summary>
        <value><span data-ttu-id="44abe-469">現在のカルチャを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="44abe-469">An object that represents the current culture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-470">UI カルチャでは、アプリケーションがユーザーの入力と出力をサポートするために必要があるあり、既定では、オペレーティング システムのカルチャと同じリソースを指定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-470">The UI culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture.</span></span> <span data-ttu-id="44abe-471">参照してください、<xref:System.Globalization.CultureInfo>クラスのカルチャの名前と識別子、インバリアント、中立、および特定のカルチャの違いについて説明し、スレッドとアプリケーション ドメインに影響を与える方法のカルチャ情報。</span><span class="sxs-lookup"><span data-stu-id="44abe-471">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="44abe-472">参照してください、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>プロパティをスレッドの既定 UI カルチャを決定する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="44abe-472">See the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> property to learn how a thread's default UI culture is determined.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="44abe-473"><xref:System.Threading.Thread.CurrentUICulture>プロパティは、現在のスレッド以外の任意のスレッドを使用すると確実に機能しません。</span><span class="sxs-lookup"><span data-stu-id="44abe-473">The <xref:System.Threading.Thread.CurrentUICulture> property doesn't work reliably when used with any thread other than the current thread.</span></span> <span data-ttu-id="44abe-474">.NET framework のプロパティの読み取り、信頼性が高くはありませんが、現在のスレッド以外のスレッドを設定することです。</span><span class="sxs-lookup"><span data-stu-id="44abe-474">In .NET Framework, reading the property is reliable, although setting it for a thread other than the current thread is not.</span></span> <span data-ttu-id="44abe-475">.NET Core で、<xref:System.InvalidOperationException>スレッドが読み取りまたは書き込みを試みる場合にスローされる、<xref:System.Threading.Thread.CurrentUICulture>別のスレッドでのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-475">On .NET Core, an <xref:System.InvalidOperationException> is thrown if a thread attempts to read or write the <xref:System.Threading.Thread.CurrentUICulture> property on a different thread.</span></span>
> <span data-ttu-id="44abe-476">使用することをお勧め、<xref:System.Globalization.CultureInfo.CurrentUICulture?displayProperty=nameWithType>プロパティを取得して、現在のカルチャを設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-476">We recommend that you use the <xref:System.Globalization.CultureInfo.CurrentUICulture?displayProperty=nameWithType> property to retrieve and set the current culture.</span></span>

 <span data-ttu-id="44abe-477"><xref:System.Globalization.CultureInfo>ニュートラル カルチャは、このプロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-477">The <xref:System.Globalization.CultureInfo> returned by this property can be a neutral culture.</span></span> <span data-ttu-id="44abe-478">ニュートラル カルチャは、メソッドなどの書式設定では使用できません<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>、 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>、および<xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-478">Neutral cultures should not be used with formatting methods such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, and <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="44abe-479">使用して、 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 、特定のカルチャを取得または使用するメソッド、<xref:System.Threading.Thread.CurrentCulture%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-479">Use the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method to get a specific culture, or use the <xref:System.Threading.Thread.CurrentCulture%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-480"><xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>メソッドがスローされます<xref:System.ArgumentException>のニュートラル カルチャ"Zh-hant"("ZH-CHT") と"Zh-hans"("ZH-CHS")。</span><span class="sxs-lookup"><span data-stu-id="44abe-480">The <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method throws <xref:System.ArgumentException> for the neutral cultures "zh-Hant" ("zh-CHT") and "zh-Hans" ("zh-CHS").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-481">次の例では、現在のスレッド UI カルチャの言語がフランス語でかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="44abe-481">The following example determines whether the language of the current thread's UI culture is French.</span></span> <span data-ttu-id="44abe-482">そうでない場合、現在のスレッド UI カルチャが英語 (米国) に設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-482">If it is not, it sets the UI culture of the current thread to English (United States).</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/cs/CurrentUICulture1.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/vb/CurrentUICulture1.vb#1)]  
  
 <span data-ttu-id="44abe-483">次のコード例では、コントロール パネルで設定されているカルチャで表示する Windows フォームのユーザー インターフェイス スレッドのステートメントを示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-483">The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="44abe-484">追加のコードが必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-484">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44abe-485">プロパティが <see langword="null" /> に設定されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-485">The property is set to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="44abe-486">プロパティが、リソース ファイルの検索に使用できないカルチャ名に設定されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-486">The property is set to a culture name that cannot be used to locate a resource file.</span></span> <span data-ttu-id="44abe-487">リソース ファイル名に使用できるのは、文字、数字、ハイフン、またはアンダースコアのみです。</span><span class="sxs-lookup"><span data-stu-id="44abe-487">Resource filenames must include only letters, numbers, hyphens or underscores.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44abe-488">.NET Core のみ: 別のスレッドからのスレッドのカルチャの読み取りまたは書き込みはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-488">.NET Core only: Reading or writing the culture of a thread from another thread is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DisableComObjectEagerCleanup">
      <MemberSignature Language="C#" Value="public void DisableComObjectEagerCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableComObjectEagerCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.DisableComObjectEagerCleanup" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisableComObjectEagerCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisableComObjectEagerCleanup();" />
      <MemberSignature Language="F#" Value="member this.DisableComObjectEagerCleanup : unit -&gt; unit" Usage="thread.DisableComObjectEagerCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-489">現在のスレッドのランタイム呼び出し可能ラッパー (RCW: Runtime Callable Wrapper) の自動クリーンアップをオフにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-489">Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-490">既定で、共通言語ランタイム (CLR) は自動的にクリーンアップするランタイム呼び出し可能ラッパー。</span><span class="sxs-lookup"><span data-stu-id="44abe-490">By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically.</span></span> <span data-ttu-id="44abe-491">少数のアプリケーションの再入の問題が発生すると、クリーンアップ中に CLR ポンプ メッセージは、次の異常な条件を満たします。</span><span class="sxs-lookup"><span data-stu-id="44abe-491">The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:</span></span>  
  
-   <span data-ttu-id="44abe-492">アプリケーションは、独自のメッセージ ポンプは。</span><span class="sxs-lookup"><span data-stu-id="44abe-492">The application does its own message pumping.</span></span>  
  
-   <span data-ttu-id="44abe-493">アプリケーションは、メッセージ ポンプが発生したときに正確に制御する必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-493">The application needs to control precisely when message pumping occurs.</span></span>  
  
 <span data-ttu-id="44abe-494">このようなアプリケーションを使用できる、<xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A>メソッドを CLR が呼び出し可能ラッパーの実行時の自動回復を実行するを防ぐためにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-494">Such applications can use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.</span></span>  
  
 <span data-ttu-id="44abe-495">このメソッドは、スレッドで呼び出されると、自動クリーンアップがそのスレッドに再度有効にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="44abe-495">When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread.</span></span> <span data-ttu-id="44abe-496">使用して、アプリケーションのランタイム呼び出し可能ラッパーをクリーンアップする準備ができたら、<xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType>現在のコンテキスト内のすべてのランタイム呼び出し可能ラッパーをクリーンアップするランタイムに指示するメソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-496">When your application is ready to clean up runtime callable wrappers, use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> method to instruct the runtime to clean up all runtime callable wrappers in the current context.</span></span> <span data-ttu-id="44abe-497">メッセージ ポンプは、メソッドの実行中に発生します。</span><span class="sxs-lookup"><span data-stu-id="44abe-497">Message pumping occurs while the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="44abe-498">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-498">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="44abe-499">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="44abe-499">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="EndCriticalRegion">
      <MemberSignature Language="C#" Value="public static void EndCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndCriticalRegion();" />
      <MemberSignature Language="F#" Value="static member EndCriticalRegion : unit -&gt; unit" Usage="System.Threading.Thread.EndCriticalRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-500">スレッドの中止または処理されない例外の影響が現在のタスクだけに及ぶコード領域に実行が入ることをホストに通知します。</span><span class="sxs-lookup"><span data-stu-id="44abe-500">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-501">Microsoft SQL Server 2005 などの共通言語ランタイム (CLR) のホストには、コードの重要および重大でないリージョン内のエラーのさまざまなポリシーを確立できます。</span><span class="sxs-lookup"><span data-stu-id="44abe-501">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="44abe-502">クリティカル領域では、するスレッドの中止または処理されない例外の影響があります、現在のタスクに制限されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-502">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="44abe-503">これに対し、中止または致命的でないコードの領域でエラーには、エラーが発生したタスクのみに影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-503">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="44abe-504">たとえば、ロックを保持しているときにメモリを割り当てようとするタスクを検討してください。</span><span class="sxs-lookup"><span data-stu-id="44abe-504">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="44abe-505">メモリの割り当てが失敗した場合がの安定性を確保するための十分な現在のタスクを中止していますが、 <xref:System.AppDomain>、同じロックを待機しているドメインを他のタスクにすることができますがあります。</span><span class="sxs-lookup"><span data-stu-id="44abe-505">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="44abe-506">現在のタスクが終了した場合は、その他のタスクがデッドロックでした。</span><span class="sxs-lookup"><span data-stu-id="44abe-506">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="44abe-507">全体をアンロードするホストがありますクリティカル領域で、障害が発生したときに<xref:System.AppDomain>可能性がある不安定な状態で実行を続けることのリスクを冒すよりもします。</span><span class="sxs-lookup"><span data-stu-id="44abe-507">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="44abe-508">コードがクリティカル領域を入力することをホストに通知をするために呼び出す<xref:System.Threading.Thread.BeginCriticalRegion%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-508">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="44abe-509">呼び出す<xref:System.Threading.Thread.EndCriticalRegion%2A>と重大でないコードの領域への実行を返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-509">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="44abe-510">SQL Server 2005 で実行されるコードでこのメソッドを使用するには、最上位のホストの保護レベルで実行されるコードが必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-510">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-511">次の例では、使用、<xref:System.Threading.Thread.BeginCriticalRegion%2A>と<xref:System.Threading.Thread.EndCriticalRegion%2A>重要および重大でない地域コードのブロックに分割する方法。</span><span class="sxs-lookup"><span data-stu-id="44abe-511">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.BeginCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="EndThreadAffinity">
      <MemberSignature Language="C#" Value="public static void EndThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndThreadAffinity();" />
      <MemberSignature Language="F#" Value="static member EndThreadAffinity : unit -&gt; unit" Usage="System.Threading.Thread.EndThreadAffinity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-512">マネージド コードが現在のオペレーティング システムの物理スレッドの ID に依存する命令の実行を完了したことをホストに通知します。</span><span class="sxs-lookup"><span data-stu-id="44abe-512">Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-513">Microsoft SQL Server 2005 など、共通言語ランタイムの一部のホストでは、独自のスレッド管理を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-513">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="44abe-514">独自のスレッド管理を提供するホストに移動できます実行中のタスク 1 つのオペレーティング システムの物理スレッドから別、いつでも。</span><span class="sxs-lookup"><span data-stu-id="44abe-514">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="44abe-515">ほとんどのタスクは、このを切り替えることでは受けません。</span><span class="sxs-lookup"><span data-stu-id="44abe-515">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="44abe-516">ただし、いくつかのタスクはスレッド アフィニティを設定する-は、オペレーティング システムの物理スレッドの id に依存します。</span><span class="sxs-lookup"><span data-stu-id="44abe-516">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="44abe-517">これらのタスクは、スイッチできないコードを実行するときをホストに通知する必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-517">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="44abe-518">呼び出す必要がありますの例では、オペレーティング システムを取得する、アプリケーション呼び出しシステム API をロックする場合、Win32 CRITICAL_SECTION など、スレッドの関係のある<xref:System.Threading.Thread.BeginThreadAffinity%2A>、ロックを取得する前に、<xref:System.Threading.Thread.EndThreadAffinity%2A>ロックを解放した後。</span><span class="sxs-lookup"><span data-stu-id="44abe-518">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="44abe-519">SQL Server 2005 で実行されるコードでこのメソッドを使用するには、最上位のホストの保護レベルで実行されるコードが必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-519">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-520">次の例では、使用、<xref:System.Threading.Thread.BeginThreadAffinity%2A>と<xref:System.Threading.Thread.EndThreadAffinity%2A>メソッドのコード ブロックは、オペレーティング システムの物理スレッドの id に依存しているホストに通知します。</span><span class="sxs-lookup"><span data-stu-id="44abe-520">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="44abe-521">呼び出し元に、必要なアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-521">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="44abe-522">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-522">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="44abe-523">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="44abe-523">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Threading.Thread.BeginThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="ExecutionContext">
      <MemberSignature Language="C#" Value="public System.Threading.ExecutionContext ExecutionContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.ExecutionContext ExecutionContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ExecutionContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionContext As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ExecutionContext ^ ExecutionContext { System::Threading::ExecutionContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecutionContext : System.Threading.ExecutionContext" Usage="System.Threading.Thread.ExecutionContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-524">現在のスレッドのさまざまなコンテキストに関する情報を格納する <see cref="T:System.Threading.ExecutionContext" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-524">Gets an <see cref="T:System.Threading.ExecutionContext" /> object that contains information about the various contexts of the current thread.</span></span></summary>
        <value><span data-ttu-id="44abe-525">現在のスレッドのコンテキスト情報を統合する <see cref="T:System.Threading.ExecutionContext" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="44abe-525">An <see cref="T:System.Threading.ExecutionContext" /> object that consolidates context information for the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-526"><xref:System.Threading.ExecutionContext>クラスは、実行の論理スレッドに関連するすべての情報の 1 つのコンテナーを提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-526">The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution.</span></span> <span data-ttu-id="44abe-527">これには、セキュリティ コンテキスト、コンテキストを呼び出し、同期コンテキスト、ローカリゼーション コンテキスト、およびトランザクション コンテキストが含まれます。</span><span class="sxs-lookup"><span data-stu-id="44abe-527">This includes security context, call context, synchronization context, localization context, and transaction context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Thread ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Thread ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="thread.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-528">ガベージ コレクターが <see cref="T:System.Threading.Thread" /> オブジェクトを再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-528">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.Thread" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-529">ガベージ コレクター<xref:System.Threading.Thread.Finalize%2A>と現在のオブジェクトが完了するを準備します。</span><span class="sxs-lookup"><span data-stu-id="44abe-529">The garbage collector calls <xref:System.Threading.Thread.Finalize%2A> when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeNamedDataSlot">
      <MemberSignature Language="C#" Value="public static void FreeNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.FreeNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FreeNamedDataSlot (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FreeNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member FreeNamedDataSlot : string -&gt; unit" Usage="System.Threading.Thread.FreeNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="44abe-530">解放されるデータ スロットの名前。</span><span class="sxs-lookup"><span data-stu-id="44abe-530">The name of the data slot to be freed.</span></span></param>
        <summary><span data-ttu-id="44abe-531">プロセス内のすべてのスレッドに関して、名前とスロットの関連付けを解除します。</span><span class="sxs-lookup"><span data-stu-id="44abe-531">Eliminates the association between a name and a slot, for all threads in the process.</span></span> <span data-ttu-id="44abe-532">パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-532">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-533">.NET Framework には、スレッド ローカル ストレージ (TLS) を使用して 2 つのメカニズムが用意されています: スレッド相対静的フィールド (でマークされているフィールドは、<xref:System.ThreadStaticAttribute>属性) とデータ スロット。</span><span class="sxs-lookup"><span data-stu-id="44abe-533">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="44abe-534">スレッド相対静的フィールドは、データ スロットより優れたパフォーマンスを提供し、コンパイル時の型チェックを有効にします。</span><span class="sxs-lookup"><span data-stu-id="44abe-534">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="44abe-535">詳細については、TLS を使用して、次を参照してください。[スレッド ローカル ストレージ。スレッド相対静的フィールドとデータ スロット](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)します。</span><span class="sxs-lookup"><span data-stu-id="44abe-535">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="44abe-536">いずれかのスレッドの呼び出し後`FreeNamedDataSlot`、他のスレッドを呼び出す<xref:System.Threading.Thread.GetNamedDataSlot%2A>と同じ名前は、名前に関連付けられた新しいスロットを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-536">After any thread calls `FreeNamedDataSlot`, any other thread that calls <xref:System.Threading.Thread.GetNamedDataSlot%2A> with the same name will allocate a new slot associated with the name.</span></span> <span data-ttu-id="44abe-537">後続の呼び出し`GetNamedDataSlot`任意のスレッドでは、新しいスロットを返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-537">Subsequent calls to `GetNamedDataSlot` by any thread will return the new slot.</span></span> <span data-ttu-id="44abe-538">ただし、任意のスレッドをまだ、<xref:System.LocalDataStoreSlot?displayProperty=nameWithType>を以前の呼び出しによって返される`GetNamedDataSlot`を引き続き古いスロットを使用できます。</span><span class="sxs-lookup"><span data-stu-id="44abe-538">However, any thread that still has a <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> returned by an earlier call to `GetNamedDataSlot` can continue to use the old slot.</span></span>  
  
 <span data-ttu-id="44abe-539">名前と関連付けられているスロットがリリースされた場合にのみすべて`LocalDataStoreSlot`への呼び出しの前に取得された`FreeNamedDataSlot`リリースされ、ガベージ コレクションします。</span><span class="sxs-lookup"><span data-stu-id="44abe-539">A slot that has been associated with a name is released only when every `LocalDataStoreSlot` that was obtained prior to the call to `FreeNamedDataSlot` has been released and garbage-collected.</span></span>  
  
 <span data-ttu-id="44abe-540">スレッドは、スレッド固有のデータを格納するのにローカル ストアのメモリ メカニズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-540">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="44abe-541">共通言語ランタイムは、作成時に、各プロセスにマルチ スロットのデータ ストア配列を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-541">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="44abe-542">スレッドは、データ ストア内のデータ スロットを割り当てることができますが、格納および取得するデータ スロットの値し、スレッドの有効期限が切れた後に再利用するため、スロットを解放します。</span><span class="sxs-lookup"><span data-stu-id="44abe-542">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="44abe-543">データ スロットは、スレッドごとに一意です。</span><span class="sxs-lookup"><span data-stu-id="44abe-543">Data slots are unique per thread.</span></span> <span data-ttu-id="44abe-544">他のスレッド (子スレッドであっても) はそのデータを取得できません。</span><span class="sxs-lookup"><span data-stu-id="44abe-544">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-545">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="44abe-545">This section contains two code examples.</span></span> <span data-ttu-id="44abe-546">最初の例でマークされているフィールドを使用する方法を示しています、<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持する属性。</span><span class="sxs-lookup"><span data-stu-id="44abe-546">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="44abe-547">2 番目の例では、同じことを行うデータ スロットを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-547">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="44abe-548">**最初の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-548">**First Example**</span></span>  
  
 <span data-ttu-id="44abe-549">次の例でマークされているフィールドを使用する方法を示します<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持するためにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-549">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="44abe-550">この手法は、2 番目の例で示す方法よりも優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-550">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="44abe-551">**2 番目の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-551">**Second Example**</span></span>  
  
 <span data-ttu-id="44abe-552">次の例では、名前付きデータ スロットを使用して、スレッド固有の情報を格納する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-552">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="44abe-553">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-553">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="44abe-554">スレッド ローカル ストレージ:スレッド相対静的フィールドとデータ スロット</span><span class="sxs-lookup"><span data-stu-id="44abe-554">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState GetApartmentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.ApartmentState GetApartmentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApartmentState () As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::ApartmentState GetApartmentState();" />
      <MemberSignature Language="F#" Value="member this.GetApartmentState : unit -&gt; System.Threading.ApartmentState" Usage="thread.GetApartmentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-555">アパートメント状態を示す <see cref="T:System.Threading.ApartmentState" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-555">Returns an <see cref="T:System.Threading.ApartmentState" /> value indicating the apartment state.</span></span></summary>
        <returns><span data-ttu-id="44abe-556">マネージド スレッドのアパートメント状態を示す <see cref="T:System.Threading.ApartmentState" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="44abe-556">One of the <see cref="T:System.Threading.ApartmentState" /> values indicating the apartment state of the managed thread.</span></span> <span data-ttu-id="44abe-557">既定値は <see cref="F:System.Threading.ApartmentState.Unknown" /> です。</span><span class="sxs-lookup"><span data-stu-id="44abe-557">The default is <see cref="F:System.Threading.ApartmentState.Unknown" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-558">このメソッドは、と共に、<xref:System.Threading.Thread.SetApartmentState%2A>メソッドと<xref:System.Threading.Thread.TrySetApartmentState%2A>メソッド、置換、<xref:System.Threading.Thread.ApartmentState%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-558">This method, along with the <xref:System.Threading.Thread.SetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-559">次のコード例に示します、 <xref:System.Threading.Thread.GetApartmentState%2A>、 <xref:System.Threading.Thread.SetApartmentState%2A>、および<xref:System.Threading.Thread.TrySetApartmentState%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-559">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="44abe-560">このコード例では、スレッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="44abe-560">The code example creates a thread.</span></span> <span data-ttu-id="44abe-561">スレッドを開始すると、前に<xref:System.Threading.Thread.GetApartmentState%2A>初期表示<xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType>状態と<xref:System.Threading.Thread.SetApartmentState%2A>状態に変更します<xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-561">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="44abe-562"><xref:System.Threading.Thread.TrySetApartmentState%2A>メソッドが戻ります`false`に状態を変更しようとしています。<xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>アパートメント状態が既に設定されているためです。</span><span class="sxs-lookup"><span data-stu-id="44abe-562">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="44abe-563">場合は、同じ操作で<xref:System.Threading.Thread.SetApartmentState%2A>、<xref:System.InvalidOperationException>がスローされました。</span><span class="sxs-lookup"><span data-stu-id="44abe-563">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="44abe-564">スレッドを開始した後、<xref:System.Threading.Thread.TrySetApartmentState%2A>メソッドは、もう一度使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-564">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="44abe-565">これは、ときにスローします<xref:System.Threading.ThreadStateException>スレッドが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-565">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompressedStack">
      <MemberSignature Language="C#" Value="public System.Threading.CompressedStack GetCompressedStack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.CompressedStack GetCompressedStack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCompressedStack" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCompressedStack () As CompressedStack" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CompressedStack ^ GetCompressedStack();" />
      <MemberSignature Language="F#" Value="member this.GetCompressedStack : unit -&gt; System.Threading.CompressedStack" Usage="thread.GetCompressedStack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Thread.GetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CompressedStack</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-566">現在のスレッドのスタックをキャプチャするために使用できる <see cref="T:System.Threading.CompressedStack" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-566">Returns a <see cref="T:System.Threading.CompressedStack" /> object that can be used to capture the stack for the current thread.</span></span></summary>
        <returns><span data-ttu-id="44abe-567">なし。</span><span class="sxs-lookup"><span data-stu-id="44abe-567">None.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-568">このメソッドはサポートされなくなりました。</span><span class="sxs-lookup"><span data-stu-id="44abe-568">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44abe-569">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="44abe-569">In all cases.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="44abe-570">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-570">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="44abe-571">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="44abe-571">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProcessorId">
      <MemberSignature Language="C#" Value="public static int GetCurrentProcessorId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCurrentProcessorId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCurrentProcessorId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentProcessorId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetCurrentProcessorId();" />
      <MemberSignature Language="F#" Value="static member GetCurrentProcessorId : unit -&gt; int" Usage="System.Threading.Thread.GetCurrentProcessorId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (LocalDataStoreSlot slot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(class System.LocalDataStoreSlot slot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (slot As LocalDataStoreSlot) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(LocalDataStoreSlot ^ slot);" />
      <MemberSignature Language="F#" Value="static member GetData : LocalDataStoreSlot -&gt; obj" Usage="System.Threading.Thread.GetData slot" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="slot"><span data-ttu-id="44abe-572">値の取得元の <see cref="T:System.LocalDataStoreSlot" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-572">The <see cref="T:System.LocalDataStoreSlot" /> from which to get the value.</span></span></param>
        <summary><span data-ttu-id="44abe-573">現在のスレッドの現在のドメイン内で指定した現在のスレッドのスロットから値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-573">Retrieves the value from the specified slot on the current thread, within the current thread's current domain.</span></span> <span data-ttu-id="44abe-574">パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-574">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="44abe-575">取得された値。</span><span class="sxs-lookup"><span data-stu-id="44abe-575">The retrieved value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-576">.NET Framework には、スレッド ローカル ストレージ (TLS) を使用して 2 つのメカニズムが用意されています: スレッド相対静的フィールド (でマークされているフィールドは、<xref:System.ThreadStaticAttribute>属性) とデータ スロット。</span><span class="sxs-lookup"><span data-stu-id="44abe-576">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="44abe-577">スレッド相対静的フィールドは、データ スロットより優れたパフォーマンスを提供し、コンパイル時の型チェックを有効にします。</span><span class="sxs-lookup"><span data-stu-id="44abe-577">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="44abe-578">詳細については、TLS を使用して、次を参照してください。[スレッド ローカル ストレージ。スレッド相対静的フィールドとデータ スロット](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)します。</span><span class="sxs-lookup"><span data-stu-id="44abe-578">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="44abe-579">スレッドは、スレッド固有のデータを格納するのにローカル ストアのメモリ メカニズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-579">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="44abe-580">共通言語ランタイムは、作成時に、各プロセスにマルチ スロットのデータ ストア配列を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-580">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="44abe-581">スレッドは、データ ストア内のデータ スロットを割り当てることができますが、格納および取得するデータ スロットの値し、スレッドの有効期限が切れた後に再利用するため、スロットを解放します。</span><span class="sxs-lookup"><span data-stu-id="44abe-581">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="44abe-582">データ スロットは、スレッドごとに一意です。</span><span class="sxs-lookup"><span data-stu-id="44abe-582">Data slots are unique per thread.</span></span> <span data-ttu-id="44abe-583">他のスレッド (子スレッドであっても) はそのデータを取得できません。</span><span class="sxs-lookup"><span data-stu-id="44abe-583">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-584"><xref:System.Threading.Thread.GetData%2A> `Shared`別のスレッドを参照する変数を使用してメソッドを呼び出す場合でも常に、現在実行中のスレッドに適用されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-584"><xref:System.Threading.Thread.GetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="44abe-585">混乱を回避するには、クラス名を呼び出すときに使用`Shared`メソッド:`Dim test As Object = Thread.GetData(testSlot)`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-585">To avoid confusion, use the class name when calling `Shared` methods: `Dim test As Object = Thread.GetData(testSlot)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-586">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="44abe-586">This section contains two code examples.</span></span> <span data-ttu-id="44abe-587">最初の例でマークされているフィールドを使用する方法を示しています、<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持する属性。</span><span class="sxs-lookup"><span data-stu-id="44abe-587">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="44abe-588">2 番目の例では、同じことを行うデータ スロットを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-588">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="44abe-589">**最初の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-589">**First Example**</span></span>  
  
 <span data-ttu-id="44abe-590">次の例でマークされているフィールドを使用する方法を示します<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持するためにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-590">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="44abe-591">この手法は、2 番目の例で示す方法よりも優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-591">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="44abe-592">**2 番目の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-592">**Second Example**</span></span>  
  
 <span data-ttu-id="44abe-593">次の例では、スレッド固有の情報を格納するデータ スロットを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-593">The following example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="44abe-594">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-594">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="44abe-595">スレッド ローカル ストレージ:スレッド相対静的フィールドとデータ スロット</span><span class="sxs-lookup"><span data-stu-id="44abe-595">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDomain">
      <MemberSignature Language="C#" Value="public static AppDomain GetDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain GetDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomain () As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ GetDomain();" />
      <MemberSignature Language="F#" Value="static member GetDomain : unit -&gt; AppDomain" Usage="System.Threading.Thread.GetDomain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-596">現在のスレッドが実行されている現在のドメインを返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-596">Returns the current domain in which the current thread is running.</span></span></summary>
        <returns><span data-ttu-id="44abe-597">実行中のスレッドの現在のアプリケーション ドメインを表す <see cref="T:System.AppDomain" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-597">An <see cref="T:System.AppDomain" /> representing the current application domain of the running thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="44abe-598">次のコード例の ID と名前を取得する方法を示しています、`AppDomain`でスレッドが実行されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-598">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainID">
      <MemberSignature Language="C#" Value="public static int GetDomainID ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDomainID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomainID" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomainID () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDomainID();" />
      <MemberSignature Language="F#" Value="static member GetDomainID : unit -&gt; int" Usage="System.Threading.Thread.GetDomainID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-599">一意のアプリケーション ドメイン識別子を返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-599">Returns a unique application domain identifier.</span></span></summary>
        <returns><span data-ttu-id="44abe-600">アプリケーション ドメインを一意に識別する 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="44abe-600">A 32-bit signed integer uniquely identifying the application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="44abe-601">次のコード例の ID と名前を取得する方法を示しています、`AppDomain`でスレッドが実行されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-601">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="thread.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-602">現在のスレッドのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-602">Returns a hash code for the current thread.</span></span></summary>
        <returns><span data-ttu-id="44abe-603">整数ハッシュ コード値。</span><span class="sxs-lookup"><span data-stu-id="44abe-603">An integer hash code value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-604">ハッシュ コードは、一意であることは保証されません。</span><span class="sxs-lookup"><span data-stu-id="44abe-604">The hash code is not guaranteed to be unique.</span></span> <span data-ttu-id="44abe-605">使用して、<xref:System.Threading.Thread.ManagedThreadId%2A>マネージ スレッドの一意の識別子が必要な場合のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-605">Use the <xref:System.Threading.Thread.ManagedThreadId%2A> property if you need a unique identifier for a managed thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot GetNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot GetNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ GetNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetNamedDataSlot : string -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.GetNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="44abe-606">ローカル データ スロットの名前。</span><span class="sxs-lookup"><span data-stu-id="44abe-606">The name of the local data slot.</span></span></param>
        <summary><span data-ttu-id="44abe-607">名前付きデータ スロットを検索します。</span><span class="sxs-lookup"><span data-stu-id="44abe-607">Looks up a named data slot.</span></span> <span data-ttu-id="44abe-608">パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-608">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="44abe-609">このスレッドに割り当てられた <see cref="T:System.LocalDataStoreSlot" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-609">A <see cref="T:System.LocalDataStoreSlot" /> allocated for this thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-610">.NET Framework には、スレッド ローカル ストレージ (TLS) を使用して 2 つのメカニズムが用意されています: スレッド相対静的フィールド (でマークされているフィールドは、<xref:System.ThreadStaticAttribute>属性) とデータ スロット。</span><span class="sxs-lookup"><span data-stu-id="44abe-610">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="44abe-611">スレッド相対静的フィールドは、データ スロットより優れたパフォーマンスを提供し、コンパイル時の型チェックを有効にします。</span><span class="sxs-lookup"><span data-stu-id="44abe-611">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="44abe-612">詳細については、TLS を使用して、次を参照してください。[スレッド ローカル ストレージ。スレッド相対静的フィールドとデータ スロット](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)します。</span><span class="sxs-lookup"><span data-stu-id="44abe-612">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="44abe-613">スレッドは、スレッド固有のデータを格納するのにローカル ストアのメモリ メカニズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-613">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="44abe-614">共通言語ランタイムは、作成時に、各プロセスにマルチ スロットのデータ ストア配列を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-614">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="44abe-615">スレッドは、データ ストア内のデータ スロットを割り当てることができますが、格納および取得するデータ スロットの値し、スレッドの有効期限が切れた後に再利用するため、スロットを解放します。</span><span class="sxs-lookup"><span data-stu-id="44abe-615">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="44abe-616">データ スロットは、スレッドごとに一意です。</span><span class="sxs-lookup"><span data-stu-id="44abe-616">Data slots are unique per thread.</span></span> <span data-ttu-id="44abe-617">他のスレッド (子スレッドであっても) はそのデータを取得できません。</span><span class="sxs-lookup"><span data-stu-id="44abe-617">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="44abe-618">名前付きスロットが存在しない場合は、新しいスロットが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="44abe-618">If the named slot does not exist, a new slot is allocated.</span></span> <span data-ttu-id="44abe-619">名前付きデータ スロットをパブリックにしてすべてのユーザーによって操作されることができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-619">Named data slots are public and can be manipulated by anyone.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-620">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="44abe-620">This section contains two code examples.</span></span> <span data-ttu-id="44abe-621">最初の例でマークされているフィールドを使用する方法を示しています、<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持する属性。</span><span class="sxs-lookup"><span data-stu-id="44abe-621">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="44abe-622">2 番目の例では、同じことを行うデータ スロットを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-622">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="44abe-623">**最初の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-623">**First Example**</span></span>  
  
 <span data-ttu-id="44abe-624">次の例でマークされているフィールドを使用する方法を示します<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持するためにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-624">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="44abe-625">この手法は、2 番目の例で示す方法よりも優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-625">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="44abe-626">**2 番目の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-626">**Second Example**</span></span>  
  
 <span data-ttu-id="44abe-627">次の例では、名前付きデータ スロットを使用して、スレッド固有の情報を格納する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-627">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="44abe-628">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-628">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="44abe-629">スレッド ローカル ストレージ:スレッド相対静的フィールドとデータ スロット</span><span class="sxs-lookup"><span data-stu-id="44abe-629">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Interrupt">
      <MemberSignature Language="C#" Value="public void Interrupt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Interrupt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Interrupt" />
      <MemberSignature Language="VB.NET" Value="Public Sub Interrupt ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Interrupt();" />
      <MemberSignature Language="F#" Value="member this.Interrupt : unit -&gt; unit" Usage="thread.Interrupt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-630"><see cref="F:System.Threading.ThreadState.WaitSleepJoin" /> スレッド状態のスレッドを中断します。</span><span class="sxs-lookup"><span data-stu-id="44abe-630">Interrupts a thread that is in the <see cref="F:System.Threading.ThreadState.WaitSleepJoin" /> thread state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-631">このスレッドが待機、スリープ、または結合状態で現在ブロックされていない場合は、次にブロックを開始すると中断されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-631">If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.</span></span>  
  
 <span data-ttu-id="44abe-632"><xref:System.Threading.ThreadInterruptedException> 中断されたスレッドでは、スレッドがブロックまでがスローされます。</span><span class="sxs-lookup"><span data-stu-id="44abe-632"><xref:System.Threading.ThreadInterruptedException> is thrown in the interrupted thread, but not until the thread blocks.</span></span> <span data-ttu-id="44abe-633">スレッドがブロックされない場合、例外がスローされず、そのため、スレッドが中断されることがなく完了ことがあります。</span><span class="sxs-lookup"><span data-stu-id="44abe-633">If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-634">次のコード例が中断され、その後がブロックされたときに、実行中のスレッドの動作を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-634">The following code example shows the behavior of a running thread when it is interrupted and subsequently gets blocked.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Interrupt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Interrupt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Interrupt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="44abe-635">呼び出し元に適切な <see cref="T:System.Security.Permissions.SecurityPermission" /> がありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-635">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="44abe-636">スレッドでの高度な操作。</span><span class="sxs-lookup"><span data-stu-id="44abe-636">for advanced operations on threads.</span></span> <span data-ttu-id="44abe-637"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="44abe-637">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <altmember cref="T:System.Threading.ThreadState" />
        <related type="Article" href="~/docs/standard/threading/pausing-and-resuming-threads.md"><span data-ttu-id="44abe-638">スレッドの一時中断および中断</span><span class="sxs-lookup"><span data-stu-id="44abe-638">Pausing and interrupting threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsAlive">
      <MemberSignature Language="C#" Value="public bool IsAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAlive" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsAlive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAlive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAlive : bool" Usage="System.Threading.Thread.IsAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-639">現在のスレッドの実行ステータスを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-639">Gets a value indicating the execution status of the current thread.</span></span></summary>
        <value><span data-ttu-id="44abe-640">このスレッドが起動していて、正常終了しておらず中止されてもいない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-640"><see langword="true" /> if this thread has been started and has not terminated normally or aborted; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBackground">
      <MemberSignature Language="C#" Value="public bool IsBackground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBackground" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsBackground" />
      <MemberSignature Language="VB.NET" Value="Public Property IsBackground As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBackground { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsBackground : bool with get, set" Usage="System.Threading.Thread.IsBackground" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-641">スレッドがバックグラウンド スレッドであるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-641">Gets or sets a value indicating whether or not a thread is a background thread.</span></span></summary>
        <value><span data-ttu-id="44abe-642">このスレッドがバックグラウンド スレッドである場合またはバックグラウンド スレッドになる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-642"><see langword="true" /> if this thread is or is to become a background thread; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-643">スレッドは、バック グラウンド スレッドまたはフォア グラウンド スレッドのいずれかです。</span><span class="sxs-lookup"><span data-stu-id="44abe-643">A thread is either a background thread or a foreground thread.</span></span> <span data-ttu-id="44abe-644">バック グラウンド スレッドが妨げられないプロセスを終了する点を除いて、バック グラウンド スレッドはフォア グラウンド スレッドと同じです。</span><span class="sxs-lookup"><span data-stu-id="44abe-644">Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating.</span></span> <span data-ttu-id="44abe-645">プロセスに属するすべてのフォア グラウンド スレッドが終了すると、共通言語ランタイム プロセスを終了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-645">Once all foreground threads belonging to a process have terminated, the common language runtime ends the process.</span></span> <span data-ttu-id="44abe-646">残りのバック グラウンド スレッドはすべて、その実行しないでください。</span><span class="sxs-lookup"><span data-stu-id="44abe-646">Any remaining background threads are stopped and do not complete.</span></span>  
  
 <span data-ttu-id="44abe-647">既定では、次のスレッドはフォア グラウンドで実行 (つまり、その<xref:System.Threading.Thread.IsBackground%2A>プロパティが返す`false`)。</span><span class="sxs-lookup"><span data-stu-id="44abe-647">By default, the following threads execute in the foreground (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `false`):</span></span>  
  
-   <span data-ttu-id="44abe-648">プライマリ スレッド (またはメイン アプリケーション スレッド)。</span><span class="sxs-lookup"><span data-stu-id="44abe-648">The primary thread (or main application thread).</span></span>  
  
-   <span data-ttu-id="44abe-649">呼び出すことによって作成されたすべてのスレッドを<xref:System.Threading.Thread>クラスのコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="44abe-649">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="44abe-650">既定では、次のスレッドがバック グラウンドで実行 (つまり、その<xref:System.Threading.Thread.IsBackground%2A>プロパティが返す`true`)。</span><span class="sxs-lookup"><span data-stu-id="44abe-650">By default, the following threads execute in the background  (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `true`):</span></span>  
  
-   <span data-ttu-id="44abe-651">ランタイムによって管理されるワーカー スレッドのプールはプールのスレッドをスレッドです。</span><span class="sxs-lookup"><span data-stu-id="44abe-651">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span> <span data-ttu-id="44abe-652">使用してスレッド プール スレッドでスレッド プールとスケジュールの作業を構成することができます、<xref:System.Threading.ThreadPool>クラス。</span><span class="sxs-lookup"><span data-stu-id="44abe-652">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="44abe-653">タスク ベースの非同期操作は、スレッド プールのスレッドで自動的に実行します。</span><span class="sxs-lookup"><span data-stu-id="44abe-653">Task-based asynchronous operations automatically execute on thread pool threads.</span></span>  
  
-   <span data-ttu-id="44abe-654">アンマネージ コードからマネージ実行環境に入るすべてのスレッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-654">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-655">次の例では、フォア グラウンドとバック グラウンド スレッドの動作を比較します。</span><span class="sxs-lookup"><span data-stu-id="44abe-655">The following example contrasts the behavior of foreground and background threads.</span></span> <span data-ttu-id="44abe-656">フォア グラウンド スレッドとバック グラウンド スレッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="44abe-656">It creates a foreground thread and a background thread.</span></span> <span data-ttu-id="44abe-657">フォア グラウンド スレッドはまでを実行しているプロセスが完了すると、`for`ループを終了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-657">The foreground thread keeps the process running until completes its `for` loop and terminates.</span></span> <span data-ttu-id="44abe-658">ただし、フォア グラウンド スレッドの実行が完了するための出力の例に示す、バック グラウンド スレッドの実行が完了する前に、のプロセスでは終了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-658">However, as the output from the example shows, because the foreground thread has finished execution, the process is terminated before the background thread has completed execution.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsBackground#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsBackground#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsBackground#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-659">スレッドが動作していません</span><span class="sxs-lookup"><span data-stu-id="44abe-659">The thread is dead.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/foreground-and-background-threads.md"><span data-ttu-id="44abe-660">フォアグラウンド スレッドとバックグラウンド スレッド</span><span class="sxs-lookup"><span data-stu-id="44abe-660">Foreground and Background Threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadPoolThread">
      <MemberSignature Language="C#" Value="public bool IsThreadPoolThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadPoolThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsThreadPoolThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadPoolThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadPoolThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadPoolThread : bool" Usage="System.Threading.Thread.IsThreadPoolThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-661">スレッドがマネージド スレッド プールに所属しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-661">Gets a value indicating whether or not a thread belongs to the managed thread pool.</span></span></summary>
        <value><span data-ttu-id="44abe-662">このスレッドがマネージド スレッド プールに所属している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-662"><see langword="true" /> if this thread belongs to the managed thread pool; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-663">詳細については、次を参照してください。[マネージ スレッド プール](~/docs/standard/threading/the-managed-thread-pool.md)します。</span><span class="sxs-lookup"><span data-stu-id="44abe-663">For more information see [The managed thread pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-664">次のコード例では、スレッドがスレッド プールからかどうかを判断する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-664">The following code example shows how to determine whether a thread is from the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ThreadPool" />
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md"><span data-ttu-id="44abe-665">マネージド スレッド プール</span><span class="sxs-lookup"><span data-stu-id="44abe-665">The Managed Thread Pool</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44abe-666">このインスタンスが表すスレッドが終了するまで、呼び出し元のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="44abe-666">Blocks the calling thread until the thread represented by this instance terminates.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join" />
      <MemberSignature Language="VB.NET" Value="Public Sub Join ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Join();" />
      <MemberSignature Language="F#" Value="member this.Join : unit -&gt; unit" Usage="thread.Join " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-667">このインスタンスが表すスレッドが終了するまで、呼び出し元のスレッドをブロックします。標準 COM および <see langword="SendMessage" /> ポンピングの実行は継続されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-667">Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <see langword="SendMessage" /> pumping.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-668"><xref:System.Threading.Thread.Join%2A> スレッドまで (つまり、メソッドを呼び出すスレッド) の呼び出し元のスレッドをブロックする同期メソッドですが<xref:System.Threading.Thread.Join%2A>メソッドが呼び出されますが完了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-668"><xref:System.Threading.Thread.Join%2A> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed.</span></span> <span data-ttu-id="44abe-669">このメソッドを使用すると、スレッドが終了されたことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-669">Use this method to ensure that a thread has been terminated.</span></span> <span data-ttu-id="44abe-670">スレッドが終了しない場合、呼び出し元が無期限にブロックされます。</span><span class="sxs-lookup"><span data-stu-id="44abe-670">The caller will block indefinitely if the thread does not terminate.</span></span> <span data-ttu-id="44abe-671">次の例では、`Thread1`スレッドの呼び出し、<xref:System.Threading.Thread.Join>メソッドの`Thread2`、原因となる`Thread1`までブロックする`Thread2`が完了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-671">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block until `Thread2` has completed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1a.cs#1)]
 [!code-vb[System.Threading.Thread.Join#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1a.vb#1)]  
  
 <span data-ttu-id="44abe-672">場合は、スレッドが終了とき既に<xref:System.Threading.Thread.Join%2A>と呼ばれるメソッドをすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-672">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="44abe-673">呼び出さないようにする必要があります、<xref:System.Threading.Thread.Join%2A>のメソッド、<xref:System.Threading.Thread>現在のスレッドからの現在のスレッドを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="44abe-673">You should never call the <xref:System.Threading.Thread.Join%2A> method of the <xref:System.Threading.Thread> object that represents the current thread from the current thread.</span></span> <span data-ttu-id="44abe-674">これにより、現在のスレッドは自身に無期限に待機するためにハングするアプリ</span><span class="sxs-lookup"><span data-stu-id="44abe-674">This causes your app to hang because the current thread waits upon itself indefinitely,</span></span>  
  
 <span data-ttu-id="44abe-675">このメソッドを含めるには、呼び出し元のスレッドの状態を変更する<xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-675">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="44abe-676">呼び出すことはできません`Join`内にあるスレッドで、<xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType>状態。</span><span class="sxs-lookup"><span data-stu-id="44abe-676">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-677">呼び出し元が、<see cref="F:System.Threading.ThreadState.Unstarted" /> 状態のスレッドを結合しようとしました。</span><span class="sxs-lookup"><span data-stu-id="44abe-677">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="44abe-678">待機中にスレッドが中断されました。</span><span class="sxs-lookup"><span data-stu-id="44abe-678">The thread is interrupted while waiting.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Join : int -&gt; bool" Usage="thread.Join millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="44abe-679">スレッドが終了するまでの待機時間を表すミリ秒数。</span><span class="sxs-lookup"><span data-stu-id="44abe-679">The number of milliseconds to wait for the thread to terminate.</span></span></param>
        <summary><span data-ttu-id="44abe-680">このインスタンスが表すスレッドが終了するまで、または指定された時間が経過するまで、呼び出し元のスレッドをブロックします。標準 COM/SendMessage ポンピングの実行は継続されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-680">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span></span></summary>
        <returns><span data-ttu-id="44abe-681">スレッドが終了した場合は <see langword="true" />。<paramref name="millisecondsTimeout" /> パラメーターで指定した時間が経過してもスレッドが終了していない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-681"><see langword="true" /> if the thread has terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="millisecondsTimeout" /> parameter has elapsed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-682"><xref:System.Threading.Thread.Join%28System.Int32%29> いずれかのスレッドまで (つまり、メソッドを呼び出すスレッド) の呼び出し元のスレッドをブロックする同期メソッドが<xref:System.Threading.Thread.Join%2A>メソッドが呼び出されますが完了またはタイムアウト間隔が経過しました。</span><span class="sxs-lookup"><span data-stu-id="44abe-682"><xref:System.Threading.Thread.Join%28System.Int32%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="44abe-683">次の例では、`Thread1`スレッドの呼び出し、<xref:System.Threading.Thread.Join>メソッドの`Thread2`、原因となる`Thread1`までのいずれかをブロックする`Thread2`が完了したか、2 秒が経過しました。</span><span class="sxs-lookup"><span data-stu-id="44abe-683">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1b.cs#2)]
 [!code-vb[System.Threading.Thread.Join#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1b.vb#2)]  
  
 <span data-ttu-id="44abe-684">場合<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>が指定されて、`millisecondsTimeout`パラメーターでは、このメソッドの動作、<xref:System.Threading.Thread.Join>メソッド オーバー ロードで戻り値を除く。</span><span class="sxs-lookup"><span data-stu-id="44abe-684">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for the `millisecondsTimeout` parameter, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="44abe-685">場合は、スレッドが終了とき既に<xref:System.Threading.Thread.Join%2A>と呼ばれるメソッドをすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-685">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="44abe-686">このメソッドを含めるには、呼び出し元のスレッドの状態を変更する<xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-686">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="44abe-687">呼び出すことはできません`Join`内にあるスレッドで、<xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType>状態。</span><span class="sxs-lookup"><span data-stu-id="44abe-687">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="44abe-688"><paramref name="millisecondsTimeout" /> の値が負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> (ミリ秒単位) と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-688">The value of <paramref name="millisecondsTimeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-689">スレッドは開始していません。</span><span class="sxs-lookup"><span data-stu-id="44abe-689">The thread has not been started.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Join : TimeSpan -&gt; bool" Usage="thread.Join timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="44abe-690">スレッドが終了するのを待機する時間に設定される <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-690">A <see cref="T:System.TimeSpan" /> set to the amount of time to wait for the thread to terminate.</span></span></param>
        <summary><span data-ttu-id="44abe-691">このインスタンスが表すスレッドが終了するまで、または指定された時間が経過するまで、呼び出し元のスレッドをブロックします。標準 COM/SendMessage ポンピングの実行は継続されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-691">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span></span></summary>
        <returns><span data-ttu-id="44abe-692">スレッドが終了した場合は <see langword="true" />。<paramref name="timeout" /> パラメーターで指定した時間が経過してもスレッドが終了していない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-692"><see langword="true" /> if the thread terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="timeout" /> parameter has elapsed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-693"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> いずれかのスレッドまで (つまり、メソッドを呼び出すスレッド) の呼び出し元のスレッドをブロックする同期メソッドが<xref:System.Threading.Thread.Join%2A>メソッドが呼び出されますが完了またはタイムアウト間隔が経過しました。</span><span class="sxs-lookup"><span data-stu-id="44abe-693"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="44abe-694">次の例では、`Thread1`スレッドの呼び出し、<xref:System.Threading.Thread.Join>メソッドの`Thread2`、原因となる`Thread1`までのいずれかをブロックする`Thread2`が完了したか、2 秒が経過しました。</span><span class="sxs-lookup"><span data-stu-id="44abe-694">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1c.cs#3)]
 [!code-vb[System.Threading.Thread.Join#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1c.vb#3)]  
  
 <span data-ttu-id="44abe-695">場合<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>が指定されて`timeout`、このメソッドの動作、<xref:System.Threading.Thread.Join>メソッド オーバー ロードで戻り値を除く。</span><span class="sxs-lookup"><span data-stu-id="44abe-695">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for `timeout`, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="44abe-696">場合は、スレッドが終了とき既に<xref:System.Threading.Thread.Join%2A>と呼ばれるメソッドをすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="44abe-696">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="44abe-697">このメソッドを含めるには、現在のスレッドの状態を変更する<xref:System.Threading.ThreadState.WaitSleepJoin>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-697">This method changes the state of the current thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span> <span data-ttu-id="44abe-698">呼び出すことはできません`Join`内にあるスレッドで、<xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType>状態。</span><span class="sxs-lookup"><span data-stu-id="44abe-698">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-699">次のコード例は、使用する方法を示します、`TimeSpan`値を`Join`メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-699">The following code example demonstrates how to use a `TimeSpan` value with the `Join` method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Timespan#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Timespan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Timespan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="44abe-700"><paramref name="timeout" /> の値が負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> (ミリ秒単位) と等しくないか、または <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</span><span class="sxs-lookup"><span data-stu-id="44abe-700">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-701">呼び出し元が、<see cref="F:System.Threading.ThreadState.Unstarted" /> 状態のスレッドを結合しようとしました。</span><span class="sxs-lookup"><span data-stu-id="44abe-701">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="ManagedThreadId">
      <MemberSignature Language="C#" Value="public int ManagedThreadId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ManagedThreadId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ManagedThreadId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManagedThreadId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ManagedThreadId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ManagedThreadId : int" Usage="System.Threading.Thread.ManagedThreadId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-702">現在のマネージド スレッドの一意の識別子を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-702">Gets a unique identifier for the current managed thread.</span></span></summary>
        <value><span data-ttu-id="44abe-703">このマネージド スレッドの一意の識別子を表す整数。</span><span class="sxs-lookup"><span data-stu-id="44abe-703">An integer that represents a unique identifier for this managed thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-704">スレッドの<xref:System.Threading.Thread.ManagedThreadId%2A>プロパティの値がそのプロセス内でそのスレッドを一意に識別するために使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-704">A thread's <xref:System.Threading.Thread.ManagedThreadId%2A> property value serves to uniquely identify that thread within its process.</span></span>  
  
 <span data-ttu-id="44abe-705">値、<xref:System.Threading.Thread.ManagedThreadId%2A>プロパティでは、共通言語ランタイムをホストするアンマネージ コードは、ファイバーとスレッドを実装している場合でも、時間の経過と共に変化しません。</span><span class="sxs-lookup"><span data-stu-id="44abe-705">The value of the <xref:System.Threading.Thread.ManagedThreadId%2A> property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrier">
      <MemberSignature Language="C#" Value="public static void MemoryBarrier ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrier() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.MemoryBarrier" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrier ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrier();" />
      <MemberSignature Language="F#" Value="static member MemoryBarrier : unit -&gt; unit" Usage="System.Threading.Thread.MemoryBarrier " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-706">メモリ アクセスを次のように同期します。現在のスレッドを実行中のプロセッサは、<see cref="M:System.Threading.Thread.MemoryBarrier" /> を呼び出す前のメモリ アクセスを <see cref="M:System.Threading.Thread.MemoryBarrier" /> の呼び出し後のメモリ アクセスの後に実行するように命令を並べ替えることはできません。</span><span class="sxs-lookup"><span data-stu-id="44abe-706">Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to <see cref="M:System.Threading.Thread.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Thread.MemoryBarrier" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-707"><xref:System.Threading.Thread.MemoryBarrier%2A> (複数の Intel Itanium プロセッサを使用するシステムなど) の順序付け脆弱なメモリ型マルチプロセッサ システムにのみ必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-707"><xref:System.Threading.Thread.MemoryBarrier%2A> is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).</span></span>  
  
 <span data-ttu-id="44abe-708">ほとんどの場合、c#、`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、または<xref:System.Threading.Monitor>クラスは、簡単にデータを同期する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-708">For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Threading.Thread.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-709">スレッドの名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-709">Gets or sets the name of the thread.</span></span></summary>
        <value><span data-ttu-id="44abe-710">スレッドの名前を含む文字列。名前が設定されていない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-710">A string containing the name of the thread, or <see langword="null" /> if no name was set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-711">このプロパティは書き込み-とします。</span><span class="sxs-lookup"><span data-stu-id="44abe-711">This property is write-once.</span></span> <span data-ttu-id="44abe-712">のスレッドの既定値<xref:System.Threading.Thread.Name%2A>プロパティは`null`、かどうか、名前が既に明示的に割り当てられて、スレッドと比較して確認できます`null`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-712">Because the default value of a thread's <xref:System.Threading.Thread.Name%2A> property is `null`, you can determine whether a name has already been explicitly assigned to the thread by comparing it with `null`.</span></span>  
  
 <span data-ttu-id="44abe-713">割り当てられた文字列、<xref:System.Threading.Thread.Name%2A>プロパティは、任意の Unicode 文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-713">The string assigned to the <xref:System.Threading.Thread.Name%2A> property can include any Unicode character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-714">次の例では、スレッドに名前を付ける方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-714">The following example shows how to name a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Name#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Name#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Name#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Name/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44abe-715">設定操作が要求されましたが、<see langword="Name" /> プロパティは既に設定されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-715">A set operation was requested, but the <see langword="Name" /> property has already been set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadPriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As ThreadPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadPriority Priority { System::Threading::ThreadPriority get(); void set(System::Threading::ThreadPriority value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : System.Threading.ThreadPriority with get, set" Usage="System.Threading.Thread.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-716">スレッドのスケジューリング優先順位を示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-716">Gets or sets a value indicating the scheduling priority of a thread.</span></span></summary>
        <value><span data-ttu-id="44abe-717"><see cref="T:System.Threading.ThreadPriority" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="44abe-717">One of the <see cref="T:System.Threading.ThreadPriority" /> values.</span></span> <span data-ttu-id="44abe-718">既定値は <see cref="F:System.Threading.ThreadPriority.Normal" /> です。</span><span class="sxs-lookup"><span data-stu-id="44abe-718">The default value is <see cref="F:System.Threading.ThreadPriority.Normal" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-719">次の優先順位のいずれかのスレッドを割り当てることができる<xref:System.Threading.ThreadPriority>値。</span><span class="sxs-lookup"><span data-stu-id="44abe-719">A thread can be assigned any one of the following priority <xref:System.Threading.ThreadPriority> values:</span></span>  
  
-   `Highest`  
  
-   `AboveNormal`  
  
-   `Normal`  
  
-   `BelowNormal`  
  
-   `Lowest`  
  
 <span data-ttu-id="44abe-720">オペレーティング システムは、スレッドの優先度を優先する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-720">Operating systems are not required to honor the priority of a thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-721">次の例では、スレッドの優先度の変更の結果を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-721">The following example shows the result of changing the priority of a thread.</span></span> <span data-ttu-id="44abe-722">3 つのスレッドが作成されると、1 つのスレッドの優先順位に設定されて<xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>とに 1 秒あたりの優先順位が設定されて<xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-722">Three threads are created, the priority of one thread is set to <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>, and the priority of a second is set to <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>.</span></span> <span data-ttu-id="44abe-723">各スレッド内の変数をインクリメントする、`while`ループと、設定時間実行されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-723">Each thread increments a variable in a `while` loop and runs for a set time.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPriority#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.ThreadPriority/cs/Example1.cs#1)]
 [!code-vb[System.Threading.ThreadPriority#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.ThreadPriority/vb/Example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-724">スレッドが、<see cref="F:System.Threading.ThreadState.Aborted" /> などの最終状態に達しました。</span><span class="sxs-lookup"><span data-stu-id="44abe-724">The thread has reached a final state, such as <see cref="F:System.Threading.ThreadState.Aborted" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="44abe-725">セット操作に対して設定された値が有効な <see cref="T:System.Threading.ThreadPriority" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-725">The value specified for a set operation is not a valid <see cref="T:System.Threading.ThreadPriority" /> value.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadPriority" />
        <related type="Article" href="~/docs/standard/threading/scheduling-threads.md"><span data-ttu-id="44abe-726">スレッドのスケジューリング</span><span class="sxs-lookup"><span data-stu-id="44abe-726">Scheduling threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ResetAbort">
      <MemberSignature Language="C#" Value="public static void ResetAbort ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetAbort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.ResetAbort" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetAbort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetAbort();" />
      <MemberSignature Language="F#" Value="static member ResetAbort : unit -&gt; unit" Usage="System.Threading.Thread.ResetAbort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-727">現在のスレッドに対して要求された <see cref="M:System.Threading.Thread.Abort(System.Object)" /> をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="44abe-727">Cancels an <see cref="M:System.Threading.Thread.Abort(System.Object)" /> requested for the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-728">このメソッドは、適切なアクセス許可を持つコードによってのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-728">This method can only be called by code with the proper permissions.</span></span>  
  
 <span data-ttu-id="44abe-729">呼び出しはに対して行われた場合`Abort`、スレッドを終了するには、システムがスローされます、<xref:System.Threading.ThreadAbortException>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-729">When a call is made to `Abort` to terminate a thread, the system throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="44abe-730">`ThreadAbortException` アプリケーションのコードでキャッチできますが catch ブロックの最後に再スローされる場合を除き、特別な例外は、`ResetAbort`が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-730">`ThreadAbortException` is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless `ResetAbort` is called.</span></span> <span data-ttu-id="44abe-731">`ResetAbort` 中止するには要求をキャンセルできず、`ThreadAbortException`のスレッドを終了します。</span><span class="sxs-lookup"><span data-stu-id="44abe-731">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span>  
  
 <span data-ttu-id="44abe-732">参照してください<xref:System.Threading.ThreadAbortException>呼び出し元を示す例については、`ResetAbort`メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-732">See <xref:System.Threading.ThreadAbortException> for an example that demonstrates calling the `ResetAbort` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="44abe-733">.NET Core のみ: このメンバーはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-733">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-734"><see langword="Abort" /> は現在のスレッドで呼び出されませんでした。</span><span class="sxs-lookup"><span data-stu-id="44abe-734"><see langword="Abort" /> was not invoked on the current thread.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="44abe-735">呼び出し元には、現在のスレッドに対する必要なセキュリティ アクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-735">The caller does not have the required security permission for the current thread.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="44abe-736">スレッドでの高度な操作。</span><span class="sxs-lookup"><span data-stu-id="44abe-736">for advanced operations on threads.</span></span> <span data-ttu-id="44abe-737"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="44abe-737">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md"><span data-ttu-id="44abe-738">スレッドの破棄</span><span class="sxs-lookup"><span data-stu-id="44abe-738">Destroying threads</span></span></related>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="thread.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("Thread.Resume has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Thread.Resume has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  https://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-739">中断されたスレッドを再開します。</span><span class="sxs-lookup"><span data-stu-id="44abe-739">Resumes a thread that has been suspended.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="44abe-740">使用しないでください、<xref:System.Threading.Thread.Suspend%2A>と<xref:System.Threading.Thread.Resume%2A>のスレッドのアクティビティを同期する方法。</span><span class="sxs-lookup"><span data-stu-id="44abe-740">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="44abe-741">中断した場合、スレッドは、どのようなコードを実行するかを知ることがあるありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-741">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="44abe-742">内の他のスレッドのセキュリティ権限の評価中にロックを保持している間にスレッドを中断した場合、<xref:System.AppDomain>ブロックされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-742">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="44abe-743">内の他のスレッド クラスのコンス トラクターが実行中にスレッドを中断した場合、<xref:System.AppDomain>クラスがブロックされていることを使用しようとします。</span><span class="sxs-lookup"><span data-stu-id="44abe-743">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="44abe-744">デッドロックは、非常に簡単に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-744">Deadlocks can occur very easily.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="44abe-745">.NET Core のみ: このメンバーはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-745">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-746">スレッドが開始されていないか、実行されていません。または中断状態にはありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-746">The thread has not been started, is dead, or is not in the suspended state.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="44abe-747">呼び出し元に適切な <see cref="T:System.Security.Permissions.SecurityPermission" /> がありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-747">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="44abe-748">スレッドでの高度な操作。</span><span class="sxs-lookup"><span data-stu-id="44abe-748">for advanced operations on threads.</span></span> <span data-ttu-id="44abe-749">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span><span class="sxs-lookup"><span data-stu-id="44abe-749">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span></span></permission>
        <related type="Article" href="~/docs/standard/threading/pausing-and-resuming-threads.md"><span data-ttu-id="44abe-750">スレッドの一時中断および中断</span><span class="sxs-lookup"><span data-stu-id="44abe-750">Pausing and interrupting threads</span></span></related>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="SetApartmentState">
      <MemberSignature Language="C#" Value="public void SetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetApartmentState (state As ApartmentState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetApartmentState(System::Threading::ApartmentState state);" />
      <MemberSignature Language="F#" Value="member this.SetApartmentState : System.Threading.ApartmentState -&gt; unit" Usage="thread.SetApartmentState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="44abe-751">新しいアパートメント状態。</span><span class="sxs-lookup"><span data-stu-id="44abe-751">The new apartment state.</span></span></param>
        <summary><span data-ttu-id="44abe-752">スレッドを開始する前にそのアパートメント状態を設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-752">Sets the apartment state of a thread before it is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-753">新しいスレッドとして初期化された<xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>の開始される前に、そのアパートメント状態が設定されていない場合。</span><span class="sxs-lookup"><span data-stu-id="44abe-753">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="44abe-754">スレッドを開始する前に、アパートメント状態を設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-754">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-755">メイン アプリケーション スレッドに初期化<xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>既定。</span><span class="sxs-lookup"><span data-stu-id="44abe-755">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="44abe-756">メイン アプリケーション スレッドのアパートメント状態を設定する唯一の方法<xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>が適用される、<xref:System.STAThreadAttribute>エントリ ポイント メソッドに属性します。</span><span class="sxs-lookup"><span data-stu-id="44abe-756">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="44abe-757"><xref:System.Threading.Thread.SetApartmentState%2A>メソッドと共に、<xref:System.Threading.Thread.GetApartmentState%2A>メソッドと<xref:System.Threading.Thread.TrySetApartmentState%2A>メソッド、置換、<xref:System.Threading.Thread.ApartmentState%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-757">The <xref:System.Threading.Thread.SetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-758">次のコード例に示します、 <xref:System.Threading.Thread.GetApartmentState%2A>、 <xref:System.Threading.Thread.SetApartmentState%2A>、および<xref:System.Threading.Thread.TrySetApartmentState%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-758">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="44abe-759">このコード例では、スレッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="44abe-759">The code example creates a thread.</span></span> <span data-ttu-id="44abe-760">スレッドを開始すると、前に<xref:System.Threading.Thread.GetApartmentState%2A>初期表示<xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType>状態と<xref:System.Threading.Thread.SetApartmentState%2A>状態に変更します<xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-760">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="44abe-761"><xref:System.Threading.Thread.TrySetApartmentState%2A>メソッドが戻ります`false`に状態を変更しようとしています。<xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>アパートメント状態が既に設定されているためです。</span><span class="sxs-lookup"><span data-stu-id="44abe-761">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="44abe-762">場合は、同じ操作で<xref:System.Threading.Thread.SetApartmentState%2A>、<xref:System.InvalidOperationException>がスローされました。</span><span class="sxs-lookup"><span data-stu-id="44abe-762">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="44abe-763">スレッドを開始した後、<xref:System.Threading.Thread.TrySetApartmentState%2A>メソッドは、もう一度使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-763">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="44abe-764">これは、ときにスローします<xref:System.Threading.ThreadStateException>スレッドが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-764">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="44abe-765">.NET Core のみ: macOS および Linux プラットフォームでは、このメンバーはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-765">.NET Core only: This member is not supported on the macOS and Linux platforms.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="44abe-766"><paramref name="state" /> は有効なアパートメント状態ではありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-766"><paramref name="state" /> is not a valid apartment state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-767">スレッドが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-767">The thread has already been started.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44abe-768">アパートメント状態は、すでに初期化されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-768">The apartment state has already been initialized.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetCompressedStack">
      <MemberSignature Language="C#" Value="public void SetCompressedStack (System.Threading.CompressedStack stack);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCompressedStack(class System.Threading.CompressedStack stack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCompressedStack (stack As CompressedStack)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCompressedStack(System::Threading::CompressedStack ^ stack);" />
      <MemberSignature Language="F#" Value="member this.SetCompressedStack : System.Threading.CompressedStack -&gt; unit" Usage="thread.SetCompressedStack stack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Thread.SetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stack" Type="System.Threading.CompressedStack" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="stack"><span data-ttu-id="44abe-769">現在のスレッドに適用される <see cref="T:System.Threading.CompressedStack" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="44abe-769">The <see cref="T:System.Threading.CompressedStack" /> object to be applied to the current thread.</span></span></param>
        <summary><span data-ttu-id="44abe-770">キャプチャした <see cref="T:System.Threading.CompressedStack" /> を現在のスレッドに適用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-770">Applies a captured <see cref="T:System.Threading.CompressedStack" /> to the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-771">このメソッドはサポートされなくなりました。</span><span class="sxs-lookup"><span data-stu-id="44abe-771">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44abe-772">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="44abe-772">In all cases.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="44abe-773">直前の呼び出し元に対する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-773">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="44abe-774">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="44abe-774">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public static void SetData (LocalDataStoreSlot slot, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetData(class System.LocalDataStoreSlot slot, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetData (slot As LocalDataStoreSlot, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetData(LocalDataStoreSlot ^ slot, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="static member SetData : LocalDataStoreSlot * obj -&gt; unit" Usage="System.Threading.Thread.SetData (slot, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="data" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="slot"><span data-ttu-id="44abe-775">値を設定する <see cref="T:System.LocalDataStoreSlot" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-775">The <see cref="T:System.LocalDataStoreSlot" /> in which to set the value.</span></span></param>
        <param name="data"><span data-ttu-id="44abe-776">設定される値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-776">The value to be set.</span></span></param>
        <summary><span data-ttu-id="44abe-777">現在実行中のスレッド上にある指定されたスロット内のデータを、そのスレッドの現在のドメインに設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-777">Sets the data in the specified slot on the currently running thread, for that thread's current domain.</span></span> <span data-ttu-id="44abe-778">パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-778">For better performance, use fields marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-779">.NET Framework には、スレッド ローカル ストレージ (TLS) を使用して 2 つのメカニズムが用意されています: スレッド相対静的フィールド (でマークされているフィールドは、<xref:System.ThreadStaticAttribute>属性) とデータ スロット。</span><span class="sxs-lookup"><span data-stu-id="44abe-779">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="44abe-780">スレッド相対静的フィールドは、データ スロットより優れたパフォーマンスを提供し、コンパイル時の型チェックを有効にします。</span><span class="sxs-lookup"><span data-stu-id="44abe-780">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="44abe-781">詳細については、TLS を使用して、次を参照してください。[スレッド ローカル ストレージ。スレッド相対静的フィールドとデータ スロット](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)します。</span><span class="sxs-lookup"><span data-stu-id="44abe-781">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="44abe-782">スレッドは、スレッド固有のデータを格納するのにローカル ストアのメモリ メカニズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-782">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="44abe-783">共通言語ランタイムは、作成時に、各プロセスにマルチ スロットのデータ ストア配列を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-783">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="44abe-784">スレッドは、データ ストア内のデータ スロットを割り当てることができます、格納および取得するデータ スロットの値し、スレッド プロシージャの終了後に再利用するため、スロットを解放し、<xref:System.Threading.Thread>オブジェクトがガベージ コレクションによって解放されました。</span><span class="sxs-lookup"><span data-stu-id="44abe-784">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <xref:System.Threading.Thread> object has been reclaimed by garbage collection.</span></span> <span data-ttu-id="44abe-785">データ スロットは、スレッドごとに一意です。</span><span class="sxs-lookup"><span data-stu-id="44abe-785">Data slots are unique per thread.</span></span> <span data-ttu-id="44abe-786">他のスレッド (子スレッドであっても) はそのデータを取得できません。</span><span class="sxs-lookup"><span data-stu-id="44abe-786">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-787"><xref:System.Threading.Thread.SetData%2A> `Shared`別のスレッドを参照する変数を使用してメソッドを呼び出す場合でも常に、現在実行中のスレッドに適用されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-787"><xref:System.Threading.Thread.SetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="44abe-788">混乱を回避するには、クラス名を呼び出すときに使用`Shared`メソッド:`Thread.SetData(testSlot, "test data")`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-788">To avoid confusion, use the class name when calling `Shared` methods: `Thread.SetData(testSlot, "test data")`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-789">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="44abe-789">This section contains two code examples.</span></span> <span data-ttu-id="44abe-790">最初の例でマークされているフィールドを使用する方法を示しています、<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持する属性。</span><span class="sxs-lookup"><span data-stu-id="44abe-790">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="44abe-791">2 番目の例では、同じことを行うデータ スロットを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-791">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="44abe-792">**最初の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-792">**First Example**</span></span>  
  
 <span data-ttu-id="44abe-793">次の例でマークされているフィールドを使用する方法を示します<xref:System.ThreadStaticAttribute>スレッド固有の情報を保持するためにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-793">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="44abe-794">この手法は、2 番目の例で示す方法よりも優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-794">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="44abe-795">**2 番目の例**</span><span class="sxs-lookup"><span data-stu-id="44abe-795">**Second Example**</span></span>  
  
 <span data-ttu-id="44abe-796">次の例では、名前付きデータ スロットを使用して、スレッド固有の情報を格納する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="44abe-796">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="44abe-797">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-797">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md"><span data-ttu-id="44abe-798">スレッド ローカル ストレージ:スレッド相対静的フィールドとデータ スロット</span><span class="sxs-lookup"><span data-stu-id="44abe-798">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sleep">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44abe-799">指定した時間の長さにわたって現在のスレッドを中断します。</span><span class="sxs-lookup"><span data-stu-id="44abe-799">Suspends the current thread for the specified amount of time.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Sleep : int -&gt; unit" Usage="System.Threading.Thread.Sleep millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="44abe-800">スレッドが中断ブロックされるミリ秒数。</span><span class="sxs-lookup"><span data-stu-id="44abe-800">The number of milliseconds for which the thread is suspended.</span></span> <span data-ttu-id="44abe-801"><paramref name="millisecondsTimeout" /> 引数の値が 0 である場合は、スレッドは自らのタイム スライスの残りの部分を放棄し、実行する準備ができている同じ優先順位の他のスレッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="44abe-801">If the value of the <paramref name="millisecondsTimeout" /> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span></span> <span data-ttu-id="44abe-802">優先順位が同じで実行する準備ができている他のスレッドが存在しない場合は、現在のスレッドの実行は中断されません。</span><span class="sxs-lookup"><span data-stu-id="44abe-802">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span></span></param>
        <summary><span data-ttu-id="44abe-803">指定したミリ秒数の間現在のスレッドを中断します。</span><span class="sxs-lookup"><span data-stu-id="44abe-803">Suspends the current thread for the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-804">スレッドは、指定した時間、オペレーティング システムでの実行スケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="44abe-804">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="44abe-805">このメソッドに含めるスレッドの状態を変更する<xref:System.Threading.ThreadState.WaitSleepJoin>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-805">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="44abe-806">指定できる<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>の`millisecondsTimeout`を無期限にスレッドを中断するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="44abe-806">You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the `millisecondsTimeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="44abe-807">その他を使用することをお勧めただし、<xref:System.Threading?displayProperty=nameWithType>などのクラス<xref:System.Threading.Mutex>、 <xref:System.Threading.Monitor>、 <xref:System.Threading.EventWaitHandle>、または<xref:System.Threading.Semaphore>代わりにスレッドを同期したり、リソースを管理します。</span><span class="sxs-lookup"><span data-stu-id="44abe-807">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to synchronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="44abe-808">特定のレートでシステム クロックのティックには、時計の解像度が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-808">The system clock ticks at a specific rate called the clock resolution.</span></span> <span data-ttu-id="44abe-809">実際のタイムアウトできない可能性があります正確に指定されたタイムアウトを指定したタイムアウト時間を調整してクロック ティックと一致しているためです。</span><span class="sxs-lookup"><span data-stu-id="44abe-809">The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks.</span></span> <span data-ttu-id="44abe-810">時計の解像度と待機時間の詳細については、次を参照してください。、[関数をスリープ状態](https://msdn.microsoft.com/library/windows/desktop/ms686298.aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="44abe-810">For more information on clock resolution and the waiting time, see the [Sleep function](https://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) topic.</span></span> <span data-ttu-id="44abe-811">このメソッドは、[関数をスリープ状態](https://msdn.microsoft.com/library/windows/desktop/ms686298.aspx)から、Windows システム Api。</span><span class="sxs-lookup"><span data-stu-id="44abe-811">This method calls the [Sleep function](https://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) from the Windows system APIs.</span></span>  
  
 <span data-ttu-id="44abe-812">このメソッドは、標準の COM および 1 つは実行されません。</span><span class="sxs-lookup"><span data-stu-id="44abe-812">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-813">かどうか必要のあるスレッドでスリープ状態を<xref:System.STAThreadAttribute>、標準の COM および 1 つの実行のオーバー ロードのいずれかの使用を検討するには、<xref:System.Threading.Thread.Join%2A>タイムアウト間隔を指定するメソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-813">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-814">次の例では、<xref:System.Threading.Thread.Sleep%2A>メソッドは、アプリケーションのメイン スレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="44abe-814">The following example uses the <xref:System.Threading.Thread.Sleep%2A> method to block the application's main thread.</span></span>  
  
 [!code-cpp[Thread.Sleep#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep/cs/example.cs#1)]
 [!code-vb[Thread.Sleep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="44abe-815">タイムアウト値が負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> に等しくありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-815">The time-out value is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Sleep : TimeSpan -&gt; unit" Usage="System.Threading.Thread.Sleep timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="44abe-816">スレッドが中断される時間の長さ。</span><span class="sxs-lookup"><span data-stu-id="44abe-816">The amount of time for which the thread is suspended.</span></span> <span data-ttu-id="44abe-817"><paramref name="millisecondsTimeout" /> 引数の値が <see cref="F:System.TimeSpan.Zero" /> である場合は、スレッドは自らのタイム スライスの残りの部分を放棄し、実行する準備ができている同じ優先順位の他のスレッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="44abe-817">If the value of the <paramref name="millisecondsTimeout" /> argument is <see cref="F:System.TimeSpan.Zero" />, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span></span> <span data-ttu-id="44abe-818">優先順位が同じで実行する準備ができている他のスレッドが存在しない場合は、現在のスレッドの実行は中断されません。</span><span class="sxs-lookup"><span data-stu-id="44abe-818">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span></span></param>
        <summary><span data-ttu-id="44abe-819">指定した時間の長さにわたって現在のスレッドを中断します。</span><span class="sxs-lookup"><span data-stu-id="44abe-819">Suspends the current thread for the specified amount of time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-820">スレッドは、指定した時間、オペレーティング システムでの実行スケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="44abe-820">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="44abe-821">このメソッドに含めるスレッドの状態を変更する<xref:System.Threading.ThreadState.WaitSleepJoin>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-821">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="44abe-822">指定できる<xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType>の`timeout`を無期限にスレッドを中断するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="44abe-822">You can specify <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType> for the `timeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="44abe-823">その他を使用することをお勧めただし、<xref:System.Threading?displayProperty=nameWithType>などのクラス<xref:System.Threading.Mutex>、 <xref:System.Threading.Monitor>、 <xref:System.Threading.EventWaitHandle>、または<xref:System.Threading.Semaphore>代わりにスレッドを同期したり、リソースを管理します。</span><span class="sxs-lookup"><span data-stu-id="44abe-823">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to synchronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="44abe-824">このオーバー ロード<xref:System.Threading.Thread.Sleep%2A>で整数のミリ秒単位の合計数を使用して`timeout`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-824">This overload of <xref:System.Threading.Thread.Sleep%2A> uses the total number of whole milliseconds in `timeout`.</span></span> <span data-ttu-id="44abe-825">小数ミリ秒は破棄されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-825">Fractional milliseconds are discarded.</span></span>  
  
 <span data-ttu-id="44abe-826">このメソッドは、標準の COM および 1 つは実行されません。</span><span class="sxs-lookup"><span data-stu-id="44abe-826">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-827">かどうか必要のあるスレッドでスリープ状態を<xref:System.STAThreadAttribute>、標準の COM および 1 つの実行のオーバー ロードのいずれかの使用を検討するには、<xref:System.Threading.Thread.Join%2A>タイムアウト間隔を指定するメソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-827">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-828">次の例では、 <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> 2 秒ごとに 5 回、アプリケーションのメイン スレッドをブロックするメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="44abe-828">The following example uses the <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> method overload to block the application's main thread five times, for two seconds each time.</span></span>  
  
 [!code-cpp[Thread.Sleep_TimeSpan#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep_timespan/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep_TimeSpan#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep_timespan/cs/example.cs#1)]
 [!code-vb[Thread.Sleep_TimeSpan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep_timespan/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="44abe-829"><paramref name="timeout" /> の値が負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> (ミリ秒単位) と等しくないか、または <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</span><span class="sxs-lookup"><span data-stu-id="44abe-829">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SpinWait">
      <MemberSignature Language="C#" Value="public static void SpinWait (int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinWait(int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SpinWait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinWait (iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinWait(int iterations);" />
      <MemberSignature Language="F#" Value="static member SpinWait : int -&gt; unit" Usage="System.Threading.Thread.SpinWait iterations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterations" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="iterations"><span data-ttu-id="44abe-830">スレッドが待機する時間を定義する 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="44abe-830">A 32-bit signed integer that defines how long a thread is to wait.</span></span></param>
        <summary><span data-ttu-id="44abe-831">スレッドが、<paramref name="iterations" /> パラメーターで定義される時間だけ待機するようにします。</span><span class="sxs-lookup"><span data-stu-id="44abe-831">Causes a thread to wait the number of times defined by the <paramref name="iterations" /> parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-832"><xref:System.Threading.Thread.SpinWait%2A>メソッドはロックを実装するために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="44abe-832">The <xref:System.Threading.Thread.SpinWait%2A> method is useful for implementing locks.</span></span> <span data-ttu-id="44abe-833">などの .NET framework では、クラス<xref:System.Threading.Monitor>と<xref:System.Threading.ReaderWriterLock>、このメソッドを内部的に使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-833">Classes in the .NET Framework, such as <xref:System.Threading.Monitor> and <xref:System.Threading.ReaderWriterLock>, use this method internally.</span></span> <span data-ttu-id="44abe-834"><xref:System.Threading.Thread.SpinWait%2A> で指定されたループ カウントを非常に短いループに、プロセッサが本質的には、`iterations`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="44abe-834"><xref:System.Threading.Thread.SpinWait%2A> essentially puts the processor into a very tight loop, with the loop count specified by the `iterations` parameter.</span></span> <span data-ttu-id="44abe-835">そのため、待機時間は、プロセッサの速度に依存します。</span><span class="sxs-lookup"><span data-stu-id="44abe-835">The duration of the wait therefore depends on the speed of the processor.</span></span>  
  
 <span data-ttu-id="44abe-836">これと対照的に、<xref:System.Threading.Thread.Sleep%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-836">Contrast this with the <xref:System.Threading.Thread.Sleep%2A> method.</span></span> <span data-ttu-id="44abe-837">呼び出すスレッド<xref:System.Threading.Thread.Sleep%2A>指定した間隔が 0 の場合でも、プロセッサ時間の現在のスライスの残りの部分を生成します。</span><span class="sxs-lookup"><span data-stu-id="44abe-837">A thread that calls <xref:System.Threading.Thread.Sleep%2A> yields the rest of its current slice of processor time, even if the specified interval is zero.</span></span> <span data-ttu-id="44abe-838">0 以外の間隔を指定する<xref:System.Threading.Thread.Sleep%2A>時間間隔が経過するまでスレッドをスレッド スケジューラによって考慮の対象から削除します。</span><span class="sxs-lookup"><span data-stu-id="44abe-838">Specifying a non-zero interval for <xref:System.Threading.Thread.Sleep%2A> removes the thread from consideration by the thread scheduler until the time interval has elapsed.</span></span>  
  
 <span data-ttu-id="44abe-839"><xref:System.Threading.Thread.SpinWait%2A> 通常のアプリケーションの一般的に便利ではありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-839"><xref:System.Threading.Thread.SpinWait%2A> is not generally useful for ordinary applications.</span></span> <span data-ttu-id="44abe-840">ほとんどの場合、.NET Framework で提供される同期クラスを使用する必要があります。たとえば、呼び出す<xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>またはラップするステートメント<xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>(`lock` (C#) または`SyncLock`Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="44abe-840">In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> or a statement that wraps <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> (`lock` in C# or `SyncLock` in Visual Basic).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="44abe-841">まれなケースがわかっている場合、状態の変化が迫っていないかなどのコンテキスト スイッチを回避するへの呼び出しを行い、<xref:System.Threading.Thread.SpinWait%2A>ループ内のメソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-841">In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the <xref:System.Threading.Thread.SpinWait%2A> method in your loop.</span></span> <span data-ttu-id="44abe-842">コード<xref:System.Threading.Thread.SpinWait%2A>実行は複数のプロセッサを搭載したコンピューターで発生する可能性がある問題を防ぐために設計されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-842">The code <xref:System.Threading.Thread.SpinWait%2A> executes is designed to prevent problems that can occur on computers with multiple processors.</span></span> <span data-ttu-id="44abe-843">たとえば、ハイパー スレッディング テクノロジを使用して複数の Intel プロセッサを搭載したコンピューター上<xref:System.Threading.Thread.SpinWait%2A>特定の状況でプロセッサの枯渇を防止します。</span><span class="sxs-lookup"><span data-stu-id="44abe-843">For example, on computers with multiple Intel processors employing Hyper-Threading technology, <xref:System.Threading.Thread.SpinWait%2A> prevents processor starvation in certain situations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44abe-844">スレッドの実行をスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="44abe-844">Causes a thread to be scheduled for execution.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="thread.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-845">オペレーティング システムによって、現在のインスタンスの状態を <see cref="F:System.Threading.ThreadState.Running" /> に変更します。</span><span class="sxs-lookup"><span data-stu-id="44abe-845">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-846">スレッドが開始すると、<xref:System.Threading.ThreadState.Running?displayProperty=nameWithType>状態では、オペレーティング システムを使用すると実行をスケジュールできます。</span><span class="sxs-lookup"><span data-stu-id="44abe-846">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="44abe-847">スレッドがによって表されるメソッドの最初の行で実行を開始、<xref:System.Threading.ThreadStart>または<xref:System.Threading.ParameterizedThreadStart>スレッド コンス トラクターに提供されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="44abe-847">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="44abe-848">なお、呼び出し<xref:System.Threading.Thread.Start%2A>呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="44abe-848">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-849">使用して作成されたスレッドでこのオーバー ロードを使用するかどうか、<xref:System.Threading.ParameterizedThreadStart>デリゲート`null`スレッドによって実行されるメソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-849">If this overload is used with a thread created using a <xref:System.Threading.ParameterizedThreadStart> delegate, `null` is passed to the method executed by the thread.</span></span>  
  
 <span data-ttu-id="44abe-850">スレッドが終了すると、別の呼び出しでは再開できません`Start`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-850">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-851">次の例では、作成し、スレッドを開始します。</span><span class="sxs-lookup"><span data-stu-id="44abe-851">The following example creates and starts a thread.</span></span>  
  
 [!code-cpp[ThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadStart/CPP/threadstart.cpp#1)]
 [!code-csharp[ThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadStart/CS/threadstart.cs#1)]
 [!code-vb[ThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadStart/VB/threadstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-852">スレッドが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-852">The thread has already been started.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="44abe-853">メモリ不足のため、このスレッドを開始できません。</span><span class="sxs-lookup"><span data-stu-id="44abe-853">There is not enough memory available to start this thread.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md"><span data-ttu-id="44abe-854">スレッドおよびスレッド処理</span><span class="sxs-lookup"><span data-stu-id="44abe-854">Threads and Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="44abe-855">スレッドを作成し、開始時にデータを渡す</span><span class="sxs-lookup"><span data-stu-id="44abe-855">Creating Threads and Passing Data at Start Time</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.Start : obj -&gt; unit" Usage="thread.Start parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="44abe-856">スレッドが実行するメソッドで使用するデータを格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="44abe-856">An object that contains data to be used by the method the thread executes.</span></span></param>
        <summary><span data-ttu-id="44abe-857">オペレーティング システムによって現在のインスタンスの状態が <see cref="F:System.Threading.ThreadState.Running" /> に変更され、オプションでスレッドが実行するメソッドで使用するデータを格納するオブジェクトが提供されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-857">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />, and optionally supplies an object containing data to be used by the method the thread executes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-858">スレッドが開始すると、<xref:System.Threading.ThreadState.Running?displayProperty=nameWithType>状態では、オペレーティング システムを使用すると実行をスケジュールできます。</span><span class="sxs-lookup"><span data-stu-id="44abe-858">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="44abe-859">スレッドがによって表されるメソッドの最初の行で実行を開始、<xref:System.Threading.ThreadStart>または<xref:System.Threading.ParameterizedThreadStart>スレッド コンス トラクターに提供されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="44abe-859">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="44abe-860">なお、呼び出し<xref:System.Threading.Thread.Start%2A>呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="44abe-860">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
 <span data-ttu-id="44abe-861">スレッドが終了すると、別の呼び出しでは再開できません`Start`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-861">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
 <span data-ttu-id="44abe-862">このオーバー ロードと<xref:System.Threading.ParameterizedThreadStart>デリゲートをしやすく、スレッド プロシージャにデータを渡す、手法、タイプ セーフであるためは任意のオブジェクトは、このオーバー ロードに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-862">This overload and the <xref:System.Threading.ParameterizedThreadStart> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload.</span></span> <span data-ttu-id="44abe-863">データをスレッド プロシージャに渡すより堅牢な方法は、ワーカーのオブジェクトにデータ フィールドとスレッド プロシージャの両方を格納します。</span><span class="sxs-lookup"><span data-stu-id="44abe-863">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="44abe-864">詳細については、次を参照してください。[スレッドの作成と開始時にデータを渡す](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)します。</span><span class="sxs-lookup"><span data-stu-id="44abe-864">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-865">次の例では、作成、<xref:System.Threading.ParameterizedThreadStart>静的メソッドとインスタンス メソッドを持つデリゲート。</span><span class="sxs-lookup"><span data-stu-id="44abe-865">The following example creates a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-866">スレッドが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-866">The thread has already been started.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="44abe-867">メモリ不足のため、このスレッドを開始できません。</span><span class="sxs-lookup"><span data-stu-id="44abe-867">There is not enough memory available to start this thread.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44abe-868"><see cref="T:System.Threading.ParameterizedThreadStart" /> デリゲートの代わりに <see cref="T:System.Threading.ThreadStart" /> デリゲートを使用して、このスレッドは作成されました。</span><span class="sxs-lookup"><span data-stu-id="44abe-868">This thread was created using a <see cref="T:System.Threading.ThreadStart" /> delegate instead of a <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate.</span></span></exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="T:System.AppDomain" />
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="44abe-869">スレッドの作成</span><span class="sxs-lookup"><span data-stu-id="44abe-869">Creating Threads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Suspend" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend();" />
      <MemberSignature Language="F#" Value="member this.Suspend : unit -&gt; unit" Usage="thread.Suspend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("Thread.Suspend has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Thread.Suspend has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  https://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-870">スレッドを中断します。スレッドが既に中断されている場合は無効です。</span><span class="sxs-lookup"><span data-stu-id="44abe-870">Either suspends the thread, or if the thread is already suspended, has no effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-871">スレッドが既に中断されている場合は、このメソッドに影響はありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-871">If the thread is already suspended, this method has no effect.</span></span>  
  
> [!CAUTION]
> <span data-ttu-id="44abe-872">使用しないでください、<xref:System.Threading.Thread.Suspend%2A>と<xref:System.Threading.Thread.Resume%2A>のスレッドのアクティビティを同期する方法。</span><span class="sxs-lookup"><span data-stu-id="44abe-872">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="44abe-873">中断した場合、スレッドは、どのようなコードを実行するかを知ることがあるありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-873">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="44abe-874">内の他のスレッドのセキュリティ権限の評価中にロックを保持している間にスレッドを中断した場合、<xref:System.AppDomain>ブロックされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-874">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="44abe-875">内の他のスレッド クラスのコンス トラクターが実行中にスレッドを中断した場合、<xref:System.AppDomain>クラスがブロックされていることを使用しようとします。</span><span class="sxs-lookup"><span data-stu-id="44abe-875">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="44abe-876">デッドロックは、非常に簡単に発生することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-876">Deadlocks can occur very easily.</span></span>

<span data-ttu-id="44abe-877">呼び出すと、`Suspend`スレッドでメソッドをシステムはノートのスレッドの中断が要求されているし、スレッドが実際には、スレッドを中断する前にセーフ ポイントに達するまでを実行することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-877">When you call the `Suspend` method on a thread, the system notes that a thread suspension has been requested and allows the thread to execute until it reaches a safe point before actually suspending the thread.</span></span> <span data-ttu-id="44abe-878">スレッドのセーフ ポイントは、ガベージ コレクションを実行できる実行ポイントです。</span><span class="sxs-lookup"><span data-stu-id="44abe-878">A safe point for a thread is a point in its execution at which garbage collection can be performed.</span></span> <span data-ttu-id="44abe-879">セーフ ポイントに到達すると、ランタイムにより、中断されたスレッドがマネージド コードで続行されないことが保証されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-879">Once a safe point is reached, the runtime guarantees that the suspended thread will not make any further progress in managed code.</span></span> <span data-ttu-id="44abe-880">マネージド コードの外部で実行中のスレッドは、通常、ガベージ コレクションでは安全であり、その実行はマネージド コードの実行再開が試行されるまで続行します。</span><span class="sxs-lookup"><span data-stu-id="44abe-880">A thread executing outside managed code is always safe for garbage collection, and its execution continues until it attempts to resume execution of managed code.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="44abe-881">.NET Core のみ: このメンバーはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-881">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-882">スレッドが開始していないか、または停止しています。</span><span class="sxs-lookup"><span data-stu-id="44abe-882">The thread has not been started or is dead.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="44abe-883">呼び出し元に適切な <see cref="T:System.Security.Permissions.SecurityPermission" /> がありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-883">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="44abe-884">スレッドでの高度な操作。</span><span class="sxs-lookup"><span data-stu-id="44abe-884">for advanced operations on threads.</span></span> <span data-ttu-id="44abe-885"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="44abe-885">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <related type="Article" href="~/docs/standard/threading/pausing-and-resuming-threads.md"><span data-ttu-id="44abe-886">スレッドの一時中断および中断</span><span class="sxs-lookup"><span data-stu-id="44abe-886">Pausing and interrupting threads</span></span></related>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Thread.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Thread.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Thread::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="44abe-887">将来使用するために予約されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-887">Reserved for future use.</span></span> <span data-ttu-id="44abe-888">IID_NULL にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-888">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="44abe-889">マッピング対象として渡される名前の配列。</span><span class="sxs-lookup"><span data-stu-id="44abe-889">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="44abe-890">マッピングされる名前のカウント。</span><span class="sxs-lookup"><span data-stu-id="44abe-890">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="44abe-891">名前を解釈するロケール コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="44abe-891">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="44abe-892">名前に対応する ID を受け取る、呼び出し元が割り当てた配列。</span><span class="sxs-lookup"><span data-stu-id="44abe-892">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="44abe-893">一連の名前を対応する一連のディスパッチ識別子に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="44abe-893">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-894">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="44abe-894">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="44abe-895">詳細については`IDispatch::GetIDsOfNames`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="44abe-895">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="44abe-896">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-896">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Thread.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="44abe-897">返される型情報。</span><span class="sxs-lookup"><span data-stu-id="44abe-897">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="44abe-898">型情報のロケール ID。</span><span class="sxs-lookup"><span data-stu-id="44abe-898">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="44abe-899">要求された型情報オブジェクトへのポインターを取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-899">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="44abe-900">オブジェクトの型情報を取得します。この型情報を使用して、インターフェイスの型情報を取得できます。</span><span class="sxs-lookup"><span data-stu-id="44abe-900">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-901">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="44abe-901">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="44abe-902">詳細については`IDispatch::GetTypeInfo`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="44abe-902">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="44abe-903">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-903">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Thread.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="44abe-904">オブジェクトにより提供される型タイプ情報インターフェイスの数を受け取る場所を指定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-904">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="44abe-905">オブジェクトが提供する型情報インターフェイスの数 (0 または 1) を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-905">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-906">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="44abe-906">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="44abe-907">詳細については`IDispatch::GetTypeInfoCount`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="44abe-907">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="44abe-908">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-908">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.Invoke">
      <MemberSignature Language="C#" Value="void _Thread.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Thread.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Thread::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="44abe-909">メンバーを識別します。</span><span class="sxs-lookup"><span data-stu-id="44abe-909">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="44abe-910">将来使用するために予約されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-910">Reserved for future use.</span></span> <span data-ttu-id="44abe-911">IID_NULL にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-911">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="44abe-912">引数を解釈する対象のロケール コンテキスト。</span><span class="sxs-lookup"><span data-stu-id="44abe-912">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="44abe-913">呼び出しのコンテキストを記述するフラグ。</span><span class="sxs-lookup"><span data-stu-id="44abe-913">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="44abe-914">引数の配列、名前付き引数の DISPID の配列、配列内の要素数のカウントを格納している構造体へのポインター。</span><span class="sxs-lookup"><span data-stu-id="44abe-914">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="44abe-915">結果が格納される場所へのポインター。</span><span class="sxs-lookup"><span data-stu-id="44abe-915">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="44abe-916">例外情報を格納する構造体へのポインター。</span><span class="sxs-lookup"><span data-stu-id="44abe-916">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="44abe-917">エラーが存在する最初の引数のインデックス。</span><span class="sxs-lookup"><span data-stu-id="44abe-917">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="44abe-918">オブジェクトによって公開されたプロパティおよびメソッドへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-918">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-919">このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびマネージ コードから呼び出さないでいます。</span><span class="sxs-lookup"><span data-stu-id="44abe-919">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="44abe-920">詳細については`IDispatch::Invoke`、MSDN ライブラリを参照してください。</span><span class="sxs-lookup"><span data-stu-id="44abe-920">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="44abe-921">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="44abe-921">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ThreadState">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadState ThreadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadState ThreadState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ThreadState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadState As ThreadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadState ThreadState { System::Threading::ThreadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreadState : System.Threading.ThreadState" Usage="System.Threading.Thread.ThreadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44abe-922">現在のスレッドの状態を示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-922">Gets a value containing the states of the current thread.</span></span></summary>
        <value><span data-ttu-id="44abe-923">現在のスレッドの状態を示す <see cref="T:System.Threading.ThreadState" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="44abe-923">One of the <see cref="T:System.Threading.ThreadState" /> values indicating the state of the current thread.</span></span> <span data-ttu-id="44abe-924">初期値は <see cref="F:System.Threading.ThreadState.Unstarted" /> です。</span><span class="sxs-lookup"><span data-stu-id="44abe-924">The initial value is <see cref="F:System.Threading.ThreadState.Unstarted" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-925"><xref:System.Threading.Thread.ThreadState%2A>プロパティよりも詳細な情報を提供する、<xref:System.Threading.Thread.IsAlive%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-925">The <xref:System.Threading.Thread.ThreadState%2A> property provides more specific information than the <xref:System.Threading.Thread.IsAlive%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="44abe-926">スレッドの状態のみがデバッグ シナリオで重要です。</span><span class="sxs-lookup"><span data-stu-id="44abe-926">Thread state is only of interest in debugging scenarios.</span></span> <span data-ttu-id="44abe-927">スレッドの動作を同期化する目的でコード内でスレッドの状態を使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="44abe-927">Your code should never use thread state to synchronize the activities of threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-928">次のコード例に示しますへのアクセス、`ThreadState`スレッドの。</span><span class="sxs-lookup"><span data-stu-id="44abe-928">The following code example demonstrates accessing the `ThreadState` of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ThreadState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ThreadState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cs/source.cs#1)]
 [!code-vb[System.Threading.Thread.ThreadState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.threadstate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetApartmentState">
      <MemberSignature Language="C#" Value="public bool TrySetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetApartmentState (state As ApartmentState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetApartmentState(System::Threading::ApartmentState state);" />
      <MemberSignature Language="F#" Value="member this.TrySetApartmentState : System.Threading.ApartmentState -&gt; bool" Usage="thread.TrySetApartmentState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="44abe-929">新しいアパートメント状態。</span><span class="sxs-lookup"><span data-stu-id="44abe-929">The new apartment state.</span></span></param>
        <summary><span data-ttu-id="44abe-930">スレッドを開始する前にそのアパートメント状態を設定します。</span><span class="sxs-lookup"><span data-stu-id="44abe-930">Sets the apartment state of a thread before it is started.</span></span></summary>
        <returns><span data-ttu-id="44abe-931">アパートメント状態が設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-931"><see langword="true" /> if the apartment state is set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-932">新しいスレッドとして初期化された<xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>の開始される前に、そのアパートメント状態が設定されていない場合。</span><span class="sxs-lookup"><span data-stu-id="44abe-932">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="44abe-933">スレッドを開始する前に、アパートメント状態を設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-933">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-934">メイン アプリケーション スレッドに初期化<xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>既定。</span><span class="sxs-lookup"><span data-stu-id="44abe-934">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="44abe-935">メイン アプリケーション スレッドのアパートメント状態を設定する唯一の方法<xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>が適用される、<xref:System.STAThreadAttribute>エントリ ポイント メソッドに属性します。</span><span class="sxs-lookup"><span data-stu-id="44abe-935">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="44abe-936"><xref:System.Threading.Thread.TrySetApartmentState%2A>メソッドと共に、<xref:System.Threading.Thread.GetApartmentState%2A>メソッドと<xref:System.Threading.Thread.SetApartmentState%2A>メソッド、置換、<xref:System.Threading.Thread.ApartmentState%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="44abe-936">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.SetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="44abe-937">次のコード例に示します、 <xref:System.Threading.Thread.GetApartmentState%2A>、 <xref:System.Threading.Thread.SetApartmentState%2A>、および<xref:System.Threading.Thread.TrySetApartmentState%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="44abe-937">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="44abe-938">このコード例では、スレッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="44abe-938">The code example creates a thread.</span></span> <span data-ttu-id="44abe-939">スレッドを開始すると、前に<xref:System.Threading.Thread.GetApartmentState%2A>初期表示<xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType>状態と<xref:System.Threading.Thread.SetApartmentState%2A>状態に変更します<xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-939">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="44abe-940"><xref:System.Threading.Thread.TrySetApartmentState%2A>メソッドが戻ります`false`に状態を変更しようとしています。<xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType>アパートメント状態が既に設定されているためです。</span><span class="sxs-lookup"><span data-stu-id="44abe-940">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="44abe-941">場合は、同じ操作で<xref:System.Threading.Thread.SetApartmentState%2A>、<xref:System.InvalidOperationException>がスローされました。</span><span class="sxs-lookup"><span data-stu-id="44abe-941">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="44abe-942">スレッドを開始した後、<xref:System.Threading.Thread.TrySetApartmentState%2A>メソッドは、もう一度使用します。</span><span class="sxs-lookup"><span data-stu-id="44abe-942">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="44abe-943">これは、ときにスローします<xref:System.Threading.ThreadStateException>スレッドが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-943">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="44abe-944"><paramref name="state" /> は有効なアパートメント状態ではありません。</span><span class="sxs-lookup"><span data-stu-id="44abe-944"><paramref name="state" /> is not a valid apartment state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="44abe-945">スレッドが既に開始されています。</span><span class="sxs-lookup"><span data-stu-id="44abe-945">The thread has already been started.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileRead">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44abe-946">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-946">Reads the value of a field.</span></span> <span data-ttu-id="44abe-947">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-947">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static byte VolatileRead (ref byte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 VolatileRead(unsigned int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte VolatileRead(System::Byte % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; byte" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-948">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-948">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-949">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-949">Reads the value of a field.</span></span> <span data-ttu-id="44abe-950">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-950">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-951">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-951">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-952"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-952"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-953">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-953">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-954">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-954">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-955">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-955">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-956">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-956">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-957">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-957">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-958">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-958">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-959">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-959">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-960">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-960">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static double VolatileRead (ref double address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 VolatileRead(float64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double VolatileRead(double % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; double" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-961">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-961">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-962">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-962">Reads the value of a field.</span></span> <span data-ttu-id="44abe-963">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-963">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-964">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-964">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-965"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-965"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-966">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-966">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-967">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-967">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-968">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-968">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-969">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-969">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-970">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-970">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-971">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-971">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-972">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-972">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-973">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-973">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static short VolatileRead (ref short address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 VolatileRead(int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short VolatileRead(short % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; int16" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-974">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-974">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-975">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-975">Reads the value of a field.</span></span> <span data-ttu-id="44abe-976">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-976">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-977">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-977">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-978"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-978"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-979">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-979">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-980">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-980">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-981">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-981">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-982">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-982">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-983">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-983">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-984">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-984">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-985">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-985">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-986">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-986">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static int VolatileRead (ref int address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 VolatileRead(int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int VolatileRead(int % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; int" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-987">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-987">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-988">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-988">Reads the value of a field.</span></span> <span data-ttu-id="44abe-989">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-989">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-990">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-990">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-991"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-991"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-992">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-992">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-993">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-993">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-994">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-994">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-995">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-995">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-996">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-996">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-997">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-997">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-998">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-998">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-999">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-999">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static long VolatileRead (ref long address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 VolatileRead(int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long VolatileRead(long % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; int64" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1000">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1000">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-1001">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1001">Reads the value of a field.</span></span> <span data-ttu-id="44abe-1002">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-1002">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-1003">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1003">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1004"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1004"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1005">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1005">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1006">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1006">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-1007">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1007">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1008">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1008">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1009">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1009">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1010">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1010">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1011">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1011">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1012">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1012">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static IntPtr VolatileRead (ref IntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int VolatileRead(native int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr VolatileRead(IntPtr % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; nativeint" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1013">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1013">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-1014">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1014">Reads the value of a field.</span></span> <span data-ttu-id="44abe-1015">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-1015">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-1016">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1016">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1017"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1017"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1018">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1018">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1019">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1019">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-1020">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1020">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1021">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1021">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1022">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1022">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1023">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1023">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1024">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1024">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1025">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1025">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static object VolatileRead (ref object address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object VolatileRead(object&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ VolatileRead(System::Object ^ % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; obj" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1026">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1026">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-1027">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1027">Reads the value of a field.</span></span> <span data-ttu-id="44abe-1028">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-1028">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-1029">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1029">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1030"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1030"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1031">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1031">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1032">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1032">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-1033">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1033">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1034">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1034">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1035">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1035">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1036">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1036">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1037">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1037">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1038">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1038">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static sbyte VolatileRead (ref sbyte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 VolatileRead(int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte VolatileRead(System::SByte % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; sbyte" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1039">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1039">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-1040">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1040">Reads the value of a field.</span></span> <span data-ttu-id="44abe-1041">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-1041">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-1042">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1042">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1043"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1043"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1044">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1044">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1045">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1045">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-1046">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1046">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1047">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1047">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1048">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1048">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1049">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1049">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1050">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1050">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1051">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1051">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static float VolatileRead (ref float address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 VolatileRead(float32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float VolatileRead(float % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; single" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1052">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1052">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-1053">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1053">Reads the value of a field.</span></span> <span data-ttu-id="44abe-1054">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-1054">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-1055">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1055">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1056"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1056"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1057">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1057">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1058">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1058">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-1059">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1059">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1060">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1060">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1061">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1061">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1062">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1062">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1063">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1063">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1064">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1064">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ushort VolatileRead (ref ushort address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 VolatileRead(unsigned int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 VolatileRead(System::UInt16 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; uint16" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1065">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1065">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-1066">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1066">Reads the value of a field.</span></span> <span data-ttu-id="44abe-1067">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-1067">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-1068">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1068">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1069"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1069"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1070">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1070">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1071">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1071">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-1072">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1072">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1073">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1073">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1074">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1074">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1075">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1075">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1076">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1076">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1077">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1077">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static uint VolatileRead (ref uint address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 VolatileRead(unsigned int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 VolatileRead(System::UInt32 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; uint32" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1078">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1078">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-1079">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1079">Reads the value of a field.</span></span> <span data-ttu-id="44abe-1080">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-1080">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-1081">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1081">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1082"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1082"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1083">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1083">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1084">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1084">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-1085">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1085">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1086">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1086">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1087">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1087">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1088">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1088">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1089">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1089">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1090">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1090">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ulong VolatileRead (ref ulong address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 VolatileRead(unsigned int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 VolatileRead(System::UInt64 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; uint64" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1091">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1091">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-1092">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1092">Reads the value of a field.</span></span> <span data-ttu-id="44abe-1093">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-1093">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-1094">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1094">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1095"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1095"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1096">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1096">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1097">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1097">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-1098">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1098">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1099">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1099">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1100">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1100">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1101">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1101">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1102">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1102">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1103">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1103">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static UIntPtr VolatileRead (ref UIntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native unsigned int VolatileRead(native unsigned int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UIntPtr) As UIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UIntPtr VolatileRead(UIntPtr % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; unativeint" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1104">読み取られるフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1104">The field to be read.</span></span></param>
        <summary><span data-ttu-id="44abe-1105">フィールドの値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1105">Reads the value of a field.</span></span> <span data-ttu-id="44abe-1106">この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</span><span class="sxs-lookup"><span data-stu-id="44abe-1106">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="44abe-1107">いずれかのプロセッサによってフィールドに書き込まれた最新の値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1107">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1108"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1108"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1109">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1109">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1110">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileRead%2A>いずれかのプロセッサによってメモリ位置に書き込まれた最新の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1110">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="44abe-1111">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1111">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1112">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1112">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1113">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1113">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1114">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1114">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1115">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1115">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1116">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1116">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileWrite">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44abe-1117">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1117">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref byte address, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int8&amp; address, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Byte, value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Byte % address, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * byte -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Byte" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1118">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1118">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1119">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1119">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1120">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1120">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1121"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1121"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1122">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1122">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1123">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1123">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1124">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1124">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1125">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1125">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1126">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1126">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1127">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1127">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1128">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1128">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1129">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1129">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref double address, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float64&amp; address, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Double, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(double % address, double value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * double -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Double" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1130">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1130">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1131">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1131">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1132">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1132">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1133"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1133"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1134">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1134">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1135">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1135">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1136">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1136">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1137">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1137">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1138">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1138">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1139">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1139">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1140">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1140">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1141">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1141">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref short address, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int16&amp; address, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Short, value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(short % address, short value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * int16 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Int16" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1142">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1142">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1143">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1143">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1144">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1144">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1145"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1145"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1146">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1146">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1147">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1147">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1148">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1148">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1149">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1149">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1150">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1150">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1151">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1151">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1152">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1152">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1153">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1153">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref int address, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int32&amp; address, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Integer, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(int % address, int value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * int -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1154">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1154">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1155">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1155">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1156">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1156">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1157"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1157"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1158">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1158">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1159">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1159">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1160">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1160">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1161">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1161">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1162">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1162">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1163">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1163">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1164">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1164">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1165">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1165">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref long address, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int64&amp; address, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Long, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(long % address, long value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * int64 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1166">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1166">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1167">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1167">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1168">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1168">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1169"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1169"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1170">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1170">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1171">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1171">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1172">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1172">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1173">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1173">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1174">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1174">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1175">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1175">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1176">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1176">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1177">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1177">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref IntPtr address, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native int&amp; address, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As IntPtr, value As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(IntPtr % address, IntPtr value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * nativeint -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.IntPtr" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1178">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1178">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1179">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1179">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1180">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1180">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1181"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1181"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1182">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1182">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1183">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1183">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1184">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1184">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1185">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1185">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1186">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1186">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1187">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1187">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1188">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1188">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1189">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1189">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref object address, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(object&amp; address, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Object ^ % address, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * obj -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1190">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1190">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1191">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1191">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1192">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1192">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1193"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1193"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1194">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1194">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1195">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1195">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1196">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1196">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1197">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1197">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1198">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1198">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1199">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1199">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1200">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1200">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1201">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1201">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref sbyte address, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int8&amp; address, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As SByte, value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::SByte % address, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * sbyte -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.SByte" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1202">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1202">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1203">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1203">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1204">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1204">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1205"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1205"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1206">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1206">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1207">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1207">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1208">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1208">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1209">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1209">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1210">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1210">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1211">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1211">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1212">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1212">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1213">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1213">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref float address, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float32&amp; address, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Single, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(float % address, float value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * single -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Single" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1214">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1214">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1215">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1215">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1216">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1216">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1217"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1217"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1218">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1218">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1219">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1219">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1220">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1220">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1221">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1221">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1222">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1222">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1223">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1223">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1224">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1224">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1225">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1225">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ushort address, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int16&amp; address, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UShort, value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt16 % address, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * uint16 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.UInt16" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1226">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1226">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1227">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1227">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1228">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1228">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1229"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1229"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1230">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1230">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1231">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1231">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1232">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1232">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1233">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1233">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1234">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1234">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1235">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1235">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1236">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1236">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1237">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1237">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref uint address, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int32&amp; address, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UInteger, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt32 % address, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * uint32 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1238">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1238">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1239">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1239">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1240">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1240">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1241"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1241"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1242">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1242">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1243">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1243">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1244">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1244">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1245">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1245">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1246">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1246">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1247">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1247">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1248">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1248">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1249">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1249">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ulong address, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int64&amp; address, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As ULong, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt64 % address, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * uint64 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.UInt64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1250">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1250">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1251">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1251">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1252">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1252">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1253"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1253"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1254">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1254">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1255">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1255">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1256">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1256">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1257">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1257">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1258">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1258">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1259">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1259">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1260">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1260">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1261">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1261">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref UIntPtr address, UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native unsigned int&amp; address, native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UIntPtr, value As UIntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(UIntPtr % address, UIntPtr value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * unativeint -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.UIntPtr" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="44abe-1262">値を書き込むフィールド。</span><span class="sxs-lookup"><span data-stu-id="44abe-1262">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="44abe-1263">書き込む値。</span><span class="sxs-lookup"><span data-stu-id="44abe-1263">The value to be written.</span></span></param>
        <summary><span data-ttu-id="44abe-1264">値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1264">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1265"><xref:System.Threading.Thread.VolatileRead%2A> <xref:System.Threading.Thread.VolatileWrite%2A>は、同期の特殊なケースです。</span><span class="sxs-lookup"><span data-stu-id="44abe-1265"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="44abe-1266">通常の状況で、c#`lock`ステートメントでは、Visual Basic`SyncLock`ステートメント、および<xref:System.Threading.Monitor>クラスは、簡単な代替手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1266">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="44abe-1267">マルチプロセッサ システムで<xref:System.Threading.Thread.VolatileWrite%2A>メモリ位置に書き込まれた値がすべてのプロセッサにすぐに表示することを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1267">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="44abe-1268">これにより、プロセッサのキャッシュのフラッシュが必要があります。</span><span class="sxs-lookup"><span data-stu-id="44abe-1268">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="44abe-1269">ユニプロセッサ システムでは、上であっても<xref:System.Threading.Thread.VolatileRead%2A>と<xref:System.Threading.Thread.VolatileWrite%2A>値の読み取りまたはメモリ、書き込みし、(たとえば、プロセッサのレジスタ) にキャッシュされていないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1269">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="44abe-1270">したがって、別のスレッドによって、またはハードウェアによって更新可能なフィールドへのアクセスを同期するのにことを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1270">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="44abe-1271">このメソッドを呼び出すと、1 つのメモリ アクセスのみが影響します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1271">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="44abe-1272">フィールドの効果的な同期を提供する、フィールドへのすべてのアクセスを使用する必要があります<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1272">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="44abe-1273">C# を使用して、`volatile`フィールド修飾子フィールドへのすべてのアクセスを使用していることを保証<xref:System.Threading.Thread.VolatileRead%2A>または<xref:System.Threading.Thread.VolatileWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1273">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static bool Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; bool" Usage="System.Threading.Thread.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44abe-1274">呼び出し元のスレッドから、現在のプロセッサ上で実行する準備が整っている別のスレッドに実行を切り替えます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1274">Causes the calling thread to yield execution to another thread that is ready to run on the current processor.</span></span> <span data-ttu-id="44abe-1275">実行の切り替え先のスレッドは、オペレーティング システムによって選択されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1275">The operating system selects the thread to yield to.</span></span></summary>
        <returns><span data-ttu-id="44abe-1276">オペレーティング システムによって実行が別のスレッドに切り替えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44abe-1276"><see langword="true" /> if the operating system switched execution to another thread; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44abe-1277">このメソッドが成功すると、スレッドの現在のタイム スライスの残りの部分が返されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1277">If this method succeeds, the rest of the thread's current time slice is yielded.</span></span> <span data-ttu-id="44abe-1278">オペレーティング システムでは、その優先順位と実行に使用できる他のスレッドの状態に応じて、別のタイム スライスの呼び出し元のスレッドをスケジュールします。</span><span class="sxs-lookup"><span data-stu-id="44abe-1278">The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.</span></span>  
  
 <span data-ttu-id="44abe-1279">応答は、呼び出し元のスレッドを実行しているプロセッサに制限されます。</span><span class="sxs-lookup"><span data-stu-id="44abe-1279">Yielding is limited to the processor that is executing the calling thread.</span></span> <span data-ttu-id="44abe-1280">そのプロセッサがアイドル状態または優先順位の低いスレッドが実行されている場合でも、オペレーティング システムは、別のプロセッサに実行を切り替えられません。</span><span class="sxs-lookup"><span data-stu-id="44abe-1280">The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority.</span></span> <span data-ttu-id="44abe-1281">現在のプロセッサで実行することができるその他のスレッドがないかどうか、オペレーティング システムでは、実行を作成しませんし、このメソッドが戻る`false`します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1281">If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns `false`.</span></span>  
  
 <span data-ttu-id="44abe-1282">このメソッドは、ネイティブの Win32 プラットフォームを使用して呼び出し`SwitchToThread`関数。</span><span class="sxs-lookup"><span data-stu-id="44abe-1282">This method is equivalent to using platform invoke to call the native Win32 `SwitchToThread` function.</span></span> <span data-ttu-id="44abe-1283">呼び出す必要があります、<xref:System.Threading.Thread.Yield%2A>プラットフォーム呼び出しのバイパス、カスタム スレッドの動作、ホストが要求されたため、プラットフォームを使用する代わりにメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="44abe-1283">You should call the <xref:System.Threading.Thread.Yield%2A> method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>