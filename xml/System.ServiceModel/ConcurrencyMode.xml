<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b794f216ceaa7c6fce1828d6ee563ec907867be6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37451374" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConcurrencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConcurrencyMode" />
  <TypeSignature Language="F#" Value="type ConcurrencyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="30591-101">サービス クラスがシングルスレッド モードまたはマルチスレッド モードの操作をサポートするかどうかを指定します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="30591-101">Specifies whether a service class supports single-threaded or multi-threaded modes of operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30591-102"><xref:System.ServiceModel.ConcurrencyMode> は、<xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> プロパティと組み合わせて使用し、サービス クラスがシングルスレッド モードまたはマルチスレッド モードの操作をサポートするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="30591-102"><xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation.</span></span> <span data-ttu-id="30591-103">シングルスレッド操作は、再入可能または非再入可能のどちらも可能です。</span><span class="sxs-lookup"><span data-stu-id="30591-103">A single-threaded operation can be either reentrant or non-reentrant.</span></span>  
  
 <span data-ttu-id="30591-104">次の表は、ときに Windows Communication Foundation (WCF) により、進行中で 1 つが別の中に呼び出される操作に応じて、<xref:System.ServiceModel.ConcurrencyMode>します。</span><span class="sxs-lookup"><span data-stu-id="30591-104">The following table shows when Windows Communication Foundation (WCF) permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.</span></span>  
  
|<span data-ttu-id="30591-105">ConcurrencyMode 値</span><span class="sxs-lookup"><span data-stu-id="30591-105">ConcurrencyMode Value</span></span>|<span data-ttu-id="30591-106">新しい操作の呼び出しの可否</span><span class="sxs-lookup"><span data-stu-id="30591-106">Can a new operation be invoked?</span></span>|  
|---------------------------|-------------------------------------|  
|<span data-ttu-id="30591-107">Single</span><span class="sxs-lookup"><span data-stu-id="30591-107">Single</span></span>|<span data-ttu-id="30591-108">不可</span><span class="sxs-lookup"><span data-stu-id="30591-108">Never.</span></span>|  
|<span data-ttu-id="30591-109">再入</span><span class="sxs-lookup"><span data-stu-id="30591-109">Reentrant</span></span>|<span data-ttu-id="30591-110">別のサービスまたはコールバックを呼び出し中のみ可能</span><span class="sxs-lookup"><span data-stu-id="30591-110">Only while invoking another service or a callback.</span></span>|  
|<span data-ttu-id="30591-111">複数</span><span class="sxs-lookup"><span data-stu-id="30591-111">Multiple</span></span>|<span data-ttu-id="30591-112">常に。</span><span class="sxs-lookup"><span data-stu-id="30591-112">Always.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="30591-113">次のコード例は、単一、再入、および複数使用して違いを示します。</span><span class="sxs-lookup"><span data-stu-id="30591-113">The following code example demonstrates the different between using Single, Reentrant, and Multiple.</span></span> <span data-ttu-id="30591-114">このサンプルは、その背後にある実際の実装なしでコンパイルできなかったは WCF では、そのため、操作コードの保証をスレッド処理の種類を示します。</span><span class="sxs-lookup"><span data-stu-id="30591-114">This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that WCF makes and what that means for your operation code.</span></span>  
  
 [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberSignature Language="VB.NET" Value="Multiple" />
      <MemberSignature Language="C++ CLI" Value="Multiple" />
      <MemberSignature Language="F#" Value="Multiple = 2" Usage="System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="30591-115">サービス インスタンスはマルチスレッドです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-115">The service instance is multi-threaded.</span>
          </span>
          <span data-ttu-id="30591-116">同期保証は行われません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-116">No synchronization guarantees are made.</span>
          </span>
          <span data-ttu-id="30591-117">サービス オブジェクトは他のスレッドによっていつでも変更される可能性があるため、開発者が同期と状態の整合性を常に処理する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-117">Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberSignature Language="VB.NET" Value="Reentrant" />
      <MemberSignature Language="C++ CLI" Value="Reentrant" />
      <MemberSignature Language="F#" Value="Reentrant = 1" Usage="System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="30591-118">サービス インスタンスはシングル スレッドであり、再入呼び出しを受け入れます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-118">The service instance is single-threaded and accepts reentrant calls.</span>
          </span>
          <span data-ttu-id="30591-119">再入可能サービスは別のサービスを呼び出したときの呼び出しを受け入れます。したがって、開発者は、オブジェクトの状態をコール アウト前の状態と必ず一致させ、操作のローカル データがコール アウト後も有効であることを確認する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-119">The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.</span>
          </span>
          <span data-ttu-id="30591-120">サービス インスタンスは、WCF チャネルを介して別のサービスを呼び出すことによってのみロックを解除されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-120">Note that the service instance is unlocked only by calling another service over a WCF channel.</span>
          </span>
          <span data-ttu-id="30591-121">この場合、呼び出されたサービスはコールバック経由で最初のサービスに再入できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-121">In this case, the called service can reenter the first service via a callback.</span>
          </span>
          <span data-ttu-id="30591-122">最初のサービスが再入可能でない場合、以降の呼び出しはデッドロック状態になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-122">If the first service is not reentrant, the sequence of calls results in a deadlock.</span>
          </span>
          <span data-ttu-id="30591-123">詳細については、「<see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-123">For details, see <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberSignature Language="VB.NET" Value="Single" />
      <MemberSignature Language="C++ CLI" Value="Single" />
      <MemberSignature Language="F#" Value="Single = 0" Usage="System.ServiceModel.ConcurrencyMode.Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="30591-124">サービス インスタンスはシングルスレッドであり、再入呼び出しを受け入れません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-124">The service instance is single-threaded and does not accept reentrant calls.</span>
          </span>
          <span data-ttu-id="30591-125">
            <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> プロパティが <see cref="F:System.ServiceModel.InstanceContextMode.Single" /> のときに、インスタンスが呼び出しを処理している間に別のメッセージが到着した場合は、到着したメッセージは、サービスが使用可能になるか、メッセージがタイムアウトするまで待機する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="30591-125">If the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> property is <see cref="F:System.ServiceModel.InstanceContextMode.Single" />, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>