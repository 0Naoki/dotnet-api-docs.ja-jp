<Type Name="PropertyExpression" FullName="System.Web.UI.WebControls.Expressions.PropertyExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4e92a2471cf4940e4ae5daf1a36a801282264a4d" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46689508" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PropertyExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type PropertyExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8f34f-101">
        <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> コレクションのパラメーターから <see langword="Where" /> 句を作成する方法を提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8f34f-101">Provides a way to create a <see langword="Where" /> clause from parameters in a <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f34f-102"><xref:System.Web.UI.WebControls.Expressions.PropertyExpression>クラスで使用されます、<xref:System.Web.UI.WebControls.QueryExtender>データ フィールドのデータをフィルター処理するコントロール。</span><span class="sxs-lookup"><span data-stu-id="8f34f-102">The <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> class is used with the <xref:System.Web.UI.WebControls.QueryExtender> control to filter data in data fields.</span></span> <span data-ttu-id="8f34f-103"><xref:System.Web.UI.WebControls.Expressions.PropertyExpression>クラスは、指定した値の列のプロパティ値を比較します。</span><span class="sxs-lookup"><span data-stu-id="8f34f-103">The <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> class compares a property value of a column to a specified value.</span></span> <span data-ttu-id="8f34f-104">たとえば、データベースの Products テーブルの提供が中止された列の値をブール値を比較できます。</span><span class="sxs-lookup"><span data-stu-id="8f34f-104">For example, you can compare a Boolean value to the value in the discontinued column of a Products table in a database.</span></span>  
  
 <span data-ttu-id="8f34f-105"><xref:System.Web.UI.WebControls.Expressions.PropertyExpression>クラスは、等号 (= =) 比較の各パラメーターの値との対応するプロパティを作成、<xref:System.Linq.IQueryable>データ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8f34f-105">The <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> class creates an equals (==) comparison for the value of each parameter and the corresponding property of the <xref:System.Linq.IQueryable> data object.</span></span> <span data-ttu-id="8f34f-106">論理を使用して、パラメーターを組み合わせて 1 つ以上のパラメーターを指定する場合`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="8f34f-106">If you provide more than one parameter, the parameters are combined using the logical `AND` operator.</span></span> <span data-ttu-id="8f34f-107">空の値が含まれているパラメーターは追加されません、`Where`句。</span><span class="sxs-lookup"><span data-stu-id="8f34f-107">Parameters that contain an empty value are not added to the `Where` clause.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f34f-108">次の例の Products テーブルを検索する方法を示しています、AdventureWorks データベースの製品の持つ`MakeFlag`プロパティ (ブール型の列) に設定されて`true`します。</span><span class="sxs-lookup"><span data-stu-id="8f34f-108">The following example shows how to search the Products table of the AdventureWorks database for products whose `MakeFlag` property (a Boolean column) is set to `true`.</span></span> <span data-ttu-id="8f34f-109">ブール値パラメーターは、チェック ボックスで設定されます。</span><span class="sxs-lookup"><span data-stu-id="8f34f-109">The Boolean value parameter is set in a check box.</span></span> <span data-ttu-id="8f34f-110">返されるクエリの結果、<xref:System.Web.UI.WebControls.LinqDataSource>でコントロールが表示される、<xref:System.Web.UI.WebControls.GridView>コントロール。</span><span class="sxs-lookup"><span data-stu-id="8f34f-110">The result of the query that is returned from the <xref:System.Web.UI.WebControls.LinqDataSource> control is displayed in a <xref:System.Web.UI.WebControls.GridView> control.</span></span>  
  
 <span data-ttu-id="8f34f-111">このコード例が記載されている長い例の一部は、[チュートリアル: Web ページを使用しての宣言構文内でのデータのフィルター処理](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)します。</span><span class="sxs-lookup"><span data-stu-id="8f34f-111">This code example is part of a larger example that is provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f).</span></span>  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="http://msdn.microsoft.com/library/b93e32b9-af41-4539-a009-6cbbe809c702">
      <span data-ttu-id="8f34f-112">による QueryExtender Web サーバー コントロールの概要</span>
      <span class="sxs-lookup">
        <span data-stu-id="8f34f-112">QueryExtender Web Server Control Overview</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8f34f-113">
            <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f34f-113">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="propertyExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="8f34f-114">クエリに使用するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f34f-114">The object to use for the query.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f34f-115">指定した <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> データ ソース オブジェクトを使用して、<see cref="T:System.Linq.IQueryable" /> オブジェクトを適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f34f-115">Applies a <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> object by using the specified <see cref="T:System.Linq.IQueryable" /> data source object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f34f-116">式が適用されたオブジェクトのインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f34f-116">An instance of the object that the expressions were applied to.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f34f-117">このメソッドは、指定された結合<xref:System.Linq.IQueryable>オブジェクト内の式を<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>論理を使用してコレクション`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="8f34f-117">This method combines the specified <xref:System.Linq.IQueryable> object with the expressions in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection by using the logical `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>