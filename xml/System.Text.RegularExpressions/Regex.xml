<Type Name="Regex" FullName="System.Text.RegularExpressions.Regex">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f5b1b16e45086d2dbf7c8f1afa213b88dfe4f122" />
    <Meta Name="ms.sourcegitcommit" Value="9f18ecaf63382fa565dfaeb7274bc1a9e81c35e9" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/19/2018" />
    <Meta Name="ms.locfileid" Value="36208849" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Regex : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Regex extends System.Object implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Regex" />
  <TypeSignature Language="VB.NET" Value="Public Class Regex&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Regex : System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="6ca46-101">変更不可の正規表現を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6ca46-101">Represents an immutable regular expression.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-102"><xref:System.Text.RegularExpressions.Regex>クラスは、.NET Framework の正規表現エンジンを表します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-102">The <xref:System.Text.RegularExpressions.Regex> class represents the .NET Framework's regular expression engine.</span></span> <span data-ttu-id="6ca46-103">大量の特定の文字パターンを検索するテキストをすばやく解析するために使用できます。抽出、編集、置換、または削除するテキストの部分文字列です。レポートを生成するコレクションに展開された文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-103">It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ca46-104">使用することができる場合、最も関心のあるでは、特定のパターンに準拠しているかどうかを決定することにより、文字列を検証、<xref:System.Configuration.RegexStringValidator?displayProperty=nameWithType>クラスです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-104">If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <xref:System.Configuration.RegexStringValidator?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="6ca46-105">記載されている構文を使用してテキスト ストリームに識別する場合、パターンを定義する正規表現を使用する[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-105">To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="6ca46-106">次に、必要に応じてインスタンスを作成できる、<xref:System.Text.RegularExpressions.Regex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-106">Next, you can optionally instantiate a <xref:System.Text.RegularExpressions.Regex> object.</span></span> <span data-ttu-id="6ca46-107">最後に、正規表現パターンに一致するテキストの置換やパターン一致の識別など、いくつかの操作を実行するメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-107">Finally, you call a method that performs some operation, such as replacing text that matches the regular expression pattern, or identifying a pattern match.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ca46-108">一般的な正規表現パターンを参照してください。[正規表現の例](~/docs/standard/base-types/regular-expression-examples.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-108">For some common regular expression patterns, see [Regular Expression Examples](~/docs/standard/base-types/regular-expression-examples.md).</span></span> <span data-ttu-id="6ca46-109">いくつかのように、正規表現パターンのオンライン ライブラリの[Regular Expressions.info](https://www.regular-expressions.info/examples.html)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-109">There are also a number of online libraries of regular expression patterns, such as the one at [Regular-Expressions.info](https://www.regular-expressions.info/examples.html).</span></span>  
  
<a name="remarks"></a> <span data-ttu-id="6ca46-110">使用しての詳細については、<xref:System.Text.RegularExpressions.Regex>クラスのこのトピックの次のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6ca46-110">For more information about using the <xref:System.Text.RegularExpressions.Regex> class, see the following sections in this topic:</span></span>  
  
-   [<span data-ttu-id="6ca46-111">正規表現とします。String のメソッド</span><span class="sxs-lookup"><span data-stu-id="6ca46-111">Regex vs. String Methods</span></span>](#regex_vs_string)  
  
-   [<span data-ttu-id="6ca46-112">静的ポートとします。インスタンス メソッド</span><span class="sxs-lookup"><span data-stu-id="6ca46-112">Static vs. Instance Methods</span></span>](#static_vs_instance)  
  
-   [<span data-ttu-id="6ca46-113">正規表現の操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-113">Performing Regular Expression Operations</span></span>](#regex_ops)  
  
-   [<span data-ttu-id="6ca46-114">タイムアウト値を定義します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-114">Defining a Time-Out Value</span></span>](#define_timeout)  
  
 <span data-ttu-id="6ca46-115">正規表現の言語について詳しくは、「[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照するか、次の資料のいずれかをダウンロードして印刷してください。</span><span class="sxs-lookup"><span data-stu-id="6ca46-115">For more information about the regular expression language, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) or download and print one of these brochures:</span></span>  
  
 [<span data-ttu-id="6ca46-116">Word (.docx) 形式のクイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="6ca46-116">Quick Reference in Word (.docx) format</span></span>](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)  
 [<span data-ttu-id="6ca46-117">PDF (.pdf) 形式のクイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="6ca46-117">Quick Reference in PDF (.pdf) format</span></span>](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)  
  
<a name="regex_vs_string"></a>   
## <a name="regex-vs-string-methods"></a><span data-ttu-id="6ca46-118">正規表現とします。String のメソッド</span><span class="sxs-lookup"><span data-stu-id="6ca46-118">Regex vs. String Methods</span></span>  
 <span data-ttu-id="6ca46-119"><xref:System.String?displayProperty=nameWithType>クラスには、テキストを使用したパターン マッチを実行する際のいくつかの検索と比較のメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-119">The <xref:System.String?displayProperty=nameWithType> class includes several search and comparison methods that you can use to perform pattern matching with text.</span></span> <span data-ttu-id="6ca46-120">など、 <xref:System.String.Contains%2A?displayProperty=nameWithType>、<xref:System.String.EndsWith%2A?displayProperty=nameWithType>と<xref:System.String.StartsWith%2A?displayProperty=nameWithType>メソッドでは、文字列のインスタンスが指定した部分文字列を含むかどうかを判断し、 <xref:System.String.IndexOf%2A?displayProperty=nameWithType>、 <xref:System.String.IndexOfAny%2A?displayProperty=nameWithType>、<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>と<xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType>メソッドは、文字列の指定した部分文字列の開始位置を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-120">For example, the <xref:System.String.Contains%2A?displayProperty=nameWithType>, <xref:System.String.EndsWith%2A?displayProperty=nameWithType>, and <xref:System.String.StartsWith%2A?displayProperty=nameWithType> methods determine whether a string instance contains a specified substring; and the <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, <xref:System.String.IndexOfAny%2A?displayProperty=nameWithType>, <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType> methods return the starting position of a specified substring in a string.</span></span> <span data-ttu-id="6ca46-121">メソッドを使用して、<xref:System.String?displayProperty=nameWithType>クラスの特定の文字列を検索するときにします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-121">Use the methods of the <xref:System.String?displayProperty=nameWithType> class when you are searching for a specific string.</span></span> <span data-ttu-id="6ca46-122">使用して、<xref:System.Text.RegularExpressions.Regex>クラスの特定のパターン文字列で検索している場合。</span><span class="sxs-lookup"><span data-stu-id="6ca46-122">Use the <xref:System.Text.RegularExpressions.Regex> class when you are searching for a specific pattern in a string.</span></span> <span data-ttu-id="6ca46-123">詳細と例については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-123">For more information and examples, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>  
  
 [<span data-ttu-id="6ca46-124">「解説」に戻る</span><span class="sxs-lookup"><span data-stu-id="6ca46-124">Back to Remarks</span></span>](#remarks)  
  
<a name="static_vs_instance"></a>   
## <a name="static-vs-instance-methods"></a><span data-ttu-id="6ca46-125">静的ポートとします。インスタンス メソッド</span><span class="sxs-lookup"><span data-stu-id="6ca46-125">Static vs. Instance Methods</span></span>  
 <span data-ttu-id="6ca46-126">正規表現パターンを定義した後は、2 つの方法のいずれかで、正規表現エンジンに提供できます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-126">After you define a regular expression pattern, you can provide it to the regular expression engine in either of two ways:</span></span>  
  
-   <span data-ttu-id="6ca46-127">インスタンス化して、<xref:System.Text.RegularExpressions.Regex>を正規表現を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-127">By instantiating a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression.</span></span> <span data-ttu-id="6ca46-128">これを行うには、正規表現パターンを渡す、<xref:System.Text.RegularExpressions.Regex.%23ctor%2A>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-128">To do this, you pass the regular expression pattern to a <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> constructor.</span></span> <span data-ttu-id="6ca46-129">A<xref:System.Text.RegularExpressions.Regex>オブジェクトはありません。 変更可能なインスタンス化するときに、<xref:System.Text.RegularExpressions.Regex>正規表現でオブジェクトのオブジェクトの正規表現を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-129">A <xref:System.Text.RegularExpressions.Regex> object is immutable; when you instantiate a <xref:System.Text.RegularExpressions.Regex> object with a regular expression, that object's regular expression cannot be changed.</span></span>  
  
-   <span data-ttu-id="6ca46-130">正規表現とを検索するテキストの両方を指定することによって、 `static` (`Shared` Visual Basic で)<xref:System.Text.RegularExpressions.Regex>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-130">By supplying both the regular expression and the text to search to a `static` (`Shared` in Visual Basic) <xref:System.Text.RegularExpressions.Regex> method.</span></span> <span data-ttu-id="6ca46-131">これは、ように明示的に作成しなくても、正規表現を使用する、<xref:System.Text.RegularExpressions.Regex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-131">This enables you to use a regular expression without explicitly creating a <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="6ca46-132">すべて<xref:System.Text.RegularExpressions.Regex>パターンの識別方法の両方の静的なを含めるし、インスタンス メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-132">All <xref:System.Text.RegularExpressions.Regex> pattern identification methods include both static and instance overloads.</span></span>  
  
 <span data-ttu-id="6ca46-133">パターンを使用する前に、正規表現エンジンはの特定のパターンをコンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-133">The regular expression engine must compile a particular pattern before the pattern can be used.</span></span> <span data-ttu-id="6ca46-134"><xref:System.Text.RegularExpressions.Regex>オブジェクトは不変、これは 1 回限りのプロシージャに発生するときに、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクターまたは静的メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-134">Because <xref:System.Text.RegularExpressions.Regex> objects are immutable, this is a one-time procedure that occurs when a <xref:System.Text.RegularExpressions.Regex> class constructor or a static method is called.</span></span> <span data-ttu-id="6ca46-135">繰り返し、1 つの正規表現をコンパイルする必要性を回避するのには、正規表現エンジンは、静的メソッドの呼び出しで使用される、コンパイルされた正規表現をキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-135">To eliminate the need to repeatedly compile a single regular expression, the regular expression engine caches the compiled regular expressions used in static method calls.</span></span> <span data-ttu-id="6ca46-136">その結果、正規表現パターン一致メソッドでは、比較可能なパフォーマンスは、静的メソッドとインスタンス メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-136">As a result, regular expression pattern-matching methods offer comparable performance for static and instance methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6ca46-137">.NET Framework version 1.0 および 1.1 では、コンパイルされたすべての正規表現ではインスタンスまたは静的メソッドでは使用されているかどうかを呼び出す、キャッシュされました。</span><span class="sxs-lookup"><span data-stu-id="6ca46-137">In the .NET Framework versions 1.0 and 1.1, all compiled regular expressions, whether they were used in instance or static method calls, were cached.</span></span> <span data-ttu-id="6ca46-138">以降、.NET Framework 2.0 では、静的メソッドの呼び出しで使用される正規表現だけがキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-138">Starting with the .NET Framework 2.0, only regular expressions used in static method calls are cached.</span></span>  
  
 <span data-ttu-id="6ca46-139">ただし、キャッシュに悪影響を与える次の 2 つのケースでのパフォーマンス。</span><span class="sxs-lookup"><span data-stu-id="6ca46-139">However, caching can adversely affect performance in the following two cases:</span></span>  
  
-   <span data-ttu-id="6ca46-140">正規表現の数が多いと静的メソッドの呼び出しを使用する場合。</span><span class="sxs-lookup"><span data-stu-id="6ca46-140">When you use static method calls with a large number of regular expressions.</span></span> <span data-ttu-id="6ca46-141">既定では、正規表現エンジンは、15 個の最近使用された静的正規表現をキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-141">By default, the regular expression engine caches the 15 most recently used static regular expressions.</span></span> <span data-ttu-id="6ca46-142">アプリケーションでは、15 個以上の静的正規表現を使用する場合、一部の正規表現が再コンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-142">If your application uses more than 15 static regular expressions, some regular expressions must be recompiled.</span></span> <span data-ttu-id="6ca46-143">この再コンパイルを防ぐためを増やすことができます、<xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-143">To prevent this recompilation, you can increase the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="6ca46-144">ときにインスタンス化する新しい<xref:System.Text.RegularExpressions.Regex>以前コンパイルされている正規表現を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-144">When you instantiate new <xref:System.Text.RegularExpressions.Regex> objects with regular expressions that have previously been compiled.</span></span> <span data-ttu-id="6ca46-145">たとえば、次のコードは、テキスト ストリーム内で重複している単語を検索する正規表現を定義します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-145">For example, the following code defines a regular expression to locate duplicated words in a text stream.</span></span> <span data-ttu-id="6ca46-146">新しくインスタンス化の例は、単一の正規表現を使用して、<xref:System.Text.RegularExpressions.Regex>テキストの各行を処理するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-146">Although the example uses a single regular expression, it instantiates a new <xref:System.Text.RegularExpressions.Regex> object to process each line of text.</span></span> <span data-ttu-id="6ca46-147">これは、結果、ループの反復するたびに、正規表現の再コンパイルします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-147">This results in the recompilation of the regular expression with each iteration of the loop.</span></span>  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#1)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#1)]  
  
     <span data-ttu-id="6ca46-148">再コンパイルを防ぐためには、1 つのインスタンスを作成する必要があります<xref:System.Text.RegularExpressions.Regex>書き換えられた次の例で示すように、必要なすべてのコードにアクセスできるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-148">To prevent recompilation, you should instantiate a single <xref:System.Text.RegularExpressions.Regex> object that is accessible to all code that requires it, as shown in the following rewritten example.</span></span>  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#2)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#2)]  
  
 [<span data-ttu-id="6ca46-149">「解説」に戻る</span><span class="sxs-lookup"><span data-stu-id="6ca46-149">Back to Remarks</span></span>](#remarks)  
  
<a name="regex_ops"></a>   
## <a name="performing-regular-expression-operations"></a><span data-ttu-id="6ca46-150">正規表現の操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-150">Performing Regular Expression Operations</span></span>  
 <span data-ttu-id="6ca46-151">インスタンスを作成するかどうか、<xref:System.Text.RegularExpressions.Regex>オブジェクトしそのメソッドを呼び出すか、静的メソッドを呼び出して、<xref:System.Text.RegularExpressions.Regex>クラスは、次のパターン マッチング機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-151">Whether you decide to instantiate a <xref:System.Text.RegularExpressions.Regex> object and call its methods or call static methods, the <xref:System.Text.RegularExpressions.Regex> class offers the following pattern-matching functionality:</span></span>  
  
-   <span data-ttu-id="6ca46-152">一致の検証。</span><span class="sxs-lookup"><span data-stu-id="6ca46-152">Validation of a match.</span></span> <span data-ttu-id="6ca46-153">呼び出す、<xref:System.Text.RegularExpressions.Regex.IsMatch%2A>一致が存在するかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-153">You call the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method to determine whether a match is present.</span></span>  
  
-   <span data-ttu-id="6ca46-154">単一の一致の検索します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-154">Retrieval of a single match.</span></span> <span data-ttu-id="6ca46-155">呼び出す、<xref:System.Text.RegularExpressions.Regex.Match%2A>を取得する方法、<xref:System.Text.RegularExpressions.Match>を最初に一致する文字列または文字列の一部を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-155">You call the <xref:System.Text.RegularExpressions.Regex.Match%2A> method to retrieve a <xref:System.Text.RegularExpressions.Match> object that represents the first match in a string or in part of a string.</span></span> <span data-ttu-id="6ca46-156">後続の一致を呼び出すことによって取得できます、<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-156">Subsequent matches can be retrieved by calling the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="6ca46-157">すべての一致を取得します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-157">Retrieval of all matches.</span></span> <span data-ttu-id="6ca46-158">呼び出す、<xref:System.Text.RegularExpressions.Regex.Matches%2A>を取得する方法、<xref:System.Text.RegularExpressions.MatchCollection?displayProperty=nameWithType>は文字列または文字列の一部に検出されたすべての項目を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-158">You call the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method to retrieve a <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=nameWithType> object that represents all the matches found in a string or in part of a string.</span></span>  
  
-   <span data-ttu-id="6ca46-159">一致したテキストの置換します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-159">Replacement of matched text.</span></span> <span data-ttu-id="6ca46-160">呼び出す、<xref:System.Text.RegularExpressions.Regex.Replace%2A>一致したテキストを置換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-160">You call the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to replace matched text.</span></span> <span data-ttu-id="6ca46-161">置換テキストは、正規表現も定義できます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-161">The replacement text can also be defined by a regular expression.</span></span> <span data-ttu-id="6ca46-162">さらに、いくつかの<xref:System.Text.RegularExpressions.Regex.Replace%2A>方法があります、<xref:System.Text.RegularExpressions.MatchEvaluator>パラメーター置換テキストをプログラムで定義することができます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-162">In addition, some of the <xref:System.Text.RegularExpressions.Regex.Replace%2A> methods include a <xref:System.Text.RegularExpressions.MatchEvaluator> parameter that enables you to programmatically define the replacement text.</span></span>  
  
-   <span data-ttu-id="6ca46-163">入力文字列の部分から形成される文字列の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-163">Creation of a string array that is formed from parts of an input string.</span></span> <span data-ttu-id="6ca46-164">呼び出す、<xref:System.Text.RegularExpressions.Regex.Split%2A>正規表現で定義されている位置にある入力文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-164">You call the <xref:System.Text.RegularExpressions.Regex.Split%2A> method to split an input string at positions that are defined by the regular expression.</span></span>  
  
 <span data-ttu-id="6ca46-165">そのパターン一致メソッドに加え、<xref:System.Text.RegularExpressions.Regex>クラスには、いくつかの特殊なメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-165">In addition to its pattern-matching methods, the <xref:System.Text.RegularExpressions.Regex> class includes several special-purpose methods:</span></span>  
  
-   <span data-ttu-id="6ca46-166"><xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドは、正規表現または入力文字列で正規表現の演算子として解釈される可能性がありますの文字をエスケープします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-166">The <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes any characters that may be interpreted as regular expression operators in a regular expression or input string.</span></span>  
  
-   <span data-ttu-id="6ca46-167"><xref:System.Text.RegularExpressions.Regex.Unescape%2A>メソッドは、これらのエスケープ文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-167">The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method removes these escape characters.</span></span>  
  
-   <span data-ttu-id="6ca46-168"><xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドは定義済みの正規表現を含むアセンブリを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-168">The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method creates an assembly that contains predefined regular expressions.</span></span> <span data-ttu-id="6ca46-169">.NET Framework にはでのこれらの特殊なアセンブリの例が含まれています、<xref:System.Web.RegularExpressions?displayProperty=nameWithType>名前空間。</span><span class="sxs-lookup"><span data-stu-id="6ca46-169">The .NET Framework contains examples of these special-purpose assemblies in the <xref:System.Web.RegularExpressions?displayProperty=nameWithType> namespace.</span></span>  
  
 [<span data-ttu-id="6ca46-170">「解説」に戻る</span><span class="sxs-lookup"><span data-stu-id="6ca46-170">Back to Remarks</span></span>](#remarks)  
  
<a name="define_timeout"></a>   
## <a name="defining-a-time-out-value"></a><span data-ttu-id="6ca46-171">タイムアウト値を定義します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-171">Defining a Time-Out Value</span></span>  
 <span data-ttu-id="6ca46-172">.NET Framework には、大幅な機能とパターン マッチで柔軟性を提供する正規表現のフル機能の言語がサポートしています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-172">The .NET Framework supports a full-featured regular expression language that provides substantial power and flexibility in pattern matching.</span></span> <span data-ttu-id="6ca46-173">機能と柔軟性帰宅コスト: パフォーマンスの低下のリスクです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-173">However, the power and flexibility come at a cost: the risk of poor performance.</span></span> <span data-ttu-id="6ca46-174">パフォーマンスを発揮する正規表現は驚くほど簡単に作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-174">Regular expressions that perform poorly are surprisingly easy to create.</span></span> <span data-ttu-id="6ca46-175">場合によっては、過度なバックトラッ キングに依存する正規表現操作は、正規表現パターンにほぼ一致するテキストを処理するときに応答を停止する表示できます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-175">In some cases, regular expression operations that rely on excessive backtracking can appear to stop responding when they process text that nearly matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-176">.NET Framework の正規表現エンジンの詳細については、次を参照してください。[詳細正規表現の動作](~/docs/standard/base-types/details-of-regular-expression-behavior.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-176">For more information about the .NET Framework regular expression engine, see [Details of Regular Expression Behavior](~/docs/standard/base-types/details-of-regular-expression-behavior.md).</span></span> <span data-ttu-id="6ca46-177">過度なバックトラッ キングの詳細については、次を参照してください。[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-177">For more information about excessive backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="6ca46-178">以降で、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、正規表現の一致のタイムアウト間隔を定義することができます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-178">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can define a time-out interval for regular expression matches.</span></span> <span data-ttu-id="6ca46-179">正規表現エンジンは、この時間間隔内で一致するものを識別できない、一致操作をスロー、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-179">If the regular expression engine cannot identify a match within this time interval, the matching operation throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-180">ほとんどの場合、こうこと、正規表現エンジンを正規表現パターンにほぼ一致するテキストを一致させることによって、処理能力を浪費します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-180">In most cases, this prevents the regular expression engine from wasting processing power by trying to match text that nearly matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-181">これも可能性があります、ただし、タイムアウト間隔が設定されている低すぎる、または現在のマシンの負荷が原因である、全体を低下させるパフォーマンス。</span><span class="sxs-lookup"><span data-stu-id="6ca46-181">It also could indicate, however, that the timeout interval has been set too low, or that the current machine load has caused an overall degradation in performance.</span></span>  
  
 <span data-ttu-id="6ca46-182">例外を処理する方法は、例外の原因によって異なります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-182">How you handle the exception depends on the cause of the exception.</span></span> <span data-ttu-id="6ca46-183">タイムアウト間隔の設定が低すぎるために、例外が発生した場合、または過剰なマシンの負荷のため、タイムアウト間隔を長くして、一致操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="6ca46-183">If the exception occurs because the time-out interval is set too low or because of excessive machine load, you can increase the time-out interval and retry the matching operation.</span></span> <span data-ttu-id="6ca46-184">正規表現は、過度なバックトラッ キングに依存するために、例外が発生した場合は、一致するものが存在しないと、必要に応じて、ログ情報、正規表現パターンの変更を支援することを想定することができます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-184">If the exception occurs because the regular expression relies on excessive backtracking, you can assume that a match does not exist, and, optionally, you can log information that will help you modify the regular expression pattern.</span></span>  
  
 <span data-ttu-id="6ca46-185">タイムアウト間隔を設定するには呼び出すことによって、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>コンス トラクター、正規表現オブジェクトをインスタンス化するとき。</span><span class="sxs-lookup"><span data-stu-id="6ca46-185">You can set a time-out interval by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor when you instantiate a regular expression object.</span></span> <span data-ttu-id="6ca46-186">ある一致するメソッドのオーバー ロードを呼び出すことによって、タイムアウト間隔を設定する、静的メソッドの`matchTimeout`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="6ca46-186">For static methods, you can set a time-out interval by calling an overload of a matching method that has a `matchTimeout` parameter.</span></span> <span data-ttu-id="6ca46-187">場合は、タイムアウト値を明示的に設定しないと、既定のタイムアウト値は次のように決定されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-187">If you do not set a time-out value explicitly, the default time-out value  is determined as follows:</span></span>  
  
-   <span data-ttu-id="6ca46-188">アプリケーション全体のタイムアウトを使用して、1 つの値が存在します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-188">By using the application-wide time-out value, if one exists.</span></span> <span data-ttu-id="6ca46-189">これをアプリケーション ドメインに適用される任意のタイムアウト値を指定できます、<xref:System.Text.RegularExpressions.Regex>オブジェクトをインスタンス化または静的メソッド呼び出しが行われます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-189">This can be any time-out value that applies to the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is instantiated or the static method call is made.</span></span> <span data-ttu-id="6ca46-190">呼び出して、アプリケーション全体のタイムアウト値を設定することができます、<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>の文字列形式を割り当てる方法、 <xref:System.TimeSpan> "REGEX_DEFAULT_MATCH_TIMEOUT"プロパティに値。</span><span class="sxs-lookup"><span data-stu-id="6ca46-190">You can set the application-wide time-out value by calling the <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> method to assign the string representation of a <xref:System.TimeSpan> value to the "REGEX_DEFAULT_MATCH_TIMEOUT" property.</span></span>  
  
-   <span data-ttu-id="6ca46-191">値を使用して<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>アプリケーション全体のタイムアウト値が設定されていない場合、します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-191">By using the value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>, if no application-wide time-out value has been set.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6ca46-192">すべての正規表現パターン マッチング操作では、タイムアウト値を設定することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-192">We recommend that you set a time-out value in all regular expression pattern-matching operations.</span></span> <span data-ttu-id="6ca46-193">詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-193">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).</span></span>  
  
 [<span data-ttu-id="6ca46-194">「解説」に戻る</span><span class="sxs-lookup"><span data-stu-id="6ca46-194">Back to Remarks</span></span>](#remarks)  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-195">次の例では、正規表現を使用して、文字列内の単語の繰り返し発生するを確認します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-195">The following example uses a regular expression to check for repeated occurrences of words in a string.</span></span> <span data-ttu-id="6ca46-196">正規表現`\b(?<word>\w+)\s+(\k<word>)\b`次の表に示すように解釈できます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-196">The regular expression `\b(?<word>\w+)\s+(\k<word>)\b` can be interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-197">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-197">Pattern</span></span>|<span data-ttu-id="6ca46-198">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-198">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="6ca46-199">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-199">Start the match at a word boundary.</span></span>|  
|`(?<word>\w+)`|<span data-ttu-id="6ca46-200">ワード境界までの 1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-200">Match one or more word characters up to a word boundary.</span></span> <span data-ttu-id="6ca46-201">このキャプチャされたグループの名前を付けます`word`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-201">Name this captured group `word`.</span></span>|  
|`\s+`|<span data-ttu-id="6ca46-202">1 つ以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-202">Match one or more white-space characters.</span></span>|  
|`(\k<word>)`|<span data-ttu-id="6ca46-203">という名前のキャプチャ済みグループと一致`word`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-203">Match the captured group that is named `word`.</span></span>|  
|`\b`|<span data-ttu-id="6ca46-204">ワード境界に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-204">Match a word boundary.</span></span>|  
  
 [!code-cpp[Regex_Words#0](~/samples/snippets/cpp/VS_Snippets_CLR/Regex_Words/CPP/words.cpp#0)]
 [!code-csharp[Regex_Words#0](~/samples/snippets/csharp/VS_Snippets_CLR/Regex_Words/CS/words.cs#0)]
 [!code-vb[Regex_Words#0](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex_Words/VB/words.vb#0)]  
  
 <span data-ttu-id="6ca46-205">次の例では、かどうか、文字列が通貨値を表すか通貨値を表すため、正しい形式を確認する正規表現の使用を示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-205">The following example illustrates the use of a regular expression to check whether a string either represents a currency value or has the correct format to represent a currency value.</span></span> <span data-ttu-id="6ca46-206">この場合、正規表現は動的に構築から、 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A?displayProperty=nameWithType>、 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A?displayProperty=nameWithType>、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>、および<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>ユーザーの現在のカルチャのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-206">In this case, the regular expression is built dynamically from the <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties for the user's current culture.</span></span> <span data-ttu-id="6ca46-207">場合は、システムの現在のカルチャが EN-US で、結果として得られる正規表現は`^\s*[\+-]?\s?\$?\s?(\d*\.?\d{2}?){1}$`します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-207">If the system's current culture is en-US, the resulting regular expression is `^\s*[\+-]?\s?\$?\s?(\d*\.?\d{2}?){1}$`.</span></span> <span data-ttu-id="6ca46-208">次の表に示すように、この正規表現を解釈できます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-208">This regular expression can be interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-209">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-209">Pattern</span></span>|<span data-ttu-id="6ca46-210">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-210">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="6ca46-211">文字列の先頭から開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-211">Start at the beginning of the string.</span></span>|  
|`\s*`|<span data-ttu-id="6ca46-212">0 個以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-212">Match zero or more white-space characters.</span></span>|  
|`[\+-]?`|<span data-ttu-id="6ca46-213">正符号または負の符号の 0 回または 1 回一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-213">Match zero or one occurrence of either the positive sign or the negative sign.</span></span>|  
|`\s?`|<span data-ttu-id="6ca46-214">0 個または 1 個の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-214">Match zero or one white-space character.</span></span>|  
|`\$?`|<span data-ttu-id="6ca46-215">ドル記号の 0 回または 1 回を一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-215">Match zero or one occurrence of the dollar sign.</span></span>|  
|`\s?`|<span data-ttu-id="6ca46-216">0 個または 1 個の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-216">Match zero or one white-space character.</span></span>|  
|`\d*`|<span data-ttu-id="6ca46-217">0 個以上の 10 進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-217">Match zero or more decimal digits.</span></span>|  
|`\.?`|<span data-ttu-id="6ca46-218">0 個または 1 つの小数点記号に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-218">Match zero or one decimal point symbol.</span></span>|  
|`\d{2}?`|<span data-ttu-id="6ca46-219">0 個または 1 回を 2 桁の 10 進数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-219">Match two decimal digits zero or one time.</span></span>|  
|`(\d*\.?\d{2}?){1}`|<span data-ttu-id="6ca46-220">少なくとも 1 回の小数点記号で区切られた整数部と小数の桁のパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-220">Match the pattern of integral and fractional digits separated by a decimal point symbol at least one time.</span></span>|  
|`$`|<span data-ttu-id="6ca46-221">文字列の末尾と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-221">Match the end of the string.</span></span>|  
  
 <span data-ttu-id="6ca46-222">ここでは、正規表現では、グループ区切り記号が有効な通貨文字列に含まれていないことと小数桁なしまたは現在のカルチャによって定義された桁の小数部の数のいずれかがいる<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-222">In this case, the regular expression assumes that a valid currency string does not contain group separator symbols, and that it has either no fractional digits or the number of fractional digits defined by the current culture's <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> property.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/cs/regex_example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/vb/regex_example1.vb#1)]  
  
 <span data-ttu-id="6ca46-223">この例では、正規表現が動的に組み込まれているためにわかりませんデザイン時に現在のカルチャの通貨記号、桁区切り記号、または正と負の記号可能性がありますとして誤って解釈される正規表現エンジンで正規表現言語演算子かどうか。</span><span class="sxs-lookup"><span data-stu-id="6ca46-223">Because the regular expression in this example is built dynamically, we do not know at design time whether the current culture's currency symbol, decimal sign, or positive and negative signs might be misinterpreted by the regular expression engine as regular expression language operators.</span></span> <span data-ttu-id="6ca46-224">例は、誤って解釈されるを防ぐためを動的に生成された各文字列を渡して、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-224">To prevent any misinterpretation, the example passes each dynamically generated string to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="6ca46-225">
        <see cref="T:System.Text.RegularExpressions.Regex" />クラスは変更不可 (読み取り専用) とスレッド セーフであります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6ca46-225">The <see cref="T:System.Text.RegularExpressions.Regex" /> class is immutable (read-only) and thread safe.</span>
      </span>
      <span data-ttu-id="6ca46-226">
        <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトは、任意のスレッドで作成およびスレッド間で共有できます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6ca46-226">
          <see cref="T:System.Text.RegularExpressions.Regex" /> objects can be created on any thread and shared between threads.</span>
      </span>
      <span data-ttu-id="6ca46-227">詳細については、[スレッド Safety](~/docs/standard/base-types/thread-safety-in-regular-expressions.md) を参照してください。。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6ca46-227">For more information, see [Thread Safety](~/docs/standard/base-types/thread-safety-in-regular-expressions.md).</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Configuration.RegexStringValidator" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-228">
            <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-228">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Regex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-229">
            <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-229">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-230">このコンス トラクターが保護されることに注意してください。派生したクラスによってのみ呼び出すことができます、<xref:System.Text.RegularExpressions.Regex>クラスです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-230">Note that this constructor is protected; it can only be called by classes derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">
          <span data-ttu-id="6ca46-231">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-231">The regular expression pattern to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-232">指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-232">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-233">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-233">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-234">正規表現の詳細については、次を参照してください。、 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-234">For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.</span></span>  
  
 <span data-ttu-id="6ca46-235">呼び出す、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29>コンス トラクターは、呼び出すことと同じ、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29>の値を持つコンス トラクター<xref:System.Text.RegularExpressions.RegexOptions.None>の`options`引数。</span><span class="sxs-lookup"><span data-stu-id="6ca46-235">Calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29> constructor is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor with a value of <xref:System.Text.RegularExpressions.RegexOptions.None> for the `options` argument.</span></span>  
  
 <span data-ttu-id="6ca46-236">A<xref:System.Text.RegularExpressions.Regex>オブジェクトは変更不可、作成するときに定義した一致パターンに対してのみ使用できることを意味します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-236">A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern you define when you create it.</span></span> <span data-ttu-id="6ca46-237">ただし、再コンパイルせずに何度でもを使用します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-237">However, it can be used any number of times without being recompiled.</span></span>  
  
 <span data-ttu-id="6ca46-238">このコンス トラクターで定義されている任意の英字の大文字と小文字をしようとする正規表現オブジェクトをインスタンス化`pattern`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-238">This constructor instantiates a regular expression object that attempts a case-sensitive match of any alphabetical characters defined in `pattern`.</span></span> <span data-ttu-id="6ca46-239">大文字と小文字を使用して、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-239">For a case-insensitive match, use the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-240">次の例は、このコンス トラクターを使用して、文字で始まる単語と一致する正規表現のインスタンスを作成する方法を示しています。"a"または"t"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-240">The following example illustrates how to use this constructor to instantiate a regular expression that matches any word that begins with the letters "a" or "t".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/constructors1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/constructors1.vb#1)]  
  
 <span data-ttu-id="6ca46-241">正規表現パターンが単語を照合できないことに注意してください、テキストの先頭に"The"比較では、既定では大文字小文字を区別するためです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-241">Note that the regular expression pattern cannot match the word "The" at the beginning of the text, because comparisons are case-sensitive by default.</span></span> <span data-ttu-id="6ca46-242">大文字と小文字の例は、次を参照してください。、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-242">For an example of case-insensitive comparison, see the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-243">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-243">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-244">
            <paramref name="pattern" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-244">
              <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-245">
            <para>このコンス トラクターを作成、<see cref="T:System.Text.RegularExpressions.Regex" />が作成されるアプリケーション ドメインの既定のタイムアウト値を使用するオブジェクト。アプリケーション ドメインのタイムアウト値が定義されていない場合、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクト値を使用して<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトから、操作を防ぐことができます。作成するための推奨されるコンス トラクター、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトが<see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-245">
              <para>This constructor creates a <see cref="T:System.Text.RegularExpressions.Regex" /> object that uses the default time-out value of the application domain in which it is created. If a time-out value has not been defined for the application domain,  the <see cref="T:System.Text.RegularExpressions.Regex" /> object uses the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the operation from timing out. The recommended constructor for creating a <see cref="T:System.Text.RegularExpressions.Regex" /> object is <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Regex(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="6ca46-246">シリアル化されたパターンと <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 情報を保持するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-246">The object that contains a serialized pattern and <see cref="T:System.Text.RegularExpressions.RegexOptions" /> information.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="6ca46-247">このシリアル化のシリアル化先。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-247">The destination for this serialization.</span>
          </span>
          <span data-ttu-id="6ca46-248">(このパラメーターは使用されません。<see langword="null" /> を指定してください。)</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-248">(This parameter is not used; specify <see langword="null" />.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-249">シリアル化したデータを使用して、<see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-249">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class by using serialized data.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-250">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-250">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-251">
            <paramref name="info" /> に含まれているパターンが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-251">The pattern that <paramref name="info" /> contains is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-252">
            <paramref name="info" /> に無効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> フラグが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-252">
              <paramref name="info" /> contains an invalid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> flag.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="pattern">
          <span data-ttu-id="6ca46-253">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-253">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-254">正規表現を変更する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-254">A bitwise combination of the enumeration values that modify the regular expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-255">パターンを変更するオプションを使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-255">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression, with options that modify the pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-256">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-256">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-257">正規表現の詳細については、次を参照してください。、 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-257">For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.</span></span>  
  
 <span data-ttu-id="6ca46-258">A<xref:System.Text.RegularExpressions.Regex>オブジェクトは変更不可、作成するときを定義する一致するパラメーターにのみ使用できることを意味します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-258">A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match parameters you define when you create it.</span></span> <span data-ttu-id="6ca46-259">ただし、再コンパイルせずに何度でもを使用します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-259">However, it can be used any number of times without being recompiled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-260">次の例は、このコンス トラクターを使用して、文字で始まる単語と一致する正規表現のインスタンスを作成する方法を示しています。"a"または"t"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-260">The following example illustrates how to use this constructor to instantiate a regular expression that matches any word that begins with the letters "a" or "t".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/Constructors2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/Constructors2.vb#2)]  
  
 <span data-ttu-id="6ca46-261">Matchcollection がためにテキストを開始する「、」という単語が含まれることに注意してください、`options`パラメーターは大文字と小文字の比較を定義します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-261">Note that the match collection includes the word "The" that begins the text because the `options` parameter has defined case-insensitive comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-262">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-262">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-263">
            <paramref name="pattern" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-263">
              <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-264">
            <paramref name="options" /> に無効なフラグが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-264">
              <paramref name="options" /> contains an invalid flag.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-265">
            <para>このコンス トラクターを作成、<see cref="T:System.Text.RegularExpressions.Regex" />が作成されるアプリケーション ドメインの既定のタイムアウト値を使用するオブジェクト。アプリケーション ドメインのタイムアウト値が定義されていない場合、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクト値を使用して<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトから、操作を防ぐことができます。作成するための推奨されるコンス トラクター、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトが<see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-265">
              <para>This constructor creates a <see cref="T:System.Text.RegularExpressions.Regex" /> object that uses the default time-out value of the application domain in which it is created. If a time-out value has not been defined for the application domain, the <see cref="T:System.Text.RegularExpressions.Regex" /> object uses the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the operation from timing out. The recommended constructor for creating a <see cref="T:System.Text.RegularExpressions.Regex" /> object is <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">
          <span data-ttu-id="6ca46-266">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-266">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-267">正規表現を変更する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-267">A bitwise combination of the enumeration values that modify the regular expression.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="6ca46-268">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-268">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-269">パターンを変更するオプションと、パターン マッチ メソッドがタイムアウトするまでに一致を試みる時間を指定する値を使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-269">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-270">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-270">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-271">正規表現の詳細については、次を参照してください。、 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-271">For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.</span></span>  
  
 <span data-ttu-id="6ca46-272">A<xref:System.Text.RegularExpressions.Regex>オブジェクトは変更不可、作成するときに定義する一致パターンに対してのみ使用できることを意味します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-272">A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern that you define when you create it.</span></span> <span data-ttu-id="6ca46-273">ただし、再コンパイルせずに何度でもを使用します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-273">However, it can be used any number of times without being recompiled.</span></span>  
  
 <span data-ttu-id="6ca46-274">`matchTimeout`パラメーターを指定期間、パターン一致メソッドがタイムアウトになる前に、一致を見つけるを試行します。パターン一致メソッドをスローする時間間隔の一致が見つからない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-274">The `matchTimeout` parameter specifies how long a pattern-matching method should try to find a match before it times out. If no match is found in that time interval, the pattern-matching method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-275">`matchTimeout` アプリケーション ドメインに対して定義されている既定のタイムアウト値よりも優先、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-275">`matchTimeout` overrides any default time-out value defined for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-276">観察するインスタンス パターン一致メソッドの`matchTimeout`タイムアウト間隔、次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-276">The instance pattern-matching methods that observe the `matchTimeout` time-out interval include the following:</span></span>  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%2A>  
  
-   <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="6ca46-277">入力を処理するときに応答を停止するが表示されない過度なバックトラッ キングに依存する正規表現により、タイムアウト間隔を設定する近い一致が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-277">Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="6ca46-278">詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-278">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-279">妥当なタイムアウトの間隔を設定するには、次の要因を検討してください。</span><span class="sxs-lookup"><span data-stu-id="6ca46-279">To set a reasonable time-out interval, consider the following factors:</span></span>  
  
-   <span data-ttu-id="6ca46-280">長さと複雑な正規表現パターンです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-280">The length and complexity of the regular expression pattern.</span></span> <span data-ttu-id="6ca46-281">時間が長く、複雑な正規表現では、短くてわかりやすいものよりも時間が必要です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-281">Longer and more complex regular expressions require more time than shorter and simpler ones.</span></span>  
  
-   <span data-ttu-id="6ca46-282">予期されるマシンの負荷。</span><span class="sxs-lookup"><span data-stu-id="6ca46-282">The expected machine load.</span></span> <span data-ttu-id="6ca46-283">処理では、CPU およびメモリ使用率が高いシステムでより多くの時間がかかります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-283">Processing takes more time on systems that have high CPU and memory utilization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-284">次の例では、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>をインスタンス化するコンス トラクター、 <xref:System.Text.RegularExpressions.Regex> 1 秒のタイムアウト値を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-284">The following example calls the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor to instantiate a <xref:System.Text.RegularExpressions.Regex> object with a time-out value of one second.</span></span> <span data-ttu-id="6ca46-285">正規表現パターン `(a+)+$`は、行の末尾にある 1 つ以上の "a" 文字の 1 つ以上のシーケンスに一致しますが、過度なバックトラッキングの対象になります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-285">The regular expression pattern `(a+)+$`, which matches one or more sequences of one or more "a" characters at the end of a line, is subject to excessive backtracking.</span></span> <span data-ttu-id="6ca46-286">場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>は例では、スローされた場合、最大値は 3 秒のタイムアウト値が増加します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-286">If a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> is thrown, the example increases the time-out value up to the maximum value of three seconds.</span></span> <span data-ttu-id="6ca46-287">それ以外の場合、パターンに一致させる試行を中止します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-287">Otherwise, it abandons the attempt to match the pattern.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/vb/ctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-288">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-288">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-289">
            <paramref name="pattern" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-289">
              <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-290">
            <paramref name="options" /> は有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-290">
              <paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> value.</span>
          </span>
          <span data-ttu-id="6ca46-291">または、<paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-291">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-292">
            <para>設定することをお勧め、<paramref name="matchTimeout" />パラメーターが 2 秒などの適切な値です。指定してタイムアウトを無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンはわずかですが優れたパフォーマンスを提供します。ただし、次の条件下でのみのタイムアウトを無効にする必要があります: - する場合は、正規表現によって処理される入力は既知の信頼されたソースから派生または静的なテキストで構成されます。これには、動的にユーザーによって入力されたテキストが含まれません。 -効率的に処理することを確認する正規表現パターンが十分にテストされてときに一致すると、一致以外の場合、して近い一致します。 場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングを引き起こすことが確認される言語要素は含まれていません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-292">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CacheSize">
      <MemberSignature Language="C#" Value="public static int CacheSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CacheSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CacheSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CacheSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CacheSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-293">コンパイルされた正規表現の現在の静的キャッシュ内の最大エントリ数を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-293">Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ca46-294">静的キャッシュの最大エントリ数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-294">The maximum number of entries in the static cache.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-295"><xref:System.Text.RegularExpressions.Regex>クラスの静的メソッドの呼び出しで使用される、コンパイルされた正規表現の内部キャッシュに格納します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-295">The <xref:System.Text.RegularExpressions.Regex> class maintains an internal cache of compiled regular expressions used in static method calls.</span></span> <span data-ttu-id="6ca46-296">設定操作で指定された値が現在のキャッシュ サイズよりも小さい場合は、キャッシュ サイズが、指定された値と等しくなるまでにキャッシュ エントリは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-296">If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value.</span></span>  
  
 <span data-ttu-id="6ca46-297">既定では、キャッシュは、15 にコンパイルされた静的正規表現を保持します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-297">By default, the cache holds 15 compiled static regular expressions.</span></span> <span data-ttu-id="6ca46-298">アプリケーションは通常、キャッシュのサイズを変更する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-298">Your application typically will not have to modify the size of the cache.</span></span> <span data-ttu-id="6ca46-299">使用して、<xref:System.Text.RegularExpressions.Regex.CacheSize%2A>プロパティ キャッシュまたは一般に大きいキャッシュする必要がある場合をオフにするときだけです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-299">Use the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> property only when you want to turn off caching or when you have an unusually large cache.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-300">設定操作の値が 0 より小さい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-300">The value in a set operation is less than zero.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-301">
            <para>前のバージョンの .NET Framework で、[です。INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]、両方の静的正規表現を使用し、インスタンス メソッドの呼び出しがキャッシュされました。以降で、[です。静的メソッドの呼び出しはキャッシュで使用される INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]、regular のみ式。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-301">
              <para>In the .NET Framework prior to the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], regular expressions used in both static and instance method calls were cached. Beginning with the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], only regular expressions used in static method calls are cached.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="capnames">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Hashtable capnames;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable capnames" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capnames" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capnames As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Collections::Hashtable ^ capnames;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-302">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-302">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CapNames">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary CapNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary CapNames" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CapNames" />
      <MemberSignature Language="VB.NET" Value="Protected Property CapNames As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ CapNames { System::Collections::IDictionary ^ get(); void set(System::Collections::IDictionary ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-303">名前付きキャプチャ対象グループをインデックス値にマップする辞書を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-303">Gets or sets a dictionary that maps named capturing groups to their index values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ca46-304">名前付きキャプチャ対象グループをインデックス値にマップする辞書。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-304">A dictionary that maps named capturing groups to their index values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-305">このプロパティが保護されているに注意してください。派生したクラスからのみアクセスできる、<xref:System.Text.RegularExpressions.Regex>クラスです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-305">Note that this property is protected; it can only be accessed from a class derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
 <span data-ttu-id="6ca46-306">設定操作は、プロパティに割り当てられた値を変換しようとしています、<xref:System.Collections.Hashtable>オブジェクトです。 この変換が失敗した場合、呼び出し、<xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-306">A set operation attempts to convert the value assigned to the property to a <xref:System.Collections.Hashtable> object; if this conversion fails, it calls the <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-307">セット操作で <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> プロパティに割り当てられた値は、<see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-307">The value assigned to the <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> property in a set operation is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="caps">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Hashtable caps;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable caps" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.caps" />
      <MemberSignature Language="VB.NET" Value="Protected Friend caps As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Collections::Hashtable ^ caps;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-308">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-308">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Caps">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary Caps { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Caps" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Caps" />
      <MemberSignature Language="VB.NET" Value="Protected Property Caps As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ Caps { System::Collections::IDictionary ^ get(); void set(System::Collections::IDictionary ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-309">番号付きのキャプチャ対象グループをインデックス値にマップする辞書を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-309">Gets or sets a dictionary that maps numbered capturing groups to their index values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ca46-310">番号付きのキャプチャ対象グループをインデックス値にマップする辞書。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-310">A dictionary that maps numbered capturing groups to their index values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-311">このプロパティが保護されているに注意してください。派生したクラスからのみアクセスできる、<xref:System.Text.RegularExpressions.Regex>クラスです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-311">Note that this property is protected; it can only be accessed from a class derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
 <span data-ttu-id="6ca46-312">設定操作は、プロパティに割り当てられた値を変換しようとしています、<xref:System.Collections.Hashtable>オブジェクトです。 この変換が失敗した場合、呼び出し、<xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-312">A set operation attempts to convert the value assigned to the property to a <xref:System.Collections.Hashtable> object; if this conversion fails, it calls the <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-313">セット操作で <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> プロパティに割り当てられた値は、<see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-313">The value assigned to the <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> property in a set operation is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="capsize">
      <MemberSignature Language="C#" Value="protected internal int capsize;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly int32 capsize" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capsize" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capsize As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected public: int capsize;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-314">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-314">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="capslist">
      <MemberSignature Language="C#" Value="protected internal string[] capslist;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string[] capslist" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capslist" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capslist As String() " />
      <MemberSignature Language="C++ CLI" Value="protected public: cli::array &lt;System::String ^&gt; ^ capslist;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-315">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-315">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CompileToAssembly">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-316">正規表現をコンパイルして、ディスク上の単一のアセンブリに保存します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-316">Compiles regular expressions and saves them to disk in a single assembly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="6ca46-317">.NET Core で呼び出し、`Regex.CompileToAssembly`メソッド throw、 <xref:System.PlatformNotSupportedException>; アセンブリの書き込みはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-317">On .NET Core, calls to the `Regex.CompileToAssembly` method throw a <xref:System.PlatformNotSupportedException>; writing out an assembly is not supported.</span></span>
  
       ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="regexinfos">
          <span data-ttu-id="6ca46-318">コンパイルする正規表現を記述する配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-318">An array that describes the regular expressions to compile.</span>
          </span>
        </param>
        <param name="assemblyname">
          <span data-ttu-id="6ca46-319">アセンブリのファイル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-319">The file name of the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-320">1 つ以上の指定した <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをコンパイルして、名前付きアセンブリに保存します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-320">Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex" /> objects to a named assembly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-321"><xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29>メソッドで定義されている各正規表現の .NET Framework アセンブリを生成する、`regexinfos`配列は、クラスで表されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-321">The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class.</span></span> <span data-ttu-id="6ca46-322">通常、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29>メソッドがコンパイルされる正規表現のアセンブリを生成する別のアプリケーションから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-322">Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method is called from a separate application that generates an assembly of compiled regular expressions.</span></span> <span data-ttu-id="6ca46-323">アセンブリに含まれる各正規表現では、次の特徴があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-323">Each regular expression included in the assembly has the following characteristics:</span></span>  
  
-   <span data-ttu-id="6ca46-324">派生します<xref:System.Text.RegularExpressions.Regex>クラスです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-324">It is derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
-   <span data-ttu-id="6ca46-325">定義されている完全修飾名が割り当てられているが、`fullnamespace`と`name`対応するパラメーター<xref:System.Text.RegularExpressions.RegexCompilationInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-325">It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.</span></span>  
  
-   <span data-ttu-id="6ca46-326">既定値 (またはパラメーターなし) コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-326">It has a default (or parameterless) constructor.</span></span>  
  
 <span data-ttu-id="6ca46-327">通常、アセンブリまたはアセンブリを作成するコードから分離されたアプリケーションでインスタンス化し、コンパイルされた正規表現を使用するコードが見つかりました。</span><span class="sxs-lookup"><span data-stu-id="6ca46-327">Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-328">次の例では、RegexLib.dll をという名前のアセンブリを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-328">The following example creates an assembly named RegexLib.dll.</span></span> <span data-ttu-id="6ca46-329">アセンブリには、次の 2 つのコンパイルされた正規表現が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-329">The assembly includes two compiled regular expressions.</span></span> <span data-ttu-id="6ca46-330">最初、 `Utilities.RegularExpressions.DuplicatedString`、同じ 2 つの連続した単語と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-330">The first, `Utilities.RegularExpressions.DuplicatedString`, matches two identical contiguous words.</span></span> <span data-ttu-id="6ca46-331">2 番目、`Utilities.RegularExpressions.EmailAddress`文字列は、正しい形式は電子メール アドレスがあるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-331">The second, `Utilities.RegularExpressions.EmailAddress`, checks whether a string has the correct format to be an email address.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile1.vb#1)]  
  
 <span data-ttu-id="6ca46-332">重複する単語の文字列をチェックする正規表現は、インスタンス化され、次の例で使用されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-332">The regular expression that checks a string for duplicate words is then instantiated and used by the following example.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 <span data-ttu-id="6ca46-333">この 2 番目の例の正常にコンパイルでは、プロジェクトに追加する (アセンブリは、最初の例で作成された) RegexLib.dll への参照が必要です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-333">Successful compilation of this second example requires a reference to RegexLib.dll (the assembly created by the first example) to be added to the project.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-334">
            <paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-334">The value of the <paramref name="assemblyname" /> parameter's <see cref="P:System.Reflection.AssemblyName.Name" /> property is an empty or null string.</span>
          </span>
          <span data-ttu-id="6ca46-335">または、<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-335">-or-  The regular expression pattern of one or more objects in <paramref name="regexinfos" /> contains invalid syntax.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-336">
            <paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-336">
              <paramref name="assemblyname" /> or <paramref name="regexinfos" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="6ca46-337">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-337">.NET Core only: Creating an assembly of compiled regular expressions is not supported.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-338">
            <para>搭載したシステムで開発している場合 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] またはそのポイント リリースがインストールされている、対象とする [です。INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、使用して、<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />コンパイルされる正規表現のメソッドを格納するアセンブリを作成します。システム上のアセンブリを持つことで、正規表現のいずれかを使用しようとしています [!。INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] では、例外をスローします。この問題を回避する、次のいずれかを実行できます:-を搭載したシステムでコンパイルされた正規表現を含むアセンブリをビルド [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 代わりにそれ以降のバージョンをインストールします。 呼び出し元の代わりに<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />静的を使用してコンパイルされた正規表現をアセンブリから取得、またはインスタンスと<see cref="T:System.Text.RegularExpressions.Regex" />メソッド、<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />インスタンス化するときのオプション、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトまたは正規表現を呼び出すパターン一致メソッドにします。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-338">
              <para>If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions. Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception. To work around this problem, you can do either of the following:  -   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.  -   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname, cli::array &lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" />
      </Parameters>
      <Docs>
        <param name="regexinfos">
          <span data-ttu-id="6ca46-339">コンパイルする正規表現を記述する配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-339">An array that describes the regular expressions to compile.</span>
          </span>
        </param>
        <param name="assemblyname">
          <span data-ttu-id="6ca46-340">アセンブリのファイル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-340">The file name of the assembly.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="6ca46-341">アセンブリに適用する属性を定義する配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-341">An array that defines the attributes to apply to the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-342">指定した 1 つ以上の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをコンパイルして、指定した属性を持つ名前付きアセンブリに保存します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-342">Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex" /> objects to a named assembly with the specified attributes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-343"><xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29>メソッドで定義されている各正規表現の .NET Framework アセンブリを生成する、`regexinfos`配列は、クラスで表されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-343">The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class.</span></span> <span data-ttu-id="6ca46-344">通常、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29>メソッドがコンパイルされる正規表現のアセンブリを生成する別のアプリケーションから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-344">Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method is called from a separate application that generates an assembly of compiled regular expressions.</span></span> <span data-ttu-id="6ca46-345">アセンブリに含まれる各正規表現では、次の特徴があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-345">Each regular expression included in the assembly has the following characteristics:</span></span>  
  
-   <span data-ttu-id="6ca46-346">派生します<xref:System.Text.RegularExpressions.Regex>クラスです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-346">It is derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
-   <span data-ttu-id="6ca46-347">定義されている完全修飾名が割り当てられているが、`fullnamespace`と`name`対応するパラメーター<xref:System.Text.RegularExpressions.RegexCompilationInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-347">It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.</span></span>  
  
-   <span data-ttu-id="6ca46-348">既定値 (またはパラメーターなし) コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-348">It has a default (or parameterless) constructor.</span></span>  
  
 <span data-ttu-id="6ca46-349">通常、アセンブリまたはアセンブリを作成するコードから分離されたアプリケーションでインスタンス化し、コンパイルされた正規表現を使用するコードが見つかりました。</span><span class="sxs-lookup"><span data-stu-id="6ca46-349">Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.</span></span>  
  
 <span data-ttu-id="6ca46-350"><xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドは、特定の言語のクラス定義のキーワードを使用する代わりにメソッドの呼び出しから .NET Framework アセンブリを生成 (など`class`(C#) または`Class`.`End Class`</span><span class="sxs-lookup"><span data-stu-id="6ca46-350">Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class`</span></span> <span data-ttu-id="6ca46-351">Visual basic の場合) でことに、.NET Framework 開発言語の標準的な属性の構文を使用して、アセンブリに割り当てる属性はできません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-351">in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax.</span></span> <span data-ttu-id="6ca46-352">`attributes`パラメーターは、アセンブリに適用される属性を定義するための代替方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-352">The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly.</span></span> <span data-ttu-id="6ca46-353">アセンブリに適用する属性ごとには、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="6ca46-353">For each attribute that you want to apply to the assembly, do the following:</span></span>  
  
1.  <span data-ttu-id="6ca46-354">配列を作成する<xref:System.Type>を呼び出したい属性のコンス トラクターのパラメーターの型を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-354">Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.</span></span>  
  
2.  <span data-ttu-id="6ca46-355">取得、<xref:System.Type>新しいアセンブリに適用する属性クラスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-355">Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.</span></span>  
  
3.  <span data-ttu-id="6ca46-356">呼び出す、<xref:System.Type.GetConstructor%2A>メソッド、属性の<xref:System.Type>を取得するオブジェクト、<xref:System.Reflection.ConstructorInfo>を呼び出したい属性のコンス トラクターを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-356">Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call.</span></span> <span data-ttu-id="6ca46-357">渡す、<xref:System.Type.GetConstructor%2A>メソッド、配列の<xref:System.Type>コンス トラクターのパラメーターの型を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-357">Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types.</span></span>  
  
4.  <span data-ttu-id="6ca46-358">作成、<xref:System.Object>属性のコンス トラクターに渡すパラメーターを定義する配列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-358">Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.</span></span>  
  
5.  <span data-ttu-id="6ca46-359">インスタンスを作成、<xref:System.Reflection.Emit.CustomAttributeBuilder>コンス トラクターに渡して、オブジェクト、<xref:System.Reflection.ConstructorInfo>オブジェクトは、手順 3. で取得し、<xref:System.Object>手順 4. で作成された配列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-359">Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.</span></span>  
  
 <span data-ttu-id="6ca46-360">これらの配列を渡すことができますし、<xref:System.Reflection.Emit.CustomAttributeBuilder>オブジェクトの代わりに、`attributes`パラメーターを<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-360">You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-361">次の例は、RegexLib.dll をという名前のアセンブリを作成し、適用、<xref:System.Reflection.AssemblyTitleAttribute>属性をします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-361">The following example creates an assembly named RegexLib.dll and applies the <xref:System.Reflection.AssemblyTitleAttribute> attribute to it.</span></span> <span data-ttu-id="6ca46-362">アセンブリには、次の 2 つのコンパイルされた正規表現が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-362">The assembly includes two compiled regular expressions.</span></span> <span data-ttu-id="6ca46-363">最初、 `Utilities.RegularExpressions.DuplicatedString`、同じ 2 つの連続した単語と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-363">The first, `Utilities.RegularExpressions.DuplicatedString`, matches two identical contiguous words.</span></span> <span data-ttu-id="6ca46-364">2 番目、`Utilities.RegularExpressions.EmailAddress`文字列は、正しい形式は電子メール アドレスがあるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-364">The second, `Utilities.RegularExpressions.EmailAddress`, checks whether a string has the correct format to be an email address.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile3.vb#3)]  
  
 <span data-ttu-id="6ca46-365">確認することができます、 <xref:System.Reflection.AssemblyTitleAttribute> ILDasm などリフレクション ユーティリティを使用してそのマニフェストを確認するには属性がアセンブリに適用されました。</span><span class="sxs-lookup"><span data-stu-id="6ca46-365">You can verify that the <xref:System.Reflection.AssemblyTitleAttribute> attribute has been applied to the assembly by examining its manifest with a reflection utility such as ILDasm.</span></span>  
  
 <span data-ttu-id="6ca46-366">重複する単語の文字列をチェックする正規表現は、インスタンス化され、次の例で使用されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-366">The regular expression that checks a string for duplicate words is then instantiated and used by the following example.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 <span data-ttu-id="6ca46-367">この 2 番目の例の正常にコンパイルでは、プロジェクトに追加する (アセンブリは、最初の例で作成された) RegexLib.dll への参照が必要です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-367">Successful compilation of this second example requires a reference to RegexLib.dll (the assembly created by the first example) to be added to the project.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-368">
            <paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-368">The value of the <paramref name="assemblyname" /> parameter's <see cref="P:System.Reflection.AssemblyName.Name" /> property is an empty or null string.</span>
          </span>
          <span data-ttu-id="6ca46-369">または、<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-369">-or-  The regular expression pattern of one or more objects in <paramref name="regexinfos" /> contains invalid syntax.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-370">
            <paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-370">
              <paramref name="assemblyname" /> or <paramref name="regexinfos" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="6ca46-371">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-371">.NET Core only: Creating an assembly of compiled regular expressions is not supported.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-372">
            <para>搭載したシステムで開発している場合 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] またはそのポイント リリースがインストールされている、対象とする [です。INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、使用して、<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />コンパイルされる正規表現のメソッドを格納するアセンブリを作成します。システム上のアセンブリを持つことで、正規表現のいずれかを使用しようとしています [!。INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] では、例外をスローします。この問題を回避する、次のいずれかを実行できます:-を搭載したシステムでコンパイルされた正規表現を含むアセンブリをビルド [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 代わりにそれ以降のバージョンをインストールします。 呼び出し元の代わりに<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />静的を使用してコンパイルされた正規表現をアセンブリから取得、またはインスタンスと<see cref="T:System.Text.RegularExpressions.Regex" />メソッド、<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />インスタンス化するときのオプション、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトまたは正規表現を呼び出すパターン一致メソッドにします。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-372">
              <para>If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions. Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception. To work around this problem, you can do either of the following:  -   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.  -   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname, cli::array &lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ attributes, System::String ^ resourceFile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" />
        <Parameter Name="resourceFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="regexinfos">
          <span data-ttu-id="6ca46-373">コンパイルする正規表現を記述する配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-373">An array that describes the regular expressions to compile.</span>
          </span>
        </param>
        <param name="assemblyname">
          <span data-ttu-id="6ca46-374">アセンブリのファイル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-374">The file name of the assembly.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="6ca46-375">アセンブリに適用する属性を定義する配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-375">An array that defines the attributes to apply to the assembly.</span>
          </span>
        </param>
        <param name="resourceFile">
          <span data-ttu-id="6ca46-376">アセンブリに含める Win32 リソース ファイルの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-376">The name of the Win32 resource file to include in the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-377">指定した 1 つ以上の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトと、指定した 1 つのリソース ファイルをコンパイルして、指定した属性を持つ名前付きアセンブリに保存します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-377">Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex" /> objects and a specified resource file to a named assembly with the specified attributes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-378">The [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class.</span><span class="sxs-lookup"><span data-stu-id="6ca46-378">The [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class.</span></span> <span data-ttu-id="6ca46-379">Typically, the [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method is called from a separate application that generates an assembly of compiled regular expressions.</span><span class="sxs-lookup"><span data-stu-id="6ca46-379">Typically, the [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method is called from a separate application that generates an assembly of compiled regular expressions.</span></span> <span data-ttu-id="6ca46-380">アセンブリに含まれる各正規表現では、次の特徴があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-380">Each regular expression included in the assembly has the following characteristics:</span></span>  
  
-   <span data-ttu-id="6ca46-381">派生します<xref:System.Text.RegularExpressions.Regex>クラスです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-381">It is derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
-   <span data-ttu-id="6ca46-382">定義されている完全修飾名が割り当てられているが、`fullnamespace`と`name`対応するパラメーター<xref:System.Text.RegularExpressions.RegexCompilationInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-382">It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.</span></span>  
  
-   <span data-ttu-id="6ca46-383">既定値 (またはパラメーターなし) コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-383">It has a default (or parameterless) constructor.</span></span>  
  
 <span data-ttu-id="6ca46-384">通常、アセンブリまたはアセンブリを作成するコードから分離されたアプリケーションでインスタンス化し、コンパイルされた正規表現を使用するコードが見つかりました。</span><span class="sxs-lookup"><span data-stu-id="6ca46-384">Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.</span></span>  
  
 <span data-ttu-id="6ca46-385"><xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドは、特定の言語のクラス定義のキーワードを使用する代わりにメソッドの呼び出しから .NET Framework アセンブリを生成 (など`class`(C#) または`Class`.`End Class`</span><span class="sxs-lookup"><span data-stu-id="6ca46-385">Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class`</span></span> <span data-ttu-id="6ca46-386">Visual basic の場合) でことに、.NET Framework 開発言語の標準的な属性の構文を使用して、アセンブリに割り当てる属性はできません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-386">in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax.</span></span> <span data-ttu-id="6ca46-387">`attributes`パラメーターは、アセンブリに適用される属性を定義するための代替方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-387">The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly.</span></span> <span data-ttu-id="6ca46-388">アセンブリに適用する属性ごとには、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="6ca46-388">For each attribute that you want to apply to the assembly, do the following:</span></span>  
  
1.  <span data-ttu-id="6ca46-389">配列を作成する<xref:System.Type>を呼び出したい属性のコンス トラクターのパラメーターの型を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-389">Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.</span></span>  
  
2.  <span data-ttu-id="6ca46-390">取得、<xref:System.Type>新しいアセンブリに適用する属性クラスを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-390">Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.</span></span>  
  
3.  <span data-ttu-id="6ca46-391">呼び出す、<xref:System.Type.GetConstructor%2A>メソッド、属性の<xref:System.Type>を取得するオブジェクト、<xref:System.Reflection.ConstructorInfo>を呼び出したい属性のコンス トラクターを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-391">Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call.</span></span> <span data-ttu-id="6ca46-392">渡す、<xref:System.Type.GetConstructor%2A>メソッド、配列の<xref:System.Type>コンス トラクターのパラメーターの型を表すオブジェクト</span><span class="sxs-lookup"><span data-stu-id="6ca46-392">Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types</span></span>  
  
4.  <span data-ttu-id="6ca46-393">作成、<xref:System.Object>属性のコンス トラクターに渡すパラメーターを定義する配列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-393">Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.</span></span>  
  
5.  <span data-ttu-id="6ca46-394">インスタンスを作成、<xref:System.Reflection.Emit.CustomAttributeBuilder>コンス トラクターに渡して、オブジェクト、<xref:System.Reflection.ConstructorInfo>オブジェクトは、手順 3. で取得し、<xref:System.Object>手順 4. で作成された配列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-394">Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.</span></span>  
  
 <span data-ttu-id="6ca46-395">You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method.</span><span class="sxs-lookup"><span data-stu-id="6ca46-395">You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-396">
            <paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-396">The value of the <paramref name="assemblyname" /> parameter's <see cref="P:System.Reflection.AssemblyName.Name" /> property is an empty or null string.</span>
          </span>
          <span data-ttu-id="6ca46-397">または、<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-397">-or-  The regular expression pattern of one or more objects in <paramref name="regexinfos" /> contains invalid syntax.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-398">
            <paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-398">
              <paramref name="assemblyname" /> or <paramref name="regexinfos" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="6ca46-399">
            <paramref name="resourceFile" /> パラメーターは無効な Win32 リソース ファイルを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-399">The <paramref name="resourceFile" /> parameter designates an invalid Win32 resource file.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="6ca46-400">
            <paramref name="resourceFile" /> パラメーターで指定されているファイルが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-400">The file designated by the <paramref name="resourceFile" /> parameter cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="6ca46-401">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-401">.NET Core only: Creating an assembly of compiled regular expressions is not supported.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-402">
            <para>搭載したシステムで開発している場合 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] またはそのポイント リリースがインストールされている、対象とする [です。INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、使用して、<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />コンパイルされる正規表現のメソッドを格納するアセンブリを作成します。システム上のアセンブリを持つことで、正規表現のいずれかを使用しようとしています [!。INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] では、例外をスローします。この問題を回避する、次のいずれかを実行できます:-を搭載したシステムでコンパイルされた正規表現を含むアセンブリをビルド [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 代わりにそれ以降のバージョンをインストールします。 呼び出し元の代わりに<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />静的を使用してコンパイルされた正規表現をアセンブリから取得、またはインスタンスと<see cref="T:System.Text.RegularExpressions.Regex" />メソッド、<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />インスタンス化するときのオプション、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトまたは正規表現を呼び出すパターン一致メソッドにします。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-402">
              <para>If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions. Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception. To work around this problem, you can do either of the following:  -   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.  -   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="public static string Escape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Escape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Escape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Escape(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="6ca46-403">変換対象のテキストを含んでいる入力文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-403">The input string that contains the text to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-404">最小限の文字セット (\\、\*、+、?、|、{、[、(、)、^、$、.、#、および空白) をエスケープ コードに置き換えることにより、このような文字をエスケープします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-404">Escapes a minimal set of characters (\\, \*, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes.</span>
          </span>
          <span data-ttu-id="6ca46-405">これにより、正規表現エンジンではこのような文字がメタ文字ではなくリテラルとして解釈されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-405">This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-406">メタ文字がエスケープされた形式に変換された文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-406">A string of characters with metacharacters converted to their escaped form.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-407"><xref:System.Text.RegularExpressions.Regex.Escape%2A> 文字列は、正規表現エンジンは、あるメタ文字を文字リテラルとして含まれる、解釈されるように変換します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-407"><xref:System.Text.RegularExpressions.Regex.Escape%2A> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals.</span></span> <span data-ttu-id="6ca46-408">たとえば、直線開きかっこ ([および]) テキストから区切られた、コメントを抽出するように設計された正規表現を検討してください。</span><span class="sxs-lookup"><span data-stu-id="6ca46-408">For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets ([ and ]) from text.</span></span> <span data-ttu-id="6ca46-409">次の例では、正規表現"[(.\*?)]"は、文字クラスとして解釈されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-409">In the following example, the regular expression "[(.\*?)]" is interpreted as a character class.</span></span> <span data-ttu-id="6ca46-410">入力テキストに埋め込まれているコメントを一致するのではなく、正規表現には各始めまたは終わりかっこ、ピリオド、アスタリスク、または疑問符 (?) と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-410">Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#1)]  
  
 <span data-ttu-id="6ca46-411">ただし、角かっこがエスケープに渡すことによって、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッド、正規表現は、入力文字列に埋め込まれているコメントを一致に成功します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-411">However, if the opening bracket is escaped by passing it to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method, the regular expression succeeds in matching comments that are embedded in the input string.</span></span> <span data-ttu-id="6ca46-412">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-412">The following example illustrates this.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#2)]  
  
 <span data-ttu-id="6ca46-413">前に円記号で静的なテキストを使用して定義されている正規表現であるメタ文字としてではなくリテラル文字として解釈される文字をエスケープすることができます (\\) も呼び出すことによって、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-413">In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (\\) as well as by calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method.</span></span> <span data-ttu-id="6ca46-414">デザイン時に認識されていない文字を使用して動的に定義されている正規表現で呼び出して、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドは、正規表現エンジンが個々 の文字であるメタ文字ではなくリテラルとして解釈されるように、特に重要です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-414">In a regular expression that is defined dynamically using characters that are not known at design time, calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ca46-415">正規表現パターンには、番号記号 (#) またはリテラルの空白文字が含まれている場合、エスケープする必要がで入力テキストが解析された場合、<xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType>オプションを有効にします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-415">If a regular expression pattern includes either the number sign (#) or literal white-space characters, they must be escaped if input text is parsed with the <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> option enabled.</span></span>  
  
 <span data-ttu-id="6ca46-416">中に、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドは、直線をエスケープ角かっこ ([) を開き、中かっこ ({}) 文字を開いて、それをエスケープしませんそれに対応する文字を閉じる (]、})。</span><span class="sxs-lookup"><span data-stu-id="6ca46-416">While the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and }).</span></span> <span data-ttu-id="6ca46-417">ほとんどの場合、これらをエスケープする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-417">In most cases, escaping these is not necessary.</span></span> <span data-ttu-id="6ca46-418">右かっこまたは中かっこは、前にない場合、対応する開始文字によって、正規表現エンジンは、リテラルとして解釈されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-418">If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally.</span></span> <span data-ttu-id="6ca46-419">始め角かっこまたは中かっこは、メタ文字として解釈されますが、正規表現エンジンは最初に対応する終了メタ文字としての文字を解釈します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-419">If an opening braket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter.</span></span> <span data-ttu-id="6ca46-420">円記号を明示的に付けることによって右かっこまたは中かっこをエスケープする必要がありますが目的の動作でない場合 (\\) 文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-420">If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (\\) character.</span></span> <span data-ttu-id="6ca46-421">具体的な例」のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="6ca46-421">For an illustration, see the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-422">次の例は、コメントをテキストから抽出します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-422">The following example extracts comments from text.</span></span> <span data-ttu-id="6ca46-423">これは、コメントが開始コメント記号と、ユーザーが選択されている終了コメント記号で区切られていると仮定します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-423">It assumes that the comments are delimited by a begin comment symbol and an end comment symbol that is selected by the user.</span></span> <span data-ttu-id="6ca46-424">渡されるコメント記号は、どおりに解釈するのには、あるため、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドにあるメタ文字として解釈することはできません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-424">Because the comment symbols are to be interpreted literally, they are passed to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method to ensure that they cannot be misinterpreted as metacharacters.</span></span> <span data-ttu-id="6ca46-425">さらに、例では、明示的にセルの内容、ユーザーが入力した終了コメント記号が右かっこ (]) または中かっこ (})。</span><span class="sxs-lookup"><span data-stu-id="6ca46-425">In addition, the example explicitly checks whether the end comment symbol entered by the user is a closing bracket (]) or brace (}).</span></span> <span data-ttu-id="6ca46-426">場合は、円記号 (\\) の先頭に追加の角かっこまたは中かっこが解釈できるようにします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-426">If it is, a backslash character (\\) is prepended to the bracket or brace so that it is interpreted literally.</span></span> <span data-ttu-id="6ca46-427">例を使用してもなお、<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>の開始と終了のコメント記号と共にコメントではなく、コメントのみを表示するコレクション。</span><span class="sxs-lookup"><span data-stu-id="6ca46-427">Note that the example also uses the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> collection to display the comment only, rather than the comment together with its opening and closing comment symbols.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-428">
            <paramref name="str" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-428">
              <paramref name="str" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="factory">
      <MemberSignature Language="C#" Value="protected internal System.Text.RegularExpressions.RegexRunnerFactory factory;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Text.RegularExpressions.RegexRunnerFactory factory" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.factory" />
      <MemberSignature Language="VB.NET" Value="Protected Friend factory As RegexRunnerFactory " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Text::RegularExpressions::RegexRunnerFactory ^ factory;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexRunnerFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-429">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-429">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupNames">
      <MemberSignature Language="C#" Value="public string[] GetGroupNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetGroupNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGroupNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetGroupNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-430">正規表現で使用されるキャプチャ グループ名の配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-430">Returns an array of capturing group names for the regular expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-431">グループ名の文字列配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-431">A string array of group names.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-432">グループ名のコレクションには、式のキャプチャ グループの名前を使用する文字列のセットが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-432">The collection of group names contains the set of strings used to name capturing groups in the expression.</span></span> <span data-ttu-id="6ca46-433">キャプチャ グループは明示的に名を指定しない場合でもは自動的に割り当てられている数値名前 (「0」、「1」、「2」、「3」、およびなど)。</span><span class="sxs-lookup"><span data-stu-id="6ca46-433">Even if capturing groups are not explicitly named, they are automatically assigned numerical names ("0", "1", "2", "3", and so on).</span></span> <span data-ttu-id="6ca46-434">「0」には、グループを表す正規表現パターンと一致するすべてのテキストがという名前です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-434">The "0" named group represents all text matched by the regular expression pattern.</span></span> <span data-ttu-id="6ca46-435">番号付きグループに明示的に名前付きグループの前に、コレクション内と、名前付きグループは正規表現パターンで定義されている順序で表示されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-435">Numbered groups precede explicitly named groups in the collection, and named groups appear in the order in which they are defined in the regular expression pattern.</span></span>  
  
 <span data-ttu-id="6ca46-436">使用することができます、<xref:System.Array.Length%2A>正規表現内のグループの数を決定するには、このメソッドによって返される配列のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-436">You can use the <xref:System.Array.Length%2A> property on the array returned by this method to determine the number of groups in a regular expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-437">次の例は、汎用的な定義`ShowMatches`を正規表現のグループと、一致したテキストの名前を表示するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-437">The following example defines a general-purpose `ShowMatches` method that displays the names of regular expression groups and their matched text.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/cs/getgroupnames1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/vb/getgroupnames1.vb#1)]  
  
 <span data-ttu-id="6ca46-438">この場合、正規表現パターンで`\b(?<FirstWord>\w+)\s?((\w+)\s)*(?<LastWord>\w+)?(?<Punctuation>\p{Po})`は単純な文を解析し、その最初の単語、最後の単語、および終了の区切り記号を識別するためのものです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-438">In this case, the regular expression pattern `\b(?<FirstWord>\w+)\s?((\w+)\s)*(?<LastWord>\w+)?(?<Punctuation>\p{Po})` is intended to parse a simple sentence, and to identify its first word, last word, and ending punctuation mark.</span></span> <span data-ttu-id="6ca46-439">次の表は、正規表現パターンを解釈する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-439">The following table shows how the regular expression pattern is interpreted:</span></span>  
  
|<span data-ttu-id="6ca46-440">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-440">Pattern</span></span>|<span data-ttu-id="6ca46-441">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-441">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="6ca46-442">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-442">Begin the match at a word boundary.</span></span>|  
|`(?<FirstWord>\w+)`|<span data-ttu-id="6ca46-443">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-443">Match one or more word characters.</span></span> <span data-ttu-id="6ca46-444">これは、`FirstWord`という名前のグループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-444">This is the `FirstWord` named group.</span></span>|  
|<span data-ttu-id="6ca46-445">\s しますか。</span><span class="sxs-lookup"><span data-stu-id="6ca46-445">\s?</span></span>|<span data-ttu-id="6ca46-446">0 個または 1 個の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-446">Match zero or one white-space characters.</span></span>|  
|<span data-ttu-id="6ca46-447">(\w+)</span><span class="sxs-lookup"><span data-stu-id="6ca46-447">(\w+)</span></span>|<span data-ttu-id="6ca46-448">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-448">Match one or more word characters.</span></span> <span data-ttu-id="6ca46-449">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-449">This is the second capturing group.</span></span>|  
|<span data-ttu-id="6ca46-450">\s</span><span class="sxs-lookup"><span data-stu-id="6ca46-450">\s</span></span>|<span data-ttu-id="6ca46-451">空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-451">Match a white-space character.</span></span>|  
|<span data-ttu-id="6ca46-452">((\w+)\s)\*</span><span class="sxs-lookup"><span data-stu-id="6ca46-452">((\w+)\s)\*</span></span>|<span data-ttu-id="6ca46-453">空白文字に続く 1 つ以上の単語文字の 0 個以上の出現と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-453">Match zero or more occurrences of one or more word characters followed by a white space.</span></span> <span data-ttu-id="6ca46-454">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-454">This is the first capturing group.</span></span>|  
|<span data-ttu-id="6ca46-455">(?\<LastWord > \w+)?</span><span class="sxs-lookup"><span data-stu-id="6ca46-455">(?\<LastWord>\w+)?</span></span>|<span data-ttu-id="6ca46-456">1 つ以上の単語文字の 0 回または 1 回を一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-456">Match zero or one occurrence of one or more word characters.</span></span> <span data-ttu-id="6ca46-457">これは、`LastWord`という名前のグループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-457">This is the `LastWord` named group.</span></span>|  
|<span data-ttu-id="6ca46-458">(?\<句読点 > \p{Po})</span><span class="sxs-lookup"><span data-stu-id="6ca46-458">(?\<Punctuation>\p{Po})</span></span>|<span data-ttu-id="6ca46-459">Unicode カテゴリは、区切り記号文字に一致させるその他のです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-459">Match a character whose Unicode category is Punctuation, Other.</span></span> <span data-ttu-id="6ca46-460">これは、`Punctuation`という名前のグループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-460">This is the `Punctuation` named group.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetGroupNumbers">
      <MemberSignature Language="C#" Value="public int[] GetGroupNumbers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] GetGroupNumbers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGroupNumbers () As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ GetGroupNumbers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-461">配列内のグループ名に対応したキャプチャ グループ番号の配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-461">Returns an array of capturing group numbers that correspond to group names in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-462">グループ番号の整数配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-462">An integer array of group numbers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-463">名前のないと、名前付きキャプチャ グループは、番号でアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-463">Both unnamed and named capturing groups can be accessed by number.</span></span> <span data-ttu-id="6ca46-464">名前のないグループには、左から右 1 から始まるの番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-464">Unnamed groups are numbered from left to right starting with 1.</span></span> <span data-ttu-id="6ca46-465">(インデックス 0 (ゼロ) でのキャプチャ グループ全体を表します一致します。)名前付きグループは左から右から始まる数値を 1 だけ大きい数値を番号数よりも、名前のないキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-465">(The capturing group in index 0 (zero) represents the match as a whole.)  Named groups are then numbered from left to right starting with a number that is one greater than the number of unnamed capturing groups.</span></span>  
  
 <span data-ttu-id="6ca46-466">文字列名によっての代わりに、番号でグループを参照すると、高速アクセスを提供できます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-466">Referencing a group by its number instead of by string name can provide faster access.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-467">次の例は、正規表現を定義`\b((?<word>\w+)\s*)+(?<end>[.?!])`文に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-467">The following example defines a regular expression, `\b((?<word>\w+)\s*)+(?<end>[.?!])`, that matches a sentence.</span></span> <span data-ttu-id="6ca46-468">正規表現には、次の 3 つのキャプチャ グループが含まれています個々 の単語に続くことがあります。 空白文字およびをキャプチャする名前のないグループ。という名前のグループ`word`;、センテンス内の個々 の単語をキャプチャして、という名前のグループ`end`文の終了の区切り文字をキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-468">The regular expression includes three capturing groups: an unnamed group that captures an individual word along with a space character that may follow it; a group named `word` that captures the individual words in the sentence; and a group named `end` that captures the punctuation that ends the sentence.</span></span> <span data-ttu-id="6ca46-469">呼び出しの例、<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A>すべてキャプチャするための番号を取得するメソッドをグループ化し、そのキャプチャされた文字列を表示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-469">The example calls the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A> method to get the numbers of all capturing groups, and then displays their captured string.</span></span> <span data-ttu-id="6ca46-470">さらに、<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A>メソッドは、特定の番号付きグループが名前付きグループに対応するかどうかを示すために使用します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-470">In addition, the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method is used to indicate whether a particular numbered group corresponds to a named group.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNumbers#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/cs/getgroupnumbers1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNumbers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/vb/getgroupnumbers1.vb#1)]  
  
 <span data-ttu-id="6ca46-471">この正規表現パターンの解釈を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-471">The regular expression pattern is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-472">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-472">Pattern</span></span>|<span data-ttu-id="6ca46-473">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-473">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="6ca46-474">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-474">Begin the match at a word boundary.</span></span>|  
|`(?<word>\w+)`|<span data-ttu-id="6ca46-475">1 つ以上の単語文字に一致し、という名前のグループに一致する文字列を割り当てます`word`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-475">Match one or more word characters and assign the matched strings to a group named `word`.</span></span>|  
|`\s*`|<span data-ttu-id="6ca46-476">0 個以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-476">Match zero or more white-space characters.</span></span>|  
|`((?<word>\w+)\s*)`|<span data-ttu-id="6ca46-477">割り当てる、`word`続くすべてのキャプチャ グループは、最初のキャプチャ グループに空白文字をキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-477">Assign the `word` captured group followed by any captured white-space characters to the first captured group.</span></span>|  
|`((?<word>\w+)\s*)+`|<span data-ttu-id="6ca46-478">1 つ以上の単語文字が続く可能な任意の空白文字 1 つまたは複数の時刻のパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-478">Match the pattern of one or more word characters followed by any white-space characters one or more times.</span></span>|  
|`(?<end>[.?!])`|<span data-ttu-id="6ca46-479">ピリオド、疑問符、または感嘆符に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-479">Match a period, question mark, or exclamation point.</span></span> <span data-ttu-id="6ca46-480">一致した文字を割り当てて、`end`キャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-480">Assign the matched character to the `end` capturing group.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
      </Docs>
    </Member>
    <Member MemberName="GroupNameFromNumber">
      <MemberSignature Language="C#" Value="public string GroupNameFromNumber (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GroupNameFromNumber(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupNameFromNumber (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GroupNameFromNumber(int i);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">
          <span data-ttu-id="6ca46-481">対応するグループ名に変換するグループ番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-481">The group number to convert to the corresponding group name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-482">指定したグループ番号に対応するグループ名を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-482">Gets the group name that corresponds to the specified group number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-483">指定したグループ番号に関連付けられたグループ名を含んでいる文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-483">A string that contains the group name associated with the specified group number.</span>
          </span>
          <span data-ttu-id="6ca46-484">
            <paramref name="i" /> に対応するグループ名がない場合、このメソッドは <see cref="F:System.String.Empty" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-484">If there is no group name that corresponds to <paramref name="i" />, the method returns <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-485">正規表現パターンには、名前付きまたは番号付きキャプチャ グループ、パターン一致内の部分式を表すを含めることがあります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-485">A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match.</span></span> <span data-ttu-id="6ca46-486">番号付きグループは、構文で区切られます (*subexpression*)、正規表現内での順番に基づいた数値が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-486">Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression.</span></span> <span data-ttu-id="6ca46-487">名前付きグループは、構文で区切られます (?`<`*name*`>`*subexpression*) or (?'*名前*'*subexpression*) ここで、*名前*部分を識別する名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-487">Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified.</span></span> <span data-ttu-id="6ca46-488">(詳しくは、「[正規表現でのグループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」をご覧ください)。<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A>メソッドは、名前付きグループと正規表現内のそれらの序数位置によって、番号付きグループの両方を識別します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-488">(For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression.</span></span> <span data-ttu-id="6ca46-489">序数位置 0 は、常に、正規表現全体を表します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-489">Ordinal position zero always represents the entire regular expression.</span></span> <span data-ttu-id="6ca46-490">すべての番号付きグループは正規表現パターンでの実際の位置に関係なく、名前付きグループの前にカウントされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-490">All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.</span></span>  
  
 <span data-ttu-id="6ca46-491">場合`i`数は、メソッドは、名前付きグループのグループの名前を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-491">If `i` is the number of a named group, the method returns the name of the group.</span></span> <span data-ttu-id="6ca46-492">場合`i`数は、名前のないグループのメソッドは、数値の文字列形式を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-492">If `i` is the number of an unnamed group, the method returns the string representation of the number.</span></span> <span data-ttu-id="6ca46-493">たとえば場合、 `i` 1 に設定されて、メソッドが「1」を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-493">For example, if `i` is 1, the method returns "1".</span></span> <span data-ttu-id="6ca46-494">場合`i`はキャプチャ グループの数を返します<xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-494">If `i` is not the number of a capturing group, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6ca46-495">このメソッドによって返される値を取得し、使用するパターン一致が見つかった場合、<xref:System.Text.RegularExpressions.Group>からキャプチャされたグループを表すオブジェクト、<xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-495">If a pattern match is found, the value returned by this method can then be used to retrieve the <xref:System.Text.RegularExpressions.Group> object that represents the captured group from the <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6ca46-496"><xref:System.Text.RegularExpressions.GroupCollection>によってオブジェクトが返される、<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-496">The <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-497">次の例では、米国の都市名、状態の名前、および郵便番号を含む住所行に一致する正規表現パターンを定義します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-497">The following example defines a regular expression pattern that matches an address line containing a U.S. city name, state name, and zip code.</span></span> <span data-ttu-id="6ca46-498">この例では、<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A>キャプチャ グループの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-498">The example uses the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method to retrieve the names of capturing groups.</span></span> <span data-ttu-id="6ca46-499">これらの名前を使用して、一致するものを対応するキャプチャされたグループを取得します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-499">It then uses these names to retrieve the corresponding captured groups for matches.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GroupNameFromNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/cs/groupnamefromnumberex.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GroupNameFromNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/vb/groupnamefromnumberex.vb#1)]  
  
 <span data-ttu-id="6ca46-500">正規表現パターンは、次の式によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-500">The regular expression pattern is defined by the following expression:</span></span>  
  
 `(?<city>[A-Za-z\s]+), (?<state>[A-Za-z]{2}) (?<zip>\d{5}(-\d{4})?)`  
  
 <span data-ttu-id="6ca46-501">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-501">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="6ca46-502">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-502">Pattern</span></span>|<span data-ttu-id="6ca46-503">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-503">Description</span></span>|  
|-------------|-----------------|  
|`(?<city>[A-Za-z\s]+)`|<span data-ttu-id="6ca46-504">1 つ以上の英字または空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-504">Match one or more alphabetic or white-space character.</span></span> <span data-ttu-id="6ca46-505">このキャプチャされたグループの名前を割り当てる`city`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-505">Assign this captured group the name `city`.</span></span>|  
|`,`|<span data-ttu-id="6ca46-506">コンマ (,) が続く空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-506">Match a comma (,) followed by a white-space character.</span></span>|  
|`(?<state>[A-Za-z]{2})`|<span data-ttu-id="6ca46-507">2 つのアルファベット文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-507">Match two alphabetic characters.</span></span> <span data-ttu-id="6ca46-508">このキャプチャされたグループの名前を割り当てる`state`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-508">Assign this captured group the name `state`.</span></span> <span data-ttu-id="6ca46-509">このグループは、空白文字の後に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-509">This group should be followed by a white-space character.</span></span>|  
|`(?<zip>\d{5}(-\d{4})?)`|<span data-ttu-id="6ca46-510">ハイフン、および 4 桁の数字の 0 個または 1 回続けて 5 桁の数字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-510">Match five numeric digits followed by either zero or one occurrence of a hyphen followed by four digits.</span></span> <span data-ttu-id="6ca46-511">このキャプチャされたグループの名前を割り当てる`zip`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-511">Assign this captured group the name `zip`.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
      </Docs>
    </Member>
    <Member MemberName="GroupNumberFromName">
      <MemberSignature Language="C#" Value="public int GroupNumberFromName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GroupNumberFromName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupNumberFromName (name As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GroupNumberFromName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6ca46-512">対応するグループ番号に変換するグループ名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-512">The group name to convert to the corresponding group number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-513">指定したグループ名に対応するグループ番号を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-513">Returns the group number that corresponds to the specified group name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-514">指定したグループ名に対応するグループ番号。<paramref name="name" /> が有効なグループ名でない場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-514">The group number that corresponds to the specified group name, or -1 if <paramref name="name" /> is not a valid group name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-515">正規表現パターンには、名前付きまたは番号付きキャプチャ グループ、パターン一致内の部分式を表すを含めることがあります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-515">A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match.</span></span> <span data-ttu-id="6ca46-516">番号付きグループは、構文で区切られます (*subexpression*)、正規表現内での順番に基づいた数値が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-516">Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression.</span></span> <span data-ttu-id="6ca46-517">名前付きグループは、構文で区切られます (?`<`*name*`>`*subexpression*) or (?'*名前*'*subexpression*) ここで、*名前*部分を識別する名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-517">Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified.</span></span> <span data-ttu-id="6ca46-518">(詳しくは、「[正規表現でのグループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」をご覧ください)。<xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A>メソッドは、名前付きグループと正規表現内のそれらの序数位置によって、番号付きグループの両方を識別します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-518">(For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression.</span></span> <span data-ttu-id="6ca46-519">序数位置 0 は、常に、正規表現全体を表します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-519">Ordinal position zero always represents the entire regular expression.</span></span> <span data-ttu-id="6ca46-520">すべての番号付きグループは正規表現パターンでの実際の位置に関係なく、名前付きグループの前にカウントされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-520">All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.</span></span>  
  
 <span data-ttu-id="6ca46-521">場合`name`正規表現パターンをメソッドを返します。 この数値に存在するグループ番号の文字列表現です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-521">If `name` is the string representation of a group number that is present in the regular expression pattern, the method returns that number.</span></span> <span data-ttu-id="6ca46-522">場合`name`名前に対応する、メソッドは、その対応する番号を返します、正規表現パターンに存在するグループをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-522">If `name` corresponds to a named capturing group that is present in the regular expression pattern, the method returns its corresponding number.</span></span> <span data-ttu-id="6ca46-523">比較`name`グループ名は大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-523">The comparison of `name` with the group name is case-sensitive.</span></span> <span data-ttu-id="6ca46-524">場合`name`対応しない、キャプチャ グループの名前に、またはメソッドのキャプチャ グループの数の文字列形式を-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-524">If `name` does not correspond to the name of a capturing group or to the string representation of the number of a capturing group, the method returns -1.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-525">
            <paramref name="name" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-525">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
      </Docs>
    </Member>
    <Member MemberName="InfiniteMatchTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteMatchTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteMatchTimeout;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-526">パターン一致の操作がタイムアウトしないことを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-526">Specifies that a pattern-matching operation should not time out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-527"><xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>クラス コンス トラクターおよび静的な一致するメソッドの使用の数、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>パターン一致を検索する試行がタイムアウトしないでことを示す定数です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-527">The <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> class constructor and a number of static matching methods use the <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant to indicate that the attempt to find a pattern match should not time out.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="6ca46-528">正規表現エンジンのタイムアウト値を設定する<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>正規表現を正規表現パターンにほぼ一致するテキストを処理するときの応答を停止する表示過度なバックトラッ キングに依存している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-528">Setting the regular expression engine's time-out value to <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-529">タイムアウトを無効にした場合、正規表現が過度なバックトラッ キングに依存しないし、正規表現パターンにほぼ一致するテキストを処理することを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-529">If you disable time-outs, you should ensure that your regular expression does not rely on excessive backtracking and that it handles text that nearly matches the regular expression pattern.</span></span>  
>   
>  <span data-ttu-id="6ca46-530">バックトラッ キングを処理の詳細については、次を参照してください。[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-530">For more information about handling backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="6ca46-531"><xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>の値として定数を指定することができます、`matchTimeout`は次のメンバーの引数。</span><span class="sxs-lookup"><span data-stu-id="6ca46-531">The <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant can be supplied as the value of the `matchTimeout` argument of the following members:</span></span>  
  
-   <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="InitializeReferences">
      <MemberSignature Language="C#" Value="protected void InitializeReferences ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeReferences() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.InitializeReferences" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializeReferences ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializeReferences();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-532">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-532">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="6ca46-533">参照は既に初期化されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-533">References have already been initialized.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="internalMatchTimeout">
      <MemberSignature Language="C#" Value="protected internal TimeSpan internalMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.TimeSpan internalMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.internalMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Protected Friend internalMatchTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="protected public: TimeSpan internalMatchTimeout;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OptionalField(VersionAdded=2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-534">操作がタイムアウトになる前に、パターン一致操作で経過できる最大時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-534">The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsMatch">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-535">正規表現と一致する対象が入力文字列内で見つかったかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-535">Indicates whether the regular expression finds a match in the input string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (input As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsMatch(System::String ^ input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-536">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-536">The string to search for a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-537">
            <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-537">Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in a specified input string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-538">正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-538">
              <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-539"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A>メソッドは通常、文字列を検証するまたは使用する後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-539">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="6ca46-540">1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、<xref:System.Text.RegularExpressions.Regex.Match%2A>または<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-540">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="6ca46-541"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-541">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-542">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-542">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-543">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-543">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-544">次の例では、使用、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29>メソッド (string) が有効な部品番号であるかどうかを判別します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-544">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="6ca46-545">正規表現では、部品番号の 3 つの組のハイフンで区切られた文字で構成されている特定の形式であると仮定します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-545">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="6ca46-546">最初のセットは、次の 4 つの文字が含まれている必要があります、2 つの数値文字の英数字 1 文字後に続く英数字 1 文字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-546">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="6ca46-547">次の 3 つの文字で構成され、2 番目のセットは、数値でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-547">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="6ca46-548">次の 4 つの文字で構成され、3 番目のセットには、3 つの数値文字が英数字文字が続く必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-548">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch2.vb#2)]  
  
 <span data-ttu-id="6ca46-549">正規表現パターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-549">The regular expression pattern is:</span></span>  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 <span data-ttu-id="6ca46-550">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-550">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="6ca46-551">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-551">Pattern</span></span>|<span data-ttu-id="6ca46-552">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-552">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="6ca46-553">行の先頭から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-553">Begin the match at the beginning of the line.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="6ca46-554">単一のアルファベット文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-554">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="6ca46-555">2 つの数値文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-555">Match two numeric characters.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="6ca46-556">単一のアルファベット文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-556">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`-`|<span data-ttu-id="6ca46-557">ハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-557">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="6ca46-558">3 つの数値文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-558">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="6ca46-559">次の 3 つの数値文字が後にハイフンを検索し、このパターンの 2 つの出現と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-559">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="6ca46-560">単一のアルファベット文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-560">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`$`|<span data-ttu-id="6ca46-561">行の末尾で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-561">End the match at the end of the line.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-562">
            <paramref name="input" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-562">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-563">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-563">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-564">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-564">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (input As String, startat As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsMatch(System::String ^ input, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-565">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-565">The string to search for a match.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="6ca46-566">検索を開始する文字の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-566">The character position at which to start the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-567">入力文字列内の指定した位置から検索を開始して、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-567">Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in the specified input string, beginning at the specified starting position in the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-568">正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-568">
              <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-569"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A>メソッドは通常、文字列を検証するまたは使用する後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-569">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="6ca46-570">1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、<xref:System.Text.RegularExpressions.Regex.Match%2A>または<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-570">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="6ca46-571"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-571">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-572">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-572">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-573">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-573">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-574">次の例では、使用、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29>メソッド (string) が有効な部品番号であるかどうかを判別します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-574">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="6ca46-575">文字列にコロン (:) 文字に続く部品番号を検索します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-575">It searches for a part number that follows a colon (:) character in a string.</span></span> <span data-ttu-id="6ca46-576"><xref:System.String.IndexOf%28System.Char%29>に渡されのコロン文字の位置を決定するメソッドが使用される、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-576">The <xref:System.String.IndexOf%28System.Char%29> method is used to determine the position of the colon character, which is then passed to the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="6ca46-577">正規表現では、部品番号の 3 つの組のハイフンで区切られた文字で構成されている特定の形式であると仮定します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-577">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="6ca46-578">最初のセットは、次の 4 つの文字が含まれている必要があります、2 つの数値文字の英数字 1 文字後に続く英数字 1 文字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-578">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="6ca46-579">次の 3 つの文字で構成され、2 番目のセットは、数値でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-579">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="6ca46-580">次の 4 つの文字で構成され、3 番目のセットには、3 つの数値文字が英数字文字が続く必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-580">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch3.vb#3)]  
  
 <span data-ttu-id="6ca46-581">正規表現パターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-581">The regular expression pattern is:</span></span>  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 <span data-ttu-id="6ca46-582">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-582">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="6ca46-583">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-583">Pattern</span></span>|<span data-ttu-id="6ca46-584">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-584">Description</span></span>|  
|-------------|-----------------|  
|`[a-zA-Z0-9]`|<span data-ttu-id="6ca46-585">単一のアルファベット文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-585">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="6ca46-586">2 つの数値文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-586">Match two numeric characters.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="6ca46-587">単一のアルファベット文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-587">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`-`|<span data-ttu-id="6ca46-588">ハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-588">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="6ca46-589">3 つの数値文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-589">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="6ca46-590">次の 3 つの数値文字が後にハイフンを検索し、このパターンの 2 つの出現と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-590">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="6ca46-591">単一のアルファベット文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-591">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`$`|<span data-ttu-id="6ca46-592">行の末尾で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-592">End the match at the end of the line.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-593">
            <paramref name="input" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-593">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-594">
            <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-594">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-595">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-595">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-596">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-596">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-597">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-597">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-598">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-598">The regular expression pattern to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-599">指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-599">Indicates whether the specified regular expression finds a match in the specified input string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-600">正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-600">
              <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-601"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A>メソッドは通常、文字列を検証するまたは使用する後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-601">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="6ca46-602">1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、<xref:System.Text.RegularExpressions.Regex.Match%2A>または<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-602">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="6ca46-603">静的な<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッドを構築するのには、<xref:System.Text.RegularExpressions.Regex>で指定された正規表現パターンを持つオブジェクト`pattern`を呼び出すと、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29>インスタンス メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-603">The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method.</span></span> <span data-ttu-id="6ca46-604">この正規表現パターンは、迅速な取得のため、正規表現エンジンによってキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-604">This regular expression pattern is cached for rapid retrieval by the regular expression engine.</span></span>  
  
 <span data-ttu-id="6ca46-605">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-605">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-606">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-606">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-607"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-607">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="6ca46-608">アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-608">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-609">次の例では、使用、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッド (string) が有効な部品番号であるかどうかを判別します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-609">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="6ca46-610">正規表現では、部品番号の 3 つの組のハイフンで区切られた文字で構成されている特定の形式であると仮定します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-610">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="6ca46-611">最初のセットは、次の 4 つの文字が含まれている必要があります、2 つの数値文字の英数字 1 文字後に続く英数字 1 文字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-611">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="6ca46-612">次の 3 つの文字で構成され、2 番目のセットは、数値でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-612">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="6ca46-613">次の 4 つの文字で構成され、3 番目のセットには、3 つの数値文字が英数字文字が続く必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-613">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch1.vb#1)]  
  
 <span data-ttu-id="6ca46-614">正規表現パターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-614">The regular expression pattern is:</span></span>  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 <span data-ttu-id="6ca46-615">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-615">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="6ca46-616">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-616">Pattern</span></span>|<span data-ttu-id="6ca46-617">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-617">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="6ca46-618">行の先頭から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-618">Begin the match at the beginning of the line.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="6ca46-619">単一のアルファベット文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-619">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="6ca46-620">2 つの数値文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-620">Match two numeric characters.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="6ca46-621">単一のアルファベット文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-621">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`-`|<span data-ttu-id="6ca46-622">ハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-622">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="6ca46-623">3 つの数値文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-623">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="6ca46-624">次の 3 つの数値文字が後にハイフンを検索し、このパターンの 2 つの出現と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-624">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="6ca46-625">単一のアルファベット文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-625">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`$`|<span data-ttu-id="6ca46-626">行の末尾で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-626">End the match at the end of the line.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-627">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-627">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-628">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-628">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-629">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-629">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-630">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-630">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-631">
            <para>このメソッドをメソッドは、アプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。パターン一致を確認するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-631">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for verifying a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String, options As RegexOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-632">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-632">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-633">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-633">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-634">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-634">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-635">指定した一致オプションを使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-635">Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-636">正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-636">
              <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-637"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A>メソッドは通常、文字列を検証するまたは使用する後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-637">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="6ca46-638">1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、<xref:System.Text.RegularExpressions.Regex.Match%2A>または<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-638">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="6ca46-639">静的<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドを構築するのには、<xref:System.Text.RegularExpressions.Regex>で指定された正規表現パターンを持つオブジェクト`pattern`で指定された正規表現のオプションと`options`を呼び出すと、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29>インスタンス メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-639">The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method.</span></span> <span data-ttu-id="6ca46-640">この正規表現パターンは、迅速な取得のため、正規表現エンジンによってキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-640">This regular expression pattern is cached for rapid retrieval by the regular expression engine.</span></span>  
  
 <span data-ttu-id="6ca46-641">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-641">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-642">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-642">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-643"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-643">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="6ca46-644">アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-644">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-645">次の例では、使用、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッド (string) が有効な部品番号であるかどうかを判別します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-645">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="6ca46-646">正規表現では、部品番号の 3 つの組のハイフンで区切られた文字で構成されている特定の形式であると仮定します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-646">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="6ca46-647">最初のセットは、次の 4 つの文字が含まれている必要があります、2 つの数値文字の英数字 1 文字後に続く英数字 1 文字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-647">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="6ca46-648">次の 3 つの文字で構成され、2 番目のセットは、数値でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-648">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="6ca46-649">次の 4 つの文字で構成され、3 番目のセットには、3 つの数値文字が英数字文字が続く必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-649">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch4.vb#4)]  
  
 <span data-ttu-id="6ca46-650">正規表現パターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-650">The regular expression pattern is:</span></span>  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 <span data-ttu-id="6ca46-651">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-651">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="6ca46-652">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-652">Pattern</span></span>|<span data-ttu-id="6ca46-653">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-653">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="6ca46-654">文字列の先頭から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-654">Begin the match at the beginning of the string.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="6ca46-655">単一のアルファベット文字`A`を通じて`Z`、または任意の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-655">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="6ca46-656">2 つの数値文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-656">Match two numeric characters.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="6ca46-657">単一のアルファベット文字`A`を通じて`Z`、または任意の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-657">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`-`|<span data-ttu-id="6ca46-658">ハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-658">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="6ca46-659">3 つの数値文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-659">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="6ca46-660">次の 3 つの数値文字が後にハイフンを検索し、このパターンの 2 つの出現と一致.</span><span class="sxs-lookup"><span data-stu-id="6ca46-660">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern..</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="6ca46-661">単一のアルファベット文字`A`を通じて`Z`、または任意の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-661">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`$`|<span data-ttu-id="6ca46-662">入力文字列の末尾で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-662">End the match at the end of the string.</span></span>|  
  
 <span data-ttu-id="6ca46-663">呼び出す、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドを`options`パラメーターに設定<xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>は次の正規表現の定義に相当します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-663">Calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method with the `options` parameter set to <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> is equivalent to defining the following regular expression:</span></span>  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 <span data-ttu-id="6ca46-664">比較を行うための例を参照してください、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-664">For comparison, see the example for the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-665">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-665">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-666">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-666">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-667">
            <paramref name="options" /> は有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-667">
              <paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-668">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-668">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-669">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-669">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-670">
            <para>このメソッドと呼ばれるアプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。パターン一致を確認するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-670">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for verifying a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-671">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-671">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-672">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-672">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-673">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-673">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="6ca46-674">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-674">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-675">指定した一致オプションとタイムアウト間隔を使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-675">Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-676">正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-676">
              <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-677"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A>メソッドは通常、文字列を検証するまたは使用する後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-677">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="6ca46-678">1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、<xref:System.Text.RegularExpressions.Regex.Match%2A>または<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-678">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="6ca46-679">静的<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドを構築するのには、<xref:System.Text.RegularExpressions.Regex>で指定された正規表現パターンを持つオブジェクト`pattern`で指定された正規表現のオプションと`options`を呼び出すと、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29>インスタンス メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-679">The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method.</span></span> <span data-ttu-id="6ca46-680">この正規表現パターンは、迅速な取得のため、正規表現エンジンによってキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-680">This regular expression pattern is cached for rapid retrieval by the regular expression engine.</span></span>  
  
 <span data-ttu-id="6ca46-681">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-681">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-682">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-682">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-683">`matchTimeout`パラメーターする方法を指定時間、パターン一致メソッドがタイムアウトになる前に、一致を見つけるを試行します。入力を処理するときに応答を停止するが表示されない過度なバックトラッ キングに依存する正規表現により、タイムアウト間隔を設定する近い一致が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-683">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="6ca46-684">詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-684">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-685">メソッドをスローする時間間隔の一致が見つからない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-685">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-686">`matchTimeout` メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-686">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-687">次の例では、使用、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッド (string) が有効な部品番号であるかどうかを判別します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-687">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="6ca46-688">正規表現では、部品番号の 3 つの組のハイフンで区切られた文字で構成されている特定の形式であると仮定します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-688">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="6ca46-689">最初のセットは、次の 4 つの文字が含まれている必要があります、2 つの数値文字の英数字 1 文字後に続く英数字 1 文字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-689">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="6ca46-690">次の 3 つの文字で構成され、2 番目のセットは、数値でなければなりません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-690">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="6ca46-691">次の 4 つの文字で構成され、3 番目のセットには、3 つの数値文字が英数字文字が続く必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-691">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="6ca46-692">正規表現パターンに一致するでは、メソッドは、500 ミリ秒のタイムアウト間隔を設定するため、入力文字列を最小限に抑える検索が含まれる必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-692">Matching the regular expression pattern should involve minimal searching through the input string, so the method sets a time-out interval of 500 milliseconds.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch5.vb#5)]  
  
 <span data-ttu-id="6ca46-693">正規表現パターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-693">The regular expression pattern is:</span></span>  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 <span data-ttu-id="6ca46-694">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-694">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="6ca46-695">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-695">Pattern</span></span>|<span data-ttu-id="6ca46-696">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-696">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="6ca46-697">文字列の先頭から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-697">Begin the match at the beginning of the string.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="6ca46-698">単一のアルファベット文字`A`を通じて`Z`、または任意の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-698">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="6ca46-699">2 つの数値文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-699">Match two numeric characters.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="6ca46-700">単一のアルファベット文字`A`を通じて`Z`、または任意の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-700">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`-`|<span data-ttu-id="6ca46-701">ハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-701">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="6ca46-702">3 つの数値文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-702">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="6ca46-703">次の 3 つの数値文字が後にハイフンを検索し、このパターンの 2 つの出現と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-703">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="6ca46-704">単一のアルファベット文字`A`を通じて`Z`、または任意の数字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-704">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`$`|<span data-ttu-id="6ca46-705">入力文字列の末尾で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-705">End the match at the end of the string.</span></span>|  
  
 <span data-ttu-id="6ca46-706">呼び出す、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドを`options`パラメーターに設定<xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>は次の正規表現の定義に相当します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-706">Calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method with the `options` parameter set to <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> is equivalent to defining the following regular expression:</span></span>  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 <span data-ttu-id="6ca46-707">比較を行うための例を参照してください、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-707">For comparison, see the example for the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-708">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-708">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-709">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-709">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-710">
            <paramref name="options" /> は有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-710">
              <paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> value.</span>
          </span>
          <span data-ttu-id="6ca46-711">または、<paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-711">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-712">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-712">A time-out occurred.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-713">
            <para>設定することをお勧め、<paramref name="matchTimeout" />パラメーターが 2 秒などの適切な値です。指定してタイムアウトを無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンはわずかですが優れたパフォーマンスを提供します。ただし、次の条件下でのみのタイムアウトを無効にする必要があります: - する場合は、正規表現によって処理される入力は既知の信頼されたソースから派生または静的なテキストで構成されます。これには、動的にユーザーによって入力されたテキストが含まれません。 -効率的に処理することを確認する正規表現パターンが十分にテストされてときに一致すると、一致以外の場合、して近い一致します。 場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングを引き起こすことが確認される言語要素は含まれていません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-713">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-714">正規表現パターンと一致する部分文字列の入力文字列を検索し、最初に一致したものを 1 つの <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトとして返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-714">Searches an input string for a substring that matches a regular expression pattern and returns the first occurrence as a single <see cref="T:System.Text.RegularExpressions.Match" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-715">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-715">The string to search for a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-716">指定した入力文字列内で、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現と最初に一致する対象を 1 つ検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-716">Searches the specified input string for the first occurrence of the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-717">一致に関する情報を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-717">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-718"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッドは、入力文字列内で正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-718">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="6ca46-719">正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-719">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-720">返された値を確認して、入力文字列に、正規表現パターンが検出されましたがかどうかを判断できます<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-720">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="6ca46-721">一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティから部分文字列が含まれています。`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-721">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-722">一致するものが見つからない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-722">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6ca46-723">このメソッドの最初の部分文字列を返します`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-723">This method returns the first substring in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-724">後続の一致項目を取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-724">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6ca46-725">呼び出して、1 つのメソッドの呼び出しですべての一致項目を取得することも、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-725">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6ca46-726"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-726">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-727">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-727">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-728">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-728">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-729">正規表現パターン、文字列内に一致し、一致するリストを検索する例を次のグループ、キャプチャ、およびキャプチャの位置。</span><span class="sxs-lookup"><span data-stu-id="6ca46-729">The following example finds regular expression pattern matches in a string, then lists the matched groups, captures, and capture positions.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 <span data-ttu-id="6ca46-730">正規表現パターン`(\w+)\s+(car)`と共にその前にある単語"car"という単語の出現と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-730">The regular expression pattern `(\w+)\s+(car)` matches occurrences of the word "car" along with the word that precedes it.</span></span> <span data-ttu-id="6ca46-731">次の表に示すように解釈されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-731">It is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-732">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-732">Pattern</span></span>|<span data-ttu-id="6ca46-733">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-733">Description</span></span>|  
|-------------|-----------------|  
|`(\w+)`|<span data-ttu-id="6ca46-734">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-734">Match one or more word characters.</span></span> <span data-ttu-id="6ca46-735">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-735">This is the first capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="6ca46-736">1 つ以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-736">Match one or more white-space characters.</span></span>|  
|<span data-ttu-id="6ca46-737">(car)</span><span class="sxs-lookup"><span data-stu-id="6ca46-737">(car)</span></span>|<span data-ttu-id="6ca46-738">リテラル文字列"car"と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-738">Match the literal string "car".</span></span> <span data-ttu-id="6ca46-739">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-739">This is the second capturing group.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-740">
            <paramref name="input" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-740">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-741">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-741">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-742">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-742">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String, startat As Integer) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-743">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-743">The string to search for a match.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="6ca46-744">検索を開始する 0 から始まる文字位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-744">The zero-based character position at which to start the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-745">入力文字列内の指定した開始位置から開始して、その入力文字列内で正規表現に最初に一致する箇所を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-745">Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-746">一致に関する情報を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-746">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-747"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29>以降に、正規表現パターンに一致する最初の部分文字列を返します、`startat`文字、入力文字列内の位置。</span><span class="sxs-lookup"><span data-stu-id="6ca46-747">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern, starting at or after the `startat` character position, in an input string.</span></span> <span data-ttu-id="6ca46-748">正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-748">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-749">正規表現パターンを<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29>のいずれかへの呼び出しでメソッドの検索が定義されている、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-749">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="6ca46-750">正規表現パターンを形成する要素の詳細については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-750">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-751">必要に応じてを使用して、文字列内の開始位置を指定することができます、`startat`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="6ca46-751">You can optionally specify a starting position in the string by using the `startat` parameter.</span></span> <span data-ttu-id="6ca46-752">正規表現エンジンは、左から右 (既定値) を解析、ときに、一致して、スキャンを移動し、右方向で指定された文字で始まる`startat`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-752">When the regular expression engine parses from left to right (the default), the match and the scan move rightward, starting at the character specified in `startat`.</span></span> <span data-ttu-id="6ca46-753">正規表現エンジンが右から左に解析して (に正規表現パターンは、構築したとき、<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType>オプション)、一致とスキャンは逆方向に移動しにある文字で始まる`startat`-1 です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-753">When the regular expression engine parses from right to left (when the regular expression pattern is constructed with the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType> option), the match and scan move in the opposite direction and begin with the character at `startat` -1.</span></span> <span data-ttu-id="6ca46-754">既定値から検索を開始する場合は、開始位置を指定しないと、`startat`位置。</span><span class="sxs-lookup"><span data-stu-id="6ca46-754">If you do not specify a starting position, the search begins at the default `startat` position.</span></span> <span data-ttu-id="6ca46-755">場合は、正規表現が左から右へ、既定値から検索`startat`位置は、左の最後に`input`以外のかどうかは右から検索ままにすると、既定`startat`の位置がの右端に`input`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-755">If the regular expression searches from left to right, the default `startat` position is at the left end of `input`; if it searches from right to left, the default `startat` position is at the right end of `input`.</span></span>  
  
 <span data-ttu-id="6ca46-756">文字列内の特定の文字位置から開始し、正規表現エンジンが一致するものを残りの文字列をスキャンしないように、一致するものを制限する場合は、アンカーを正規表現、 `\G` (左から右へのパターンでは、左または右から左へのパターンを右側にある)。</span><span class="sxs-lookup"><span data-stu-id="6ca46-756">If you want to restrict a match so that it begins at a particular character position in the string and the regular expression engine does not scan the remainder of the string for a match, anchor the regular expression with a `\G` (at the left for a left-to-right pattern, or at the right for a right-to-left pattern).</span></span> <span data-ttu-id="6ca46-757">これによって、制限、一致するだけで始まる必要がありますので`startat`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-757">This restricts the match so it must start exactly at `startat`.</span></span>  
  
 <span data-ttu-id="6ca46-758">返された値を確認して、入力文字列に、正規表現パターンが検出されましたがかどうかを判断できます<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-758">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="6ca46-759">一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティから部分文字列が含まれています。`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-759">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-760">一致するものが見つからない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-760">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6ca46-761">このメソッドは、以降の検出された最初の部分文字列を返します、`startat`文字の位置`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-761">This method returns the first substring found at or after the `startat` character position in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-762">後続の一致項目を取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-762">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6ca46-763">呼び出して、1 つのメソッドの呼び出しですべての一致項目を取得することも、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-763">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6ca46-764"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-764">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-765">アプリケーション ドメインに対する操作超えています、タイムアウト値が確立された場合は、例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-765">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exeeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-766">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-766">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-767">
            <paramref name="input" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-767">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-768">
            <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-768">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-769">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-769">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-770">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-770">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-771">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-771">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-772">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-772">The regular expression pattern to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-773">指定した入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-773">Searches the specified input string for the first occurrence of the specified regular expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-774">一致に関する情報を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-774">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-775"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>メソッドは、入力文字列内で正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-775">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="6ca46-776">正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-776">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-777">静的な<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>メソッドを構築するのには、<xref:System.Text.RegularExpressions.Regex>指定した正規表現パターンを持つオブジェクトおよびインスタンスの呼び出し<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-777">The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.</span></span> <span data-ttu-id="6ca46-778">この場合、正規表現エンジンは、正規表現パターンをキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-778">In this case, the regular expression engine caches the regular expression pattern.</span></span>  
  
 <span data-ttu-id="6ca46-779">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-779">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-780">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-780">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-781">返された値を確認して、入力文字列に、正規表現パターンが検出されましたがかどうかを判断できます<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-781">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="6ca46-782">一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティから部分文字列が含まれています。`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-782">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-783">一致するものが見つからない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-783">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6ca46-784">このメソッドの最初の部分文字列を返します`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-784">This method returns the first substring in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-785">後続の一致項目を取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-785">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6ca46-786">呼び出して、1 つのメソッドの呼び出しですべての一致項目を取得することも、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-786">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6ca46-787"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-787">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="6ca46-788">アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-788">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-789">次の例では、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>を少なくとも 1 つを含む最初の単語を検索するメソッド`z`文字を呼び出し、続いて、<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>追加の一致を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-789">The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method to find the first word that contains at least one `z` character, and then calls the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method to find any additional matches.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Match#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Match#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match1.vb#1)]  
  
 <span data-ttu-id="6ca46-790">この正規表現パターン `\b\w*z+\w*\b` の解釈を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-790">The regular expression pattern `\b\w*z+\w*\b` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-791">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-791">Pattern</span></span>|<span data-ttu-id="6ca46-792">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-792">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="6ca46-793">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-793">Begin the match at a word boundary.</span></span>|  
|`\w*`|<span data-ttu-id="6ca46-794">0、1、または複数の単語文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-794">Match zero, one, or more word characters.</span></span>|  
|`z+`|<span data-ttu-id="6ca46-795">1 つ以上の出現と一致、`z`文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-795">Match one or more occurrences of the `z` character.</span></span>|  
|`\w*`|<span data-ttu-id="6ca46-796">0、1、または複数の単語文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-796">Match zero, one, or more word characters.</span></span>|  
|`\b`|<span data-ttu-id="6ca46-797">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-797">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-798">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-798">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-799">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-799">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-800">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-800">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-801">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-801">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-802">
            <para>このメソッドと呼ばれるアプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。パターン マッチを取得するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-802">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int beginning, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 beginning, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String, beginning As Integer, length As Integer) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input, int beginning, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="beginning" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-803">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-803">The string to search for a match.</span>
          </span>
        </param>
        <param name="beginning">
          <span data-ttu-id="6ca46-804">検索対象の左端の位置を定義する、入力文字列内の 0 から始まる文字位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-804">The zero-based character position in the input string that defines the leftmost position to be searched.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="6ca46-805">検索に含める部分文字列の文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-805">The number of characters in the substring to include in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-806">入力文字列内の指定した開始位置から開始し、指定した文字数だけを検索対象として、その入力文字列内で正規表現に最初に一致する箇所を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-806">Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-807">一致に関する情報を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-807">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-808"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29>メソッドは、入力文字列の一部の正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-808">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern in a portion of an input string.</span></span> <span data-ttu-id="6ca46-809">正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-809">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-810">正規表現パターンを<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29>のいずれかへの呼び出しでメソッドの検索が定義されている、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-810">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="6ca46-811">正規表現パターンを形成する要素の詳細については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-811">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-812"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29>メソッドの部分を検索する`input`によって定義された、`beginning`と`length`正規表現パターンのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-812">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches the portion of `input` defined by the `beginning` and `length` parameters for the regular expression pattern.</span></span> <span data-ttu-id="6ca46-813">`beginning` 常に、検索に含める左端の文字のインデックスを定義および`length`を検索する文字の最大数を定義します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-813">`beginning` always defines the index of the leftmost character to include in the search, and `length` defines the maximum number of characters to search.</span></span> <span data-ttu-id="6ca46-814">同時に、検索の範囲を定義します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-814">Together, they define the range of the search.</span></span> <span data-ttu-id="6ca46-815">検索は、左から右 (既定値) に進みます場合、正規表現エンジンがインデックスにある文字から検索`beginning`インデックスにある文字`beginning`  +  `length` – 1。</span><span class="sxs-lookup"><span data-stu-id="6ca46-815">If the search proceeds from left to right (the default), the regular expression engine searches from the character at index `beginning` to the character at index `beginning` + `length` – 1.</span></span> <span data-ttu-id="6ca46-816">使用して、正規表現エンジンがインスタンス化される場合、<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType>ままにすると、正規表現エンジンから検索インデックスにある文字を右から検索が実行されるようにオプション`beginning`  +  `length` – インデックス位置にある文字を 1`beginning`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-816">If the regular expression engine was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType> option so that the search proceeds from right to left, the regular expression engine searches from the character at index `beginning` + `length` – 1 to the character at index `beginning`.</span></span> <span data-ttu-id="6ca46-817">このメソッドは、この範囲内で見つかった最初の一致を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-817">This method returns the first match that it finds within this range.</span></span> <span data-ttu-id="6ca46-818">後続の一致項目を取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-818">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6ca46-819">返された値を確認して、入力文字列に、正規表現パターンが検出されましたがかどうかを判断できます<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-819">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="6ca46-820">一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティから部分文字列が含まれています。`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-820">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-821">一致するものが見つからない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-821">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6ca46-822"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-822">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-823">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされたコンス トラクターを呼び出すと、タイムアウト値が設定しない場合、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-823">If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-824">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-824">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-825">
            <paramref name="input" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-825">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-826">
            <paramref name="beginning" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-826">
              <paramref name="beginning" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
          <span data-ttu-id="6ca46-827">または、<paramref name="length" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-827">-or-  <paramref name="length" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
          <span data-ttu-id="6ca46-828">または、<paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="–1" /> が <paramref name="input" /> の範囲外の位置を識別しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-828">-or-  <paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="–1" /> identifies a position that is outside the range of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-829">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-829">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-830">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-830">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String, options As RegexOptions) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-831">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-831">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-832">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-832">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-833">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-833">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-834">指定した一致オプションを使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-834">Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-835">一致に関する情報を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-835">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-836"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドは、入力文字列内で正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-836">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="6ca46-837">正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-837">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-838">静的な<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドを構築するのには、<xref:System.Text.RegularExpressions.Regex>オブジェクトを<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29>コンス トラクターとインスタンスを呼び出す<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-838">The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.</span></span>  
  
 <span data-ttu-id="6ca46-839">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-839">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-840">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-840">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-841">返された値を確認して、入力文字列に、正規表現パターンが検出されましたがかどうかを判断できます<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-841">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="6ca46-842">一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティから部分文字列が含まれています。`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-842">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-843">一致するものが見つからない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-843">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6ca46-844">このメソッドで見つかった最初の部分文字列を返します`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-844">This method returns the first substring found in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-845">後続の一致項目を取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-845">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method.</span></span> <span data-ttu-id="6ca46-846">呼び出して、1 つのメソッドの呼び出しですべての一致項目を取得することも、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-846">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6ca46-847"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-847">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="6ca46-848">アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-848">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-849">次の例では、英字で始まる単語と一致する正規表現"a"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-849">The following example defines a regular expression that matches words beginning with the letter "a".</span></span> <span data-ttu-id="6ca46-850">使用して、<xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>正規表現が"a"と小文字を両方に大文字で始まる単語を検索することを確認するにはオプション"a"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-850">It uses the <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> option to ensure that the regular expression locates words beginning with both an uppercase "a" and a lowercase "a".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Match#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Match#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match2.vb#2)]  
  
 <span data-ttu-id="6ca46-851">この正規表現パターン `\ba\w*\b` の解釈を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-851">The regular expression pattern `\ba\w*\b` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-852">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-852">Pattern</span></span>|<span data-ttu-id="6ca46-853">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-853">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="6ca46-854">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-854">Begin the match at a word boundary.</span></span>|  
|`a`|<span data-ttu-id="6ca46-855">文字と一致"a"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-855">Match the character "a".</span></span>|  
|`\w*`|<span data-ttu-id="6ca46-856">0、1、または複数の単語文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-856">Match zero, one, or more word characters.</span></span>|  
|`\b`|<span data-ttu-id="6ca46-857">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-857">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-858">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-858">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-859">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-859">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-860">
            <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-860">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-861">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-861">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-862">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-862">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-863">
            <para>このメソッドと呼ばれるアプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。パターン マッチを取得するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-863">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-864">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-864">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-865">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-865">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-866">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-866">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="6ca46-867">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-867">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-868">指定した一致オプションとタイムアウト間隔を使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-868">Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-869">一致に関する情報を格納しているオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-869">An object that contains information about the match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-870"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドは、入力文字列内で正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-870">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="6ca46-871">正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-871">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-872">静的な<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドを構築するのには、<xref:System.Text.RegularExpressions.Regex>オブジェクトを<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>コンス トラクターとインスタンスを呼び出す<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-872">The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.</span></span>  
  
 <span data-ttu-id="6ca46-873">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-873">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-874">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-874">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-875">返された値を確認して、入力文字列に、正規表現パターンが検出されましたがかどうかを判断できます<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-875">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="6ca46-876">一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティから部分文字列が含まれています。`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-876">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-877">一致するものが見つからない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-877">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6ca46-878">このメソッドで見つかった最初の部分文字列を返します`input`正規表現パターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-878">This method returns the first substring found in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="6ca46-879">後続の一致項目を取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-879">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method.</span></span> <span data-ttu-id="6ca46-880">呼び出して、1 つのメソッドの呼び出しですべての一致項目を取得することも、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-880">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="6ca46-881">`matchTimeout`パラメーターする方法を指定時間、パターン一致メソッドがタイムアウトになる前に、一致を見つけるを試行します。入力を処理するときに応答を停止するが表示されない過度なバックトラッ キングに依存する正規表現により、タイムアウト間隔を設定する近い一致が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-881">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="6ca46-882">詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-882">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-883">メソッドをスローする時間間隔の一致が見つからない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-883">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-884">`matchTimeout` メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-884">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-885">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-885">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-886">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-886">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-887">
            <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-887">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
          <span data-ttu-id="6ca46-888">または、<paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-888">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-889">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-889">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-890">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-890">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-891">
            <para>設定することをお勧め、<paramref name="matchTimeout" />パラメーターが 2 秒などの適切な値です。指定してタイムアウトを無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンはわずかですが優れたパフォーマンスを提供します。ただし、次の条件下でのみのタイムアウトを無効にする必要があります: - する場合は、正規表現によって処理される入力は既知の信頼されたソースから派生または静的なテキストで構成されます。これには、動的にユーザーによって入力されたテキストが含まれません。 -効率的に処理することを確認する正規表現パターンが十分にテストされてときに一致すると、一致以外の場合、して近い一致します。 場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングを引き起こすことが確認される言語要素は含まれていません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-891">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Matches">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-892">入力文字列内で正規表現と一致する対象をすべて検索し、見つかった対象をすべて返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-892">Searches an input string for all occurrences of a regular expression and returns all the matches.</span>
          </span>
        </summary>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-893">
            <para>呼び出して、一致する試行が繰り返された場合、<see cref="Overload:System.Text.RegularExpressions.Regex.Matches" />メソッド、正規表現エンジンは、空一致特別な処理です。通常、正規表現エンジンは、正確に前の一致するところから次の一致の検索を開始します。ただし、空の一致の後に次の一致を試みる前に、正規表現エンジンは 1 文字進めます。この動作は、正規表現エンジンはその文字列を進行状況のことを保証します。それ以外の場合、空一致が前方移動に含まれていないため、前の一致項目とまったく同じ場所では次の一致を開始し、繰り返し同じ空の文字列は一致します。次の例では、正規表現パターンで<c>、\*</c>の文字の 0 個以上の出現箇所を検索、文字列"abaabb"に"a"です。その結果、例から出力として<see cref="T:System.Text.RegularExpressions.MatchCollection" />オブジェクトでは、6 つ含まれています<see cref="T:System.Text.RegularExpressions.Match" />オブジェクト。最初の一致試行最初の検索"a"です。ここで最初と一致する最初の b の前に終了すると、2 番目の一致が開始これにより、"a"の発生回数をゼロを検索して、空の文字列を返します。3 番目の一致始まらない正確に 2 番目の一致の終了位置、2 番目の一致には、空の文字列が返されたためです。代わりに、その後、最初の"b"に 1 つの文字を開始します。3 番目の一致では、"a"の 2 回の出現を検索して、"aa"を返します。4 番目の一致する試行が 2 番目"b"の前に、3 番目の一致の終了位置を開始し、空の文字列を返します。5 番目の一致する試行は、3 番目の"b"の前に、から開始し、空の文字列を取得できるように、1 つの文字をもう一度進めます。6 番目の一致では、最後の"b"の後から開始し、もう一度、空の文字列を返します。 [! code-csharp[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/emptymatches1.cs#9)][! code-vb[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/emptymatches1.vb#9)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-893">
              <para>When a match attempt is repeated by calling the <see cref="Overload:System.Text.RegularExpressions.Regex.Matches" /> method, the regular expression engine gives empty matches special treatment. Usually, the regular expression engine begins the search for the next match exactly where the previous match left off. However, after an empty match, the regular expression engine advances by one character before trying the next match. This behavior guarantees that the regular expression engine will progress through the string. Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.  In the following example, the regular expression pattern <c>a\*</c> searches for zero or more occurrences of the letter "a" in the string "abaabb". As the output from the example shows, the resulting <see cref="T:System.Text.RegularExpressions.MatchCollection" /> object contains six <see cref="T:System.Text.RegularExpressions.Match" /> objects. The first match attempt finds the first "a". The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string. The third match does not begin exactly where the second match ended, because the second match returned an empty string. Instead, it begins one character later, after the first "b". The third match finds two occurrences of "a" and returns "aa". The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string. The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string. The sixth match begins after the last "b" and returns an empty string again.  [!code-csharp[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/emptymatches1.cs#9)] [!code-vb[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/emptymatches1.vb#9)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </MemberGroup>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Matches (input As String) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-894">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-894">The string to search for a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-895">指定した入力文字列内で、正規表現と一致する対象をすべて検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-895">Searches the specified input string for all occurrences of a regular expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-896">検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-896">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span>
          </span>
          <span data-ttu-id="6ca46-897">一致が見つからない場合は、空のコレクション オブジェクトが返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-897">If no matches are found, the method returns an empty collection object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-898"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29>メソッドがに似ていますが、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッド、ことは、すべての一致に関する情報を返す点が異なりますが、単一の一致ではなく、入力文字列内で見つかりました。</span><span class="sxs-lookup"><span data-stu-id="6ca46-898">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="6ca46-899">これは、次のコードに相当します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-899">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#5)]  
  
 <span data-ttu-id="6ca46-900">コレクションは、一致だけが含まれていて、最初に非-一致で終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-900">The collection includes only matches and terminates at the first non-match.</span></span>  
  
 <span data-ttu-id="6ca46-901">正規表現パターンを<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29>のいずれかへの呼び出しでメソッドの検索が定義されている、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-901">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="6ca46-902">正規表現パターンを形成する要素の詳細については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-902">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-903"><xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドでは、レイジー評価を使用して、返された事前設定<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-903">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="6ca46-904">このコレクションのメンバーへのアクセスなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType>と<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>すぐに作成されるコレクションが発生します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-904">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="6ca46-905">レイジー評価を利用する必要がありますなどのコンストラクトを使用して、コレクションを反復処理. `foreach` C# の場合と`For Each`しています.`Next`</span><span class="sxs-lookup"><span data-stu-id="6ca46-905">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="6ca46-906">Visual Basic では、上記のようになります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-906">in Visual Basic.</span></span>  
  
 <span data-ttu-id="6ca46-907">そのレイジー評価のための呼び出し、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29>メソッドはスローされません、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-907">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-908">ただし、操作を行うときに例外がスロー、<xref:System.Text.RegularExpressions.MatchCollection>場合、このメソッドによって返されるオブジェクト、<xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A>プロパティは使用されません<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>と対応する操作がタイムアウト間隔を超えています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-908">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> and a matching operation exceeds the time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-909">次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> "es"で終了する文で単語を識別するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-909">The following example uses the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method to identify any words in a sentence that end in "es".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches1.vb#1)]  
  
 <span data-ttu-id="6ca46-910">正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-910">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-911">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-911">Pattern</span></span>|<span data-ttu-id="6ca46-912">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-912">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="6ca46-913">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-913">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="6ca46-914">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-914">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="6ca46-915">リテラル文字列"es"と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-915">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="6ca46-916">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-916">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-917">
            <paramref name="input" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-917">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Matches (input As String, startat As Integer) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-918">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-918">The string to search for a match.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="6ca46-919">入力文字列内の検索を開始する文字位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-919">The character position in the input string at which to start the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-920">入力文字列内の指定した開始位置から検索を開始した場合に、その指定入力文字列内で正規表現と一致する対象をすべて検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-920">Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-921">検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-921">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span>
          </span>
          <span data-ttu-id="6ca46-922">一致が見つからない場合は、空のコレクション オブジェクトが返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-922">If no matches are found, the method returns an empty collection object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-923"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29>メソッドがに似ていますが、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29>メソッド、ことは、すべての一致に関する情報を返す点が異なりますが、単一の一致ではなく、入力文字列内で見つかりました。</span><span class="sxs-lookup"><span data-stu-id="6ca46-923">The  <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method is similar to the  <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="6ca46-924">これは、次のコードに相当します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-924">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#6)]  
  
 <span data-ttu-id="6ca46-925">正規表現パターンを<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29>のいずれかへの呼び出しでメソッドの検索が定義されている、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-925">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="6ca46-926">正規表現パターンを形成する要素の詳細については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-926">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-927"><xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドでは、レイジー評価を使用して、返された事前設定<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-927">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="6ca46-928">このコレクションのメンバーへのアクセスなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType>と<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>すぐに作成されるコレクションが発生します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-928">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="6ca46-929">レイジー評価を利用する必要がありますなどのコンストラクトを使用して、コレクションを反復処理. `foreach` C# の場合と`For Each`しています.`Next`</span><span class="sxs-lookup"><span data-stu-id="6ca46-929">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="6ca46-930">Visual Basic では、上記のようになります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-930">in Visual Basic.</span></span>  
  
 <span data-ttu-id="6ca46-931">そのレイジー評価のための呼び出し、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29>メソッドはスローされません、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-931">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-932">ただし、操作を行うときに例外がスロー、<xref:System.Text.RegularExpressions.MatchCollection>場合、このメソッドによって返されるオブジェクト、<xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A>プロパティは使用されません<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>と対応する操作がタイムアウト間隔を超えています.</span><span class="sxs-lookup"><span data-stu-id="6ca46-932">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> and a matching operation exceeds the time-out interval..</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-933">次の例では、 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> "es"で終了してから、呼び出している文の最初の単語を検索するメソッド、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> "es"で終わる単語の追加を識別するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-933">The following example uses the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method to find the first word in a sentence that ends in "es", and then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method to identify any additional words that end in "es".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches3.vb#3)]  
  
 <span data-ttu-id="6ca46-934">正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-934">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-935">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-935">Pattern</span></span>|<span data-ttu-id="6ca46-936">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-936">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="6ca46-937">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-937">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="6ca46-938">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-938">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="6ca46-939">リテラル文字列"es"と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-939">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="6ca46-940">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-940">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-941">
            <paramref name="input" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-941">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-942">
            <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-942">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-943">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-943">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-944">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-944">The regular expression pattern to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-945">指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-945">Searches the specified input string for all occurrences of a specified regular expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-946">検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-946">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span>
          </span>
          <span data-ttu-id="6ca46-947">一致が見つからない場合は、空のコレクション オブジェクトが返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-947">If no matches are found, the method returns an empty collection object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-948"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29>メソッドがに似ていますが、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>メソッド、ことは、すべての一致に関する情報を返す点が異なりますが、単一の一致ではなく、入力文字列内で見つかりました。</span><span class="sxs-lookup"><span data-stu-id="6ca46-948">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="6ca46-949">これは、次のコードに相当します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-949">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#7)]  
  
 <span data-ttu-id="6ca46-950">静的な`Matches`メソッドは等価を構築するのには<xref:System.Text.RegularExpressions.Regex>指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出す`Matches`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-950">The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.</span></span>  
  
 <span data-ttu-id="6ca46-951">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-951">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-952">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-952">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-953"><xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドでは、レイジー評価を使用して、返された事前設定<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-953">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="6ca46-954">このコレクションのメンバーへのアクセスなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType>と<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>すぐに作成されるコレクションが発生します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-954">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="6ca46-955">レイジー評価を利用する必要がありますなどのコンストラクトを使用して、コレクションを反復処理. `foreach` C# の場合と`For Each`しています.`Next`</span><span class="sxs-lookup"><span data-stu-id="6ca46-955">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="6ca46-956">Visual Basic では、上記のようになります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-956">in Visual Basic.</span></span>  
  
 <span data-ttu-id="6ca46-957">そのレイジー評価のための呼び出し、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29>メソッドはスローされません、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-957">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-958">ただし、操作を行うときに例外がスロー、<xref:System.Text.RegularExpressions.MatchCollection>タイムアウト間隔が現在のアプリケーション ドメインの"REGEX_DEFAULT_MATCH_TIMEOUT"プロパティで定義されているを対応する操作がタイムアウトの間隔を超えている場合、このメソッドによって返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-958">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the "REGEX_DEFAULT_MATCH_TIMEOUT" property of the current application domain and a matching operation exceeds this time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-959">次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> "es"で終了する文の任意の単語を識別するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-959">The following example uses the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method to identify any word in a sentence that ends in "es".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches2.vb#2)]  
  
 <span data-ttu-id="6ca46-960">正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-960">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-961">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-961">Pattern</span></span>|<span data-ttu-id="6ca46-962">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-962">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="6ca46-963">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-963">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="6ca46-964">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-964">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="6ca46-965">リテラル文字列"es"と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-965">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="6ca46-966">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-966">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-967">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-967">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-968">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-968">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-969">
            <para>このメソッドと呼ばれるアプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。推奨される静的メソッドと一致する複数のパターンを取得するの<see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を指定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-969">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving multiple pattern matches is <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you specify the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String, options As RegexOptions) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-970">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-970">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-971">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-971">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-972">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-972">A bitwise combination of the enumeration values that specify options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-973">指定した一致オプションを使用して、指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-973">Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-974">検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-974">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span>
          </span>
          <span data-ttu-id="6ca46-975">一致が見つからない場合は、空のコレクション オブジェクトが返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-975">If no matches are found, the method returns an empty collection object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-976"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドがに似ていますが、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッド、ことは、すべての一致に関する情報を返す点が異なりますが、単一の一致ではなく、入力文字列内で見つかりました。</span><span class="sxs-lookup"><span data-stu-id="6ca46-976">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="6ca46-977">これは、次のコードに相当します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-977">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#8)]  
  
 <span data-ttu-id="6ca46-978">静的な`Matches`メソッドは等価を構築するのには<xref:System.Text.RegularExpressions.Regex>指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出す`Matches`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-978">The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.</span></span>  
  
 <span data-ttu-id="6ca46-979">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-979">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-980">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-980">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-981"><xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドでは、レイジー評価を使用して、返された事前設定<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-981">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="6ca46-982">このコレクションのメンバーへのアクセスなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType>と<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>すぐに作成されるコレクションが発生します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-982">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="6ca46-983">レイジー評価を利用する必要がありますなどのコンストラクトを使用して、コレクションを反復処理. `foreach` C# の場合と`For Each`しています.`Next`</span><span class="sxs-lookup"><span data-stu-id="6ca46-983">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="6ca46-984">Visual Basic では、上記のようになります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-984">in Visual Basic.</span></span>  
  
 <span data-ttu-id="6ca46-985">そのレイジー評価のための呼び出し、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29>メソッドはスローされません、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-985">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-986">ただし、操作を行うときに例外がスロー、<xref:System.Text.RegularExpressions.MatchCollection>タイムアウト間隔が現在のアプリケーション ドメインの"REGEX_DEFAULT_MATCH_TIMEOUT"プロパティで定義されているを対応する操作がタイムアウトの間隔を超えている場合、このメソッドによって返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-986">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the "REGEX_DEFAULT_MATCH_TIMEOUT" property of the current application domain and a matching operation exceeds this time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-987">次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> "es"で終了してから、呼び出しているセンテンス内の任意の単語を識別する方法、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>パターンと入力文字列の大文字と小文字を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-987">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method to identify any word in a sentence that ends in "es", and then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to perform a case-insensitive comparison of the pattern with the input string.</span></span> <span data-ttu-id="6ca46-988">出力に示す 2 つの方法は異なる結果を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-988">As the output shows, the two methods return different results.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches4.vb#4)]  
  
 <span data-ttu-id="6ca46-989">正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-989">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-990">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-990">Pattern</span></span>|<span data-ttu-id="6ca46-991">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-991">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="6ca46-992">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-992">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="6ca46-993">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-993">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="6ca46-994">リテラル文字列"es"と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-994">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="6ca46-995">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-995">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-996">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-996">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-997">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-997">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-998">
            <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-998">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-999">
            <para>このメソッドと呼ばれるアプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。推奨される静的メソッドと一致する複数のパターンを取得するの<see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-999">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving multiple pattern matches is <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1000">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1000">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-1001">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1001">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-1002">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1002">A bitwise combination of the enumeration values that specify options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="6ca46-1003">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1003">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1004">指定した一致オプションとタイムアウト間隔を使用して、指定した入力文字列内で、指定した正規表現に一致するすべての箇所を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1004">Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1005">検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1005">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span>
          </span>
          <span data-ttu-id="6ca46-1006">一致が見つからない場合は、空のコレクション オブジェクトが返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1006">If no matches are found, the method returns an empty collection object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1007"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドがに似ていますが、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッド、ことは、すべての一致に関する情報を返す点が異なりますが、単一の一致ではなく、入力文字列内で見つかりました。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1007">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="6ca46-1008">これは、次のコードに相当します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1008">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#10)]  
  
 <span data-ttu-id="6ca46-1009">静的な`Matches`メソッドは等価を構築するのには<xref:System.Text.RegularExpressions.Regex>指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出す`Matches`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1009">The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.</span></span>  
  
 <span data-ttu-id="6ca46-1010">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1010">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1011">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1011">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-1012"><xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドでは、レイジー評価を使用して、返された事前設定<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1012">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="6ca46-1013">このコレクションのメンバーへのアクセスなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType>と<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>すぐに作成されるコレクションが発生します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1013">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="6ca46-1014">レイジー評価を利用する必要がありますなどのコンストラクトを使用して、コレクションを反復処理. `foreach` C# の場合と`For Each`しています.`Next`</span><span class="sxs-lookup"><span data-stu-id="6ca46-1014">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="6ca46-1015">Visual Basic では、上記のようになります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1015">in Visual Basic.</span></span>  
  
 <span data-ttu-id="6ca46-1016">そのレイジー評価のための呼び出し、<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドはスローされません、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1016">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-1017">ただし、操作を行うときに例外がスロー、<xref:System.Text.RegularExpressions.MatchCollection>一致操作で指定されたタイムアウトの間隔を超えた場合に、このメソッドによって返されるオブジェクト、`matchTimeout`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1017">However, an exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a matching operation exceeds this time-out interval specified by the`matchTimeout` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1018">次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> "es"で終了する文の任意の単語に一致する区別する比較を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1018">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to perform a case-sensitive comparison that matches any word in a sentence that ends in "es".</span></span> <span data-ttu-id="6ca46-1019">呼び出して、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>パターンと入力文字列の大文字と小文字を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1019">It then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to perform a case-insensitive comparison of the pattern with the input string.</span></span> <span data-ttu-id="6ca46-1020">どちらの場合、タイムアウト間隔は 1 秒に設定します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1020">In both cases, the time-out interval is set to one second.</span></span> <span data-ttu-id="6ca46-1021">出力に示す 2 つの方法は異なる結果を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1021">As the output shows, the two methods return different results.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches5.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches5.vb#11)]  
  
 <span data-ttu-id="6ca46-1022">正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1022">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-1023">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-1023">Pattern</span></span>|<span data-ttu-id="6ca46-1024">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-1024">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="6ca46-1025">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1025">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="6ca46-1026">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1026">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="6ca46-1027">リテラル文字列"es"と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1027">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="6ca46-1028">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1028">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1029">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1029">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1030">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1030">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-1031">
            <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1031">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
          <span data-ttu-id="6ca46-1032">または、<paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1032">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-1033">
            <para>設定することをお勧め、<paramref name="matchTimeout" />パラメーターが 2 秒などの適切な値です。指定してタイムアウトを無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンはわずかですが優れたパフォーマンスを提供します。ただし、次の条件下でのみのタイムアウトを無効にする必要があります: - する場合は、正規表現によって処理される入力は既知の信頼されたソースから派生または静的なテキストで構成されます。これには、動的にユーザーによって入力されたテキストが含まれません。 -効率的に処理することを確認する正規表現パターンが十分にテストされてときに一致すると、一致以外の場合、して近い一致します。 場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングを引き起こすことが確認される言語要素は含まれていません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1033">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-1034">現在のインスタンスのタイムアウト間隔を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1034">Gets the time-out interval of the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ca46-1035">
            <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> がスローされる前に、パターン一致操作で経過できる最大時間間隔。タイムアウトが無効な場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1035">The maximum time interval that can elapse in a pattern-matching operation before a <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> is thrown, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> if time-outs are disabled.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1036"><xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A>プロパティのおおよその最大時間間隔を定義する、<xref:System.Text.RegularExpressions.Regex>操作がタイムアウト前に、1 つの一致操作を実行するインスタンス。正規表現エンジンは、スロー、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>タイムアウト間隔が経過した後、次のタイミング チェック中に例外です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1036">The <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property defines the approximate maximum time interval for a <xref:System.Text.RegularExpressions.Regex> instance to execute a single matching operation before the operation times out. The regular expression engine throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception during its next timing check after the time-out interval has elapsed.</span></span> <span data-ttu-id="6ca46-1037">これは、正規表現エンジンが過度なバックトラッ キングを必要とする入力文字列を処理することを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1037">This prevents the regular expression engine from processing input strings that require excessive backtracking.</span></span> <span data-ttu-id="6ca46-1038">詳細については、次を参照してください。[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)と[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1038">For more information, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md) and [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).</span></span>  
  
 <span data-ttu-id="6ca46-1039">このプロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1039">This property is read-only.</span></span> <span data-ttu-id="6ca46-1040">その値を明示的に設定するには、個人の<xref:System.Text.RegularExpressions.Regex>を呼び出してオブジェクト、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターとは、すべての値を設定できます<xref:System.Text.RegularExpressions.Regex>照合アプリケーション ドメインで操作を呼び出すことによって、<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>メソッドを提供して、 <xref:System.TimeSpan> "REGEX_DEFAULT_MATCH_TIMEOUT"プロパティの値の例を次に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1040">You can set its value explicitly for an individual <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor; and you can set its value for all <xref:System.Text.RegularExpressions.Regex> matching operations in an application domain by calling the <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> method and providing a <xref:System.TimeSpan> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/cs/regexmatchtimeout1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/vb/regexmatchtimeout1.vb#1)]  
  
 <span data-ttu-id="6ca46-1041">かどうかは明示的に設定しないタイムアウト期間、既定値<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>は、使用、および照合の操作はタイムアウトしません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1041">If you do not explicitly set a time-out interval, the default value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> is used, and matching operations do not time out.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-1042">
            <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターに渡されたオプションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1042">Gets the options that were passed into the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ca46-1043">
            <see cref="T:System.Text.RegularExpressions.RegexOptions" /> のコンストラクターに渡されたオプションを表す <see cref="T:System.Text.RegularExpressions.Regex" /> の列挙体の 1 つ以上のメンバー</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1043">One or more members of the <see cref="T:System.Text.RegularExpressions.RegexOptions" /> enumeration that represent options that were passed to the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1044">値、<xref:System.Text.RegularExpressions.Regex.Options%2A>プロパティの 1 つまたは複数のメンバーから成る、<xref:System.Text.RegularExpressions.RegexOptions>列挙します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1044">The value of the <xref:System.Text.RegularExpressions.Regex.Options%2A> property consists of one or more members of the <xref:System.Text.RegularExpressions.RegexOptions> enumeration.</span></span> <span data-ttu-id="6ca46-1045">オプションが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクターは、その値は<xref:System.Text.RegularExpressions.RegexOptions.None?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1045">If no options were defined in the <xref:System.Text.RegularExpressions.Regex> class constructor, its value is <xref:System.Text.RegularExpressions.RegexOptions.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6ca46-1046">使用可能なオプションの詳細については、[正規表現のオプション](~/docs/standard/base-types/regular-expression-options.md)トピックです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1046">The available options are discussed in detail in the [Regular Expression Options](~/docs/standard/base-types/regular-expression-options.md) topic.</span></span>  
  
 <span data-ttu-id="6ca46-1047">なお、<xref:System.Text.RegularExpressions.Regex.Options%2A>プロパティでは、インライン オプションが正規表現で定義されているパターン自体は反映されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1047">Note that the <xref:System.Text.RegularExpressions.Regex.Options%2A> property does not reflect inline options defined in the regular expression pattern itself.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="6ca46-1048">
            <para>
              <see cref="T:System.Text.RegularExpressions.Regex" /> によって作成された正規表現の基本クラス、<see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />メソッドです。これらのコンパイルされた正規表現の基本クラス実装を使用して、<see cref="P:System.Text.RegularExpressions.Regex.Options" />プロパティです。派生クラスから呼び出された場合、<see cref="P:System.Text.RegularExpressions.Regex.Options" />プロパティに渡されたオプションを返します、<paramref name="options" />のパラメーター、<see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />正規表現を定義するために使用されたクラスのコンス トラクターです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1048">
              <para>
                <see cref="T:System.Text.RegularExpressions.Regex" /> is the base class of regular expressions created by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. These compiled regular expressions use the base class implementation of the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property. If called from a derived class, the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property returns the options that were passed to the <paramref name="options" /> parameter of the <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> class constructor that was used to define the regular expression.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="pattern">
      <MemberSignature Language="C#" Value="protected internal string pattern;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string pattern" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.pattern" />
      <MemberSignature Language="VB.NET" Value="Protected Friend pattern As String " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::String ^ pattern;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-1049">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1049">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-1050">指定した入力文字列内で正規表現パターンに一致する文字列を、指定した置換文字列に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1050">In a specified input string, replaces strings that match a regular expression pattern with a specified replacement string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1051">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1051">The string to search for a match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="6ca46-1052">置換文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1052">The replacement string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1053">指定した入力文字列内で正規表現パターンに一致するすべての文字列を、指定した置換文字列に置換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1053">In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1054">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1054">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1055">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1055">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1056">一致の検索の先頭から開始、`input`文字列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1056">The search for matches starts at the beginning of the `input` string.</span></span> <span data-ttu-id="6ca46-1057">正規表現は、現在のコンス トラクターによって定義されたパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1057">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="6ca46-1058">`replacement`パラメーターを各一致文字列を置換する文字列を指定`input`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1058">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="6ca46-1059">`replacement` リテラル テキストの任意の組み合わせで構成されていることができ、[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1059">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-1060">たとえば、置換パターン`a*${test}b`文字列を挿入する"、*"と一致した部分文字列を続けて、`test`書き込み、続けてキャプチャ グループが存在する場合、文字列"b"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1060">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="6ca46-1061">\* 文字は、置換パターンではメタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1061">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ca46-1062">置換は、置換パターンでは認識されている唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1062">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="6ca46-1063">すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)正規表現パターンにのみで許可されている、および置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1063">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="6ca46-1064"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 、置換操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1064">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-1065">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1065">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-1066">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません</span><span class="sxs-lookup"><span data-stu-id="6ca46-1066">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="6ca46-1067">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1067">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1068">次の例は、正規表現を定義`\s+`、1 つ以上の空白文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1068">The following example defines a regular expression, `\s+`, that matches one or more white-space characters.</span></span> <span data-ttu-id="6ca46-1069">置換後の文字列""、単一の空白文字で置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1069">The replacement string, " ", replaces them with a single space character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample5.vb#5)]  
  
 <span data-ttu-id="6ca46-1070">次の例は、正規表現を定義`(\p{Sc}\s?)?(\d+\.?((?<=\.)\d+)?)(?(1)|\s?\p{Sc})?`、および置換パターンでは、 `$2`、数値の値から先頭または末尾の通貨記号を削除します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1070">The following example defines a regular expression, `(\p{Sc}\s?)?(\d+\.?((?<=\.)\d+)?)(?(1)|\s?\p{Sc})?`, and a replacement pattern, `$2`, that removes either a leading or a trailing currency symbol from a numeric value.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample7.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample7.vb#7)]  
  
 <span data-ttu-id="6ca46-1071">この正規表現の解釈を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1071">The regular expression is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-1072">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-1072">Pattern</span></span>|<span data-ttu-id="6ca46-1073">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-1073">Description</span></span>|  
|-------------|-----------------|  
|`\p{Sc}`|<span data-ttu-id="6ca46-1074">通貨記号と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1074">Match a currency symbol.</span></span> <span data-ttu-id="6ca46-1075">`{Sc}` Unicode の Symbol, Currency カテゴリのメンバーである任意の文字を表します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1075">`{Sc}` denotes any character that is a member of the Unicode Symbol, Currency category.</span></span>|  
|`\s?`|<span data-ttu-id="6ca46-1076">0 個または 1 個の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1076">Match zero or one white-space character.</span></span>|  
|`(\p{Sc}\s?)?`|<span data-ttu-id="6ca46-1077">通貨記号の後に 0 個または 1 つの空白文字の組み合わせの 0 回または 1 回一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1077">Match zero or one occurrence of the combination of a currency symbol followed by zero or one white-space character.</span></span> <span data-ttu-id="6ca46-1078">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1078">This is the first capturing group.</span></span>|  
|`\d+`|<span data-ttu-id="6ca46-1079">1 個以上の 10 進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1079">Match one or more decimal digits.</span></span>|  
|`\.?`|<span data-ttu-id="6ca46-1080">ピリオド (桁区切り記号の文字として使用されます) の 0 回または 1 回一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1080">Match zero or one occurrence of a period (used as a decimal separator character).</span></span>|  
|`((?<=\.)\d+)?`|<span data-ttu-id="6ca46-1081">期間が、前の文字の場合は、1 つ以上の 10 進数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1081">If a period is the previous character, match one or more decimal digits.</span></span> <span data-ttu-id="6ca46-1082">このパターンは、0 個または 1 回を一致させることができます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1082">This pattern can be matched either zero or one time.</span></span>|  
|`(\d+\.?((?<=\.)\d+)?)`|<span data-ttu-id="6ca46-1083">1 つ以上の 10 進数字の後に省略可能な期間と追加の 10 進数字のパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1083">Match the pattern of one or more decimal digits followed by an optional period and additional decimal digits.</span></span> <span data-ttu-id="6ca46-1084">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1084">This is the second capturing group.</span></span> <span data-ttu-id="6ca46-1085">呼び出し、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%29>メソッドでは、このキャプチャされたグループの値に一致した文字列全体が置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1085">The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%29> method replaces the entire match with the value of this captured group.</span></span>|  
|`(?(1)&#124;\s?\p{Sc})?`|<span data-ttu-id="6ca46-1086">最初のキャプチャ グループが存在する場合は、空の文字列を照合します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1086">If the first captured group exists, match an empty string.</span></span> <span data-ttu-id="6ca46-1087">それ以外の場合、通貨記号に続く 0 個または 1 つの空白文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1087">Otherwise, match zero or one white-space character followed by a currency symbol.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1088">
            <paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1088">
              <paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1089">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1089">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1090">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1090">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1091">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1091">The string to search for a match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="6ca46-1092">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1092">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1093">指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1093">In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1094">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1094">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1095">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1095">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1096"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1096">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="6ca46-1097">置換文字列が正規表現置換パターンで簡単に指定できません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1097">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="6ca46-1098">置換文字列、一致した文字列に対して実行されるいくつかの処理に起因します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1098">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="6ca46-1099">置換文字列の結果は、条件付き処理します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1099">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="6ca46-1100">メソッドを呼び出すことと同じ、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType>メソッドを渡す各<xref:System.Text.RegularExpressions.Match>、返されたオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションに、`evaluator`委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1100">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="6ca46-1101">正規表現は、現在のコンス トラクターによって定義されたパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1101">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="6ca46-1102">`evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1102">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="6ca46-1103">カスタム メソッドに次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1103">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="6ca46-1104">カスタム メソッドは、一致した入力を置換する文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1104">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="6ca46-1105"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 、置換操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1105">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-1106">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1106">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-1107">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません</span><span class="sxs-lookup"><span data-stu-id="6ca46-1107">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="6ca46-1108">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1108">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1109">次のコード例は、元の文字列を表示、元の文字列内の各単語と一致するを表示し、大文字に一致した各文字列の最初の文字を変換後の文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1109">The following code example displays an original string, matches each word in the original string, converts the first character of each match to uppercase, then displays the converted string.</span></span>  
  
 [!code-csharp[Regex.Replace-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Regex.Replace-Instance/cs/sample.cs#1)]
 [!code-vb[Regex.Replace-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex.Replace-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1110">
            <paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1110">
              <paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1111">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1111">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1112">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1112">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1113">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1113">The string to search for a match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="6ca46-1114">置換文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1114">The replacement string.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="6ca46-1115">置換を行う最大回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1115">The maximum number of times the replacement can occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1116">指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1116">In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1117">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1117">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1118">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1118">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1119">一致の検索の先頭から開始、`input`文字列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1119">The search for matches starts at the beginning of the `input` string.</span></span> <span data-ttu-id="6ca46-1120">正規表現とは、現在のコンス トラクターで定義されているパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1120">The regular expression is the pattern that is defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span> <span data-ttu-id="6ca46-1121">場合`count`は負の値の置換は、文字列の末尾に続行します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1121">If `count` is negative, replacements continue to the end of the string.</span></span> <span data-ttu-id="6ca46-1122">場合`count`一致の数を超える場合、すべての一致項目が置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1122">If `count` exceeds the number of matches, all matches are replaced.</span></span>  
  
 <span data-ttu-id="6ca46-1123">`replacement`パラメーターを 1 つ目を置換する文字列を指定`count`と一致する`input`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1123">The `replacement` parameter specifies the string that is to replace the first `count` matches in `input`.</span></span> <span data-ttu-id="6ca46-1124">`replacement` リテラル テキストの任意の組み合わせで構成されていることができ、[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1124">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-1125">たとえば、置換パターン`a*${test}b`文字列を挿入する"、*"と一致した部分文字列を続けて、`test`書き込み、続けてキャプチャ グループが存在する場合、文字列"b"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1125">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="6ca46-1126">\* 文字は、置換パターンではメタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1126">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ca46-1127">置換は、置換パターンでは認識されている唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1127">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="6ca46-1128">すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)正規表現パターンにのみで許可されている、および置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1128">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="6ca46-1129"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 、置換操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1129">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-1130">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1130">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-1131">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません</span><span class="sxs-lookup"><span data-stu-id="6ca46-1131">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="6ca46-1132">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1132">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1133">次の例は、文字の最初の 5 回の出現を 1 つの文字に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1133">The following example replaces the first five occurrences of duplicated characters with a single character.</span></span> <span data-ttu-id="6ca46-1134">正規表現パターン`(\w)\1`単一の文字の連続した出現と一致し、最初のキャプチャ グループに最初に見つかった位置を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1134">The regular expression pattern `(\w)\1` matches consecutive occurrences of a single character and assigns the first occurrence to the first capturing group.</span></span> <span data-ttu-id="6ca46-1135">置換パターン`$1`最初のキャプチャ グループと一致した文字列全体が置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1135">The replacement pattern `$1` replaces the entire match with the first captured group.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample8.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1136">
            <paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1136">
              <paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1137">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1137">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1138">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1138">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1139">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1139">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-1140">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1140">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="6ca46-1141">置換文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1141">The replacement string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1142">指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1142">In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1143">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1143">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1144">
            <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1144">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1145">静的な`Replace`メソッドは等価を構築するのには<xref:System.Text.RegularExpressions.Regex>指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出す`Replace`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1145">The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.</span></span>  
  
 <span data-ttu-id="6ca46-1146">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1146">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1147">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1147">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="6ca46-1148">一致の検索の先頭から開始、`input`文字列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1148">The search for matches starts at the beginning of the `input` string.</span></span>  
  
 <span data-ttu-id="6ca46-1149">`replacement`パラメーターを各一致文字列を置換する文字列を指定`input`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1149">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="6ca46-1150">`replacement` リテラル テキストの任意の組み合わせで構成されていることができ、[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1150">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-1151">たとえば、置換パターン`a*${test}b`文字列を挿入する"、*"と一致した部分文字列を続けて、`test`書き込み、続けてキャプチャ グループが存在する場合、文字列"b"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1151">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="6ca46-1152">\* 文字は、置換パターンではメタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1152">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ca46-1153">置換は、置換パターンでは認識されている唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1153">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="6ca46-1154">すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)正規表現パターンにのみで許可されている、および置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1154">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="6ca46-1155"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1155">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="6ca46-1156">アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1156">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="6ca46-1157">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1157">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1158">次の例は、正規表現を定義`\s+`、1 つ以上の空白文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1158">The following example defines a regular expression, `\s+`, that matches one or more white-space characters.</span></span> <span data-ttu-id="6ca46-1159">置換後の文字列""、単一の空白文字で置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1159">The replacement string, " ", replaces them with a single space character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample6.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample6.vb#6)]  
  
 <span data-ttu-id="6ca46-1160">次の例では、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29>ローカル ファイル パスと UNC パスではローカル コンピューターおよびドライブ名を置換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1160">The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> method to replace the local machine and drive names in a UNC path with a local file path.</span></span> <span data-ttu-id="6ca46-1161">正規表現を使用して、 <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 、ローカル コンピューターの名前を含めるプロパティを<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType>の論理ドライブの名前を含める方法です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1161">The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to include the name of the local computer, and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> method to include the names of the logical drives.</span></span> <span data-ttu-id="6ca46-1162">例を正常に実行するには、ローカル コンピューターの名前とリテラル文字列"MyMachine"を置き換える必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1162">To run the example successfully, you should replace the literal string "MyMachine" with your local machine name.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace3.vb#3)]  
  
 <span data-ttu-id="6ca46-1163">正規表現パターンは、次の式によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1163">The regular expression pattern is defined by the following expression:</span></span>  
  
 `"\\\\(?i:" + Environment.MachineName + ")(?:\.\w+)*\\((?i:[" + driveNames + "]))\$"`  
  
 <span data-ttu-id="6ca46-1164">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1164">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="6ca46-1165">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-1165">Pattern</span></span>|<span data-ttu-id="6ca46-1166">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-1166">Description</span></span>|  
|-------------|-----------------|  
|`\\\\`|<span data-ttu-id="6ca46-1167">一致する 2 つの連続する円記号 (`\`) 文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1167">Match two consecutive backslash (`\`) characters.</span></span> <span data-ttu-id="6ca46-1168">円記号の文字はエスケープ文字として解釈される、ために、別の円記号で各バック スラッシュをエスケープする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1168">Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</span></span>|  
|`(?i:" + Environment.MachineName + ")`|<span data-ttu-id="6ca46-1169">によって返される文字列の大文字と小文字を実行、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1169">Perform a case-insensitive match of the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property.</span></span>|  
|`(?:\.\w+)*`|<span data-ttu-id="6ca46-1170">期間の一致 (`.`) 1 つ以上の単語文字が後ろに文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1170">Match the period (`.`) character followed by one or more word characters.</span></span> <span data-ttu-id="6ca46-1171">0 回以上一致できます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1171">This match can occur zero or more times.</span></span> <span data-ttu-id="6ca46-1172">一致した部分式はキャプチャされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1172">The matched subexpression is not captured.</span></span>|  
|`\\`|<span data-ttu-id="6ca46-1173">円記号が一致 (`\`) 文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1173">Match a backslash (`\`) character.</span></span>|  
|`((?i:[" + driveNames + "]))`|<span data-ttu-id="6ca46-1174">個々 のドライブ文字で構成される文字クラスの大文字と小文字を実行します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1174">Perform a case-insensitive match of the character class that consists of the individual drive lettters.</span></span> <span data-ttu-id="6ca46-1175">この照合は、最初にキャプチャされた部分式です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1175">This match is the first captured subexpression.</span></span>|  
|`\$`|<span data-ttu-id="6ca46-1176">リテラルのドル記号に一致 (`$`) 文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1176">Match the literal dollar sign (`$`) character.</span></span>|  
  
 <span data-ttu-id="6ca46-1177">置換パターン`$1`一致した文字列全体を最初にキャプチャされた部分式に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1177">The replacement pattern `$1` replaces the entire match with the first captured subexpression.</span></span> <span data-ttu-id="6ca46-1178">つまり、ドライブ文字を UNC のマシンとドライブの名前に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1178">That is, it replaces the UNC machine and drive name with the drive letter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1179">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1179">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1180">
            <paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1180">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1181">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1181">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1182">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1182">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-1183">
            <para>このメソッドと呼ばれるアプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。パターン マッチを置換するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1183">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1184">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1184">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-1185">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1185">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="6ca46-1186">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1186">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1187">指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1187">In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1188">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1188">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1189">
            <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1189">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1190"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1190">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="6ca46-1191">置換文字列が正規表現置換パターンで簡単に指定できません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1191">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="6ca46-1192">置換文字列、一致した文字列に対して実行されるいくつかの処理に起因します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1192">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="6ca46-1193">置換文字列の結果は、条件付き処理します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1193">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="6ca46-1194">メソッドを呼び出すことと同じ、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>メソッドを渡す各<xref:System.Text.RegularExpressions.Match>、返されたオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションに、`evaluator`委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1194">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="6ca46-1195">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1195">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1196">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1196">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-1197">`evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1197">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="6ca46-1198">カスタム メソッドに次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1198">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="6ca46-1199">カスタム メソッドは、一致した入力を置換する文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1199">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="6ca46-1200"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1200">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="6ca46-1201">アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1201">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="6ca46-1202">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1202">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1203">次の例は、正規表現を使用して、文字列から個々 の単語を抽出しを使用して、<xref:System.Text.RegularExpressions.MatchEvaluator>という名前のメソッドを呼び出すデリゲートを`WordScramble`単語の個々 の文字にスクランブルをかけることです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1203">The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word.</span></span> <span data-ttu-id="6ca46-1204">これを行う、`WordScramble`メソッドは、一致している文字を含む配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1204">To do this, the `WordScramble` method creates an array that contains the characters in the match.</span></span> <span data-ttu-id="6ca46-1205">ランダムな浮動小数点数を設定する並列配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1205">It also creates a parallel array that it populates with random floating-point numbers.</span></span> <span data-ttu-id="6ca46-1206">呼び出すことによって、配列は並べ替えられます、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>メソッド、および並べ替えられた配列が引数として提供される、<xref:System.String>クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1206">The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor.</span></span> <span data-ttu-id="6ca46-1207">新しく作成されたこの文字列がによって返されるし、`WordScramble`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1207">This newly created string is then returned by the `WordScramble` method.</span></span> <span data-ttu-id="6ca46-1208">正規表現パターン`\w+`1 つ以上の単語文字と一致する正規表現エンジンが単語以外の文字、空白文字などを検出するまでの一致に文字を追加し続けます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1208">The regular expression pattern `\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace5.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace5.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1209">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1209">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1210">
            <paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1210">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1211">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1211">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1212">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1212">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-1213">
            <para>このメソッドと呼ばれるアプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。評価を行い、パターン マッチを置き換えることをお勧めの静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1213">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for evaluating and replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1214">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1214">The string to search for a match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="6ca46-1215">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1215">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="6ca46-1216">置換を実行する最大回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1216">The maximum number of times the replacement will occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1217">指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1217">In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1218">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1218">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1219">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1219">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1220"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1220">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="6ca46-1221">置換文字列が正規表現置換パターンで簡単に指定できません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1221">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="6ca46-1222">置換文字列、一致した文字列に対して実行されるいくつかの処理に起因します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1222">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="6ca46-1223">置換文字列の結果は、条件付き処理します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1223">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="6ca46-1224">メソッドを呼び出すことと同じ、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType>メソッドと、最初に渡す`count` <xref:System.Text.RegularExpressions.Match> 、返されたオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションに、`evaluator`を委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1224">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="6ca46-1225">正規表現は、現在のコンス トラクターによって定義されたパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1225">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="6ca46-1226">`evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1226">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="6ca46-1227">カスタム メソッドに次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1227">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="6ca46-1228">カスタム メソッドは、一致した入力を置換する文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1228">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="6ca46-1229"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 、置換操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1229">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-1230">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1230">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-1231">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません</span><span class="sxs-lookup"><span data-stu-id="6ca46-1231">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="6ca46-1232">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1232">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1233">次の例では、正規表現を使用して、意図的にリスト内の単語の半分のスペルを間違えて入力します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1233">The following example uses a regular expression to deliberately misspell half of the words in a list.</span></span> <span data-ttu-id="6ca46-1234">正規表現を使用して`\w*(ie|ei)\w*`"ei"または"ie"文字が含まれている単語に一致するようにします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1234">It uses the regular expression `\w*(ie|ei)\w*` to match words that include the characters "ie" or "ei".</span></span> <span data-ttu-id="6ca46-1235">渡す最初に一致する単語の半分、`ReverseLetter`が使用するメソッド、 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> "i"と"e"に一致した文字列を逆にする方法です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1235">It passes the first half of the matching words to the `ReverseLetter` method, which, in turn, uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to reverse "i" and "e" in the matched string.</span></span> <span data-ttu-id="6ca46-1236">残りの単語は変更されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1236">The remaining words remain unchanged.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace7.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace7.vb#11)]  
  
 <span data-ttu-id="6ca46-1237">正規表現 `\w*(ie|ei)\w*` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1237">The regular expression `\w*(ie|ei)\w*` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-1238">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-1238">Pattern</span></span>|<span data-ttu-id="6ca46-1239">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-1239">Description</span></span>|  
|-------------|-----------------|  
|`\w*`|<span data-ttu-id="6ca46-1240">0 個以上の単語に使用される文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1240">Match zero or more word characters.</span></span>|  
|`(ie&#124;ei)`|<span data-ttu-id="6ca46-1241">"Ie"または"ei"と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1241">Match either "ie" or "ei".</span></span>|  
|`\w*`|<span data-ttu-id="6ca46-1242">0 個以上の単語に使用される文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1242">Match zero or more word characters.</span></span>|  
  
 <span data-ttu-id="6ca46-1243">正規表現パターン`([ie])([ie])`で、`ReverseLetter`メソッドは、最初の"i"または"e"を"ei"または"ie"二重母音と一致して、文字を最初のキャプチャ グループに割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1243">The regular expression pattern `([ie])([ie])` in the `ReverseLetter` method matches the first "i" or "e" in the diphthong "ie" or "ei" and assigns the letter to the first capturing group.</span></span> <span data-ttu-id="6ca46-1244">2 番目の"i"または"e"と一致して、2 番目のキャプチャ グループに文字が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1244">It matches the second "i" or "e" and assigns the letter to the second capturing group.</span></span> <span data-ttu-id="6ca46-1245">2 つの文字が呼び出すことによって逆にし、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29>置換パターンを持つメソッド`$2$1`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1245">The two characters are then reversed by calling the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> method with the replacement pattern `$2$1`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1246">
            <paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1246">
              <paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1247">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1247">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1248">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1248">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String, count As Integer, startat As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement, int count, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1249">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1249">The string to search for a match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="6ca46-1250">置換文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1250">The replacement string.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="6ca46-1251">置換を実行する最大回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1251">Maximum number of times the replacement can occur.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="6ca46-1252">入力文字列中で検索を開始する文字位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1252">The character position in the input string where the search begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1253">指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1253">In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1254">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1254">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1255">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1255">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1256">の一致の検索の開始、`input`で指定された位置の文字列に、`startat`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1256">The search for matches starts in the `input` string at the position specified by the `startat` parameter.</span></span> <span data-ttu-id="6ca46-1257">正規表現は、現在のコンス トラクターによって定義されたパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1257">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span> <span data-ttu-id="6ca46-1258">場合`count`は負の値の置換は、文字列の末尾に続行します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1258">If `count` is negative, replacements continue to the end of the string.</span></span> <span data-ttu-id="6ca46-1259">場合`count`一致の数を超える場合、すべての一致項目が置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1259">If `count` exceeds the number of matches, all matches are replaced.</span></span>  
  
 <span data-ttu-id="6ca46-1260">`replacement`パラメーターを各一致文字列を置換する文字列を指定`input`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1260">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="6ca46-1261">`replacement` リテラル テキストの任意の組み合わせで構成されていることができ、[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1261">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-1262">たとえば、置換パターン`a*${test}b`文字列を挿入する"、*"と一致した部分文字列を続けて、`test`書き込み、続けてキャプチャ グループが存在する場合、文字列"b"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1262">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="6ca46-1263">\* 文字は、置換パターンではメタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1263">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ca46-1264">置換は、置換パターンでは認識されている唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1264">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="6ca46-1265">すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)正規表現パターンにのみで許可されている、および置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1265">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="6ca46-1266"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 、置換操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1266">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-1267">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1267">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-1268">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません</span><span class="sxs-lookup"><span data-stu-id="6ca46-1268">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="6ca46-1269">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1269">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1270">文字列の最初の行を除くすべての行間を 2 次の例です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1270">The following example double-spaces all but the first line of a string.</span></span> <span data-ttu-id="6ca46-1271">正規表現パターンでは、定義`^.*$`、テキスト、呼び出しの行に一致する、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッドを使用して、文字列の最初の行に一致するように、`Match.Index`と`Match.Count`プロパティを確認して、2 つ目の開始位置行です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1271">It defines a regular expression pattern, `^.*$`, that matches a line of text, calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method to match the first line of the string, and uses the `Match.Index` and `Match.Count` properties to determine the starting position of the second line.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample9.vb#9)]  
  
 <span data-ttu-id="6ca46-1272">正規表現パターン `^.*$` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1272">The regular expression pattern `^.*$` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="6ca46-1273">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-1273">Pattern</span></span>|<span data-ttu-id="6ca46-1274">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-1274">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="6ca46-1275">行の先頭に一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1275">Match the start of a line.</span></span> <span data-ttu-id="6ca46-1276">(なお、<xref:System.Text.RegularExpressions.Regex>を使用してオブジェクトがインスタンス化される、<xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType>オプションですそれ以外の場合、この文字クラスは、入力文字列の先頭のみ一致します。)。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1276">(Note that the <xref:System.Text.RegularExpressions.Regex> object was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType> option; otherwise, this character class would only match the beginning of the input string.)</span></span>|  
|`.*`|<span data-ttu-id="6ca46-1277">任意の文字を 0 回以上一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1277">Match any character zero or more times.</span></span>|  
|`$`|<span data-ttu-id="6ca46-1278">行の末尾と一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1278">Match the end of a line.</span></span> <span data-ttu-id="6ca46-1279">(なお、<xref:System.Text.RegularExpressions.Regex>を使用してオブジェクトがインスタンス化される、<xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType>オプションですそれ以外の場合、この文字クラスは、入力文字列の先頭のみ一致します。)。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1279">(Note that the <xref:System.Text.RegularExpressions.Regex> object was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType> option; otherwise, this character class would only match the beginning of the input string.)</span></span>|  
  
 <span data-ttu-id="6ca46-1280">置換後の文字列 (`vbCrLf + "$&"` Visual basic で`"\n$&"`C# の場合)、一致した文字列の前に改行を追加します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1280">The replacement string (`vbCrLf + "$&"` in Visual Basic, `"\n$&"` in C#) adds a new line before the matched string.</span></span> <span data-ttu-id="6ca46-1281">なお`\n`で、c# の例として解釈されます、改行文字、c# コンパイラによって以外の場合は、正規表現文字エスケープは表しません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1281">Note that `\n` in the C# example is interpreted as the newline character by the C# compiler; it does not represent a regular expression character escape.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1282">
            <paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1282">
              <paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-1283">
            <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1283">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1284">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1284">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1285">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1285">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String, options As RegexOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1286">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1286">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-1287">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1287">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="6ca46-1288">置換文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1288">The replacement string.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-1289">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1289">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1290">指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1290">In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</span>
          </span>
          <span data-ttu-id="6ca46-1291">指定したオプションで、一致操作を変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1291">Specified options modify the matching operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1292">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1292">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1293">
            <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1293">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1294">静的な`Replace`メソッドは等価を構築するのには<xref:System.Text.RegularExpressions.Regex>指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出す`Replace`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1294">The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.</span></span>  
  
 <span data-ttu-id="6ca46-1295">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1295">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1296">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1296">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="6ca46-1297">指定した場合<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>の`options`パラメーター、一致の検索は、入力文字列の末尾から開始し、左に移動させるです。 それ以外の場合、検索は、入力文字列の先頭から開始し、右に移動します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1297">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="6ca46-1298">`replacement`パラメーターを各一致文字列を置換する文字列を指定`input`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1298">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="6ca46-1299">`replacement` リテラル テキストの任意の組み合わせで構成されていることができ、[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1299">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-1300">たとえば、置換パターン`a*${test}b`文字列を挿入する"、*"と一致した部分文字列を続けて、`test`書き込み、続けてキャプチャ グループが存在する場合、文字列"b"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1300">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="6ca46-1301">\* 文字は、置換パターンではメタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1301">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ca46-1302">置換は、置換パターンでは認識されている唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1302">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="6ca46-1303">すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)正規表現パターンにのみで許可されている、および置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1303">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="6ca46-1304"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1304">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="6ca46-1305">アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1305">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="6ca46-1306">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1306">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1307">次の例では、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>ローカル ファイル パスと UNC パスではローカル コンピューターおよびドライブ名を置換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1307">The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to replace the local machine and drive names in a UNC path with a local file path.</span></span> <span data-ttu-id="6ca46-1308">正規表現を使用して、 <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 、ローカル コンピューターの名前を含めるプロパティを<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType>の論理ドライブの名前を含める方法です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1308">The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to include the name of the local computer, and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> method to include the names of the logical drives.</span></span> <span data-ttu-id="6ca46-1309">すべての正規表現文字列比較は区別されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1309">All regular expression string comparisons are case-insensitive.</span></span> <span data-ttu-id="6ca46-1310">例を正常に実行するには、ローカル コンピューターの名前とリテラル文字列"MyMachine"を置き換える必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1310">To run the example successfully, you should replace the literal string "MyMachine" with your local machine name.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace4.vb#4)]  
  
 <span data-ttu-id="6ca46-1311">正規表現パターンは、次の式によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1311">The regular expression pattern is defined by the following expression:</span></span>  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 <span data-ttu-id="6ca46-1312">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1312">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="6ca46-1313">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-1313">Pattern</span></span>|<span data-ttu-id="6ca46-1314">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-1314">Description</span></span>|  
|-------------|-----------------|  
|`\\\\`|<span data-ttu-id="6ca46-1315">一致する 2 つの連続する円記号 (`\`) 文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1315">Match two consecutive backslash (`\`) characters.</span></span> <span data-ttu-id="6ca46-1316">円記号の文字はエスケープ文字として解釈される、ために、別の円記号で各バック スラッシュをエスケープする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1316">Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</span></span>|  
|`+ Environment.MachineName +`|<span data-ttu-id="6ca46-1317">によって返される文字列と一致、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1317">Match the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property.</span></span>|  
|`(?:\.\w+)*`|<span data-ttu-id="6ca46-1318">期間の一致 (`.`) 1 つ以上の単語文字が後ろに文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1318">Match the period (`.`) character followed by one or more word characters.</span></span> <span data-ttu-id="6ca46-1319">0 回以上一致できます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1319">This match can occur zero or more times.</span></span> <span data-ttu-id="6ca46-1320">一致した部分式はキャプチャされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1320">The matched subexpression is not captured.</span></span>|  
|`\\`|<span data-ttu-id="6ca46-1321">円記号が一致 (`\`) 文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1321">Match a backslash (`\`) character.</span></span>|  
|`([" + driveNames + "])`|<span data-ttu-id="6ca46-1322">個々 のドライブ文字で構成される文字クラスと一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1322">Match the character class that consists of the individual drive letters.</span></span> <span data-ttu-id="6ca46-1323">この照合は、最初にキャプチャされた部分式です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1323">This match is the first captured subexpression.</span></span>|  
|`\$`|<span data-ttu-id="6ca46-1324">リテラルのドル記号に一致 (`$`) 文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1324">Match the literal dollar sign (`$`) character.</span></span>|  
  
 <span data-ttu-id="6ca46-1325">置換パターン`$1`一致した文字列全体を最初にキャプチャされた部分式に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1325">The replacement pattern `$1` replaces the entire match with the first captured subexpression.</span></span> <span data-ttu-id="6ca46-1326">つまり、ドライブ文字を UNC のマシンとドライブの名前に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1326">That is, it replaces the UNC machine and drive name with the drive letter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1327">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1327">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1328">
            <paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1328">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-1329">
            <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1329">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1330">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1330">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1331">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1331">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-1332">
            <para>このメソッドと呼ばれるアプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。パターン マッチを置換するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1332">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1333">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1333">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-1334">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1334">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="6ca46-1335">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1335">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-1336">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1336">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1337">指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1337">In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
          <span data-ttu-id="6ca46-1338">指定したオプションで、一致操作を変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1338">Specified options modify the matching operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1339">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1339">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1340">
            <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1340">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1341"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に正規表現の一致を置き換えるために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1341">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method is useful for replacing a regular expression match in if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="6ca46-1342">置換文字列が正規表現置換パターンで簡単に指定できません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1342">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="6ca46-1343">置換文字列、一致した文字列に対して実行されるいくつかの処理に起因します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1343">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="6ca46-1344">置換文字列の結果は、条件付き処理します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1344">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="6ca46-1345">メソッドを呼び出すことと同じ、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドを渡す各<xref:System.Text.RegularExpressions.Match>、返されたオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションに、`evaluator`委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1345">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="6ca46-1346">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1346">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1347">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1347">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-1348">`evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1348">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="6ca46-1349">カスタム メソッドに次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1349">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="6ca46-1350">カスタム メソッドは、一致した入力を置換する文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1350">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="6ca46-1351">指定した場合<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>の`options`パラメーター、一致の検索は、入力文字列の末尾から開始し、左に移動させるです。 それ以外の場合、検索は、入力文字列の先頭から開始し、右に移動します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1351">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="6ca46-1352"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1352">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="6ca46-1353">アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1353">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="6ca46-1354">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1354">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1355">次の例は、正規表現を使用して、文字列から個々 の単語を抽出しを使用して、<xref:System.Text.RegularExpressions.MatchEvaluator>という名前のメソッドを呼び出すデリゲートを`WordScramble`単語の個々 の文字にスクランブルをかけることです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1355">The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word.</span></span> <span data-ttu-id="6ca46-1356">これを行う、`WordScramble`メソッドは、一致している文字を含む配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1356">To do this, the `WordScramble` method creates an array that contains the characters in the match.</span></span> <span data-ttu-id="6ca46-1357">ランダムな浮動小数点数を設定する並列配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1357">It also creates a parallel array that it populates with random floating-point numbers.</span></span> <span data-ttu-id="6ca46-1358">呼び出すことによって、配列は並べ替えられます、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>メソッド、および並べ替えられた配列が引数として提供される、<xref:System.String>クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1358">The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor.</span></span> <span data-ttu-id="6ca46-1359">新しく作成されたこの文字列がによって返されるし、`WordScramble`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1359">This newly created string is then returned by the `WordScramble` method.</span></span> <span data-ttu-id="6ca46-1360">正規表現パターン`\w+`1 つ以上の単語文字と一致する正規表現エンジンが単語以外の文字、空白文字などを検出するまでの一致に文字を追加し続けます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1360">The regular expression pattern `\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character.</span></span> <span data-ttu-id="6ca46-1361">呼び出し、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドが含まれています、<xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType>オプションように、正規表現パターン内のコメント`\w+  # Matches all the characters in a word.`正規表現エンジンでは無視されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1361">The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> method includes the <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> option so that the comment in the regular expression pattern `\w+  # Matches all the characters in a word.` is ignored by the regular expression engine.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace6.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace6.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1362">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1362">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1363">
            <paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1363">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-1364">
            <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1364">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1365">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1365">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1366">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1366">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator, count As Integer, startat As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, int count, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1367">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1367">The string to search for a match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="6ca46-1368">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1368">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="6ca46-1369">置換を実行する最大回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1369">The maximum number of times the replacement will occur.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="6ca46-1370">入力文字列中で検索を開始する文字位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1370">The character position in the input string where the search begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1371">指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1371">In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1372">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1372">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1373">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1373">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1374"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1374">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="6ca46-1375">置換文字列が正規表現置換パターンで簡単に指定できません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1375">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="6ca46-1376">置換文字列、一致した文字列に対して実行されるいくつかの処理に起因します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1376">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="6ca46-1377">置換文字列の結果は、条件付き処理します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1377">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="6ca46-1378">メソッドを呼び出すことと同じ、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>メソッドと、最初に渡す`count` <xref:System.Text.RegularExpressions.Match> 、返されたオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションに、`evaluator`を委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1378">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="6ca46-1379">正規表現は、現在のコンス トラクターによって定義されたパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1379">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="6ca46-1380">`evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1380">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="6ca46-1381">カスタム メソッドに次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1381">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="6ca46-1382">カスタム メソッドは、一致した入力を置換する文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1382">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="6ca46-1383"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 、置換操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1383">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-1384">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1384">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-1385">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません</span><span class="sxs-lookup"><span data-stu-id="6ca46-1385">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="6ca46-1386">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1386">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1387">
            <paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1387">
              <paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-1388">
            <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1388">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1389">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1389">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1390">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1390">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String, options As RegexOptions, matchTimeout As TimeSpan) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1391">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1391">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-1392">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1392">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="replacement">
          <span data-ttu-id="6ca46-1393">置換文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1393">The replacement string.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-1394">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1394">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="6ca46-1395">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1395">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1396">指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1396">In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</span>
          </span>
          <span data-ttu-id="6ca46-1397">追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1397">Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1398">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1398">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1399">
            <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1399">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1400">静的な`Replace`メソッドは等価を構築するのには<xref:System.Text.RegularExpressions.Regex>指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出す`Replace`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1400">The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.</span></span>  
  
 <span data-ttu-id="6ca46-1401">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1401">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1402">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1402">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="6ca46-1403">指定した場合<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>の`options`パラメーター、一致の検索は、入力文字列の末尾から開始し、左に移動させるです。 それ以外の場合、検索は、入力文字列の先頭から開始し、右に移動します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1403">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="6ca46-1404">`replacement`パラメーターを各一致文字列を置換する文字列を指定`input`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1404">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="6ca46-1405">`replacement` リテラル テキストの任意の組み合わせで構成されていることができ、[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1405">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-1406">たとえば、置換パターン`a*${test}b`文字列を挿入する"、*"と一致した部分文字列を続けて、`test`書き込み、続けてキャプチャ グループが存在する場合、文字列"b"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1406">For example, the replacement pattern `a*${test}b` inserts the string "a*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="6ca46-1407">\* 文字は、置換パターンではメタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1407">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ca46-1408">置換は、置換パターンでは認識されている唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1408">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="6ca46-1409">すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)正規表現パターンにのみで許可されている、および置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1409">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="6ca46-1410">`matchTimeout`パラメーターする方法を指定時間、パターン一致メソッドがタイムアウトになる前に、一致を見つけるを試行します。入力を処理するときに応答を停止するが表示されない過度なバックトラッ キングに依存する正規表現により、タイムアウト間隔を設定する近い一致が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1410">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="6ca46-1411">詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1411">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-1412">メソッドをスローする時間間隔の一致が見つからない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1412">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-1413">`matchTimeout` メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1413">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 <span data-ttu-id="6ca46-1414">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1414">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1415">次の例では、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>ローカル ファイル パスと UNC パスではローカル コンピューターおよびドライブ名を置換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1415">The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to replace the local machine and drive names in a UNC path with a local file path.</span></span> <span data-ttu-id="6ca46-1416">正規表現を使用して、 <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 、ローカル コンピューターの名前を含めるプロパティを<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType>の論理ドライブの名前を含める方法です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1416">The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to include the name of the local computer and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> method to include the names of the logical drives.</span></span> <span data-ttu-id="6ca46-1417">すべての正規表現文字列比較は、大文字と 0.5 秒間に一致するものが見つからない場合、任意の 1 つの置換操作がタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1417">All regular expression string comparisons are case-insensitive, and any single replacement operation times out if a match cannot be found in 0.5 second.</span></span> <span data-ttu-id="6ca46-1418">例を正常に実行するには、ローカル コンピューターの名前とリテラル文字列"MyMachine"を置き換える必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1418">To run the example successfully, you should replace the literal string "MyMachine" with your local machine name.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace12.cs#12)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace12.vb#12)]  
  
 <span data-ttu-id="6ca46-1419">正規表現パターンは、次の式によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1419">The regular expression pattern is defined by the following expression:</span></span>  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 <span data-ttu-id="6ca46-1420">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1420">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="6ca46-1421">パターン</span><span class="sxs-lookup"><span data-stu-id="6ca46-1421">Pattern</span></span>|<span data-ttu-id="6ca46-1422">説明</span><span class="sxs-lookup"><span data-stu-id="6ca46-1422">Description</span></span>|  
|-------------|-----------------|  
|`\\\\`|<span data-ttu-id="6ca46-1423">一致する 2 つの連続する円記号 (`\`) 文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1423">Match two consecutive backslash (`\`) characters.</span></span> <span data-ttu-id="6ca46-1424">円記号の文字はエスケープ文字として解釈される、ために、別の円記号で各バック スラッシュをエスケープする必要があります。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1424">Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</span></span>|  
|`+ Environment.MachineName +`|<span data-ttu-id="6ca46-1425">によって返される文字列と一致、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1425">Match the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property.</span></span>|  
|`(?:\.\w+)*`|<span data-ttu-id="6ca46-1426">期間の一致 (`.`) 1 つ以上の単語文字が後ろに文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1426">Match the period (`.`) character followed by one or more word characters.</span></span> <span data-ttu-id="6ca46-1427">0 回以上一致できます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1427">This match can occur zero or more times.</span></span> <span data-ttu-id="6ca46-1428">一致した部分式はキャプチャされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1428">The matched subexpression is not captured.</span></span>|  
|`\\`|<span data-ttu-id="6ca46-1429">円記号が一致 (`\`) 文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1429">Match a backslash (`\`) character.</span></span>|  
|`([" + driveNames + "])`|<span data-ttu-id="6ca46-1430">個々 のドライブ文字で構成される文字クラスと一致します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1430">Match the character class that consists of the individual drive letters.</span></span> <span data-ttu-id="6ca46-1431">この照合は、最初にキャプチャされた部分式です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1431">This match is the first captured subexpression.</span></span>|  
|`\$`|<span data-ttu-id="6ca46-1432">リテラルのドル記号に一致 (`$`) 文字です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1432">Match the literal dollar sign (`$`) character.</span></span>|  
  
 <span data-ttu-id="6ca46-1433">置換パターン`$1`一致した文字列全体を最初にキャプチャされた部分式に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1433">The replacement pattern `$1` replaces the entire match with the first captured subexpression.</span></span> <span data-ttu-id="6ca46-1434">つまり、ドライブ文字を UNC のマシンとドライブの名前に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1434">That is, it replaces the UNC machine and drive name with the drive letter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1435">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1435">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1436">
            <paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1436">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-1437">
            <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1437">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
          <span data-ttu-id="6ca46-1438">または、<paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1438">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1439">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1439">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1440">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1440">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-1441">
            <para>設定することをお勧め、<paramref name="matchTimeout" />パラメーターが 2 秒などの適切な値です。指定してタイムアウトを無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンはわずかですが優れたパフォーマンスを提供します。ただし、次の条件下でのみのタイムアウトを無効にする必要があります: - する場合は、正規表現によって処理される入力は既知の信頼されたソースから派生または静的なテキストで構成されます。これには、動的にユーザーによって入力されたテキストが含まれません。 -効率的に処理することを確認する正規表現パターンが十分にテストされてときに一致すると、一致以外の場合、して近い一致します。 場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングを引き起こすことが確認される言語要素は含まれていません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1441">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions, matchTimeout As TimeSpan) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1442">一致する対象を検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1442">The string to search for a match.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-1443">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1443">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="evaluator">
          <span data-ttu-id="6ca46-1444">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1444">A custom method that examines each match and returns either the original matched string or a replacement string.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-1445">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1445">A bitwise combination of enumeration values that provide options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="6ca46-1446">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1446">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1447">指定した入力文字列内で、指定した正規表現に一致するすべての部分文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1447">In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span>
          </span>
          <span data-ttu-id="6ca46-1448">追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1448">Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1449">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1449">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span>
          </span>
          <span data-ttu-id="6ca46-1450">
            <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1450">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1451"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1451">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="6ca46-1452">場合はすぐに、正規表現置換パターンで置換文字列は指定できません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1452">If the replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="6ca46-1453">置換文字列結果の場合、一致した文字列の一部の処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1453">If the replacement string results from some processing performed on the matched string.</span></span>  
  
-   <span data-ttu-id="6ca46-1454">条件付き処理から結果が置換文字列場合。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1454">If the replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="6ca46-1455">メソッドを呼び出すことと同じ、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドを渡す各<xref:System.Text.RegularExpressions.Match>、返されたオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションに、`evaluator`委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1455">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="6ca46-1456">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1456">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1457">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1457">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="6ca46-1458">`evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1458">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="6ca46-1459">カスタム メソッドに次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1459">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="6ca46-1460">カスタム メソッドは、一致した入力を置換する文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1460">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="6ca46-1461">指定した場合<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>の`options`パラメーター、一致の検索は、入力文字列の末尾から開始し、左に移動させるです。 それ以外の場合、検索は、入力文字列の先頭から開始し、右に移動します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1461">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="6ca46-1462">`matchTimeout`パラメーターする方法を指定時間、パターン一致メソッドがタイムアウトになる前に、一致を見つけるを試行します。正規表現に表示されないように、過度なバックトラッ キングに依存するタイムアウト間隔を設定しないように"の入力を処理するときに応答を停止する近い一致を格納しています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1462">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to "stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="6ca46-1463">詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1463">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-1464">メソッドをスローする時間間隔の一致が見つからない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1464">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-1465">`matchTimeout` メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1465">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 <span data-ttu-id="6ca46-1466">メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1466">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ca46-1467">次の例は、正規表現を使用して、文字列から個々 の単語を抽出しを使用して、<xref:System.Text.RegularExpressions.MatchEvaluator>という名前のメソッドを呼び出すデリゲートを`WordScramble`単語の個々 の文字にスクランブルをかけることです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1467">The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word.</span></span> <span data-ttu-id="6ca46-1468">これを行う、`WordScramble`メソッドは、一致している文字を含む配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1468">To do this, the `WordScramble` method creates an array that contains the characters in the match.</span></span> <span data-ttu-id="6ca46-1469">ランダムな浮動小数点数を設定する並列配列が作成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1469">It also creates a parallel array that it populates with random floating-point numbers.</span></span> <span data-ttu-id="6ca46-1470">呼び出すことによって、配列は並べ替えられます、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>メソッド、および並べ替えられた配列が引数として提供される、<xref:System.String>クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1470">The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor.</span></span> <span data-ttu-id="6ca46-1471">新しく作成されたこの文字列がによって返されるし、`WordScramble`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1471">This newly created string is then returned by the `WordScramble` method.</span></span> <span data-ttu-id="6ca46-1472">正規表現パターン`\w+`1 つ以上の単語文字と一致する正規表現エンジンが単語以外の文字、空白文字などを検出するまでの一致に文字を追加し続けます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1472">The regular expression pattern `\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character.</span></span> <span data-ttu-id="6ca46-1473">呼び出し、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドが含まれています、<xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType>オプションように、正規表現パターン内のコメント`\w+  # Matches all the characters in a word.`正規表現エンジンでは無視されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1473">The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> method includes the <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> option so that the comment in the regular expression pattern `\w+  # Matches all the characters in a word.` is ignored by the regular expression engine.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace13.cs#13)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace13.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1474">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1474">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1475">
            <paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1475">
              <paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-1476">
            <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1476">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
          <span data-ttu-id="6ca46-1477">または、<paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1477">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1478">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1478">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1479">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1479">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-1480">
            <para>設定することをお勧め、<paramref name="matchTimeout" />パラメーターが 2 秒などの適切な値です。指定してタイムアウトを無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンはわずかですが優れたパフォーマンスを提供します。ただし、次の条件下でのみのタイムアウトを無効にする必要があります: - する場合は、正規表現によって処理される入力は既知の信頼されたソースから派生または静的なテキストで構成されます。これには、動的にユーザーによって入力されたテキストが含まれません。 -効率的に処理することを確認する正規表現パターンが十分にテストされてときに一致すると、一致以外の場合、して近い一致します。 場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングを引き起こすことが確認される言語要素は含まれていません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1480">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeft { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-1481">正規表現が右から左の方向に検索するかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1481">Gets a value that indicates whether the regular expression searches from right to left.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6ca46-1482">正規表現が右から左の方向に検索する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1482">
              <see langword="true" /> if the regular expression searches from right to left; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1483"><xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> `true`場合、<xref:System.Text.RegularExpressions.Regex>でインスタンスが作成された、<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>オプション。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1483"><xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> is `true` if the <xref:System.Text.RegularExpressions.Regex> instance was created with the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> option.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="roptions">
      <MemberSignature Language="C#" Value="protected internal System.Text.RegularExpressions.RegexOptions roptions;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.Text.RegularExpressions.RegexOptions roptions" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.roptions" />
      <MemberSignature Language="VB.NET" Value="Protected Friend roptions As RegexOptions " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Text::RegularExpressions::RegexOptions roptions;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-1484">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1484">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-1485">正規表現の一致箇所によって定義される位置で、入力文字列を部分文字列の配列に分割します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1485">Splits an input string into an array of substrings at the positions defined by a regular expression match.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1486">分割対象の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1486">The string to split.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1487">
            <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現パターンによって定義されている位置で入力文字列を分割し、部分文字列の配列に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1487">Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1488">文字列の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1488">An array of strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1489"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>文字のセットではなく正規表現によって決まります区切り文字で文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1489">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="6ca46-1490">文字列は、可能な数だけ分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1490">The string is split as many times as possible.</span></span> <span data-ttu-id="6ca46-1491">区切り記号が見つからない場合、戻り値には、1 つの要素元の入力文字列の値にはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1491">If no delimiter is found, the return value contains one element whose value is the original input string.</span></span>  
  
 <span data-ttu-id="6ca46-1492">複数の一致が互いに隣接する場合は、空の文字列が、配列に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1492">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="6ca46-1493">たとえば、1 つのハイフンで文字列を分割が発生、空の文字列の位置に隣接する 2 つのハイフンされる場所が、次のコードに示すように返される配列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1493">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split1.vb#1)]  
  
 <span data-ttu-id="6ca46-1494">入力文字列の末尾または先頭に一致するものが見つかった場合は、空の文字列を返される配列の末尾または先頭に含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1494">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="6ca46-1495">次の例は、正規表現パターンを使用して`\d+`数値文字列で入力文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1495">The following example uses the regular expression pattern `\d+` to split an input string on numeric characters.</span></span> <span data-ttu-id="6ca46-1496">文字列を開始し、一致する文字の数値で終わる、ため、返された配列の最初と最後の要素の値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1496">Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split21.cs#21)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split21.vb#21)]  
  
 <span data-ttu-id="6ca46-1497">キャプチャのかっこを使用する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>式では、そのキャプチャされたテキストを結果の文字列配列に含めます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1497">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="6ca46-1498">たとえば、「plum-洋ナシ」ハイフンでキャプチャかっこ内に配置された文字列を分割する場合、返された配列にはハイフンを含む文字列要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1498">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split2.vb#2)]  
  
 <span data-ttu-id="6ca46-1499">ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1499">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="6ca46-1500">.NET Framework 1.0 および 1.1 では、かっこをキャプチャするための最初のセット内に一致するものが見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストが返される配列に含まれません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1500">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="6ca46-1501">以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも返される配列に追加します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1501">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="6ca46-1502">たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1502">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="6ca46-1503">かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットがスラッシュをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1503">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="6ca46-1504">コード例はコンパイルされていて、.NET Framework 1.0 または 1.1 での実行、スラッシュ文字は; は含まれません場合は、コンパイルおよび実行 .NET Framework 2.0 またはそれ以降のバージョン、それらが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1504">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split3.vb#3)]  
  
 <span data-ttu-id="6ca46-1505">正規表現は、空の文字列を一致させる場合<xref:System.Text.RegularExpressions.Regex.Split%28System.String%29>はのすべての場所に空の文字列の区切り記号があるために、単一の文字の文字列の配列に文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1505">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="6ca46-1506">例:</span><span class="sxs-lookup"><span data-stu-id="6ca46-1506">For example:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split11.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split11.vb#11)]  
  
 <span data-ttu-id="6ca46-1507">返される配列は空の文字列の先頭と末尾の配列も含まれることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1507">Note that the returned array also includes an empty string at the beginning and end of the array.</span></span>  
  
 <span data-ttu-id="6ca46-1508"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1508">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-1509">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1509">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-1510">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません</span><span class="sxs-lookup"><span data-stu-id="6ca46-1510">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1511">
            <paramref name="input" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1511">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1512">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1512">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1513">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1513">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, count As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1514">分割対象の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1514">The string to be split.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="6ca46-1515">分割を実行する最大回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1515">The maximum number of times the split can occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1516">
            <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現で定義されている位置で、入力文字列を指定されている最大回数だけ分割し、部分文字列の配列に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1516">Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1517">文字列の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1517">An array of strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1518"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%2A?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>文字のセットではなく正規表現によって決まります区切り文字で文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1518">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%2A?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="6ca46-1519">`count`パラメーターを部分文字列の最大数を指定、`input`文字列を分割することができます。 最後の文字列に分割されていない残りの文字列が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1519">The `count` parameter specifies the maximum number of substrings into which the `input` string can be split; the last string contains the unsplit remainder of the string.</span></span> <span data-ttu-id="6ca46-1520">A`count`ゼロの値が可能な数だけ分割の既定の動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1520">A `count` value of zero provides the default behavior of splitting as many times as possible.</span></span>  
  
 <span data-ttu-id="6ca46-1521">複数の一致が互いに隣接している場合、またはの先頭または末尾で一致が見つかった場合`input`、見つかった一致の数は少なくとも 2 つ未満`count`配列に空の文字列を挿入します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1521">If multiple matches are adjacent to one another or if a match is found at the beginning or end of `input`, and the number of matches found is at least two less than `count`, an empty string is inserted into the array.</span></span> <span data-ttu-id="6ca46-1522">数に一致する部分文字列の等価かどうかを決定するときにカウントが隣接する一致または先頭または入力文字列の末尾に一致の結果を空の文字列は、`count`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1522">That is, empty strings that result from adjacent matches or from matches at the beginning or end of the input string are counted in determining whether the number of matched substrings equals `count`.</span></span> <span data-ttu-id="6ca46-1523">次の例では、正規表現で`/d+`の 3 つの部分文字列の最大数に 1 つ以上の 10 進数字を含む入力文字列を分割するために使用します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1523">In the following example, the regular expression `/d+` is used to split an input string that includes one or more decimal digits into a maximum of three substrings.</span></span> <span data-ttu-id="6ca46-1524">配列の最初の要素が含まれている入力文字列の先頭には、正規表現パターンが一致すると、ため<xref:System.String.Empty?displayProperty=nameWithType>2 つ目には、アルファベット文字、入力文字列内の最初のセットが含まれています、および 3 番目には、3 番目の一致に続く文字列の残りの部分が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1524">Because the beginning of the input string matches the regular expression pattern, the first array element contains <xref:System.String.Empty?displayProperty=nameWithType>, the second contains the first set of alphabetic characters in the input string, and the third contains the remainder of the string that follows the third match.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split25.cs#25)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split25.vb#25)]  
  
 <span data-ttu-id="6ca46-1525">正規表現のキャプチャのかっこを使用している場合は、分割の文字列の配列でキャプチャされたテキストが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1525">If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings.</span></span> <span data-ttu-id="6ca46-1526">ただし、キャプチャされたテキストを含む配列の要素はカウントされませんを決定するときの一致項目の数に達しているかどうか`count`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1526">However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`.</span></span> <span data-ttu-id="6ca46-1527">たとえば、次のコードとして、7 つの要素を配列の 4 つの部分文字列結果の最大値に文字列「apple-アンズ-プラム-洋ナシのバナナ」分割を示しています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1527">For example, splitting the string "apple-apricot-plum-pear-banana" into a maximum of four substrings results in a seven-element array, as the following code shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split4.vb#4)]  
  
 <span data-ttu-id="6ca46-1528">ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1528">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="6ca46-1529">.NET Framework 1.0 および 1.1 では、返される配列の最初のかっこのキャプチャのセットからキャプチャされたテキストのみが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1529">In the .NET Framework 1.0 and 1.1, only captured text from the first set of capturing parentheses is included in the returned array.</span></span> <span data-ttu-id="6ca46-1530">以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストが返される配列に追加されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1530">Starting with the .NET Framework 2.0, all captured text is added to the returned array.</span></span> <span data-ttu-id="6ca46-1531">ただし、キャプチャされたテキストを含む、返された配列の要素はカウントされませんを決定するときの数に一致する部分文字列の等価かどうか`count`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1531">However, elements in the returned array that contain captured text are not counted in determining whether the number of matched substrings equals `count`.</span></span> <span data-ttu-id="6ca46-1532">たとえば、次のコードでは、正規表現を使用してキャプチャするためのかっこの 2 つのセット日付文字列から日付の要素を抽出します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1532">For example, in the following code, a regular expression uses two sets of capturing parentheses to extract the elements of a date from a date string.</span></span> <span data-ttu-id="6ca46-1533">かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットがスラッシュをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1533">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="6ca46-1534">呼び出し、<xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29>メソッド返される配列に、最大で 2 つの要素が指定されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1534">The call to the <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> method then specifies a maximum of two elements in the returned array.</span></span> <span data-ttu-id="6ca46-1535">コード例はコンパイルされ、.NET Framework 1.0 または 1.1 での実行される場合、メソッドは、2 つの要素の文字列の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1535">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, the method returns a two-element string array.</span></span> <span data-ttu-id="6ca46-1536">コンパイルおよび .NET Framework 2.0 またはそれ以降のバージョンで実行される場合、メソッドは、3 つの要素の文字列の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1536">If it is compiled and run under the .NET Framework 2.0 or later versions, the method returns a three-element string array.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split5.vb#5)]  
  
 <span data-ttu-id="6ca46-1537">正規表現は、空の文字列を一致させる場合<xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29>はのすべての場所に空の文字列の区切り記号があるために、単一の文字の文字列の配列に文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1537">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="6ca46-1538">次の例は、多くの要素が、入力文字列中のために、文字列「文字」を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1538">The following example splits the string "characters" into as many elements as there are in the input string.</span></span> <span data-ttu-id="6ca46-1539">Null 文字列が入力文字列の先頭に一致するため、null 文字列が返される配列の先頭に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1539">Because the null string matches the beginning of the input string, a null string is inserted at the beginning of the returned array.</span></span> <span data-ttu-id="6ca46-1540">これにより、入力文字列の末尾に 2 つの文字で構成される 10 番目の要素。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1540">This causes the tenth element to consist of the two characters at the end of the input string.</span></span>  
  
 [!code-vb[System.Text.RegularExpressions.Regex.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split12.vb#12)]  
  
 <span data-ttu-id="6ca46-1541"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1541">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-1542">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1542">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-1543">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません</span><span class="sxs-lookup"><span data-stu-id="6ca46-1543">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1544">
            <paramref name="input" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1544">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1545">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1545">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1546">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1546">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1547">分割対象の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1547">The string to split.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-1548">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1548">The regular expression pattern to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1549">正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1549">Splits an input string into an array of substrings at the positions defined by a regular expression pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1550">文字列の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1550">An array of strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1551"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%2A?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>文字のセットではなく正規表現によって決まります区切り文字で文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1551">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%2A?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="6ca46-1552">`input`文字列は、可能な数だけ分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1552">The `input` string is split as many times as possible.</span></span> <span data-ttu-id="6ca46-1553">場合`pattern`に載っていない、`input`文字列、戻り値が含まれていますが、元の値を持つ要素 1 つには`input`文字列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1553">If `pattern` is not found in the `input` string, the return value contains one element whose value is the original `input` string.</span></span>  
  
 <span data-ttu-id="6ca46-1554">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1554">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1555">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1555">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6ca46-1556">静的への呼び出しで使用される正規表現をコンパイル<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドは自動的にキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1556">Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached.</span></span> <span data-ttu-id="6ca46-1557">コンパイルされる正規表現の有効期間を自分で管理するインスタンスを使用して<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1557">To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.</span></span>  
  
 <span data-ttu-id="6ca46-1558">複数の一致が互いに隣接する場合は、空の文字列が、配列に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1558">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="6ca46-1559">たとえば、1 つのハイフンで文字列を分割が発生、空の文字列の位置に隣接する 2 つのハイフンされる場所が、次のコードに示すように返される配列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1559">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split8.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split8.vb#8)]  
  
 <span data-ttu-id="6ca46-1560">入力文字列の末尾または先頭に一致するものが見つかった場合は、空の文字列を返される配列の末尾または先頭に含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1560">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="6ca46-1561">次の例は、正規表現パターンを使用して`\d+`数値文字列で入力文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1561">The following example uses the regular expression pattern `\d+` to split an input string on numeric characters.</span></span> <span data-ttu-id="6ca46-1562">文字列を開始し、一致する文字の数値で終わる、ため、返された配列の最初と最後の要素の値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1562">Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split22.cs#22)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split22.vb#22)]  
  
 <span data-ttu-id="6ca46-1563">キャプチャのかっこを使用する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>式では、そのキャプチャされたテキストを結果の文字列配列に含めます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1563">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="6ca46-1564">たとえば、「plum-洋ナシ」ハイフンでキャプチャかっこ内に配置された文字列を分割する場合、返された配列にはハイフンを含む文字列要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1564">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 <span data-ttu-id="6ca46-1565">ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1565">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="6ca46-1566">.NET Framework 1.0 および 1.1 では、かっこをキャプチャするための最初のセット内に一致するものが見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストが返される配列に含まれません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1566">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="6ca46-1567">以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも返される配列に追加します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1567">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="6ca46-1568">たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1568">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="6ca46-1569">かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットがスラッシュをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1569">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="6ca46-1570">コード例はコンパイルされていて、.NET Framework 1.0 または 1.1 での実行、スラッシュ文字は; は含まれません場合は、コンパイルおよび実行 .NET Framework 2.0 またはそれ以降のバージョン、それらが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1570">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 <span data-ttu-id="6ca46-1571">正規表現は、空の文字列を一致させる場合<xref:System.Text.RegularExpressions.Regex.Split%2A>はのすべての場所に空の文字列の区切り記号があるために、単一の文字の文字列の配列に文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1571">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="6ca46-1572">例:</span><span class="sxs-lookup"><span data-stu-id="6ca46-1572">For example:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split13.cs#13)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split13.vb#13)]  
  
 <span data-ttu-id="6ca46-1573">返される配列は空の文字列の先頭と末尾の配列も含まれることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1573">Note that the returned array also includes an empty string at the beginning and end of the array.</span></span>  
  
 <span data-ttu-id="6ca46-1574"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1574">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="6ca46-1575">アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1575">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1576">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1576">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1577">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1577">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1578">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1578">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1579">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1579">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-1580">
            <para>このメソッドをメソッドは、アプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。パターン一致する場合にテキストを分割することをお勧めの静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1580">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for splitting text on a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, count As Integer, startat As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int count, int startat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1581">分割対象の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1581">The string to be split.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="6ca46-1582">分割を実行する最大回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1582">The maximum number of times the split can occur.</span>
          </span>
        </param>
        <param name="startat">
          <span data-ttu-id="6ca46-1583">入力文字列中で検索を開始する文字位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1583">The character position in the input string where the search will begin.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1584">
            <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現で定義されている位置で、入力文字列を指定されている最大回数だけ分割し、部分文字列の配列に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1584">Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span>
          </span>
          <span data-ttu-id="6ca46-1585">正規表現パターンの検索は、入力文字列の指定した文字位置から開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1585">The search for the regular expression pattern starts at a specified character position in the input string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1586">文字列の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1586">An array of strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1587"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%2A?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>文字のセットではなく正規表現によって決まります区切り文字で文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1587">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%2A?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="6ca46-1588">`count`パラメーターを部分文字列の最大数を指定、`input`文字列の分割以外の場合は、最後の文字列に分割されていない残り文字列にはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1588">The `count` parameter specifies the maximum number of substrings into which the `input` string is split; the last string contains the unsplit remainder of the string.</span></span> <span data-ttu-id="6ca46-1589">A`count`ゼロの値が可能な数だけ分割の既定の動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1589">A `count` value of zero provides the default behavior of splitting as many times as possible.</span></span> <span data-ttu-id="6ca46-1590">`startat`パラメーターは、最初の区切り記号の検索を開始するポイントを定義します (先頭の空白文字をスキップした場合のこの使用できます)。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1590">The `startat` parameter defines the point at which the search for the first delimiter begins (this can be used for skipping leading white space).</span></span>  
  
 <span data-ttu-id="6ca46-1591">一致が見つからない場合、 `count`+1 が、文字列の位置、メソッドを含む 1 つの要素の配列を返します、`input`文字列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1591">If no matches are found from the `count`+1 position in the string, the method returns a one-element array that contains the `input` string.</span></span> <span data-ttu-id="6ca46-1592">1 つまたは複数の一致が見つかった場合、返される配列の最初の要素には、一致の前に、の 1 つの文字までの最初の文字から文字列の最初の部分が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1592">If one or more matches are found, the first element of the returned array contains the first portion of the string from the first character up to one character before the match.</span></span>  
  
 <span data-ttu-id="6ca46-1593">複数の一致が互いに隣接するいると、検出された項目の数は、少なくとも 2 つ未満`count`配列に空の文字列を挿入します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1593">If multiple matches are adjacent to one another and the number of matches found is at least two less than `count`, an empty string is inserted into the array.</span></span> <span data-ttu-id="6ca46-1594">同様で一致が見つかった場合`startat`文字列の最初の文字は、返される配列の最初の要素が空の文字列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1594">Similarly, if a match is found at `startat`, which is the first character in the string, the first element of the returned array is an empty string.</span></span> <span data-ttu-id="6ca46-1595">数に一致する部分文字列の等価かどうかを決定するときにカウントが隣接する一致から作成される空の文字列は、`count`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1595">That is, empty strings that result from adjacent matches are counted in determining whether the number of matched substrings equals `count`.</span></span> <span data-ttu-id="6ca46-1596">次の例では、正規表現で`\d+`文字列内の文字の最初の部分文字列の開始位置を検索するために使用し、文字列の最大値を分割する位置に 3 回開始します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1596">In the following example, the regular expression `\d+` is used to find the starting position of the first substring of numeric characters in a string, and then to split the string a maximum of three times starting at that position.</span></span> <span data-ttu-id="6ca46-1597">正規表現パターンには、入力文字列の先頭が一致すると、ので、返される文字列の配列を空の文字列、5 文字の英数字文字列および文字列の残りの部分の構成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1597">Because the regular expression pattern matches the beginning of the input string, the returned string array consists of an empty string, a five-character alphabetic string, and the remainder of the string,</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split26.cs#26)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split26.vb#26)]  
  
 <span data-ttu-id="6ca46-1598">正規表現のキャプチャのかっこを使用している場合は、分割の文字列の配列でキャプチャされたテキストが含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1598">If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings.</span></span> <span data-ttu-id="6ca46-1599">ただし、キャプチャされたテキストを含む配列の要素はカウントされませんを決定するときの一致項目の数に達しているかどうか`count`です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1599">However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`.</span></span> <span data-ttu-id="6ca46-1600">たとえば、文字列の分割 '"apple-apricot-plum-pear-pomegranate-pineapple-peach"に最大 4 つの部分文字列を開始位置として、7 つの要素を配列内の文字列の結果の 15 の文字コードを次に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1600">For example, splitting the string '"apple-apricot-plum-pear-pomegranate-pineapple-peach" into a maximum of four substrings beginning at character 15 in the string results in a seven-element array, as the following code shows.</span></span>  
  
 [!code-vb[System.Text.RegularExpressions.Regex.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split6.vb#6)]  
  
 <span data-ttu-id="6ca46-1601">ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1601">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="6ca46-1602">.NET Framework 1.0 および 1.1 では、かっこ、キャプチャするための最初のセット内に一致するものが見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストは、返される配列に含まれません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1602">In .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="6ca46-1603">以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも返される配列に追加します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1603">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="6ca46-1604">たとえば、次のコードは、文字列内の個々 の単語を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1604">For example, the following code uses two sets of capturing parentheses to extract the individual words in a string.</span></span> <span data-ttu-id="6ca46-1605">かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットは、垂直バーをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1605">The first set of capturing parentheses captures the hyphen, and the second set captures the vertical bar.</span></span> <span data-ttu-id="6ca46-1606">垂直は除外コード例はコンパイルされていて、.NET Framework 1.0 または 1.1 での実行、バーの文字です。場合は、コンパイルおよび実行 .NET Framework 2.0 またはそれ以降のバージョン、それらが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1606">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the vertical bar characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split7.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split7.vb#7)]  
  
 <span data-ttu-id="6ca46-1607">正規表現は、空の文字列を一致させる場合<xref:System.Text.RegularExpressions.Regex.Split%2A>はのすべての場所に空の文字列の区切り記号があるために、単一の文字の文字列の配列に文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1607">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="6ca46-1608">次の例では、入力文字列が含まれている、文字から始まる数の要素に文字列「文字」を分割"a"です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1608">The following example splits the string "characters" into as many elements as the input string contains, starting with the character "a".</span></span> <span data-ttu-id="6ca46-1609">Null 文字列が入力文字列の末尾に一致するため、null 文字列が返される配列の末尾に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1609">Because the null string matches the end of the input string, a null string is inserted at the end of the returned array.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split14.cs#14)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split14.vb#14)]  
  
 <span data-ttu-id="6ca46-1610"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間がで指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1610">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="6ca46-1611">操作をアプリケーション ドメインの確立のタイムアウト値を超えた場合に例外がスローされた場合は、コンス トラクターを呼び出すときにタイムアウト間隔を設定しないと、<xref:System.Text.RegularExpressions.Regex>オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1611">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="6ca46-1612">タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません</span><span class="sxs-lookup"><span data-stu-id="6ca46-1612">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1613">
            <paramref name="input" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1613">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-1614">
            <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1614">
              <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1615">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1615">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1616">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1616">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String, options As RegexOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1617">分割対象の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1617">The string to split.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-1618">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1618">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-1619">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1619">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1620">指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1620">Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern.</span>
          </span>
          <span data-ttu-id="6ca46-1621">指定したオプションで、一致操作を変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1621">Specified options modify the matching operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1622">文字列の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1622">An array of strings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1623"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>文字のセットではなく正規表現によって決まります区切り文字で文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1623">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="6ca46-1624">文字列は、可能な数だけ分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1624">The string is split as many times as possible.</span></span> <span data-ttu-id="6ca46-1625">戻り値が元の値を持つ 1 つの要素が含まれています区切り記号が見つからない場合`input`文字列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1625">If no delimiter is found, the return value contains one element whose value is the original `input` string.</span></span>  
  
 <span data-ttu-id="6ca46-1626">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1626">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1627">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1627">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6ca46-1628">静的への呼び出しで使用される正規表現をコンパイル<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドは自動的にキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1628">Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached.</span></span> <span data-ttu-id="6ca46-1629">コンパイルされる正規表現の有効期間を自分で管理するインスタンスを使用して<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1629">To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.</span></span>  
  
 <span data-ttu-id="6ca46-1630">複数の一致が互いに隣接する場合は、空の文字列が、配列に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1630">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="6ca46-1631">たとえば、1 つのハイフンで文字列を分割が発生、空の文字列の位置に隣接する 2 つのハイフンが検出された場所に返される配列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1631">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.</span></span>  
  
 <span data-ttu-id="6ca46-1632">入力文字列の末尾または先頭に一致するものが見つかった場合は、空の文字列を返される配列の末尾または先頭に含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1632">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="6ca46-1633">次の例は、正規表現パターンを使用して`[a-z]+`大文字または小文字のアルファベット文字で入力文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1633">The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character.</span></span> <span data-ttu-id="6ca46-1634">文字列は、始まり、アルファベットの文字の照合で終わります、ため、返された配列の最初と最後の要素の値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1634">Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split24.cs#24)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split24.vb#24)]  
  
 <span data-ttu-id="6ca46-1635">キャプチャのかっこを使用する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>式では、そのキャプチャされたテキストを結果の文字列配列に含めます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1635">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="6ca46-1636">たとえば、「plum-洋ナシ」ハイフンでキャプチャかっこ内に配置された文字列を分割する場合、返された配列にはハイフンを含む文字列要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1636">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 <span data-ttu-id="6ca46-1637">ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1637">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="6ca46-1638">.NET Framework 1.0 および 1.1 では、かっこをキャプチャするための最初のセット内に一致するものが見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストが返される配列に含まれません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1638">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="6ca46-1639">以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも返される配列に追加します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1639">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="6ca46-1640">たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1640">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="6ca46-1641">かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットがスラッシュをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1641">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="6ca46-1642">コード例はコンパイルされていて、.NET Framework 1.0 または 1.1 での実行、スラッシュ文字は; は含まれません場合は、コンパイルおよび実行 .NET Framework 2.0 またはそれ以降のバージョン、それらが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1642">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 <span data-ttu-id="6ca46-1643">正規表現は、空の文字列を一致させる場合<xref:System.Text.RegularExpressions.Regex.Split%2A>はのすべての場所に空の文字列の区切り記号があるために、単一の文字の文字列の配列に文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1643">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span>  
  
 <span data-ttu-id="6ca46-1644"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1644">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="6ca46-1645">アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1645">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1646">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1646">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1647">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1647">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-1648">
            <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1648">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1649">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1649">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1650">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1650">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-1651">
            <para>このメソッドをメソッドは、アプリケーション ドメインの既定のタイムアウト値に等しい間隔の後にタイムアウトが発生しました。アプリケーション ドメイン、値のタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトのため、メソッドを使用します。パターン一致する場合にテキストを分割することをお勧めの静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1651">
              <para>This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for splitting text on a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="6ca46-1652">分割対象の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1652">The string to split.</span>
          </span>
        </param>
        <param name="pattern">
          <span data-ttu-id="6ca46-1653">一致させる正規表現パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1653">The regular expression pattern to match.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="6ca46-1654">一致オプションを指定する列挙値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1654">A bitwise combination of the enumeration values that provide options for matching.</span>
          </span>
        </param>
        <param name="matchTimeout">
          <span data-ttu-id="6ca46-1655">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1655">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1656">指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1656">Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern.</span>
          </span>
          <span data-ttu-id="6ca46-1657">追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1657">Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1658">文字列配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1658">A string array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1659"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>文字のセットではなく正規表現によって決まります区切り文字で文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1659">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="6ca46-1660">文字列は、可能な数だけ分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1660">The string is split as many times as possible.</span></span> <span data-ttu-id="6ca46-1661">戻り値が元の値を持つ 1 つの要素が含まれています区切り記号が見つからない場合`input`文字列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1661">If no delimiter is found, the return value contains one element whose value is the original `input` string.</span></span>  
  
 <span data-ttu-id="6ca46-1662">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1662">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1663">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1663">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6ca46-1664">静的への呼び出しで使用される正規表現をコンパイル<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドは自動的にキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1664">Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached.</span></span> <span data-ttu-id="6ca46-1665">コンパイルされる正規表現の有効期間を自分で管理するインスタンスを使用して<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1665">To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.</span></span>  
  
 <span data-ttu-id="6ca46-1666">複数の一致が互いに隣接する場合は、空の文字列が、配列に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1666">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="6ca46-1667">たとえば、1 つのハイフンで文字列を分割が発生、空の文字列の位置に隣接する 2 つのハイフンが検出された場所に返される配列。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1667">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.</span></span>  
  
 <span data-ttu-id="6ca46-1668">入力文字列の末尾または先頭に一致するものが見つかった場合は、空の文字列を返される配列の末尾または先頭に含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1668">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="6ca46-1669">次の例は、正規表現パターンを使用して`[a-z]+`大文字または小文字のアルファベット文字で入力文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1669">The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character.</span></span> <span data-ttu-id="6ca46-1670">文字列は、始まり、アルファベットの文字の照合で終わります、ため、返された配列の最初と最後の要素の値は<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1670">Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split23.cs#23)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split23.vb#23)]  
  
 <span data-ttu-id="6ca46-1671">キャプチャのかっこを使用する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>式では、そのキャプチャされたテキストを結果の文字列配列に含めます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1671">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="6ca46-1672">たとえば、「plum-洋ナシ」ハイフンでキャプチャかっこ内に配置された文字列を分割する場合、返された配列にはハイフンを含む文字列要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1672">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 <span data-ttu-id="6ca46-1673">ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1673">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="6ca46-1674">.NET Framework 1.0 および 1.1 では、かっこをキャプチャするための最初のセット内に一致するものが見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストが返される配列に含まれません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1674">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="6ca46-1675">以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも返される配列に追加します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1675">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="6ca46-1676">たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1676">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="6ca46-1677">かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットがスラッシュをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1677">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="6ca46-1678">コード例はコンパイルされていて、.NET Framework 1.0 または 1.1 での実行、スラッシュ文字は; は含まれません場合は、コンパイルおよび実行 .NET Framework 2.0 またはそれ以降のバージョン、それらが含まれます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1678">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 <span data-ttu-id="6ca46-1679">正規表現は、空の文字列を一致させる場合<xref:System.Text.RegularExpressions.Regex.Split%2A>はのすべての場所に空の文字列の区切り記号があるために、単一の文字の文字列の配列に文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1679">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span>  
  
 <span data-ttu-id="6ca46-1680">`matchTimeout`パラメーターする方法を指定時間、パターン一致メソッドがタイムアウトになる前に、一致を見つけるを試行します。入力を処理するときに応答を停止するが表示されない過度なバックトラッ キングに依存する正規表現により、タイムアウト間隔を設定する近い一致が含まれています。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1680">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="6ca46-1681">詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1681">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="6ca46-1682">メソッドをスローする時間間隔の一致が見つからない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1682">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="6ca46-1683">`matchTimeout` メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1683">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1684">正規表現の解析エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1684">A regular expression parsing error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1685">
            <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1685">
              <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ca46-1686">
            <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1686">
              <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span>
          </span>
          <span data-ttu-id="6ca46-1687">または、<paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1687">-or-  <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="6ca46-1688">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1688">A time-out occurred.</span>
          </span>
          <span data-ttu-id="6ca46-1689">タイムアウトの詳細については、「解説」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1689">For more information about time-outs, see the Remarks section.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="6ca46-1690">
            <para>設定することをお勧め、<paramref name="matchTimeout" />パラメーターが 2 秒などの適切な値です。指定してタイムアウトを無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンはわずかですが優れたパフォーマンスを提供します。ただし、次の条件下でのみのタイムアウトを無効にする必要があります: - する場合は、正規表現によって処理される入力は既知の信頼されたソースから派生または静的なテキストで構成されます。これには、動的にユーザーによって入力されたテキストが含まれません。 -効率的に処理することを確認する正規表現パターンが十分にテストされてときに一致すると、一致以外の場合、して近い一致します。 場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングを引き起こすことが確認される言語要素は含まれていません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1690">
              <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  -   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  -   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  -   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">
          <span data-ttu-id="6ca46-1691">シリアル化情報が設定されるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1691">The object to populate with serialization information.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="6ca46-1692">シリアル化データを格納および取得する場所。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1692">The place to store and retrieve serialized data.</span>
          </span>
          <span data-ttu-id="6ca46-1693">このパラメーターは、今後使用するために予約されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1693">This parameter is reserved for future use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1694">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトの逆シリアル化に必要なデータを入力します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1694">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data necessary to deserialize the current <see cref="T:System.Text.RegularExpressions.Regex" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-1695">
            <see langword="Regex" /> コンストラクターに渡された正規表現パターンを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1695">Returns the regular expression pattern that was passed into the <see langword="Regex" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1696">
            <see langword="Regex" /> コンストラクターに渡された <paramref name="pattern" /> パラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1696">The <paramref name="pattern" /> parameter that was passed into the <see langword="Regex" /> constructor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1697">`pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1697">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="6ca46-1698">正規表現の詳細については、次を参照してください。 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1698">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="6ca46-1699">
            <para>
              <see cref="T:System.Text.RegularExpressions.Regex" /> によって作成された正規表現の基本クラス、<see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />メソッドです。これらのコンパイルされた正規表現を使用して、<see cref="M:System.Text.RegularExpressions.Regex.ToString" />基底クラスの実装です。派生クラスから呼び出された場合、<see cref="M:System.Text.RegularExpressions.Regex.ToString" />メソッドに渡された文字列を返します、<paramref name="pattern" />のパラメーター、<see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />正規表現を定義するために使用されたクラスのコンス トラクターです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1699">
              <para>
                <see cref="T:System.Text.RegularExpressions.Regex" /> is the base class of regular expressions created by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. These compiled regular expressions use the <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> implementation of the base class. If called from a derived class, the <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> method returns the string that was passed to the <paramref name="pattern" /> parameter of the <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> class constructor that was used to define the regular expression.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Unescape">
      <MemberSignature Language="C#" Value="public static string Unescape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Unescape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unescape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Unescape(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="6ca46-1700">変換対象のテキストを含んでいる入力文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1700">The input string containing the text to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1701">入力文字列内に含まれるエスケープされた文字を変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1701">Converts any escaped characters in the input string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1702">エスケープされた文字を含む文字列を、エスケープされていない形式に変換したもの。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1702">A string of characters with any escaped characters converted to their unescaped form.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ca46-1703"><xref:System.Text.RegularExpressions.Regex.Unescape%2A>メソッドでは、次の 2 つの変換のいずれかを実行します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1703">The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method performs one of the following two transformations:</span></span>  
  
-   <span data-ttu-id="6ca46-1704">によって実行される変換を元に戻します、<xref:System.Text.RegularExpressions.Regex.Escape%2A>エスケープ文字を削除することでメソッド ("\\") から各文字はエスケープします。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1704">It reverses the transformation performed by the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method by removing the escape character ("\\") from each character escaped by the method.</span></span> <span data-ttu-id="6ca46-1705">含まれます、 \\、\*、+、?、 &#124;、{、[、(、)、^、$、.、#、および空白文字。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1705">These include the \\, \*, +, ?, &#124;, {, [, (,), ^, $,., #, and white space characters.</span></span> <span data-ttu-id="6ca46-1706">さらに、<xref:System.Text.RegularExpressions.Regex.Unescape%2A>メソッド右角かっこ (]) を閉じたり、中かっこ (}) 文字のエスケープ解除します。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1706">In addition, the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method unescapes the closing bracket (]) and closing brace (}) characters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6ca46-1707"><xref:System.Text.RegularExpressions.Regex.Unescape%2A> どの文字がエスケープ正確に推定できないため、エスケープされた文字列を完全に取り消すことはできません。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1707"><xref:System.Text.RegularExpressions.Regex.Unescape%2A> cannot reverse an escaped string perfectly because it cannot deduce precisely which characters were escaped,</span></span>  
  
-   <span data-ttu-id="6ca46-1708">文字そのものを印刷できない文字の表現に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1708">It replaces the representation of unprintable characters with the characters themselves.</span></span> <span data-ttu-id="6ca46-1709">たとえば、\a \x07 を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1709">For example, it replaces \a with \x07.</span></span> <span data-ttu-id="6ca46-1710">置換文字表現とは、\a、\b、\e、\n、\r、\f、\t、および \v です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1710">The character representations it replaces are \a, \b, \e, \n, \r, \f, \t, and \v.</span></span>  
  
 <span data-ttu-id="6ca46-1711">場合、<xref:System.Text.RegularExpressions.Regex.Unescape%2A>メソッドに変換できない場合、その他のエスケープ シーケンスが発生したをスロー \w \s など、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="6ca46-1711">If the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method encounters other escape sequences that it cannot convert, such as \w or \s, it throws an <xref:System.ArgumentException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6ca46-1712">
            <paramref name="str" /> には、認識されないエスケープ シーケンスが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1712">
              <paramref name="str" /> includes an unrecognized escape sequence.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6ca46-1713">
            <paramref name="str" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1713">
              <paramref name="str" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UseOptionC">
      <MemberSignature Language="C#" Value="protected bool UseOptionC ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionC() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionC" />
      <MemberSignature Language="VB.NET" Value="Protected Function UseOptionC () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool UseOptionC();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-1714">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1714">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1715">
            <see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> オプションが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1715">
              <see langword="true" /> if the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property contains the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseOptionR">
      <MemberSignature Language="C#" Value="protected bool UseOptionR ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionR() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionR" />
      <MemberSignature Language="VB.NET" Value="Protected Function UseOptionR () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool UseOptionR();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6ca46-1716">
            <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1716">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6ca46-1717">
            <see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> オプションが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1717">
              <see langword="true" /> if the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property contains the <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> option; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateMatchTimeout">
      <MemberSignature Language="C#" Value="protected internal static void ValidateMatchTimeout (TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig void ValidateMatchTimeout(valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Sub ValidateMatchTimeout (matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static void ValidateMatchTimeout(TimeSpan matchTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="matchTimeout">
          <span data-ttu-id="6ca46-1718">チェックするタイムアウト間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1718">The time-out interval to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6ca46-1719">タイムアウト間隔が許容範囲内にあるかどうかを確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6ca46-1719">Checks whether a time-out interval is within an acceptable range.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>