<Type Name="Regex" FullName="System.Text.RegularExpressions.Regex">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3406cb310675673dcf785c161eafebbaaeaa6a33" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52739441" /></Metadata><TypeSignature Language="C#" Value="public class Regex : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Regex extends System.Object implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Regex" />
  <TypeSignature Language="VB.NET" Value="Public Class Regex&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Regex : System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Regex = class&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>変更不可の正規表現を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex>クラスは、.NET Framework の正規表現エンジンを表します。 大量の特定の文字のパターンを検索するテキストをすばやく解析するために使用できます。テキストの部分文字列の抽出、編集、置換、削除するレポートを生成するコレクションに、抽出した文字列を追加します。  
  
> [!NOTE]
>  使用することができます、特定のパターンに準拠しているかどうかを決定することで文字列を検証する主な関心がある場合、<xref:System.Configuration.RegexStringValidator?displayProperty=nameWithType>クラス。  
  
 記載されている構文を使用して、テキスト ストリームで特定のパターンを定義する正規表現を使用する[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。 次に、必要に応じてインスタンス化できる、<xref:System.Text.RegularExpressions.Regex>オブジェクト。 最後に、正規表現パターンに一致したテキストの置換やパターン一致を識別するなどのいくつかの操作を実行するメソッドを呼び出します。  
  
> [!NOTE]
>  一般的な正規表現パターンを参照してください。[正規表現の例](~/docs/standard/base-types/regular-expression-examples.md)します。 多くのように、正規表現パターンのオンライン ライブラリがある[通常 Expressions.info](https://www.regular-expressions.info/examples.html)します。  
  
<a name="remarks"></a> 使用しての詳細については、<xref:System.Text.RegularExpressions.Regex>クラスをこのトピックでは、次のセクションを参照してください。  
  
-   [Vs の正規表現。String のメソッド](#regex_vs_string)  
  
-   [静的ポートとします。インスタンス メソッド](#static_vs_instance)  
  
-   [正規表現の操作を実行します。](#regex_ops)  
  
-   [タイムアウト値を定義します。](#define_timeout)  
  
 正規表現の言語について詳しくは、「[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照するか、次の資料のいずれかをダウンロードして印刷してください。  
  
 [Word (.docx) 形式のクイック リファレンス](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)  
 [PDF (.pdf) 形式のクイック リファレンス](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)  
  
<a name="regex_vs_string"></a>   
## <a name="regex-vs-string-methods"></a>Vs の正規表現。String のメソッド  
 <xref:System.String?displayProperty=nameWithType>クラスには、テキストによるパターン マッチングを実行する際のいくつかの検索と比較のメソッドが含まれています。 たとえば、 <xref:System.String.Contains%2A?displayProperty=nameWithType>、<xref:System.String.EndsWith%2A?displayProperty=nameWithType>と<xref:System.String.StartsWith%2A?displayProperty=nameWithType>メソッドは、文字列のインスタンスが指定した部分文字列を含むかどうかを判断し、 <xref:System.String.IndexOf%2A?displayProperty=nameWithType>、 <xref:System.String.IndexOfAny%2A?displayProperty=nameWithType>、<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>と<xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType>メソッドは、開始を返します文字列内の指定した部分文字列の位置。 メソッドを使用して、<xref:System.String?displayProperty=nameWithType>クラスの特定の文字列を検索するときにします。 使用して、<xref:System.Text.RegularExpressions.Regex>文字列内の特定のパターンを検索するクラスします。 詳細と例については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)します。  
  
 [「解説」に戻る](#remarks)  
  
<a name="static_vs_instance"></a>   
## <a name="static-vs-instance-methods"></a>静的ポートとします。インスタンス メソッド  
 正規表現パターンを定義した後は、2 つの方法のいずれかで、正規表現エンジンに提供できます。  
  
-   インスタンス化して、<xref:System.Text.RegularExpressions.Regex>正規表現を表すオブジェクト。 これを行うには、正規表現パターンを渡す、<xref:System.Text.RegularExpressions.Regex.%23ctor%2A>コンス トラクター。 A<xref:System.Text.RegularExpressions.Regex>オブジェクトは、変更は、インスタンス化するときに、 <xref:System.Text.RegularExpressions.Regex> 、正規表現でオブジェクトのオブジェクトの正規表現を変更することはできません。  
  
-   正規表現とを検索するテキストの両方を指定することによって、 `static` (`Shared` Visual Basic で)<xref:System.Text.RegularExpressions.Regex>メソッド。 これにより、正規表現を使用して明示的に作成せず、<xref:System.Text.RegularExpressions.Regex>オブジェクト。  
  
 すべて<xref:System.Text.RegularExpressions.Regex>パターンの識別方法が静的を含めるし、オーバー ロードのインスタンスします。  
  
 パターンを使用する前に、正規表現エンジンは、特定のパターンをコンパイルする必要があります。 <xref:System.Text.RegularExpressions.Regex>オブジェクトは不変で、これは、1 回限りの手順に発生するときに、<xref:System.Text.RegularExpressions.Regex>クラス コンス トラクターまたは静的メソッドが呼び出されます。 繰り返しを 1 つの正規表現をコンパイルする必要をなくすためには、正規表現エンジンは、静的メソッドの呼び出しで使用される、コンパイルされた正規表現をキャッシュします。 その結果、正規表現パターン一致メソッドでは、同等のパフォーマンスは、静的およびインスタンス メソッドを提供します。  
  
> [!IMPORTANT]
>  .NET Framework version 1.0 および 1.1 では、コンパイル済みのすべての正規表現が、インスタンスまたは静的メソッドで使用されたかどうかを呼び出して、キャッシュされました。 以降、.NET Framework 2.0 では、静的メソッドの呼び出しで使用される正規表現のみがキャッシュされます。  
  
 ただし、キャッシュ パフォーマンスに悪影響次の 2 つの場合。  
  
-   正規表現の数が多い静的メソッドの呼び出しを使用する場合。 既定では、正規表現エンジンは、15 個の最近使用した静的正規表現をキャッシュします。 アプリケーションでは、15 を超える静的正規表現を使用する場合は、一部の正規表現は再コンパイルする必要があります。 この再コンパイルを防ぐためには、増やすことができます、<xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=nameWithType>プロパティ。  
  
-   インスタンス化すると新しい<xref:System.Text.RegularExpressions.Regex>以前コンパイルされた正規表現を持つオブジェクト。 たとえば、次のコードは、テキスト ストリーム内で重複している単語を検索する正規表現を定義します。 例は、単一の正規表現を使用して、インスタンス化、新しい<xref:System.Text.RegularExpressions.Regex>テキストの各行を処理するオブジェクト。 これは、結果、正規表現のループの各イテレーションで再コンパイルします。  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#1)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#1)]  
  
     再コンパイルを防ぐためには、1 つのインスタンス化する必要があります<xref:System.Text.RegularExpressions.Regex>書き換えられた次の例に示すように、必要なすべてのコードにアクセスできるオブジェクト。  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#2)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#2)]  
  
 [「解説」に戻る](#remarks)  
  
<a name="regex_ops"></a>   
## <a name="performing-regular-expression-operations"></a>正規表現の操作を実行します。  
 インスタンスを作成するかどうかを<xref:System.Text.RegularExpressions.Regex>オブジェクトやメソッドを呼び出す、静的メソッドを呼び出し、<xref:System.Text.RegularExpressions.Regex>クラスは、次のパターン マッチング機能を提供しています。  
  
-   一致の検証。 呼び出す、<xref:System.Text.RegularExpressions.Regex.IsMatch%2A>一致が存在するかどうかを判断するメソッド。  
  
-   単一の一致を取得します。 呼び出す、<xref:System.Text.RegularExpressions.Regex.Match%2A>を取得するメソッド、<xref:System.Text.RegularExpressions.Match>は文字列または文字列の一部は、最初の一致を表すオブジェクト。 後続の一致するを呼び出すことによって取得できます、<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッド。  
  
-   すべての一致項目を取得します。 呼び出す、<xref:System.Text.RegularExpressions.Regex.Matches%2A>を取得するメソッド、<xref:System.Text.RegularExpressions.MatchCollection?displayProperty=nameWithType>は文字列または文字列の一部に見つかったすべての一致を表すオブジェクト。  
  
-   一致したテキストの置換します。 呼び出す、<xref:System.Text.RegularExpressions.Regex.Replace%2A>一致したテキストを置換するメソッド。 置換テキストは、正規表現を指定しても定義できます。 さらに、いくつかの<xref:System.Text.RegularExpressions.Regex.Replace%2A>メソッドには、<xref:System.Text.RegularExpressions.MatchEvaluator>パラメーター置換テキストをプログラムで定義することができます。  
  
-   入力文字列の部分から構成される文字列配列を作成します。 呼び出す、<xref:System.Text.RegularExpressions.Regex.Split%2A>正規表現で定義されている位置にある入力文字列を分割します。  
  
 そのパターン一致メソッドに加え、<xref:System.Text.RegularExpressions.Regex>クラスには、いくつかの特殊なメソッドが含まれています。  
  
-   <xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッド エスケープ文字が、正規表現または入力文字列で正規表現演算子として解釈可能性があります。  
  
-   <xref:System.Text.RegularExpressions.Regex.Unescape%2A>メソッドは、これらのエスケープ文字を削除します。  
  
-   <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドを定義済みの正規表現を含むアセンブリを作成します。 .NET Framework には、これらの特殊なアセンブリの例が含まれています、<xref:System.Web.RegularExpressions?displayProperty=nameWithType>名前空間。  
  
 [「解説」に戻る](#remarks)  
  
<a name="define_timeout"></a>   
## <a name="defining-a-time-out-value"></a>タイムアウト値を定義します。  
 .NET Framework では、大幅な機能とパターン マッチングで柔軟性を提供する、全機能装備の正規表現言語をサポートします。 ただし、コスト、能力と柔軟性が: パフォーマンスの低下のリスクです。 パフォーマンスを発揮する正規表現は驚くほど簡単に作成できます。 場合によっては、過度なバックトラッ キングに依存する操作を正規表現が正規表現パターンにほぼ一致するテキストの処理時に応答を停止する表示できます。 .NET Framework 正規表現エンジンの詳細については、次を参照してください。[正規の式の動作の詳細](~/docs/standard/base-types/details-of-regular-expression-behavior.md)します。 過度なバックトラッ キングの詳細については、次を参照してください。[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)します。  
  
 以降では、 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、正規表現一致タイムアウト間隔を定義することができます。 正規表現エンジンは、この時間間隔内で一致するものを識別できない場合、一致する操作がスローされます、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 ほとんどの場合は、正規表現エンジンこれにより、正規表現パターンにほぼ一致するテキストを一致させることによって、処理能力を浪費防ぎます。 それも可能性があります、ただし、タイムアウト間隔が設定されている低すぎる、または現在のマシンの負荷がパフォーマンスに全体のパフォーマンス低下を原因となったことです。  
  
 例外を処理する方法は、例外の原因によって異なります。 タイムアウト間隔の設定が低すぎるため、例外が発生した場合、または過剰なマシンの負荷のため、タイムアウト間隔を長くし、一致する操作を再試行できます。 正規表現が過度なバックトラッ キングに依存するために、例外が発生した場合は、一致が存在しないと、必要に応じて、ログ情報、正規表現パターンを変更するのに役立つことを想定できます。  
  
 タイムアウト間隔を設定するには呼び出すことによって、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> regular expression オブジェクトをインスタンス化するときにコンス トラクター。 静的メソッドに対して、タイムアウト間隔を設定のある一致するメソッドのオーバー ロードを呼び出すことによって、`matchTimeout`パラメーター。 タイムアウト値が明示的に設定しない場合、既定のタイムアウト値は次のように決定されます。  
  
-   アプリケーション全体のタイムアウトを使用して 1 つの場合は、値が存在します。 これをアプリケーション ドメインに適用されるタイムアウト値を指定できます、<xref:System.Text.RegularExpressions.Regex>オブジェクトがインスタンス化されたか、静的メソッドの呼び出しが行われます。 呼び出して、アプリケーション全体のタイムアウト値を設定することができます、<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>の文字列表現を割り当てるメソッドを<xref:System.TimeSpan>"REGEX_DEFAULT_MATCH_TIMEOUT"プロパティの値。  
  
-   値を使用して<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>アプリケーション全体のタイムアウト値が設定されていない場合、します。  
  
> [!IMPORTANT]
>  すべての正規表現パターン一致操作では、タイムアウト値を設定することをお勧めします。 詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)します。  
  
 [「解説」に戻る](#remarks)  
  
   
  
## Examples  
 次の例では、正規表現を使用して、繰り返し出現する文字列内の単語を確認してください。 正規表現`\b(?<word>\w+)\s+(\k<word>)\b`に次の表に示すように解釈できます。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`(?<word>\w+)`|ワード境界までの 1 つまたは複数の単語文字に一致します。 このキャプチャされたグループの名前を付けます`word`します。|  
|`\s+`|1 つ以上の空白文字と一致します。|  
|`(\k<word>)`|キャプチャされたグループという名前と一致`word`します。|  
|`\b`|ワード境界に一致します。|  
  
 [!code-cpp[Regex_Words#0](~/samples/snippets/cpp/VS_Snippets_CLR/Regex_Words/CPP/words.cpp#0)]
 [!code-csharp[Regex_Words#0](~/samples/snippets/csharp/VS_Snippets_CLR/Regex_Words/CS/words.cs#0)]
 [!code-vb[Regex_Words#0](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex_Words/VB/words.vb#0)]  
  
 次の例では、かどうか、文字列が通貨値を表すか、正しい形式を通貨値を表すを確認する正規表現の使用を示します。 ここでは、正規表現は動的に構築から、 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A?displayProperty=nameWithType>、 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>、 <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A?displayProperty=nameWithType>、<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>と<xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>ユーザーの現在のカルチャのプロパティ。 場合は、システムの現在のカルチャが EN-US で、結果の正規表現が`^\s*[\+-]?\s?\$?\s?(\d*\.?\d{2}?){1}$`します。 次の表に示すように、この正規表現を解釈できます。  
  
|パターン|説明|  
|-------------|-----------------|  
|`^`|文字列の先頭から開始します。|  
|`\s*`|0 個以上の空白文字と一致します。|  
|`[\+-]?`|正符号または負の符号の 0 個または 1 回一致します。|  
|`\s?`|0 個または 1 個の空白文字と一致します。|  
|`\$?`|ドル記号の 0 個または 1 回を一致します。|  
|`\s?`|0 個または 1 個の空白文字と一致します。|  
|`\d*`|0 個以上の 10 進数と一致します。|  
|`\.?`|0 個または 1 つの小数点記号に一致します。|  
|`\d{2}?`|0 個または 1 時間を 2 桁の 10 進数字に一致します。|  
|`(\d*\.?\d{2}?){1}`|少なくとも 1 回の小数点記号で区切られた整数部と小数桁の数字のパターンに一致します。|  
|`$`|文字列の末尾と一致します。|  
  
 この場合、正規表現を想定していますグループ区切り記号が有効な通貨文字列に含まれていないことがない桁の小数部または現在のカルチャによって定義されている桁の小数部の数のいずれかがある<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>プロパティ。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/cs/regex_example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/vb/regex_example1.vb#1)]  
  
 この例では正規表現が動的に構築される、ためにわかりませんデザイン時に正規表現として、正規表現エンジンによって、現在のカルチャの通貨記号、桁区切り記号、または正と負の記号が誤って解釈される可能性があるかどうか式言語の演算子。 誤ってトライグラフとして解釈を防ぐためには、例では動的に生成された各文字列を<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッド。  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Text.RegularExpressions.Regex" />クラスは変更不可 (読み取り専用) とスレッド セーフであります。 <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトは、任意のスレッドで作成され、スレッド間で共有できます。 詳細については、次を参照してください。[のスレッド セーフ](~/docs/standard/base-types/thread-safety-in-regular-expressions.md)します。</threadsafe>
    <altmember cref="T:System.Configuration.RegexStringValidator" />
    <related type="Article" href="~/docs/standard/base-types/regular-expressions.md">.NET Framework の正規表現</related>
    <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
    <related type="ExternalDocumentation" href="https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular expressions quick reference.docx">正規表現 - クイック リファレンス (Word 形式でダウンロード)</related>
    <related type="ExternalDocumentation" href="https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular expressions quick reference.pdf">正規表現 - クイック リファレンス (PDF 形式でダウンロード)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Regex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが保護されているに注意してください。派生したクラスによってのみ呼び出すことができます、<xref:System.Text.RegularExpressions.Regex>クラス。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : string -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex pattern" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。、 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)トピック。  
  
 呼び出す、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29>コンス トラクターの呼び出しと同じですが、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29>の値を持つコンス トラクター<xref:System.Text.RegularExpressions.RegexOptions.None>の`options`引数。  
  
 A<xref:System.Text.RegularExpressions.Regex>オブジェクトは不変、つまり、作成するときに定義した一致パターンに対してのみ使用できます。 ただし、再コンパイルせずに何回でもを使用します。  
  
 このコンス トラクターで定義されているアルファベット文字の大文字と小文字を試行する正規表現オブジェクトをインスタンス化`pattern`します。 大文字と小文字を使用して、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>コンス トラクター。  
  
   
  
## Examples  
 次の例は、このコンス トラクターを使用して、文字で始まる単語と一致する正規表現をインスタンス化する方法を示しています。"a"または"t"。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/constructors1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/constructors1.vb#1)]  
  
 正規表現パターンが単語を照合できません注、文字列の先頭に"The"の比較では既定では大文字小文字を区別するため。 大文字と小文字の例は、次を参照してください。、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29>コンス トラクター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage"><para>このコンス トラクターを作成、<see cref="T:System.Text.RegularExpressions.Regex" />を作成するアプリケーション ドメインの既定のタイムアウト値を使用するオブジェクト。 アプリケーション ドメインのタイムアウト値が定義されていない場合、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクト値を使用して<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトから、操作を防ぐことができます。作成するための推奨されるコンス トラクター、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトが<see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Regex(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化されたパターンと <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 情報を保持するオブジェクト。</param>
        <param name="context">このシリアル化のシリアル化先。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>シリアル化したデータを使用して、<see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> に含まれているパターンが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="info" /> に無効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> フラグが含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : string * System.Text.RegularExpressions.RegexOptions -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex (pattern, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">正規表現を変更する列挙値のビットごとの組み合わせ。</param>
        <summary>パターンを変更するオプションを使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。、 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)トピック。  
  
 A<xref:System.Text.RegularExpressions.Regex>オブジェクトは不変、つまり、作成するときに定義する一致パラメーターに対してのみ使用できます。 ただし、再コンパイルせずに何回でもを使用します。  
  
   
  
## Examples  
 次の例は、このコンス トラクターを使用して、文字で始まる単語と一致する正規表現をインスタンス化する方法を示しています。"a"または"t"。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/Constructors2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/Constructors2.vb#2)]  
  
 Matchcollection にために、テキストを開始する「、」という単語が含まれることに注意してください、`options`のパラメーターが小文字の比較を定義します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> に無効なフラグが含まれています。</exception>
        <block subset="none" type="usage"><para>このコンス トラクターを作成、<see cref="T:System.Text.RegularExpressions.Regex" />を作成するアプリケーション ドメインの既定のタイムアウト値を使用するオブジェクト。 アプリケーション ドメインのタイムアウト値が定義されていない場合、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクト値を使用して<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトから、操作を防ぐことができます。作成するための推奨されるコンス トラクター、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトが<see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex (pattern, options, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">正規表現を変更する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>パターンを変更するオプションと、パターン マッチ メソッドがタイムアウトするまでに一致を試みる時間を指定する値を使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。、 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)トピック。  
  
 A<xref:System.Text.RegularExpressions.Regex>オブジェクトは不変、つまり、作成するときに定義する一致パターンに対してのみ使用できます。 ただし、再コンパイルせずに何回でもを使用します。  
  
 `matchTimeout`パラメーターを指定期間、パターン一致メソッドがタイムアウトする前に、検索ましょう。パターン一致メソッドをスローする時間間隔で一致するものがない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 `matchTimeout` アプリケーション ドメインに対して定義されている既定のタイムアウト値を上書き、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 インスタンスのパターン マッチングのメソッドを確認、`matchTimeout`タイムアウト間隔には、次が含まれます。  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%2A>  
  
-   <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>  
  
 入力の処理時に応答を停止させない過度なバックトラッ キングに依存する正規表現の使用を防止するタイムアウト間隔を設定する近い一致が含まれています。 詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)します。 妥当なタイムアウト間隔を設定するには、次の要因を検討します。  
  
-   長さと複雑さの正規表現パターン。 時間が長くより複雑な正規表現では、短くてわかりやすいものよりも時間が必要です。  
  
-   予想されるマシンの負荷。 処理では、CPU とメモリ使用率が高いシステムでより多くの時間がかかります。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>インスタンスを作成するコンス トラクター、 <xref:System.Text.RegularExpressions.Regex> 1 秒のタイムアウト値を持つオブジェクト。 正規表現パターン `(a+)+$`は、行の末尾にある 1 つ以上の "a" 文字の 1 つ以上のシーケンスに一致しますが、過度なバックトラッキングの対象になります。 場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>が例では、スローされると、最大値は 3 秒のタイムアウト値が増加します。 それ以外の場合、パターンに一致する試行を破棄します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/vb/ctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
        <block subset="none" type="usage"><para>設定することをお勧め、<paramref name="matchTimeout" />に 2 秒などの適切な値のパラメーター。 タイムアウトを指定することで無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンが若干優れたパフォーマンスを提供します。 ただし、タイムアウトは、次の条件下でのみ無効にする必要があります。 
-正規表現によって処理される入力は既知の信頼されたソースから派生または静的テキストで構成されます。 これには、動的にユーザーが入力されているテキストが含まれません。  
  
-効率的に処理することを確認する正規表現パターンが十分にテストされているときは、一致すると、一致以外の場合と近い一致します。  
  
場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングが発生することがわかっている言語要素は含まれていません。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/34df1152-0b22-4a1c-a76c-3c28c47b70d8">バックトラッキング</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="CacheSize">
      <MemberSignature Language="C#" Value="public static int CacheSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CacheSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CacheSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CacheSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CacheSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheSize : int with get, set" Usage="System.Text.RegularExpressions.Regex.CacheSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンパイルされた正規表現の現在の静的キャッシュ内の最大エントリ数を取得または設定します。</summary>
        <value>静的キャッシュの最大エントリ数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex>クラスの静的メソッドの呼び出しで使用されるコンパイル済みの正規表現の内部キャッシュに格納します。 設定操作で指定された値が現在のキャッシュ サイズよりも小さい場合は、キャッシュ サイズが指定された値と等しくなるまでにキャッシュ エントリが破棄されます。  
  
 既定では、キャッシュは、15 静的正規表現のコンパイルを保持します。 アプリケーションは通常、キャッシュのサイズを変更する必要はありません。 使用して、<xref:System.Text.RegularExpressions.Regex.CacheSize%2A>プロパティのキャッシュを一般に大きいキャッシュがある場合または無効にする場合だけです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作の値が 0 より小さい値です。</exception>
        <block subset="none" type="usage"><para>前のバージョンの .NET Framework で、 [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]、両方の静的正規表現を使用およびインスタンス メソッドの呼び出しがキャッシュされました。 以降では、 [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]、正規表現のみ静的メソッドの呼び出しで使用される式がキャッシュされます。</para></block>
      </Docs>
    </Member>
    <Member MemberName="capnames">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Hashtable capnames;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable capnames" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capnames" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capnames As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Collections::Hashtable ^ capnames;" />
      <MemberSignature Language="F#" Value="val mutable capnames : System.Collections.Hashtable" Usage="System.Text.RegularExpressions.Regex.capnames" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CapNames">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary CapNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary CapNames" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CapNames" />
      <MemberSignature Language="VB.NET" Value="Protected Property CapNames As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ CapNames { System::Collections::IDictionary ^ get(); void set(System::Collections::IDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CapNames : System.Collections.IDictionary with get, set" Usage="System.Text.RegularExpressions.Regex.CapNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>名前付きキャプチャ対象グループをインデックス値にマップする辞書を取得または設定します。</summary>
        <value>名前付きキャプチャ対象グループをインデックス値にマップする辞書。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが保護されているに注意してください。派生したクラスからのみアクセスできる、<xref:System.Text.RegularExpressions.Regex>クラス。  
  
 設定操作がプロパティに割り当てられた値を変換しようとした場合、<xref:System.Collections.Hashtable>オブジェクト。 この変換に失敗した場合、<xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType>コンス トラクター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">セット操作で <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> プロパティに割り当てられた値は、<see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="caps">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Hashtable caps;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable caps" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.caps" />
      <MemberSignature Language="VB.NET" Value="Protected Friend caps As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Collections::Hashtable ^ caps;" />
      <MemberSignature Language="F#" Value="val mutable caps : System.Collections.Hashtable" Usage="System.Text.RegularExpressions.Regex.caps" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Caps">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary Caps { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Caps" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Caps" />
      <MemberSignature Language="VB.NET" Value="Protected Property Caps As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ Caps { System::Collections::IDictionary ^ get(); void set(System::Collections::IDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Caps : System.Collections.IDictionary with get, set" Usage="System.Text.RegularExpressions.Regex.Caps" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>番号付きのキャプチャ対象グループをインデックス値にマップする辞書を取得または設定します。</summary>
        <value>番号付きのキャプチャ対象グループをインデックス値にマップする辞書。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティが保護されているに注意してください。派生したクラスからのみアクセスできる、<xref:System.Text.RegularExpressions.Regex>クラス。  
  
 設定操作がプロパティに割り当てられた値を変換しようとした場合、<xref:System.Collections.Hashtable>オブジェクト。 この変換に失敗した場合、<xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType>コンス トラクター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">セット操作で <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> プロパティに割り当てられた値は、<see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="capsize">
      <MemberSignature Language="C#" Value="protected internal int capsize;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly int32 capsize" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capsize" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capsize As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected public: int capsize;" />
      <MemberSignature Language="F#" Value="val mutable capsize : int" Usage="System.Text.RegularExpressions.Regex.capsize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="capslist">
      <MemberSignature Language="C#" Value="protected internal string[] capslist;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string[] capslist" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capslist" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capslist As String() " />
      <MemberSignature Language="C++ CLI" Value="protected public: cli::array &lt;System::String ^&gt; ^ capslist;" />
      <MemberSignature Language="F#" Value="val mutable capslist : string[]" Usage="System.Text.RegularExpressions.Regex.capslist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CompileToAssembly">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現をコンパイルして、ディスク上の単一のアセンブリに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

.NET Core で呼び出し、`Regex.CompileToAssembly`メソッド throw を<xref:System.PlatformNotSupportedException>; アセンブリの書き込みはサポートされていません。
  
       ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname);" />
      <MemberSignature Language="F#" Value="static member CompileToAssembly : System.Text.RegularExpressions.RegexCompilationInfo[] * System.Reflection.AssemblyName -&gt; unit" Usage="System.Text.RegularExpressions.Regex.CompileToAssembly (regexinfos, assemblyname)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
        <param name="assemblyname">アセンブリのファイル名。</param>
        <summary>1 つ以上の指定した <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをコンパイルして、名前付きアセンブリに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29>メソッドで定義されている各正規表現での .NET Framework アセンブリの生成、`regexinfos`配列は、クラスによって表されます。 通常、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29>コンパイルされた正規表現のアセンブリを生成する別のアプリケーションからメソッドが呼び出されます。 アセンブリに含まれる各正規表現では、次の特徴があります。  
  
-   派生される、<xref:System.Text.RegularExpressions.Regex>クラス。  
  
-   定義されている完全修飾名が割り当てられている、`fullnamespace`と`name`、対応するパラメーター<xref:System.Text.RegularExpressions.RegexCompilationInfo>オブジェクト。  
  
-   既定 (またはパラメーターなし) があるコンス トラクター。  
  
 通常、アセンブリまたはアセンブリを作成するコードから分離されたアプリケーションでインスタンス化してコンパイルされた正規表現を使用するコードが見つかりました。  
  
   
  
## Examples  
 次の例では、RegexLib.dll という名前のアセンブリを作成します。 アセンブリには、2 つのコンパイルされた正規表現が含まれています。 まず、`Utilities.RegularExpressions.DuplicatedString`と同じ 2 つの連続した単語と一致します。 2 番目の`Utilities.RegularExpressions.EmailAddress`文字列は、正しい形式の電子メール アドレスがあるかどうかを確認します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile1.vb#1)]  
  
 重複する単語の文字列をチェックする正規表現は、インスタンス化し、次の例で使用されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 この 2 番目の例のコンパイルが成功したでは、プロジェクトに追加する (最初の例で、アセンブリが作成された) RegexLib.dll への参照が必要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。  
  
- または - 
<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</exception>
        <block subset="none" type="usage"><para>搭載したシステムで開発している場合[!INCLUDE[net_v45](~/includes/net-v45-md.md)]またはターゲットのインストールされているそのポイント リリース、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]を使用して、<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />コンパイルされる正規表現を格納するアセンブリを作成します。 システム上のアセンブリを持つことに、正規表現のいずれかを使用しようとしています。[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]例外をスローします。 この問題を回避するには、次のいずれかの方法を実行します。 
-を搭載したシステムでコンパイルされた正規表現を含むアセンブリをビルドする[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降のバージョンがインストールされているのではなく。  
  
-呼び出し元の代わりに<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />アセンブリからコンパイルされた正規表現を取得する、いずれかの静的な使用またはインスタンスと<see cref="T:System.Text.RegularExpressions.Regex" />メソッド、<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />インスタンス化するときのオプション、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトまたは正規表現を呼び出すパターン一致メソッドにします。</para></block>
        <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">コンパイルと再利用</related>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname, cli::array &lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="static member CompileToAssembly : System.Text.RegularExpressions.RegexCompilationInfo[] * System.Reflection.AssemblyName * System.Reflection.Emit.CustomAttributeBuilder[] -&gt; unit" Usage="System.Text.RegularExpressions.Regex.CompileToAssembly (regexinfos, assemblyname, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" />
      </Parameters>
      <Docs>
        <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
        <param name="assemblyname">アセンブリのファイル名。</param>
        <param name="attributes">アセンブリに適用する属性を定義する配列。</param>
        <summary>指定した 1 つ以上の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをコンパイルして、指定した属性を持つ名前付きアセンブリに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29>メソッドで定義されている各正規表現での .NET Framework アセンブリの生成、`regexinfos`配列は、クラスによって表されます。 通常、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29>コンパイルされた正規表現のアセンブリを生成する別のアプリケーションからメソッドが呼び出されます。 アセンブリに含まれる各正規表現では、次の特徴があります。  
  
-   派生される、<xref:System.Text.RegularExpressions.Regex>クラス。  
  
-   定義されている完全修飾名が割り当てられている、`fullnamespace`と`name`、対応するパラメーター<xref:System.Text.RegularExpressions.RegexCompilationInfo>オブジェクト。  
  
-   既定 (またはパラメーターなし) があるコンス トラクター。  
  
 通常、アセンブリまたはアセンブリを作成するコードから分離されたアプリケーションでインスタンス化してコンパイルされた正規表現を使用するコードが見つかりました。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドは、特定の言語のクラス定義のキーワードを使用するのではなくメソッドの呼び出しから .NET Framework アセンブリを生成します (など`class`(C#) または`Class`.`End Class` Visual basic の場合) ことに、開発言語の標準的な属性の構文を使用して、アセンブリに割り当てられる .NET Framework の属性はできません。 `attributes`パラメーター、アセンブリに適用される属性を定義するための方法を提供します。 アセンブリに適用する属性ごとに、次の手順を実行します。  
  
1.  配列を作成する<xref:System.Type>呼び出そうとする属性のコンス トラクターのパラメーターの型を表すオブジェクト。  
  
2.  取得、<xref:System.Type>新しいアセンブリに適用する属性クラスを表すオブジェクト。  
  
3.  呼び出す、<xref:System.Type.GetConstructor%2A>メソッド、属性の<xref:System.Type>オブジェクトを取得する、<xref:System.Reflection.ConstructorInfo>呼び出そうとする属性のコンス トラクターを表すオブジェクト。 渡す、<xref:System.Type.GetConstructor%2A>メソッド、配列の<xref:System.Type>コンス トラクターのパラメーターの型を表すオブジェクト。  
  
4.  作成、<xref:System.Object>属性のコンス トラクターに渡すパラメーターを定義する配列。  
  
5.  インスタンスを作成、<xref:System.Reflection.Emit.CustomAttributeBuilder>コンス トラクターに渡して、オブジェクト、<xref:System.Reflection.ConstructorInfo>オブジェクトは、手順 3. で取得し、<xref:System.Object>手順 4. で作成された配列。  
  
 これらの配列を渡すことができますし、<xref:System.Reflection.Emit.CustomAttributeBuilder>オブジェクトの代わりに、`attributes`パラメーターを<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=nameWithType>メソッド。  
  
   
  
## Examples  
 次の例は、RegexLib.dll という名前のアセンブリを作成し、適用、<xref:System.Reflection.AssemblyTitleAttribute>属性をします。 アセンブリには、2 つのコンパイルされた正規表現が含まれています。 まず、`Utilities.RegularExpressions.DuplicatedString`と同じ 2 つの連続した単語と一致します。 2 番目の`Utilities.RegularExpressions.EmailAddress`文字列は、正しい形式の電子メール アドレスがあるかどうかを確認します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile3.vb#3)]  
  
 確認することができます、<xref:System.Reflection.AssemblyTitleAttribute>属性が ILDasm などのリフレクション ユーティリティでマニフェストを調べることで、アセンブリに適用されています。  
  
 重複する単語の文字列をチェックする正規表現は、インスタンス化し、次の例で使用されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 この 2 番目の例のコンパイルが成功したでは、プロジェクトに追加する (最初の例で、アセンブリが作成された) RegexLib.dll への参照が必要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。  
  
- または - 
<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</exception>
        <block subset="none" type="usage"><para>搭載したシステムで開発している場合[!INCLUDE[net_v45](~/includes/net-v45-md.md)]またはターゲットのインストールされているそのポイント リリース、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]を使用して、<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />コンパイルされる正規表現を格納するアセンブリを作成します。 システム上のアセンブリを持つことに、正規表現のいずれかを使用しようとしています。[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]例外をスローします。 この問題を回避するには、次のいずれかの方法を実行します。 
-を搭載したシステムでコンパイルされた正規表現を含むアセンブリをビルドする[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降のバージョンがインストールされているのではなく。  
  
-呼び出し元の代わりに<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />アセンブリからコンパイルされた正規表現を取得する、いずれかの静的な使用またはインスタンスと<see cref="T:System.Text.RegularExpressions.Regex" />メソッド、<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />インスタンス化するときのオプション、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトまたは正規表現を呼び出すパターン一致メソッドにします。</para></block>
        <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">コンパイルと再利用</related>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname, cli::array &lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ attributes, System::String ^ resourceFile);" />
      <MemberSignature Language="F#" Value="static member CompileToAssembly : System.Text.RegularExpressions.RegexCompilationInfo[] * System.Reflection.AssemblyName * System.Reflection.Emit.CustomAttributeBuilder[] * string -&gt; unit" Usage="System.Text.RegularExpressions.Regex.CompileToAssembly (regexinfos, assemblyname, attributes, resourceFile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" />
        <Parameter Name="resourceFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
        <param name="assemblyname">アセンブリのファイル名。</param>
        <param name="attributes">アセンブリに適用する属性を定義する配列。</param>
        <param name="resourceFile">アセンブリに含める Win32 リソース ファイルの名前。</param>
        <summary>指定した 1 つ以上の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトと、指定した 1 つのリソース ファイルをコンパイルして、指定した属性を持つ名前付きアセンブリに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [\]、AssemblyName を指定して\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29 > メソッドで定義されている各正規表現での .NET Framework アセンブリの生成、`regexinfos`配列は、クラスによって表されます。 通常、[\]、AssemblyName を指定して\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29 > メソッドはコンパイルされた正規表現のアセンブリを生成する別のアプリケーションから呼び出されます。 アセンブリに含まれる各正規表現では、次の特徴があります。  
  
-   派生される、<xref:System.Text.RegularExpressions.Regex>クラス。  
  
-   定義されている完全修飾名が割り当てられている、`fullnamespace`と`name`、対応するパラメーター<xref:System.Text.RegularExpressions.RegexCompilationInfo>オブジェクト。  
  
-   既定 (またはパラメーターなし) があるコンス トラクター。  
  
 通常、アセンブリまたはアセンブリを作成するコードから分離されたアプリケーションでインスタンス化してコンパイルされた正規表現を使用するコードが見つかりました。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドは、特定の言語のクラス定義のキーワードを使用するのではなくメソッドの呼び出しから .NET Framework アセンブリを生成します (など`class`(C#) または`Class`.`End Class` Visual basic の場合) ことに、開発言語の標準的な属性の構文を使用して、アセンブリに割り当てられる .NET Framework の属性はできません。 `attributes`パラメーター、アセンブリに適用される属性を定義するための方法を提供します。 アセンブリに適用する属性ごとに、次の手順を実行します。  
  
1.  配列を作成する<xref:System.Type>呼び出そうとする属性のコンス トラクターのパラメーターの型を表すオブジェクト。  
  
2.  取得、<xref:System.Type>新しいアセンブリに適用する属性クラスを表すオブジェクト。  
  
3.  呼び出す、<xref:System.Type.GetConstructor%2A>メソッド、属性の<xref:System.Type>オブジェクトを取得する、<xref:System.Reflection.ConstructorInfo>呼び出そうとする属性のコンス トラクターを表すオブジェクト。 渡す、<xref:System.Type.GetConstructor%2A>メソッド、配列の<xref:System.Type>コンス トラクターのパラメーターの型を表すオブジェクト  
  
4.  作成、<xref:System.Object>属性のコンス トラクターに渡すパラメーターを定義する配列。  
  
5.  インスタンスを作成、<xref:System.Reflection.Emit.CustomAttributeBuilder>コンス トラクターに渡して、オブジェクト、<xref:System.Reflection.ConstructorInfo>オブジェクトは、手順 3. で取得し、<xref:System.Object>手順 4. で作成された配列。  
  
 これらの配列を渡すことができますし、<xref:System.Reflection.Emit.CustomAttributeBuilder>オブジェクトの代わりに、`attributes`パラメーターを [\]、AssemblyName を指定して\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29 > メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。  
  
- または - 
<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><paramref name="resourceFile" /> パラメーターは無効な Win32 リソース ファイルを指定します。</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="resourceFile" /> パラメーターで指定されているファイルが見つかりません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</exception>
        <block subset="none" type="usage"><para>搭載したシステムで開発している場合[!INCLUDE[net_v45](~/includes/net-v45-md.md)]またはターゲットのインストールされているそのポイント リリース、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]を使用して、<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />コンパイルされる正規表現を格納するアセンブリを作成します。 システム上のアセンブリを持つことに、正規表現のいずれかを使用しようとしています。[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]例外をスローします。 この問題を回避するには、次のいずれかの方法を実行します。 
-を搭載したシステムでコンパイルされた正規表現を含むアセンブリをビルドする[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降のバージョンがインストールされているのではなく。  
  
-呼び出し元の代わりに<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />アセンブリからコンパイルされた正規表現を取得する、いずれかの静的な使用またはインスタンスと<see cref="T:System.Text.RegularExpressions.Regex" />メソッド、<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />インスタンス化するときのオプション、<see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトまたは正規表現を呼び出すパターン一致メソッドにします。</para></block>
        <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">コンパイルと再利用</related>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="public static string Escape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Escape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Escape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Escape(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Escape : string -&gt; string" Usage="System.Text.RegularExpressions.Regex.Escape str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">変換対象のテキストを含んでいる入力文字列。</param>
        <summary>文字 (\\、*、+、?、|、{、[、(、)、^、$、.、#、および空白) をエスケープ コードに置き換えることにより、このような文字をエスケープします。 これにより、正規表現エンジンではこのような文字がメタ文字ではなくリテラルとして解釈されます。</summary>
        <returns>メタ文字がエスケープされた形式に変換された文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Escape%2A> 正規表現エンジンは文字リテラルとして含まれる任意のメタ文字を解釈するため、文字列に変換します。 たとえば、正規表現を直接開きかっこと終わりかっこ ([と]) テキストから区切られたコメントを抽出するように設計されたを検討してください。 次の例では、正規表現"[(.*?)]"は文字クラスとして解釈されます。 入力テキストに埋め込まれているコメントを一致するのではなくは、正規表現は、各開始または終わりかっこ、ピリオド、アスタリスク、または疑問符 () と一致します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#1)]  
  
 ただし、角かっこがエスケープを渡すことによって、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドで、入力文字列に埋め込まれているコメントに一致する正規表現が成功するとします。 次に例を示します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#2)]  
  
 前に円記号で静的なテキストを使用して定義されている正規表現、メタ文字としてではなく、リテラルに解釈される文字をエスケープすることができます (\\) 呼び出すことによっても、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッド。 デザイン時に、不明な文字を使用して動的に定義されている正規表現での呼び出し、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドは、正規表現エンジンを解釈する個々 の文字リテラルとしてではなく確実に特に重要ですメタ文字として。  
  
> [!NOTE]
>  場合は、正規表現パターンには、番号記号 (#) またはリテラルの空白文字が含まれている必要がありますエスケープする必要がで入力テキストが解析された場合、<xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType>オプションを有効にします。  
  
 中に、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドは、直線をエスケープ角かっこ ([) を開き、中かっこ ({) の文字を開いて、それをエスケープしません、対応する文字の終了 (]})。 ほとんどの場合、これらをエスケープする必要はありません。 右かっこまたは中かっこの前に、対応する開始文字場合、正規表現エンジン リテラルとして解釈します。 開き角かっこ、または中かっこは、メタ文字として解釈されますが、正規表現エンジンは最初に対応する終了としてメタ文字を解釈します。 明示的に円記号を付けることによって、右角かっこまたは中かっこをエスケープする必要があります目的の動作でない場合 (\\) 文字。 例については、例を参照してください。  
  
   
  
## Examples  
 次の例では、テキストからコメントを抽出します。 コメントが開始コメント記号と、ユーザーが選択されている終了コメント記号で区切られていると想定しています。 渡されるコメント記号は、解釈するのであるため、<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッド メタ文字として解釈することはできません。 さらに、例では、明示的にチェックします終了コメント記号をユーザーが入力したが、右角かっこ (]) または中かっこ (}) がかどうか。 場合は、円記号 (\\) が解釈できるように、角かっこまたは中かっこに付加されます。 例を使用してもなお、<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>の開始と終了のコメント記号と共にコメントではなく、コメントのみを表示するコレクション。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="str" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f49cc9cc-db7d-4058-8b8a-422bc08b29b0">正規表現での文字のエスケープ</related>
      </Docs>
    </Member>
    <Member MemberName="factory">
      <MemberSignature Language="C#" Value="protected internal System.Text.RegularExpressions.RegexRunnerFactory factory;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Text.RegularExpressions.RegexRunnerFactory factory" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.factory" />
      <MemberSignature Language="VB.NET" Value="Protected Friend factory As RegexRunnerFactory " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Text::RegularExpressions::RegexRunnerFactory ^ factory;" />
      <MemberSignature Language="F#" Value="val mutable factory : System.Text.RegularExpressions.RegexRunnerFactory" Usage="System.Text.RegularExpressions.Regex.factory" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexRunnerFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Regex ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Regex ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="regex.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーは <see cref="M:System.Object.Finalize" /> をオーバーライドし、より詳細なドキュメントがそのトピックで使用できるようになる場合があります。

<see cref="T:System.Object" /> がガベージ コレクションにより収集される前に、その <see cref="T:System.Object" /> がリソースを解放し、その他のクリーンアップ操作を実行できるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupNames">
      <MemberSignature Language="C#" Value="public string[] GetGroupNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetGroupNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGroupNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetGroupNames();" />
      <MemberSignature Language="F#" Value="member this.GetGroupNames : unit -&gt; string[]" Usage="regex.GetGroupNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>正規表現で使用されるキャプチャ グループ名の配列を返します。</summary>
        <returns>グループ名の文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 グループ名のコレクションには、式のキャプチャ グループの名前に使用される文字列のセットが含まれています。 キャプチャ グループが明示的に指定がない場合でも自動的に割り当てられている数値の名前 (「0」、「1」、「2」、「3」およびなど)。 グループは、正規表現パターンに一致するすべての文字列「0」の名前。 番号付きグループに明示的に名前付きグループの前に、コレクション内と、正規表現パターンで定義されている順序で名前付きのグループが表示されます。  
  
 使用することができます、<xref:System.Array.Length%2A>正規表現でのグループの数を決定するには、このメソッドによって返される配列のプロパティ。  
  
   
  
## Examples  
 次の例は汎用的な定義`ShowMatches`を正規表現のグループと一致したテキストの名前を表示するメソッド。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/cs/getgroupnames1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/vb/getgroupnames1.vb#1)]  
  
 この場合は、正規表現パターンで`\b(?<FirstWord>\w+)\s?((\w+)\s)*(?<LastWord>\w+)?(?<Punctuation>\p{Po})`単純な文を解析して、最初の単語、最後の単語、および終了区切り記号を識別するためのものです。 次の表は、正規表現パターンを解釈する方法を示しています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`(?<FirstWord>\w+)`|1 つ以上の単語文字に一致します。 これは、`FirstWord`という名前のグループ。|  
|\s?|0 個または 1 個の空白文字と一致します。|  
|(\w+)|1 つ以上の単語文字に一致します。 これが 2 番目のキャプチャ グループです。|  
|\s|空白文字と一致します。|  
|((\w+)\s)*|1 つまたは複数の単語文字の後に空白文字の 0 個以上の出現と一致します。 これが最初のキャプチャ グループです。|  
|(?\<LastWord > \w+) でしょうか。|1 つまたは複数の単語文字の 0 個または 1 回を一致します。 これは、`LastWord`という名前のグループ。|  
|(?\<句読点 > \p{Po})|Unicode カテゴリは、区切り文字に一致させるその他。 これは、`Punctuation`という名前のグループ。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b">正規表現でのグループ化構成体</related>
      </Docs>
    </Member>
    <Member MemberName="GetGroupNumbers">
      <MemberSignature Language="C#" Value="public int[] GetGroupNumbers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] GetGroupNumbers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGroupNumbers () As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ GetGroupNumbers();" />
      <MemberSignature Language="F#" Value="member this.GetGroupNumbers : unit -&gt; int[]" Usage="regex.GetGroupNumbers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>配列内のグループ名に対応したキャプチャ グループ番号の配列を返します。</summary>
        <returns>グループ番号の整数配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名前のないと、名前付きキャプチャ グループは、番号でアクセスできます。 名前のないグループの番号が左から右 1 から開始します。 (インデックス 0 (ゼロ) でキャプチャ グループ全体を表します一致します。)名前付きグループは左から右 1 大きくなった番号以降に番号数よりも、名前のないキャプチャ グループです。  
  
 文字列の名前での代わりに、番号でグループを参照するより高速アクセスを提供できます。  
  
   
  
## Examples  
 次の例では、正規表現に`\b((?<word>\w+)\s*)+(?<end>[.?!])`文に一致します。 正規表現には、次の 3 つのキャプチャ グループが含まれています名前のないグループに続く可能性があります。 空白文字と共に 1 つの単語をキャプチャする。という名前のグループ`word`; 文では、個々 の単語をキャプチャして、グループの名前を`end`句読点、文の終了をキャプチャします。 例では、<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A>すべてキャプチャの数を取得するメソッドをグループ化とし、キャプチャされた文字列が表示されます。 さらに、<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A>を名前付きグループに特定の番号付きグループが対応かどうかを示すメソッドを使用します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNumbers#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/cs/getgroupnumbers1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNumbers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/vb/getgroupnumbers1.vb#1)]  
  
 この正規表現パターンの解釈を次の表に示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`(?<word>\w+)`|1 つまたは複数の単語文字に一致し、一致した文字列をという名前のグループに割り当てる`word`します。|  
|`\s*`|0 個以上の空白文字と一致します。|  
|`((?<word>\w+)\s*)`|割り当てる、`word`キャプチャ グループのいずれかの後に、最初のキャプチャ グループに空白文字をキャプチャします。|  
|`((?<word>\w+)\s*)+`|任意の空白文字 1 つ以上の時間後に 1 つまたは複数の単語文字のパターンに一致します。|  
|`(?<end>[.?!])`|ピリオド、疑問符、または感嘆符に一致します。 一致した文字を割り当てて、`end`キャプチャ グループです。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b">正規表現でのグループ化構成体</related>
      </Docs>
    </Member>
    <Member MemberName="GroupNameFromNumber">
      <MemberSignature Language="C#" Value="public string GroupNameFromNumber (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GroupNameFromNumber(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupNameFromNumber (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GroupNameFromNumber(int i);" />
      <MemberSignature Language="F#" Value="member this.GroupNameFromNumber : int -&gt; string" Usage="regex.GroupNameFromNumber i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">対応するグループ名に変換するグループ番号。</param>
        <summary>指定したグループ番号に対応するグループ名を取得します。</summary>
        <returns>指定したグループ番号に関連付けられたグループ名を含んでいる文字列。 <paramref name="i" /> に対応するグループ名がない場合、このメソッドは <see cref="F:System.String.Empty" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正規表現パターンでは、名前付きまたは番号付きキャプチャ グループ、パターン一致内の部分式を表すを含めることができます。 番号付きグループは、構文で区切られます (*subexpression*) と正規表現内の順序に基づいて数値が割り当てられます。 名前付きグループは、構文で区切られます (?`<`*名前*`>`*subexpression*) または (でしょうか '。*名前*'*subexpression*) ここで、*名前*部分式を識別する名前を指定します。 (詳しくは、「[正規表現でのグループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」をご覧ください)。<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A>メソッドは名前付きのグループと正規表現内の序数位置によって、番号付きグループの両方を識別します。 序数位置 0 は、常に正規表現全体を表します。 すべての番号付きグループは、正規表現パターン内の実際の位置に関係なく、名前付きグループの前にカウントされます。  
  
 場合`i`数は、メソッドは、名前付きグループのグループの名前を返します。 場合`i`数は、名前のないグループのメソッドは、数値の文字列表現を返します。 たとえば場合、`i`は 1 です。 メソッドは"1"を返します。 場合`i`は、キャプチャ グループの数を返します<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 このメソッドによって返される値を取得し、使用するパターン一致が見つかった場合、<xref:System.Text.RegularExpressions.Group>からキャプチャされたグループを表すオブジェクトを<xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=nameWithType>プロパティ。 <xref:System.Text.RegularExpressions.GroupCollection>によってオブジェクトが返される、<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>プロパティ。  
  
   
  
## Examples  
 次の例では、米国の都市名、状態の名前、および郵便番号を含む住所行に一致する正規表現パターンを定義します。 この例では、<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A>キャプチャ グループの名前を取得します。 これらの名前を使用して、一致するものを対応するキャプチャ グループを取得します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GroupNameFromNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/cs/groupnamefromnumberex.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GroupNameFromNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/vb/groupnamefromnumberex.vb#1)]  
  
 正規表現パターンは、次の式によって定義されます。  
  
 `(?<city>[A-Za-z\s]+), (?<state>[A-Za-z]{2}) (?<zip>\d{5}(-\d{4})?)`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`(?<city>[A-Za-z\s]+)`|1 つまたは複数の英字または空白文字と一致します。 このキャプチャされたグループの名前を割り当てる`city`します。|  
|`,`|空白文字が続くコンマ (,) と一致します。|  
|`(?<state>[A-Za-z]{2})`|2 つのアルファベット文字と一致します。 このキャプチャされたグループの名前を割り当てる`state`します。 このグループの後に空白文字を指定する必要があります。|  
|`(?<zip>\d{5}(-\d{4})?)`|次の 4 つの数字が続くハイフンの 0 個または 1 回の後に 5 桁の数字と一致します。 このキャプチャされたグループの名前を割り当てる`zip`します。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b">グループ化構成体</related>
      </Docs>
    </Member>
    <Member MemberName="GroupNumberFromName">
      <MemberSignature Language="C#" Value="public int GroupNumberFromName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GroupNumberFromName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupNumberFromName (name As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GroupNumberFromName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GroupNumberFromName : string -&gt; int" Usage="regex.GroupNumberFromName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">対応するグループ番号に変換するグループ名。</param>
        <summary>指定したグループ名に対応するグループ番号を返します。</summary>
        <returns>指定したグループ名に対応するグループ番号。<paramref name="name" /> が有効なグループ名でない場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正規表現パターンでは、名前付きまたは番号付きキャプチャ グループ、パターン一致内の部分式を表すを含めることができます。 番号付きグループは、構文で区切られます (*subexpression*) と正規表現内の順序に基づいて数値が割り当てられます。 名前付きグループは、構文で区切られます (?`<`*名前*`>`*subexpression*) または (でしょうか '。*名前*'*subexpression*) ここで、*名前*部分式を識別する名前を指定します。 (詳しくは、「[正規表現でのグループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」をご覧ください)。<xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A>メソッドは名前付きのグループと正規表現内の序数位置によって、番号付きグループの両方を識別します。 序数位置 0 は、常に正規表現全体を表します。 すべての番号付きグループは、正規表現パターン内の実際の位置に関係なく、名前付きグループの前にカウントされます。  
  
 場合`name`番号メソッドを返します。、正規表現パターンに存在するグループ番号の文字列表現です。 場合`name`に対応する名前付きメソッドの正規表現パターンに存在するグループを取得するには、その対応する番号を返します。 比較`name`グループ名は大文字小文字を区別します。 場合`name`対応しないキャプチャ グループの名前に、またはメソッドのキャプチャ グループの数の文字列表現を-1 を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b">グループ化構成体</related>
      </Docs>
    </Member>
    <Member MemberName="InfiniteMatchTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteMatchTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteMatchTimeout;" />
      <MemberSignature Language="F#" Value=" staticval mutable InfiniteMatchTimeout : TimeSpan" Usage="System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パターン一致の操作がタイムアウトしないことを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>クラスのコンス トラクターと静的な一致メソッドの使用数、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>パターン一致を検索する試行がタイムアウトしないでことを示す定数。  
  
> [!WARNING]
>  正規表現エンジンのタイムアウト値を設定する<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>正規表現パターンにほぼ一致するテキストを処理するときに応答を停止するように見えます過度なバックトラッ キングに依存する正規表現が発生することができます。 タイムアウトを無効にした場合、正規表現が過度なバックトラッ キングに依存しないし、正規表現パターンにほぼ一致するテキストを処理することを確認する必要があります。  
>   
>  バックトラッ キングの処理についての詳細については、次を参照してください。[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)します。  
  
 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>の値として定数を指定することができます、`matchTimeout`は次のメンバーの引数。  
  
-   <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="InitializeReferences">
      <MemberSignature Language="C#" Value="protected void InitializeReferences ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeReferences() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.InitializeReferences" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializeReferences ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializeReferences();" />
      <MemberSignature Language="F#" Value="member this.InitializeReferences : unit -&gt; unit" Usage="regex.InitializeReferences " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">参照は既に初期化されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="internalMatchTimeout">
      <MemberSignature Language="C#" Value="protected internal TimeSpan internalMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.TimeSpan internalMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.internalMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Protected Friend internalMatchTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="protected public: TimeSpan internalMatchTimeout;" />
      <MemberSignature Language="F#" Value="val mutable internalMatchTimeout : TimeSpan" Usage="System.Text.RegularExpressions.Regex.internalMatchTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.Serialization.OptionalField(VersionAdded=2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>操作がタイムアウトになる前に、パターン一致操作で経過できる最大時間。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsMatch">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現と一致する対象が入力文字列内で見つかったかどうかを示します。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (input As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsMatch(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.IsMatch : string -&gt; bool" Usage="regex.IsMatch input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>または後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認する文字列を検証するメソッドが通常使用します。 1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、<xref:System.Text.RegularExpressions.Regex.Match%2A>または<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッド。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29>文字列が有効な部品番号であるかどうかを確認します。 正規表現では、部品番号の 3 つのハイフンで区切られた文字のセットで構成される特定の形式であると仮定します。 最初のセットは、次の 4 つの文字が含まれている必要があります、英数字文字の後に英数字の文字が続く 2 つの数字で構成されます。 次の 3 つの文字で構成され、2 番目のセットは、数値である必要があります。 4 つの文字で構成され、3 番目のセットには、次の 3 つの数値文字が英数字の文字が続く必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch2.vb#2)]  
  
 正規表現パターンは次のとおりです。  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`^`|行の先頭から照合を開始します。|  
|`[a-zA-Z0-9]`|1 文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数値。|  
|`\d{2}`|2 つの数値文字と一致します。|  
|`[a-zA-Z0-9]`|1 文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数値。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3 つの数値文字と一致します。|  
|`(-\d{3}){2}`|ハイフンの後ろに次の 3 つの数値文字を検索し、このパターンの 2 つの出現と一致します。|  
|`[a-zA-Z0-9]`|1 文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数値。|  
|`$`|行の末尾で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (input As String, startat As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsMatch(System::String ^ input, int startat);" />
      <MemberSignature Language="F#" Value="member this.IsMatch : string * int -&gt; bool" Usage="regex.IsMatch (input, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="startat">検索を開始する文字の位置。</param>
        <summary>入力文字列内の指定した位置から検索を開始して、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>または後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認する文字列を検証するメソッドが通常使用します。 1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、<xref:System.Text.RegularExpressions.Regex.Match%2A>または<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッド。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29>文字列が有効な部品番号であるかどうかを確認します。 文字列にコロン (:) 文字に続く部品番号を検索します。 <xref:System.String.IndexOf%28System.Char%29>メソッドを使用するには、コロンの位置を決定、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29>メソッド。 正規表現では、部品番号の 3 つのハイフンで区切られた文字のセットで構成される特定の形式であると仮定します。 最初のセットは、次の 4 つの文字が含まれている必要があります、英数字文字の後に英数字の文字が続く 2 つの数字で構成されます。 次の 3 つの文字で構成され、2 番目のセットは、数値である必要があります。 4 つの文字で構成され、3 番目のセットには、次の 3 つの数値文字が英数字の文字が続く必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch3.vb#3)]  
  
 正規表現パターンは次のとおりです。  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`[a-zA-Z0-9]`|1 文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数値。|  
|`\d{2}`|2 つの数値文字と一致します。|  
|`[a-zA-Z0-9]`|1 文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数値。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3 つの数値文字と一致します。|  
|`(-\d{3}){2}`|ハイフンの後ろに次の 3 つの数値文字を検索し、このパターンの 2 つの出現と一致します。|  
|`[a-zA-Z0-9]`|1 文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数値。|  
|`$`|行の末尾で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member IsMatch : string * string -&gt; bool" Usage="System.Text.RegularExpressions.Regex.IsMatch (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>または後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認する文字列を検証するメソッドが通常使用します。 1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、<xref:System.Text.RegularExpressions.Regex.Match%2A>または<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッド。  
  
 静的な<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッドを作成するのには、<xref:System.Text.RegularExpressions.Regex>オブジェクトで指定された正規表現パターンで`pattern`を呼び出すと、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29>インスタンス メソッド。 この正規表現パターンは、迅速な検索の正規表現エンジンによってキャッシュされます。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が、メソッドが呼び出されて、アプリケーション ドメインの指定されたタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>文字列が有効な部品番号であるかどうかを確認します。 正規表現では、部品番号の 3 つのハイフンで区切られた文字のセットで構成される特定の形式であると仮定します。 最初のセットは、次の 4 つの文字が含まれている必要があります、英数字文字の後に英数字の文字が続く 2 つの数字で構成されます。 次の 3 つの文字で構成され、2 番目のセットは、数値である必要があります。 4 つの文字で構成され、3 番目のセットには、次の 3 つの数値文字が英数字の文字が続く必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch1.vb#1)]  
  
 正規表現パターンは次のとおりです。  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`^`|行の先頭から照合を開始します。|  
|`[a-zA-Z0-9]`|1 文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数値。|  
|`\d{2}`|2 つの数値文字と一致します。|  
|`[a-zA-Z0-9]`|1 文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数値。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3 つの数値文字と一致します。|  
|`(-\d{3}){2}`|ハイフンの後ろに次の 3 つの数値文字を検索し、このパターンの 2 つの出現と一致します。|  
|`[a-zA-Z0-9]`|1 文字に一致 (`a`を通じて`z`または`A`を通じて`Z`) または文字の数値。|  
|`$`|行の末尾で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドが、メソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 パターン一致を確認するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String, options As RegexOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member IsMatch : string * string * System.Text.RegularExpressions.RegexOptions -&gt; bool" Usage="System.Text.RegularExpressions.Regex.IsMatch (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した一致オプションを使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>または後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認する文字列を検証するメソッドが通常使用します。 1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、<xref:System.Text.RegularExpressions.Regex.Match%2A>または<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッド。  
  
 静的な<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドを作成するのには、<xref:System.Text.RegularExpressions.Regex>オブジェクトで指定された正規表現パターンで`pattern`と正規表現オプションを指定して`options`を呼び出すと、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29>インスタンスメソッド。 この正規表現パターンは、迅速な検索の正規表現エンジンによってキャッシュされます。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が、メソッドが呼び出されて、アプリケーション ドメインの指定されたタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>文字列が有効な部品番号であるかどうかを確認します。 正規表現では、部品番号の 3 つのハイフンで区切られた文字のセットで構成される特定の形式であると仮定します。 最初のセットは、次の 4 つの文字が含まれている必要があります、英数字文字の後に英数字の文字が続く 2 つの数字で構成されます。 次の 3 つの文字で構成され、2 番目のセットは、数値である必要があります。 4 つの文字で構成され、3 番目のセットには、次の 3 つの数値文字が英数字の文字が続く必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch4.vb#4)]  
  
 正規表現パターンは次のとおりです。  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`^`|文字列の先頭から照合を開始します。|  
|`[A-Z0-9]`|単一のアルファベット文字から`A`を通じて`Z`、または任意の数字。|  
|`\d{2}`|2 つの数値文字と一致します。|  
|`[A-Z0-9]`|単一のアルファベット文字から`A`を通じて`Z`、または任意の数字。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3 つの数値文字と一致します。|  
|`(-\d{3}){2}`|ハイフンの後ろに次の 3 つの数値文字を検索して、このパターンの 2 つの出現と一致.|  
|`[A-Z0-9]`|単一のアルファベット文字から`A`を通じて`Z`、または任意の数字。|  
|`$`|入力文字列の末尾で照合を終了します。|  
  
 呼び出す、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドを`options`パラメーターに設定<xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>は次の正規表現を定義するのと同じです。  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 比較のための例を参照してください、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 パターン一致を確認するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member IsMatch : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; bool" Usage="System.Text.RegularExpressions.Regex.IsMatch (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した一致オプションとタイムアウト間隔を使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>または後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認する文字列を検証するメソッドが通常使用します。 1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、<xref:System.Text.RegularExpressions.Regex.Match%2A>または<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッド。  
  
 静的な<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドを作成するのには、<xref:System.Text.RegularExpressions.Regex>オブジェクトで指定された正規表現パターンで`pattern`と正規表現オプションを指定して`options`を呼び出すと、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29>インスタンスメソッド。 この正規表現パターンは、迅速な検索の正規表現エンジンによってキャッシュされます。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 `matchTimeout`パラメーターする方法を指定時間の長い、パターン マッチング メソッドは必要がありますがタイムアウトする前に、検索しようとしています。入力の処理時に応答を停止させない過度なバックトラッ キングに依存する正規表現の使用を防止するタイムアウト間隔を設定する近い一致が含まれています。 詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)します。 メソッドをスローする時間間隔で一致するものがない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 `matchTimeout` メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>文字列が有効な部品番号であるかどうかを確認します。 正規表現では、部品番号の 3 つのハイフンで区切られた文字のセットで構成される特定の形式であると仮定します。 最初のセットは、次の 4 つの文字が含まれている必要があります、英数字文字の後に英数字の文字が続く 2 つの数字で構成されます。 次の 3 つの文字で構成され、2 番目のセットは、数値である必要があります。 4 つの文字で構成され、3 番目のセットには、次の 3 つの数値文字が英数字の文字が続く必要があります。 正規表現パターンに一致するメソッドは、500 ミリ秒のタイムアウト間隔を設定するための入力の文字列を最小限に抑える検索に関連する必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch5.vb#5)]  
  
 正規表現パターンは次のとおりです。  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`^`|文字列の先頭から照合を開始します。|  
|`[A-Z0-9]`|単一のアルファベット文字から`A`を通じて`Z`、または任意の数字。|  
|`\d{2}`|2 つの数値文字と一致します。|  
|`[A-Z0-9]`|単一のアルファベット文字から`A`を通じて`Z`、または任意の数字。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3 つの数値文字と一致します。|  
|`(-\d{3}){2}`|ハイフンの後ろに次の 3 つの数値文字を検索し、このパターンの 2 つの出現と一致します。|  
|`[A-Z0-9]`|単一のアルファベット文字から`A`を通じて`Z`、または任意の数字。|  
|`$`|入力文字列の末尾で照合を終了します。|  
  
 呼び出す、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドを`options`パラメーターに設定<xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>は次の正規表現を定義するのと同じです。  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 比較のための例を参照してください、<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
        <block subset="none" type="usage"><para>設定することをお勧め、<paramref name="matchTimeout" />に 2 秒などの適切な値のパラメーター。 タイムアウトを指定することで無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンが若干優れたパフォーマンスを提供します。 ただし、タイムアウトは、次の条件下でのみ無効にする必要があります。 
-正規表現によって処理される入力は既知の信頼されたソースから派生または静的テキストで構成されます。 これには、動的にユーザーが入力されているテキストが含まれません。  
  
-効率的に処理することを確認する正規表現パターンが十分にテストされているときは、一致すると、一致以外の場合と近い一致します。  
  
場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングが発生することがわかっている言語要素は含まれていません。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現パターンと一致する部分文字列の入力文字列を検索し、最初に一致したものを 1 つの <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトとして返します。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.Match : string -&gt; System.Text.RegularExpressions.Match" Usage="regex.Match input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <summary>指定した入力文字列内で、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現と最初に一致する対象を 1 つ検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッドは、入力文字列内の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 正規表現パターンが、返された値をチェックして入力文字列内で見つかったされているかどうかを判断する<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティ。 一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティにはから部分文字列が含まれています`input`正規表現パターンに一致します。 一致が検出されない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 このメソッドの最初の部分文字列を返します`input`正規表現パターンに一致します。 後続の一致するを取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッド。 呼び出すことによって、1 つのメソッドの呼び出しですべての一致項目を取得することも、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType>メソッド。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
   
  
## Examples  
 次の例は、正規表現パターン文字列に一致し、一致するリストを検索します。 グループ、キャプチャ、およびキャプチャの位置。  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 正規表現パターン`(\w+)\s+(car)`と共にその前にある単語"car"という単語の出現と一致します。 次の表に示すように解釈されます。  
  
|パターン|説明|  
|-------------|-----------------|  
|`(\w+)`|1 つ以上の単語文字に一致します。 これが最初のキャプチャ グループです。|  
|`\s+`|1 つ以上の空白文字と一致します。|  
|(car)|リテラル文字列"car"と一致します。 これが 2 番目のキャプチャ グループです。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String, startat As Integer) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input, int startat);" />
      <MemberSignature Language="F#" Value="member this.Match : string * int -&gt; System.Text.RegularExpressions.Match" Usage="regex.Match (input, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="startat">検索を開始する 0 から始まる文字位置。</param>
        <summary>入力文字列内の指定した開始位置から開始して、その入力文字列内で正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29>または後から始まります正規表現パターンに一致する最初の部分文字列を返します、`startat`文字、入力文字列内の位置。 正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 対象の正規表現パターン、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29>のいずれかへの呼び出しによってメソッドの検索条件が定義されている、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクター。 正規表現パターンを形成することができる要素についての詳細については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 必要に応じてを使用して、文字列内の開始位置を指定することができます、`startat`パラメーター。 正規表現エンジンは、左から右 (既定値) に解析、ときに、一致して、スキャンに移動し、右方向で指定された文字から始まる`startat`します。 正規表現エンジンが右から左に解析します (正規表現パターンがでどのように構築されている場合、<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType>オプション)、反対方向に移動しにある文字で始まる一致とスキャン`startat`-1。 既定値から検索を開始する開始位置を指定しない場合`startat`位置。 左から右に、既定値に、正規表現検索する場合`startat`の左の端に配置されて`input`かどうかに、右から検索は左、既定値`startat`の右端に配置されて`input`。  
  
 文字列内の特定の文字位置から開始し、正規表現エンジンが一致文字列の残りの部分をスキャンしないように制限する場合は、アンカーを正規表現を`\G`(左から右の左側にあります。パターン、または右から左のパターンを右側にある)。 これで始まる必要がありますので、一致に制限`startat`します。  
  
 正規表現パターンが、返された値をチェックして入力文字列内で見つかったされているかどうかを判断する<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティ。 一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティにはから部分文字列が含まれています`input`正規表現パターンに一致します。 一致が検出されない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 このメソッドは、以降に見つかった最初の部分文字列を返します、`startat`内の位置の文字`input`正規表現パターンに一致します。 後続の一致するを取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッド。 呼び出すことによって、1 つのメソッドの呼び出しですべての一致項目を取得することも、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>メソッド。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 操作超えています、アプリケーション ドメインの任意のタイムアウト値が確立されている場合、例外がスロー コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member Match : string * string -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Regex.Match (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>メソッドは、入力文字列内の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 静的な<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>メソッドを作成するのには、<xref:System.Text.RegularExpressions.Regex>オブジェクトを指定した正規表現パターンと、インスタンスを呼び出す<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッド。 この場合、正規表現エンジンは、正規表現パターンをキャッシュします。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 正規表現パターンが、返された値をチェックして入力文字列内で見つかったされているかどうかを判断する<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティ。 一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティにはから部分文字列が含まれています`input`正規表現パターンに一致します。 一致が検出されない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 このメソッドの最初の部分文字列を返します`input`正規表現パターンに一致します。 後続の一致するを取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッド。 呼び出すことによって、1 つのメソッドの呼び出しですべての一致項目を取得することも、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>メソッド。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が、メソッドが呼び出されて、アプリケーション ドメインの指定されたタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>を少なくとも 1 つを含む最初の単語を検索するメソッド`z`文字とし、呼び出し、<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドを追加するとします。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Match#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Match#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match1.vb#1)]  
  
 この正規表現パターン `\b\w*z+\w*\b` の解釈を次の表に示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w*`|0、1、または複数の単語文字と一致します。|  
|`z+`|1 つ以上の出現と一致、`z`文字。|  
|`\w*`|0、1、または複数の単語文字と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 パターン一致を取得するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />、タイムアウト間隔を設定することができます。</para></block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int beginning, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 beginning, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String, beginning As Integer, length As Integer) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input, int beginning, int length);" />
      <MemberSignature Language="F#" Value="member this.Match : string * int * int -&gt; System.Text.RegularExpressions.Match" Usage="regex.Match (input, beginning, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="beginning" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="beginning">検索対象の左端の位置を定義する、入力文字列内の 0 から始まる文字位置。</param>
        <param name="length">検索に含める部分文字列の文字数。</param>
        <summary>入力文字列内の指定した開始位置から開始し、指定した文字数だけを検索対象として、その入力文字列内で正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29>メソッドは、入力文字列の一部の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 対象の正規表現パターン、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29>のいずれかへの呼び出しによってメソッドの検索条件が定義されている、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクター。 正規表現パターンを形成することができる要素についての詳細については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29>メソッドの部分を検索する`input`によって定義された、`beginning`と`length`正規表現パターンのパラメーター。 `beginning` 常に、検索に含める左端の文字のインデックスを定義し、`length`を検索する文字の最大数を定義します。 同時に、検索の範囲を定義します。 左から右 (既定値) に進むと、検索、正規表現エンジンがインデックス位置にある文字から検索`beginning`インデックス位置にある文字を`beginning`  +  `length` – 1。 使用して、正規表現エンジンがインスタンス化された場合、<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType>オプションのままにした正規表現エンジンの検索インデックスにある文字から検索が実行を右から`beginning`  +  `length` – 1 に、文字インデックス位置にある`beginning`します。 このメソッドは、この範囲内で見つかった最初の一致を返します。 後続の一致するを取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッド。  
  
 正規表現パターンが、返された値をチェックして入力文字列内で見つかったされているかどうかを判断する<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティ。 一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティにはから部分文字列が含まれています`input`正規表現パターンに一致します。 一致が検出されない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト値を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="beginning" /> が 0 未満か、<paramref name="input" /> の長さを超えています。  
  
- または - 
 <paramref name="length" /> が 0 未満か、<paramref name="input" /> の長さを超えています。  
  
- または - 
 <paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="–1" /> が <paramref name="input" /> の範囲外の位置を識別しています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String, options As RegexOptions) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Match : string * string * System.Text.RegularExpressions.RegexOptions -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Regex.Match (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した一致オプションを使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドは、入力文字列内の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 静的な<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドを作成するのには、<xref:System.Text.RegularExpressions.Regex>オブジェクトを<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29>コンス トラクターを呼び出すインスタンス<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッド。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 正規表現パターンが、返された値をチェックして入力文字列内で見つかったされているかどうかを判断する<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティ。 一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティにはから部分文字列が含まれています`input`正規表現パターンに一致します。 一致が検出されない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 このメソッドで見つかった最初の部分文字列を返します`input`正規表現パターンに一致します。 後続の一致するを取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A>メソッド。 呼び出すことによって、1 つのメソッドの呼び出しですべての一致項目を取得することも、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッド。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>照合操作の実行時間が、メソッドが呼び出されて、アプリケーション ドメインの指定されたタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
   
  
## Examples  
 次の例では、英字で始まる単語と一致する正規表現を定義する"a"です。 使用して、<xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>正規表現が"a"と小文字を両方大文字で始まる単語を検索することを確認するにはオプション"a"です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Match#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Match#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match2.vb#2)]  
  
 この正規表現パターン `\ba\w*\b` の解釈を次の表に示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`a`|文字"a"です。|  
|`\w*`|0、1、または複数の単語文字と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 パターン一致を取得するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />、タイムアウト間隔を設定することができます。</para></block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Match : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Regex.Match (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した一致オプションとタイムアウト間隔を使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドは、入力文字列内の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンを構築するために使用する言語要素については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 静的な<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドを作成するのには、<xref:System.Text.RegularExpressions.Regex>オブジェクトを<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>コンス トラクターを呼び出すインスタンス<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッド。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 正規表現パターンが、返された値をチェックして入力文字列内で見つかったされているかどうかを判断する<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティ。 一致が見つかった場合、返された<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティにはから部分文字列が含まれています`input`正規表現パターンに一致します。 一致が検出されない場合、値は<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 このメソッドで見つかった最初の部分文字列を返します`input`正規表現パターンに一致します。 後続の一致するを取得するには、返されたを繰り返し呼び出す<xref:System.Text.RegularExpressions.Match>オブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A>メソッド。 呼び出すことによって、1 つのメソッドの呼び出しですべての一致項目を取得することも、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッド。  
  
 `matchTimeout`パラメーターする方法を指定時間の長い、パターン マッチング メソッドは必要がありますがタイムアウトする前に、検索しようとしています。入力の処理時に応答を停止させない過度なバックトラッ キングに依存する正規表現の使用を防止するタイムアウト間隔を設定する近い一致が含まれています。 詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)します。 メソッドをスローする時間間隔で一致するものがない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 `matchTimeout` メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>設定することをお勧め、<paramref name="matchTimeout" />に 2 秒などの適切な値のパラメーター。 タイムアウトを指定することで無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンが若干優れたパフォーマンスを提供します。 ただし、タイムアウトは、次の条件下でのみ無効にする必要があります。 
-正規表現によって処理される入力は既知の信頼されたソースから派生または静的テキストで構成されます。 これには、動的にユーザーが入力されているテキストが含まれません。  
  
-効率的に処理することを確認する正規表現パターンが十分にテストされているときは、一致すると、一致以外の場合と近い一致します。  
  
場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングが発生することがわかっている言語要素は含まれていません。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Matches">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>入力文字列内で正規表現と一致する対象をすべて検索し、見つかった対象をすべて返します。</summary>
        <block subset="none" type="usage"><para>呼び出すことで、一致する試行が繰り返された場合、<see cref="Overload:System.Text.RegularExpressions.Regex.Matches" />メソッドでは、正規表現エンジンは、空一致特別な処理。 通常、正規表現エンジンは、次に、前回の一致が左を正確に一致の検索を開始します。 ただし、空一致の後に次の一致を試みる前に正規表現エンジンは 1 文字進めます。 この動作は、正規表現エンジンは、文字列を進めることが保証されます。 それ以外の場合、空一致が、前方移動で含まれていないため、次の一致は、前回の一致とまったく同じ場所で開始し、同じ空の文字列を繰り返しに一致が。  
  
次の例では、正規表現パターンで<c>、*</c>文字の 0 個以上の出現箇所を検索文字列"abaabb"の"a"です。 結果の例の出力として<see cref="T:System.Text.RegularExpressions.MatchCollection" />オブジェクトを含む 6 つ<see cref="T:System.Text.RegularExpressions.Match" />オブジェクト。 最初の一致する試行が 1 つ目を検索します"a"です。 最初の b の前に、終了と一致する、最初に正確に 2 番目の一致が開始これは、"a"の 0 個の出現箇所を検索し、空の文字列を返します。 3 番目の一致が始まらない正確に 2 番目の一致が終了した位置、2 番目の一致には、空の文字列が返されるためです。 代わりに、最初の"b"後で、1 つの文字を開始します。 3 番目の一致では、"a"の 2 つの出現箇所を検索して、"aa"を返します。 4 番目の一致の試行は、2 番目"b"の前に、3 番目の一致の終了位置を開始し、空の文字列を返します。 3 番目の"b"の前に開始し、空の文字列を返すように、5 番目の一致の試行はもう一度 1 つの文字を進めます。 6 番目の一致では、最後の"b"した後に開始し、もう一度空の文字列を返します。  
  
[! コード csharp[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/emptymatches1.cs#9)] [! コード vb[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/emptymatches1.vb#9)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Matches (input As String) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.Matches : string -&gt; System.Text.RegularExpressions.MatchCollection" Usage="regex.Matches input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <summary>指定した入力文字列内で、正規表現と一致する対象をすべて検索します。</summary>
        <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29>メソッドは、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッド、it は、すべての一致に関する情報を返します点を除いて、単一の一致ではなく、入力文字列にあります。 これは、次のコードに相当します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#5)]  
  
 コレクションは、一致だけが含まれていて、最初の非の一致で終了します。  
  
 対象の正規表現パターン、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29>のいずれかへの呼び出しによってメソッドの検索条件が定義されている、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクター。 正規表現パターンを形成することができる要素についての詳細については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドでは、遅延評価を使用して、返された事前設定<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。 このコレクションのメンバーへのアクセスなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType>と<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>がすぐに設定されるコレクションが発生します。 遅延評価を利用するなどのコンストラクトを使用して、コレクションを反復する必要があります`foreach`(C#) と`For Each`.`Next` Visual Basic では、上記のようになります。  
  
 、遅延評価のための呼び出し、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29>メソッドはスローしません、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 操作が実行されると、例外がスロー、<xref:System.Text.RegularExpressions.MatchCollection>オブジェクトの場合、このメソッドによって返される、<xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A>プロパティは<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>と一致する操作がタイムアウト間隔を超えています。  
  
   
  
## Examples  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> "es"で終わる文内の任意の単語を識別するメソッド。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches1.vb#1)]  
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列"es"と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> は <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Matches (input As String, startat As Integer) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, int startat);" />
      <MemberSignature Language="F#" Value="member this.Matches : string * int -&gt; System.Text.RegularExpressions.MatchCollection" Usage="regex.Matches (input, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="startat">入力文字列内の検索を開始する文字位置。</param>
        <summary>入力文字列内の指定した開始位置から検索を開始した場合に、その指定入力文字列内で正規表現と一致する対象をすべて検索します。</summary>
        <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29>メソッドは、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29>メソッド、it は、すべての一致に関する情報を返します点を除いて、単一の一致ではなく、入力文字列にあります。 これは、次のコードに相当します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#6)]  
  
 対象の正規表現パターン、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29>のいずれかへの呼び出しによってメソッドの検索条件が定義されている、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクター。 正規表現パターンを形成することができる要素についての詳細については、次を参照してください。[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドでは、遅延評価を使用して、返された事前設定<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。 このコレクションのメンバーへのアクセスなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType>と<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>がすぐに設定されるコレクションが発生します。 遅延評価を利用するなどのコンストラクトを使用して、コレクションを反復する必要があります`foreach`(C#) と`For Each`.`Next` Visual Basic では、上記のようになります。  
  
 、遅延評価のための呼び出し、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29>メソッドはスローしません、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 操作が実行されると、例外がスロー、<xref:System.Text.RegularExpressions.MatchCollection>オブジェクトの場合、このメソッドによって返される、<xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A>プロパティは<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>と一致する操作がタイムアウト間隔を超えています.  
  
   
  
## Examples  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> "es"で終わるを呼び出して文の最初の単語を検索するメソッド、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> "es"で終わる単語、追加を識別するメソッド。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches3.vb#3)]  
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列"es"と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member Matches : string * string -&gt; System.Text.RegularExpressions.MatchCollection" Usage="System.Text.RegularExpressions.Regex.Matches (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</summary>
        <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29>メソッドは、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>メソッド、it は、すべての一致に関する情報を返します点を除いて、単一の一致ではなく、入力文字列にあります。 これは、次のコードに相当します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#7)]  
  
 静的な`Matches`メソッドは、構築に相当、<xref:System.Text.RegularExpressions.Regex>オブジェクトを指定した正規表現パターンとインスタンス メソッドを呼び出す`Matches`します。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドでは、遅延評価を使用して、返された事前設定<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。 このコレクションのメンバーへのアクセスなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType>と<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>がすぐに設定されるコレクションが発生します。 遅延評価を利用するなどのコンストラクトを使用して、コレクションを反復する必要があります`foreach`(C#) と`For Each`.`Next` Visual Basic では、上記のようになります。  
  
 、遅延評価のための呼び出し、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29>メソッドはスローしません、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 ただし、例外がスローで操作が実行されると、<xref:System.Text.RegularExpressions.MatchCollection>タイムアウト間隔が現在のアプリケーション ドメインと一致する操作の"REGEX_DEFAULT_MATCH_TIMEOUT"プロパティで定義されている場合、このメソッドによって返されるオブジェクトこのタイムアウト間隔を超えています。  
  
   
  
## Examples  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> "es"で終わる文で任意の単語を識別するメソッド。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches2.vb#2)]  
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列"es"と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <block subset="none" type="usage"><para>このメソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 推奨される静的メソッドと一致する複数のパターンを取得するの<see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を指定することができます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String, options As RegexOptions) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Matches : string * string * System.Text.RegularExpressions.RegexOptions -&gt; System.Text.RegularExpressions.MatchCollection" Usage="System.Text.RegularExpressions.Regex.Matches (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した一致オプションを使用して、指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</summary>
        <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドは、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッド、it は、すべての一致に関する情報を返します点を除いて、単一の一致ではなく、入力文字列にあります。 これは、次のコードに相当します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#8)]  
  
 静的な`Matches`メソッドは、構築に相当、<xref:System.Text.RegularExpressions.Regex>オブジェクトを指定した正規表現パターンとインスタンス メソッドを呼び出す`Matches`します。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドでは、遅延評価を使用して、返された事前設定<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。 このコレクションのメンバーへのアクセスなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType>と<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>がすぐに設定されるコレクションが発生します。 遅延評価を利用するなどのコンストラクトを使用して、コレクションを反復する必要があります`foreach`(C#) と`For Each`.`Next` Visual Basic では、上記のようになります。  
  
 、遅延評価のための呼び出し、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29>メソッドはスローしません、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 ただし、例外がスローで操作が実行されると、<xref:System.Text.RegularExpressions.MatchCollection>タイムアウト間隔が現在のアプリケーション ドメインと一致する操作の"REGEX_DEFAULT_MATCH_TIMEOUT"プロパティで定義されている場合、このメソッドによって返されるオブジェクトこのタイムアウト間隔を超えています。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29>メソッドを呼び出して"es"で終わる文で任意の単語を識別するために、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>入力文字列とパターンの大文字と小文字を実行するメソッド。 出力を 2 つの方法は異なる結果を返します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches4.vb#4)]  
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列"es"と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <block subset="none" type="usage"><para>このメソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 推奨される静的メソッドと一致する複数のパターンを取得するの<see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Matches : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; System.Text.RegularExpressions.MatchCollection" Usage="System.Text.RegularExpressions.Regex.Matches (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した一致オプションとタイムアウト間隔を使用して、指定した入力文字列内で、指定した正規表現に一致するすべての箇所を検索します。</summary>
        <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドは、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッド、it は、すべての一致に関する情報を返します点を除いて、単一の一致ではなく、入力文字列にあります。 これは、次のコードに相当します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#10)]  
  
 静的な`Matches`メソッドは、構築に相当、<xref:System.Text.RegularExpressions.Regex>オブジェクトを指定した正規表現パターンとインスタンス メソッドを呼び出す`Matches`します。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドでは、遅延評価を使用して、返された事前設定<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。 このコレクションのメンバーへのアクセスなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType>と<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>がすぐに設定されるコレクションが発生します。 遅延評価を利用するなどのコンストラクトを使用して、コレクションを反復する必要があります`foreach`(C#) と`For Each`.`Next` Visual Basic では、上記のようになります。  
  
 、遅延評価のための呼び出し、<xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドはスローしません、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 ただし、例外がスローで操作が実行されると、<xref:System.Text.RegularExpressions.MatchCollection>一致操作で指定されたタイムアウトの間隔を超えた場合に、このメソッドによって返されるオブジェクト、`matchTimeout`パラメーター。  
  
   
  
## Examples  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> "es"で終わる文で任意の単語に一致する大文字小文字の比較を実行するメソッド。 呼び出して、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>入力文字列とパターンの大文字と小文字を実行するメソッド。 どちらの場合も、タイムアウト間隔は 1 秒に設定します。 出力を 2 つの方法は異なる結果を返します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches5.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches5.vb#11)]  
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列"es"と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
        <block subset="none" type="usage"><para>設定することをお勧め、<paramref name="matchTimeout" />に 2 秒などの適切な値のパラメーター。 タイムアウトを指定することで無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンが若干優れたパフォーマンスを提供します。 ただし、タイムアウトは、次の条件下でのみ無効にする必要があります。 
-正規表現によって処理される入力は既知の信頼されたソースから派生または静的テキストで構成されます。 これには、動的にユーザーが入力されているテキストが含まれません。  
  
-効率的に処理することを確認する正規表現パターンが十分にテストされているときは、一致すると、一致以外の場合と近い一致します。  
  
場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングが発生することがわかっている言語要素は含まれていません。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan" Usage="System.Text.RegularExpressions.Regex.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のインスタンスのタイムアウト間隔を取得します。</summary>
        <value><see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> がスローされる前に、パターン一致操作で経過できる最大時間間隔。タイムアウトが無効な場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A>のおおよその最大時間間隔を定義するプロパティを<xref:System.Text.RegularExpressions.Regex>操作がタイムアウトする前に、1 つの一致操作を実行するインスタンス。正規表現エンジンがスローされます、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>タイムアウト間隔が経過した後、次のタイミング チェック中に例外。 これは、正規表現エンジンが過度なバックトラッ キングを必要とする入力文字列を処理することを防ぎます。 詳細については、次を参照してください。[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)と[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)します。  
  
 このプロパティは読み取り専用です。 その値を明示的に設定するには、個々 の<xref:System.Text.RegularExpressions.Regex>オブジェクトを呼び出すことによって、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクターとするすべての値を設定できます<xref:System.Text.RegularExpressions.Regex>照合アプリケーション ドメインで操作を呼び出すことによって、<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>メソッドを提供して、<xref:System.TimeSpan>次の例に示すように、"REGEX_DEFAULT_MATCH_TIMEOUT"プロパティの値します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/cs/regexmatchtimeout1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/vb/regexmatchtimeout1.vb#1)]  
  
 かどうかは明示的に設定しない既定値、タイムアウト間隔<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>が操作に使用されると一致する操作はタイムアウトしません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions" Usage="System.Text.RegularExpressions.Regex.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターに渡されたオプションを取得します。</summary>
        <value><see cref="T:System.Text.RegularExpressions.RegexOptions" /> のコンストラクターに渡されたオプションを表す <see cref="T:System.Text.RegularExpressions.Regex" /> の列挙体の 1 つ以上のメンバー</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Text.RegularExpressions.Regex.Options%2A>プロパティの 1 つまたは複数のメンバーから成る、<xref:System.Text.RegularExpressions.RegexOptions>列挙体。 オプションが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>クラスのコンス トラクターは、その値は<xref:System.Text.RegularExpressions.RegexOptions.None?displayProperty=nameWithType>します。 使用可能なオプションでの詳細については、 [Regular Expression Options](~/docs/standard/base-types/regular-expression-options.md)トピック。  
  
 なお、<xref:System.Text.RegularExpressions.Regex.Options%2A>プロパティは、正規表現で定義されているインライン オプション パターン自体を反映しません。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="T:System.Text.RegularExpressions.Regex" /> によって作成された正規表現の基本クラスには、<see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />メソッド。 これらのコンパイルされた正規表現の基本クラス実装を使用して、<see cref="P:System.Text.RegularExpressions.Regex.Options" />プロパティ。 派生クラスから呼び出された場合、<see cref="P:System.Text.RegularExpressions.Regex.Options" />プロパティに渡されたオプションを返します、<paramref name="options" />のパラメーター、<see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />正規表現を定義するために使用されたクラスのコンス トラクター。</para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/c82dc689-7e82-4767-a18d-cd24ce5f05e9">正規表現のオプション</related>
      </Docs>
    </Member>
    <Member MemberName="pattern">
      <MemberSignature Language="C#" Value="protected internal string pattern;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string pattern" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.pattern" />
      <MemberSignature Language="VB.NET" Value="Protected Friend pattern As String " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::String ^ pattern;" />
      <MemberSignature Language="F#" Value="val mutable pattern : string" Usage="System.Text.RegularExpressions.Regex.pattern" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した置換文字列に置き換えます。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string -&gt; string" Usage="regex.Replace (input, replacement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="replacement">置換文字列。</param>
        <summary>指定した入力文字列内で正規表現パターンに一致するすべての文字列を、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 先頭に一致する検索を開始、`input`文字列。 正規表現が、現在のコンス トラクターで定義されたパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。  
  
 `replacement`パラメーターは、各一致文字列を置換する文字列を示す`input`します。 `replacement` リテラル テキストの任意の組み合わせから成ると[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)します。 置換パターンではたとえば、`a*${test}b`文字列を挿入します"、*"と一致した部分文字列を続けて、`test`キャプチャ グループが存在する場合とそれに続けて"b"の文字列。 * 文字は、置換パターンではメタ文字としては認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)、正規表現パターンにのみでは許可および置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次の例では、正規表現に`\s+`、1 つ以上の空白文字と一致します。 置換後の文字列""、単一の空白文字に置き換えます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample5.vb#5)]  
  
 次の例では、正規表現に`(\p{Sc}\s?)?(\d+\.?((?<=\.)\d+)?)(?(1)|\s?\p{Sc})?`と置換パターンでは、 `$2`、数値の値から先頭または末尾の通貨記号を削除します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample7.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample7.vb#7)]  
  
 この正規表現の解釈を次の表に示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\p{Sc}`|通貨記号と一致します。 `{Sc}` Unicode の Symbol, Currency カテゴリのメンバーである任意の文字を表します。|  
|`\s?`|0 個または 1 個の空白文字と一致します。|  
|`(\p{Sc}\s?)?`|0 個または 1 つの空白文字が続く通貨記号の組み合わせの 0 個または 1 回一致します。 これが最初のキャプチャ グループです。|  
|`\d+`|1 個以上の 10 進数と一致します。|  
|`\.?`|(10 進数の区切り文字として使用される) の期間の 0 個または 1 回一致します。|  
|`((?<=\.)\d+)?`|期間が、前の文字の場合は、1 つ以上の 10 進数字に一致します。 このパターンは、0 個または 1 回で照合できます。|  
|`(\d+\.?((?<=\.)\d+)?)`|1 つ以上の 10 進数字の後に、省略可能な期間にわたってと 10 進数字のパターンに一致します。 これが 2 番目のキャプチャ グループです。 呼び出し、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%29>メソッドでは、このキャプチャされたグループの値に一致した文字列全体が置き換えられます。|  
|<code>(?(1)&#124;\s?\p{Sc})?</code>|最初のキャプチャ グループが存在する場合は、空の文字列に一致します。 それ以外の場合、通貨記号に続く 0 個または 1 つの空白文字に一致します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * System.Text.RegularExpressions.MatchEvaluator -&gt; string" Usage="regex.Replace (input, evaluator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。  
  
-   置換文字列には、正規表現の置換パターンで簡単に指定できません。  
  
-   置換文字列に一致した文字列に対して実行されるいくつかの処理に起因します。  
  
-   条件付き処理から置換文字列の結果。  
  
 メソッドの呼び出しと同じですが、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType>メソッドと各を渡す<xref:System.Text.RegularExpressions.Match>、返されるオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションを`evaluator`を委任します。  
  
 正規表現が、現在のコンス トラクターで定義されたパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。  
  
 `evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、各一致文字列を調べる。 カスタム メソッドには、次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致する入力を置換する文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次のコード例、元の文字列を表示するには、元の文字列内の各単語と一致するを表示し、大文字の最初の文字を変換後の文字列に変換します。  
  
 [!code-csharp[Regex.Replace-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Regex.Replace-Instance/cs/sample.cs#1)]
 [!code-vb[Regex.Replace-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex.Replace-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement, int count);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * int -&gt; string" Usage="regex.Replace (input, replacement, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="replacement">置換文字列。</param>
        <param name="count">置換を行う最大回数。</param>
        <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 先頭に一致する検索を開始、`input`文字列。 正規表現が、現在のコンス トラクターで定義されているパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。 場合`count`は負の値の置換文字列の最後まで続行します。 場合`count`一致の数を超える場合、すべての一致項目が置き換えられます。  
  
 `replacement`パラメーター最初を置換する文字列を指定`count`で一致する`input`します。 `replacement` リテラル テキストの任意の組み合わせから成ると[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)します。 置換パターンではたとえば、`a*${test}b`文字列を挿入します"、*"と一致した部分文字列を続けて、`test`キャプチャ グループが存在する場合とそれに続けて"b"の文字列。 * 文字は、置換パターンではメタ文字としては認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)、正規表現パターンにのみでは許可および置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次の例は、重複している文字の最初の 5 つの出現回数を 1 つの文字に置き換えます。 正規表現パターン`(\w)\1`1 つの文字の連続した出現と一致し、最初のキャプチャ グループに最初に見つかった位置を割り当てます。 置換パターン`$1`最初のキャプチャ グループに一致した文字列全体を置き換えます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample8.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, replacement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="replacement">置換文字列。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 静的な`Replace`メソッドは、構築に相当、<xref:System.Text.RegularExpressions.Regex>オブジェクトを指定した正規表現パターンとインスタンス メソッドを呼び出す`Replace`します。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。 先頭に一致する検索を開始、`input`文字列。  
  
 `replacement`パラメーターは、各一致文字列を置換する文字列を示す`input`します。 `replacement` リテラル テキストの任意の組み合わせから成ると[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)します。 置換パターンではたとえば、`a*${test}b`文字列を挿入します"、*"と一致した部分文字列を続けて、`test`キャプチャ グループが存在する場合とそれに続けて"b"の文字列。 * 文字は、置換パターンではメタ文字としては認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)、正規表現パターンにのみでは許可および置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が、メソッドが呼び出されて、アプリケーション ドメインの指定されたタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次の例では、正規表現に`\s+`、1 つ以上の空白文字と一致します。 置換後の文字列""、単一の空白文字に置き換えます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample6.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample6.vb#6)]  
  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29>メソッドに UNC パスでは、ローカルのマシンとドライブの次の名前をローカル ファイル パスに置き換えます。 正規表現を使用して、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティをローカル コンピューターの名前を含めると、<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType>メソッドに論理ドライブの名前を含めます。 例を正常に実行するには、ローカル コンピューター名とリテラル文字列"MyMachine"を置き換える必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace3.vb#3)]  
  
 正規表現パターンは、次の式によって定義されます。  
  
 `"\\\\(?i:" + Environment.MachineName + ")(?:\.\w+)*\\((?i:[" + driveNames + "]))\$"`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\\\\`|一致する 2 つの連続する円記号 (`\`) 文字。 円記号のエスケープ文字として解釈するため、各円記号をもう 1 つの円記号でエスケープする必要があります。|  
|`(?i:" + Environment.MachineName + ")`|によって返される文字列の大文字と小文字を実行、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティ。|  
|`(?:\.\w+)*`|期間の一致 (`.`) 文字の 1 つまたは複数の単語文字が続きます。 0 回以上一致できます。 一致した部分式はキャプチャされません。|  
|`\\`|円記号に一致 (`\`) 文字。|  
|`((?i:[" + driveNames + "]))`|個別のドライブ文字で構成される文字クラスの大文字と小文字を実行します。 一致するものでは、最初にキャプチャされた部分式です。|  
|`\$`|リテラル ドル記号に一致 (`$`) 文字。|  
  
 置換パターン`$1`最初にキャプチャされた部分式に一致した文字列全体を置き換えます。 つまり、ドライブ文字を UNC マシンとドライブ名を置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 パターン マッチを置換するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * System.Text.RegularExpressions.MatchEvaluator -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, evaluator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。  
  
-   置換文字列には、正規表現の置換パターンで簡単に指定できません。  
  
-   置換文字列に一致した文字列に対して実行されるいくつかの処理に起因します。  
  
-   条件付き処理から置換文字列の結果。  
  
 メソッドの呼び出しと同じですが、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>メソッドと各を渡す<xref:System.Text.RegularExpressions.Match>、返されるオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションを`evaluator`を委任します。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 `evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、各一致文字列を調べる。 カスタム メソッドには、次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致する入力を置換する文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が、メソッドが呼び出されて、アプリケーション ドメインの指定されたタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次の例は、正規表現を使用して、文字列から個々 の単語を抽出しを使用して、<xref:System.Text.RegularExpressions.MatchEvaluator>という名前のメソッドを呼び出すデリゲートを`WordScramble`単語の個々 の文字にスクランブルをかけるです。 これを行う、`WordScramble`メソッドは、一致している文字を含む配列を作成します。 浮動小数点乱数を格納した並列配列が作成されます。 呼び出すことによって、配列が並べ替えられます、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>メソッド、および並べ替えられた配列が引数として提供される、<xref:System.String>クラスのコンス トラクター。 この新しく作成された文字列が返されます、`WordScramble`メソッド。 正規表現パターン`\w+`1 つまたは複数の単語文字と一致する正規表現エンジンは引き続き空白文字などの単語以外の文字を検出するまでに、一致する文字を追加します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace5.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace5.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 評価およびパターン一致を置き換えるのための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, int count);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * System.Text.RegularExpressions.MatchEvaluator * int -&gt; string" Usage="regex.Replace (input, evaluator, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="count">置換を実行する最大回数。</param>
        <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。  
  
-   置換文字列には、正規表現の置換パターンで簡単に指定できません。  
  
-   置換文字列に一致した文字列に対して実行されるいくつかの処理に起因します。  
  
-   条件付き処理から置換文字列の結果。  
  
 メソッドの呼び出しと同じですが、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType>メソッドと、最初に渡す`count` <xref:System.Text.RegularExpressions.Match> 、返されるオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションを`evaluator`を委任します。  
  
 正規表現が、現在のコンス トラクターで定義されたパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。  
  
 `evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、各一致文字列を調べる。 カスタム メソッドには、次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致する入力を置換する文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次の例では、正規表現を使用して、意図的に、リスト内の単語の半分のスペルを入力します。 正規表現を使用して`\w*(ie|ei)\w*`"ie"または"ei"の文字を含む単語に一致するようにします。 最初に一致する単語の半分を渡しますが、`ReverseLetter`さらに、使用するには、メソッド、 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> "i"と"e"に一致した文字列を逆にするメソッド。 残りの単語は変更されません。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace7.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace7.vb#11)]  
  
 正規表現 `\w*(ie|ei)\w*` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\w*`|0 個以上の単語に使用される文字に一致します。|  
|<code>(ie&#124;ei)</code>|"Ie"または"ei"と一致します。|  
|`\w*`|0 個以上の単語に使用される文字に一致します。|  
  
 正規表現パターン`([ie])([ie])`で、`ReverseLetter`メソッドは"ie"または"ei"二重母音で最初の"i"または"e"に一致して、最初のキャプチャ グループに文字が割り当てられます。 2 番目の"i"または"e"と一致して、2 番目のキャプチャ グループに文字が割り当てられます。 2 つの文字が呼び出すことで反転し、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29>置換パターンを持つメソッド`$2$1`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String, count As Integer, startat As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement, int count, int startat);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * int * int -&gt; string" Usage="regex.Replace (input, replacement, count, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="replacement">置換文字列。</param>
        <param name="count">置換を実行する最大回数。</param>
        <param name="startat">入力文字列中で検索を開始する文字位置。</param>
        <summary>指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一致の検索を開始、`input`文字列で指定された位置にある、`startat`パラメーター。 正規表現が、現在のコンス トラクターで定義されたパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。 場合`count`は負の値の置換文字列の最後まで続行します。 場合`count`一致の数を超える場合、すべての一致項目が置き換えられます。  
  
 `replacement`パラメーターは、各一致文字列を置換する文字列を示す`input`します。 `replacement` リテラル テキストの任意の組み合わせから成ると[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)します。 置換パターンではたとえば、`a*${test}b`文字列を挿入します"、*"と一致した部分文字列を続けて、`test`キャプチャ グループが存在する場合とそれに続けて"b"の文字列。 * 文字は、置換パターンではメタ文字としては認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)、正規表現パターンにのみでは許可および置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次の例の行間を除くすべての文字列の最初の行を 2 します。 正規表現パターンでは、定義`^.*$`、テキスト、呼び出しの行に一致する、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッドを使用して、文字列の最初の行に一致するように、`Match.Index`と`Match.Count`プロパティを確認して、2 つ目の開始位置行です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample9.vb#9)]  
  
 正規表現パターン `^.*$` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`^`|行の先頭と一致します。 (なお、<xref:System.Text.RegularExpressions.Regex>オブジェクトのインスタンスを使用して、<xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType>オプションそれ以外の場合、この文字クラスは、入力文字列の先頭のみ一致します。)。|  
|`.*`|任意の文字を 0 回以上一致します。|  
|`$`|行の末尾と一致します。 (なお、<xref:System.Text.RegularExpressions.Regex>オブジェクトのインスタンスを使用して、<xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType>オプションそれ以外の場合、この文字クラスは、入力文字列の先頭のみ一致します。)。|  
  
 置換後の文字列 (`vbCrLf + "$&"` Visual basic で`"\n$&"`(C#))、一致した文字列の前に新しい行を追加します。 なお`\n`c# では、改行文字としての使用例を解釈 c# コンパイラでは、正規表現の文字エスケープは表しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が、0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String, options As RegexOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * System.Text.RegularExpressions.RegexOptions -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, replacement, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="replacement">置換文字列。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。 指定したオプションで、一致操作を変更します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 静的な`Replace`メソッドは、構築に相当、<xref:System.Text.RegularExpressions.Regex>オブジェクトを指定した正規表現パターンとインスタンス メソッドを呼び出す`Replace`します。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。 指定した場合<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>の`options`パラメーター、一致の検索は、入力文字列の末尾から開始し、左に移動します。、検索がそれ以外の場合、入力文字列の先頭から開始し、右に移動します。  
  
 `replacement`パラメーターは、各一致文字列を置換する文字列を示す`input`します。 `replacement` リテラル テキストの任意の組み合わせから成ると[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)します。 置換パターンではたとえば、`a*${test}b`文字列を挿入します"、*"と一致した部分文字列を続けて、`test`キャプチャ グループが存在する場合とそれに続けて"b"の文字列。 * 文字は、置換パターンではメタ文字としては認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)、正規表現パターンにのみでは許可および置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が、メソッドが呼び出されて、アプリケーション ドメインの指定されたタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドに UNC パスでは、ローカルのマシンとドライブの次の名前をローカル ファイル パスに置き換えます。 正規表現を使用して、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティをローカル コンピューターの名前を含めると、<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType>メソッドに論理ドライブの名前を含めます。 正規表現文字列比較はすべてが、区別されます。 例を正常に実行するには、ローカル コンピューター名とリテラル文字列"MyMachine"を置き換える必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace4.vb#4)]  
  
 正規表現パターンは、次の式によって定義されます。  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\\\\`|一致する 2 つの連続する円記号 (`\`) 文字。 円記号のエスケープ文字として解釈するため、各円記号をもう 1 つの円記号でエスケープする必要があります。|  
|`+ Environment.MachineName +`|によって返される文字列と一致、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティ。|  
|`(?:\.\w+)*`|期間の一致 (`.`) 文字の 1 つまたは複数の単語文字が続きます。 0 回以上一致できます。 一致した部分式はキャプチャされません。|  
|`\\`|円記号に一致 (`\`) 文字。|  
|`([" + driveNames + "])`|個別のドライブ文字で構成される文字クラスと一致します。 一致するものでは、最初にキャプチャされた部分式です。|  
|`\$`|リテラル ドル記号に一致 (`$`) 文字。|  
  
 置換パターン`$1`最初にキャプチャされた部分式に一致した文字列全体を置き換えます。 つまり、ドライブ文字を UNC マシンとドライブ名を置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 パターン マッチを置換するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * System.Text.RegularExpressions.MatchEvaluator * System.Text.RegularExpressions.RegexOptions -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, evaluator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。 指定したオプションで、一致操作を変更します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。  
  
-   置換文字列には、正規表現の置換パターンで簡単に指定できません。  
  
-   置換文字列に一致した文字列に対して実行されるいくつかの処理に起因します。  
  
-   条件付き処理から置換文字列の結果。  
  
 メソッドの呼び出しと同じですが、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドと各を渡す<xref:System.Text.RegularExpressions.Match>、返されるオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションを`evaluator`を委任します。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 `evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、各一致文字列を調べる。 カスタム メソッドには、次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致する入力を置換する文字列を返します。  
  
 指定した場合<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>の`options`パラメーター、一致の検索は、入力文字列の末尾から開始し、左に移動します。、検索がそれ以外の場合、入力文字列の先頭から開始し、右に移動します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が、メソッドが呼び出されて、アプリケーション ドメインの指定されたタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次の例は、正規表現を使用して、文字列から個々 の単語を抽出しを使用して、<xref:System.Text.RegularExpressions.MatchEvaluator>という名前のメソッドを呼び出すデリゲートを`WordScramble`単語の個々 の文字にスクランブルをかけるです。 これを行う、`WordScramble`メソッドは、一致している文字を含む配列を作成します。 浮動小数点乱数を格納した並列配列が作成されます。 呼び出すことによって、配列が並べ替えられます、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>メソッド、および並べ替えられた配列が引数として提供される、<xref:System.String>クラスのコンス トラクター。 この新しく作成された文字列が返されます、`WordScramble`メソッド。 正規表現パターン`\w+`1 つまたは複数の単語文字と一致する正規表現エンジンは引き続き空白文字などの単語以外の文字を検出するまでに、一致する文字を追加します。 呼び出し、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドが含まれています、<xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType>オプションように、正規表現パターン内のコメント`\w+  # Matches all the characters in a word.`正規表現エンジンでは無視されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace6.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace6.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator, count As Integer, startat As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, int count, int startat);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * System.Text.RegularExpressions.MatchEvaluator * int * int -&gt; string" Usage="regex.Replace (input, evaluator, count, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="count">置換を実行する最大回数。</param>
        <param name="startat">入力文字列中で検索を開始する文字位置。</param>
        <summary>指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。  
  
-   置換文字列には、正規表現の置換パターンで簡単に指定できません。  
  
-   置換文字列に一致した文字列に対して実行されるいくつかの処理に起因します。  
  
-   条件付き処理から置換文字列の結果。  
  
 メソッドの呼び出しと同じですが、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>メソッドと、最初に渡す`count` <xref:System.Text.RegularExpressions.Match> 、返されるオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションを`evaluator`を委任します。  
  
 正規表現が、現在のコンス トラクターで定義されたパターン<xref:System.Text.RegularExpressions.Regex>オブジェクト。  
  
 `evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、各一致文字列を調べる。 カスタム メソッドには、次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致する入力を置換する文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が、0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String, options As RegexOptions, matchTimeout As TimeSpan) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, replacement, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="replacement">置換文字列。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 静的な`Replace`メソッドは、構築に相当、<xref:System.Text.RegularExpressions.Regex>オブジェクトを指定した正規表現パターンとインスタンス メソッドを呼び出す`Replace`します。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。 指定した場合<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>の`options`パラメーター、一致の検索は、入力文字列の末尾から開始し、左に移動します。、検索がそれ以外の場合、入力文字列の先頭から開始し、右に移動します。  
  
 `replacement`パラメーターは、各一致文字列を置換する文字列を示す`input`します。 `replacement` リテラル テキストの任意の組み合わせから成ると[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)します。 置換パターンではたとえば、`a*${test}b`文字列を挿入します"、*"と一致した部分文字列を続けて、`test`キャプチャ グループが存在する場合とそれに続けて"b"の文字列。 * 文字は、置換パターンではメタ文字としては認識されません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む[文字のエスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)、正規表現パターンにのみでは許可および置換パターンでは認識されません。  
  
 `matchTimeout`パラメーターする方法を指定時間の長い、パターン マッチング メソッドは必要がありますがタイムアウトする前に、検索しようとしています。入力の処理時に応答を停止させない過度なバックトラッ キングに依存する正規表現の使用を防止するタイムアウト間隔を設定する近い一致が含まれています。 詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)します。 メソッドをスローする時間間隔で一致するものがない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 `matchTimeout` メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドに UNC パスでは、ローカルのマシンとドライブの次の名前をローカル ファイル パスに置き換えます。 正規表現を使用して、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティをローカル コンピューターの名前を含めると、<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType>メソッドに論理ドライブの名前を含めます。 すべての正規表現文字列比較では、大文字小文字と 0.5 秒間に一致するものが見つからない場合、任意の 1 つの置換操作がタイムアウトします。 例を正常に実行するには、ローカル コンピューター名とリテラル文字列"MyMachine"を置き換える必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace12.cs#12)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace12.vb#12)]  
  
 正規表現パターンは、次の式によって定義されます。  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`\\\\`|一致する 2 つの連続する円記号 (`\`) 文字。 円記号のエスケープ文字として解釈するため、各円記号をもう 1 つの円記号でエスケープする必要があります。|  
|`+ Environment.MachineName +`|によって返される文字列と一致、<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティ。|  
|`(?:\.\w+)*`|期間の一致 (`.`) 文字の 1 つまたは複数の単語文字が続きます。 0 回以上一致できます。 一致した部分式はキャプチャされません。|  
|`\\`|円記号に一致 (`\`) 文字。|  
|`([" + driveNames + "])`|個別のドライブ文字で構成される文字クラスと一致します。 一致するものでは、最初にキャプチャされた部分式です。|  
|`\$`|リテラル ドル記号に一致 (`$`) 文字。|  
  
 置換パターン`$1`最初にキャプチャされた部分式に一致した文字列全体を置き換えます。 つまり、ドライブ文字を UNC マシンとドライブ名を置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>設定することをお勧め、<paramref name="matchTimeout" />に 2 秒などの適切な値のパラメーター。 タイムアウトを指定することで無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンが若干優れたパフォーマンスを提供します。 ただし、タイムアウトは、次の条件下でのみ無効にする必要があります。 
-正規表現によって処理される入力は既知の信頼されたソースから派生または静的テキストで構成されます。 これには、動的にユーザーが入力されているテキストが含まれません。  
  
-効率的に処理することを確認する正規表現パターンが十分にテストされているときは、一致すると、一致以外の場合と近い一致します。  
  
場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングが発生することがわかっている言語要素は含まれていません。</para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34df1152-0b22-4a1c-a76c-3c28c47b70d8">バックトラッキング</related>
        <related type="Article" href="https://msdn.microsoft.com/library/618e5afb-3a97-440d-831a-70e4c526a51c">.NET Framework での正規表現に関するベスト プラクティス</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions, matchTimeout As TimeSpan) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * System.Text.RegularExpressions.MatchEvaluator * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, evaluator, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致するすべての部分文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。  
  
-   置換文字列には、正規表現の置換パターンで簡単に指定できません場合、。  
  
-   置換文字列に結果の場合は、一致した文字列に対していくつかの処理が実行されます。  
  
-   条件付き処理結果、置換文字列の場合。  
  
 メソッドの呼び出しと同じですが、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドと各を渡す<xref:System.Text.RegularExpressions.Match>、返されるオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションを`evaluator`を委任します。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 `evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、各一致文字列を調べる。 カスタム メソッドには、次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致する入力を置換する文字列を返します。  
  
 指定した場合<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>の`options`パラメーター、一致の検索は、入力文字列の末尾から開始し、左に移動します。、検索がそれ以外の場合、入力文字列の先頭から開始し、右に移動します。  
  
 `matchTimeout`パラメーターする方法を指定時間の長い、パターン マッチング メソッドは必要がありますがタイムアウトする前に、検索しようとしています。タイムアウト間隔を設定するとに表示されないように過度なバックトラッ キングに依存する正規表現を使用できません"の入力の処理時に応答を停止する近い一致を格納しています。 詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)します。 メソッドをスローする時間間隔で一致するものがない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 `matchTimeout` メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
 メソッドを返すため`input`使用できますが一致しない場合は変更されません、<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>メソッドが入力文字列に置換を行ったかどうかを判断するメソッド。  
  
   
  
## Examples  
 次の例は、正規表現を使用して、文字列から個々 の単語を抽出しを使用して、<xref:System.Text.RegularExpressions.MatchEvaluator>という名前のメソッドを呼び出すデリゲートを`WordScramble`単語の個々 の文字にスクランブルをかけるです。 これを行う、`WordScramble`メソッドは、一致している文字を含む配列を作成します。 浮動小数点乱数を格納した並列配列が作成されます。 呼び出すことによって、配列が並べ替えられます、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>メソッド、および並べ替えられた配列が引数として提供される、<xref:System.String>クラスのコンス トラクター。 この新しく作成された文字列が返されます、`WordScramble`メソッド。 正規表現パターン`\w+`1 つまたは複数の単語文字と一致する正規表現エンジンは引き続き空白文字などの単語以外の文字を検出するまでに、一致する文字を追加します。 呼び出し、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドが含まれています、<xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType>オプションように、正規表現パターン内のコメント`\w+  # Matches all the characters in a word.`正規表現エンジンでは無視されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace13.cs#13)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace13.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>設定することをお勧め、<paramref name="matchTimeout" />に 2 秒などの適切な値のパラメーター。 タイムアウトを指定することで無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンが若干優れたパフォーマンスを提供します。 ただし、タイムアウトは、次の条件下でのみ無効にする必要があります。 
-正規表現によって処理される入力は既知の信頼されたソースから派生または静的テキストで構成されます。 これには、動的にユーザーが入力されているテキストが含まれません。  
  
-効率的に処理することを確認する正規表現パターンが十分にテストされているときは、一致すると、一致以外の場合と近い一致します。  
  
場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングが発生することがわかっている言語要素は含まれていません。</para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
        <related type="Article" href="https://msdn.microsoft.com/library/34df1152-0b22-4a1c-a76c-3c28c47b70d8">バックトラッキング</related>
        <related type="Article" href="https://msdn.microsoft.com/library/618e5afb-3a97-440d-831a-70e4c526a51c">.NET Framework での正規表現に関するベスト プラクティス</related>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeft { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : bool" Usage="System.Text.RegularExpressions.Regex.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正規表現が右から左の方向に検索するかどうかを示す値を取得します。</summary>
        <value>正規表現が右から左の方向に検索する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> `true`場合、<xref:System.Text.RegularExpressions.Regex>でインスタンスが作成された、<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>オプション。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="roptions">
      <MemberSignature Language="C#" Value="protected internal System.Text.RegularExpressions.RegexOptions roptions;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.Text.RegularExpressions.RegexOptions roptions" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.roptions" />
      <MemberSignature Language="VB.NET" Value="Protected Friend roptions As RegexOptions " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Text::RegularExpressions::RegexOptions roptions;" />
      <MemberSignature Language="F#" Value="val mutable roptions : System.Text.RegularExpressions.RegexOptions" Usage="System.Text.RegularExpressions.Regex.roptions" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現の一致箇所によって定義される位置で、入力文字列を部分文字列の配列に分割します。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.Split : string -&gt; string[]" Usage="regex.Split input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現パターンによって定義されている位置で入力文字列を分割し、部分文字列の配列に格納します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>一連の文字ではなく正規表現によって決まります区切り記号で文字列を分割します。 文字列は、可能な回数だけ分割します。 区切り記号が検出されない場合、戻り値には、1 つの要素値が元の入力文字列にはが含まれています。  
  
 複数の一致が互いに隣接していない場合、空の文字列は、配列に挿入されます。 たとえば、1 つのハイフンで文字列を分割、返される配列に次のコードに示すよう、隣接する 2 つのハイフンが見つかった位置の空の文字列を含めると、します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split1.vb#1)]  
  
 先頭または入力文字列の末尾に一致するものが見つかった場合は空の文字列は、先頭または返される配列の末尾に含まれています。 次の例は、正規表現パターンを使用して`\d+`数値文字で入力文字列を分割します。 返される配列の最初と最後の要素の値は、文字列を開始し、一致する文字の数値で終わる、ため<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split21.cs#21)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split21.vb#21)]  
  
 キャプチャするかっこを使用する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>結果の文字列配列に文字が含まれるキャプチャされた任意の式。 たとえば、"plum-pear"ハイフンでキャプチャするかっこ内に配置される文字列を分割する場合、返される配列にはハイフンを含む文字列の要素が含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split2.vb#2)]  
  
 ただし、正規表現パターンには、複数のかっこのキャプチャのセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 は、かっこ、キャプチャするための最初のセット内の一致が見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストが返される配列に含まれません。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも、返される配列に追加します。 たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。 かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットは、スラッシュをキャプチャします。 コード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合、スラッシュ文字は含まれませんこれをコンパイルおよび .NET Framework 2.0 またはそれ以降のバージョンで実行する場合に含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split3.vb#3)]  
  
 正規表現が空の文字列を一致する場合<xref:System.Text.RegularExpressions.Regex.Split%28System.String%29>はすべての場所に空の文字列の区切り記号が見つからないので、1 文字の文字列の配列に文字列を分割します。 例:  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split11.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split11.vb#11)]  
  
 返される配列が配列の末尾、先頭にある空の文字列も含まれることに注意してください。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, count As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int count);" />
      <MemberSignature Language="F#" Value="member this.Split : string * int -&gt; string[]" Usage="regex.Split (input, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <param name="count">分割を実行する最大回数。</param>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現で定義されている位置で、入力文字列を指定されている最大回数だけ分割し、部分文字列の配列に格納します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%2A?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>一連の文字ではなく正規表現によって決まります区切り記号で文字列を分割します。 `count`を部分文字列の最大数を指定するパラメーター、`input`文字列を分割することができます。 最後の文字列に分割されていない残りの文字列が含まれています。 A`count`ゼロの値は、できるだけ多く繰り返して分割の既定の動作を提供します。  
  
 複数の一致が互いに隣接している場合、または先頭または末尾に一致が見つかった場合`input`、検出された一致の数は少なくとも 2 つ未満`count`、空の文字列は、配列に挿入されます。 数に一致した部分文字列と等しいかどうかを決定するにカウントが隣接する一致またはの先頭または入力文字列の末尾に一致する結果が空の文字列は、`count`します。 次の例では、正規表現で`/d+`を 3 つの部分文字列の最大数に 1 つ以上の 10 進数字を含む入力文字列を分割するために使用します。 配列の最初の要素を含む入力文字列の先頭には、正規表現パターンが一致すると、ため<xref:System.String.Empty?displayProperty=nameWithType>、2 つ目には、アルファベット文字、入力文字列内の最初のセットが含まれていますおよび、3 番目の文字列の残りの部分が含まれています。3 番目の一致が続きます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split25.cs#25)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split25.vb#25)]  
  
 正規表現でキャプチャするかっこを使用する場合は、分割の文字列の配列でキャプチャされたテキストが含まれます。 ただし、キャプチャされたテキストを含む配列の要素はカウントされませんを決定する一致の数に達したかどうか`count`します。 たとえば、次のコードとしての 7 要素配列の 4 つの部分文字列結果の最大値に文字列"apple-アンズ-plum-pear-banana"分割示します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split4.vb#4)]  
  
 ただし、正規表現パターンには、複数のかっこのキャプチャのセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 では、返される配列に最初のキャプチャするかっこのセットからキャプチャされたテキストのみが含まれます。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストは、返される配列に追加されます。 ただし、キャプチャされたテキストが含まれている、返される配列内の要素はカウントされませんを決定する数に一致した部分文字列と等しいかどうか`count`します。 たとえば、次のコードで正規表現を使用してキャプチャするためのかっこの 2 つのセット日付文字列から日付の要素を抽出します。 かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットは、スラッシュをキャプチャします。 呼び出し、<xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29>返される配列でメソッドが 2 つの要素の最大値にしを指定します。 コード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合は、2 つの要素の文字列配列を返します。 これをコンパイルおよび .NET Framework 2.0 またはそれ以降のバージョンで実行する場合は、3 要素の文字列配列を返します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split5.vb#5)]  
  
 正規表現が空の文字列を一致する場合<xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29>はすべての場所に空の文字列の区切り記号が見つからないので、1 文字の文字列の配列に文字列を分割します。 次の例は、多くの要素とがありますが、入力文字列に文字列「文字」を分割します。 Null 文字列が入力文字列の先頭に一致するため、null 文字列が返される配列の先頭に挿入されます。 これにより、入力文字列の最後に 2 つの文字で構成される 10 番目の要素。  
  
 [!code-vb[System.Text.RegularExpressions.Regex.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split12.vb#12)]  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member Split : string * string -&gt; string[]" Usage="System.Text.RegularExpressions.Regex.Split (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%2A?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>一連の文字ではなく正規表現によって決まります区切り記号で文字列を分割します。 `input`できるだけ多く繰り返して文字列を分割します。 場合`pattern`に含まれていない、`input`文字列、戻り値を格納した、元の値を 1 つの要素`input`文字列。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
> [!IMPORTANT]
>  静的な呼び出しで使用される正規表現をコンパイル<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドが自動的にキャッシュします。 コンパイルされた正規表現の有効期間を自分で管理するインスタンスを使用して、<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッド。  
  
 複数の一致が互いに隣接していない場合、空の文字列は、配列に挿入されます。 たとえば、1 つのハイフンで文字列を分割、返される配列に次のコードに示すよう、隣接する 2 つのハイフンが見つかった位置の空の文字列を含めると、します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split8.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split8.vb#8)]  
  
 先頭または入力文字列の末尾に一致するものが見つかった場合は空の文字列は、先頭または返される配列の末尾に含まれています。 次の例は、正規表現パターンを使用して`\d+`数値文字で入力文字列を分割します。 返される配列の最初と最後の要素の値は、文字列を開始し、一致する文字の数値で終わる、ため<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split22.cs#22)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split22.vb#22)]  
  
 キャプチャするかっこを使用する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>結果の文字列配列に文字が含まれるキャプチャされた任意の式。 たとえば、"plum-pear"ハイフンでキャプチャするかっこ内に配置される文字列を分割する場合、返される配列にはハイフンを含む文字列の要素が含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 ただし、正規表現パターンには、複数のかっこのキャプチャのセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 は、かっこ、キャプチャするための最初のセット内の一致が見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストが返される配列に含まれません。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも、返される配列に追加します。 たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。 かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットは、スラッシュをキャプチャします。 コード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合、スラッシュ文字は含まれませんこれをコンパイルおよび .NET Framework 2.0 またはそれ以降のバージョンで実行する場合に含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 正規表現が空の文字列を一致する場合<xref:System.Text.RegularExpressions.Regex.Split%2A>はすべての場所に空の文字列の区切り記号が見つからないので、1 文字の文字列の配列に文字列を分割します。 例:  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split13.cs#13)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split13.vb#13)]  
  
 返される配列が配列の末尾、先頭にある空の文字列も含まれることに注意してください。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が、メソッドが呼び出されて、アプリケーション ドメインの指定されたタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドが、メソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 パターン一致する場合にテキストを分割するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, count As Integer, startat As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int count, int startat);" />
      <MemberSignature Language="F#" Value="member this.Split : string * int * int -&gt; string[]" Usage="regex.Split (input, count, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <param name="count">分割を実行する最大回数。</param>
        <param name="startat">入力文字列中で検索を開始する文字位置。</param>
        <summary><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現で定義されている位置で、入力文字列を指定されている最大回数だけ分割し、部分文字列の配列に格納します。 正規表現パターンの検索は、入力文字列の指定した文字位置から開始します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%2A?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>一連の文字ではなく正規表現によって決まります区切り記号で文字列を分割します。 `count`を部分文字列の最大数を指定するパラメーター、`input`文字列の分割は、最後の文字列に分割されていない残り文字列にはが含まれています。 A`count`ゼロの値は、できるだけ多く繰り返して分割の既定の動作を提供します。 `startat`パラメーターは、最初の区切り記号の検索を開始するポイントを定義します (先頭の空白文字をスキップした場合のこの使用できます)。  
  
 一致が見つからない場合、 `count`+1 が、文字列の位置、メソッドを含む 1 つの要素の配列を返します、`input`文字列。 1 つまたは複数の一致が見つかった場合、返される配列の最初の要素には、一致の前に、の 1 つの文字までの最初の文字から文字列の最初の部分が含まれています。  
  
 複数の一致が互いに隣接し、見つかった一致項目の数が 2 つ以上の場合より小さい`count`、空の文字列は、配列に挿入されます。 同様での一致が見つかった場合`startat`文字列の最初の文字は、返される配列の最初の要素が空の文字列。 数に一致した部分文字列と等しいかどうかを決定するにカウントが隣接する一致の結果として空の文字列の`count`します。 次の例では、正規表現で`\d+`文字列内の文字の最初の部分文字列の開始位置を検索するために使用し、文字列の最大値を分割する位置に 3 回開始します。 返される文字列の配列は空の文字列、5 文字の英数字文字列、および、文字列の残りの部分、正規表現パターンが入力文字列の先頭に一致するので、  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split26.cs#26)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split26.vb#26)]  
  
 正規表現でキャプチャするかっこを使用する場合は、分割の文字列の配列でキャプチャされたテキストが含まれます。 ただし、キャプチャされたテキストを含む配列の要素はカウントされませんを決定する一致の数に達したかどうか`count`します。 たとえば、文字列の分割 '"apple-apricot-plum-pear-pomegranate-pineapple-peach"に、最大 4 つの部分文字列を次のコードに示すよう 7 要素の配列内の文字列の結果の 15 文字で始まる。  
  
 [!code-vb[System.Text.RegularExpressions.Regex.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split6.vb#6)]  
  
 ただし、正規表現パターンには、複数のかっこのキャプチャのセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 は、かっこ、キャプチャするための最初のセット内の一致が見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストは、返される配列に含まれません。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも、返される配列に追加します。 たとえば、次のコードは、文字列内の個々 の単語を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。 最初のキャプチャするかっこのセットは、ハイフンをキャプチャし、2 番目のセットが、垂直バーをキャプチャします。 コード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合、垂直方向は含まれませんバーの文字。これをコンパイルおよび .NET Framework 2.0 またはそれ以降のバージョンで実行する場合に含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split7.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split7.vb#7)]  
  
 正規表現が空の文字列を一致する場合<xref:System.Text.RegularExpressions.Regex.Split%2A>はすべての場所に空の文字列の区切り記号が見つからないので、1 文字の文字列の配列に文字列を分割します。 次の例は、以降の文字で入力文字列が含まれます同じ数の要素に「文字」という文字列を分割"a"です。 Null 文字列が入力文字列の末尾に一致するため、null 文字列が返される配列の末尾に挿入されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split14.cs#14)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split14.vb#14)]  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンス トラクター。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作をアプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合に、例外がスロー、<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されます。 タイムアウトが定義されていない場合、<xref:System.Text.RegularExpressions.Regex>コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合または<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String, options As RegexOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Split : string * string * System.Text.RegularExpressions.RegexOptions -&gt; string[]" Usage="System.Text.RegularExpressions.Regex.Split (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。 指定したオプションで、一致操作を変更します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>一連の文字ではなく正規表現によって決まります区切り記号で文字列を分割します。 文字列は、可能な回数だけ分割します。 戻り値には区切り記号が検出されない場合はした元の値を 1 つの要素が含まれています`input`文字列。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
> [!IMPORTANT]
>  静的な呼び出しで使用される正規表現をコンパイル<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドが自動的にキャッシュします。 コンパイルされた正規表現の有効期間を自分で管理するインスタンスを使用して、<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッド。  
  
 複数の一致が互いに隣接していない場合、空の文字列は、配列に挿入されます。 たとえば、1 つのハイフンで文字列を分割、返される配列に空の文字列を隣接する 2 つのハイフンが見つかった位置に含めると、します。  
  
 先頭または入力文字列の末尾に一致するものが見つかった場合は空の文字列は、先頭または返される配列の末尾に含まれています。 次の例は、正規表現パターンを使用して`[a-z]+`大文字または小文字のアルファベット文字で入力文字列を分割します。 返される配列の最初と最後の要素の値は、文字列を開始し、アルファベット文字で終わる、ため<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split24.cs#24)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split24.vb#24)]  
  
 キャプチャするかっこを使用する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>結果の文字列配列に文字が含まれるキャプチャされた任意の式。 たとえば、"plum-pear"ハイフンでキャプチャするかっこ内に配置される文字列を分割する場合、返される配列にはハイフンを含む文字列の要素が含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 ただし、正規表現パターンには、複数のかっこのキャプチャのセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 は、かっこ、キャプチャするための最初のセット内の一致が見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストが返される配列に含まれません。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも、返される配列に追加します。 たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。 かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットは、スラッシュをキャプチャします。 コード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合、スラッシュ文字は含まれませんこれをコンパイルおよび .NET Framework 2.0 またはそれ以降のバージョンで実行する場合に含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 正規表現が空の文字列を一致する場合<xref:System.Text.RegularExpressions.Regex.Split%2A>はすべての場所に空の文字列の区切り記号が見つからないので、1 文字の文字列の配列に文字列を分割します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が、メソッドが呼び出されて、アプリケーション ドメインの指定されたタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は、<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>このメソッドが、メソッドが呼び出されて、アプリケーション ドメインの既定のタイムアウト値に等しい間隔後にタイムアウトが発生しました。 値は、アプリケーション ドメインのタイムアウト値が定義されていない場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、タイムアウトしたからメソッドを防ぐことが使用されます。 パターン一致する場合にテキストを分割するための推奨される静的メソッドは<see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Split : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; string[]" Usage="System.Text.RegularExpressions.Regex.Split (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
        <returns>文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>メソッドと似ています、<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドの点を除いて、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>一連の文字ではなく正規表現によって決まります区切り記号で文字列を分割します。 文字列は、可能な回数だけ分割します。 戻り値には区切り記号が検出されない場合はした元の値を 1 つの要素が含まれています`input`文字列。  
  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
> [!IMPORTANT]
>  静的な呼び出しで使用される正規表現をコンパイル<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドが自動的にキャッシュします。 コンパイルされた正規表現の有効期間を自分で管理するインスタンスを使用して、<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッド。  
  
 複数の一致が互いに隣接していない場合、空の文字列は、配列に挿入されます。 たとえば、1 つのハイフンで文字列を分割、返される配列に空の文字列を隣接する 2 つのハイフンが見つかった位置に含めると、します。  
  
 先頭または入力文字列の末尾に一致するものが見つかった場合は空の文字列は、先頭または返される配列の末尾に含まれています。 次の例は、正規表現パターンを使用して`[a-z]+`大文字または小文字のアルファベット文字で入力文字列を分割します。 返される配列の最初と最後の要素の値は、文字列を開始し、アルファベット文字で終わる、ため<xref:System.String.Empty?displayProperty=nameWithType>します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split23.cs#23)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split23.vb#23)]  
  
 キャプチャするかっこを使用する場合、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>結果の文字列配列に文字が含まれるキャプチャされた任意の式。 たとえば、"plum-pear"ハイフンでキャプチャするかっこ内に配置される文字列を分割する場合、返される配列にはハイフンを含む文字列の要素が含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 ただし、正規表現パターンには、複数のかっこのキャプチャのセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 は、かっこ、キャプチャするための最初のセット内の一致が見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストが返される配列に含まれません。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも、返される配列に追加します。 たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。 かっこのキャプチャの最初のセットは、ハイフンをキャプチャし、2 番目のセットは、スラッシュをキャプチャします。 コード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合、スラッシュ文字は含まれませんこれをコンパイルおよび .NET Framework 2.0 またはそれ以降のバージョンで実行する場合に含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 正規表現が空の文字列を一致する場合<xref:System.Text.RegularExpressions.Regex.Split%2A>はすべての場所に空の文字列の区切り記号が見つからないので、1 文字の文字列の配列に文字列を分割します。  
  
 `matchTimeout`パラメーターする方法を指定時間の長い、パターン マッチング メソッドは必要がありますがタイムアウトする前に、検索しようとしています。入力の処理時に応答を停止させない過度なバックトラッ キングに依存する正規表現の使用を防止するタイムアウト間隔を設定する近い一致が含まれています。 詳細については、次を参照してください。[正規表現に関するベスト プラクティス](~/docs/standard/base-types/best-practices.md)と[バックトラッ キング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)します。 メソッドをスローする時間間隔で一致するものがない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。 `matchTimeout` メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage"><para>設定することをお勧め、<paramref name="matchTimeout" />に 2 秒などの適切な値のパラメーター。 タイムアウトを指定することで無効にした場合<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、正規表現エンジンが若干優れたパフォーマンスを提供します。 ただし、タイムアウトは、次の条件下でのみ無効にする必要があります。 
-正規表現によって処理される入力は既知の信頼されたソースから派生または静的テキストで構成されます。 これには、動的にユーザーが入力されているテキストが含まれません。  
  
-効率的に処理することを確認する正規表現パターンが十分にテストされているときは、一致すると、一致以外の場合と近い一致します。  
  
場合は、正規表現パターンにほぼ一致を処理するときに、過度なバックトラッ キングが発生することがわかっている言語要素は含まれていません。</para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">シリアル化情報が設定されるオブジェクト。</param>
        <param name="context">シリアル化データを格納および取得する場所。 このパラメーターは、今後使用するために予約されています。</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトの逆シリアル化に必要なデータを入力します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="regex.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="Regex" /> コンストラクターに渡された正規表現パターンを返します。</summary>
        <returns><see langword="Regex" /> コンストラクターに渡された <paramref name="pattern" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `pattern`パラメーターは、シンボルと一致する文字列を記述する正規表現言語要素で構成されています。 正規表現の詳細については、次を参照してください。 [.NET Framework の正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="T:System.Text.RegularExpressions.Regex" /> によって作成された正規表現の基本クラスには、<see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />メソッド。 これらのコンパイルされた正規表現の使用、<see cref="M:System.Text.RegularExpressions.Regex.ToString" />基底クラスの実装。 派生クラスから呼び出された場合、<see cref="M:System.Text.RegularExpressions.Regex.ToString" />メソッドに渡された文字列を返します、<paramref name="pattern" />のパラメーター、<see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />正規表現を定義するために使用されたクラスのコンス トラクター。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Unescape">
      <MemberSignature Language="C#" Value="public static string Unescape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Unescape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unescape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Unescape(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Unescape : string -&gt; string" Usage="System.Text.RegularExpressions.Regex.Unescape str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">変換対象のテキストを含んでいる入力文字列。</param>
        <summary>入力文字列内に含まれるエスケープされた文字を変換します。</summary>
        <returns>エスケープされた文字を含む文字列を、エスケープされていない形式に変換したもの。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.Unescape%2A>メソッドは次の 2 つの変換のいずれかを実行します。  
  
-   によって実行される変換を反転、<xref:System.Text.RegularExpressions.Regex.Escape%2A>エスケープ文字を削除することによってメソッド ("\\") から各文字はエスケープします。 含まれます、 \\、*、+、?、 &#124;、{、[、(、)、^、$、.、#、および空白文字。 さらに、<xref:System.Text.RegularExpressions.Regex.Unescape%2A>メソッド右角かっこ (]) を閉じたり、中かっこ (}) 文字のエスケープ解除します。  
  
> [!NOTE]
>  <xref:System.Text.RegularExpressions.Regex.Unescape%2A> 正確な文字がエスケープされた、ことが推定できないため、エスケープ後の文字列を完全に取り消すことはできません。  
  
-   Verbatim 文字列リテラルの 16 進数の値は、実際の印刷可能な文字を置き換えます。 たとえば、置き換えられます@"\x07"では、"\a"、または@"\x0A""\n"と。 \A、\b、\e、\n \r、\f、\t、\v などのサポートされているエスケープ文字と文字の英数字に変換します。
  
 場合、<xref:System.Text.RegularExpressions.Regex.Unescape%2A>メソッドに変換できない場合、その他のエスケープ シーケンスが発生したスロー \w \s など、<xref:System.ArgumentException>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" /> には、認識されないエスケープ シーケンスが含まれています。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="str" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語 - クイック リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="UseOptionC">
      <MemberSignature Language="C#" Value="protected bool UseOptionC ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionC() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionC" />
      <MemberSignature Language="VB.NET" Value="Protected Function UseOptionC () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool UseOptionC();" />
      <MemberSignature Language="F#" Value="member this.UseOptionC : unit -&gt; bool" Usage="regex.UseOptionC " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <returns><see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> オプションが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseOptionR">
      <MemberSignature Language="C#" Value="protected bool UseOptionR ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionR() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionR" />
      <MemberSignature Language="VB.NET" Value="Protected Function UseOptionR () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool UseOptionR();" />
      <MemberSignature Language="F#" Value="member this.UseOptionR : unit -&gt; bool" Usage="regex.UseOptionR " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
        <returns><see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> オプションが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateMatchTimeout">
      <MemberSignature Language="C#" Value="protected internal static void ValidateMatchTimeout (TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig void ValidateMatchTimeout(valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Sub ValidateMatchTimeout (matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static void ValidateMatchTimeout(TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member ValidateMatchTimeout : TimeSpan -&gt; unit" Usage="System.Text.RegularExpressions.Regex.ValidateMatchTimeout matchTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="matchTimeout">チェックするタイムアウト間隔。</param>
        <summary>タイムアウト間隔が許容範囲内にあるかどうかを確認します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>