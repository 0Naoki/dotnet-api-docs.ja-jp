<Type Name="Regex" FullName="System.Text.RegularExpressions.Regex">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3c08141570b114082146d0cd7184fc89c6417b48" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70521143" /></Metadata><TypeSignature Language="C#" Value="public class Regex : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Regex extends System.Object implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Regex" />
  <TypeSignature Language="VB.NET" Value="Public Class Regex&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Regex : System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Regex = class&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="39639-101">変更不可の正規表現を表します。</span><span class="sxs-lookup"><span data-stu-id="39639-101">Represents an immutable regular expression.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-102">クラス<xref:System.Text.RegularExpressions.Regex>は、.NET Framework の正規表現エンジンを表します。</span><span class="sxs-lookup"><span data-stu-id="39639-102">The <xref:System.Text.RegularExpressions.Regex> class represents the .NET Framework's regular expression engine.</span></span> <span data-ttu-id="39639-103">これを使用すると、大量のテキストをすばやく解析して特定の文字パターンを見つけることができます。テキスト部分文字列を抽出、編集、置換、または削除するには抽出された文字列をコレクションに追加して、レポートを生成します。</span><span class="sxs-lookup"><span data-stu-id="39639-103">It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39639-104">主に、特定のパターンに準拠しているかどうかを判断して文字列を検証すること<xref:System.Configuration.RegexStringValidator?displayProperty=nameWithType>が重要な場合は、クラスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="39639-104">If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <xref:System.Configuration.RegexStringValidator?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="39639-105">正規表現を使用するには、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」に記載されている構文を使用して、テキストストリームで識別するパターンを定義します。</span><span class="sxs-lookup"><span data-stu-id="39639-105">To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="39639-106">次に、必要に応じて<xref:System.Text.RegularExpressions.Regex>オブジェクトをインスタンス化することができます。</span><span class="sxs-lookup"><span data-stu-id="39639-106">Next, you can optionally instantiate a <xref:System.Text.RegularExpressions.Regex> object.</span></span> <span data-ttu-id="39639-107">最後に、正規表現パターンに一致するテキストを置換したり、パターン一致を識別したりするなど、何らかの操作を実行するメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-107">Finally, you call a method that performs some operation, such as replacing text that matches the regular expression pattern, or identifying a pattern match.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39639-108">一般的な正規表現パターンの一部については、「[正規表現の例](~/docs/standard/base-types/regular-expression-examples.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-108">For some common regular expression patterns, see [Regular Expression Examples](~/docs/standard/base-types/regular-expression-examples.md).</span></span> <span data-ttu-id="39639-109">正規表現パターンのオンラインライブラリも多数あります。たとえば、 [Regular-Expressions.info](https://www.regular-expressions.info/examples.html)のようなものがあります。</span><span class="sxs-lookup"><span data-stu-id="39639-109">There are also a number of online libraries of regular expression patterns, such as the one at [Regular-Expressions.info](https://www.regular-expressions.info/examples.html).</span></span>  
  
<a name="remarks"></a><span data-ttu-id="39639-110">クラスの<xref:System.Text.RegularExpressions.Regex>使用方法の詳細については、このトピックの次のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-110">For more information about using the <xref:System.Text.RegularExpressions.Regex> class, see the following sections in this topic:</span></span>  
  
-   [<span data-ttu-id="39639-111">Regex および文字列メソッド</span><span class="sxs-lookup"><span data-stu-id="39639-111">Regex vs. String Methods</span></span>](#regex_vs_string)  
  
-   [<span data-ttu-id="39639-112">静的メソッドとインスタンスメソッド</span><span class="sxs-lookup"><span data-stu-id="39639-112">Static vs. Instance Methods</span></span>](#static_vs_instance)  
  
-   [<span data-ttu-id="39639-113">正規表現操作の実行</span><span class="sxs-lookup"><span data-stu-id="39639-113">Performing Regular Expression Operations</span></span>](#regex_ops)  
  
-   [<span data-ttu-id="39639-114">タイムアウト値の定義</span><span class="sxs-lookup"><span data-stu-id="39639-114">Defining a Time-Out Value</span></span>](#define_timeout)  
  
 <span data-ttu-id="39639-115">正規表現の言語について詳しくは、「[正規表現言語 - クイック リファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照するか、次の資料のいずれかをダウンロードして印刷してください。</span><span class="sxs-lookup"><span data-stu-id="39639-115">For more information about the regular expression language, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) or download and print one of these brochures:</span></span>  
  
 [<span data-ttu-id="39639-116">Word (.docx) 形式のクイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-116">Quick Reference in Word (.docx) format</span></span>](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)  
 [<span data-ttu-id="39639-117">PDF (.pdf) 形式のクイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-117">Quick Reference in PDF (.pdf) format</span></span>](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)  
  
<a name="regex_vs_string"></a>   
## <a name="regex-vs-string-methods"></a><span data-ttu-id="39639-118">Regex および文字列メソッド</span><span class="sxs-lookup"><span data-stu-id="39639-118">Regex vs. String Methods</span></span>  
 <span data-ttu-id="39639-119">クラス<xref:System.String?displayProperty=nameWithType>には、テキストを使用してパターンマッチングを実行するために使用できる、いくつかの検索および比較メソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-119">The <xref:System.String?displayProperty=nameWithType> class includes several search and comparison methods that you can use to perform pattern matching with text.</span></span> <span data-ttu-id="39639-120">たとえば、、 <xref:System.String.EndsWith%2A?displayProperty=nameWithType>、 <xref:System.String.Contains%2A?displayProperty=nameWithType>および<xref:System.String.StartsWith%2A?displayProperty=nameWithType>メソッドは、指定された部分文字列が文字列<xref:System.String.IndexOf%2A?displayProperty=nameWithType>インスタンスに含まれるかどう<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>かを<xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType>判断し、、 <xref:System.String.IndexOfAny%2A?displayProperty=nameWithType>、、およびの各メソッドが開始を返します。文字列内の指定した部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="39639-120">For example, the <xref:System.String.Contains%2A?displayProperty=nameWithType>, <xref:System.String.EndsWith%2A?displayProperty=nameWithType>, and <xref:System.String.StartsWith%2A?displayProperty=nameWithType> methods determine whether a string instance contains a specified substring; and the <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, <xref:System.String.IndexOfAny%2A?displayProperty=nameWithType>, <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.String.LastIndexOfAny%2A?displayProperty=nameWithType> methods return the starting position of a specified substring in a string.</span></span> <span data-ttu-id="39639-121">特定の文字列を検索<xref:System.String?displayProperty=nameWithType>する場合は、クラスのメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-121">Use the methods of the <xref:System.String?displayProperty=nameWithType> class when you are searching for a specific string.</span></span> <span data-ttu-id="39639-122">文字列内<xref:System.Text.RegularExpressions.Regex>の特定のパターンを検索する場合は、クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-122">Use the <xref:System.Text.RegularExpressions.Regex> class when you are searching for a specific pattern in a string.</span></span> <span data-ttu-id="39639-123">詳細と例については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-123">For more information and examples, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>  
  
 [<span data-ttu-id="39639-124">「解説」に戻る</span><span class="sxs-lookup"><span data-stu-id="39639-124">Back to Remarks</span></span>](#remarks)  
  
<a name="static_vs_instance"></a>   
## <a name="static-vs-instance-methods"></a><span data-ttu-id="39639-125">静的メソッドとインスタンスメソッド</span><span class="sxs-lookup"><span data-stu-id="39639-125">Static vs. Instance Methods</span></span>  
 <span data-ttu-id="39639-126">正規表現パターンを定義した後は、次の2つの方法のいずれかで正規表現エンジンに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="39639-126">After you define a regular expression pattern, you can provide it to the regular expression engine in either of two ways:</span></span>  
  
-   <span data-ttu-id="39639-127">正規表現を<xref:System.Text.RegularExpressions.Regex>表すオブジェクトをインスタンス化する。</span><span class="sxs-lookup"><span data-stu-id="39639-127">By instantiating a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression.</span></span> <span data-ttu-id="39639-128">これを行うには、正規表現パターンを<xref:System.Text.RegularExpressions.Regex.%23ctor%2A>コンストラクターに渡します。</span><span class="sxs-lookup"><span data-stu-id="39639-128">To do this, you pass the regular expression pattern to a <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> constructor.</span></span> <span data-ttu-id="39639-129">オブジェクトは変更できません。正規表現<xref:System.Text.RegularExpressions.Regex>を使用してオブジェクトをインスタンス化する場合、そのオブジェクトの正規表現を変更することはできません。 <xref:System.Text.RegularExpressions.Regex></span><span class="sxs-lookup"><span data-stu-id="39639-129">A <xref:System.Text.RegularExpressions.Regex> object is immutable; when you instantiate a <xref:System.Text.RegularExpressions.Regex> object with a regular expression, that object's regular expression cannot be changed.</span></span>  
  
-   <span data-ttu-id="39639-130">`static`  ( `Shared`  Visual Basic ) <xref:System.Text.RegularExpressions.Regex> メソッドに検索する正規表現とテキストの両方を指定する。</span><span class="sxs-lookup"><span data-stu-id="39639-130">By supplying both the regular expression and the text to search to a `static` (`Shared` in Visual Basic) <xref:System.Text.RegularExpressions.Regex> method.</span></span> <span data-ttu-id="39639-131">これにより、オブジェクトを<xref:System.Text.RegularExpressions.Regex>明示的に作成せずに、正規表現を使用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="39639-131">This enables you to use a regular expression without explicitly creating a <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="39639-132">すべて<xref:System.Text.RegularExpressions.Regex>のパターン識別メソッドには、静的オーバーロードとインスタンスオーバーロードの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-132">All <xref:System.Text.RegularExpressions.Regex> pattern identification methods include both static and instance overloads.</span></span>  
  
 <span data-ttu-id="39639-133">正規表現エンジンは、パターンを使用する前に、特定のパターンをコンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-133">The regular expression engine must compile a particular pattern before the pattern can be used.</span></span> <span data-ttu-id="39639-134">オブジェクト<xref:System.Text.RegularExpressions.Regex>は不変であるため、これは<xref:System.Text.RegularExpressions.Regex>クラスコンストラクターまたは静的メソッドが呼び出されたときに発生する1回限りのプロシージャです。</span><span class="sxs-lookup"><span data-stu-id="39639-134">Because <xref:System.Text.RegularExpressions.Regex> objects are immutable, this is a one-time procedure that occurs when a <xref:System.Text.RegularExpressions.Regex> class constructor or a static method is called.</span></span> <span data-ttu-id="39639-135">1つの正規表現を繰り返しコンパイルする必要性をなくすために、正規表現エンジンは、静的メソッド呼び出しで使用されるコンパイル済みの正規表現をキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="39639-135">To eliminate the need to repeatedly compile a single regular expression, the regular expression engine caches the compiled regular expressions used in static method calls.</span></span> <span data-ttu-id="39639-136">結果として、正規表現パターン一致メソッドは、静的メソッドとインスタンスメソッドに対して同等のパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="39639-136">As a result, regular expression pattern-matching methods offer comparable performance for static and instance methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="39639-137">.NET Framework バージョン1.0 および1.1 では、インスタンスまたは静的メソッドの呼び出しで使用されたかどうかにかかわらず、コンパイルされたすべての正規表現がキャッシュされていました。</span><span class="sxs-lookup"><span data-stu-id="39639-137">In the .NET Framework versions 1.0 and 1.1, all compiled regular expressions, whether they were used in instance or static method calls, were cached.</span></span> <span data-ttu-id="39639-138">.NET Framework 2.0 以降では、静的メソッドの呼び出しで使用される正規表現だけがキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="39639-138">Starting with the .NET Framework 2.0, only regular expressions used in static method calls are cached.</span></span>  
  
 <span data-ttu-id="39639-139">ただし、次の2つの場合は、キャッシュがパフォーマンスに悪影響を及ぼす可能性があります。</span><span class="sxs-lookup"><span data-stu-id="39639-139">However, caching can adversely affect performance in the following two cases:</span></span>  
  
-   <span data-ttu-id="39639-140">多数の正規表現で静的メソッド呼び出しを使用する場合。</span><span class="sxs-lookup"><span data-stu-id="39639-140">When you use static method calls with a large number of regular expressions.</span></span> <span data-ttu-id="39639-141">既定では、正規表現エンジンは、最近使用された15個の静的正規表現をキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="39639-141">By default, the regular expression engine caches the 15 most recently used static regular expressions.</span></span> <span data-ttu-id="39639-142">アプリケーションで15個を超える静的正規表現を使用する場合は、一部の正規表現を再コンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-142">If your application uses more than 15 static regular expressions, some regular expressions must be recompiled.</span></span> <span data-ttu-id="39639-143">この再コンパイルを防ぐために、 <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=nameWithType>プロパティを増やすことができます。</span><span class="sxs-lookup"><span data-stu-id="39639-143">To prevent this recompilation, you can increase the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="39639-144">以前にコンパイルさ<xref:System.Text.RegularExpressions.Regex>れた正規表現を使用して新しいオブジェクトをインスタンス化する場合。</span><span class="sxs-lookup"><span data-stu-id="39639-144">When you instantiate new <xref:System.Text.RegularExpressions.Regex> objects with regular expressions that have previously been compiled.</span></span> <span data-ttu-id="39639-145">たとえば、次のコードでは、テキストストリーム内の重複する単語を検索する正規表現を定義しています。</span><span class="sxs-lookup"><span data-stu-id="39639-145">For example, the following code defines a regular expression to locate duplicated words in a text stream.</span></span> <span data-ttu-id="39639-146">この例では1つの正規表現を使用して<xref:System.Text.RegularExpressions.Regex>いますが、新しいオブジェクトをインスタンス化してテキストの各行を処理します。</span><span class="sxs-lookup"><span data-stu-id="39639-146">Although the example uses a single regular expression, it instantiates a new <xref:System.Text.RegularExpressions.Regex> object to process each line of text.</span></span> <span data-ttu-id="39639-147">この結果、ループの反復ごとに正規表現が再コンパイルされます。</span><span class="sxs-lookup"><span data-stu-id="39639-147">This results in the recompilation of the regular expression with each iteration of the loop.</span></span>  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#1)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#1)]  
  
     <span data-ttu-id="39639-148">再コンパイルが行われないようにする<xref:System.Text.RegularExpressions.Regex>には、次に書き直された例に示すように、必要なすべてのコードからアクセスできる単一のオブジェクトをインスタンス化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-148">To prevent recompilation, you should instantiate a single <xref:System.Text.RegularExpressions.Regex> object that is accessible to all code that requires it, as shown in the following rewritten example.</span></span>  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#2)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#2)]  
  
 [<span data-ttu-id="39639-149">「解説」に戻る</span><span class="sxs-lookup"><span data-stu-id="39639-149">Back to Remarks</span></span>](#remarks)  
  
<a name="regex_ops"></a>   
## <a name="performing-regular-expression-operations"></a><span data-ttu-id="39639-150">正規表現操作の実行</span><span class="sxs-lookup"><span data-stu-id="39639-150">Performing Regular Expression Operations</span></span>  
 <span data-ttu-id="39639-151"><xref:System.Text.RegularExpressions.Regex>オブジェクトをインスタンス化してそのメソッドを呼び出したり、静的メソッドを呼び出したり<xref:System.Text.RegularExpressions.Regex>するかどうかにかかわらず、クラスには次のパターン照合機能が用意されています。</span><span class="sxs-lookup"><span data-stu-id="39639-151">Whether you decide to instantiate a <xref:System.Text.RegularExpressions.Regex> object and call its methods or call static methods, the <xref:System.Text.RegularExpressions.Regex> class offers the following pattern-matching functionality:</span></span>  
  
-   <span data-ttu-id="39639-152">一致の検証。</span><span class="sxs-lookup"><span data-stu-id="39639-152">Validation of a match.</span></span> <span data-ttu-id="39639-153">一致が存在<xref:System.Text.RegularExpressions.Regex.IsMatch%2A>するかどうかを判断するには、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-153">You call the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method to determine whether a match is present.</span></span>  
  
-   <span data-ttu-id="39639-154">単一の一致を取得します。</span><span class="sxs-lookup"><span data-stu-id="39639-154">Retrieval of a single match.</span></span> <span data-ttu-id="39639-155">文字列または<xref:System.Text.RegularExpressions.Regex.Match%2A>文字列の一部で<xref:System.Text.RegularExpressions.Match>最初に一致した文字列を表すオブジェクトを取得するには、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-155">You call the <xref:System.Text.RegularExpressions.Regex.Match%2A> method to retrieve a <xref:System.Text.RegularExpressions.Match> object that represents the first match in a string or in part of a string.</span></span> <span data-ttu-id="39639-156">後続の一致は、 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドを呼び出すことによって取得できます。</span><span class="sxs-lookup"><span data-stu-id="39639-156">Subsequent matches can be retrieved by calling the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="39639-157">すべての一致を取得します。</span><span class="sxs-lookup"><span data-stu-id="39639-157">Retrieval of all matches.</span></span> <span data-ttu-id="39639-158">文字列または<xref:System.Text.RegularExpressions.Regex.Matches%2A>文字列の一部で<xref:System.Text.RegularExpressions.MatchCollection?displayProperty=nameWithType>見つかったすべての一致を表すオブジェクトを取得するには、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-158">You call the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method to retrieve a <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=nameWithType> object that represents all the matches found in a string or in part of a string.</span></span>  
  
-   <span data-ttu-id="39639-159">一致したテキストの置換。</span><span class="sxs-lookup"><span data-stu-id="39639-159">Replacement of matched text.</span></span> <span data-ttu-id="39639-160">一致した<xref:System.Text.RegularExpressions.Regex.Replace%2A>テキストを置換するには、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-160">You call the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to replace matched text.</span></span> <span data-ttu-id="39639-161">置換テキストは、正規表現で定義することもできます。</span><span class="sxs-lookup"><span data-stu-id="39639-161">The replacement text can also be defined by a regular expression.</span></span> <span data-ttu-id="39639-162">また、一部の<xref:System.Text.RegularExpressions.Regex.Replace%2A>メソッドには、置換テキストをプログラムで定義できるようにする<xref:System.Text.RegularExpressions.MatchEvaluator>パラメーターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-162">In addition, some of the <xref:System.Text.RegularExpressions.Regex.Replace%2A> methods include a <xref:System.Text.RegularExpressions.MatchEvaluator> parameter that enables you to programmatically define the replacement text.</span></span>  
  
-   <span data-ttu-id="39639-163">入力文字列の一部から形成される文字列配列の作成。</span><span class="sxs-lookup"><span data-stu-id="39639-163">Creation of a string array that is formed from parts of an input string.</span></span> <span data-ttu-id="39639-164"><xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドを呼び出して、正規表現で定義されている位置で入力文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-164">You call the <xref:System.Text.RegularExpressions.Regex.Split%2A> method to split an input string at positions that are defined by the regular expression.</span></span>  
  
 <span data-ttu-id="39639-165">クラスに<xref:System.Text.RegularExpressions.Regex>は、パターン一致メソッドに加えて、いくつかの特殊な目的のメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="39639-165">In addition to its pattern-matching methods, the <xref:System.Text.RegularExpressions.Regex> class includes several special-purpose methods:</span></span>  
  
-   <span data-ttu-id="39639-166">メソッド<xref:System.Text.RegularExpressions.Regex.Escape%2A>は、正規表現または入力文字列で正規表現演算子として解釈される可能性のあるすべての文字をエスケープします。</span><span class="sxs-lookup"><span data-stu-id="39639-166">The <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes any characters that may be interpreted as regular expression operators in a regular expression or input string.</span></span>  
  
-   <span data-ttu-id="39639-167">メソッド<xref:System.Text.RegularExpressions.Regex.Unescape%2A>は、これらのエスケープ文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="39639-167">The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method removes these escape characters.</span></span>  
  
-   <span data-ttu-id="39639-168">メソッド<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>は、定義済みの正規表現を含むアセンブリを作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-168">The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method creates an assembly that contains predefined regular expressions.</span></span> <span data-ttu-id="39639-169">.NET Framework には、これらの特殊な用途のアセンブリの<xref:System.Web.RegularExpressions?displayProperty=nameWithType>例が名前空間に含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-169">The .NET Framework contains examples of these special-purpose assemblies in the <xref:System.Web.RegularExpressions?displayProperty=nameWithType> namespace.</span></span>  
  
 [<span data-ttu-id="39639-170">「解説」に戻る</span><span class="sxs-lookup"><span data-stu-id="39639-170">Back to Remarks</span></span>](#remarks)  
  
<a name="define_timeout"></a>   
## <a name="defining-a-time-out-value"></a><span data-ttu-id="39639-171">タイムアウト値の定義</span><span class="sxs-lookup"><span data-stu-id="39639-171">Defining a Time-Out Value</span></span>  
 <span data-ttu-id="39639-172">.NET Framework は、完全な機能を備えた正規表現言語をサポートしています。この言語では、パターンマッチングに大きな力と柔軟性が提供されます。</span><span class="sxs-lookup"><span data-stu-id="39639-172">The .NET Framework supports a full-featured regular expression language that provides substantial power and flexibility in pattern matching.</span></span> <span data-ttu-id="39639-173">しかし、パワーと柔軟性にはコストがかかります。パフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="39639-173">However, the power and flexibility come at a cost: the risk of poor performance.</span></span> <span data-ttu-id="39639-174">適切に動作しない正規表現は、驚くほど簡単に作成できます。</span><span class="sxs-lookup"><span data-stu-id="39639-174">Regular expressions that perform poorly are surprisingly easy to create.</span></span> <span data-ttu-id="39639-175">場合によっては、過度なバックトラッキングに依存する正規表現操作が、正規表現パターンにほぼ一致するテキストを処理するときに応答を停止するように見えることがあります。</span><span class="sxs-lookup"><span data-stu-id="39639-175">In some cases, regular expression operations that rely on excessive backtracking can appear to stop responding when they process text that nearly matches the regular expression pattern.</span></span> <span data-ttu-id="39639-176">.NET Framework 正規表現エンジンの詳細については、「[正規表現の動作の詳細](~/docs/standard/base-types/details-of-regular-expression-behavior.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-176">For more information about the .NET Framework regular expression engine, see [Details of Regular Expression Behavior](~/docs/standard/base-types/details-of-regular-expression-behavior.md).</span></span> <span data-ttu-id="39639-177">過度なバックトラッキングの詳細については、「[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-177">For more information about excessive backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="39639-178">以降では、正規表現の一致のタイムアウト間隔を定義できます。 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]</span><span class="sxs-lookup"><span data-stu-id="39639-178">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can define a time-out interval for regular expression matches.</span></span> <span data-ttu-id="39639-179">正規表現エンジンがこの期間内に一致を識別できない場合、一致操作は例外<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="39639-179">If the regular expression engine cannot identify a match within this time interval, the matching operation throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-180">ほとんどの場合、正規表現パターンにほぼ一致するテキストを照合しようとすることで、正規表現エンジンが処理能力を無駄にするのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="39639-180">In most cases, this prevents the regular expression engine from wasting processing power by trying to match text that nearly matches the regular expression pattern.</span></span> <span data-ttu-id="39639-181">また、タイムアウト間隔の設定が低すぎるか、または現在のコンピューターの負荷によってパフォーマンスが全体的に低下していることを示している可能性もあります。</span><span class="sxs-lookup"><span data-stu-id="39639-181">It also could indicate, however, that the timeout interval has been set too low, or that the current machine load has caused an overall degradation in performance.</span></span>  
  
 <span data-ttu-id="39639-182">例外の処理方法は、例外の原因によって異なります。</span><span class="sxs-lookup"><span data-stu-id="39639-182">How you handle the exception depends on the cause of the exception.</span></span> <span data-ttu-id="39639-183">タイムアウト間隔の設定が低すぎるか、コンピューターの負荷が過剰であるために例外が発生した場合は、タイムアウト間隔を長くして、照合操作を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="39639-183">If the exception occurs because the time-out interval is set too low or because of excessive machine load, you can increase the time-out interval and retry the matching operation.</span></span> <span data-ttu-id="39639-184">正規表現が過剰なバックトラッキングに依存しているために例外が発生した場合は、一致するものが存在しないと見なすことができます。また、必要に応じて、正規表現パターンの変更に役立つ情報をログに記録することもできます。</span><span class="sxs-lookup"><span data-stu-id="39639-184">If the exception occurs because the regular expression relies on excessive backtracking, you can assume that a match does not exist, and, optionally, you can log information that will help you modify the regular expression pattern.</span></span>  
  
 <span data-ttu-id="39639-185">正規表現オブジェクトをインスタンス化するときに、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>コンストラクターを呼び出すことによってタイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-185">You can set a time-out interval by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor when you instantiate a regular expression object.</span></span> <span data-ttu-id="39639-186">静的メソッドの場合は、パラメーターを`matchTimeout`持つ一致するメソッドのオーバーロードを呼び出すことにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-186">For static methods, you can set a time-out interval by calling an overload of a matching method that has a `matchTimeout` parameter.</span></span> <span data-ttu-id="39639-187">タイムアウト値を明示的に設定しない場合、既定のタイムアウト値は次のように決定されます。</span><span class="sxs-lookup"><span data-stu-id="39639-187">If you do not set a time-out value explicitly, the default time-out value  is determined as follows:</span></span>  
  
-   <span data-ttu-id="39639-188">アプリケーション全体のタイムアウト値を使用する (存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="39639-188">By using the application-wide time-out value, if one exists.</span></span> <span data-ttu-id="39639-189">これには、 <xref:System.Text.RegularExpressions.Regex>オブジェクトがインスタンス化されるアプリケーションドメインに適用される任意のタイムアウト値を指定することも、静的メソッド呼び出しを行うこともできます。</span><span class="sxs-lookup"><span data-stu-id="39639-189">This can be any time-out value that applies to the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is instantiated or the static method call is made.</span></span> <span data-ttu-id="39639-190"><xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>メソッドを呼び出して、 <xref:System.TimeSpan>値の文字列形式を "REGEX_DEFAULT_MATCH_TIMEOUT" プロパティに割り当てることにより、アプリケーション全体のタイムアウト値を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-190">You can set the application-wide time-out value by calling the <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> method to assign the string representation of a <xref:System.TimeSpan> value to the "REGEX_DEFAULT_MATCH_TIMEOUT" property.</span></span>  
  
-   <span data-ttu-id="39639-191">アプリケーション全体のタイムアウト<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>値が設定されていない場合は、値を使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-191">By using the value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>, if no application-wide time-out value has been set.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="39639-192">すべての正規表現のパターン一致操作で、タイムアウト値を設定することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="39639-192">We recommend that you set a time-out value in all regular expression pattern-matching operations.</span></span> <span data-ttu-id="39639-193">詳細については、「[正規表現のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-193">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).</span></span>  
  
 [<span data-ttu-id="39639-194">「解説」に戻る</span><span class="sxs-lookup"><span data-stu-id="39639-194">Back to Remarks</span></span>](#remarks)  
  
   
  
## Examples  
 <span data-ttu-id="39639-195">次の例では、正規表現を使用して、文字列内の単語が繰り返し出現するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="39639-195">The following example uses a regular expression to check for repeated occurrences of words in a string.</span></span> <span data-ttu-id="39639-196">正規表現`\b(?<word>\w+)\s+(\k<word>)\b`は、次の表に示すように解釈できます。</span><span class="sxs-lookup"><span data-stu-id="39639-196">The regular expression `\b(?<word>\w+)\s+(\k<word>)\b` can be interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-197">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-197">Pattern</span></span>|<span data-ttu-id="39639-198">説明</span><span class="sxs-lookup"><span data-stu-id="39639-198">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="39639-199">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-199">Start the match at a word boundary.</span></span>|  
|`(?<word>\w+)`|<span data-ttu-id="39639-200">ワード境界までの1つ以上の単語文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-200">Match one or more word characters up to a word boundary.</span></span> <span data-ttu-id="39639-201">このキャプチャグループ`word`に名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="39639-201">Name this captured group `word`.</span></span>|  
|`\s+`|<span data-ttu-id="39639-202">1個以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-202">Match one or more white-space characters.</span></span>|  
|`(\k<word>)`|<span data-ttu-id="39639-203">という名前`word`のキャプチャされたグループと一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-203">Match the captured group that is named `word`.</span></span>|  
|`\b`|<span data-ttu-id="39639-204">ワード境界に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-204">Match a word boundary.</span></span>|  
  
 [!code-cpp[Regex_Words#0](~/samples/snippets/cpp/VS_Snippets_CLR/Regex_Words/CPP/words.cpp#0)]
 [!code-csharp[Regex_Words#0](~/samples/snippets/csharp/VS_Snippets_CLR/Regex_Words/CS/words.cs#0)]
 [!code-vb[Regex_Words#0](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex_Words/VB/words.vb#0)]  
  
 <span data-ttu-id="39639-205">次の例は、正規表現を使用して、文字列が通貨値を表しているか、通貨値を表す正しい形式であるかどうかを確認する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="39639-205">The following example illustrates the use of a regular expression to check whether a string either represents a currency value or has the correct format to represent a currency value.</span></span> <span data-ttu-id="39639-206">この場合、正規表現は<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A?displayProperty=nameWithType> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A?displayProperty=nameWithType>、ユーザーの現在のカルチャの<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>、、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>、、 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType>およびの各プロパティから動的に構築されます。</span><span class="sxs-lookup"><span data-stu-id="39639-206">In this case, the regular expression is built dynamically from the <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties for the user's current culture.</span></span> <span data-ttu-id="39639-207">システムの現在のカルチャが en-us の場合、結果として得ら`^\s*[\+-]?\s?\$?\s?(\d*\.?\d{2}?){1}$`れる正規表現はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-207">If the system's current culture is en-US, the resulting regular expression is `^\s*[\+-]?\s?\$?\s?(\d*\.?\d{2}?){1}$`.</span></span> <span data-ttu-id="39639-208">この正規表現は、次の表に示すように解釈できます。</span><span class="sxs-lookup"><span data-stu-id="39639-208">This regular expression can be interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-209">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-209">Pattern</span></span>|<span data-ttu-id="39639-210">説明</span><span class="sxs-lookup"><span data-stu-id="39639-210">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="39639-211">文字列の先頭から開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-211">Start at the beginning of the string.</span></span>|  
|`\s*`|<span data-ttu-id="39639-212">0 個以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-212">Match zero or more white-space characters.</span></span>|  
|`[\+-]?`|<span data-ttu-id="39639-213">正符号または負符号のいずれかの0回または1回の繰り返しに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-213">Match zero or one occurrence of either the positive sign or the negative sign.</span></span>|  
|`\s?`|<span data-ttu-id="39639-214">0 個または 1 個の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-214">Match zero or one white-space character.</span></span>|  
|`\$?`|<span data-ttu-id="39639-215">ドル記号の0回または1回の繰り返しに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-215">Match zero or one occurrence of the dollar sign.</span></span>|  
|`\s?`|<span data-ttu-id="39639-216">0 個または 1 個の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-216">Match zero or one white-space character.</span></span>|  
|`\d*`|<span data-ttu-id="39639-217">0 個以上の 10 進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-217">Match zero or more decimal digits.</span></span>|  
|`\.?`|<span data-ttu-id="39639-218">0個または1個の小数点の記号と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-218">Match zero or one decimal point symbol.</span></span>|  
|`\d{2}?`|<span data-ttu-id="39639-219">2桁の10進数と0回または1回一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-219">Match two decimal digits zero or one time.</span></span>|  
|`(\d*\.?\d{2}?){1}`|<span data-ttu-id="39639-220">小数点の記号で区切られた整数と小数の数字のパターンを、少なくとも1回一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-220">Match the pattern of integral and fractional digits separated by a decimal point symbol at least one time.</span></span>|  
|`$`|<span data-ttu-id="39639-221">文字列の末尾と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-221">Match the end of the string.</span></span>|  
  
 <span data-ttu-id="39639-222">この場合、正規表現では、有効な通貨文字列に桁区切り記号が含まれていないこと、および現在のカルチャの<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>プロパティで定義されている小数部の桁数または小数部の桁数が含まれていることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="39639-222">In this case, the regular expression assumes that a valid currency string does not contain group separator symbols, and that it has either no fractional digits or the number of fractional digits defined by the current culture's <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> property.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/cs/regex_example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/vb/regex_example1.vb#1)]  
  
 <span data-ttu-id="39639-223">この例の正規表現は動的に構築されるため、現在のカルチャの通貨記号、10進記号、または正と負の符号が正規表現エンジンによって誤って解釈される可能性があるかどうかは、デザイン時にはわかりません。式言語演算子。</span><span class="sxs-lookup"><span data-stu-id="39639-223">Because the regular expression in this example is built dynamically, we do not know at design time whether the current culture's currency symbol, decimal sign, or positive and negative signs might be misinterpreted by the regular expression engine as regular expression language operators.</span></span> <span data-ttu-id="39639-224">この例では、解釈が変化しないように、動的<xref:System.Text.RegularExpressions.Regex.Escape%2A>に生成された各文字列をメソッドに渡しています。</span><span class="sxs-lookup"><span data-stu-id="39639-224">To prevent any misinterpretation, the example passes each dynamically generated string to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="39639-225"><see cref="T:System.Text.RegularExpressions.Regex" />クラスは変更できない (読み取り専用)、スレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="39639-225">The <see cref="T:System.Text.RegularExpressions.Regex" /> class is immutable (read-only) and thread safe.</span></span> <span data-ttu-id="39639-226"><see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトは任意のスレッドで作成でき、スレッド間で共有できます。</span><span class="sxs-lookup"><span data-stu-id="39639-226"><see cref="T:System.Text.RegularExpressions.Regex" /> objects can be created on any thread and shared between threads.</span></span> <span data-ttu-id="39639-227">詳細については、「[スレッドセーフ](~/docs/standard/base-types/thread-safety-in-regular-expressions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-227">For more information, see [Thread Safety](~/docs/standard/base-types/thread-safety-in-regular-expressions.md).</span></span></threadsafe>
    <altmember cref="T:System.Configuration.RegexStringValidator" />
    <related type="Article" href="~/docs/standard/base-types/regular-expressions.md"><span data-ttu-id="39639-228">.NET Framework の正規表現</span><span class="sxs-lookup"><span data-stu-id="39639-228">.NET Framework Regular Expressions</span></span></related>
    <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-229">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-229">Regular Expression Language Elements</span></span></related>
    <related type="ExternalDocumentation" href="https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx"><span data-ttu-id="39639-230">正規表現 - クイック リファレンス (Word 形式でダウンロード)</span><span class="sxs-lookup"><span data-stu-id="39639-230">Regular Expressions - Quick Reference (download in Word format)</span></span></related>
    <related type="ExternalDocumentation" href="https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf"><span data-ttu-id="39639-231">正規表現 - クイック リファレンス (PDF 形式でダウンロード)</span><span class="sxs-lookup"><span data-stu-id="39639-231">Regular Expressions - Quick Reference (download in PDF format)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="39639-232"><see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="39639-232">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class.</span></span></summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-233">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-233">Regular Expression Language Elements</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Regex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39639-234"><see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="39639-234">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-235">このコンストラクターは保護されていることに注意してください。このクラスは、クラスから派生した<xref:System.Text.RegularExpressions.Regex>クラスによってのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="39639-235">Note that this constructor is protected; it can only be called by classes derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : string -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex pattern" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern"><span data-ttu-id="39639-236">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-236">The regular expression pattern to match.</span></span></param>
        <summary><span data-ttu-id="39639-237">指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="39639-237">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-238">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-238">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-239">正規表現の詳細については、「[正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語](~/docs/standard/base-types/regular-expression-language-quick-reference.md)の .NET Framework」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-239">For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.</span></span>  
  
 <span data-ttu-id="39639-240">コンストラクターの呼び出しは、 `options`引数<xref:System.Text.RegularExpressions.RegexOptions.None>に値<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29>を指定してコンストラクターを呼び出すことと同じです。 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29></span><span class="sxs-lookup"><span data-stu-id="39639-240">Calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29> constructor is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor with a value of <xref:System.Text.RegularExpressions.RegexOptions.None> for the `options` argument.</span></span>  
  
 <span data-ttu-id="39639-241"><xref:System.Text.RegularExpressions.Regex>オブジェクトは変更できません。つまり、オブジェクトを作成するときに定義した一致パターンにのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="39639-241">A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern you define when you create it.</span></span> <span data-ttu-id="39639-242">ただし、再コンパイルせずに何回でも使用できます。</span><span class="sxs-lookup"><span data-stu-id="39639-242">However, it can be used any number of times without being recompiled.</span></span>  
  
 <span data-ttu-id="39639-243">このコンストラクターは、で`pattern`定義されている英文字の大文字と小文字を区別して照合を試みる正規表現オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="39639-243">This constructor instantiates a regular expression object that attempts a case-sensitive match of any alphabetical characters defined in `pattern`.</span></span> <span data-ttu-id="39639-244">大文字と小文字を区別しない<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>一致の場合は、コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-244">For a case-insensitive match, use the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-245">次の例は、このコンストラクターを使用して、文字 "a" または "t" で始まる任意の単語と一致する正規表現をインスタンス化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="39639-245">The following example illustrates how to use this constructor to instantiate a regular expression that matches any word that begins with the letters "a" or "t".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/constructors1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/constructors1.vb#1)]  
  
 <span data-ttu-id="39639-246">既定では比較では大文字と小文字が区別されるため、正規表現パターンは、テキストの先頭の "the" という語とは一致しません。</span><span class="sxs-lookup"><span data-stu-id="39639-246">Note that the regular expression pattern cannot match the word "The" at the beginning of the text, because comparisons are case-sensitive by default.</span></span> <span data-ttu-id="39639-247">大文字と小文字を区別しない比較の<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29>例については、コンストラクターを参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-247">For an example of case-insensitive comparison, see the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-248">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-248">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-249"><paramref name="pattern" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-249"><paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-250">このコンストラクターは、 <see cref="T:System.Text.RegularExpressions.Regex" />作成されたアプリケーションドメインの既定のタイムアウト値を使用するオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-250">This constructor creates a <see cref="T:System.Text.RegularExpressions.Regex" /> object that uses the default time-out value of the application domain in which it is created.</span></span> <span data-ttu-id="39639-251">タイムアウト値がアプリケーションドメインに対して定義されていない場合、 <see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトは値<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />を使用して、操作がタイムアウトしないようにします。オブジェクトを<see cref="T:System.Text.RegularExpressions.Regex" />作成するために推奨さ<see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />れるコンストラクターはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-251">If a time-out value has not been defined for the application domain,  the <see cref="T:System.Text.RegularExpressions.Regex" /> object uses the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the operation from timing out. The recommended constructor for creating a <see cref="T:System.Text.RegularExpressions.Regex" /> object is <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-252">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-252">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Regex(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="39639-253">シリアル化されたパターンと <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 情報を保持するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39639-253">The object that contains a serialized pattern and <see cref="T:System.Text.RegularExpressions.RegexOptions" /> information.</span></span></param>
        <param name="context"><span data-ttu-id="39639-254">このシリアル化のシリアル化先。</span><span class="sxs-lookup"><span data-stu-id="39639-254">The destination for this serialization.</span></span> <span data-ttu-id="39639-255">(このパラメーターは使用されません。<see langword="null" /> を指定してください。)</span><span class="sxs-lookup"><span data-stu-id="39639-255">(This parameter is not used; specify <see langword="null" />.)</span></span></param>
        <summary><span data-ttu-id="39639-256">シリアル化したデータを使用して、<see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="39639-256">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class by using serialized data.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-257">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-257">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-258"><paramref name="info" /> に含まれているパターンが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-258">The pattern that <paramref name="info" /> contains is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-259"><paramref name="info" /> に無効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> フラグが含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-259"><paramref name="info" /> contains an invalid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> flag.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : string * System.Text.RegularExpressions.RegexOptions -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex (pattern, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="pattern"><span data-ttu-id="39639-260">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-260">The regular expression pattern to match.</span></span></param>
        <param name="options"><span data-ttu-id="39639-261">正規表現を変更する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-261">A bitwise combination of the enumeration values that modify the regular expression.</span></span></param>
        <summary><span data-ttu-id="39639-262">パターンを変更するオプションを使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="39639-262">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression, with options that modify the pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-263">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-263">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-264">正規表現の詳細については、「[正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語](~/docs/standard/base-types/regular-expression-language-quick-reference.md)の .NET Framework」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-264">For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.</span></span>  
  
 <span data-ttu-id="39639-265"><xref:System.Text.RegularExpressions.Regex>オブジェクトは変更できません。つまり、オブジェクトを作成するときに定義した一致パラメーターにのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="39639-265">A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match parameters you define when you create it.</span></span> <span data-ttu-id="39639-266">ただし、再コンパイルせずに何回でも使用できます。</span><span class="sxs-lookup"><span data-stu-id="39639-266">However, it can be used any number of times without being recompiled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-267">次の例は、このコンストラクターを使用して、文字 "a" または "t" で始まる任意の単語と一致する正規表現をインスタンス化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="39639-267">The following example illustrates how to use this constructor to instantiate a regular expression that matches any word that begins with the letters "a" or "t".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/Constructors2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/Constructors2.vb#2)]  
  
 <span data-ttu-id="39639-268">一致コレクションには、パラメーターで`options`大文字と小文字を区別しない比較が定義されているため、テキストを開始する "the" という単語が含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="39639-268">Note that the match collection includes the word "The" that begins the text because the `options` parameter has defined case-insensitive comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-269">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-269">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-270"><paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-270"><paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-271"><paramref name="options" /> に無効なフラグが含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-271"><paramref name="options" /> contains an invalid flag.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-272">このコンストラクターは、 <see cref="T:System.Text.RegularExpressions.Regex" />作成されたアプリケーションドメインの既定のタイムアウト値を使用するオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-272">This constructor creates a <see cref="T:System.Text.RegularExpressions.Regex" /> object that uses the default time-out value of the application domain in which it is created.</span></span> <span data-ttu-id="39639-273">タイムアウト値がアプリケーションドメインに対して定義されていない場合、 <see cref="T:System.Text.RegularExpressions.Regex" />オブジェクトは値<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />を使用して、操作がタイムアウトしないようにします。オブジェクトを<see cref="T:System.Text.RegularExpressions.Regex" />作成するために推奨さ<see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />れるコンストラクターはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-273">If a time-out value has not been defined for the application domain, the <see cref="T:System.Text.RegularExpressions.Regex" /> object uses the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the operation from timing out. The recommended constructor for creating a <see cref="T:System.Text.RegularExpressions.Regex" /> object is <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-274">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-274">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Regex(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.Regex : string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; System.Text.RegularExpressions.Regex" Usage="new System.Text.RegularExpressions.Regex (pattern, options, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pattern"><span data-ttu-id="39639-275">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-275">The regular expression pattern to match.</span></span></param>
        <param name="options"><span data-ttu-id="39639-276">正規表現を変更する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-276">A bitwise combination of the enumeration values that modify the regular expression.</span></span></param>
        <param name="matchTimeout"><span data-ttu-id="39639-277">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="39639-277">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span></span></param>
        <summary><span data-ttu-id="39639-278">パターンを変更するオプションと、パターン マッチ メソッドがタイムアウトするまでに一致を試みる時間を指定する値を使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="39639-278">Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-279">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-279">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-280">正規表現の詳細については、「[正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語](~/docs/standard/base-types/regular-expression-language-quick-reference.md)の .NET Framework」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-280">For more information about regular expressions, see the [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md) topics.</span></span>  
  
 <span data-ttu-id="39639-281"><xref:System.Text.RegularExpressions.Regex>オブジェクトは変更できません。つまり、オブジェクトを作成するときに定義した一致パターンにのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="39639-281">A <xref:System.Text.RegularExpressions.Regex> object is immutable, which means that it can be used only for the match pattern that you define when you create it.</span></span> <span data-ttu-id="39639-282">ただし、再コンパイルせずに何回でも使用できます。</span><span class="sxs-lookup"><span data-stu-id="39639-282">However, it can be used any number of times without being recompiled.</span></span>  
  
 <span data-ttu-id="39639-283">パラメーター `matchTimeout`は、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。この期間内に一致するものが見つからない場合、パターン一致メソッドは例外<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="39639-283">The `matchTimeout` parameter specifies how long a pattern-matching method should try to find a match before it times out. If no match is found in that time interval, the pattern-matching method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-284">`matchTimeout`<xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されるアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="39639-284">`matchTimeout` overrides any default time-out value defined for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-285">`matchTimeout`タイムアウト間隔を観察するインスタンスパターン一致メソッドには、次のものが含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-285">The instance pattern-matching methods that observe the `matchTimeout` time-out interval include the following:</span></span>  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%2A>  
  
-   <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="39639-286">タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現が、ほぼ一致する入力を処理するときに応答を停止することを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="39639-286">Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="39639-287">詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-287">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-288">妥当なタイムアウト期間を設定するには、次の要因を考慮してください。</span><span class="sxs-lookup"><span data-stu-id="39639-288">To set a reasonable time-out interval, consider the following factors:</span></span>  
  
-   <span data-ttu-id="39639-289">正規表現パターンの長さと複雑さ。</span><span class="sxs-lookup"><span data-stu-id="39639-289">The length and complexity of the regular expression pattern.</span></span> <span data-ttu-id="39639-290">長くて複雑な正規表現の方が、短くて単純な式よりも多くの時間を必要とします。</span><span class="sxs-lookup"><span data-stu-id="39639-290">Longer and more complex regular expressions require more time than shorter and simpler ones.</span></span>  
  
-   <span data-ttu-id="39639-291">予想されるコンピューター負荷。</span><span class="sxs-lookup"><span data-stu-id="39639-291">The expected machine load.</span></span> <span data-ttu-id="39639-292">CPU とメモリの使用率が高いシステムでは、処理に時間がかかります。</span><span class="sxs-lookup"><span data-stu-id="39639-292">Processing takes more time on systems that have high CPU and memory utilization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-293">次の例では<xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 、コンストラクターを呼び出し<xref:System.Text.RegularExpressions.Regex>て、1秒のタイムアウト値を持つオブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="39639-293">The following example calls the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor to instantiate a <xref:System.Text.RegularExpressions.Regex> object with a time-out value of one second.</span></span> <span data-ttu-id="39639-294">正規表現パターン `(a+)+$`は、行の末尾にある 1 つ以上の "a" 文字の 1 つ以上のシーケンスに一致しますが、過度なバックトラッキングの対象になります。</span><span class="sxs-lookup"><span data-stu-id="39639-294">The regular expression pattern `(a+)+$`, which matches one or more sequences of one or more "a" characters at the end of a line, is subject to excessive backtracking.</span></span> <span data-ttu-id="39639-295"><xref:System.Text.RegularExpressions.RegexMatchTimeoutException>がスローされた場合、この例ではタイムアウト値を3秒の最大値まで増やします。</span><span class="sxs-lookup"><span data-stu-id="39639-295">If a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> is thrown, the example increases the time-out value up to the maximum value of three seconds.</span></span> <span data-ttu-id="39639-296">それ以外の場合は、パターンに一致する試行を破棄します。</span><span class="sxs-lookup"><span data-stu-id="39639-296">Otherwise, it abandons the attempt to match the pattern.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/vb/ctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-297">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-297">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-298"><paramref name="pattern" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-298"><paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-299"><paramref name="options" /> は有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-299"><paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> value.</span></span>  
  
<span data-ttu-id="39639-300">- または -</span><span class="sxs-lookup"><span data-stu-id="39639-300">-or-</span></span> 
 <span data-ttu-id="39639-301"><paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-301"><paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-302"><paramref name="matchTimeout" />パラメーターには、2秒などの適切な値を設定することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="39639-302">We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds.</span></span> <span data-ttu-id="39639-303">を指定<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。</span><span class="sxs-lookup"><span data-stu-id="39639-303">If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance.</span></span> <span data-ttu-id="39639-304">ただし、次の条件下でのみタイムアウトを無効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-304">However, you should disable time-outs only under the following conditions:</span></span> 
<span data-ttu-id="39639-305">-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。</span><span class="sxs-lookup"><span data-stu-id="39639-305">-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text.</span></span> <span data-ttu-id="39639-306">これにより、ユーザーが動的に入力したテキストは除外されます。</span><span class="sxs-lookup"><span data-stu-id="39639-306">This excludes text that has been dynamically input by users.</span></span>  
  
<span data-ttu-id="39639-307">-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。</span><span class="sxs-lookup"><span data-stu-id="39639-307">-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.</span></span>  
  
<span data-ttu-id="39639-308">-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</span><span class="sxs-lookup"><span data-stu-id="39639-308">-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</span></span></para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/34df1152-0b22-4a1c-a76c-3c28c47b70d8"><span data-ttu-id="39639-309">バックトラッキング</span><span class="sxs-lookup"><span data-stu-id="39639-309">Backtracking</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-310">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-310">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CacheSize">
      <MemberSignature Language="C#" Value="public static int CacheSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CacheSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CacheSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CacheSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CacheSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheSize : int with get, set" Usage="System.Text.RegularExpressions.Regex.CacheSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-311">コンパイルされた正規表現の現在の静的キャッシュ内の最大エントリ数を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="39639-311">Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.</span></span></summary>
        <value><span data-ttu-id="39639-312">静的キャッシュの最大エントリ数。</span><span class="sxs-lookup"><span data-stu-id="39639-312">The maximum number of entries in the static cache.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-313">クラス<xref:System.Text.RegularExpressions.Regex>は、静的メソッドの呼び出しで使用されるコンパイル済みの正規表現の内部キャッシュを保持します。</span><span class="sxs-lookup"><span data-stu-id="39639-313">The <xref:System.Text.RegularExpressions.Regex> class maintains an internal cache of compiled regular expressions used in static method calls.</span></span> <span data-ttu-id="39639-314">設定操作で指定された値が現在のキャッシュサイズよりも小さい場合、キャッシュエントリはキャッシュサイズが指定した値と等しいまで破棄されます。</span><span class="sxs-lookup"><span data-stu-id="39639-314">If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value.</span></span>  
  
 <span data-ttu-id="39639-315">既定では、キャッシュは、コンパイルされた静的な正規表現を15個保持します。</span><span class="sxs-lookup"><span data-stu-id="39639-315">By default, the cache holds 15 compiled static regular expressions.</span></span> <span data-ttu-id="39639-316">通常、アプリケーションでキャッシュのサイズを変更する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="39639-316">Your application typically will not have to modify the size of the cache.</span></span> <span data-ttu-id="39639-317">プロパティは<xref:System.Text.RegularExpressions.Regex.CacheSize%2A> 、キャッシュを無効にする場合、またはキャッシュが異常な場合にのみ使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-317">Use the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> property only when you want to turn off caching or when you have an unusually large cache.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-318">設定操作の値が 0 より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="39639-318">The value in a set operation is less than zero.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-319">より前[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]の .NET Framework では、静的メソッドとインスタンスメソッドの呼び出しで使用される正規表現はキャッシュされていました。</span><span class="sxs-lookup"><span data-stu-id="39639-319">In the .NET Framework prior to the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], regular expressions used in both static and instance method calls were cached.</span></span> <span data-ttu-id="39639-320">以降では、静的メソッドの呼び出しで使用される正規表現だけがキャッシュされます。 [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</span><span class="sxs-lookup"><span data-stu-id="39639-320">Beginning with the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], only regular expressions used in static method calls are cached.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="capnames">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Hashtable capnames;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable capnames" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capnames" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capnames As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Collections::Hashtable ^ capnames;" />
      <MemberSignature Language="F#" Value="val mutable capnames : System.Collections.Hashtable" Usage="System.Text.RegularExpressions.Regex.capnames" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-321"><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-321">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CapNames">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary CapNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary CapNames" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CapNames" />
      <MemberSignature Language="VB.NET" Value="Protected Property CapNames As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ CapNames { System::Collections::IDictionary ^ get(); void set(System::Collections::IDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CapNames : System.Collections.IDictionary with get, set" Usage="System.Text.RegularExpressions.Regex.CapNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-322">名前付きキャプチャ対象グループをインデックス値にマップする辞書を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="39639-322">Gets or sets a dictionary that maps named capturing groups to their index values.</span></span></summary>
        <value><span data-ttu-id="39639-323">名前付きキャプチャ対象グループをインデックス値にマップする辞書。</span><span class="sxs-lookup"><span data-stu-id="39639-323">A dictionary that maps named capturing groups to their index values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-324">このプロパティは保護されていることに注意してください。このクラスは、 <xref:System.Text.RegularExpressions.Regex>クラスから派生したクラスからのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="39639-324">Note that this property is protected; it can only be accessed from a class derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
 <span data-ttu-id="39639-325">Set 操作は、プロパティに割り当てられた値を<xref:System.Collections.Hashtable>オブジェクトに変換しようとします。変換に失敗した場合は、 <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType>コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-325">A set operation attempts to convert the value assigned to the property to a <xref:System.Collections.Hashtable> object; if this conversion fails, it calls the <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-326">セット操作で <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> プロパティに割り当てられた値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-326">The value assigned to the <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> property in a set operation is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="caps">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Hashtable caps;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable caps" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.caps" />
      <MemberSignature Language="VB.NET" Value="Protected Friend caps As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Collections::Hashtable ^ caps;" />
      <MemberSignature Language="F#" Value="val mutable caps : System.Collections.Hashtable" Usage="System.Text.RegularExpressions.Regex.caps" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-327"><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-327">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Caps">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary Caps { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Caps" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Caps" />
      <MemberSignature Language="VB.NET" Value="Protected Property Caps As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IDictionary ^ Caps { System::Collections::IDictionary ^ get(); void set(System::Collections::IDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Caps : System.Collections.IDictionary with get, set" Usage="System.Text.RegularExpressions.Regex.Caps" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-328">番号付きのキャプチャ対象グループをインデックス値にマップする辞書を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="39639-328">Gets or sets a dictionary that maps numbered capturing groups to their index values.</span></span></summary>
        <value><span data-ttu-id="39639-329">番号付きのキャプチャ対象グループをインデックス値にマップする辞書。</span><span class="sxs-lookup"><span data-stu-id="39639-329">A dictionary that maps numbered capturing groups to their index values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-330">このプロパティは保護されていることに注意してください。このクラスは、 <xref:System.Text.RegularExpressions.Regex>クラスから派生したクラスからのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="39639-330">Note that this property is protected; it can only be accessed from a class derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
 <span data-ttu-id="39639-331">Set 操作は、プロパティに割り当てられた値を<xref:System.Collections.Hashtable>オブジェクトに変換しようとします。変換に失敗した場合は、 <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType>コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-331">A set operation attempts to convert the value assigned to the property to a <xref:System.Collections.Hashtable> object; if this conversion fails, it calls the <xref:System.Collections.Hashtable.%23ctor%28System.Collections.IDictionary%29?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-332">セット操作で <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> プロパティに割り当てられた値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-332">The value assigned to the <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> property in a set operation is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="capsize">
      <MemberSignature Language="C#" Value="protected internal int capsize;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly int32 capsize" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capsize" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capsize As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected public: int capsize;" />
      <MemberSignature Language="F#" Value="val mutable capsize : int" Usage="System.Text.RegularExpressions.Regex.capsize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-333"><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-333">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="capslist">
      <MemberSignature Language="C#" Value="protected internal string[] capslist;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string[] capslist" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capslist" />
      <MemberSignature Language="VB.NET" Value="Protected Friend capslist As String() " />
      <MemberSignature Language="C++ CLI" Value="protected public: cli::array &lt;System::String ^&gt; ^ capslist;" />
      <MemberSignature Language="F#" Value="val mutable capslist : string[]" Usage="System.Text.RegularExpressions.Regex.capslist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-334"><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-334">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CompileToAssembly">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="39639-335">正規表現をコンパイルして、ディスク上の単一のアセンブリに保存します。</span><span class="sxs-lookup"><span data-stu-id="39639-335">Compiles regular expressions and saves them to disk in a single assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="39639-336">.Net Core では、 `Regex.CompileToAssembly`メソッドを呼び出すと<xref:System.PlatformNotSupportedException>、がスローされます。アセンブリの書き込みはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="39639-336">On .NET Core, calls to the `Regex.CompileToAssembly` method throw a <xref:System.PlatformNotSupportedException>; writing out an assembly is not supported.</span></span>
  
       ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname);" />
      <MemberSignature Language="F#" Value="static member CompileToAssembly : System.Text.RegularExpressions.RegexCompilationInfo[] * System.Reflection.AssemblyName -&gt; unit" Usage="System.Text.RegularExpressions.Regex.CompileToAssembly (regexinfos, assemblyname)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="regexinfos"><span data-ttu-id="39639-337">コンパイルする正規表現を記述する配列。</span><span class="sxs-lookup"><span data-stu-id="39639-337">An array that describes the regular expressions to compile.</span></span></param>
        <param name="assemblyname"><span data-ttu-id="39639-338">アセンブリのファイル名。</span><span class="sxs-lookup"><span data-stu-id="39639-338">The file name of the assembly.</span></span></param>
        <summary><span data-ttu-id="39639-339">1 つ以上の指定した <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをコンパイルして、名前付きアセンブリに保存します。</span><span class="sxs-lookup"><span data-stu-id="39639-339">Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex" /> objects to a named assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-340">メソッド<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29>は、 `regexinfos`配列に定義されている各正規表現がクラスによって表される .NET Framework アセンブリを生成します。</span><span class="sxs-lookup"><span data-stu-id="39639-340">The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class.</span></span> <span data-ttu-id="39639-341">通常、 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29>メソッドは、コンパイルされた正規表現のアセンブリを生成する別のアプリケーションから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="39639-341">Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> method is called from a separate application that generates an assembly of compiled regular expressions.</span></span> <span data-ttu-id="39639-342">アセンブリに含まれる各正規表現には、次の特性があります。</span><span class="sxs-lookup"><span data-stu-id="39639-342">Each regular expression included in the assembly has the following characteristics:</span></span>  
  
-   <span data-ttu-id="39639-343"><xref:System.Text.RegularExpressions.Regex>クラスから派生します。</span><span class="sxs-lookup"><span data-stu-id="39639-343">It is derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
-   <span data-ttu-id="39639-344">これには、対応する`fullnamespace` <xref:System.Text.RegularExpressions.RegexCompilationInfo>オブジェクトのパラメーターと`name`パラメーターによって定義される完全修飾名が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="39639-344">It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.</span></span>  
  
-   <span data-ttu-id="39639-345">これには、既定の (またはパラメーターなしの) コンストラクターがあります。</span><span class="sxs-lookup"><span data-stu-id="39639-345">It has a default (or parameterless) constructor.</span></span>  
  
 <span data-ttu-id="39639-346">通常、コンパイルされた正規表現をインスタンス化して使用するコードは、アセンブリを作成するコードとは別のアセンブリまたはアプリケーションにあります。</span><span class="sxs-lookup"><span data-stu-id="39639-346">Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-347">次の例では、RegexLib という名前のアセンブリを作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-347">The following example creates an assembly named RegexLib.dll.</span></span> <span data-ttu-id="39639-348">アセンブリには、2つのコンパイルされた正規表現が含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-348">The assembly includes two compiled regular expressions.</span></span> <span data-ttu-id="39639-349">1つ目`Utilities.RegularExpressions.DuplicatedString`のは、同じ連続する2つの単語に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-349">The first, `Utilities.RegularExpressions.DuplicatedString`, matches two identical contiguous words.</span></span> <span data-ttu-id="39639-350">2番目`Utilities.RegularExpressions.EmailAddress`のは、文字列の形式が電子メールアドレスであるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="39639-350">The second, `Utilities.RegularExpressions.EmailAddress`, checks whether a string has the correct format to be an email address.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile1.vb#1)]  
  
 <span data-ttu-id="39639-351">次の例では、重複する単語の文字列を確認する正規表現をインスタンス化し、使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-351">The regular expression that checks a string for duplicate words is then instantiated and used by the following example.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 <span data-ttu-id="39639-352">この2番目の例を正常にコンパイルするには、プロジェクトに追加する RegexLib (最初の例で作成したアセンブリ) への参照が必要です。</span><span class="sxs-lookup"><span data-stu-id="39639-352">Successful compilation of this second example requires a reference to RegexLib.dll (the assembly created by the first example) to be added to the project.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-353"><paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。</span><span class="sxs-lookup"><span data-stu-id="39639-353">The value of the <paramref name="assemblyname" /> parameter's <see cref="P:System.Reflection.AssemblyName.Name" /> property is an empty or null string.</span></span>  
  
<span data-ttu-id="39639-354">- または -</span><span class="sxs-lookup"><span data-stu-id="39639-354">-or-</span></span> 
<span data-ttu-id="39639-355"><paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-355">The regular expression pattern of one or more objects in <paramref name="regexinfos" /> contains invalid syntax.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-356"><paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-356"><paramref name="assemblyname" /> or <paramref name="regexinfos" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="39639-357">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="39639-357">.NET Core only: Creating an assembly of compiled regular expressions is not supported.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-358">またはそのポイントリリースが[!INCLUDE[net_v45](~/includes/net-v45-md.md)]インストールされているシステムで開発する場合は、 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />を対象[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]とし、メソッドを使用して、コンパイル済みの正規表現を含むアセンブリを作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-358">If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions.</span></span> <span data-ttu-id="39639-359">が[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]例外をスローしたシステムで、そのアセンブリの正規表現の1つを使用しようとしています。</span><span class="sxs-lookup"><span data-stu-id="39639-359">Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception.</span></span> <span data-ttu-id="39639-360">この問題を回避するには、次のいずれかの方法を実行します。</span><span class="sxs-lookup"><span data-stu-id="39639-360">To work around this problem, you can do either of the following:</span></span> 
<span data-ttu-id="39639-361">-新しいバージョンが[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]インストールされていないシステムで、コンパイルされた正規表現を含むアセンブリをビルドします。</span><span class="sxs-lookup"><span data-stu-id="39639-361">-   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.</span></span>  
  
<span data-ttu-id="39639-362">-アセンブリからコンパイル<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />済みの正規表現を呼び出して取得するのではなく、オブジェクト<see cref="T:System.Text.RegularExpressions.Regex" />を<see cref="T:System.Text.RegularExpressions.Regex" />インスタンス化<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />するとき、または正規表現を呼び出すときにオプションを指定して、静的メソッドまたはインスタンスメソッドを使用します。パターン一致メソッド。</span><span class="sxs-lookup"><span data-stu-id="39639-362">-   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md"><span data-ttu-id="39639-363">コンパイルと再利用</span><span class="sxs-lookup"><span data-stu-id="39639-363">Compilation and Reuse</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname, cli::array &lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="static member CompileToAssembly : System.Text.RegularExpressions.RegexCompilationInfo[] * System.Reflection.AssemblyName * System.Reflection.Emit.CustomAttributeBuilder[] -&gt; unit" Usage="System.Text.RegularExpressions.Regex.CompileToAssembly (regexinfos, assemblyname, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="regexinfos"><span data-ttu-id="39639-364">コンパイルする正規表現を記述する配列。</span><span class="sxs-lookup"><span data-stu-id="39639-364">An array that describes the regular expressions to compile.</span></span></param>
        <param name="assemblyname"><span data-ttu-id="39639-365">アセンブリのファイル名。</span><span class="sxs-lookup"><span data-stu-id="39639-365">The file name of the assembly.</span></span></param>
        <param name="attributes"><span data-ttu-id="39639-366">アセンブリに適用する属性を定義する配列。</span><span class="sxs-lookup"><span data-stu-id="39639-366">An array that defines the attributes to apply to the assembly.</span></span></param>
        <summary><span data-ttu-id="39639-367">指定した 1 つ以上の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをコンパイルして、指定した属性を持つ名前付きアセンブリに保存します。</span><span class="sxs-lookup"><span data-stu-id="39639-367">Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex" /> objects to a named assembly with the specified attributes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-368">メソッド<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29>は、 `regexinfos`配列に定義されている各正規表現がクラスによって表される .NET Framework アセンブリを生成します。</span><span class="sxs-lookup"><span data-stu-id="39639-368">The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class.</span></span> <span data-ttu-id="39639-369">通常、 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29>メソッドは、コンパイルされた正規表現のアセンブリを生成する別のアプリケーションから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="39639-369">Typically, the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> method is called from a separate application that generates an assembly of compiled regular expressions.</span></span> <span data-ttu-id="39639-370">アセンブリに含まれる各正規表現には、次の特性があります。</span><span class="sxs-lookup"><span data-stu-id="39639-370">Each regular expression included in the assembly has the following characteristics:</span></span>  
  
-   <span data-ttu-id="39639-371"><xref:System.Text.RegularExpressions.Regex>クラスから派生します。</span><span class="sxs-lookup"><span data-stu-id="39639-371">It is derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
-   <span data-ttu-id="39639-372">これには、対応する`fullnamespace` <xref:System.Text.RegularExpressions.RegexCompilationInfo>オブジェクトのパラメーターと`name`パラメーターによって定義される完全修飾名が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="39639-372">It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.</span></span>  
  
-   <span data-ttu-id="39639-373">これには、既定の (またはパラメーターなしの) コンストラクターがあります。</span><span class="sxs-lookup"><span data-stu-id="39639-373">It has a default (or parameterless) constructor.</span></span>  
  
 <span data-ttu-id="39639-374">通常、コンパイルされた正規表現をインスタンス化して使用するコードは、アセンブリを作成するコードとは別のアセンブリまたはアプリケーションにあります。</span><span class="sxs-lookup"><span data-stu-id="39639-374">Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.</span></span>  
  
 <span data-ttu-id="39639-375">メソッドは<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 、特定の言語のクラス定義キーワード ( `class` C#やなど) を使用するのでは`Class`なく、メソッドの呼び出しから .NET Framework アセンブリを生成するため、`End Class`</span><span class="sxs-lookup"><span data-stu-id="39639-375">Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class`</span></span> <span data-ttu-id="39639-376">Visual Basic) では、開発言語の標準属性構文を使用して、.NET Framework 属性をアセンブリに割り当てることはできません。</span><span class="sxs-lookup"><span data-stu-id="39639-376">in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax.</span></span> <span data-ttu-id="39639-377">パラメーター `attributes`は、アセンブリに適用される属性を定義するための別の方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="39639-377">The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly.</span></span> <span data-ttu-id="39639-378">アセンブリに適用する属性ごとに、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="39639-378">For each attribute that you want to apply to the assembly, do the following:</span></span>  
  
1.  <span data-ttu-id="39639-379">呼び出す属性コンストラクターの<xref:System.Type>パラメーターの型を表すオブジェクトの配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-379">Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.</span></span>  
  
2.  <span data-ttu-id="39639-380">新しいアセンブリ<xref:System.Type>に適用する属性クラスを表すオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="39639-380">Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.</span></span>  
  
3.  <span data-ttu-id="39639-381"><xref:System.Reflection.ConstructorInfo>属性<xref:System.Type.GetConstructor%2A> オブジェクトのメソッドを呼び出して、呼び出す属性コンストラクターを表すオブジェクトを取得します。 <xref:System.Type></span><span class="sxs-lookup"><span data-stu-id="39639-381">Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call.</span></span> <span data-ttu-id="39639-382">コンストラクターの<xref:System.Type.GetConstructor%2A>パラメーターの型を<xref:System.Type>表すオブジェクトの配列をメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="39639-382">Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types.</span></span>  
  
4.  <span data-ttu-id="39639-383">属性の<xref:System.Object>コンストラクターに渡すパラメーターを定義する配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-383">Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.</span></span>  
  
5.  <span data-ttu-id="39639-384">手順 3 <xref:System.Reflection.Emit.CustomAttributeBuilder> で取得 <xref:System.Reflection.ConstructorInfo> したオブジェクトと手順 4. で作成した配列を渡すことによって、オブジェクトをインスタンス化します。 <xref:System.Object></span><span class="sxs-lookup"><span data-stu-id="39639-384">Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.</span></span>  
  
 <span data-ttu-id="39639-385">その後、 <xref:System.Reflection.Emit.CustomAttributeBuilder> `attributes` パラメーターの代わりに、これらのオブジェクトの配列をメソッドに渡すことができます。 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="39639-385">You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-386">次の例では、RegexLib という名前のアセンブリを<xref:System.Reflection.AssemblyTitleAttribute>作成し、そのアセンブリに属性を適用します。</span><span class="sxs-lookup"><span data-stu-id="39639-386">The following example creates an assembly named RegexLib.dll and applies the <xref:System.Reflection.AssemblyTitleAttribute> attribute to it.</span></span> <span data-ttu-id="39639-387">アセンブリには、2つのコンパイルされた正規表現が含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-387">The assembly includes two compiled regular expressions.</span></span> <span data-ttu-id="39639-388">1つ目`Utilities.RegularExpressions.DuplicatedString`のは、同じ連続する2つの単語に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-388">The first, `Utilities.RegularExpressions.DuplicatedString`, matches two identical contiguous words.</span></span> <span data-ttu-id="39639-389">2番目`Utilities.RegularExpressions.EmailAddress`のは、文字列の形式が電子メールアドレスであるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="39639-389">The second, `Utilities.RegularExpressions.EmailAddress`, checks whether a string has the correct format to be an email address.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile3.vb#3)]  
  
 <span data-ttu-id="39639-390">この<xref:System.Reflection.AssemblyTitleAttribute>属性がアセンブリに適用されていることを確認するには、ildasm.exe などのリフレクションユーティリティでマニフェストを調べます。</span><span class="sxs-lookup"><span data-stu-id="39639-390">You can verify that the <xref:System.Reflection.AssemblyTitleAttribute> attribute has been applied to the assembly by examining its manifest with a reflection utility such as ILDasm.</span></span>  
  
 <span data-ttu-id="39639-391">次の例では、重複する単語の文字列を確認する正規表現をインスタンス化し、使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-391">The regular expression that checks a string for duplicate words is then instantiated and used by the following example.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 <span data-ttu-id="39639-392">この2番目の例を正常にコンパイルするには、プロジェクトに追加する RegexLib (最初の例で作成したアセンブリ) への参照が必要です。</span><span class="sxs-lookup"><span data-stu-id="39639-392">Successful compilation of this second example requires a reference to RegexLib.dll (the assembly created by the first example) to be added to the project.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-393"><paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。</span><span class="sxs-lookup"><span data-stu-id="39639-393">The value of the <paramref name="assemblyname" /> parameter's <see cref="P:System.Reflection.AssemblyName.Name" /> property is an empty or null string.</span></span>  
  
<span data-ttu-id="39639-394">- または -</span><span class="sxs-lookup"><span data-stu-id="39639-394">-or-</span></span> 
<span data-ttu-id="39639-395"><paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-395">The regular expression pattern of one or more objects in <paramref name="regexinfos" /> contains invalid syntax.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-396"><paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-396"><paramref name="assemblyname" /> or <paramref name="regexinfos" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="39639-397">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="39639-397">.NET Core only: Creating an assembly of compiled regular expressions is not supported.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-398">またはそのポイントリリースが[!INCLUDE[net_v45](~/includes/net-v45-md.md)]インストールされているシステムで開発する場合は、 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />を対象[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]とし、メソッドを使用して、コンパイル済みの正規表現を含むアセンブリを作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-398">If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions.</span></span> <span data-ttu-id="39639-399">が[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]例外をスローしたシステムで、そのアセンブリの正規表現の1つを使用しようとしています。</span><span class="sxs-lookup"><span data-stu-id="39639-399">Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception.</span></span> <span data-ttu-id="39639-400">この問題を回避するには、次のいずれかの方法を実行します。</span><span class="sxs-lookup"><span data-stu-id="39639-400">To work around this problem, you can do either of the following:</span></span> 
<span data-ttu-id="39639-401">-新しいバージョンが[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]インストールされていないシステムで、コンパイルされた正規表現を含むアセンブリをビルドします。</span><span class="sxs-lookup"><span data-stu-id="39639-401">-   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.</span></span>  
  
<span data-ttu-id="39639-402">-アセンブリからコンパイル<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />済みの正規表現を呼び出して取得するのではなく、オブジェクト<see cref="T:System.Text.RegularExpressions.Regex" />を<see cref="T:System.Text.RegularExpressions.Regex" />インスタンス化<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />するとき、または正規表現を呼び出すときにオプションを指定して、静的メソッドまたはインスタンスメソッドを使用します。パターン一致メソッド。</span><span class="sxs-lookup"><span data-stu-id="39639-402">-   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md"><span data-ttu-id="39639-403">コンパイルと再利用</span><span class="sxs-lookup"><span data-stu-id="39639-403">Compilation and Reuse</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CompileToAssembly(cli::array &lt;System::Text::RegularExpressions::RegexCompilationInfo ^&gt; ^ regexinfos, System::Reflection::AssemblyName ^ assemblyname, cli::array &lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ attributes, System::String ^ resourceFile);" />
      <MemberSignature Language="F#" Value="static member CompileToAssembly : System.Text.RegularExpressions.RegexCompilationInfo[] * System.Reflection.AssemblyName * System.Reflection.Emit.CustomAttributeBuilder[] * string -&gt; unit" Usage="System.Text.RegularExpressions.Regex.CompileToAssembly (regexinfos, assemblyname, attributes, resourceFile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="resourceFile" Type="System.String" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="regexinfos"><span data-ttu-id="39639-404">コンパイルする正規表現を記述する配列。</span><span class="sxs-lookup"><span data-stu-id="39639-404">An array that describes the regular expressions to compile.</span></span></param>
        <param name="assemblyname"><span data-ttu-id="39639-405">アセンブリのファイル名。</span><span class="sxs-lookup"><span data-stu-id="39639-405">The file name of the assembly.</span></span></param>
        <param name="attributes"><span data-ttu-id="39639-406">アセンブリに適用する属性を定義する配列。</span><span class="sxs-lookup"><span data-stu-id="39639-406">An array that defines the attributes to apply to the assembly.</span></span></param>
        <param name="resourceFile"><span data-ttu-id="39639-407">アセンブリに含める Win32 リソース ファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="39639-407">The name of the Win32 resource file to include in the assembly.</span></span></param>
        <summary><span data-ttu-id="39639-408">指定した 1 つ以上の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトと、指定した 1 つのリソース ファイルをコンパイルして、指定した属性を持つ名前付きアセンブリに保存します。</span><span class="sxs-lookup"><span data-stu-id="39639-408">Compiles one or more specified <see cref="T:System.Text.RegularExpressions.Regex" /> objects and a specified resource file to a named assembly with the specified attributes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-409">[\], AssemblyName, CustomAttributeBuilder\<xref: system.text.regularexpressions.regexoptions% system.text.regularexpressions.regex.compiletoassembly%%% RegexCompilationInfo% 5b% 5d% 2csystem.string% 29 > メソッドは、 `regexinfos`配列に定義されている各正規表現がクラスによって表される、.NET Framework アセンブリを生成します。このメソッドは、このメソッドを生成しています。</span><span class="sxs-lookup"><span data-stu-id="39639-409">The [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method generates a .NET Framework assembly in which each regular expression defined in the `regexinfos` array is represented by a class.</span></span> <span data-ttu-id="39639-410">通常、[\], AssemblyName, CustomAttributeBuilder\<xref: RegexCompilationInfo% system.text.regularexpressions.regexoptions% 5d% 2csystem.string% 2csystem.string% system.text.regularexpressions.regex.compiletoassembly%% 29 > メソッドは、コンパイルされた正規表現のアセンブリを生成する別のアプリケーションから呼び出されますが、このような場合には、このメソッドは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="39639-410">Typically, the [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method is called from a separate application that generates an assembly of compiled regular expressions.</span></span> <span data-ttu-id="39639-411">アセンブリに含まれる各正規表現には、次の特性があります。</span><span class="sxs-lookup"><span data-stu-id="39639-411">Each regular expression included in the assembly has the following characteristics:</span></span>  
  
-   <span data-ttu-id="39639-412"><xref:System.Text.RegularExpressions.Regex>クラスから派生します。</span><span class="sxs-lookup"><span data-stu-id="39639-412">It is derived from the <xref:System.Text.RegularExpressions.Regex> class.</span></span>  
  
-   <span data-ttu-id="39639-413">これには、対応する`fullnamespace` <xref:System.Text.RegularExpressions.RegexCompilationInfo>オブジェクトのパラメーターと`name`パラメーターによって定義される完全修飾名が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="39639-413">It is assigned the fully qualified name that is defined by the `fullnamespace` and `name` parameters of its corresponding <xref:System.Text.RegularExpressions.RegexCompilationInfo> object.</span></span>  
  
-   <span data-ttu-id="39639-414">これには、既定の (またはパラメーターなしの) コンストラクターがあります。</span><span class="sxs-lookup"><span data-stu-id="39639-414">It has a default (or parameterless) constructor.</span></span>  
  
 <span data-ttu-id="39639-415">通常、コンパイルされた正規表現をインスタンス化して使用するコードは、アセンブリを作成するコードとは別のアセンブリまたはアプリケーションにあります。</span><span class="sxs-lookup"><span data-stu-id="39639-415">Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.</span></span>  
  
 <span data-ttu-id="39639-416">メソッドは<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> 、特定の言語のクラス定義キーワード ( `class` C#やなど) を使用するのでは`Class`なく、メソッドの呼び出しから .NET Framework アセンブリを生成するため、`End Class`</span><span class="sxs-lookup"><span data-stu-id="39639-416">Because the <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method generates a .NET Framework assembly from a method call instead of using a particular language's class definition keyword (such as `class` in C# or `Class`…`End Class`</span></span> <span data-ttu-id="39639-417">Visual Basic) では、開発言語の標準属性構文を使用して、.NET Framework 属性をアセンブリに割り当てることはできません。</span><span class="sxs-lookup"><span data-stu-id="39639-417">in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language's standard attribute syntax.</span></span> <span data-ttu-id="39639-418">パラメーター `attributes`は、アセンブリに適用される属性を定義するための別の方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="39639-418">The `attributes` parameter provides an alternative method for defining the attributes that apply to the assembly.</span></span> <span data-ttu-id="39639-419">アセンブリに適用する属性ごとに、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="39639-419">For each attribute that you want to apply to the assembly, do the following:</span></span>  
  
1.  <span data-ttu-id="39639-420">呼び出す属性コンストラクターの<xref:System.Type>パラメーターの型を表すオブジェクトの配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-420">Create an array of <xref:System.Type> objects representing the parameter types of the attribute constructor that you want to call.</span></span>  
  
2.  <span data-ttu-id="39639-421">新しいアセンブリ<xref:System.Type>に適用する属性クラスを表すオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="39639-421">Retrieve a <xref:System.Type> object representing the attribute class that you want to apply to the new assembly.</span></span>  
  
3.  <span data-ttu-id="39639-422"><xref:System.Reflection.ConstructorInfo>属性<xref:System.Type.GetConstructor%2A> オブジェクトのメソッドを呼び出して、呼び出す属性コンストラクターを表すオブジェクトを取得します。 <xref:System.Type></span><span class="sxs-lookup"><span data-stu-id="39639-422">Call the <xref:System.Type.GetConstructor%2A> method of the attribute <xref:System.Type> object to retrieve a <xref:System.Reflection.ConstructorInfo> object representing the attribute constructor that you want to call.</span></span> <span data-ttu-id="39639-423">コンストラクターの<xref:System.Type.GetConstructor%2A>パラメーターの型を<xref:System.Type>表すオブジェクトの配列をメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="39639-423">Pass the <xref:System.Type.GetConstructor%2A> method the array of <xref:System.Type> objects that represents the constructor's parameter types</span></span>  
  
4.  <span data-ttu-id="39639-424">属性の<xref:System.Object>コンストラクターに渡すパラメーターを定義する配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-424">Create a <xref:System.Object> array that defines the parameters to pass to the attribute's constructor.</span></span>  
  
5.  <span data-ttu-id="39639-425">手順 3 <xref:System.Reflection.Emit.CustomAttributeBuilder> で取得 <xref:System.Reflection.ConstructorInfo> したオブジェクトと手順 4. で作成した配列を渡すことによって、オブジェクトをインスタンス化します。 <xref:System.Object></span><span class="sxs-lookup"><span data-stu-id="39639-425">Instantiate a <xref:System.Reflection.Emit.CustomAttributeBuilder> object by passing its constructor the <xref:System.Reflection.ConstructorInfo> object retrieved in step 3 and the <xref:System.Object> array created in step 4.</span></span>  
  
 <span data-ttu-id="39639-426">次に、 `attributes`パラメーターの代わりに、これらのオブジェクトの配列を、パラメーター\]の代わりに、\<[, AssemblyName, system.text.regularexpressions.regexoptions% CustomAttributeBuilder%% system.text.regularexpressions.regex.compiletoassembly%%%%% > 29 に渡すことができます。この<xref:System.Reflection.Emit.CustomAttributeBuilder>メソッドは、RegexCompilationInfo% 2csystem.string%% system.text.regularexpressions.regexoptions です。</span><span class="sxs-lookup"><span data-stu-id="39639-426">You can then pass an array of these <xref:System.Reflection.Emit.CustomAttributeBuilder> objects instead of the `attributes` parameter to the [\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-427"><paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。</span><span class="sxs-lookup"><span data-stu-id="39639-427">The value of the <paramref name="assemblyname" /> parameter's <see cref="P:System.Reflection.AssemblyName.Name" /> property is an empty or null string.</span></span>  
  
<span data-ttu-id="39639-428">または</span><span class="sxs-lookup"><span data-stu-id="39639-428">-or-</span></span> 
<span data-ttu-id="39639-429"><paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-429">The regular expression pattern of one or more objects in <paramref name="regexinfos" /> contains invalid syntax.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-430"><paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-430"><paramref name="assemblyname" /> or <paramref name="regexinfos" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="39639-431"><paramref name="resourceFile" /> パラメーターは無効な Win32 リソース ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="39639-431">The <paramref name="resourceFile" /> parameter designates an invalid Win32 resource file.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="39639-432"><paramref name="resourceFile" /> パラメーターで指定されているファイルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="39639-432">The file designated by the <paramref name="resourceFile" /> parameter cannot be found.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="39639-433">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="39639-433">.NET Core only: Creating an assembly of compiled regular expressions is not supported.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-434">またはそのポイントリリースが[!INCLUDE[net_v45](~/includes/net-v45-md.md)]インストールされているシステムで開発する場合は、 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />を対象[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]とし、メソッドを使用して、コンパイル済みの正規表現を含むアセンブリを作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-434">If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions.</span></span> <span data-ttu-id="39639-435">が[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]例外をスローしたシステムで、そのアセンブリの正規表現の1つを使用しようとしています。</span><span class="sxs-lookup"><span data-stu-id="39639-435">Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception.</span></span> <span data-ttu-id="39639-436">この問題を回避するには、次のいずれかの方法を実行します。</span><span class="sxs-lookup"><span data-stu-id="39639-436">To work around this problem, you can do either of the following:</span></span> 
<span data-ttu-id="39639-437">-新しいバージョンが[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]インストールされていないシステムで、コンパイルされた正規表現を含むアセンブリをビルドします。</span><span class="sxs-lookup"><span data-stu-id="39639-437">-   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.</span></span>  
  
<span data-ttu-id="39639-438">-アセンブリからコンパイル<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />済みの正規表現を呼び出して取得するのではなく、オブジェクト<see cref="T:System.Text.RegularExpressions.Regex" />を<see cref="T:System.Text.RegularExpressions.Regex" />インスタンス化<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />するとき、または正規表現を呼び出すときにオプションを指定して、静的メソッドまたはインスタンスメソッドを使用します。パターン一致メソッド。</span><span class="sxs-lookup"><span data-stu-id="39639-438">-   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md"><span data-ttu-id="39639-439">コンパイルと再利用</span><span class="sxs-lookup"><span data-stu-id="39639-439">Compilation and Reuse</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="public static string Escape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Escape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Escape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Escape(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Escape : string -&gt; string" Usage="System.Text.RegularExpressions.Regex.Escape str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="39639-440">変換対象のテキストを含んでいる入力文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-440">The input string that contains the text to convert.</span></span></param>
        <summary><span data-ttu-id="39639-441">文字 (\\、\*、+、?、|、{、[、(、)、^、$、.、#、および空白) をエスケープ コードに置き換えることにより、このような文字をエスケープします。</span><span class="sxs-lookup"><span data-stu-id="39639-441">Escapes a minimal set of characters (\\, \*, +, ?, |, {, [, (,), ^, $, ., #, and white space) by replacing them with their escape codes.</span></span> <span data-ttu-id="39639-442">これにより、正規表現エンジンではこのような文字がメタ文字ではなくリテラルとして解釈されます。</span><span class="sxs-lookup"><span data-stu-id="39639-442">This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.</span></span></summary>
        <returns><span data-ttu-id="39639-443">メタ文字がエスケープされた形式に変換された文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-443">A string of characters with metacharacters converted to their escaped form.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-444"><xref:System.Text.RegularExpressions.Regex.Escape%2A>文字列を変換して、正規表現エンジンが文字リテラルとして格納できるメタ文字を解釈できるようにします。</span><span class="sxs-lookup"><span data-stu-id="39639-444"><xref:System.Text.RegularExpressions.Regex.Escape%2A> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals.</span></span> <span data-ttu-id="39639-445">たとえば、テキストから右と終わりの角かっこ ([および]) で区切られたコメントを抽出するように設計された正規表現を考えてみます。</span><span class="sxs-lookup"><span data-stu-id="39639-445">For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets ([ and ]) from text.</span></span> <span data-ttu-id="39639-446">次の例では、正規表現 "[(. \*?)]" が文字クラスとして解釈されます。</span><span class="sxs-lookup"><span data-stu-id="39639-446">In the following example, the regular expression "[(.\*?)]" is interpreted as a character class.</span></span> <span data-ttu-id="39639-447">正規表現は、入力テキストに埋め込まれたコメントと一致するのではなく、それぞれの開始かっこ、閉じかっこ、ピリオド、アスタリスク、または疑問符に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-447">Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#1)]  
  
 <span data-ttu-id="39639-448">ただし、開始角かっこを<xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドに渡すことによってエスケープされた場合、正規表現は、入力文字列に埋め込まれているコメントに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-448">However, if the opening bracket is escaped by passing it to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method, the regular expression succeeds in matching comments that are embedded in the input string.</span></span> <span data-ttu-id="39639-449">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="39639-449">The following example illustrates this.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#2)]  
  
 <span data-ttu-id="39639-450">静的テキストを使用して定義された正規表現では、メタ文字としてではなく文字どおりに解釈される文字は、円記号 (\\) を使用して、 <xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドを呼び出すことによってエスケープできます。</span><span class="sxs-lookup"><span data-stu-id="39639-450">In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (\\) as well as by calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method.</span></span> <span data-ttu-id="39639-451">デザイン時に認識されない文字を使用して動的に定義される正規表現で<xref:System.Text.RegularExpressions.Regex.Escape%2A>は、正規表現エンジンが個々の文字をリテラルとして解釈するようにするために、メソッドを呼び出すことが特に重要です。メタ文字として。</span><span class="sxs-lookup"><span data-stu-id="39639-451">In a regular expression that is defined dynamically using characters that are not known at design time, calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39639-452">正規表現パターンにシャープ記号 (#) またはリテラルの空白文字が含まれている場合、オプションを有効にし<xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType>て入力テキストを解析する場合は、エスケープする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-452">If a regular expression pattern includes either the number sign (#) or literal white-space characters, they must be escaped if input text is parsed with the <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> option enabled.</span></span>  
  
 <span data-ttu-id="39639-453">メソッドは<xref:System.Text.RegularExpressions.Regex.Escape%2A> 、右角かっこ ([) と左中かっこ ({) 文字をエスケープしますが、対応する終了文字 (] と}) はエスケープしません。</span><span class="sxs-lookup"><span data-stu-id="39639-453">While the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and }).</span></span> <span data-ttu-id="39639-454">ほとんどの場合、これらのエスケープは必要ありません。</span><span class="sxs-lookup"><span data-stu-id="39639-454">In most cases, escaping these is not necessary.</span></span> <span data-ttu-id="39639-455">右角かっこまたは中かっこの前に、対応する開始文字がない場合、正規表現エンジンはこれを文字どおりに解釈します。</span><span class="sxs-lookup"><span data-stu-id="39639-455">If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally.</span></span> <span data-ttu-id="39639-456">左角かっこまたは中かっこがメタ文字として解釈される場合、正規表現エンジンは、最初に対応する終了文字をメタ文字として解釈します。</span><span class="sxs-lookup"><span data-stu-id="39639-456">If an opening bracket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter.</span></span> <span data-ttu-id="39639-457">これが目的の動作でない場合は、円記号 (\\) を明示的に付加することによって、右角かっこまたは中かっこをエスケープする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-457">If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (\\) character.</span></span> <span data-ttu-id="39639-458">図については、「例」のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-458">For an illustration, see the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-459">次の例では、テキストからコメントを抽出します。</span><span class="sxs-lookup"><span data-stu-id="39639-459">The following example extracts comments from text.</span></span> <span data-ttu-id="39639-460">コメントは、開始コメント記号とユーザーが選択した終了コメント記号で区切られていることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="39639-460">It assumes that the comments are delimited by a begin comment symbol and an end comment symbol that is selected by the user.</span></span> <span data-ttu-id="39639-461">コメント記号は文字どおりに解釈されるため、 <xref:System.Text.RegularExpressions.Regex.Escape%2A>メソッドに渡され、メタ文字として誤って解釈されないようにします。</span><span class="sxs-lookup"><span data-stu-id="39639-461">Because the comment symbols are to be interpreted literally, they are passed to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method to ensure that they cannot be misinterpreted as metacharacters.</span></span> <span data-ttu-id="39639-462">さらに、この例では、ユーザーによって入力された終了コメントシンボルが右角かっこ (]) または中かっこ (}) であるかどうかを明示的に確認します。</span><span class="sxs-lookup"><span data-stu-id="39639-462">In addition, the example explicitly checks whether the end comment symbol entered by the user is a closing bracket (]) or brace (}).</span></span> <span data-ttu-id="39639-463">そのような場合は、リテラルと\\して解釈されるように、円記号 () を角かっこまたは中かっこの前に付加します。</span><span class="sxs-lookup"><span data-stu-id="39639-463">If it is, a backslash character (\\) is prepended to the bracket or brace so that it is interpreted literally.</span></span> <span data-ttu-id="39639-464">また、この例では、 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>コメントを開始コメント記号と終了コメント記号と共に使用するのではなく、コレクションも使用してコメントを表示します。</span><span class="sxs-lookup"><span data-stu-id="39639-464">Note that the example also uses the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> collection to display the comment only, rather than the comment together with its opening and closing comment symbols.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-465"><paramref name="str" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-465"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-466">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-466">Regular Expression Language - Quick Reference</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/f49cc9cc-db7d-4058-8b8a-422bc08b29b0"><span data-ttu-id="39639-467">正規表現での文字のエスケープ</span><span class="sxs-lookup"><span data-stu-id="39639-467">Character Escapes in Regular Expressions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="factory">
      <MemberSignature Language="C#" Value="protected internal System.Text.RegularExpressions.RegexRunnerFactory factory;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Text.RegularExpressions.RegexRunnerFactory factory" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.factory" />
      <MemberSignature Language="VB.NET" Value="Protected Friend factory As RegexRunnerFactory " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Text::RegularExpressions::RegexRunnerFactory ^ factory;" />
      <MemberSignature Language="F#" Value="val mutable factory : System.Text.RegularExpressions.RegexRunnerFactory" Usage="System.Text.RegularExpressions.Regex.factory" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexRunnerFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-468"><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-468">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Regex ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Regex ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="regex.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39639-469">このメンバーは <see cref="M:System.Object.Finalize" /> をオーバーライドし、より詳細なドキュメントがそのトピックで使用できるようになる場合があります。</span><span class="sxs-lookup"><span data-stu-id="39639-469">This member overrides <see cref="M:System.Object.Finalize" />, and more complete documentation might be available in that topic.</span></span>

<span data-ttu-id="39639-470"><see cref="T:System.Object" /> がガベージ コレクションにより収集される前に、その <see cref="T:System.Object" /> がリソースを解放し、その他のクリーンアップ操作を実行できるようにします。</span><span class="sxs-lookup"><span data-stu-id="39639-470">Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" /> is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupNames">
      <MemberSignature Language="C#" Value="public string[] GetGroupNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetGroupNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGroupNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetGroupNames();" />
      <MemberSignature Language="F#" Value="member this.GetGroupNames : unit -&gt; string[]" Usage="regex.GetGroupNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39639-471">正規表現で使用されるキャプチャ グループ名の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-471">Returns an array of capturing group names for the regular expression.</span></span></summary>
        <returns><span data-ttu-id="39639-472">グループ名の文字列配列。</span><span class="sxs-lookup"><span data-stu-id="39639-472">A string array of group names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-473">グループ名のコレクションには、式でキャプチャグループの名前を指定するために使用される文字列のセットが含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-473">The collection of group names contains the set of strings used to name capturing groups in the expression.</span></span> <span data-ttu-id="39639-474">キャプチャグループに明示的な名前が付けられていない場合でも、数値名 ("0"、"1"、"2"、"3" など) が自動的に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="39639-474">Even if capturing groups are not explicitly named, they are automatically assigned numerical names ("0", "1", "2", "3", and so on).</span></span> <span data-ttu-id="39639-475">"0" という名前付きグループは、正規表現パターンに一致したすべてのテキストを表します。</span><span class="sxs-lookup"><span data-stu-id="39639-475">The "0" named group represents all text matched by the regular expression pattern.</span></span> <span data-ttu-id="39639-476">番号付きグループは、コレクション内の明示的な名前付きグループの前に配置され、名前付きグループは正規表現パターンで定義されている順序で表示されます。</span><span class="sxs-lookup"><span data-stu-id="39639-476">Numbered groups precede explicitly named groups in the collection, and named groups appear in the order in which they are defined in the regular expression pattern.</span></span>  
  
 <span data-ttu-id="39639-477">このメソッドによっ<xref:System.Array.Length%2A>て返される配列のプロパティを使用して、正規表現内のグループの数を決定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-477">You can use the <xref:System.Array.Length%2A> property on the array returned by this method to determine the number of groups in a regular expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-478">次の例では、正規表現`ShowMatches`グループの名前と、一致したテキストを表示する汎用メソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="39639-478">The following example defines a general-purpose `ShowMatches` method that displays the names of regular expression groups and their matched text.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/cs/getgroupnames1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/vb/getgroupnames1.vb#1)]  
  
 <span data-ttu-id="39639-479">この場合、正規表現パターン`\b(?<FirstWord>\w+)\s?((\w+)\s)*(?<LastWord>\w+)?(?<Punctuation>\p{Po})`は、単純な文を解析し、最初の単語、最後の単語、および末尾の区切り記号を識別することを目的としています。</span><span class="sxs-lookup"><span data-stu-id="39639-479">In this case, the regular expression pattern `\b(?<FirstWord>\w+)\s?((\w+)\s)*(?<LastWord>\w+)?(?<Punctuation>\p{Po})` is intended to parse a simple sentence, and to identify its first word, last word, and ending punctuation mark.</span></span> <span data-ttu-id="39639-480">次の表は、正規表現パターンがどのように解釈されるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="39639-480">The following table shows how the regular expression pattern is interpreted:</span></span>  
  
|<span data-ttu-id="39639-481">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-481">Pattern</span></span>|<span data-ttu-id="39639-482">説明</span><span class="sxs-lookup"><span data-stu-id="39639-482">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="39639-483">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-483">Begin the match at a word boundary.</span></span>|  
|`(?<FirstWord>\w+)`|<span data-ttu-id="39639-484">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-484">Match one or more word characters.</span></span> <span data-ttu-id="39639-485">これは`FirstWord`名前付きグループです。</span><span class="sxs-lookup"><span data-stu-id="39639-485">This is the `FirstWord` named group.</span></span>|  
|<span data-ttu-id="39639-486">¥?</span><span class="sxs-lookup"><span data-stu-id="39639-486">\s?</span></span>|<span data-ttu-id="39639-487">0 個または 1 個の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-487">Match zero or one white-space characters.</span></span>|  
|<span data-ttu-id="39639-488">(\w+)</span><span class="sxs-lookup"><span data-stu-id="39639-488">(\w+)</span></span>|<span data-ttu-id="39639-489">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-489">Match one or more word characters.</span></span> <span data-ttu-id="39639-490">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="39639-490">This is the second capturing group.</span></span>|  
|<span data-ttu-id="39639-491">\s</span><span class="sxs-lookup"><span data-stu-id="39639-491">\s</span></span>|<span data-ttu-id="39639-492">空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-492">Match a white-space character.</span></span>|  
|<span data-ttu-id="39639-493">((\w +) \s) \*</span><span class="sxs-lookup"><span data-stu-id="39639-493">((\w+)\s)\*</span></span>|<span data-ttu-id="39639-494">1個以上の単語文字の後に空白が続くパターンの0回以上の繰り返しに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-494">Match zero or more occurrences of one or more word characters followed by a white space.</span></span> <span data-ttu-id="39639-495">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="39639-495">This is the first capturing group.</span></span>|  
|<span data-ttu-id="39639-496">(?\<Lastword > \w +)?</span><span class="sxs-lookup"><span data-stu-id="39639-496">(?\<LastWord>\w+)?</span></span>|<span data-ttu-id="39639-497">1個以上の単語文字の0回または1回の繰り返しに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-497">Match zero or one occurrence of one or more word characters.</span></span> <span data-ttu-id="39639-498">これは`LastWord`名前付きグループです。</span><span class="sxs-lookup"><span data-stu-id="39639-498">This is the `LastWord` named group.</span></span>|  
|<span data-ttu-id="39639-499">(?\<句読点 > \p{Po})</span><span class="sxs-lookup"><span data-stu-id="39639-499">(?\<Punctuation>\p{Po})</span></span>|<span data-ttu-id="39639-500">Unicode カテゴリが句読点 (Other) である文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-500">Match a character whose Unicode category is Punctuation, Other.</span></span> <span data-ttu-id="39639-501">これは`Punctuation`名前付きグループです。</span><span class="sxs-lookup"><span data-stu-id="39639-501">This is the `Punctuation` named group.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b"><span data-ttu-id="39639-502">正規表現でのグループ化構成体</span><span class="sxs-lookup"><span data-stu-id="39639-502">Grouping Constructs in Regular Expressions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetGroupNumbers">
      <MemberSignature Language="C#" Value="public int[] GetGroupNumbers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] GetGroupNumbers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGroupNumbers () As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ GetGroupNumbers();" />
      <MemberSignature Language="F#" Value="member this.GetGroupNumbers : unit -&gt; int[]" Usage="regex.GetGroupNumbers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39639-503">配列内のグループ名に対応したキャプチャ グループ番号の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-503">Returns an array of capturing group numbers that correspond to group names in an array.</span></span></summary>
        <returns><span data-ttu-id="39639-504">グループ番号の整数配列。</span><span class="sxs-lookup"><span data-stu-id="39639-504">An integer array of group numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-505">名前のないキャプチャグループと名前付きキャプチャグループの両方に、数値でアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="39639-505">Both unnamed and named capturing groups can be accessed by number.</span></span> <span data-ttu-id="39639-506">名前のないグループには、左から右に1から順に番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="39639-506">Unnamed groups are numbered from left to right starting with 1.</span></span> <span data-ttu-id="39639-507">(インデックス 0 (ゼロ) のキャプチャグループは、照合全体を表します)。 名前付きグループには、名前のないキャプチャグループの数より1つ大きい数値から始まる番号が付けられます。</span><span class="sxs-lookup"><span data-stu-id="39639-507">(The capturing group in index 0 (zero) represents the match as a whole.)  Named groups are then numbered from left to right starting with a number that is one greater than the number of unnamed capturing groups.</span></span>  
  
 <span data-ttu-id="39639-508">文字列名ではなく数値を使用してグループを参照すると、アクセスが高速になります。</span><span class="sxs-lookup"><span data-stu-id="39639-508">Referencing a group by its number instead of by string name can provide faster access.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-509">次の例では、文に`\b((?<word>\w+)\s*)+(?<end>[.?!])`一致する正規表現を定義しています。</span><span class="sxs-lookup"><span data-stu-id="39639-509">The following example defines a regular expression, `\b((?<word>\w+)\s*)+(?<end>[.?!])`, that matches a sentence.</span></span> <span data-ttu-id="39639-510">正規表現には、次の3つのキャプチャグループが含まれます。個々の単語とその後に続く空白文字をキャプチャする名前のないグループ。文内の`word`個々の単語をキャプチャするという名前のグループと、 `end`文を終了する句読点をキャプチャするという名前のグループ。</span><span class="sxs-lookup"><span data-stu-id="39639-510">The regular expression includes three capturing groups: an unnamed group that captures an individual word along with a space character that may follow it; a group named `word` that captures the individual words in the sentence; and a group named `end` that captures the punctuation that ends the sentence.</span></span> <span data-ttu-id="39639-511">この例では<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A> 、メソッドを呼び出してすべてのキャプチャグループの数を取得し、キャプチャした文字列を表示します。</span><span class="sxs-lookup"><span data-stu-id="39639-511">The example calls the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A> method to get the numbers of all capturing groups, and then displays their captured string.</span></span> <span data-ttu-id="39639-512">また、 <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A>メソッドは、特定の番号付きグループが名前付きグループに対応するかどうかを示すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-512">In addition, the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method is used to indicate whether a particular numbered group corresponds to a named group.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNumbers#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/cs/getgroupnumbers1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNumbers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/vb/getgroupnumbers1.vb#1)]  
  
 <span data-ttu-id="39639-513">この正規表現パターンの解釈を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="39639-513">The regular expression pattern is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-514">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-514">Pattern</span></span>|<span data-ttu-id="39639-515">説明</span><span class="sxs-lookup"><span data-stu-id="39639-515">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="39639-516">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-516">Begin the match at a word boundary.</span></span>|  
|`(?<word>\w+)`|<span data-ttu-id="39639-517">1個以上の単語文字と一致し、一致した文字列を`word`という名前のグループに代入します。</span><span class="sxs-lookup"><span data-stu-id="39639-517">Match one or more word characters and assign the matched strings to a group named `word`.</span></span>|  
|`\s*`|<span data-ttu-id="39639-518">0 個以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-518">Match zero or more white-space characters.</span></span>|  
|`((?<word>\w+)\s*)`|<span data-ttu-id="39639-519">キャプチャし`word`たグループに、キャプチャされた最初のグループにキャプチャした空白文字を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="39639-519">Assign the `word` captured group followed by any captured white-space characters to the first captured group.</span></span>|  
|`((?<word>\w+)\s*)+`|<span data-ttu-id="39639-520">1個以上の単語文字の後に空白文字が1回以上続くパターンと一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-520">Match the pattern of one or more word characters followed by any white-space characters one or more times.</span></span>|  
|`(?<end>[.?!])`|<span data-ttu-id="39639-521">ピリオド、疑問符、または感嘆符に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-521">Match a period, question mark, or exclamation point.</span></span> <span data-ttu-id="39639-522">一致した文字を`end`キャプチャグループに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="39639-522">Assign the matched character to the `end` capturing group.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b"><span data-ttu-id="39639-523">正規表現でのグループ化構成体</span><span class="sxs-lookup"><span data-stu-id="39639-523">Grouping Constructs in Regular Expressions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupNameFromNumber">
      <MemberSignature Language="C#" Value="public string GroupNameFromNumber (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GroupNameFromNumber(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupNameFromNumber (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GroupNameFromNumber(int i);" />
      <MemberSignature Language="F#" Value="member this.GroupNameFromNumber : int -&gt; string" Usage="regex.GroupNameFromNumber i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i"><span data-ttu-id="39639-524">対応するグループ名に変換するグループ番号。</span><span class="sxs-lookup"><span data-stu-id="39639-524">The group number to convert to the corresponding group name.</span></span></param>
        <summary><span data-ttu-id="39639-525">指定したグループ番号に対応するグループ名を取得します。</span><span class="sxs-lookup"><span data-stu-id="39639-525">Gets the group name that corresponds to the specified group number.</span></span></summary>
        <returns><span data-ttu-id="39639-526">指定したグループ番号に関連付けられたグループ名を含んでいる文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-526">A string that contains the group name associated with the specified group number.</span></span> <span data-ttu-id="39639-527"><paramref name="i" /> に対応するグループ名がない場合、このメソッドは <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-527">If there is no group name that corresponds to <paramref name="i" />, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-528">正規表現パターンには、名前付きまたは番号付きのキャプチャグループを含めることができます。これは、パターンマッチ内の部分式を表します。</span><span class="sxs-lookup"><span data-stu-id="39639-528">A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match.</span></span> <span data-ttu-id="39639-529">番号付きグループは構文 (*部分式*) で区切られ、正規表現の順序に基づいて番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="39639-529">Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression.</span></span> <span data-ttu-id="39639-530">名前付きグループは構文で区切られます`<` (?*名前*部分式) または (?) \*\* `>`*名前*'*部分式*)。ここで、 *name*は部分式の識別に使用される名前です。</span><span class="sxs-lookup"><span data-stu-id="39639-530">Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified.</span></span> <span data-ttu-id="39639-531">(詳細については、「[グループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」を参照してください)。メソッド<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A>は、正規表現内の序数位置によって名前付きグループと番号付きグループの両方を識別します。</span><span class="sxs-lookup"><span data-stu-id="39639-531">(For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression.</span></span> <span data-ttu-id="39639-532">序数位置0は、常に正規表現全体を表します。</span><span class="sxs-lookup"><span data-stu-id="39639-532">Ordinal position zero always represents the entire regular expression.</span></span> <span data-ttu-id="39639-533">正規表現パターンの実際の位置に関係なく、すべての番号付きグループは名前付きグループの前にカウントされます。</span><span class="sxs-lookup"><span data-stu-id="39639-533">All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.</span></span>  
  
 <span data-ttu-id="39639-534">が`i`名前付きグループの数の場合、メソッドはグループの名前を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-534">If `i` is the number of a named group, the method returns the name of the group.</span></span> <span data-ttu-id="39639-535">が`i`名前のないグループの数である場合、メソッドは数値の文字列形式を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-535">If `i` is the number of an unnamed group, the method returns the string representation of the number.</span></span> <span data-ttu-id="39639-536">たとえば、が 1 `i`の場合、メソッドは "1" を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-536">For example, if `i` is 1, the method returns "1".</span></span> <span data-ttu-id="39639-537">が`i`キャプチャグループの数ではない場合、メソッドはを<xref:System.String.Empty?displayProperty=nameWithType>返します。</span><span class="sxs-lookup"><span data-stu-id="39639-537">If `i` is not the number of a capturing group, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="39639-538">パターン一致が見つかった場合、このメソッドによって返される値を使用して、 <xref:System.Text.RegularExpressions.Group>キャプチャされたグループを表すオブジェクト<xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=nameWithType>をプロパティから取得できます。</span><span class="sxs-lookup"><span data-stu-id="39639-538">If a pattern match is found, the value returned by this method can then be used to retrieve the <xref:System.Text.RegularExpressions.Group> object that represents the captured group from the <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="39639-539">オブジェクトは、 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>プロパティによって返されます。 <xref:System.Text.RegularExpressions.GroupCollection></span><span class="sxs-lookup"><span data-stu-id="39639-539">The <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-540">次の例では、米国の市区町村名、州名、および郵便番号を含む住所行と一致する正規表現パターンを定義します。</span><span class="sxs-lookup"><span data-stu-id="39639-540">The following example defines a regular expression pattern that matches an address line containing a U.S. city name, state name, and zip code.</span></span> <span data-ttu-id="39639-541">この例では<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> 、メソッドを使用して、キャプチャグループの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="39639-541">The example uses the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> method to retrieve the names of capturing groups.</span></span> <span data-ttu-id="39639-542">次に、これらの名前を使用して、一致するために対応するキャプチャグループを取得します。</span><span class="sxs-lookup"><span data-stu-id="39639-542">It then uses these names to retrieve the corresponding captured groups for matches.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GroupNameFromNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/cs/groupnamefromnumberex.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GroupNameFromNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/vb/groupnamefromnumberex.vb#1)]  
  
 <span data-ttu-id="39639-543">正規表現パターンは、次の式によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="39639-543">The regular expression pattern is defined by the following expression:</span></span>  
  
 `(?<city>[A-Za-z\s]+), (?<state>[A-Za-z]{2}) (?<zip>\d{5}(-\d{4})?)`  
  
 <span data-ttu-id="39639-544">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-544">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="39639-545">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-545">Pattern</span></span>|<span data-ttu-id="39639-546">説明</span><span class="sxs-lookup"><span data-stu-id="39639-546">Description</span></span>|  
|-------------|-----------------|  
|`(?<city>[A-Za-z\s]+)`|<span data-ttu-id="39639-547">1つ以上の英字または空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-547">Match one or more alphabetic or white-space character.</span></span> <span data-ttu-id="39639-548">このキャプチャされたグループ`city`に名前を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="39639-548">Assign this captured group the name `city`.</span></span>|  
|`,`|<span data-ttu-id="39639-549">コンマ (,) の後に空白文字が続くパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-549">Match a comma (,) followed by a white-space character.</span></span>|  
|`(?<state>[A-Za-z]{2})`|<span data-ttu-id="39639-550">2つの英字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-550">Match two alphabetic characters.</span></span> <span data-ttu-id="39639-551">このキャプチャされたグループ`state`に名前を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="39639-551">Assign this captured group the name `state`.</span></span> <span data-ttu-id="39639-552">このグループの後には、空白文字が必要です。</span><span class="sxs-lookup"><span data-stu-id="39639-552">This group should be followed by a white-space character.</span></span>|  
|`(?<zip>\d{5}(-\d{4})?)`|<span data-ttu-id="39639-553">5桁の数字の後に、0回または1回のハイフンの後に4桁の数字が続くパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-553">Match five numeric digits followed by either zero or one occurrence of a hyphen followed by four digits.</span></span> <span data-ttu-id="39639-554">このキャプチャされたグループ`zip`に名前を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="39639-554">Assign this captured group the name `zip`.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b"><span data-ttu-id="39639-555">グループ化構成体</span><span class="sxs-lookup"><span data-stu-id="39639-555">Grouping Constructs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupNumberFromName">
      <MemberSignature Language="C#" Value="public int GroupNumberFromName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GroupNumberFromName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupNumberFromName (name As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GroupNumberFromName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GroupNumberFromName : string -&gt; int" Usage="regex.GroupNumberFromName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="39639-556">対応するグループ番号に変換するグループ名。</span><span class="sxs-lookup"><span data-stu-id="39639-556">The group name to convert to the corresponding group number.</span></span></param>
        <summary><span data-ttu-id="39639-557">指定したグループ名に対応するグループ番号を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-557">Returns the group number that corresponds to the specified group name.</span></span></summary>
        <returns><span data-ttu-id="39639-558">指定したグループ名に対応するグループ番号。<paramref name="name" /> が有効なグループ名でない場合は -1。</span><span class="sxs-lookup"><span data-stu-id="39639-558">The group number that corresponds to the specified group name, or -1 if <paramref name="name" /> is not a valid group name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-559">正規表現パターンには、名前付きまたは番号付きのキャプチャグループを含めることができます。これは、パターンマッチ内の部分式を表します。</span><span class="sxs-lookup"><span data-stu-id="39639-559">A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match.</span></span> <span data-ttu-id="39639-560">番号付きグループは構文 (*部分式*) で区切られ、正規表現の順序に基づいて番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="39639-560">Numbered groups are delimited by the syntax (*subexpression*) and are assigned numbers based on their order in the regular expression.</span></span> <span data-ttu-id="39639-561">名前付きグループは構文で区切られます`<` (?*名前*部分式) または (?) \*\* `>`*名前*'*部分式*)。ここで、 *name*は部分式の識別に使用される名前です。</span><span class="sxs-lookup"><span data-stu-id="39639-561">Named groups are delimited by the syntax (?`<`*name*`>`*subexpression*) or (?'*name*'*subexpression*), where *name* is the name by which the subexpression will be identified.</span></span> <span data-ttu-id="39639-562">(詳細については、「[グループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)」を参照してください)。メソッド<xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A>は、正規表現内の序数位置によって名前付きグループと番号付きグループの両方を識別します。</span><span class="sxs-lookup"><span data-stu-id="39639-562">(For more information, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).) The <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A> method identifies both named groups and numbered groups by their ordinal positions in the regular expression.</span></span> <span data-ttu-id="39639-563">序数位置0は、常に正規表現全体を表します。</span><span class="sxs-lookup"><span data-stu-id="39639-563">Ordinal position zero always represents the entire regular expression.</span></span> <span data-ttu-id="39639-564">正規表現パターンの実際の位置に関係なく、すべての番号付きグループは名前付きグループの前にカウントされます。</span><span class="sxs-lookup"><span data-stu-id="39639-564">All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.</span></span>  
  
 <span data-ttu-id="39639-565">が`name`正規表現パターンに含まれるグループ番号の文字列表現である場合、メソッドはその数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-565">If `name` is the string representation of a group number that is present in the regular expression pattern, the method returns that number.</span></span> <span data-ttu-id="39639-566">が`name`正規表現パターンに存在する名前付きキャプチャグループに対応する場合、メソッドは対応する数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-566">If `name` corresponds to a named capturing group that is present in the regular expression pattern, the method returns its corresponding number.</span></span> <span data-ttu-id="39639-567">とグループ名`name`の比較では、大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="39639-567">The comparison of `name` with the group name is case-sensitive.</span></span> <span data-ttu-id="39639-568">が`name`キャプチャグループの名前またはキャプチャグループの番号の文字列形式に対応していない場合、メソッドは-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-568">If `name` does not correspond to the name of a capturing group or to the string representation of the number of a capturing group, the method returns -1.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-569"><paramref name="name" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-569"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b"><span data-ttu-id="39639-570">グループ化構成体</span><span class="sxs-lookup"><span data-stu-id="39639-570">Grouping Constructs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InfiniteMatchTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteMatchTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteMatchTimeout;" />
      <MemberSignature Language="F#" Value=" staticval mutable InfiniteMatchTimeout : TimeSpan" Usage="System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-571">パターン一致の操作がタイムアウトしないことを指定します。</span><span class="sxs-lookup"><span data-stu-id="39639-571">Specifies that a pattern-matching operation should not time out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-572">クラスコンストラクターと多数の静的な一致メソッドでは<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> 、定数を使用して、パターンマッチを検索する試みがタイムアウトしないことを示します。 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29></span><span class="sxs-lookup"><span data-stu-id="39639-572">The <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> class constructor and a number of static matching methods use the <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant to indicate that the attempt to find a pattern match should not time out.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="39639-573">正規表現エンジンのタイムアウト値をに<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>設定すると、正規表現パターンにほぼ一致するテキストを処理するときに、過度なバックトラッキングに依存する正規表現が応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="39639-573">Setting the regular expression engine's time-out value to <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern.</span></span> <span data-ttu-id="39639-574">タイムアウトを無効にした場合は、正規表現が過剰なバックトラッキングに依存していないこと、および正規表現パターンにほぼ一致するテキストを処理していることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-574">If you disable time-outs, you should ensure that your regular expression does not rely on excessive backtracking and that it handles text that nearly matches the regular expression pattern.</span></span>  
>   
>  <span data-ttu-id="39639-575">バックトラッキングの処理の詳細については、「[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-575">For more information about handling backtracking, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="39639-576">定数<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>は、次のメンバーの`matchTimeout`引数の値として指定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-576">The <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> constant can be supplied as the value of the `matchTimeout` argument of the following members:</span></span>  
  
-   <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="InitializeReferences">
      <MemberSignature Language="C#" Value="protected void InitializeReferences ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeReferences() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.InitializeReferences" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializeReferences ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializeReferences();" />
      <MemberSignature Language="F#" Value="member this.InitializeReferences : unit -&gt; unit" Usage="regex.InitializeReferences " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39639-577"><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-577">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="39639-578">参照は既に初期化されています。</span><span class="sxs-lookup"><span data-stu-id="39639-578">References have already been initialized.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="internalMatchTimeout">
      <MemberSignature Language="C#" Value="protected internal TimeSpan internalMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.TimeSpan internalMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.internalMatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Protected Friend internalMatchTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="protected public: TimeSpan internalMatchTimeout;" />
      <MemberSignature Language="F#" Value="val mutable internalMatchTimeout : TimeSpan" Usage="System.Text.RegularExpressions.Regex.internalMatchTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.Serialization.OptionalField(VersionAdded=2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-579">操作がタイムアウトになる前に、パターン一致操作で経過できる最大時間。</span><span class="sxs-lookup"><span data-stu-id="39639-579">The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsMatch">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="39639-580">正規表現と一致する対象が入力文字列内で見つかったかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-580">Indicates whether the regular expression finds a match in the input string.</span></span></summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-581">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-581">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (input As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsMatch(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.IsMatch : string -&gt; bool" Usage="regex.IsMatch input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-582">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-582">The string to search for a match.</span></span></param>
        <summary><span data-ttu-id="39639-583"><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-583">Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in a specified input string.</span></span></summary>
        <returns><span data-ttu-id="39639-584">正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-584"><see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-585"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A>メソッドは、通常、文字列を検証したり、文字列が後続の操作のためにその文字列を取得せずに特定のパターンに準拠していることを確認したりするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-585">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="39639-586">1つ以上の文字列が正規表現パターンに一致するかどうかを判断し、後続の操作のために<xref:System.Text.RegularExpressions.Regex.Match%2A>それら<xref:System.Text.RegularExpressions.Regex.Matches%2A>を取得する必要がある場合は、メソッドまたはメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-586">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="39639-587">この例外は、一致操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-587">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-588">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-588">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-589"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-589">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-590">次の例は、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29>メソッドを使用して、文字列が有効な部品番号であるかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="39639-590">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="39639-591">正規表現では、パーツ番号は、ハイフンで区切られた3つの文字セットで構成される特定の形式を持つことを前提としています。</span><span class="sxs-lookup"><span data-stu-id="39639-591">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="39639-592">4つの文字を含む最初のセットは、英数字の後に英数字が続く2つの数字で構成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-592">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="39639-593">2つの文字で構成される2番目のセットは数値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-593">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="39639-594">4つの文字で構成される3番目のセットには、3つの数字と英数字が続く必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-594">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch2.vb#2)]  
  
 <span data-ttu-id="39639-595">正規表現パターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="39639-595">The regular expression pattern is:</span></span>  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 <span data-ttu-id="39639-596">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-596">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="39639-597">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-597">Pattern</span></span>|<span data-ttu-id="39639-598">説明</span><span class="sxs-lookup"><span data-stu-id="39639-598">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="39639-599">行の先頭から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-599">Begin the match at the beginning of the line.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="39639-600">1つの英字`a` (~ `z`または`A` ~ `Z`) または数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-600">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="39639-601">2つの数字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-601">Match two numeric characters.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="39639-602">1つの英字`a` (~ `z`または`A` ~ `Z`) または数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-602">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`-`|<span data-ttu-id="39639-603">ハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-603">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="39639-604">3個の数字と正確に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-604">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="39639-605">ハイフンの後に3桁の数字を入力し、このパターンの2回の出現を一致させます。</span><span class="sxs-lookup"><span data-stu-id="39639-605">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="39639-606">1つの英字`a` (~ `z`または`A` ~ `Z`) または数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-606">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`$`|<span data-ttu-id="39639-607">行の末尾で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-607">End the match at the end of the line.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-608"><paramref name="input" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-608"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-609">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-609">A time-out occurred.</span></span> <span data-ttu-id="39639-610">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-610">For more information about time-outs, see the Remarks section.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-611">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-611">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (input As String, startat As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsMatch(System::String ^ input, int startat);" />
      <MemberSignature Language="F#" Value="member this.IsMatch : string * int -&gt; bool" Usage="regex.IsMatch (input, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-612">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-612">The string to search for a match.</span></span></param>
        <param name="startat"><span data-ttu-id="39639-613">検索を開始する文字の位置。</span><span class="sxs-lookup"><span data-stu-id="39639-613">The character position at which to start the search.</span></span></param>
        <summary><span data-ttu-id="39639-614">入力文字列内の指定した位置から検索を開始して、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-614">Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in the specified input string, beginning at the specified starting position in the string.</span></span></summary>
        <returns><span data-ttu-id="39639-615">正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-615"><see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-616"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A>メソッドは、通常、文字列を検証したり、文字列が後続の操作のためにその文字列を取得せずに特定のパターンに準拠していることを確認したりするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-616">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="39639-617">1つ以上の文字列が正規表現パターンに一致するかどうかを判断し、後続の操作のために<xref:System.Text.RegularExpressions.Regex.Match%2A>それら<xref:System.Text.RegularExpressions.Regex.Matches%2A>を取得する必要がある場合は、メソッドまたはメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-617">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="39639-618">この例外は、一致操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-618">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-619">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-619">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-620"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-620">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-621">次の例は、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29>メソッドを使用して、文字列が有効な部品番号であるかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="39639-621">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="39639-622">コロンの後に続く部分番号を検索します (:)文字列内の文字。</span><span class="sxs-lookup"><span data-stu-id="39639-622">It searches for a part number that follows a colon (:) character in a string.</span></span> <span data-ttu-id="39639-623">メソッドは、コロン文字の位置を決定するために使用され、その後、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29>メソッドに渡されます。 <xref:System.String.IndexOf%28System.Char%29></span><span class="sxs-lookup"><span data-stu-id="39639-623">The <xref:System.String.IndexOf%28System.Char%29> method is used to determine the position of the colon character, which is then passed to the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="39639-624">正規表現では、パーツ番号は、ハイフンで区切られた3つの文字セットで構成される特定の形式を持つことを前提としています。</span><span class="sxs-lookup"><span data-stu-id="39639-624">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="39639-625">4つの文字を含む最初のセットは、英数字の後に英数字が続く2つの数字で構成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-625">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="39639-626">2つの文字で構成される2番目のセットは数値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-626">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="39639-627">4つの文字で構成される3番目のセットには、3つの数字と英数字が続く必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-627">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch3.vb#3)]  
  
 <span data-ttu-id="39639-628">正規表現パターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="39639-628">The regular expression pattern is:</span></span>  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 <span data-ttu-id="39639-629">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-629">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="39639-630">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-630">Pattern</span></span>|<span data-ttu-id="39639-631">説明</span><span class="sxs-lookup"><span data-stu-id="39639-631">Description</span></span>|  
|-------------|-----------------|  
|`[a-zA-Z0-9]`|<span data-ttu-id="39639-632">1つの英字`a` (~ `z`または`A` ~ `Z`) または数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-632">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="39639-633">2つの数字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-633">Match two numeric characters.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="39639-634">1つの英字`a` (~ `z`または`A` ~ `Z`) または数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-634">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`-`|<span data-ttu-id="39639-635">ハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-635">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="39639-636">3個の数字と正確に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-636">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="39639-637">ハイフンの後に3桁の数字を入力し、このパターンの2回の出現を一致させます。</span><span class="sxs-lookup"><span data-stu-id="39639-637">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="39639-638">1つの英字`a` (~ `z`または`A` ~ `Z`) または数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-638">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`$`|<span data-ttu-id="39639-639">行の末尾で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-639">End the match at the end of the line.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-640"><paramref name="input" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-640"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-641"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-641"><paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-642">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-642">A time-out occurred.</span></span> <span data-ttu-id="39639-643">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-643">For more information about time-outs, see the Remarks section.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-644">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-644">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member IsMatch : string * string -&gt; bool" Usage="System.Text.RegularExpressions.Regex.IsMatch (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-645">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-645">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-646">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-646">The regular expression pattern to match.</span></span></param>
        <summary><span data-ttu-id="39639-647">指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-647">Indicates whether the specified regular expression finds a match in the specified input string.</span></span></summary>
        <returns><span data-ttu-id="39639-648">正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-648"><see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-649"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A>メソッドは、通常、文字列を検証したり、文字列が後続の操作のためにその文字列を取得せずに特定のパターンに準拠していることを確認したりするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-649">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="39639-650">1つ以上の文字列が正規表現パターンに一致するかどうかを判断し、後続の操作のために<xref:System.Text.RegularExpressions.Regex.Match%2A>それら<xref:System.Text.RegularExpressions.Regex.Matches%2A>を取得する必要がある場合は、メソッドまたはメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-650">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="39639-651">静的<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッドは、によって<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29>指定<xref:System.Text.RegularExpressions.Regex>された正規表現パターンを使用`pattern`してオブジェクトを構築し、インスタンスメソッドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-651">The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method.</span></span> <span data-ttu-id="39639-652">この正規表現パターンは、正規表現エンジンによる迅速な取得のためにキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="39639-652">This regular expression pattern is cached for rapid retrieval by the regular expression engine.</span></span>  
  
 <span data-ttu-id="39639-653">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-653">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-654">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-654">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-655">この<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外は、一致操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-655">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="39639-656">アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合は、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-656">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-657">次の例は、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッドを使用して、文字列が有効な部品番号であるかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="39639-657">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="39639-658">正規表現では、パーツ番号は、ハイフンで区切られた3つの文字セットで構成される特定の形式を持つことを前提としています。</span><span class="sxs-lookup"><span data-stu-id="39639-658">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="39639-659">4つの文字を含む最初のセットは、英数字の後に英数字が続く2つの数字で構成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-659">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="39639-660">2つの文字で構成される2番目のセットは数値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-660">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="39639-661">4つの文字で構成される3番目のセットには、3つの数字と英数字が続く必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-661">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch1.vb#1)]  
  
 <span data-ttu-id="39639-662">正規表現パターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="39639-662">The regular expression pattern is:</span></span>  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 <span data-ttu-id="39639-663">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-663">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="39639-664">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-664">Pattern</span></span>|<span data-ttu-id="39639-665">説明</span><span class="sxs-lookup"><span data-stu-id="39639-665">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="39639-666">行の先頭から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-666">Begin the match at the beginning of the line.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="39639-667">1つの英字`a` (~ `z`または`A` ~ `Z`) または数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-667">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="39639-668">2つの数字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-668">Match two numeric characters.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="39639-669">1つの英字`a` (~ `z`または`A` ~ `Z`) または数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-669">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`-`|<span data-ttu-id="39639-670">ハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-670">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="39639-671">3個の数字と正確に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-671">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="39639-672">ハイフンの後に3桁の数字を入力し、このパターンの2回の出現を一致させます。</span><span class="sxs-lookup"><span data-stu-id="39639-672">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[a-zA-Z0-9]`|<span data-ttu-id="39639-673">1つの英字`a` (~ `z`または`A` ~ `Z`) または数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-673">Match a single alphabetic character (`a` through `z` or `A` through `Z`) or numeric character.</span></span>|  
|`$`|<span data-ttu-id="39639-674">行の末尾で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-674">End the match at the end of the line.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-675">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-675">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-676"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-676"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-677">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-677">A time-out occurred.</span></span> <span data-ttu-id="39639-678">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-678">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-679">このメソッドは、メソッドが呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-679">This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called.</span></span> <span data-ttu-id="39639-680">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-680">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-681">パターンマッチを確認するための推奨される<see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />静的メソッドはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-681">The recommended static method for verifying a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-682">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-682">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String, options As RegexOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member IsMatch : string * string * System.Text.RegularExpressions.RegexOptions -&gt; bool" Usage="System.Text.RegularExpressions.Regex.IsMatch (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-683">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-683">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-684">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-684">The regular expression pattern to match.</span></span></param>
        <param name="options"><span data-ttu-id="39639-685">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-685">A bitwise combination of the enumeration values that provide options for matching.</span></span></param>
        <summary><span data-ttu-id="39639-686">指定した一致オプションを使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-686">Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.</span></span></summary>
        <returns><span data-ttu-id="39639-687">正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-687"><see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-688"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A>メソッドは、通常、文字列を検証したり、文字列が後続の操作のためにその文字列を取得せずに特定のパターンに準拠していることを確認したりするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-688">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="39639-689">1つ以上の文字列が正規表現パターンに一致するかどうかを判断し、後続の操作のために<xref:System.Text.RegularExpressions.Regex.Match%2A>それら<xref:System.Text.RegularExpressions.Regex.Matches%2A>を取得する必要がある場合は、メソッドまたはメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-689">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="39639-690">静的<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドは、によっ`pattern`て指定<xref:System.Text.RegularExpressions.Regex>された正規表現パターンを使用してオブジェクトを構築するの`options`と同じです<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> 。また、によって指定された正規表現のオプションとインスタンスを呼び出します。b.</span><span class="sxs-lookup"><span data-stu-id="39639-690">The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method.</span></span> <span data-ttu-id="39639-691">この正規表現パターンは、正規表現エンジンによる迅速な取得のためにキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="39639-691">This regular expression pattern is cached for rapid retrieval by the regular expression engine.</span></span>  
  
 <span data-ttu-id="39639-692">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-692">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-693">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-693">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-694">この<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外は、一致操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-694">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="39639-695">アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合は、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-695">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-696">次の例は、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッドを使用して、文字列が有効な部品番号であるかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="39639-696">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="39639-697">正規表現では、パーツ番号は、ハイフンで区切られた3つの文字セットで構成される特定の形式を持つことを前提としています。</span><span class="sxs-lookup"><span data-stu-id="39639-697">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="39639-698">4つの文字を含む最初のセットは、英数字の後に英数字が続く2つの数字で構成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-698">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="39639-699">2つの文字で構成される2番目のセットは数値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-699">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="39639-700">4つの文字で構成される3番目のセットには、3つの数字と英数字が続く必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-700">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch4.vb#4)]  
  
 <span data-ttu-id="39639-701">正規表現パターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="39639-701">The regular expression pattern is:</span></span>  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 <span data-ttu-id="39639-702">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-702">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="39639-703">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-703">Pattern</span></span>|<span data-ttu-id="39639-704">説明</span><span class="sxs-lookup"><span data-stu-id="39639-704">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="39639-705">文字列の先頭から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-705">Begin the match at the beginning of the string.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="39639-706">任意の1文字の英字`A`から`Z`、または任意の数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-706">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="39639-707">2つの数字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-707">Match two numeric characters.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="39639-708">任意の1文字の英字`A`から`Z`、または任意の数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-708">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`-`|<span data-ttu-id="39639-709">ハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-709">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="39639-710">3個の数字と正確に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-710">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="39639-711">ハイフンの後に3桁の数字を入力し、このパターンの2回の出現を一致させます。「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-711">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern..</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="39639-712">任意の1文字の英字`A`から`Z`、または任意の数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-712">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`$`|<span data-ttu-id="39639-713">入力文字列の末尾で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-713">End the match at the end of the string.</span></span>|  
  
 <span data-ttu-id="39639-714">パラメーターをに`options` <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 設定してメソッドを呼び出すことは、次の正規表現を定義すること <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> と同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-714">Calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method with the `options` parameter set to <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> is equivalent to defining the following regular expression:</span></span>  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 <span data-ttu-id="39639-715">比較については、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッドの例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-715">For comparison, see the example for the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-716">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-716">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-717"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-717"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-718"><paramref name="options" /> は有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-718"><paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> value.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-719">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-719">A time-out occurred.</span></span> <span data-ttu-id="39639-720">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-720">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-721">このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-721">This method times out after an interval that is equal to the default time-out value of the application domain in which it is called.</span></span> <span data-ttu-id="39639-722">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-722">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-723">パターンマッチを確認するための推奨される<see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />静的メソッドはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-723">The recommended static method for verifying a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-724">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-724">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMatch (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMatch(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member IsMatch : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; bool" Usage="System.Text.RegularExpressions.Regex.IsMatch (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-725">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-725">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-726">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-726">The regular expression pattern to match.</span></span></param>
        <param name="options"><span data-ttu-id="39639-727">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-727">A bitwise combination of the enumeration values that provide options for matching.</span></span></param>
        <param name="matchTimeout"><span data-ttu-id="39639-728">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="39639-728">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span></span></param>
        <summary><span data-ttu-id="39639-729">指定した一致オプションとタイムアウト間隔を使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-729">Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="39639-730">正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-730"><see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-731"><xref:System.Text.RegularExpressions.Regex.IsMatch%2A>メソッドは、通常、文字列を検証したり、文字列が後続の操作のためにその文字列を取得せずに特定のパターンに準拠していることを確認したりするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-731">The <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation.</span></span> <span data-ttu-id="39639-732">1つ以上の文字列が正規表現パターンに一致するかどうかを判断し、後続の操作のために<xref:System.Text.RegularExpressions.Regex.Match%2A>それら<xref:System.Text.RegularExpressions.Regex.Matches%2A>を取得する必要がある場合は、メソッドまたはメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-732">If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <xref:System.Text.RegularExpressions.Regex.Match%2A> or <xref:System.Text.RegularExpressions.Regex.Matches%2A> method.</span></span>  
  
 <span data-ttu-id="39639-733">静的<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドは、によっ`pattern`て指定<xref:System.Text.RegularExpressions.Regex>された正規表現パターンを使用してオブジェクトを構築するの`options`と同じです<xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> 。また、によって指定された正規表現のオプションとインスタンスを呼び出します。b.</span><span class="sxs-lookup"><span data-stu-id="39639-733">The static <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the regular expression pattern specified by `pattern` and the regular expression options specified by `options` and calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> instance method.</span></span> <span data-ttu-id="39639-734">この正規表現パターンは、正規表現エンジンによる迅速な取得のためにキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="39639-734">This regular expression pattern is cached for rapid retrieval by the regular expression engine.</span></span>  
  
 <span data-ttu-id="39639-735">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-735">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-736">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-736">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-737">パラメーター `matchTimeout`は、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現が、ほぼ一致する入力を処理するときに応答を停止することを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="39639-737">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="39639-738">詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-738">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-739">この期間内に一致するものが見つからない場合、メソッドは<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="39639-739">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-740">`matchTimeout`メソッドを実行するアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="39639-740">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-741">次の例は、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドを使用して、文字列が有効な部品番号であるかどうかを判断する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="39639-741">The following example illustrates the use of the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to determine whether a string is a valid part number.</span></span> <span data-ttu-id="39639-742">正規表現では、パーツ番号は、ハイフンで区切られた3つの文字セットで構成される特定の形式を持つことを前提としています。</span><span class="sxs-lookup"><span data-stu-id="39639-742">The regular expression assumes that the part number has a specific format that consists of three sets of characters separated by hyphens.</span></span> <span data-ttu-id="39639-743">4つの文字を含む最初のセットは、英数字の後に英数字が続く2つの数字で構成されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-743">The first set, which contains four characters, must consist of an alphanumeric character followed by two numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="39639-744">2つの文字で構成される2番目のセットは数値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-744">The second set, which consists of three characters, must be numeric.</span></span> <span data-ttu-id="39639-745">4つの文字で構成される3番目のセットには、3つの数字と英数字が続く必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-745">The third set, which consists of four characters, must have three numeric characters followed by an alphanumeric character.</span></span> <span data-ttu-id="39639-746">正規表現パターンに一致させるには、入力文字列の検索を最小限にする必要があるため、メソッドはタイムアウト間隔を500ミリ秒に設定します。</span><span class="sxs-lookup"><span data-stu-id="39639-746">Matching the regular expression pattern should involve minimal searching through the input string, so the method sets a time-out interval of 500 milliseconds.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch5.vb#5)]  
  
 <span data-ttu-id="39639-747">正規表現パターンは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="39639-747">The regular expression pattern is:</span></span>  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 <span data-ttu-id="39639-748">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-748">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="39639-749">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-749">Pattern</span></span>|<span data-ttu-id="39639-750">説明</span><span class="sxs-lookup"><span data-stu-id="39639-750">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="39639-751">文字列の先頭から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-751">Begin the match at the beginning of the string.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="39639-752">任意の1文字の英字`A`から`Z`、または任意の数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-752">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`\d{2}`|<span data-ttu-id="39639-753">2つの数字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-753">Match two numeric characters.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="39639-754">任意の1文字の英字`A`から`Z`、または任意の数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-754">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`-`|<span data-ttu-id="39639-755">ハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-755">Match a hyphen.</span></span>|  
|`\d{3}`|<span data-ttu-id="39639-756">3個の数字と正確に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-756">Match exactly three numeric characters.</span></span>|  
|`(-\d{3}){2}`|<span data-ttu-id="39639-757">ハイフンの後に3桁の数字を入力し、このパターンの2回の出現を一致させます。</span><span class="sxs-lookup"><span data-stu-id="39639-757">Find a hyphen followed by three numeric characters, and match two occurrences of this pattern.</span></span>|  
|`[A-Z0-9]`|<span data-ttu-id="39639-758">任意の1文字の英字`A`から`Z`、または任意の数字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-758">Match any single alphabetic character from `A` through `Z`, or any numeric character.</span></span>|  
|`$`|<span data-ttu-id="39639-759">入力文字列の末尾で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-759">End the match at the end of the string.</span></span>|  
  
 <span data-ttu-id="39639-760">パラメーターをに`options` <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 設定してメソッドを呼び出すことは、次の正規表現を定義すること <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> と同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-760">Calling the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method with the `options` parameter set to <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> is equivalent to defining the following regular expression:</span></span>  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 <span data-ttu-id="39639-761">比較については、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29>メソッドの例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-761">For comparison, see the example for the <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-762">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-762">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-763"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-763"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-764"><paramref name="options" /> は有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-764"><paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> value.</span></span>  
  
<span data-ttu-id="39639-765">または</span><span class="sxs-lookup"><span data-stu-id="39639-765">-or-</span></span> 
 <span data-ttu-id="39639-766"><paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-766"><paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-767">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-767">A time-out occurred.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-768"><paramref name="matchTimeout" />パラメーターには、2秒などの適切な値を設定することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="39639-768">We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds.</span></span> <span data-ttu-id="39639-769">を指定<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。</span><span class="sxs-lookup"><span data-stu-id="39639-769">If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance.</span></span> <span data-ttu-id="39639-770">ただし、次の条件下でのみタイムアウトを無効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-770">However, you should disable time-outs only under the following conditions:</span></span> 
<span data-ttu-id="39639-771">-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。</span><span class="sxs-lookup"><span data-stu-id="39639-771">-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text.</span></span> <span data-ttu-id="39639-772">これにより、ユーザーが動的に入力したテキストは除外されます。</span><span class="sxs-lookup"><span data-stu-id="39639-772">This excludes text that has been dynamically input by users.</span></span>  
  
<span data-ttu-id="39639-773">-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。</span><span class="sxs-lookup"><span data-stu-id="39639-773">-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.</span></span>  
  
<span data-ttu-id="39639-774">-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</span><span class="sxs-lookup"><span data-stu-id="39639-774">-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-775">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-775">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="39639-776">正規表現パターンと一致する部分文字列の入力文字列を検索し、最初に一致したものを 1 つの <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトとして返します。</span><span class="sxs-lookup"><span data-stu-id="39639-776">Searches an input string for a substring that matches a regular expression pattern and returns the first occurrence as a single <see cref="T:System.Text.RegularExpressions.Match" /> object.</span></span></summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-777">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-777">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.Match : string -&gt; System.Text.RegularExpressions.Match" Usage="regex.Match input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-778">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-778">The string to search for a match.</span></span></param>
        <summary><span data-ttu-id="39639-779">指定した入力文字列内で、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現と最初に一致する対象を 1 つ検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-779">Searches the specified input string for the first occurrence of the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="39639-780">一致に関する情報を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39639-780">An object that contains information about the match.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-781">メソッド<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>は、入力文字列の正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-781">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="39639-782">正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-782">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-783">返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティの値をチェックすることにより、正規表現パターンが入力文字列内で見つかったかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="39639-783">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="39639-784">一致が見つかった場合、返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A> `input`プロパティには、正規表現パターンに一致するの部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-784">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-785">一致するものが見つからない場合、その<xref:System.String.Empty?displayProperty=nameWithType>値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-785">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="39639-786">このメソッドは、正規表現パターン`input`に一致するの最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-786">This method returns the first substring in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-787">返され<xref:System.Text.RegularExpressions.Match>たオブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="39639-787">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="39639-788">また、メソッドを<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType>呼び出すことによって、1回のメソッド呼び出しですべての一致を取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="39639-788">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="39639-789">この例外は、一致操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-789">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-790">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-790">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-791"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-791">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-792">次の例では、文字列内の正規表現パターン一致を検索し、一致したグループ、キャプチャ、およびキャプチャ位置を一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="39639-792">The following example finds regular expression pattern matches in a string, then lists the matched groups, captures, and capture positions.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 <span data-ttu-id="39639-793">正規表現パターン`(\w+)\s+(car)`は、"car" という単語と、その前にある単語を照合します。</span><span class="sxs-lookup"><span data-stu-id="39639-793">The regular expression pattern `(\w+)\s+(car)` matches occurrences of the word "car" along with the word that precedes it.</span></span> <span data-ttu-id="39639-794">次の表に示すように解釈されます。</span><span class="sxs-lookup"><span data-stu-id="39639-794">It is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-795">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-795">Pattern</span></span>|<span data-ttu-id="39639-796">説明</span><span class="sxs-lookup"><span data-stu-id="39639-796">Description</span></span>|  
|-------------|-----------------|  
|`(\w+)`|<span data-ttu-id="39639-797">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-797">Match one or more word characters.</span></span> <span data-ttu-id="39639-798">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="39639-798">This is the first capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="39639-799">1個以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-799">Match one or more white-space characters.</span></span>|  
|<span data-ttu-id="39639-800">社用</span><span class="sxs-lookup"><span data-stu-id="39639-800">(car)</span></span>|<span data-ttu-id="39639-801">リテラル文字列 "car" と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-801">Match the literal string "car".</span></span> <span data-ttu-id="39639-802">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="39639-802">This is the second capturing group.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-803"><paramref name="input" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-803"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-804">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-804">A time-out occurred.</span></span> <span data-ttu-id="39639-805">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-805">For more information about time-outs, see the Remarks section.</span></span></exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-806">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-806">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String, startat As Integer) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input, int startat);" />
      <MemberSignature Language="F#" Value="member this.Match : string * int -&gt; System.Text.RegularExpressions.Match" Usage="regex.Match (input, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-807">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-807">The string to search for a match.</span></span></param>
        <param name="startat"><span data-ttu-id="39639-808">検索を開始する 0 から始まる文字位置。</span><span class="sxs-lookup"><span data-stu-id="39639-808">The zero-based character position at which to start the search.</span></span></param>
        <summary><span data-ttu-id="39639-809">入力文字列内の指定した開始位置から開始して、その入力文字列内で正規表現に最初に一致する箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-809">Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.</span></span></summary>
        <returns><span data-ttu-id="39639-810">一致に関する情報を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39639-810">An object that contains information about the match.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-811">メソッド<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29>は、入力文字列内の文字位置の`startat`先頭または末尾にある正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-811">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern, starting at or after the `startat` character position, in an input string.</span></span> <span data-ttu-id="39639-812">正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-812">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-813"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29>メソッドが検索する正規表現パターンは、 <xref:System.Text.RegularExpressions.Regex>クラスコンストラクターのいずれかを呼び出すことによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="39639-813">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="39639-814">正規表現パターンを形成できる要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-814">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-815">必要に応じて、 `startat`パラメーターを使用して、文字列内の開始位置を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="39639-815">You can optionally specify a starting position in the string by using the `startat` parameter.</span></span> <span data-ttu-id="39639-816">正規表現エンジンが左から右 (既定値) から解析を行う場合、一致とスキャンはで`startat`指定された文字を開始位置として右方向に移動します。</span><span class="sxs-lookup"><span data-stu-id="39639-816">When the regular expression engine parses from left to right (the default), the match and the scan move rightward, starting at the character specified in `startat`.</span></span> <span data-ttu-id="39639-817">正規表現エンジンが右から左 ( <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType>オプションを使用して正規表現パターンを作成したとき) に解析を行うと、一致とスキャンが反対方向に移動し、先頭が`startat` -1 の文字で始まります。</span><span class="sxs-lookup"><span data-stu-id="39639-817">When the regular expression engine parses from right to left (when the regular expression pattern is constructed with the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType> option), the match and scan move in the opposite direction and begin with the character at `startat` -1.</span></span> <span data-ttu-id="39639-818">開始位置を指定しない場合、検索は既定`startat`の位置から開始されます。</span><span class="sxs-lookup"><span data-stu-id="39639-818">If you do not specify a starting position, the search begins at the default `startat` position.</span></span> <span data-ttu-id="39639-819">正規表現が左から右に向かって検索する場合`startat` 、既定の位置はの`input`左端になります。右から左に検索した`startat`場合、既定の位置はの`input`右端になります。</span><span class="sxs-lookup"><span data-stu-id="39639-819">If the regular expression searches from left to right, the default `startat` position is at the left end of `input`; if it searches from right to left, the default `startat` position is at the right end of `input`.</span></span>  
  
 <span data-ttu-id="39639-820">一致を制限して、文字列内の特定の文字位置から開始するようにし、正規表現エンジンが一致文字列の残りの部分をスキャンしないようにするには、 `\G` (左から右へ) を使用して正規表現を固定します。パターン、または右から左に記述するパターンの右側にあります)。</span><span class="sxs-lookup"><span data-stu-id="39639-820">If you want to restrict a match so that it begins at a particular character position in the string and the regular expression engine does not scan the remainder of the string for a match, anchor the regular expression with a `\G` (at the left for a left-to-right pattern, or at the right for a right-to-left pattern).</span></span> <span data-ttu-id="39639-821">これにより一致が制限されるため、 `startat`を正確に開始する必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-821">This restricts the match so it must start exactly at `startat`.</span></span>  
  
 <span data-ttu-id="39639-822">返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティの値をチェックすることにより、正規表現パターンが入力文字列内で見つかったかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="39639-822">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="39639-823">一致が見つかった場合、返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A> `input`プロパティには、正規表現パターンに一致するの部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-823">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-824">一致するものが見つからない場合、その<xref:System.String.Empty?displayProperty=nameWithType>値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-824">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="39639-825">このメソッドは、正規表現パターンに一致するの`startat` `input`文字位置の最初または後に見つかった最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-825">This method returns the first substring found at or after the `startat` character position in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-826">返され<xref:System.Text.RegularExpressions.Match>たオブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="39639-826">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="39639-827">また、メソッドを<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>呼び出すことによって、1回のメソッド呼び出しですべての一致を取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="39639-827">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="39639-828">この例外は、一致操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-828">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-829">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-829">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-830"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-830">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-831"><paramref name="input" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-831"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-832"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-832"><paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-833">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-833">A time-out occurred.</span></span> <span data-ttu-id="39639-834">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-834">For more information about time-outs, see the Remarks section.</span></span></exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-835">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-835">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member Match : string * string -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Regex.Match (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-836">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-836">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-837">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-837">The regular expression pattern to match.</span></span></param>
        <summary><span data-ttu-id="39639-838">指定した入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-838">Searches the specified input string for the first occurrence of the specified regular expression.</span></span></summary>
        <returns><span data-ttu-id="39639-839">一致に関する情報を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39639-839">An object that contains information about the match.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-840">メソッド<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>は、入力文字列の正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-840">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="39639-841">正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-841">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-842">静的<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>メソッドは、指定された<xref:System.Text.RegularExpressions.Regex>正規表現パターンを使用してオブジェクトを構築し<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> 、インスタンスメソッドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-842">The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.</span></span> <span data-ttu-id="39639-843">この場合、正規表現エンジンは正規表現パターンをキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="39639-843">In this case, the regular expression engine caches the regular expression pattern.</span></span>  
  
 <span data-ttu-id="39639-844">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-844">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-845">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-845">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-846">返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティの値をチェックすることにより、正規表現パターンが入力文字列内で見つかったかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="39639-846">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="39639-847">一致が見つかった場合、返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A> `input`プロパティには、正規表現パターンに一致するの部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-847">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-848">一致するものが見つからない場合、その<xref:System.String.Empty?displayProperty=nameWithType>値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-848">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="39639-849">このメソッドは、正規表現パターン`input`に一致するの最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-849">This method returns the first substring in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-850">返され<xref:System.Text.RegularExpressions.Match>たオブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="39639-850">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="39639-851">また、メソッドを<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>呼び出すことによって、1回のメソッド呼び出しですべての一致を取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="39639-851">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="39639-852">この<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外は、一致操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-852">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="39639-853">アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合は、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-853">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-854">次の例では<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> 、メソッドを呼び出して、少なくとも1つ`z`の文字を含む最初の<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>単語を検索し、メソッドを呼び出して、その他の一致を検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-854">The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method to find the first word that contains at least one `z` character, and then calls the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method to find any additional matches.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Match#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Match#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match1.vb#1)]  
  
 <span data-ttu-id="39639-855">この正規表現パターン `\b\w*z+\w*\b` の解釈を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="39639-855">The regular expression pattern `\b\w*z+\w*\b` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-856">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-856">Pattern</span></span>|<span data-ttu-id="39639-857">説明</span><span class="sxs-lookup"><span data-stu-id="39639-857">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="39639-858">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-858">Begin the match at a word boundary.</span></span>|  
|`\w*`|<span data-ttu-id="39639-859">0個以上の単語文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-859">Match zero, one, or more word characters.</span></span>|  
|`z+`|<span data-ttu-id="39639-860">`z`文字の1回以上の出現と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-860">Match one or more occurrences of the `z` character.</span></span>|  
|`\w*`|<span data-ttu-id="39639-861">0個以上の単語文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-861">Match zero, one, or more word characters.</span></span>|  
|`\b`|<span data-ttu-id="39639-862">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-862">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-863">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-863">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-864"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-864"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-865">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-865">A time-out occurred.</span></span> <span data-ttu-id="39639-866">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-866">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-867">このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-867">This method times out after an interval that is equal to the default time-out value of the application domain in which it is called.</span></span> <span data-ttu-id="39639-868">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-868">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-869">パターンマッチを取得するために推奨される<see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />静的メソッドはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-869">The recommended static method for retrieving a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />, which lets you set the time-out interval.</span></span></para></block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-870">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-870">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int beginning, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 beginning, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (input As String, beginning As Integer, length As Integer) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ Match(System::String ^ input, int beginning, int length);" />
      <MemberSignature Language="F#" Value="member this.Match : string * int * int -&gt; System.Text.RegularExpressions.Match" Usage="regex.Match (input, beginning, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="beginning" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-871">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-871">The string to search for a match.</span></span></param>
        <param name="beginning"><span data-ttu-id="39639-872">検索対象の左端の位置を定義する、入力文字列内の 0 から始まる文字位置。</span><span class="sxs-lookup"><span data-stu-id="39639-872">The zero-based character position in the input string that defines the leftmost position to be searched.</span></span></param>
        <param name="length"><span data-ttu-id="39639-873">検索に含める部分文字列の文字数。</span><span class="sxs-lookup"><span data-stu-id="39639-873">The number of characters in the substring to include in the search.</span></span></param>
        <summary><span data-ttu-id="39639-874">入力文字列内の指定した開始位置から開始し、指定した文字数だけを検索対象として、その入力文字列内で正規表現に最初に一致する箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-874">Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="39639-875">一致に関する情報を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39639-875">An object that contains information about the match.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-876">メソッド<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29>は、入力文字列の一部の正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-876">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern in a portion of an input string.</span></span> <span data-ttu-id="39639-877">正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-877">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-878"><xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29>メソッドが検索する正規表現パターンは、 <xref:System.Text.RegularExpressions.Regex>クラスコンストラクターのいずれかを呼び出すことによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="39639-878">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="39639-879">正規表現パターンを形成できる要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-879">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-880">メソッド<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29>は、正規表現パターン`input`のパラメーター `beginning`と`length`パラメーターで定義されたの部分を検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-880">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches the portion of `input` defined by the `beginning` and `length` parameters for the regular expression pattern.</span></span> <span data-ttu-id="39639-881">`beginning`検索に含める左端の文字のインデックスを常に定義し、検索`length`する最大文字数を定義します。</span><span class="sxs-lookup"><span data-stu-id="39639-881">`beginning` always defines the index of the leftmost character to include in the search, and `length` defines the maximum number of characters to search.</span></span> <span data-ttu-id="39639-882">これらの組み合わせによって、検索の範囲が定義されます。</span><span class="sxs-lookup"><span data-stu-id="39639-882">Together, they define the range of the search.</span></span> <span data-ttu-id="39639-883">検索が左から右 (既定値) に進む場合、正規表現エンジンは、 `beginning`インデックスの位置にある文字からインデックス`beginning`  +  `length` -1 の文字まで検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-883">If the search proceeds from left to right (the default), the regular expression engine searches from the character at index `beginning` to the character at index `beginning` + `length` - 1.</span></span> <span data-ttu-id="39639-884"><xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType>オプションを使用して正規表現エンジンがインスタンス化され、検索が右から左に進むようにした場合、正規表現エンジンは`beginning`インデックス +  `length` -1 の文字からインデックス`beginning`位置にある文字。</span><span class="sxs-lookup"><span data-stu-id="39639-884">If the regular expression engine was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=nameWithType> option so that the search proceeds from right to left, the regular expression engine searches from the character at index `beginning` + `length` - 1 to the character at index `beginning`.</span></span> <span data-ttu-id="39639-885">このメソッドは、この範囲内で最初に見つかった一致を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-885">This method returns the first match that it finds within this range.</span></span> <span data-ttu-id="39639-886">返され<xref:System.Text.RegularExpressions.Match>たオブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="39639-886">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="39639-887">返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティの値をチェックすることにより、正規表現パターンが入力文字列内で見つかったかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="39639-887">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="39639-888">一致が見つかった場合、返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A> `input`プロパティには、正規表現パターンに一致するの部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-888">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-889">一致するものが見つからない場合、その<xref:System.String.Empty?displayProperty=nameWithType>値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-889">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="39639-890">この例外は、一致操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-890">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-891">コンストラクターを呼び出すときにタイムアウト値を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-891">If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-892"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-892">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-893"><paramref name="input" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-893"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-894"><paramref name="beginning" /> が、0 未満か、 <paramref name="input" />の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-894"><paramref name="beginning" /> is less than zero or greater than the length of <paramref name="input" />.</span></span>  
  
<span data-ttu-id="39639-895">または</span><span class="sxs-lookup"><span data-stu-id="39639-895">-or-</span></span> 
 <span data-ttu-id="39639-896"><paramref name="length" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-896"><paramref name="length" /> is less than zero or greater than the length of <paramref name="input" />.</span></span>  
  
<span data-ttu-id="39639-897">または</span><span class="sxs-lookup"><span data-stu-id="39639-897">-or-</span></span> 
 <span data-ttu-id="39639-898"><paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="-1" /> は、 <paramref name="input" />の範囲外の位置を識別します。</span><span class="sxs-lookup"><span data-stu-id="39639-898"><paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="-1" /> identifies a position that is outside the range of <paramref name="input" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-899">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-899">A time-out occurred.</span></span> <span data-ttu-id="39639-900">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-900">For more information about time-outs, see the Remarks section.</span></span></exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-901">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-901">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String, options As RegexOptions) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Match : string * string * System.Text.RegularExpressions.RegexOptions -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Regex.Match (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-902">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-902">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-903">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-903">The regular expression pattern to match.</span></span></param>
        <param name="options"><span data-ttu-id="39639-904">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-904">A bitwise combination of the enumeration values that provide options for matching.</span></span></param>
        <summary><span data-ttu-id="39639-905">指定した一致オプションを使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-905">Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.</span></span></summary>
        <returns><span data-ttu-id="39639-906">一致に関する情報を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39639-906">An object that contains information about the match.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-907">メソッド<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>は、入力文字列の正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-907">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="39639-908">正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-908">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-909">静的<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドは、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29>コンストラクターを使用し<xref:System.Text.RegularExpressions.Regex>てオブジェクトを構築し、インスタンス<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-909">The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.</span></span>  
  
 <span data-ttu-id="39639-910">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-910">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-911">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-911">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-912">返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティの値をチェックすることにより、正規表現パターンが入力文字列内で見つかったかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="39639-912">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="39639-913">一致が見つかった場合、返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A> `input`プロパティには、正規表現パターンに一致するの部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-913">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-914">一致するものが見つからない場合、その<xref:System.String.Empty?displayProperty=nameWithType>値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-914">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="39639-915">このメソッドは、正規表現パターンに`input`一致するで見つかった最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-915">This method returns the first substring found in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-916">返され<xref:System.Text.RegularExpressions.Match>たオブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A>メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="39639-916">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method.</span></span> <span data-ttu-id="39639-917">また、メソッドを<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>呼び出すことによって、1回のメソッド呼び出しですべての一致を取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="39639-917">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="39639-918">この<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外は、一致操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-918">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="39639-919">アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合は、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-919">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-920">次の例では、文字 "a" で始まる単語と一致する正規表現を定義しています。</span><span class="sxs-lookup"><span data-stu-id="39639-920">The following example defines a regular expression that matches words beginning with the letter "a".</span></span> <span data-ttu-id="39639-921"><xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>オプションを使用して、正規表現が大文字の "a" と小文字の "a" で始まる単語を検索するようにします。</span><span class="sxs-lookup"><span data-stu-id="39639-921">It uses the <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> option to ensure that the regular expression locates words beginning with both an uppercase "a" and a lowercase "a".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Match#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Match#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match2.vb#2)]  
  
 <span data-ttu-id="39639-922">この正規表現パターン `\ba\w*\b` の解釈を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="39639-922">The regular expression pattern `\ba\w*\b` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-923">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-923">Pattern</span></span>|<span data-ttu-id="39639-924">説明</span><span class="sxs-lookup"><span data-stu-id="39639-924">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="39639-925">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-925">Begin the match at a word boundary.</span></span>|  
|`a`|<span data-ttu-id="39639-926">文字 "a" と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-926">Match the character "a".</span></span>|  
|`\w*`|<span data-ttu-id="39639-927">0個以上の単語文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-927">Match zero, one, or more word characters.</span></span>|  
|`\b`|<span data-ttu-id="39639-928">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-928">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-929">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-929">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-930"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-930"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-931"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-931"><paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-932">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-932">A time-out occurred.</span></span> <span data-ttu-id="39639-933">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-933">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-934">このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-934">This method times out after an interval that is equal to the default time-out value of the application domain in which it is called.</span></span> <span data-ttu-id="39639-935">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-935">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-936">パターンマッチを取得するために推奨される<see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />静的メソッドはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-936">The recommended static method for retrieving a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />, which lets you set the time-out interval.</span></span></para></block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-937">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-937">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Match(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Match : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Regex.Match (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-938">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-938">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-939">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-939">The regular expression pattern to match.</span></span></param>
        <param name="options"><span data-ttu-id="39639-940">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-940">A bitwise combination of the enumeration values that provide options for matching.</span></span></param>
        <param name="matchTimeout"><span data-ttu-id="39639-941">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="39639-941">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span></span></param>
        <summary><span data-ttu-id="39639-942">指定した一致オプションとタイムアウト間隔を使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-942">Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="39639-943">一致に関する情報を格納しているオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39639-943">An object that contains information about the match.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-944">メソッド<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>は、入力文字列の正規表現パターンに一致する最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-944">The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method returns the first substring that matches a regular expression pattern in an input string.</span></span> <span data-ttu-id="39639-945">正規表現パターンの作成に使用される言語要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-945">For information about the language elements used to build a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-946">静的<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドは、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>コンストラクターを使用し<xref:System.Text.RegularExpressions.Regex>てオブジェクトを構築し、インスタンス<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-946">The static <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor and calling the instance <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method.</span></span>  
  
 <span data-ttu-id="39639-947">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-947">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-948">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-948">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-949">返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティの値をチェックすることにより、正規表現パターンが入力文字列内で見つかったかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="39639-949">You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property.</span></span> <span data-ttu-id="39639-950">一致が見つかった場合、返さ<xref:System.Text.RegularExpressions.Match>れたオブジェクトの<xref:System.Text.RegularExpressions.Capture.Value%2A> `input`プロパティには、正規表現パターンに一致するの部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-950">If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-951">一致するものが見つからない場合、その<xref:System.String.Empty?displayProperty=nameWithType>値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-951">If no match is found, its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="39639-952">このメソッドは、正規表現パターンに`input`一致するで見つかった最初の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-952">This method returns the first substring found in `input` that matches the regular expression pattern.</span></span> <span data-ttu-id="39639-953">返され<xref:System.Text.RegularExpressions.Match>たオブジェクトの<xref:System.Text.RegularExpressions.Match.NextMatch%2A>メソッドを繰り返し呼び出すことで、後続の一致文字列を取得できます。</span><span class="sxs-lookup"><span data-stu-id="39639-953">You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method.</span></span> <span data-ttu-id="39639-954">また、メソッドを<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>呼び出すことによって、1回のメソッド呼び出しですべての一致を取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="39639-954">You can also retrieve all matches in a single method call by calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="39639-955">パラメーター `matchTimeout`は、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現が、ほぼ一致する入力を処理するときに応答を停止することを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="39639-955">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="39639-956">詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-956">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-957">この期間内に一致するものが見つからない場合、メソッドは<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="39639-957">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-958">`matchTimeout`メソッドを実行するアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="39639-958">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-959">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-959">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-960"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-960"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-961"><paramref name="options" /> は、 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-961"><paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span></span>  
  
<span data-ttu-id="39639-962">または</span><span class="sxs-lookup"><span data-stu-id="39639-962">-or-</span></span> 
 <span data-ttu-id="39639-963"><paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-963"><paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-964">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-964">A time-out occurred.</span></span> <span data-ttu-id="39639-965">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-965">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-966"><paramref name="matchTimeout" />パラメーターには、2秒などの適切な値を設定することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="39639-966">We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds.</span></span> <span data-ttu-id="39639-967">を指定<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。</span><span class="sxs-lookup"><span data-stu-id="39639-967">If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance.</span></span> <span data-ttu-id="39639-968">ただし、次の条件下でのみタイムアウトを無効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-968">However, you should disable time-outs only under the following conditions:</span></span> 
<span data-ttu-id="39639-969">-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。</span><span class="sxs-lookup"><span data-stu-id="39639-969">-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text.</span></span> <span data-ttu-id="39639-970">これにより、ユーザーが動的に入力したテキストは除外されます。</span><span class="sxs-lookup"><span data-stu-id="39639-970">This excludes text that has been dynamically input by users.</span></span>  
  
<span data-ttu-id="39639-971">-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。</span><span class="sxs-lookup"><span data-stu-id="39639-971">-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.</span></span>  
  
<span data-ttu-id="39639-972">-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</span><span class="sxs-lookup"><span data-stu-id="39639-972">-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-973">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-973">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Matches">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="39639-974">入力文字列内で正規表現と一致する対象をすべて検索し、見つかった対象をすべて返します。</span><span class="sxs-lookup"><span data-stu-id="39639-974">Searches an input string for all occurrences of a regular expression and returns all the matches.</span></span></summary>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-975"><see cref="Overload:System.Text.RegularExpressions.Regex.Matches" />メソッドを呼び出すことによって一致試行が繰り返されると、正規表現エンジンは空の一致文字列を特別な処理に渡します。</span><span class="sxs-lookup"><span data-stu-id="39639-975">When a match attempt is repeated by calling the <see cref="Overload:System.Text.RegularExpressions.Regex.Matches" /> method, the regular expression engine gives empty matches special treatment.</span></span> <span data-ttu-id="39639-976">通常、正規表現エンジンは、前の一致箇所と同じ位置にある次の一致の検索を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-976">Usually, the regular expression engine begins the search for the next match exactly where the previous match left off.</span></span> <span data-ttu-id="39639-977">ただし、空の一致の後、正規表現エンジンは次の一致を試行する前に1文字進めます。</span><span class="sxs-lookup"><span data-stu-id="39639-977">However, after an empty match, the regular expression engine advances by one character before trying the next match.</span></span> <span data-ttu-id="39639-978">この動作により、正規表現エンジンが文字列を処理することが保証されます。</span><span class="sxs-lookup"><span data-stu-id="39639-978">This behavior guarantees that the regular expression engine will progress through the string.</span></span> <span data-ttu-id="39639-979">それ以外の場合は、空の一致によって前方移動が行われないため、次の一致は前の一致とまったく同じ場所で開始され、同じ空の文字列と繰り返し一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-979">Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.</span></span>  
  
<span data-ttu-id="39639-980">次の例では、正規表現パターン<c>a \*</c>は、文字列 "abaabb" 内の文字 "a" の0回以上の出現を検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-980">In the following example, the regular expression pattern <c>a\*</c> searches for zero or more occurrences of the letter "a" in the string "abaabb".</span></span> <span data-ttu-id="39639-981">例の出力が示すように、結果<see cref="T:System.Text.RegularExpressions.MatchCollection" />のオブジェクトには6つ<see cref="T:System.Text.RegularExpressions.Match" />のオブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-981">As the output from the example shows, the resulting <see cref="T:System.Text.RegularExpressions.MatchCollection" /> object contains six <see cref="T:System.Text.RegularExpressions.Match" /> objects.</span></span> <span data-ttu-id="39639-982">最初の一致試行で最初の "a" が検索されます。</span><span class="sxs-lookup"><span data-stu-id="39639-982">The first match attempt finds the first "a".</span></span> <span data-ttu-id="39639-983">2番目の一致は、最初の一致が終了した場所から最初の2つ前まで、"a" の0回の出現を検出し、空の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-983">The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string.</span></span> <span data-ttu-id="39639-984">3番目の一致は、2番目の一致が終了した場所を正確に開始しません。これは、2番目の一致が空の文字列を返したためです。</span><span class="sxs-lookup"><span data-stu-id="39639-984">The third match does not begin exactly where the second match ended, because the second match returned an empty string.</span></span> <span data-ttu-id="39639-985">代わりに、最初の "b" の後に1文字後に開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-985">Instead, it begins one character later, after the first "b".</span></span> <span data-ttu-id="39639-986">3番目の一致では、"a" の2回の出現が検出され、"aa" が返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-986">The third match finds two occurrences of "a" and returns "aa".</span></span> <span data-ttu-id="39639-987">4回目の一致試行は、3番目の一致が終了し、2番目の "b" の前に、空の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-987">The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string.</span></span> <span data-ttu-id="39639-988">5回目の一致では、1つの文字を再び進め、3番目の "b" の前に開始し、空の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-988">The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string.</span></span> <span data-ttu-id="39639-989">6番目の一致は、最後の "b" の後に始まり、空の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-989">The sixth match begins after the last "b" and returns an empty string again.</span></span>  
  
<span data-ttu-id="39639-990">[! code-csharp[system.text.regularexpressions.regexoptions # 9] と](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/emptymatches1.cs#9)入力します。[! コード-vb[system.text.regularexpressions.regexoptions # 9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/emptymatches1.vb#9)] を検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-990">[!code-csharp[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/emptymatches1.cs#9)] [!code-vb[System.Text.RegularExpressions.Regex.Matches#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/emptymatches1.vb#9)]</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-991">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-991">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Matches (input As String) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.Matches : string -&gt; System.Text.RegularExpressions.MatchCollection" Usage="regex.Matches input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-992">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-992">The string to search for a match.</span></span></param>
        <summary><span data-ttu-id="39639-993">指定した入力文字列内で、正規表現と一致する対象をすべて検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-993">Searches the specified input string for all occurrences of a regular expression.</span></span></summary>
        <returns><span data-ttu-id="39639-994">検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="39639-994">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span></span> <span data-ttu-id="39639-995">一致が見つからない場合は、空のコレクション オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-995">If no matches are found, the method returns an empty collection object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-996">メソッドは<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>メソッドに似ていますが、単一の一致ではなく、入力文字列内で見つかったすべての一致に関する情報を返す点が異なります。 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29></span><span class="sxs-lookup"><span data-stu-id="39639-996">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="39639-997">これは、次のコードと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-997">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#5)]  
  
 <span data-ttu-id="39639-998">コレクションには、一致するもののみが含まれ、最初の一致しない位置で終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-998">The collection includes only matches and terminates at the first non-match.</span></span>  
  
 <span data-ttu-id="39639-999"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29>メソッドが検索する正規表現パターンは、 <xref:System.Text.RegularExpressions.Regex>クラスコンストラクターのいずれかを呼び出すことによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="39639-999">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="39639-1000">正規表現パターンを形成できる要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1000">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-1001">メソッド<xref:System.Text.RegularExpressions.Regex.Matches%2A>は、レイジー評価を使用して<xref:System.Text.RegularExpressions.MatchCollection> 、返されたオブジェクトを設定します。</span><span class="sxs-lookup"><span data-stu-id="39639-1001">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="39639-1002">やなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> 、このコレクションのメンバーに<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>アクセスすると、コレクションにすぐに値が設定されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1002">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="39639-1003">レイジー評価を利用するには、や`foreach` C# `For Each`などのコンストラクトを使用してコレクションを反復処理する必要があります。`Next`</span><span class="sxs-lookup"><span data-stu-id="39639-1003">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="39639-1004">Visual Basic では、上記のようになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1004">in Visual Basic.</span></span>  
  
 <span data-ttu-id="39639-1005">遅延評価のため、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29>メソッドを呼び出すと例外は<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>スローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1005">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-1006">ただし、この例外は、 <xref:System.Text.RegularExpressions.MatchCollection> <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A>プロパティがではなく<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> 、一致操作がタイムアウト間隔を超えている場合に、このメソッドによって返されるオブジェクトに対して操作が実行されるとスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1006">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> and a matching operation exceeds the time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1007">次の例では<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> 、メソッドを使用して、"es" で終わる文内の単語を識別します。</span><span class="sxs-lookup"><span data-stu-id="39639-1007">The following example uses the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> method to identify any words in a sentence that end in "es".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches1.vb#1)]  
  
 <span data-ttu-id="39639-1008">正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="39639-1008">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-1009">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1009">Pattern</span></span>|<span data-ttu-id="39639-1010">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1010">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="39639-1011">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-1011">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="39639-1012">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1012">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="39639-1013">リテラル文字列 "es" と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1013">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="39639-1014">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-1014">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1015"><paramref name="input" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1015"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1016">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1016">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Matches (input As String, startat As Integer) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, int startat);" />
      <MemberSignature Language="F#" Value="member this.Matches : string * int -&gt; System.Text.RegularExpressions.MatchCollection" Usage="regex.Matches (input, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1017">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1017">The string to search for a match.</span></span></param>
        <param name="startat"><span data-ttu-id="39639-1018">入力文字列内の検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="39639-1018">The character position in the input string at which to start the search.</span></span></param>
        <summary><span data-ttu-id="39639-1019">入力文字列内の指定した開始位置から検索を開始した場合に、その指定入力文字列内で正規表現と一致する対象をすべて検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-1019">Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.</span></span></summary>
        <returns><span data-ttu-id="39639-1020">検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="39639-1020">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span></span> <span data-ttu-id="39639-1021">一致が見つからない場合は、空のコレクション オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1021">If no matches are found, the method returns an empty collection object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1022">メソッドは<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29>メソッドに似ていますが、単一の一致ではなく、入力文字列内で見つかったすべての一致に関する情報を返す点が異なります。 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29></span><span class="sxs-lookup"><span data-stu-id="39639-1022">The  <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method is similar to the  <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="39639-1023">これは、次のコードと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1023">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#6)]  
  
 <span data-ttu-id="39639-1024"><xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29>メソッドが検索する正規表現パターンは、 <xref:System.Text.RegularExpressions.Regex>クラスコンストラクターのいずれかを呼び出すことによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1024">The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors.</span></span> <span data-ttu-id="39639-1025">正規表現パターンを形成できる要素の詳細については、「[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1025">For more information about the elements that can form a regular expression pattern, see [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-1026">メソッド<xref:System.Text.RegularExpressions.Regex.Matches%2A>は、レイジー評価を使用して<xref:System.Text.RegularExpressions.MatchCollection> 、返されたオブジェクトを設定します。</span><span class="sxs-lookup"><span data-stu-id="39639-1026">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="39639-1027">やなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> 、このコレクションのメンバーに<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>アクセスすると、コレクションにすぐに値が設定されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1027">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="39639-1028">レイジー評価を利用するには、や`foreach` C# `For Each`などのコンストラクトを使用してコレクションを反復処理する必要があります。`Next`</span><span class="sxs-lookup"><span data-stu-id="39639-1028">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="39639-1029">Visual Basic では、上記のようになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1029">in Visual Basic.</span></span>  
  
 <span data-ttu-id="39639-1030">遅延評価のため、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29>メソッドを呼び出すと例外は<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>スローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1030">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-1031">ただし、この例外は、 <xref:System.Text.RegularExpressions.MatchCollection> <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A>プロパティがではなく<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> 、一致操作がタイムアウト間隔を超えている場合に、このメソッドによって返されるオブジェクトに対して操作が実行されるとスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1031">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if the <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property is not <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> and a matching operation exceeds the time-out interval.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="39639-1032">次の例では<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> 、メソッドを使用して、"es" で終わる文の最初の単語を検索し<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> 、メソッドを呼び出して、"es" で終わる追加の単語を識別します。</span><span class="sxs-lookup"><span data-stu-id="39639-1032">The following example uses the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method to find the first word in a sentence that ends in "es", and then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> method to identify any additional words that end in "es".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches3.vb#3)]  
  
 <span data-ttu-id="39639-1033">正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="39639-1033">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-1034">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1034">Pattern</span></span>|<span data-ttu-id="39639-1035">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1035">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="39639-1036">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-1036">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="39639-1037">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1037">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="39639-1038">リテラル文字列 "es" と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1038">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="39639-1039">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-1039">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1040"><paramref name="input" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-1040"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1041"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1041"><paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1042">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1042">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member Matches : string * string -&gt; System.Text.RegularExpressions.MatchCollection" Usage="System.Text.RegularExpressions.Regex.Matches (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1043">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1043">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1044">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1044">The regular expression pattern to match.</span></span></param>
        <summary><span data-ttu-id="39639-1045">指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-1045">Searches the specified input string for all occurrences of a specified regular expression.</span></span></summary>
        <returns><span data-ttu-id="39639-1046">検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="39639-1046">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span></span> <span data-ttu-id="39639-1047">一致が見つからない場合は、空のコレクション オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1047">If no matches are found, the method returns an empty collection object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1048">メソッドは<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>メソッドに似ていますが、単一の一致ではなく、入力文字列内で見つかったすべての一致に関する情報を返す点が異なります。 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29></span><span class="sxs-lookup"><span data-stu-id="39639-1048">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="39639-1049">これは、次のコードと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1049">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#7)]  
  
 <span data-ttu-id="39639-1050">静的`Matches`メソッドは、指定された<xref:System.Text.RegularExpressions.Regex>正規表現パターンを使用してオブジェクトを構築し、 `Matches`インスタンスメソッドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1050">The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.</span></span>  
  
 <span data-ttu-id="39639-1051">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1051">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1052">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1052">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-1053">メソッド<xref:System.Text.RegularExpressions.Regex.Matches%2A>は、レイジー評価を使用して<xref:System.Text.RegularExpressions.MatchCollection> 、返されたオブジェクトを設定します。</span><span class="sxs-lookup"><span data-stu-id="39639-1053">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="39639-1054">やなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> 、このコレクションのメンバーに<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>アクセスすると、コレクションにすぐに値が設定されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1054">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="39639-1055">レイジー評価を利用するには、や`foreach` C# `For Each`などのコンストラクトを使用してコレクションを反復処理する必要があります。`Next`</span><span class="sxs-lookup"><span data-stu-id="39639-1055">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="39639-1056">Visual Basic では、上記のようになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1056">in Visual Basic.</span></span>  
  
 <span data-ttu-id="39639-1057">遅延評価のため、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29>メソッドを呼び出すと例外は<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>スローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1057">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-1058">ただし、タイムアウト間隔が現在のアプリケーションドメインの "REGEX_DEFAULT_MATCH_TIMEOUT" <xref:System.Text.RegularExpressions.MatchCollection>プロパティと照合操作によって定義されている場合、このメソッドによって返されるオブジェクトに対して操作が実行されると、例外がスローされます。がこのタイムアウト間隔を超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1058">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the "REGEX_DEFAULT_MATCH_TIMEOUT" property of the current application domain and a matching operation exceeds this time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1059">次の例では<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> 、メソッドを使用して、"es" で終わる文内の単語を識別します。</span><span class="sxs-lookup"><span data-stu-id="39639-1059">The following example uses the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method to identify any word in a sentence that ends in "es".</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches2.vb#2)]  
  
 <span data-ttu-id="39639-1060">正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="39639-1060">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-1061">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1061">Pattern</span></span>|<span data-ttu-id="39639-1062">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1062">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="39639-1063">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-1063">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="39639-1064">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1064">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="39639-1065">リテラル文字列 "es" と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1065">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="39639-1066">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-1066">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1067">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1067">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1068"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1068"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1069">このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-1069">This method times out after an interval that is equal to the default time-out value of the application domain in which it is called.</span></span> <span data-ttu-id="39639-1070">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1070">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-1071">複数のパターンマッチを取得するために推奨<see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />される静的メソッドはです。これにより、タイムアウト間隔を指定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1071">The recommended static method for retrieving multiple pattern matches is <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you specify the time-out interval.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1072">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1072">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String, options As RegexOptions) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Matches : string * string * System.Text.RegularExpressions.RegexOptions -&gt; System.Text.RegularExpressions.MatchCollection" Usage="System.Text.RegularExpressions.Regex.Matches (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1073">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1073">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1074">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1074">The regular expression pattern to match.</span></span></param>
        <param name="options"><span data-ttu-id="39639-1075">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-1075">A bitwise combination of the enumeration values that specify options for matching.</span></span></param>
        <summary><span data-ttu-id="39639-1076">指定した一致オプションを使用して、指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-1076">Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.</span></span></summary>
        <returns><span data-ttu-id="39639-1077">検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="39639-1077">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span></span> <span data-ttu-id="39639-1078">一致が見つからない場合は、空のコレクション オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1078">If no matches are found, the method returns an empty collection object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1079">メソッドは<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドに似ていますが、単一の一致ではなく、入力文字列内で見つかったすべての一致に関する情報を返す点が異なります。 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29></span><span class="sxs-lookup"><span data-stu-id="39639-1079">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="39639-1080">これは、次のコードと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1080">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#8)]  
  
 <span data-ttu-id="39639-1081">静的`Matches`メソッドは、指定された<xref:System.Text.RegularExpressions.Regex>正規表現パターンを使用してオブジェクトを構築し、 `Matches`インスタンスメソッドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1081">The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.</span></span>  
  
 <span data-ttu-id="39639-1082">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1082">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1083">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1083">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-1084">メソッド<xref:System.Text.RegularExpressions.Regex.Matches%2A>は、レイジー評価を使用して<xref:System.Text.RegularExpressions.MatchCollection> 、返されたオブジェクトを設定します。</span><span class="sxs-lookup"><span data-stu-id="39639-1084">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="39639-1085">やなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> 、このコレクションのメンバーに<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>アクセスすると、コレクションにすぐに値が設定されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1085">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="39639-1086">レイジー評価を利用するには、や`foreach` C# `For Each`などのコンストラクトを使用してコレクションを反復処理する必要があります。`Next`</span><span class="sxs-lookup"><span data-stu-id="39639-1086">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="39639-1087">Visual Basic では、上記のようになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1087">in Visual Basic.</span></span>  
  
 <span data-ttu-id="39639-1088">遅延評価のため、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29>メソッドを呼び出すと例外は<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>スローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1088">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-1089">ただし、タイムアウト間隔が現在のアプリケーションドメインの "REGEX_DEFAULT_MATCH_TIMEOUT" <xref:System.Text.RegularExpressions.MatchCollection>プロパティと照合操作によって定義されている場合、このメソッドによって返されるオブジェクトに対して操作が実行されると、例外がスローされます。がこのタイムアウト間隔を超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1089">However, the exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a time-out interval is defined by the "REGEX_DEFAULT_MATCH_TIMEOUT" property of the current application domain and a matching operation exceeds this time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1090">次の例では<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> 、メソッドを呼び出して、"es" で終わる文内の単語を特定し、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドを呼び出して、入力文字列とパターンの大文字と小文字を区別しない比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="39639-1090">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> method to identify any word in a sentence that ends in "es", and then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to perform a case-insensitive comparison of the pattern with the input string.</span></span> <span data-ttu-id="39639-1091">出力に示されているように、2つのメソッドは異なる結果を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1091">As the output shows, the two methods return different results.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches4.vb#4)]  
  
 <span data-ttu-id="39639-1092">正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="39639-1092">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-1093">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1093">Pattern</span></span>|<span data-ttu-id="39639-1094">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1094">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="39639-1095">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-1095">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="39639-1096">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1096">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="39639-1097">リテラル文字列 "es" と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1097">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="39639-1098">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-1098">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1099">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1099">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1100"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1100"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1101"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-1101"><paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1102">このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-1102">This method times out after an interval that is equal to the default time-out value of the application domain in which it is called.</span></span> <span data-ttu-id="39639-1103">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1103">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-1104">複数のパターンマッチを取得するために推奨<see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />される静的メソッドはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1104">The recommended static method for retrieving multiple pattern matches is <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1105">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1105">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As MatchCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::MatchCollection ^ Matches(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Matches : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; System.Text.RegularExpressions.MatchCollection" Usage="System.Text.RegularExpressions.Regex.Matches (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1106">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1106">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1107">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1107">The regular expression pattern to match.</span></span></param>
        <param name="options"><span data-ttu-id="39639-1108">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-1108">A bitwise combination of the enumeration values that specify options for matching.</span></span></param>
        <param name="matchTimeout"><span data-ttu-id="39639-1109">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="39639-1109">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span></span></param>
        <summary><span data-ttu-id="39639-1110">指定した一致オプションとタイムアウト間隔を使用して、指定した入力文字列内で、指定した正規表現に一致するすべての箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="39639-1110">Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="39639-1111">検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="39639-1111">A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search.</span></span> <span data-ttu-id="39639-1112">一致が見つからない場合は、空のコレクション オブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1112">If no matches are found, the method returns an empty collection object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1113">メソッドは<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドに似ていますが、単一の一致ではなく、入力文字列内で見つかったすべての一致に関する情報を返す点が異なります。 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29></span><span class="sxs-lookup"><span data-stu-id="39639-1113">The <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method is similar to the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method, except that it returns information about all the matches found in the input string, instead of a single match.</span></span> <span data-ttu-id="39639-1114">これは、次のコードと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1114">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#10)]  
  
 <span data-ttu-id="39639-1115">静的`Matches`メソッドは、指定された<xref:System.Text.RegularExpressions.Regex>正規表現パターンを使用してオブジェクトを構築し、 `Matches`インスタンスメソッドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1115">The static `Matches` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Matches`.</span></span>  
  
 <span data-ttu-id="39639-1116">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1116">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1117">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1117">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-1118">メソッド<xref:System.Text.RegularExpressions.Regex.Matches%2A>は、レイジー評価を使用して<xref:System.Text.RegularExpressions.MatchCollection> 、返されたオブジェクトを設定します。</span><span class="sxs-lookup"><span data-stu-id="39639-1118">The <xref:System.Text.RegularExpressions.Regex.Matches%2A> method uses lazy evaluation to populate the returned <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="39639-1119">やなど<xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> 、このコレクションのメンバーに<xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType>アクセスすると、コレクションにすぐに値が設定されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1119">Accessing members of this collection such as <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=nameWithType> causes the collection to be populated immediately.</span></span> <span data-ttu-id="39639-1120">レイジー評価を利用するには、や`foreach` C# `For Each`などのコンストラクトを使用してコレクションを反復処理する必要があります。`Next`</span><span class="sxs-lookup"><span data-stu-id="39639-1120">To take advantage of lazy evaluation, you should iterate the collection by using a construct such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="39639-1121">Visual Basic では、上記のようになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1121">in Visual Basic.</span></span>  
  
 <span data-ttu-id="39639-1122">遅延評価のため、 <xref:System.Text.RegularExpressions.Regex.Matches%2A>メソッドを呼び出すと例外は<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>スローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1122">Because of its lazy evaluation, calling the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method does not throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-1123">ただし、このメソッドによって返される<xref:System.Text.RegularExpressions.MatchCollection>オブジェクトに対して操作が実行された場合、一致する操作が`matchTimeout`パラメーターで指定されたこのタイムアウト時間を超えると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1123">However, an exception is thrown when an operation is performed on the <xref:System.Text.RegularExpressions.MatchCollection> object returned by this method, if a matching operation exceeds this time-out interval specified by the`matchTimeout` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1124">次の例では<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 、メソッドを呼び出して、"es" で終わる文内の単語と一致する大文字と小文字を区別する比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="39639-1124">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to perform a case-sensitive comparison that matches any word in a sentence that ends in "es".</span></span> <span data-ttu-id="39639-1125">次に、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>メソッドを呼び出して、入力文字列とパターンの大文字と小文字を区別しない比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="39639-1125">It then calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to perform a case-insensitive comparison of the pattern with the input string.</span></span> <span data-ttu-id="39639-1126">どちらの場合も、タイムアウト間隔は1秒に設定されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1126">In both cases, the time-out interval is set to one second.</span></span> <span data-ttu-id="39639-1127">出力に示されているように、2つのメソッドは異なる結果を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1127">As the output shows, the two methods return different results.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches5.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches5.vb#11)]  
  
 <span data-ttu-id="39639-1128">正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="39639-1128">The regular expression pattern `\b\w+es\b` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-1129">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1129">Pattern</span></span>|<span data-ttu-id="39639-1130">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1130">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="39639-1131">ワード境界から照合を開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-1131">Begin the match at a word boundary.</span></span>|  
|`\w+`|<span data-ttu-id="39639-1132">1 つ以上の単語文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1132">Match one or more word characters.</span></span>|  
|`es`|<span data-ttu-id="39639-1133">リテラル文字列 "es" と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1133">Match the literal string "es".</span></span>|  
|`\b`|<span data-ttu-id="39639-1134">ワード境界で照合を終了します。</span><span class="sxs-lookup"><span data-stu-id="39639-1134">End the match at a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1135">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1135">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1136"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1136"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1137"><paramref name="options" /> は、 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-1137"><paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span></span>  
  
<span data-ttu-id="39639-1138">- または -</span><span class="sxs-lookup"><span data-stu-id="39639-1138">-or-</span></span> 
 <span data-ttu-id="39639-1139"><paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1139"><paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1140"><paramref name="matchTimeout" />パラメーターには、2秒などの適切な値を設定することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="39639-1140">We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds.</span></span> <span data-ttu-id="39639-1141">を指定<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。</span><span class="sxs-lookup"><span data-stu-id="39639-1141">If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance.</span></span> <span data-ttu-id="39639-1142">ただし、次の条件下でのみタイムアウトを無効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1142">However, you should disable time-outs only under the following conditions:</span></span> 
<span data-ttu-id="39639-1143">-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1143">-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text.</span></span> <span data-ttu-id="39639-1144">これにより、ユーザーが動的に入力したテキストは除外されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1144">This excludes text that has been dynamically input by users.</span></span>  
  
<span data-ttu-id="39639-1145">-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1145">-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.</span></span>  
  
<span data-ttu-id="39639-1146">-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1146">-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1147">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1147">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan" Usage="System.Text.RegularExpressions.Regex.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-1148">現在のインスタンスのタイムアウト間隔を取得します。</span><span class="sxs-lookup"><span data-stu-id="39639-1148">Gets the time-out interval of the current instance.</span></span></summary>
        <value><span data-ttu-id="39639-1149"><see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> がスローされる前に、パターン一致操作で経過できる最大時間間隔。タイムアウトが無効な場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="39639-1149">The maximum time interval that can elapse in a pattern-matching operation before a <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> is thrown, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> if time-outs are disabled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1150">プロパティ<xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A>は、操作がタイムアウトする前に単一<xref:System.Text.RegularExpressions.Regex>の一致操作を実行するインスタンスのおおよその最大時間間隔を定義します。正規表現エンジンは、タイムアウト<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>間隔が経過した後の次のタイミングチェック中に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="39639-1150">The <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> property defines the approximate maximum time interval for a <xref:System.Text.RegularExpressions.Regex> instance to execute a single matching operation before the operation times out. The regular expression engine throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception during its next timing check after the time-out interval has elapsed.</span></span> <span data-ttu-id="39639-1151">これにより、正規表現エンジンは、過度なバックトラッキングを必要とする入力文字列を処理できなくなります。</span><span class="sxs-lookup"><span data-stu-id="39639-1151">This prevents the regular expression engine from processing input strings that require excessive backtracking.</span></span> <span data-ttu-id="39639-1152">詳細については、「[正規表現の](~/docs/standard/base-types/best-practices.md)[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)とベストプラクティス」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1152">For more information, see [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md) and [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md).</span></span>  
  
 <span data-ttu-id="39639-1153">このプロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="39639-1153">This property is read-only.</span></span> <span data-ttu-id="39639-1154">コンストラクターを<xref:System.Text.RegularExpressions.Regex> <xref:System.Text.RegularExpressions.Regex> <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>呼び出すことによって、個々のオブジェクトに対して値を明示的に設定できます。また、メソッドを呼び出して、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType><xref:System.TimeSpan>次の例に示すように、"REGEX_DEFAULT_MATCH_TIMEOUT" プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="39639-1154">You can set its value explicitly for an individual <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor; and you can set its value for all <xref:System.Text.RegularExpressions.Regex> matching operations in an application domain by calling the <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> method and providing a <xref:System.TimeSpan> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/cs/regexmatchtimeout1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/vb/regexmatchtimeout1.vb#1)]  
  
 <span data-ttu-id="39639-1155">タイムアウト間隔を明示的に設定しない場合、既定値<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>が使用され、照合操作はタイムアウトしません。</span><span class="sxs-lookup"><span data-stu-id="39639-1155">If you do not explicitly set a time-out interval, the default value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType> is used, and matching operations do not time out.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions" Usage="System.Text.RegularExpressions.Regex.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-1156"><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターに渡されたオプションを取得します。</span><span class="sxs-lookup"><span data-stu-id="39639-1156">Gets the options that were passed into the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span></span></summary>
        <value><span data-ttu-id="39639-1157"><see cref="T:System.Text.RegularExpressions.RegexOptions" /> のコンストラクターに渡されたオプションを表す <see cref="T:System.Text.RegularExpressions.Regex" /> の列挙体の 1 つ以上のメンバー</span><span class="sxs-lookup"><span data-stu-id="39639-1157">One or more members of the <see cref="T:System.Text.RegularExpressions.RegexOptions" /> enumeration that represent options that were passed to the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1158"><xref:System.Text.RegularExpressions.Regex.Options%2A>プロパティの値は、 <xref:System.Text.RegularExpressions.RegexOptions>列挙体の1つ以上のメンバーで構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1158">The value of the <xref:System.Text.RegularExpressions.Regex.Options%2A> property consists of one or more members of the <xref:System.Text.RegularExpressions.RegexOptions> enumeration.</span></span> <span data-ttu-id="39639-1159"><xref:System.Text.RegularExpressions.Regex>クラスコンストラクターでオプションが定義されていない場合、 <xref:System.Text.RegularExpressions.RegexOptions.None?displayProperty=nameWithType>その値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1159">If no options were defined in the <xref:System.Text.RegularExpressions.Regex> class constructor, its value is <xref:System.Text.RegularExpressions.RegexOptions.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="39639-1160">使用可能なオプションの詳細については、「[正規表現のオプション](~/docs/standard/base-types/regular-expression-options.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1160">The available options are discussed in detail in the [Regular Expression Options](~/docs/standard/base-types/regular-expression-options.md) topic.</span></span>  
  
 <span data-ttu-id="39639-1161">プロパティは、 <xref:System.Text.RegularExpressions.Regex.Options%2A>正規表現パターン自体で定義されているインラインオプションを反映していないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1161">Note that the <xref:System.Text.RegularExpressions.Regex.Options%2A> property does not reflect inline options defined in the regular expression pattern itself.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="39639-1162">
            <see cref="T:System.Text.RegularExpressions.Regex" />は、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />メソッドによって作成される正規表現の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="39639-1162">
            <see cref="T:System.Text.RegularExpressions.Regex" /> is the base class of regular expressions created by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span> <span data-ttu-id="39639-1163">これらのコンパイルされた正規表現では、 <see cref="P:System.Text.RegularExpressions.Regex.Options" />プロパティの基本クラスの実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-1163">These compiled regular expressions use the base class implementation of the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property.</span></span> <span data-ttu-id="39639-1164">派生クラスから呼び出された場合、 <see cref="P:System.Text.RegularExpressions.Regex.Options" />プロパティは、正規表現の定義に使用<paramref name="options" />された<see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />クラスコンストラクターのパラメーターに渡されたオプションを返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1164">If called from a derived class, the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property returns the options that were passed to the <paramref name="options" /> parameter of the <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> class constructor that was used to define the regular expression.</span></span></para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/c82dc689-7e82-4767-a18d-cd24ce5f05e9"><span data-ttu-id="39639-1165">正規表現のオプション</span><span class="sxs-lookup"><span data-stu-id="39639-1165">Regular Expression Options</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="pattern">
      <MemberSignature Language="C#" Value="protected internal string pattern;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string pattern" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.pattern" />
      <MemberSignature Language="VB.NET" Value="Protected Friend pattern As String " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::String ^ pattern;" />
      <MemberSignature Language="F#" Value="val mutable pattern : string" Usage="System.Text.RegularExpressions.Regex.pattern" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-1166"><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1166">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="39639-1167">指定した入力文字列内で正規表現パターンに一致する文字列を、指定した置換文字列に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1167">In a specified input string, replaces strings that match a regular expression pattern with a specified replacement string.</span></span></summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1168">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1168">Regular Expression Language - Quick Reference</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1169">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1169">Substitutions</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string -&gt; string" Usage="regex.Replace (input, replacement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1170">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1170">The string to search for a match.</span></span></param>
        <param name="replacement"><span data-ttu-id="39639-1171">置換文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1171">The replacement string.</span></span></param>
        <summary><span data-ttu-id="39639-1172">指定した入力文字列内で正規表現パターンに一致するすべての文字列を、指定した置換文字列に置換します。</span><span class="sxs-lookup"><span data-stu-id="39639-1172">In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.</span></span></summary>
        <returns><span data-ttu-id="39639-1173">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1173">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1174">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1174">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1175">一致の検索は、 `input`文字列の先頭から開始されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1175">The search for matches starts at the beginning of the `input` string.</span></span> <span data-ttu-id="39639-1176">正規表現は、現在<xref:System.Text.RegularExpressions.Regex>のオブジェクトのコンストラクターによって定義されたパターンです。</span><span class="sxs-lookup"><span data-stu-id="39639-1176">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="39639-1177">パラメーターでは、内の`input`各一致文字列を置き換える文字列を指定します。 `replacement`</span><span class="sxs-lookup"><span data-stu-id="39639-1177">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="39639-1178">`replacement`は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1178">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-1179">たとえば、置換パターン`a*${test}b`では、文字列 "a \*" の後に、 `test`キャプチャグループに一致する部分文字列 (存在する場合) と、その後に続く文字列 "b" が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1179">For example, the replacement pattern `a*${test}b` inserts the string "a\*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="39639-1180">\* 文字は、置換パターン内では、メタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1180">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39639-1181">置換は、置換パターンで認識される唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="39639-1181">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="39639-1182">他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1182">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="39639-1183">この例外は、置換操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-1183">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-1184">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1184">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-1185"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1185">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="39639-1186">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1186">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1187">次の例では、1つ`\s+`以上の空白文字に一致する正規表現を定義しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1187">The following example defines a regular expression, `\s+`, that matches one or more white-space characters.</span></span> <span data-ttu-id="39639-1188">置換文字列 "" は、1つの空白文字で置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="39639-1188">The replacement string, " ", replaces them with a single space character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample5.vb#5)]  
  
 <span data-ttu-id="39639-1189">次の例では、正規表現`(\p{Sc}\s?)?(\d+\.?((?<=\.)\d+)?)(?(1)|\s?\p{Sc})?`と、数値から先頭また`$2`は末尾の通貨記号を削除する置換パターンを定義しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1189">The following example defines a regular expression, `(\p{Sc}\s?)?(\d+\.?((?<=\.)\d+)?)(?(1)|\s?\p{Sc})?`, and a replacement pattern, `$2`, that removes either a leading or a trailing currency symbol from a numeric value.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample7.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample7.vb#7)]  
  
 <span data-ttu-id="39639-1190">この正規表現の解釈を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="39639-1190">The regular expression is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-1191">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1191">Pattern</span></span>|<span data-ttu-id="39639-1192">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1192">Description</span></span>|  
|-------------|-----------------|  
|`\p{Sc}`|<span data-ttu-id="39639-1193">通貨記号に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1193">Match a currency symbol.</span></span> <span data-ttu-id="39639-1194">`{Sc}`Unicode 記号、通貨カテゴリのメンバーである任意の文字を示します。</span><span class="sxs-lookup"><span data-stu-id="39639-1194">`{Sc}` denotes any character that is a member of the Unicode Symbol, Currency category.</span></span>|  
|`\s?`|<span data-ttu-id="39639-1195">0 個または 1 個の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1195">Match zero or one white-space character.</span></span>|  
|`(\p{Sc}\s?)?`|<span data-ttu-id="39639-1196">通貨記号の後に0個または1個の空白文字が続く組み合わせの0回または1回の繰り返しに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1196">Match zero or one occurrence of the combination of a currency symbol followed by zero or one white-space character.</span></span> <span data-ttu-id="39639-1197">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="39639-1197">This is the first capturing group.</span></span>|  
|`\d+`|<span data-ttu-id="39639-1198">1 個以上の 10 進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1198">Match one or more decimal digits.</span></span>|  
|`\.?`|<span data-ttu-id="39639-1199">ピリオドの0回または1回の繰り返しに一致します (小数点区切り文字として使用されます)。</span><span class="sxs-lookup"><span data-stu-id="39639-1199">Match zero or one occurrence of a period (used as a decimal separator character).</span></span>|  
|`((?<=\.)\d+)?`|<span data-ttu-id="39639-1200">ピリオドが前の文字の場合は、1桁以上の10進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1200">If a period is the previous character, match one or more decimal digits.</span></span> <span data-ttu-id="39639-1201">このパターンは、0回または1回一致することができます。</span><span class="sxs-lookup"><span data-stu-id="39639-1201">This pattern can be matched either zero or one time.</span></span>|  
|`(\d+\.?((?<=\.)\d+)?)`|<span data-ttu-id="39639-1202">1個以上の10進数の後に省略可能なピリオドと追加の10進数が続くパターンと一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1202">Match the pattern of one or more decimal digits followed by an optional period and additional decimal digits.</span></span> <span data-ttu-id="39639-1203">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="39639-1203">This is the second capturing group.</span></span> <span data-ttu-id="39639-1204"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%29>メソッドを呼び出すと、一致した全体がこのキャプチャされたグループの値に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="39639-1204">The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%29> method replaces the entire match with the value of this captured group.</span></span>|  
|<code>(?(1)&#124;\s?\p{Sc})?</code>|<span data-ttu-id="39639-1205">最初のキャプチャグループが存在する場合は、空の文字列と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1205">If the first captured group exists, match an empty string.</span></span> <span data-ttu-id="39639-1206">それ以外の場合は、0個または1個の空白文字の後に通貨記号が続くパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1206">Otherwise, match zero or one white-space character followed by a currency symbol.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1207"><paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1207"><paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1208">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1208">A time-out occurred.</span></span> <span data-ttu-id="39639-1209">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1209">For more information about time-outs, see the Remarks section.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1210">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1210">Regular Expression Language - Quick Reference</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1211">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1211">Substitutions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * System.Text.RegularExpressions.MatchEvaluator -&gt; string" Usage="regex.Replace (input, evaluator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1212">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1212">The string to search for a match.</span></span></param>
        <param name="evaluator"><span data-ttu-id="39639-1213">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span><span class="sxs-lookup"><span data-stu-id="39639-1213">A custom method that examines each match and returns either the original matched string or a replacement string.</span></span></param>
        <summary><span data-ttu-id="39639-1214">指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1214">In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span></span></summary>
        <returns><span data-ttu-id="39639-1215">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1215">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1216">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1216">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1217"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかに該当する場合に正規表現の一致を置き換える場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="39639-1217">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="39639-1218">置換文字列は、正規表現の置換パターンで簡単に指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="39639-1218">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="39639-1219">置換文字列は、一致した文字列に対して何らかの処理が行われた結果になります。</span><span class="sxs-lookup"><span data-stu-id="39639-1219">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="39639-1220">置換文字列は、条件付き処理の結果として返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1220">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="39639-1221">メソッドは、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType>メソッドを呼び出し、返さ<xref:System.Text.RegularExpressions.MatchCollection>れたコレクション<xref:System.Text.RegularExpressions.Match>内の各オブジェクトを`evaluator`デリゲートに渡すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1221">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="39639-1222">正規表現は、現在<xref:System.Text.RegularExpressions.Regex>のオブジェクトのコンストラクターによって定義されたパターンです。</span><span class="sxs-lookup"><span data-stu-id="39639-1222">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="39639-1223">`evaluator`パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。</span><span class="sxs-lookup"><span data-stu-id="39639-1223">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="39639-1224">カスタムメソッドには、 <xref:System.Text.RegularExpressions.MatchEvaluator>デリゲートに一致する次のシグネチャが必要です。</span><span class="sxs-lookup"><span data-stu-id="39639-1224">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="39639-1225">カスタムメソッドは、一致した入力を置き換える文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1225">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="39639-1226">この例外は、置換操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-1226">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-1227">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1227">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-1228"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1228">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="39639-1229">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1229">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1230">次のコード例では、元の文字列を表示し、元の文字列の各単語と一致し、各一致の最初の文字を大文字に変換して、変換後の文字列を表示します。</span><span class="sxs-lookup"><span data-stu-id="39639-1230">The following code example displays an original string, matches each word in the original string, converts the first character of each match to uppercase, then displays the converted string.</span></span>  
  
 [!code-csharp[Regex.Replace-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Regex.Replace-Instance/cs/sample.cs#1)]
 [!code-vb[Regex.Replace-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex.Replace-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1231"><paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1231"><paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1232">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1232">A time-out occurred.</span></span> <span data-ttu-id="39639-1233">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1233">For more information about time-outs, see the Remarks section.</span></span></exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1234">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1234">Substitutions</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1235">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1235">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement, int count);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * int -&gt; string" Usage="regex.Replace (input, replacement, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1236">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1236">The string to search for a match.</span></span></param>
        <param name="replacement"><span data-ttu-id="39639-1237">置換文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1237">The replacement string.</span></span></param>
        <param name="count"><span data-ttu-id="39639-1238">置換を行う最大回数。</span><span class="sxs-lookup"><span data-stu-id="39639-1238">The maximum number of times the replacement can occur.</span></span></param>
        <summary><span data-ttu-id="39639-1239">指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</span><span class="sxs-lookup"><span data-stu-id="39639-1239">In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</span></span></summary>
        <returns><span data-ttu-id="39639-1240">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1240">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1241">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1241">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1242">一致の検索は、 `input`文字列の先頭から開始されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1242">The search for matches starts at the beginning of the `input` string.</span></span> <span data-ttu-id="39639-1243">正規表現は、現在<xref:System.Text.RegularExpressions.Regex>のオブジェクトのコンストラクターによって定義されるパターンです。</span><span class="sxs-lookup"><span data-stu-id="39639-1243">The regular expression is the pattern that is defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span> <span data-ttu-id="39639-1244">が`count`負の値の場合、置換は文字列の末尾に続きます。</span><span class="sxs-lookup"><span data-stu-id="39639-1244">If `count` is negative, replacements continue to the end of the string.</span></span> <span data-ttu-id="39639-1245">が`count`一致の数を超えた場合は、すべての一致が置換されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1245">If `count` exceeds the number of matches, all matches are replaced.</span></span>  
  
 <span data-ttu-id="39639-1246">パラメーター `replacement`は、 `count` の `input` 最初の一致を置き換える文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="39639-1246">The `replacement` parameter specifies the string that is to replace the first `count` matches in `input`.</span></span> <span data-ttu-id="39639-1247">`replacement`は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1247">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-1248">たとえば、置換パターン`a*${test}b`では、文字列 "a \*" の後に、 `test`キャプチャグループに一致する部分文字列 (存在する場合) と、その後に続く文字列 "b" が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1248">For example, the replacement pattern `a*${test}b` inserts the string "a\*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="39639-1249">\* 文字は、置換パターン内では、メタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1249">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39639-1250">置換は、置換パターンで認識される唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="39639-1250">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="39639-1251">他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1251">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="39639-1252">この例外は、置換操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-1252">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-1253">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1253">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-1254"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1254">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="39639-1255">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1255">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1256">次の例では、最初の5回の重複する文字を1つの文字に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1256">The following example replaces the first five occurrences of duplicated characters with a single character.</span></span> <span data-ttu-id="39639-1257">正規表現パターン`(\w)\1`は、1つの文字を連続して検索し、最初の出現箇所を最初のキャプチャグループに代入します。</span><span class="sxs-lookup"><span data-stu-id="39639-1257">The regular expression pattern `(\w)\1` matches consecutive occurrences of a single character and assigns the first occurrence to the first capturing group.</span></span> <span data-ttu-id="39639-1258">置換パターン`$1`は、一致した文字列全体を最初のキャプチャグループに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1258">The replacement pattern `$1` replaces the entire match with the first captured group.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample8.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1259"><paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1259"><paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1260">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1260">A time-out occurred.</span></span> <span data-ttu-id="39639-1261">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1261">For more information about time-outs, see the Remarks section.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1262">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1262">Regular Expression Language - Quick Reference</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1263">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1263">Substitutions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, replacement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1264">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1264">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1265">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1265">The regular expression pattern to match.</span></span></param>
        <param name="replacement"><span data-ttu-id="39639-1266">置換文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1266">The replacement string.</span></span></param>
        <summary><span data-ttu-id="39639-1267">指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。</span><span class="sxs-lookup"><span data-stu-id="39639-1267">In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</span></span></summary>
        <returns><span data-ttu-id="39639-1268">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1268">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1269"><paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1269">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1270">静的`Replace`メソッドは、指定された<xref:System.Text.RegularExpressions.Regex>正規表現パターンを使用してオブジェクトを構築し、 `Replace`インスタンスメソッドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1270">The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.</span></span>  
  
 <span data-ttu-id="39639-1271">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1271">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1272">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1272">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="39639-1273">一致の検索は、 `input`文字列の先頭から開始されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1273">The search for matches starts at the beginning of the `input` string.</span></span>  
  
 <span data-ttu-id="39639-1274">パラメーターでは、内の`input`各一致文字列を置き換える文字列を指定します。 `replacement`</span><span class="sxs-lookup"><span data-stu-id="39639-1274">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="39639-1275">`replacement`は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1275">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-1276">たとえば、置換パターン`a*${test}b`では、文字列 "a \*" の後に、 `test`キャプチャグループに一致する部分文字列 (存在する場合) と、その後に続く文字列 "b" が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1276">For example, the replacement pattern `a*${test}b` inserts the string "a\*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="39639-1277">\* 文字は、置換パターン内では、メタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1277">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39639-1278">置換は、置換パターンで認識される唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="39639-1278">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="39639-1279">他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1279">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="39639-1280">この<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外は、置換操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1280">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="39639-1281">アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合は、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1281">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="39639-1282">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1282">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1283">次の例では、1つ`\s+`以上の空白文字に一致する正規表現を定義しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1283">The following example defines a regular expression, `\s+`, that matches one or more white-space characters.</span></span> <span data-ttu-id="39639-1284">置換文字列 "" は、1つの空白文字で置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="39639-1284">The replacement string, " ", replaces them with a single space character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample6.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample6.vb#6)]  
  
 <span data-ttu-id="39639-1285">次の例では<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> 、メソッドを使用して、UNC パスのローカルコンピューターとドライブ名をローカルファイルパスに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1285">The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> method to replace the local machine and drive names in a UNC path with a local file path.</span></span> <span data-ttu-id="39639-1286">この正規表現では<xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 、プロパティを使用してローカルコンピューターの名前を指定<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType>し、メソッドに論理ドライブの名前を含めます。</span><span class="sxs-lookup"><span data-stu-id="39639-1286">The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to include the name of the local computer, and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> method to include the names of the logical drives.</span></span> <span data-ttu-id="39639-1287">例を正しく実行するには、リテラル文字列 "MyMachine" をローカルコンピューター名に置き換える必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1287">To run the example successfully, you should replace the literal string "MyMachine" with your local machine name.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace3.vb#3)]  
  
 <span data-ttu-id="39639-1288">正規表現パターンは、次の式によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1288">The regular expression pattern is defined by the following expression:</span></span>  
  
 `"\\\\(?i:" + Environment.MachineName + ")(?:\.\w+)*\\((?i:[" + driveNames + "]))\$"`  
  
 <span data-ttu-id="39639-1289">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-1289">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="39639-1290">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1290">Pattern</span></span>|<span data-ttu-id="39639-1291">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1291">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="39639-1292">`\\\\`|2つの連続する`\`円記号 () 文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1292">`\\\\`|Match two consecutive backslash (`\`) characters.</span></span> <span data-ttu-id="39639-1293">バックスラッシュ文字はエスケープ文字として解釈されるため、各円記号は別の円記号でエスケープする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1293">Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</span></span>|  
|`(?i:" + Environment.MachineName + ")`|<span data-ttu-id="39639-1294"><xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティによって返される文字列の大文字と小文字を区別しない一致を実行します。</span><span class="sxs-lookup"><span data-stu-id="39639-1294">Perform a case-insensitive match of the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property.</span></span>|  
|`(?:\.\w+)*`|<span data-ttu-id="39639-1295">ピリオド (`.`) 文字の後に1個以上の単語文字が続くパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1295">Match the period (`.`) character followed by one or more word characters.</span></span> <span data-ttu-id="39639-1296">この一致は、0回以上発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1296">This match can occur zero or more times.</span></span> <span data-ttu-id="39639-1297">一致した部分式はキャプチャされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1297">The matched subexpression is not captured.</span></span>|  
|<span data-ttu-id="39639-1298">`\\`|円記号 (`\`) 文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1298">`\\`|Match a backslash (`\`) character.</span></span>|  
|`((?i:[" + driveNames + "]))`|<span data-ttu-id="39639-1299">個々のドライブ文字で構成される文字クラスの大文字と小文字を区別しない一致を実行します。</span><span class="sxs-lookup"><span data-stu-id="39639-1299">Perform a case-insensitive match of the character class that consists of the individual drive letters.</span></span> <span data-ttu-id="39639-1300">この一致は最初にキャプチャされた部分式です。</span><span class="sxs-lookup"><span data-stu-id="39639-1300">This match is the first captured subexpression.</span></span>|  
|`\$`|<span data-ttu-id="39639-1301">リテラルドル記号 (`$`) 文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1301">Match the literal dollar sign (`$`) character.</span></span>|  
  
 <span data-ttu-id="39639-1302">置換パターン`$1`は、一致した文字列全体を最初にキャプチャされた部分式と置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1302">The replacement pattern `$1` replaces the entire match with the first captured subexpression.</span></span> <span data-ttu-id="39639-1303">つまり、UNC コンピューターとドライブ名はドライブ文字で置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="39639-1303">That is, it replaces the UNC machine and drive name with the drive letter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1304">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1304">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1305"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1305"><paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1306">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1306">A time-out occurred.</span></span> <span data-ttu-id="39639-1307">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1307">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1308">このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-1308">This method times out after an interval that is equal to the default time-out value of the application domain in which it is called.</span></span> <span data-ttu-id="39639-1309">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1309">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-1310">パターンマッチを置き換えるために推奨される静的<see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />メソッドはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1310">The recommended static method for replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</span></span></para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1311">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1311">Substitutions</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1312">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1312">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * System.Text.RegularExpressions.MatchEvaluator -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, evaluator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1313">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1313">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1314">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1314">The regular expression pattern to match.</span></span></param>
        <param name="evaluator"><span data-ttu-id="39639-1315">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span><span class="sxs-lookup"><span data-stu-id="39639-1315">A custom method that examines each match and returns either the original matched string or a replacement string.</span></span></param>
        <summary><span data-ttu-id="39639-1316">指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1316">In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span></span></summary>
        <returns><span data-ttu-id="39639-1317">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1317">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1318"><paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1318">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1319"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかに該当する場合に正規表現の一致を置き換える場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="39639-1319">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="39639-1320">置換文字列は、正規表現の置換パターンで簡単に指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="39639-1320">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="39639-1321">置換文字列は、一致した文字列に対して何らかの処理が行われた結果になります。</span><span class="sxs-lookup"><span data-stu-id="39639-1321">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="39639-1322">置換文字列は、条件付き処理の結果として返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1322">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="39639-1323">メソッドは、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>メソッドを呼び出し、返さ<xref:System.Text.RegularExpressions.MatchCollection>れたコレクション<xref:System.Text.RegularExpressions.Match>内の各オブジェクトを`evaluator`デリゲートに渡すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1323">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="39639-1324">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1324">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1325">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1325">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-1326">`evaluator`パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。</span><span class="sxs-lookup"><span data-stu-id="39639-1326">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="39639-1327">カスタムメソッドには、 <xref:System.Text.RegularExpressions.MatchEvaluator>デリゲートに一致する次のシグネチャが必要です。</span><span class="sxs-lookup"><span data-stu-id="39639-1327">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="39639-1328">カスタムメソッドは、一致した入力を置き換える文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1328">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="39639-1329">この<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外は、置換操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1329">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="39639-1330">アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合は、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1330">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="39639-1331">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1331">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1332">次の例では、正規表現を使用して文字列から個々の単語を抽出し<xref:System.Text.RegularExpressions.MatchEvaluator> 、デリゲートを使用して`WordScramble` 、単語内の個々の文字をスクランブルするという名前のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-1332">The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word.</span></span> <span data-ttu-id="39639-1333">これを行うために`WordScramble` 、メソッドは、一致する文字を含む配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-1333">To do this, the `WordScramble` method creates an array that contains the characters in the match.</span></span> <span data-ttu-id="39639-1334">また、ランダムな浮動小数点数を設定する並列配列も作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-1334">It also creates a parallel array that it populates with random floating-point numbers.</span></span> <span data-ttu-id="39639-1335">配列は、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>メソッドを呼び出すことによって並べ替えられ、並べ替えられた配列<xref:System.String>はクラスコンストラクターへの引数として提供されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1335">The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor.</span></span> <span data-ttu-id="39639-1336">この新しく作成された文字列は、 `WordScramble`メソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1336">This newly created string is then returned by the `WordScramble` method.</span></span> <span data-ttu-id="39639-1337">正規表現パターン`\w+`は、1個以上の単語文字と一致します。正規表現エンジンは、空白文字など、単語以外の文字が見つかるまで、一致に文字を追加し続けます。</span><span class="sxs-lookup"><span data-stu-id="39639-1337">The regular expression pattern `\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace5.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace5.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1338">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1338">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1339"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1339"><paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1340">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1340">A time-out occurred.</span></span> <span data-ttu-id="39639-1341">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1341">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1342">このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-1342">This method times out after an interval that is equal to the default time-out value of the application domain in which it is called.</span></span> <span data-ttu-id="39639-1343">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1343">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-1344">パターン一致を評価および置換するための推奨される<see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />静的メソッドはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1344">The recommended static method for evaluating and replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</span></span></para></block>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1345">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1345">Substitutions</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1346">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1346">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, int count);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * System.Text.RegularExpressions.MatchEvaluator * int -&gt; string" Usage="regex.Replace (input, evaluator, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1347">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1347">The string to search for a match.</span></span></param>
        <param name="evaluator"><span data-ttu-id="39639-1348">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span><span class="sxs-lookup"><span data-stu-id="39639-1348">A custom method that examines each match and returns either the original matched string or a replacement string.</span></span></param>
        <param name="count"><span data-ttu-id="39639-1349">置換を実行する最大回数。</span><span class="sxs-lookup"><span data-stu-id="39639-1349">The maximum number of times the replacement will occur.</span></span></param>
        <summary><span data-ttu-id="39639-1350">指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1350">In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span></span></summary>
        <returns><span data-ttu-id="39639-1351">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1351">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1352">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1352">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1353"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかに該当する場合に正規表現の一致を置き換える場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="39639-1353">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="39639-1354">置換文字列は、正規表現の置換パターンで簡単に指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="39639-1354">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="39639-1355">置換文字列は、一致した文字列に対して何らかの処理が行われた結果になります。</span><span class="sxs-lookup"><span data-stu-id="39639-1355">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="39639-1356">置換文字列は、条件付き処理の結果として返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1356">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="39639-1357">メソッドは<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> 、メソッドを呼び出し、返され<xref:System.Text.RegularExpressions.MatchCollection>たコレクション内`count`の最初<xref:System.Text.RegularExpressions.Match>のオブジェクトを`evaluator`デリゲートに渡すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1357">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=nameWithType> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="39639-1358">正規表現は、現在<xref:System.Text.RegularExpressions.Regex>のオブジェクトのコンストラクターによって定義されたパターンです。</span><span class="sxs-lookup"><span data-stu-id="39639-1358">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="39639-1359">`evaluator`パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。</span><span class="sxs-lookup"><span data-stu-id="39639-1359">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="39639-1360">カスタムメソッドには、 <xref:System.Text.RegularExpressions.MatchEvaluator>デリゲートに一致する次のシグネチャが必要です。</span><span class="sxs-lookup"><span data-stu-id="39639-1360">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="39639-1361">カスタムメソッドは、一致した入力を置き換える文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1361">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="39639-1362">この例外は、置換操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-1362">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-1363">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1363">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-1364"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1364">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="39639-1365">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1365">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1366">次の例では、正規表現を使用して、リスト内の単語の半分を意図的に誤って間違えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1366">The following example uses a regular expression to deliberately misspell half of the words in a list.</span></span> <span data-ttu-id="39639-1367">この例では、 `\w*(ie|ei)\w*`正規表現を使用して、"ie" または "ei" という文字を含む単語を照合します。</span><span class="sxs-lookup"><span data-stu-id="39639-1367">It uses the regular expression `\w*(ie|ei)\w*` to match words that include the characters "ie" or "ei".</span></span> <span data-ttu-id="39639-1368">一致する単語の最初の半分を`ReverseLetter`メソッドに渡します。さらに、 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドを使用して、一致する文字列の "i" と "e" を逆にします。</span><span class="sxs-lookup"><span data-stu-id="39639-1368">It passes the first half of the matching words to the `ReverseLetter` method, which, in turn, uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to reverse "i" and "e" in the matched string.</span></span> <span data-ttu-id="39639-1369">残りの単語は変更されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1369">The remaining words remain unchanged.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace7.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace7.vb#11)]  
  
 <span data-ttu-id="39639-1370">正規表現 `\w*(ie|ei)\w*` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="39639-1370">The regular expression `\w*(ie|ei)\w*` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-1371">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1371">Pattern</span></span>|<span data-ttu-id="39639-1372">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1372">Description</span></span>|  
|-------------|-----------------|  
|`\w*`|<span data-ttu-id="39639-1373">0 個以上の単語に使用される文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1373">Match zero or more word characters.</span></span>|  
|<code>(ie&#124;ei)</code>|<span data-ttu-id="39639-1374">"Ie" または "ei" に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1374">Match either "ie" or "ei".</span></span>|  
|`\w*`|<span data-ttu-id="39639-1375">0 個以上の単語に使用される文字に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1375">Match zero or more word characters.</span></span>|  
  
 <span data-ttu-id="39639-1376">メソッドの正規表現`([ie])([ie])`パターンは、diphthong "ie" または "ei" の最初の "i" または "e" と一致し、その文字を最初のキャプチャグループに代入します。 `ReverseLetter`</span><span class="sxs-lookup"><span data-stu-id="39639-1376">The regular expression pattern `([ie])([ie])` in the `ReverseLetter` method matches the first "i" or "e" in the diphthong "ie" or "ei" and assigns the letter to the first capturing group.</span></span> <span data-ttu-id="39639-1377">2番目の "i" または "e" と一致し、2番目のキャプチャグループに文字を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="39639-1377">It matches the second "i" or "e" and assigns the letter to the second capturing group.</span></span> <span data-ttu-id="39639-1378">2つの文字は、置換パターン<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> `$2$1`を使用してメソッドを呼び出すことによって元に戻されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1378">The two characters are then reversed by calling the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> method with the replacement pattern `$2$1`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1379"><paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1379"><paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1380">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1380">A time-out occurred.</span></span> <span data-ttu-id="39639-1381">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1381">For more information about time-outs, see the Remarks section.</span></span></exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1382">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1382">Substitutions</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1383">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1383">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, replacement As String, count As Integer, startat As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::String ^ replacement, int count, int startat);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * int * int -&gt; string" Usage="regex.Replace (input, replacement, count, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1384">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1384">The string to search for a match.</span></span></param>
        <param name="replacement"><span data-ttu-id="39639-1385">置換文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1385">The replacement string.</span></span></param>
        <param name="count"><span data-ttu-id="39639-1386">置換を実行する最大回数。</span><span class="sxs-lookup"><span data-stu-id="39639-1386">Maximum number of times the replacement can occur.</span></span></param>
        <param name="startat"><span data-ttu-id="39639-1387">入力文字列中で検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="39639-1387">The character position in the input string where the search begins.</span></span></param>
        <summary><span data-ttu-id="39639-1388">指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</span><span class="sxs-lookup"><span data-stu-id="39639-1388">In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</span></span></summary>
        <returns><span data-ttu-id="39639-1389">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1389">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1390">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1390">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1391">一致の検索は、 `input` `startat`パラメーターで指定された位置にある文字列から開始されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1391">The search for matches starts in the `input` string at the position specified by the `startat` parameter.</span></span> <span data-ttu-id="39639-1392">正規表現は、現在<xref:System.Text.RegularExpressions.Regex>のオブジェクトのコンストラクターによって定義されたパターンです。</span><span class="sxs-lookup"><span data-stu-id="39639-1392">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span> <span data-ttu-id="39639-1393">が`count`負の値の場合、置換は文字列の末尾に続きます。</span><span class="sxs-lookup"><span data-stu-id="39639-1393">If `count` is negative, replacements continue to the end of the string.</span></span> <span data-ttu-id="39639-1394">が`count`一致の数を超えた場合は、すべての一致が置換されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1394">If `count` exceeds the number of matches, all matches are replaced.</span></span>  
  
 <span data-ttu-id="39639-1395">パラメーターでは、内の`input`各一致文字列を置き換える文字列を指定します。 `replacement`</span><span class="sxs-lookup"><span data-stu-id="39639-1395">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="39639-1396">`replacement`は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1396">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-1397">たとえば、置換パターン`a*${test}b`では、文字列 "a \*" の後に、 `test`キャプチャグループに一致する部分文字列 (存在する場合) と、その後に続く文字列 "b" が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1397">For example, the replacement pattern `a*${test}b` inserts the string "a\*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="39639-1398">\* 文字は、置換パターン内では、メタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1398">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39639-1399">置換は、置換パターンで認識される唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="39639-1399">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="39639-1400">他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1400">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="39639-1401">この例外は、置換操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-1401">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-1402">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1402">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-1403"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1403">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="39639-1404">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1404">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1405">次の例では、文字列の最初の行を除いて、すべてをダブルスペースにします。</span><span class="sxs-lookup"><span data-stu-id="39639-1405">The following example double-spaces all but the first line of a string.</span></span> <span data-ttu-id="39639-1406">これは、テキスト行と一致`^.*$`する正規表現パターンを定義し、 `Match.Index`文字列の<xref:System.Text.RegularExpressions.Regex.Match%28System.String%29>最初の行と一致するようにメソッドを呼び出し、プロパティと`Match.Count`プロパティを使用して2番目の開始位置を決定します。直線.</span><span class="sxs-lookup"><span data-stu-id="39639-1406">It defines a regular expression pattern, `^.*$`, that matches a line of text, calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> method to match the first line of the string, and uses the `Match.Index` and `Match.Count` properties to determine the starting position of the second line.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample9.vb#9)]  
  
 <span data-ttu-id="39639-1407">正規表現パターン `^.*$` は、次の表に示すように定義されています。</span><span class="sxs-lookup"><span data-stu-id="39639-1407">The regular expression pattern `^.*$` is defined as shown in the following table.</span></span>  
  
|<span data-ttu-id="39639-1408">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1408">Pattern</span></span>|<span data-ttu-id="39639-1409">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1409">Description</span></span>|  
|-------------|-----------------|  
|`^`|<span data-ttu-id="39639-1410">行の先頭に一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1410">Match the start of a line.</span></span> <span data-ttu-id="39639-1411">(オブジェクトは<xref:System.Text.RegularExpressions.Regex> <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType>オプションを使用してインスタンス化されていることに注意してください。それ以外の場合、この文字クラスは入力文字列の先頭にのみ一致します)。</span><span class="sxs-lookup"><span data-stu-id="39639-1411">(Note that the <xref:System.Text.RegularExpressions.Regex> object was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType> option; otherwise, this character class would only match the beginning of the input string.)</span></span>|  
|`.*`|<span data-ttu-id="39639-1412">任意の文字に0回以上一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1412">Match any character zero or more times.</span></span>|  
|`$`|<span data-ttu-id="39639-1413">行の末尾と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1413">Match the end of a line.</span></span> <span data-ttu-id="39639-1414">(オブジェクトは<xref:System.Text.RegularExpressions.Regex> <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType>オプションを使用してインスタンス化されていることに注意してください。それ以外の場合、この文字クラスは入力文字列の先頭にのみ一致します)。</span><span class="sxs-lookup"><span data-stu-id="39639-1414">(Note that the <xref:System.Text.RegularExpressions.Regex> object was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=nameWithType> option; otherwise, this character class would only match the beginning of the input string.)</span></span>|  
  
 <span data-ttu-id="39639-1415">置換文字列 (`vbCrLf + "$&"` `"\n$&"` Visual Basic ではC#) は、一致する文字列の前に新しい行を追加します。</span><span class="sxs-lookup"><span data-stu-id="39639-1415">The replacement string (`vbCrLf + "$&"` in Visual Basic, `"\n$&"` in C#) adds a new line before the matched string.</span></span> <span data-ttu-id="39639-1416">この例`\n`のはC# 、 C#コンパイラによって改行文字として解釈されることに注意してください。これは正規表現文字エスケープを表しません。</span><span class="sxs-lookup"><span data-stu-id="39639-1416">Note that `\n` in the C# example is interpreted as the newline character by the C# compiler; it does not represent a regular expression character escape.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1417"><paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1417"><paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1418"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1418"><paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1419">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1419">A time-out occurred.</span></span> <span data-ttu-id="39639-1420">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1420">For more information about time-outs, see the Remarks section.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1421">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1421">Substitutions</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1422">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1422">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String, options As RegexOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * System.Text.RegularExpressions.RegexOptions -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, replacement, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1423">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1423">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1424">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1424">The regular expression pattern to match.</span></span></param>
        <param name="replacement"><span data-ttu-id="39639-1425">置換文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1425">The replacement string.</span></span></param>
        <param name="options"><span data-ttu-id="39639-1426">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-1426">A bitwise combination of the enumeration values that provide options for matching.</span></span></param>
        <summary><span data-ttu-id="39639-1427">指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。</span><span class="sxs-lookup"><span data-stu-id="39639-1427">In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</span></span> <span data-ttu-id="39639-1428">指定したオプションで、一致操作を変更します。</span><span class="sxs-lookup"><span data-stu-id="39639-1428">Specified options modify the matching operation.</span></span></summary>
        <returns><span data-ttu-id="39639-1429">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1429">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1430"><paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1430">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1431">静的`Replace`メソッドは、指定された<xref:System.Text.RegularExpressions.Regex>正規表現パターンを使用してオブジェクトを構築し、 `Replace`インスタンスメソッドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1431">The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.</span></span>  
  
 <span data-ttu-id="39639-1432">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1432">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1433">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1433">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="39639-1434">パラメーターにを<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>指定した場合、一致の検索は入力文字列の末尾から開始され、左に移動します。それ以外の場合は、入力文字列の先頭から検索が開始され、右に移動します。 `options`</span><span class="sxs-lookup"><span data-stu-id="39639-1434">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="39639-1435">パラメーターでは、内の`input`各一致文字列を置き換える文字列を指定します。 `replacement`</span><span class="sxs-lookup"><span data-stu-id="39639-1435">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="39639-1436">`replacement`は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1436">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-1437">たとえば、置換パターン`a*${test}b`では、文字列 "a \*" の後に、 `test`キャプチャグループに一致する部分文字列 (存在する場合) と、その後に続く文字列 "b" が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1437">For example, the replacement pattern `a*${test}b` inserts the string "a\*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="39639-1438">\* 文字は、置換パターン内では、メタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1438">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39639-1439">置換は、置換パターンで認識される唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="39639-1439">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="39639-1440">他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1440">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="39639-1441">この<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外は、置換操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1441">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="39639-1442">アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合は、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1442">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="39639-1443">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1443">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1444">次の例では<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 、メソッドを使用して、UNC パスのローカルコンピューターとドライブ名をローカルファイルパスに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1444">The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> method to replace the local machine and drive names in a UNC path with a local file path.</span></span> <span data-ttu-id="39639-1445">この正規表現では<xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 、プロパティを使用してローカルコンピューターの名前を指定<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType>し、メソッドに論理ドライブの名前を含めます。</span><span class="sxs-lookup"><span data-stu-id="39639-1445">The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to include the name of the local computer, and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> method to include the names of the logical drives.</span></span> <span data-ttu-id="39639-1446">すべての正規表現文字列比較では、大文字と小文字は区別されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1446">All regular expression string comparisons are case-insensitive.</span></span> <span data-ttu-id="39639-1447">例を正しく実行するには、リテラル文字列 "MyMachine" をローカルコンピューター名に置き換える必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1447">To run the example successfully, you should replace the literal string "MyMachine" with your local machine name.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace4.vb#4)]  
  
 <span data-ttu-id="39639-1448">正規表現パターンは、次の式によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1448">The regular expression pattern is defined by the following expression:</span></span>  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 <span data-ttu-id="39639-1449">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-1449">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="39639-1450">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1450">Pattern</span></span>|<span data-ttu-id="39639-1451">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1451">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="39639-1452">`\\\\`|2つの連続する`\`円記号 () 文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1452">`\\\\`|Match two consecutive backslash (`\`) characters.</span></span> <span data-ttu-id="39639-1453">バックスラッシュ文字はエスケープ文字として解釈されるため、各円記号は別の円記号でエスケープする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1453">Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</span></span>|  
|`+ Environment.MachineName +`|<span data-ttu-id="39639-1454"><xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティによって返された文字列と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1454">Match the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property.</span></span>|  
|`(?:\.\w+)*`|<span data-ttu-id="39639-1455">ピリオド (`.`) 文字の後に1個以上の単語文字が続くパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1455">Match the period (`.`) character followed by one or more word characters.</span></span> <span data-ttu-id="39639-1456">この一致は、0回以上発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1456">This match can occur zero or more times.</span></span> <span data-ttu-id="39639-1457">一致した部分式はキャプチャされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1457">The matched subexpression is not captured.</span></span>|  
|<span data-ttu-id="39639-1458">`\\`|円記号 (`\`) 文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1458">`\\`|Match a backslash (`\`) character.</span></span>|  
|`([" + driveNames + "])`|<span data-ttu-id="39639-1459">個々のドライブ文字で構成される文字クラスと一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1459">Match the character class that consists of the individual drive letters.</span></span> <span data-ttu-id="39639-1460">この一致は最初にキャプチャされた部分式です。</span><span class="sxs-lookup"><span data-stu-id="39639-1460">This match is the first captured subexpression.</span></span>|  
|`\$`|<span data-ttu-id="39639-1461">リテラルドル記号 (`$`) 文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1461">Match the literal dollar sign (`$`) character.</span></span>|  
  
 <span data-ttu-id="39639-1462">置換パターン`$1`は、一致した文字列全体を最初にキャプチャされた部分式と置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1462">The replacement pattern `$1` replaces the entire match with the first captured subexpression.</span></span> <span data-ttu-id="39639-1463">つまり、UNC コンピューターとドライブ名はドライブ文字で置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="39639-1463">That is, it replaces the UNC machine and drive name with the drive letter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1464">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1464">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1465"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1465"><paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1466"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-1466"><paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1467">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1467">A time-out occurred.</span></span> <span data-ttu-id="39639-1468">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1468">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1469">このメソッドは、呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-1469">This method times out after an interval that is equal to the default time-out value of the application domain in which it is called.</span></span> <span data-ttu-id="39639-1470">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1470">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-1471">パターンマッチを置き換えるために推奨される静的<see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />メソッドはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1471">The recommended static method for replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</span></span></para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1472">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1472">Substitutions</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1473">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1473">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * System.Text.RegularExpressions.MatchEvaluator * System.Text.RegularExpressions.RegexOptions -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, evaluator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1474">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1474">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1475">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1475">The regular expression pattern to match.</span></span></param>
        <param name="evaluator"><span data-ttu-id="39639-1476">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span><span class="sxs-lookup"><span data-stu-id="39639-1476">A custom method that examines each match and returns either the original matched string or a replacement string.</span></span></param>
        <param name="options"><span data-ttu-id="39639-1477">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-1477">A bitwise combination of the enumeration values that provide options for matching.</span></span></param>
        <summary><span data-ttu-id="39639-1478">指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1478">In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span></span> <span data-ttu-id="39639-1479">指定したオプションで、一致操作を変更します。</span><span class="sxs-lookup"><span data-stu-id="39639-1479">Specified options modify the matching operation.</span></span></summary>
        <returns><span data-ttu-id="39639-1480">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1480">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1481"><paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1481">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1482">次<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>の条件のいずれかに該当する場合は、メソッドを使用して正規表現の一致を置き換えると便利です。</span><span class="sxs-lookup"><span data-stu-id="39639-1482">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method is useful for replacing a regular expression match in if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="39639-1483">置換文字列は、正規表現の置換パターンで簡単に指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="39639-1483">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="39639-1484">置換文字列は、一致した文字列に対して何らかの処理が行われた結果になります。</span><span class="sxs-lookup"><span data-stu-id="39639-1484">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="39639-1485">置換文字列は、条件付き処理の結果として返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1485">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="39639-1486">メソッドは、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドを呼び出し、返さ<xref:System.Text.RegularExpressions.MatchCollection>れたコレクション<xref:System.Text.RegularExpressions.Match>内の各オブジェクトを`evaluator`デリゲートに渡すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1486">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="39639-1487">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1487">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1488">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1488">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-1489">`evaluator`パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。</span><span class="sxs-lookup"><span data-stu-id="39639-1489">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="39639-1490">カスタムメソッドには、 <xref:System.Text.RegularExpressions.MatchEvaluator>デリゲートに一致する次のシグネチャが必要です。</span><span class="sxs-lookup"><span data-stu-id="39639-1490">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="39639-1491">カスタムメソッドは、一致した入力を置き換える文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1491">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="39639-1492">パラメーターにを<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>指定した場合、一致の検索は入力文字列の末尾から開始され、左に移動します。それ以外の場合は、入力文字列の先頭から検索が開始され、右に移動します。 `options`</span><span class="sxs-lookup"><span data-stu-id="39639-1492">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="39639-1493">この<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外は、置換操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1493">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="39639-1494">アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合は、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1494">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="39639-1495">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1495">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1496">次の例では、正規表現を使用して文字列から個々の単語を抽出し<xref:System.Text.RegularExpressions.MatchEvaluator> 、デリゲートを使用して`WordScramble` 、単語内の個々の文字をスクランブルするという名前のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-1496">The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word.</span></span> <span data-ttu-id="39639-1497">これを行うために`WordScramble` 、メソッドは、一致する文字を含む配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-1497">To do this, the `WordScramble` method creates an array that contains the characters in the match.</span></span> <span data-ttu-id="39639-1498">また、ランダムな浮動小数点数を設定する並列配列も作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-1498">It also creates a parallel array that it populates with random floating-point numbers.</span></span> <span data-ttu-id="39639-1499">配列は、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>メソッドを呼び出すことによって並べ替えられ、並べ替えられた配列<xref:System.String>はクラスコンストラクターへの引数として提供されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1499">The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor.</span></span> <span data-ttu-id="39639-1500">この新しく作成された文字列は、 `WordScramble`メソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1500">This newly created string is then returned by the `WordScramble` method.</span></span> <span data-ttu-id="39639-1501">正規表現パターン`\w+`は、1個以上の単語文字と一致します。正規表現エンジンは、空白文字など、単語以外の文字が見つかるまで、一致に文字を追加し続けます。</span><span class="sxs-lookup"><span data-stu-id="39639-1501">The regular expression pattern `\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character.</span></span> <span data-ttu-id="39639-1502">メソッドの<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29>呼び出しには、 <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType>正規表現エンジンによって正規表現パターン`\w+  # Matches all the characters in a word.`のコメントが無視されるようにオプションが含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-1502">The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> method includes the <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> option so that the comment in the regular expression pattern `\w+  # Matches all the characters in a word.` is ignored by the regular expression engine.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace6.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace6.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1503">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1503">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1504"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1504"><paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1505"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-1505"><paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1506">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1506">A time-out occurred.</span></span> <span data-ttu-id="39639-1507">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1507">For more information about time-outs, see the Remarks section.</span></span></exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1508">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1508">Substitutions</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1509">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1509">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (input As String, evaluator As MatchEvaluator, count As Integer, startat As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ input, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, int count, int startat);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * System.Text.RegularExpressions.MatchEvaluator * int * int -&gt; string" Usage="regex.Replace (input, evaluator, count, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1510">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1510">The string to search for a match.</span></span></param>
        <param name="evaluator"><span data-ttu-id="39639-1511">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span><span class="sxs-lookup"><span data-stu-id="39639-1511">A custom method that examines each match and returns either the original matched string or a replacement string.</span></span></param>
        <param name="count"><span data-ttu-id="39639-1512">置換を実行する最大回数。</span><span class="sxs-lookup"><span data-stu-id="39639-1512">The maximum number of times the replacement will occur.</span></span></param>
        <param name="startat"><span data-ttu-id="39639-1513">入力文字列中で検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="39639-1513">The character position in the input string where the search begins.</span></span></param>
        <summary><span data-ttu-id="39639-1514">指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1514">In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span></span></summary>
        <returns><span data-ttu-id="39639-1515">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1515">A new string that is identical to the input string, except that a replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1516">正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1516">If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1517"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかに該当する場合に正規表現の一致を置き換える場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="39639-1517">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="39639-1518">置換文字列は、正規表現の置換パターンで簡単に指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="39639-1518">The replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="39639-1519">置換文字列は、一致した文字列に対して何らかの処理が行われた結果になります。</span><span class="sxs-lookup"><span data-stu-id="39639-1519">The replacement string results from some processing done on the matched string.</span></span>  
  
-   <span data-ttu-id="39639-1520">置換文字列は、条件付き処理の結果として返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1520">The replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="39639-1521">メソッドは<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 、メソッドを呼び出し、返され<xref:System.Text.RegularExpressions.MatchCollection>たコレクション内`count`の最初<xref:System.Text.RegularExpressions.Match>のオブジェクトを`evaluator`デリゲートに渡すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1521">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method and passing the first `count`<xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="39639-1522">正規表現は、現在<xref:System.Text.RegularExpressions.Regex>のオブジェクトのコンストラクターによって定義されたパターンです。</span><span class="sxs-lookup"><span data-stu-id="39639-1522">The regular expression is the pattern defined by the constructor for the current <xref:System.Text.RegularExpressions.Regex> object.</span></span>  
  
 <span data-ttu-id="39639-1523">`evaluator`パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。</span><span class="sxs-lookup"><span data-stu-id="39639-1523">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="39639-1524">カスタムメソッドには、 <xref:System.Text.RegularExpressions.MatchEvaluator>デリゲートに一致する次のシグネチャが必要です。</span><span class="sxs-lookup"><span data-stu-id="39639-1524">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="39639-1525">カスタムメソッドは、一致した入力を置き換える文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1525">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="39639-1526">この例外は、置換操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト時間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-1526">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-1527">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1527">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-1528"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1528">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 <span data-ttu-id="39639-1529">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1529">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1530"><paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1530"><paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1531"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1531"><paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1532">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1532">A time-out occurred.</span></span> <span data-ttu-id="39639-1533">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1533">For more information about time-outs, see the Remarks section.</span></span></exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1534">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1534">Substitutions</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1535">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1535">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, replacement As String, options As RegexOptions, matchTimeout As TimeSpan) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::String ^ replacement, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, replacement, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="replacement" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1536">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1536">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1537">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1537">The regular expression pattern to match.</span></span></param>
        <param name="replacement"><span data-ttu-id="39639-1538">置換文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1538">The replacement string.</span></span></param>
        <param name="options"><span data-ttu-id="39639-1539">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-1539">A bitwise combination of the enumeration values that provide options for matching.</span></span></param>
        <param name="matchTimeout"><span data-ttu-id="39639-1540">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="39639-1540">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span></span></param>
        <summary><span data-ttu-id="39639-1541">指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。</span><span class="sxs-lookup"><span data-stu-id="39639-1541">In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</span></span> <span data-ttu-id="39639-1542">追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</span><span class="sxs-lookup"><span data-stu-id="39639-1542">Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</span></span></summary>
        <returns><span data-ttu-id="39639-1543">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1543">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1544"><paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1544">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1545">静的`Replace`メソッドは、指定された<xref:System.Text.RegularExpressions.Regex>正規表現パターンを使用してオブジェクトを構築し、 `Replace`インスタンスメソッドを呼び出すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1545">The static `Replace` methods are equivalent to constructing a <xref:System.Text.RegularExpressions.Regex> object with the specified regular expression pattern and calling the instance method `Replace`.</span></span>  
  
 <span data-ttu-id="39639-1546">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1546">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1547">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1547">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span> <span data-ttu-id="39639-1548">パラメーターにを<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>指定した場合、一致の検索は入力文字列の末尾から開始され、左に移動します。それ以外の場合は、入力文字列の先頭から検索が開始され、右に移動します。 `options`</span><span class="sxs-lookup"><span data-stu-id="39639-1548">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="39639-1549">パラメーターでは、内の`input`各一致文字列を置き換える文字列を指定します。 `replacement`</span><span class="sxs-lookup"><span data-stu-id="39639-1549">The `replacement` parameter specifies the string that is to replace each match in `input`.</span></span> <span data-ttu-id="39639-1550">`replacement`は、リテラルテキストと[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)の任意の組み合わせで構成できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1550">`replacement` can consist of any combination of literal text and [substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-1551">たとえば、置換パターン`a*${test}b`では、文字列 "a \*" の後に、 `test`キャプチャグループに一致する部分文字列 (存在する場合) と、その後に続く文字列 "b" が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1551">For example, the replacement pattern `a*${test}b` inserts the string "a\*" followed by the substring that is matched by the `test` capturing group, if any, followed by the string "b".</span></span> <span data-ttu-id="39639-1552">\* 文字は、置換パターン内では、メタ文字として認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1552">The \* character is not recognized as a metacharacter within a replacement pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39639-1553">置換は、置換パターンで認識される唯一の正規表現言語要素です。</span><span class="sxs-lookup"><span data-stu-id="39639-1553">Substitutions are the only regular expression language elements that are recognized in a replacement pattern.</span></span> <span data-ttu-id="39639-1554">他のすべての正規表現言語要素 ([文字エスケープ](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)を含む) は、正規表現パターンでのみ許可され、置換パターンでは認識されません。</span><span class="sxs-lookup"><span data-stu-id="39639-1554">All other regular expression language elements, including [character escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md), are allowed in regular expression patterns only and are not recognized in replacement patterns.</span></span>  
  
 <span data-ttu-id="39639-1555">パラメーター `matchTimeout`は、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現が、ほぼ一致する入力を処理するときに応答を停止することを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="39639-1555">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="39639-1556">詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1556">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-1557">この期間内に一致するものが見つからない場合、メソッドは<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="39639-1557">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-1558">`matchTimeout`メソッドを実行するアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="39639-1558">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 <span data-ttu-id="39639-1559">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1559">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1560">次の例では<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 、メソッドを使用して、UNC パスのローカルコンピューターとドライブ名をローカルファイルパスに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1560">The following example uses the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> method to replace the local machine and drive names in a UNC path with a local file path.</span></span> <span data-ttu-id="39639-1561">この正規表現では<xref:System.Environment.MachineName%2A?displayProperty=nameWithType> 、プロパティを使用してローカルコンピューターの名前を<xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType>指定し、メソッドを使用して論理ドライブの名前を含めています。</span><span class="sxs-lookup"><span data-stu-id="39639-1561">The regular expression uses the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to include the name of the local computer and the <xref:System.Environment.GetLogicalDrives%2A?displayProperty=nameWithType> method to include the names of the logical drives.</span></span> <span data-ttu-id="39639-1562">すべての正規表現文字列比較では大文字と小文字が区別されず、0.5 秒で一致するものが見つからない場合は、1回の置換操作がタイムアウトになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1562">All regular expression string comparisons are case-insensitive, and any single replacement operation times out if a match cannot be found in 0.5 second.</span></span> <span data-ttu-id="39639-1563">例を正しく実行するには、リテラル文字列 "MyMachine" をローカルコンピューター名に置き換える必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1563">To run the example successfully, you should replace the literal string "MyMachine" with your local machine name.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace12.cs#12)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace12.vb#12)]  
  
 <span data-ttu-id="39639-1564">正規表現パターンは、次の式によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1564">The regular expression pattern is defined by the following expression:</span></span>  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 <span data-ttu-id="39639-1565">次の表に、正規表現パターンがどのように解釈されるかを示します。</span><span class="sxs-lookup"><span data-stu-id="39639-1565">The following table shows how the regular expression pattern is interpreted.</span></span>  
  
|<span data-ttu-id="39639-1566">パターン</span><span class="sxs-lookup"><span data-stu-id="39639-1566">Pattern</span></span>|<span data-ttu-id="39639-1567">説明</span><span class="sxs-lookup"><span data-stu-id="39639-1567">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="39639-1568">`\\\\`|2つの連続する`\`円記号 () 文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1568">`\\\\`|Match two consecutive backslash (`\`) characters.</span></span> <span data-ttu-id="39639-1569">バックスラッシュ文字はエスケープ文字として解釈されるため、各円記号は別の円記号でエスケープする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1569">Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.</span></span>|  
|`+ Environment.MachineName +`|<span data-ttu-id="39639-1570"><xref:System.Environment.MachineName%2A?displayProperty=nameWithType>プロパティによって返された文字列と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1570">Match the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property.</span></span>|  
|`(?:\.\w+)*`|<span data-ttu-id="39639-1571">ピリオド (`.`) 文字の後に1個以上の単語文字が続くパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1571">Match the period (`.`) character followed by one or more word characters.</span></span> <span data-ttu-id="39639-1572">この一致は、0回以上発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1572">This match can occur zero or more times.</span></span> <span data-ttu-id="39639-1573">一致した部分式はキャプチャされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1573">The matched subexpression is not captured.</span></span>|  
|<span data-ttu-id="39639-1574">`\\`|円記号 (`\`) 文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1574">`\\`|Match a backslash (`\`) character.</span></span>|  
|`([" + driveNames + "])`|<span data-ttu-id="39639-1575">個々のドライブ文字で構成される文字クラスと一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1575">Match the character class that consists of the individual drive letters.</span></span> <span data-ttu-id="39639-1576">この一致は最初にキャプチャされた部分式です。</span><span class="sxs-lookup"><span data-stu-id="39639-1576">This match is the first captured subexpression.</span></span>|  
|`\$`|<span data-ttu-id="39639-1577">リテラルドル記号 (`$`) 文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="39639-1577">Match the literal dollar sign (`$`) character.</span></span>|  
  
 <span data-ttu-id="39639-1578">置換パターン`$1`は、一致した文字列全体を最初にキャプチャされた部分式と置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1578">The replacement pattern `$1` replaces the entire match with the first captured subexpression.</span></span> <span data-ttu-id="39639-1579">つまり、UNC コンピューターとドライブ名はドライブ文字で置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="39639-1579">That is, it replaces the UNC machine and drive name with the drive letter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1580">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1580">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1581"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1581"><paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1582"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-1582"><paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span></span>  
  
<span data-ttu-id="39639-1583">- または -</span><span class="sxs-lookup"><span data-stu-id="39639-1583">-or-</span></span> 
 <span data-ttu-id="39639-1584"><paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1584"><paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1585">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1585">A time-out occurred.</span></span> <span data-ttu-id="39639-1586">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1586">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1587"><paramref name="matchTimeout" />パラメーターには、2秒などの適切な値を設定することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="39639-1587">We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds.</span></span> <span data-ttu-id="39639-1588">を指定<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。</span><span class="sxs-lookup"><span data-stu-id="39639-1588">If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance.</span></span> <span data-ttu-id="39639-1589">ただし、次の条件下でのみタイムアウトを無効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1589">However, you should disable time-outs only under the following conditions:</span></span> 
<span data-ttu-id="39639-1590">-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1590">-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text.</span></span> <span data-ttu-id="39639-1591">これにより、ユーザーが動的に入力したテキストは除外されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1591">This excludes text that has been dynamically input by users.</span></span>  
  
<span data-ttu-id="39639-1592">-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1592">-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.</span></span>  
  
<span data-ttu-id="39639-1593">-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1593">-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</span></span></para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1594">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1594">Substitutions</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1595">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1595">Regular Expression Language Elements</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/34df1152-0b22-4a1c-a76c-3c28c47b70d8"><span data-ttu-id="39639-1596">バックトラッキング</span><span class="sxs-lookup"><span data-stu-id="39639-1596">Backtracking</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/618e5afb-3a97-440d-831a-70e4c526a51c"><span data-ttu-id="39639-1597">.NET Framework での正規表現に関するベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="39639-1597">Best Practices for Regular Expressions in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Replace (input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions, matchTimeout As TimeSpan) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Replace(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::MatchEvaluator ^ evaluator, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * System.Text.RegularExpressions.MatchEvaluator * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; string" Usage="System.Text.RegularExpressions.Regex.Replace (input, pattern, evaluator, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1598">一致する対象を検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1598">The string to search for a match.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1599">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1599">The regular expression pattern to match.</span></span></param>
        <param name="evaluator"><span data-ttu-id="39639-1600">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</span><span class="sxs-lookup"><span data-stu-id="39639-1600">A custom method that examines each match and returns either the original matched string or a replacement string.</span></span></param>
        <param name="options"><span data-ttu-id="39639-1601">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-1601">A bitwise combination of enumeration values that provide options for matching.</span></span></param>
        <param name="matchTimeout"><span data-ttu-id="39639-1602">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="39639-1602">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span></span></param>
        <summary><span data-ttu-id="39639-1603">指定した入力文字列内で、指定した正規表現に一致するすべての部分文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1603">In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</span></span> <span data-ttu-id="39639-1604">追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</span><span class="sxs-lookup"><span data-stu-id="39639-1604">Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</span></span></summary>
        <returns><span data-ttu-id="39639-1605">一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1605">A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</span></span> <span data-ttu-id="39639-1606"><paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1606">If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1607"><xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドは、次の条件のいずれかに該当する場合に正規表現の一致を置き換える場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="39639-1607">The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method is useful for replacing a regular expression match if any of the following conditions is true:</span></span>  
  
-   <span data-ttu-id="39639-1608">置換文字列を正規表現置換パターンで簡単に指定できない場合は。</span><span class="sxs-lookup"><span data-stu-id="39639-1608">If the replacement string cannot readily be specified by a regular expression replacement pattern.</span></span>  
  
-   <span data-ttu-id="39639-1609">置換文字列が、一致した文字列に対して実行された処理の結果である場合は。</span><span class="sxs-lookup"><span data-stu-id="39639-1609">If the replacement string results from some processing performed on the matched string.</span></span>  
  
-   <span data-ttu-id="39639-1610">置換文字列が条件付き処理によって生成される場合は。</span><span class="sxs-lookup"><span data-stu-id="39639-1610">If the replacement string results from conditional processing.</span></span>  
  
 <span data-ttu-id="39639-1611">メソッドは、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType>メソッドを呼び出し、返さ<xref:System.Text.RegularExpressions.MatchCollection>れたコレクション<xref:System.Text.RegularExpressions.Match>内の各オブジェクトを`evaluator`デリゲートに渡すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="39639-1611">The method is equivalent to calling the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=nameWithType> method and passing each <xref:System.Text.RegularExpressions.Match> object in the returned <xref:System.Text.RegularExpressions.MatchCollection> collection to the `evaluator` delegate.</span></span>  
  
 <span data-ttu-id="39639-1612">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1612">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1613">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1613">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 <span data-ttu-id="39639-1614">`evaluator`パラメーターは、定義したカスタムメソッドのデリゲートであり、それぞれの一致を調べます。</span><span class="sxs-lookup"><span data-stu-id="39639-1614">The `evaluator` parameter is the delegate for a custom method that you define and that examines each match.</span></span> <span data-ttu-id="39639-1615">カスタムメソッドには、 <xref:System.Text.RegularExpressions.MatchEvaluator>デリゲートに一致する次のシグネチャが必要です。</span><span class="sxs-lookup"><span data-stu-id="39639-1615">The custom method must have the following signature to match the <xref:System.Text.RegularExpressions.MatchEvaluator> delegate.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 <span data-ttu-id="39639-1616">カスタムメソッドは、一致した入力を置き換える文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1616">Your custom method returns a string that replaces the matched input.</span></span>  
  
 <span data-ttu-id="39639-1617">パラメーターにを<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>指定した場合、一致の検索は入力文字列の末尾から開始され、左に移動します。それ以外の場合は、入力文字列の先頭から検索が開始され、右に移動します。 `options`</span><span class="sxs-lookup"><span data-stu-id="39639-1617">If you specify <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> for the `options` parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.</span></span>  
  
 <span data-ttu-id="39639-1618">パラメーター `matchTimeout`は、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現は、"近い一致を含む入力を処理するときに応答を停止します。" になります。</span><span class="sxs-lookup"><span data-stu-id="39639-1618">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to "stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="39639-1619">詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1619">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-1620">この期間内に一致するものが見つからない場合、メソッドは<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="39639-1620">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-1621">`matchTimeout`メソッドを実行するアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="39639-1621">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 <span data-ttu-id="39639-1622">一致するものが`input`ない場合、メソッドは変更なしで返されるため<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 、メソッドを使用して、メソッドが入力文字列に置換を行ったかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1622">Because the method returns `input` unchanged if there is no match, you can use the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to determine whether the method has made any replacements to the input string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39639-1623">次の例では、正規表現を使用して文字列から個々の単語を抽出し<xref:System.Text.RegularExpressions.MatchEvaluator> 、デリゲートを使用して`WordScramble` 、単語内の個々の文字をスクランブルするという名前のメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="39639-1623">The following example uses a regular expression to extract the individual words from a string, and then uses a <xref:System.Text.RegularExpressions.MatchEvaluator> delegate to call a method named `WordScramble` that scrambles the individual letters in the word.</span></span> <span data-ttu-id="39639-1624">これを行うために`WordScramble` 、メソッドは、一致する文字を含む配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-1624">To do this, the `WordScramble` method creates an array that contains the characters in the match.</span></span> <span data-ttu-id="39639-1625">また、ランダムな浮動小数点数を設定する並列配列も作成します。</span><span class="sxs-lookup"><span data-stu-id="39639-1625">It also creates a parallel array that it populates with random floating-point numbers.</span></span> <span data-ttu-id="39639-1626">配列は、 <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType>メソッドを呼び出すことによって並べ替えられ、並べ替えられた配列<xref:System.String>はクラスコンストラクターへの引数として提供されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1626">The arrays are sorted by calling the <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method, and the sorted array is provided as an argument to a <xref:System.String> class constructor.</span></span> <span data-ttu-id="39639-1627">この新しく作成された文字列は、 `WordScramble`メソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1627">This newly created string is then returned by the `WordScramble` method.</span></span> <span data-ttu-id="39639-1628">正規表現パターン`\w+`は、1個以上の単語文字と一致します。正規表現エンジンは、空白文字など、単語以外の文字が見つかるまで、一致に文字を追加し続けます。</span><span class="sxs-lookup"><span data-stu-id="39639-1628">The regular expression pattern `\w+` matches one or more word characters; the regular expression engine will continue to add characters to the match until it encounters a non-word character, such as a white-space character.</span></span> <span data-ttu-id="39639-1629">メソッドの<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29>呼び出しには、 <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType>正規表現エンジンによって正規表現パターン`\w+  # Matches all the characters in a word.`のコメントが無視されるようにオプションが含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-1629">The call to the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29> method includes the <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=nameWithType> option so that the comment in the regular expression pattern `\w+  # Matches all the characters in a word.` is ignored by the regular expression engine.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace13.cs#13)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace13.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1630">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1630">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1631"><paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1631"><paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1632"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-1632"><paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span></span>  
  
<span data-ttu-id="39639-1633">- または -</span><span class="sxs-lookup"><span data-stu-id="39639-1633">-or-</span></span> 
 <span data-ttu-id="39639-1634"><paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1634"><paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1635">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1635">A time-out occurred.</span></span> <span data-ttu-id="39639-1636">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1636">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1637"><paramref name="matchTimeout" />パラメーターには、2秒などの適切な値を設定することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="39639-1637">We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds.</span></span> <span data-ttu-id="39639-1638">を指定<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。</span><span class="sxs-lookup"><span data-stu-id="39639-1638">If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance.</span></span> <span data-ttu-id="39639-1639">ただし、次の条件下でのみタイムアウトを無効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1639">However, you should disable time-outs only under the following conditions:</span></span> 
<span data-ttu-id="39639-1640">-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1640">-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text.</span></span> <span data-ttu-id="39639-1641">これにより、ユーザーが動的に入力したテキストは除外されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1641">This excludes text that has been dynamically input by users.</span></span>  
  
<span data-ttu-id="39639-1642">-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1642">-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.</span></span>  
  
<span data-ttu-id="39639-1643">-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1643">-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</span></span></para></block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e"><span data-ttu-id="39639-1644">置換</span><span class="sxs-lookup"><span data-stu-id="39639-1644">Substitutions</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1645">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1645">Regular Expression Language Elements</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/34df1152-0b22-4a1c-a76c-3c28c47b70d8"><span data-ttu-id="39639-1646">バックトラッキング</span><span class="sxs-lookup"><span data-stu-id="39639-1646">Backtracking</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/618e5afb-3a97-440d-831a-70e4c526a51c"><span data-ttu-id="39639-1647">.NET Framework での正規表現に関するベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="39639-1647">Best Practices for Regular Expressions in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeft { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : bool" Usage="System.Text.RegularExpressions.Regex.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-1648">正規表現が右から左の方向に検索するかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="39639-1648">Gets a value that indicates whether the regular expression searches from right to left.</span></span></summary>
        <value><span data-ttu-id="39639-1649">正規表現が右から左の方向に検索する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="39639-1649"><see langword="true" /> if the regular expression searches from right to left; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1650"><xref:System.Text.RegularExpressions.Regex.RightToLeft%2A>インスタンスが `true` オプションを使用して作成されたかどうかを示します。 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>  <xref:System.Text.RegularExpressions.Regex></span><span class="sxs-lookup"><span data-stu-id="39639-1650"><xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> is `true` if the <xref:System.Text.RegularExpressions.Regex> instance was created with the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> option.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="roptions">
      <MemberSignature Language="C#" Value="protected internal System.Text.RegularExpressions.RegexOptions roptions;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.Text.RegularExpressions.RegexOptions roptions" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.roptions" />
      <MemberSignature Language="VB.NET" Value="Protected Friend roptions As RegexOptions " />
      <MemberSignature Language="C++ CLI" Value="protected public: System::Text::RegularExpressions::RegexOptions roptions;" />
      <MemberSignature Language="F#" Value="val mutable roptions : System.Text.RegularExpressions.RegexOptions" Usage="System.Text.RegularExpressions.Regex.roptions" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="39639-1651"><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1651">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="39639-1652">正規表現の一致箇所によって定義される位置で、入力文字列を部分文字列の配列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1652">Splits an input string into an array of substrings at the positions defined by a regular expression match.</span></span></summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1653">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1653">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.Split : string -&gt; string[]" Usage="regex.Split input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1654">分割対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1654">The string to split.</span></span></param>
        <summary><span data-ttu-id="39639-1655"><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現パターンによって定義されている位置で入力文字列を分割し、部分文字列の配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="39639-1655">Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="39639-1656">文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="39639-1656">An array of strings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1657">メソッドは<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドに似ていますが、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="39639-1657">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="39639-1658">文字列は、できるだけ多くの回数だけ分割されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1658">The string is split as many times as possible.</span></span> <span data-ttu-id="39639-1659">区切り記号が見つからない場合、戻り値には、元の入力文字列を値として持つ1つの要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1659">If no delimiter is found, the return value contains one element whose value is the original input string.</span></span>  
  
 <span data-ttu-id="39639-1660">複数の一致が互いに隣接している場合は、空の文字列が配列に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1660">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="39639-1661">たとえば、1つのハイフンに文字列を分割すると、次のコードに示すように、返された配列には隣接する2つのハイフンが見つかった位置に空の文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1661">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split1.vb#1)]  
  
 <span data-ttu-id="39639-1662">入力文字列の先頭または末尾に一致が見つかった場合は、返された配列の先頭または末尾に空の文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1662">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="39639-1663">次の例では、正規表現`\d+`パターンを使用して、入力文字列を数値文字で分割しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1663">The following example uses the regular expression pattern `\d+` to split an input string on numeric characters.</span></span> <span data-ttu-id="39639-1664">文字列の先頭と末尾が一致する数字であるため、返された配列の最初の要素と最後の<xref:System.String.Empty?displayProperty=nameWithType>要素の値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1664">Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split21.cs#21)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split21.vb#21)]  
  
 <span data-ttu-id="39639-1665"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>式でキャプチャのかっこを使用する場合、キャプチャされたテキストは結果の文字列の配列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1665">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="39639-1666">たとえば、キャプチャするかっこ内に配置されたハイフンで文字列 "plum" を分割した場合、返される配列にはハイフンを含む文字列要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1666">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split2.vb#2)]  
  
 <span data-ttu-id="39639-1667">ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="39639-1667">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="39639-1668">.NET Framework 1.0 および1.1 では、キャプチャのかっこの最初のセット内に一致が見つからない場合、キャプチャされた追加のかっこからキャプチャされたテキストは、返される配列には含まれません。</span><span class="sxs-lookup"><span data-stu-id="39639-1668">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="39639-1669">.NET Framework 2.0 以降では、キャプチャされたすべてのテキストも返された配列に追加されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1669">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="39639-1670">たとえば、次のコードでは、2組のキャプチャかっこを使用して、日付の区切り文字を含む日付の要素を日付文字列から抽出しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1670">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="39639-1671">キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットはスラッシュをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="39639-1671">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="39639-1672">コード例をコンパイルして .NET Framework 1.0 または1.1 の下で実行すると、スラッシュ文字は除外されます。コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合は、それが含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1672">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split3.vb#3)]  
  
 <span data-ttu-id="39639-1673">正規表現が空の文字列と一致する場合<xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> 、は、すべての場所で空の文字列の区切り記号が見つかるため、文字列を1文字の文字列の配列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1673">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="39639-1674">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="39639-1674">For example:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split11.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split11.vb#11)]  
  
 <span data-ttu-id="39639-1675">返された配列には、配列の先頭と末尾に空の文字列も含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1675">Note that the returned array also includes an empty string at the beginning and end of the array.</span></span>  
  
 <span data-ttu-id="39639-1676">この例外は、分割操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト期間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-1676">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-1677">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1677">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-1678"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1678">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1679"><paramref name="input" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-1679"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1680">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1680">A time-out occurred.</span></span> <span data-ttu-id="39639-1681">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1681">For more information about time-outs, see the Remarks section.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1682">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1682">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, count As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int count);" />
      <MemberSignature Language="F#" Value="member this.Split : string * int -&gt; string[]" Usage="regex.Split (input, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1683">分割対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1683">The string to be split.</span></span></param>
        <param name="count"><span data-ttu-id="39639-1684">分割を実行する最大回数。</span><span class="sxs-lookup"><span data-stu-id="39639-1684">The maximum number of times the split can occur.</span></span></param>
        <summary><span data-ttu-id="39639-1685"><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現で定義されている位置で、入力文字列を指定されている最大回数だけ分割し、部分文字列の配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="39639-1685">Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="39639-1686">文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="39639-1686">An array of strings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1687">メソッドは<xref:System.String.Split%2A?displayProperty=nameWithType>メソッドに似ていますが、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="39639-1687">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%2A?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="39639-1688">パラメーター `count`は、 `input`文字列を分割できる部分文字列の最大数を指定します。最後の文字列には、文字列の解除の剰余が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1688">The `count` parameter specifies the maximum number of substrings into which the `input` string can be split; the last string contains the unsplit remainder of the string.</span></span> <span data-ttu-id="39639-1689">値`count`を0に設定すると、既定の動作が可能な限り数だけ分割されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1689">A `count` value of zero provides the default behavior of splitting as many times as possible.</span></span>  
  
 <span data-ttu-id="39639-1690">複数の一致が互いに隣接している場合、またはの`input`先頭または末尾に一致が検出され、見つかった一致の数が少なくとも`count`2 未満の場合は、空の文字列が配列に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1690">If multiple matches are adjacent to one another or if a match is found at the beginning or end of `input`, and the number of matches found is at least two less than `count`, an empty string is inserted into the array.</span></span> <span data-ttu-id="39639-1691">つまり、入力文字列の先頭または末尾にある隣接する一致または一致からの結果として返される空の文字列は、一致した`count`部分文字列の数がと等しいかどうかを判断するためにカウントされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1691">That is, empty strings that result from adjacent matches or from matches at the beginning or end of the input string are counted in determining whether the number of matched substrings equals `count`.</span></span> <span data-ttu-id="39639-1692">次の例では、正規表現`/d+`を使用して、1桁以上の10進数を含む入力文字列を最大3つの部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1692">In the following example, the regular expression `/d+` is used to split an input string that includes one or more decimal digits into a maximum of three substrings.</span></span> <span data-ttu-id="39639-1693">入力文字列の先頭が正規表現パターンに一致するため、最初の配列要素に<xref:System.String.Empty?displayProperty=nameWithType>はが含まれ、2番目の配列要素には入力文字列内の最初のアルファベット文字セットが格納され、3番目の文字には文字列の残りの部分が含まれます。これは3番目の一致の後に続きます。</span><span class="sxs-lookup"><span data-stu-id="39639-1693">Because the beginning of the input string matches the regular expression pattern, the first array element contains <xref:System.String.Empty?displayProperty=nameWithType>, the second contains the first set of alphabetic characters in the input string, and the third contains the remainder of the string that follows the third match.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split25.cs#25)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split25.vb#25)]  
  
 <span data-ttu-id="39639-1694">正規表現でのキャプチャのかっこを使用する場合、キャプチャされたテキストは分割文字列の配列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1694">If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings.</span></span> <span data-ttu-id="39639-1695">ただし、キャプチャしたテキストを含む配列要素は、一致した数に達し`count`たかどうかを判断するためにカウントされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1695">However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`.</span></span> <span data-ttu-id="39639-1696">たとえば、文字列 "apricot-plum" を最大4つの部分文字列に分割すると、次のコードに示すように、7要素の配列が生成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1696">For example, splitting the string "apple-apricot-plum-pear-banana" into a maximum of four substrings results in a seven-element array, as the following code shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split4.vb#4)]  
  
 <span data-ttu-id="39639-1697">ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="39639-1697">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="39639-1698">.NET Framework 1.0 および1.1 では、キャプチャされた最初のかっこのセットからキャプチャされたテキストだけが、返された配列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1698">In the .NET Framework 1.0 and 1.1, only captured text from the first set of capturing parentheses is included in the returned array.</span></span> <span data-ttu-id="39639-1699">.NET Framework 2.0 以降では、キャプチャされたすべてのテキストが返された配列に追加されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1699">Starting with the .NET Framework 2.0, all captured text is added to the returned array.</span></span> <span data-ttu-id="39639-1700">ただし、キャプチャされたテキストを含む、返された配列内の要素は、一致した部分`count`文字列の数がと等しいかどうかを判断するためにカウントされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1700">However, elements in the returned array that contain captured text are not counted in determining whether the number of matched substrings equals `count`.</span></span> <span data-ttu-id="39639-1701">たとえば、次のコードでは、正規表現は2セットのキャプチャかっこを使用して、日付文字列から日付の要素を抽出します。</span><span class="sxs-lookup"><span data-stu-id="39639-1701">For example, in the following code, a regular expression uses two sets of capturing parentheses to extract the elements of a date from a date string.</span></span> <span data-ttu-id="39639-1702">キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットはスラッシュをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="39639-1702">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="39639-1703">次に、 <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29>メソッドを呼び出すと、返される配列の中で最大2つの要素が指定されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1703">The call to the <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> method then specifies a maximum of two elements in the returned array.</span></span> <span data-ttu-id="39639-1704">コード例がコンパイルされ、.NET Framework 1.0 または1.1 の下で実行される場合、メソッドは2要素の文字列配列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1704">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, the method returns a two-element string array.</span></span> <span data-ttu-id="39639-1705">コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合、メソッドは3要素の文字列配列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1705">If it is compiled and run under the .NET Framework 2.0 or later versions, the method returns a three-element string array.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split5.vb#5)]  
  
 <span data-ttu-id="39639-1706">正規表現が空の文字列と一致する場合<xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> 、は、すべての場所で空の文字列の区切り記号が見つかるため、文字列を1文字の文字列の配列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1706">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="39639-1707">次の例では、入力文字列に含まれるのと同じ数の要素に文字列 "characters" を分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1707">The following example splits the string "characters" into as many elements as there are in the input string.</span></span> <span data-ttu-id="39639-1708">Null 文字列は入力文字列の先頭に一致するので、返された配列の先頭に null 文字列が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1708">Because the null string matches the beginning of the input string, a null string is inserted at the beginning of the returned array.</span></span> <span data-ttu-id="39639-1709">これにより、10番目の要素は入力文字列の末尾にある2つの文字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1709">This causes the tenth element to consist of the two characters at the end of the input string.</span></span>  
  
 [!code-vb[System.Text.RegularExpressions.Regex.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split12.vb#12)]  
  
 <span data-ttu-id="39639-1710">この例外は、分割操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト期間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-1710">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-1711">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1711">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-1712"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1712">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1713"><paramref name="input" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-1713"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1714">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1714">A time-out occurred.</span></span> <span data-ttu-id="39639-1715">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1715">For more information about time-outs, see the Remarks section.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1716">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1716">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern);" />
      <MemberSignature Language="F#" Value="static member Split : string * string -&gt; string[]" Usage="System.Text.RegularExpressions.Regex.Split (input, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1717">分割対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1717">The string to split.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1718">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1718">The regular expression pattern to match.</span></span></param>
        <summary><span data-ttu-id="39639-1719">正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1719">Splits an input string into an array of substrings at the positions defined by a regular expression pattern.</span></span></summary>
        <returns><span data-ttu-id="39639-1720">文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="39639-1720">An array of strings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1721">メソッドは<xref:System.String.Split%2A?displayProperty=nameWithType>メソッドに似ていますが、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="39639-1721">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%2A?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="39639-1722">文字列`input`は、できるだけ多くの回数だけ分割されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1722">The `input` string is split as many times as possible.</span></span> <span data-ttu-id="39639-1723">が`pattern` 文字列 `input` 内に見つからない場合、戻り値には、元`input`の文字列を値とする1つの要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1723">If `pattern` is not found in the `input` string, the return value contains one element whose value is the original `input` string.</span></span>  
  
 <span data-ttu-id="39639-1724">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1724">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1725">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1725">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="39639-1726">静的<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドの呼び出しで使用されるコンパイル済みの正規表現は、自動的にキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1726">Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached.</span></span> <span data-ttu-id="39639-1727">コンパイルされた正規表現の有効期間を自分で管理<xref:System.Text.RegularExpressions.Regex.Split%2A>するには、インスタンスメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-1727">To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.</span></span>  
  
 <span data-ttu-id="39639-1728">複数の一致が互いに隣接している場合は、空の文字列が配列に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1728">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="39639-1729">たとえば、1つのハイフンに文字列を分割すると、次のコードに示すように、返された配列には隣接する2つのハイフンが見つかった位置に空の文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1729">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split8.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split8.vb#8)]  
  
 <span data-ttu-id="39639-1730">入力文字列の先頭または末尾に一致が見つかった場合は、返された配列の先頭または末尾に空の文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1730">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="39639-1731">次の例では、正規表現`\d+`パターンを使用して、入力文字列を数値文字で分割しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1731">The following example uses the regular expression pattern `\d+` to split an input string on numeric characters.</span></span> <span data-ttu-id="39639-1732">文字列の先頭と末尾が一致する数字であるため、返された配列の最初の要素と最後の<xref:System.String.Empty?displayProperty=nameWithType>要素の値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1732">Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split22.cs#22)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split22.vb#22)]  
  
 <span data-ttu-id="39639-1733"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>式でキャプチャのかっこを使用する場合、キャプチャされたテキストは結果の文字列の配列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1733">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="39639-1734">たとえば、キャプチャするかっこ内に配置されたハイフンで文字列 "plum" を分割した場合、返される配列にはハイフンを含む文字列要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1734">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 <span data-ttu-id="39639-1735">ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="39639-1735">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="39639-1736">.NET Framework 1.0 および1.1 では、キャプチャのかっこの最初のセット内に一致が見つからない場合、キャプチャされた追加のかっこからキャプチャされたテキストは、返される配列には含まれません。</span><span class="sxs-lookup"><span data-stu-id="39639-1736">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="39639-1737">.NET Framework 2.0 以降では、キャプチャされたすべてのテキストも返された配列に追加されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1737">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="39639-1738">たとえば、次のコードでは、2組のキャプチャかっこを使用して、日付の区切り文字を含む日付の要素を日付文字列から抽出しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1738">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="39639-1739">キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットはスラッシュをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="39639-1739">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="39639-1740">コード例をコンパイルして .NET Framework 1.0 または1.1 の下で実行すると、スラッシュ文字は除外されます。コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合は、それが含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1740">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 <span data-ttu-id="39639-1741">正規表現が空の文字列と一致する場合<xref:System.Text.RegularExpressions.Regex.Split%2A> 、は、すべての場所で空の文字列の区切り記号が見つかるため、文字列を1文字の文字列の配列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1741">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="39639-1742">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="39639-1742">For example:</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split13.cs#13)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split13.vb#13)]  
  
 <span data-ttu-id="39639-1743">返された配列には、配列の先頭と末尾に空の文字列も含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1743">Note that the returned array also includes an empty string at the beginning and end of the array.</span></span>  
  
 <span data-ttu-id="39639-1744">この<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外は、split 操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1744">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="39639-1745">アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合は、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1745">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1746">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1746">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1747"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1747"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1748">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1748">A time-out occurred.</span></span> <span data-ttu-id="39639-1749">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1749">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1750">このメソッドは、メソッドが呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-1750">This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called.</span></span> <span data-ttu-id="39639-1751">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1751">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-1752">パターン一致でテキストを分割するために推奨される<see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />静的メソッドはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1752">The recommended static method for splitting text on a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1753">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1753">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, count As Integer, startat As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int count, int startat);" />
      <MemberSignature Language="F#" Value="member this.Split : string * int * int -&gt; string[]" Usage="regex.Split (input, count, startat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1754">分割対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1754">The string to be split.</span></span></param>
        <param name="count"><span data-ttu-id="39639-1755">分割を実行する最大回数。</span><span class="sxs-lookup"><span data-stu-id="39639-1755">The maximum number of times the split can occur.</span></span></param>
        <param name="startat"><span data-ttu-id="39639-1756">入力文字列中で検索を開始する文字位置。</span><span class="sxs-lookup"><span data-stu-id="39639-1756">The character position in the input string where the search will begin.</span></span></param>
        <summary><span data-ttu-id="39639-1757"><see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現で定義されている位置で、入力文字列を指定されている最大回数だけ分割し、部分文字列の配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="39639-1757">Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</span></span> <span data-ttu-id="39639-1758">正規表現パターンの検索は、入力文字列の指定した文字位置から開始します。</span><span class="sxs-lookup"><span data-stu-id="39639-1758">The search for the regular expression pattern starts at a specified character position in the input string.</span></span></summary>
        <returns><span data-ttu-id="39639-1759">文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="39639-1759">An array of strings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1760">メソッドは<xref:System.String.Split%2A?displayProperty=nameWithType>メソッドに似ていますが、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="39639-1760">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%2A?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="39639-1761">パラメーター `count`は、 `input`文字列が分割される部分文字列の最大数を指定します。最後の文字列には、文字列の解除の剰余が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1761">The `count` parameter specifies the maximum number of substrings into which the `input` string is split; the last string contains the unsplit remainder of the string.</span></span> <span data-ttu-id="39639-1762">値`count`を0に設定すると、既定の動作が可能な限り数だけ分割されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1762">A `count` value of zero provides the default behavior of splitting as many times as possible.</span></span> <span data-ttu-id="39639-1763">パラメーター `startat`は、最初の区切り記号の検索を開始するポイントを定義します (これは先頭の空白をスキップするために使用できます)。</span><span class="sxs-lookup"><span data-stu-id="39639-1763">The `startat` parameter defines the point at which the search for the first delimiter begins (this can be used for skipping leading white space).</span></span>  
  
 <span data-ttu-id="39639-1764">文字列の`count`+ 1 位置から一致するものが見つからない場合、メソッドは`input`文字列を含む1つの要素の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1764">If no matches are found from the `count`+1 position in the string, the method returns a one-element array that contains the `input` string.</span></span> <span data-ttu-id="39639-1765">1つ以上の一致が見つかった場合、返された配列の最初の要素には、最初の文字から一致する前の1文字までの文字列の最初の部分が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1765">If one or more matches are found, the first element of the returned array contains the first portion of the string from the first character up to one character before the match.</span></span>  
  
 <span data-ttu-id="39639-1766">複数の一致が互いに隣接していて、見つかった一致の数が少なくと`count`も2未満の場合は、空の文字列が配列に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1766">If multiple matches are adjacent to one another and the number of matches found is at least two less than `count`, an empty string is inserted into the array.</span></span> <span data-ttu-id="39639-1767">同様に、文字列の最初の文字`startat`であるで一致が見つかった場合、返された配列の最初の要素は空の文字列になります。</span><span class="sxs-lookup"><span data-stu-id="39639-1767">Similarly, if a match is found at `startat`, which is the first character in the string, the first element of the returned array is an empty string.</span></span> <span data-ttu-id="39639-1768">つまり、隣接する一致の結果として返される空の文字列は、一致した部分`count`文字列の数がと等しいかどうかを判断するためにカウントされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1768">That is, empty strings that result from adjacent matches are counted in determining whether the number of matched substrings equals `count`.</span></span> <span data-ttu-id="39639-1769">次の例では、正規表現`\d+`を使用して、文字列内の数字の最初の部分文字列の開始位置を検索し、その位置から最大3回文字列を分割しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1769">In the following example, the regular expression `\d+` is used to find the starting position of the first substring of numeric characters in a string, and then to split the string a maximum of three times starting at that position.</span></span> <span data-ttu-id="39639-1770">正規表現パターンは入力文字列の先頭に一致するので、返される文字列配列は、空の文字列、5文字のアルファベットの文字列、および文字列の残りの部分で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1770">Because the regular expression pattern matches the beginning of the input string, the returned string array consists of an empty string, a five-character alphabetic string, and the remainder of the string,</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split26.cs#26)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split26.vb#26)]  
  
 <span data-ttu-id="39639-1771">正規表現でのキャプチャのかっこを使用する場合、キャプチャされたテキストは分割文字列の配列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1771">If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings.</span></span> <span data-ttu-id="39639-1772">ただし、キャプチャしたテキストを含む配列要素は、一致した数に達し`count`たかどうかを判断するためにカウントされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1772">However, any array elements that contain captured text are not counted in determining whether the number of matches has reached `count`.</span></span> <span data-ttu-id="39639-1773">たとえば、文字列 ' "apricot-plum-ザクロ-ピーチ" を文字列の15文字目から最大4つの部分文字列に分割すると、次のコードに示すように、7つの要素から成る配列が生成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1773">For example, splitting the string '"apple-apricot-plum-pear-pomegranate-pineapple-peach" into a maximum of four substrings beginning at character 15 in the string results in a seven-element array, as the following code shows.</span></span>  
  
 [!code-vb[System.Text.RegularExpressions.Regex.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split6.vb#6)]  
  
 <span data-ttu-id="39639-1774">ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="39639-1774">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="39639-1775">.NET Framework 1.0 および1.1 では、キャプチャのかっこの最初のセット内に一致が見つからない場合、キャプチャされた追加のかっこからキャプチャされたテキストは、返される配列には含まれません。</span><span class="sxs-lookup"><span data-stu-id="39639-1775">In .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="39639-1776">.NET Framework 2.0 以降では、キャプチャされたすべてのテキストも返された配列に追加されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1776">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="39639-1777">たとえば、次のコードでは、2組のキャプチャかっこを使用して、文字列内の個々の単語を抽出しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1777">For example, the following code uses two sets of capturing parentheses to extract the individual words in a string.</span></span> <span data-ttu-id="39639-1778">キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットは縦棒をキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="39639-1778">The first set of capturing parentheses captures the hyphen, and the second set captures the vertical bar.</span></span> <span data-ttu-id="39639-1779">コード例がコンパイルされ、.NET Framework 1.0 または1.1 の下で実行されている場合は、垂直バー文字が除外されます。コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合は、それが含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1779">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the vertical bar characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split7.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split7.vb#7)]  
  
 <span data-ttu-id="39639-1780">正規表現が空の文字列と一致する場合<xref:System.Text.RegularExpressions.Regex.Split%2A> 、は、すべての場所で空の文字列の区切り記号が見つかるため、文字列を1文字の文字列の配列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1780">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span> <span data-ttu-id="39639-1781">次の例では、文字列 "characters" を入力文字列に含まれる数の要素に分割し、文字 "a" から始めます。</span><span class="sxs-lookup"><span data-stu-id="39639-1781">The following example splits the string "characters" into as many elements as the input string contains, starting with the character "a".</span></span> <span data-ttu-id="39639-1782">Null 文字列は入力文字列の末尾に一致するので、返された配列の末尾に null 文字列が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1782">Because the null string matches the end of the input string, a null string is inserted at the end of the returned array.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split14.cs#14)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split14.vb#14)]  
  
 <span data-ttu-id="39639-1783">この例外は、分割操作の実行時間が、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType>コンストラクターで指定されたタイムアウト期間を超えた場合にスローされます。 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException></span><span class="sxs-lookup"><span data-stu-id="39639-1783">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="39639-1784">コンストラクターを呼び出すときにタイムアウト間隔を設定しなかった場合は、 <xref:System.Text.RegularExpressions.Regex>オブジェクトが作成されたアプリケーションドメインに対して設定されたタイムアウト値を操作が超えた場合に、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1784">If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created.</span></span> <span data-ttu-id="39639-1785"><xref:System.Text.RegularExpressions.Regex>コンストラクター呼び出しまたはアプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1785">If no time-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1786"><paramref name="input" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-1786"><paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1787"><paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1787"><paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1788">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1788">A time-out occurred.</span></span> <span data-ttu-id="39639-1789">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1789">For more information about time-outs, see the Remarks section.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1790">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1790">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String, options As RegexOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberSignature Language="F#" Value="static member Split : string * string * System.Text.RegularExpressions.RegexOptions -&gt; string[]" Usage="System.Text.RegularExpressions.Regex.Split (input, pattern, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1791">分割対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1791">The string to split.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1792">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1792">The regular expression pattern to match.</span></span></param>
        <param name="options"><span data-ttu-id="39639-1793">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-1793">A bitwise combination of the enumeration values that provide options for matching.</span></span></param>
        <summary><span data-ttu-id="39639-1794">指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1794">Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern.</span></span> <span data-ttu-id="39639-1795">指定したオプションで、一致操作を変更します。</span><span class="sxs-lookup"><span data-stu-id="39639-1795">Specified options modify the matching operation.</span></span></summary>
        <returns><span data-ttu-id="39639-1796">文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="39639-1796">An array of strings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1797">メソッドは<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドに似ていますが、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="39639-1797">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="39639-1798">文字列は、できるだけ多くの回数だけ分割されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1798">The string is split as many times as possible.</span></span> <span data-ttu-id="39639-1799">区切り記号が見つからない場合、戻り値には、元`input`の文字列を値とする1つの要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1799">If no delimiter is found, the return value contains one element whose value is the original `input` string.</span></span>  
  
 <span data-ttu-id="39639-1800">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1800">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1801">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1801">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="39639-1802">静的<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドの呼び出しで使用されるコンパイル済みの正規表現は、自動的にキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1802">Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached.</span></span> <span data-ttu-id="39639-1803">コンパイルされた正規表現の有効期間を自分で管理<xref:System.Text.RegularExpressions.Regex.Split%2A>するには、インスタンスメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-1803">To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.</span></span>  
  
 <span data-ttu-id="39639-1804">複数の一致が互いに隣接している場合は、空の文字列が配列に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1804">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="39639-1805">たとえば、1つのハイフンに文字列を分割すると、返される配列には、隣接する2つのハイフンが見つかる位置に空の文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1805">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.</span></span>  
  
 <span data-ttu-id="39639-1806">入力文字列の先頭または末尾に一致が見つかった場合は、返された配列の先頭または末尾に空の文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1806">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="39639-1807">次の例では、正規表現`[a-z]+`パターンを使用して、大文字または小文字のアルファベット文字で入力文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1807">The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character.</span></span> <span data-ttu-id="39639-1808">文字列の先頭と末尾が一致するアルファベット文字であるため、返された配列の最初の要素と最後<xref:System.String.Empty?displayProperty=nameWithType>の要素の値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1808">Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split24.cs#24)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split24.vb#24)]  
  
 <span data-ttu-id="39639-1809"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>式でキャプチャのかっこを使用する場合、キャプチャされたテキストは結果の文字列の配列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1809">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="39639-1810">たとえば、キャプチャするかっこ内に配置されたハイフンで文字列 "plum" を分割した場合、返される配列にはハイフンを含む文字列要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1810">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 <span data-ttu-id="39639-1811">ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="39639-1811">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="39639-1812">.NET Framework 1.0 および1.1 では、キャプチャのかっこの最初のセット内に一致が見つからない場合、キャプチャされた追加のかっこからキャプチャされたテキストは、返される配列には含まれません。</span><span class="sxs-lookup"><span data-stu-id="39639-1812">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="39639-1813">.NET Framework 2.0 以降では、キャプチャされたすべてのテキストも返された配列に追加されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1813">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="39639-1814">たとえば、次のコードでは、2組のキャプチャかっこを使用して、日付の区切り文字を含む日付の要素を日付文字列から抽出しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1814">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="39639-1815">キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットはスラッシュをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="39639-1815">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="39639-1816">コード例をコンパイルして .NET Framework 1.0 または1.1 の下で実行すると、スラッシュ文字は除外されます。コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合は、それが含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1816">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 <span data-ttu-id="39639-1817">正規表現が空の文字列と一致する場合<xref:System.Text.RegularExpressions.Regex.Split%2A> 、は、すべての場所で空の文字列の区切り記号が見つかるため、文字列を1文字の文字列の配列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1817">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span>  
  
 <span data-ttu-id="39639-1818">この<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外は、split 操作の実行時間が、メソッドが呼び出されたアプリケーションドメインに指定されたタイムアウト期間を超えた場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1818">The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called.</span></span> <span data-ttu-id="39639-1819">アプリケーションドメインのプロパティでタイムアウトが定義されていない場合、またはタイムアウト値が<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>の場合は、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="39639-1819">If no time-out is defined in the application domain's properties, or if the time-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=nameWithType>, no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1820">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1820">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1821"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1821"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1822"><paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-1822"><paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1823">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1823">A time-out occurred.</span></span> <span data-ttu-id="39639-1824">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1824">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1825">このメソッドは、メソッドが呼び出されたアプリケーションドメインの既定のタイムアウト値と同じ間隔の後にタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="39639-1825">This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called.</span></span> <span data-ttu-id="39639-1826">タイムアウト値がアプリケーションドメインに対して定義されていない場合は、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />メソッドがタイムアウトしないようにする値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1826">If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used.</span></span> <span data-ttu-id="39639-1827">パターン一致でテキストを分割するために推奨される<see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />静的メソッドはです。これにより、タイムアウト間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="39639-1827">The recommended static method for splitting text on a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1828">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1828">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Split (input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member Split : string * string * System.Text.RegularExpressions.RegexOptions * TimeSpan -&gt; string[]" Usage="System.Text.RegularExpressions.Regex.Split (input, pattern, options, matchTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="39639-1829">分割対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1829">The string to split.</span></span></param>
        <param name="pattern"><span data-ttu-id="39639-1830">一致させる正規表現パターン。</span><span class="sxs-lookup"><span data-stu-id="39639-1830">The regular expression pattern to match.</span></span></param>
        <param name="options"><span data-ttu-id="39639-1831">一致オプションを指定する列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="39639-1831">A bitwise combination of the enumeration values that provide options for matching.</span></span></param>
        <param name="matchTimeout"><span data-ttu-id="39639-1832">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="39639-1832">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</span></span></param>
        <summary><span data-ttu-id="39639-1833">指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1833">Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern.</span></span> <span data-ttu-id="39639-1834">追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</span><span class="sxs-lookup"><span data-stu-id="39639-1834">Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</span></span></summary>
        <returns><span data-ttu-id="39639-1835">文字列配列。</span><span class="sxs-lookup"><span data-stu-id="39639-1835">A string array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1836">メソッドは<xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType>メソッドに似ていますが、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>は、文字セットではなく正規表現によって決定された区切り記号で文字列を分割する点が異なります。 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="39639-1836">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> methods are similar to the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method, except that <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> splits the string at a delimiter determined by a regular expression instead of a set of characters.</span></span> <span data-ttu-id="39639-1837">文字列は、できるだけ多くの回数だけ分割されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1837">The string is split as many times as possible.</span></span> <span data-ttu-id="39639-1838">区切り記号が見つからない場合、戻り値には、元`input`の文字列を値とする1つの要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1838">If no delimiter is found, the return value contains one element whose value is the original `input` string.</span></span>  
  
 <span data-ttu-id="39639-1839">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1839">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1840">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1840">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="39639-1841">静的<xref:System.Text.RegularExpressions.Regex.Split%2A>メソッドの呼び出しで使用されるコンパイル済みの正規表現は、自動的にキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="39639-1841">Compiled regular expressions used in calls to static <xref:System.Text.RegularExpressions.Regex.Split%2A> methods are automatically cached.</span></span> <span data-ttu-id="39639-1842">コンパイルされた正規表現の有効期間を自分で管理<xref:System.Text.RegularExpressions.Regex.Split%2A>するには、インスタンスメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-1842">To manage the lifetime of compiled regular expressions yourself, use the instance <xref:System.Text.RegularExpressions.Regex.Split%2A> methods.</span></span>  
  
 <span data-ttu-id="39639-1843">複数の一致が互いに隣接している場合は、空の文字列が配列に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1843">If multiple matches are adjacent to one another, an empty string is inserted into the array.</span></span> <span data-ttu-id="39639-1844">たとえば、1つのハイフンに文字列を分割すると、返される配列には、隣接する2つのハイフンが見つかる位置に空の文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1844">For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.</span></span>  
  
 <span data-ttu-id="39639-1845">入力文字列の先頭または末尾に一致が見つかった場合は、返された配列の先頭または末尾に空の文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1845">If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array.</span></span> <span data-ttu-id="39639-1846">次の例では、正規表現`[a-z]+`パターンを使用して、大文字または小文字のアルファベット文字で入力文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1846">The following example uses the regular expression pattern `[a-z]+` to split an input string on any uppercase or lowercase alphabetic character.</span></span> <span data-ttu-id="39639-1847">文字列の先頭と末尾が一致するアルファベット文字であるため、返された配列の最初の要素と最後<xref:System.String.Empty?displayProperty=nameWithType>の要素の値はになります。</span><span class="sxs-lookup"><span data-stu-id="39639-1847">Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split23.cs#23)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split23.vb#23)]  
  
 <span data-ttu-id="39639-1848"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType>式でキャプチャのかっこを使用する場合、キャプチャされたテキストは結果の文字列の配列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1848">If capturing parentheses are used in a <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> expression, any captured text is included in the resulting string array.</span></span> <span data-ttu-id="39639-1849">たとえば、キャプチャするかっこ内に配置されたハイフンで文字列 "plum" を分割した場合、返される配列にはハイフンを含む文字列要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1849">For example, if you split the string "plum-pear" on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 <span data-ttu-id="39639-1850">ただし、正規表現パターンに複数のキャプチャかっこのセットが含まれている場合、このメソッドの動作は .NET Framework のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="39639-1850">However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework.</span></span> <span data-ttu-id="39639-1851">.NET Framework 1.0 および1.1 では、キャプチャのかっこの最初のセット内に一致が見つからない場合、キャプチャされた追加のかっこからキャプチャされたテキストは、返される配列には含まれません。</span><span class="sxs-lookup"><span data-stu-id="39639-1851">In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array.</span></span> <span data-ttu-id="39639-1852">.NET Framework 2.0 以降では、キャプチャされたすべてのテキストも返された配列に追加されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1852">Starting with the .NET Framework 2.0, all captured text is also added to the returned array.</span></span> <span data-ttu-id="39639-1853">たとえば、次のコードでは、2組のキャプチャかっこを使用して、日付の区切り文字を含む日付の要素を日付文字列から抽出しています。</span><span class="sxs-lookup"><span data-stu-id="39639-1853">For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string.</span></span> <span data-ttu-id="39639-1854">キャプチャかっこの最初のセットはハイフンをキャプチャし、2番目のセットはスラッシュをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="39639-1854">The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash.</span></span> <span data-ttu-id="39639-1855">コード例をコンパイルして .NET Framework 1.0 または1.1 の下で実行すると、スラッシュ文字は除外されます。コンパイルされ、.NET Framework 2.0 以降のバージョンで実行される場合は、それが含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1855">If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 <span data-ttu-id="39639-1856">正規表現が空の文字列と一致する場合<xref:System.Text.RegularExpressions.Regex.Split%2A> 、は、すべての場所で空の文字列の区切り記号が見つかるため、文字列を1文字の文字列の配列に分割します。</span><span class="sxs-lookup"><span data-stu-id="39639-1856">If the regular expression can match the empty string, <xref:System.Text.RegularExpressions.Regex.Split%2A> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.</span></span>  
  
 <span data-ttu-id="39639-1857">パラメーター `matchTimeout`は、パターン一致メソッドがタイムアウトする前に一致を検索する期間を指定します。タイムアウト間隔を設定すると、過度なバックトラッキングに依存している正規表現が、ほぼ一致する入力を処理するときに応答を停止することを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="39639-1857">The `matchTimeout` parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches.</span></span> <span data-ttu-id="39639-1858">詳細については、「正規表現と[バックトラッキング](~/docs/standard/base-types/backtracking-in-regular-expressions.md)[のベストプラクティス](~/docs/standard/base-types/best-practices.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1858">For more information, see [Best Practices for Regular Expressions](~/docs/standard/base-types/best-practices.md) and [Backtracking](~/docs/standard/base-types/backtracking-in-regular-expressions.md).</span></span> <span data-ttu-id="39639-1859">この期間内に一致するものが見つからない場合、メソッドは<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="39639-1859">If no match is found in that time interval, the method throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception.</span></span> <span data-ttu-id="39639-1860">`matchTimeout`メソッドを実行するアプリケーションドメインに対して定義されている既定のタイムアウト値をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="39639-1860">`matchTimeout` overrides any default time-out value defined for the application domain in which the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1861">正規表現の解析エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1861">A regular expression parsing error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1862"><paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="39639-1862"><paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1863"><paramref name="options" /> は、 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="39639-1863"><paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.</span></span>  
  
<span data-ttu-id="39639-1864">- または -</span><span class="sxs-lookup"><span data-stu-id="39639-1864">-or-</span></span> 
 <span data-ttu-id="39639-1865"><paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</span><span class="sxs-lookup"><span data-stu-id="39639-1865"><paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</span></span></exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException"><span data-ttu-id="39639-1866">タイムアウトが発生しました。</span><span class="sxs-lookup"><span data-stu-id="39639-1866">A time-out occurred.</span></span> <span data-ttu-id="39639-1867">タイムアウトの詳細については、「解説」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="39639-1867">For more information about time-outs, see the Remarks section.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="39639-1868"><paramref name="matchTimeout" />パラメーターには、2秒などの適切な値を設定することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="39639-1868">We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds.</span></span> <span data-ttu-id="39639-1869">を指定<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />してタイムアウトを無効にすると、正規表現エンジンのパフォーマンスが若干向上します。</span><span class="sxs-lookup"><span data-stu-id="39639-1869">If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance.</span></span> <span data-ttu-id="39639-1870">ただし、次の条件下でのみタイムアウトを無効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="39639-1870">However, you should disable time-outs only under the following conditions:</span></span> 
<span data-ttu-id="39639-1871">-正規表現によって処理される入力が既知の信頼できるソースから派生した場合、または静的なテキストで構成されている場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1871">-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text.</span></span> <span data-ttu-id="39639-1872">これにより、ユーザーが動的に入力したテキストは除外されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1872">This excludes text that has been dynamically input by users.</span></span>  
  
<span data-ttu-id="39639-1873">-正規表現パターンが完全にテストされ、一致、一致しない、および近い一致を効率的に処理できるようになった場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1873">-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.</span></span>  
  
<span data-ttu-id="39639-1874">-正規表現パターンに、ほぼ一致を処理するときに過度なバックトラッキングを発生させることがわかっている言語要素が含まれていない場合。</span><span class="sxs-lookup"><span data-stu-id="39639-1874">-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</span></span></para></block>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1875">正規表現言語要素</span><span class="sxs-lookup"><span data-stu-id="39639-1875">Regular Expression Language Elements</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="si"><span data-ttu-id="39639-1876">シリアル化情報が設定されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39639-1876">The object to populate with serialization information.</span></span></param>
        <param name="context"><span data-ttu-id="39639-1877">シリアル化データを格納および取得する場所。</span><span class="sxs-lookup"><span data-stu-id="39639-1877">The place to store and retrieve serialized data.</span></span> <span data-ttu-id="39639-1878">このパラメーターは、今後使用するために予約されています。</span><span class="sxs-lookup"><span data-stu-id="39639-1878">This parameter is reserved for future use.</span></span></param>
        <summary><span data-ttu-id="39639-1879"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトの逆シリアル化に必要なデータを入力します。</span><span class="sxs-lookup"><span data-stu-id="39639-1879">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data necessary to deserialize the current <see cref="T:System.Text.RegularExpressions.Regex" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="regex.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39639-1880"><see langword="Regex" /> コンストラクターに渡された正規表現パターンを返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1880">Returns the regular expression pattern that was passed into the <see langword="Regex" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="39639-1881"><see langword="Regex" /> コンストラクターに渡された <paramref name="pattern" /> パラメーター。</span><span class="sxs-lookup"><span data-stu-id="39639-1881">The <paramref name="pattern" /> parameter that was passed into the <see langword="Regex" /> constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1882">パラメーター `pattern`は、一致させる文字列をシンボリックに記述する正規表現言語要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1882">The `pattern` parameter consists of regular expression language elements that symbolically describe the string to match.</span></span> <span data-ttu-id="39639-1883">正規表現の詳細については、「 [.NET Framework 正規表現](~/docs/standard/base-types/regular-expressions.md)と[正規表現言語-クイックリファレンス](~/docs/standard/base-types/regular-expression-language-quick-reference.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="39639-1883">For more information about regular expressions, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md) and [Regular Expression Language - Quick Reference](~/docs/standard/base-types/regular-expression-language-quick-reference.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="39639-1884">
            <see cref="T:System.Text.RegularExpressions.Regex" />は、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />メソッドによって作成される正規表現の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="39639-1884">
            <see cref="T:System.Text.RegularExpressions.Regex" /> is the base class of regular expressions created by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span> <span data-ttu-id="39639-1885">これらのコンパイルされた<see cref="M:System.Text.RegularExpressions.Regex.ToString" />正規表現は、基本クラスの実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="39639-1885">These compiled regular expressions use the <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> implementation of the base class.</span></span> <span data-ttu-id="39639-1886">派生クラスから呼び出された場合、 <see cref="M:System.Text.RegularExpressions.Regex.ToString" />メソッドは、正規表現の定義に使用<paramref name="pattern" />された<see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />クラスコンストラクターのパラメーターに渡された文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="39639-1886">If called from a derived class, the <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> method returns the string that was passed to the <paramref name="pattern" /> parameter of the <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> class constructor that was used to define the regular expression.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Unescape">
      <MemberSignature Language="C#" Value="public static string Unescape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Unescape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unescape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Unescape(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Unescape : string -&gt; string" Usage="System.Text.RegularExpressions.Regex.Unescape str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="39639-1887">変換対象のテキストを含んでいる入力文字列。</span><span class="sxs-lookup"><span data-stu-id="39639-1887">The input string containing the text to convert.</span></span></param>
        <summary><span data-ttu-id="39639-1888">入力文字列内に含まれるエスケープされた文字を変換します。</span><span class="sxs-lookup"><span data-stu-id="39639-1888">Converts any escaped characters in the input string.</span></span></summary>
        <returns><span data-ttu-id="39639-1889">エスケープされた文字を含む文字列を、エスケープされていない形式に変換したもの。</span><span class="sxs-lookup"><span data-stu-id="39639-1889">A string of characters with any escaped characters converted to their unescaped form.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39639-1890">メソッド<xref:System.Text.RegularExpressions.Regex.Unescape%2A>は、次の2つの変換のいずれかを実行します。</span><span class="sxs-lookup"><span data-stu-id="39639-1890">The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method performs one of the following two transformations:</span></span>  
  
-   <span data-ttu-id="39639-1891">メソッドによってエスケープされ<xref:System.Text.RegularExpressions.Regex.Escape%2A>た各文字からエスケープ文字 ("\\") を削除することによって、メソッドによって実行される変換を反転させます。</span><span class="sxs-lookup"><span data-stu-id="39639-1891">It reverses the transformation performed by the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method by removing the escape character ("\\") from each character escaped by the method.</span></span> <span data-ttu-id="39639-1892">これには\\、、\*、+、? &#124;、、{、[、(、)、^、$、.、#、および空白文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="39639-1892">These include the \\, \*, +, ?, &#124;, {, [, (,), ^, $, ., #, and white space characters.</span></span> <span data-ttu-id="39639-1893">さらに、メソッド<xref:System.Text.RegularExpressions.Regex.Unescape%2A>は、右角かっこ (]) と右中かっこ (}) の文字を unescapes します。</span><span class="sxs-lookup"><span data-stu-id="39639-1893">In addition, the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method unescapes the closing bracket (]) and closing brace (}) characters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39639-1894"><xref:System.Text.RegularExpressions.Regex.Unescape%2A>エスケープされた文字列は、エスケープされた文字を正確に推測できないため、完全に反転することはできません。</span><span class="sxs-lookup"><span data-stu-id="39639-1894"><xref:System.Text.RegularExpressions.Regex.Unescape%2A> cannot reverse an escaped string perfectly because it cannot deduce precisely which characters were escaped,</span></span>  
  
-   <span data-ttu-id="39639-1895">逐語的文字列リテラルの16進数値を実際の印刷可能な文字に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="39639-1895">It replaces the hexadecimal values in verbatim string literals with the actual printable characters.</span></span> <span data-ttu-id="39639-1896">たとえば、"\a" @"\x07"または@"\x0A" "\n" で置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="39639-1896">For example, it replaces @"\x07" with "\a", or @"\x0A" with "\n".</span></span> <span data-ttu-id="39639-1897">これは、\a、\b、\e、\n、\r、\f、\t、\ v、英数字など、サポートされているエスケープ文字に変換されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1897">It converts to supported escape characters such as \a, \b, \e, \n, \r, \f, \t, \v, and alphanumeric characters.</span></span>
  
 <span data-ttu-id="39639-1898">メソッドが<xref:System.Text.RegularExpressions.Regex.Unescape%2A> 、変換できない他のエスケープシーケンス (\w や \s など) を検出すると、 <xref:System.ArgumentException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="39639-1898">If the <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method encounters other escape sequences that it cannot convert, such as \w or \s, it throws an <xref:System.ArgumentException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="39639-1899"><paramref name="str" /> には、認識されないエスケープ シーケンスが含まれています。</span><span class="sxs-lookup"><span data-stu-id="39639-1899"><paramref name="str" /> includes an unrecognized escape sequence.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="39639-1900"><paramref name="str" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="39639-1900"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md"><span data-ttu-id="39639-1901">正規表現言語 - クイック リファレンス</span><span class="sxs-lookup"><span data-stu-id="39639-1901">Regular Expression Language - Quick Reference</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UseOptionC">
      <MemberSignature Language="C#" Value="protected bool UseOptionC ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionC() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionC" />
      <MemberSignature Language="VB.NET" Value="Protected Function UseOptionC () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool UseOptionC();" />
      <MemberSignature Language="F#" Value="member this.UseOptionC : unit -&gt; bool" Usage="regex.UseOptionC " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39639-1902"><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1902">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span></summary>
        <returns><span data-ttu-id="39639-1903"><see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> オプションが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="39639-1903"><see langword="true" /> if the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property contains the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseOptionR">
      <MemberSignature Language="C#" Value="protected bool UseOptionR ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionR() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionR" />
      <MemberSignature Language="VB.NET" Value="Protected Function UseOptionR () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool UseOptionR();" />
      <MemberSignature Language="F#" Value="member this.UseOptionR : unit -&gt; bool" Usage="regex.UseOptionR " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="39639-1904"><see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="39639-1904">Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</span></span></summary>
        <returns><span data-ttu-id="39639-1905"><see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> オプションが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="39639-1905"><see langword="true" /> if the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property contains the <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> option; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateMatchTimeout">
      <MemberSignature Language="C#" Value="protected internal static void ValidateMatchTimeout (TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig void ValidateMatchTimeout(valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Sub ValidateMatchTimeout (matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static void ValidateMatchTimeout(TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="static member ValidateMatchTimeout : TimeSpan -&gt; unit" Usage="System.Text.RegularExpressions.Regex.ValidateMatchTimeout matchTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="matchTimeout"><span data-ttu-id="39639-1906">チェックするタイムアウト間隔。</span><span class="sxs-lookup"><span data-stu-id="39639-1906">The time-out interval to check.</span></span></param>
        <summary><span data-ttu-id="39639-1907">タイムアウト間隔が許容範囲内にあるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="39639-1907">Checks whether a time-out interval is within an acceptable range.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="39639-1908">指定のタイムアウトが有効範囲内にありません。</span><span class="sxs-lookup"><span data-stu-id="39639-1908">The specified time-out is not within a valid range.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
