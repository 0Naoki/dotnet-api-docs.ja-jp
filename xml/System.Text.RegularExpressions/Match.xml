<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13c607dda098b110d0be299d25ccb90fb25acd31" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48732546" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>1 回の正規表現検索に一致した結果を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Match>オブジェクトは不変でありパブリック コンス トラクターがありません。 インスタンス、<xref:System.Text.RegularExpressions.Match>クラスは、によって返される、<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>メソッドを表す文字列の最初のパターンに一致します。 後続の一致するがによって表される<xref:System.Text.RegularExpressions.Match>によって返されるオブジェクト、<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッド。 さらに、 <xref:System.Text.RegularExpressions.MatchCollection> 0、1 つ、以上から成るオブジェクト<xref:System.Text.RegularExpressions.Match>によってオブジェクトが返される、<xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType>メソッド。  
  
 場合、 <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> 、入力文字列内の正規表現パターンに一致するメソッドが失敗した、空を返します<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。 使用することができます、 `foreach` (C#) を構築または`For Each`コレクションを反復処理する Visual Basic で作成します。  
  
 場合、<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>メソッドは、正規表現パターンに一致するように失敗すると、それを返します、<xref:System.Text.RegularExpressions.Match>オブジェクトと等しい<xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>します。 使用することができます、<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティを一致が成功したかどうかを判断します。 具体的な例を次に示します。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 パターン一致が成功した場合、<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティに一致した部分文字列が含まれています、<xref:System.Text.RegularExpressions.Capture.Index%2A>プロパティが一致した部分文字列の入力文字列内の 0 から始まる開始位置を示す、<xref:System.Text.RegularExpressions.Capture.Length%2A>プロパティを示します、入力文字列内で一致した部分文字列の長さ。  
  
 単一の一致が複数のキャプチャ グループを含むため、<xref:System.Text.RegularExpressions.Match>が、<xref:System.Text.RegularExpressions.Match.Groups%2A>プロパティを返す、<xref:System.Text.RegularExpressions.GroupCollection>します。 <xref:System.Text.RegularExpressions.Match>インスタンス自体は、コレクションの最初のオブジェクトと等価で`Match.Groups[0]`(`Match.Groups(0)` Visual basic)、一致した文字列全体を表します。 一致でキャプチャされたグループは、次の方法でアクセスできます。  
  
-   メンバーを反復処理できる、<xref:System.Text.RegularExpressions.GroupCollection>オブジェクトを使用して、 `foreach` (c#) または`For Each`(Visual Basic) の構成要素。  
  
-   使用することができます、<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType>キャプチャ グループの番号でグループを取得するプロパティ。 インスタンスを呼び出すことによって、番号付きグループは正規表現内に存在を確認することができますに注意してください<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType>メソッド。  
  
-   使用することができます、<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType>キャプチャ グループの名前でグループを取得するプロパティ。 インスタンスを呼び出すことによって、どの名前付きグループは正規表現内に存在を確認することができますに注意してください<xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType>メソッド。  
  
   
  
## Examples  
 次の例では、正規表現を使用して、`Console\.Write(Line)?`します。 この正規表現パターンは、次のように解釈されます。  
  
|||  
|-|-|  
|コンソール\\します。書き込み|文字列 "Console.Write" と一致します。 なお、"."任意の文字に一致するワイルドカードとしてではなく、その期間をリテラルとして解釈されますように文字がエスケープされます。|  
|(行) ですか。|文字列 "Line" の 0 回または 1 回の繰り返しに一致します。|  
  
 **例 1**  
  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>入力文字列内のすべてのパターン一致を取得します。 反復処理し、 <xref:System.Text.RegularExpressions.Match> 、返されるオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>各一致に関する情報を表示するオブジェクト。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **例 2**  
  
 次の例では、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>と<xref:System.Text.RegularExpressions.Match.NextMatch%2A>を一度に 1 つの一致を取得するメソッド。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空のグループを取得します。 一致する対象が見つからなかった検索は、この空一致を返します。</summary>
        <value>空一致。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一致が成功したかどうかを決定する、このプロパティを使用しない必要があります。 代わりに、使用、`Match.Success`プロパティ (から継承<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正規表現に一致したグループのコレクションを取得します。</summary>
        <value>パターンに一致した文字グループ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正規表現パターンでは、正規表現パターンの一部をかっこで囲んで定義されている部分式を含めることができます。 このようなすべての部分式は、グループを形成します。 <xref:System.Text.RegularExpressions.Match.Groups%2A>プロパティはこれらの部分式一致に関する情報へのアクセスを提供します。 たとえば、正規表現パターン`(\d{3})-(\d{3}-\d{4})`、2 つの部分式には北アメリカの電話番号に一致します。 1 つ目を表し、最初の 3 つの桁の電話番号の市外局番で構成されます。 このグループは、正規表現の最初の部分でキャプチャ`(\d{3})`します。2 つ目は、個々 の電話番号を表し、電話番号の最後の 7 桁で構成されます。 このグループは、正規表現の 2 番目の部分によってキャプチャ`(\d{3}-\d{4})`します。 これら 2 つのグループから取得できます、<xref:System.Text.RegularExpressions.GroupCollection>オブジェクトによって返される、<xref:System.Text.RegularExpressions.Match.Groups%2A>プロパティは、次の例を示します。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 <xref:System.Text.RegularExpressions.GroupCollection>によって返されるオブジェクト、<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>プロパティは常に少なくとも 1 つのメンバーを含む 0 から始まるコレクション オブジェクト。 正規表現エンジンでは、特定の入力文字列で、一致した結果が見つからない場合、 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 、1 つのプロパティ<xref:System.Text.RegularExpressions.Group>(インデックス 0 位置にあるオブジェクト) のコレクション内のオブジェクトに設定されている`false`と<xref:System.Text.RegularExpressions.Group>オブジェクト<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティに設定されて<xref:System.String.Empty?displayProperty=nameWithType>します。 正規表現エンジンが一致の最初の要素を見つけることができるかどうか、<xref:System.Text.RegularExpressions.GroupCollection>によって返されるオブジェクト (インデックス 0 位置にある要素)、<xref:System.Text.RegularExpressions.Match.Groups%2A>プロパティには、正規表現パターンに一致する文字列が含まれています。 後続の各要素のインデックスから上に、グループを表しますキャプチャされた、正規表現では、キャプチャ グループが含まれる場合。 詳細については、の"グループ化を構築し、正規表現オブジェクト」セクションを参照してください、[グループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)記事。  
  
   
  
## Examples  
 次の例は、サンプルの文字列に対して正規表現パターンに一致を試みます。 この例では、<xref:System.Text.RegularExpressions.Match.Groups%2A>コンソールに表示するための一致によって取得される情報を格納するプロパティ。  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一致する対象が最後に見つかった位置の終了位置 (最後に一致した文字の後の文字) から開始して、次に一致する対象を検索した結果の新しい <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトを返します。</summary>
        <returns>次の正規表現一致。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出すことは<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>もう一度と受け渡し (`Index+Length`) として、新しい開始位置。  
  
> [!NOTE]
>  このメソッドでは、現在のインスタンスは変更されません。 代わりに、新しい返します<xref:System.Text.RegularExpressions.Match>次の一致に関する情報を含むオブジェクト。  
  
 スローする可能性が次の一致を取得しようとすると、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>かどうか、照合操作のタイムアウト値が有効で、次の一致を検索しようとすると、そのタイムアウト間隔を超えています。  
  
   
  
## Examples  
 次の例では、<xref:System.Text.RegularExpressions.Match.NextMatch%2A>最初の一致を超えると一致する正規表現をキャプチャするメソッド。  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
        <block subset="none" type="usage">
          <para>呼び出すことで、一致する試行が繰り返された場合、<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />メソッドでは、正規表現エンジンは、空一致特別な処理。 通常、<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />前回の一致が左を正確に次の一致の検索を開始します。 ただし、空一致後、<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />メソッドは、次の一致を試みる前に、1 つ文字分だけ進めます。 この動作は、正規表現エンジンは、文字列を進めることが保証されます。 それ以外の場合、空一致が、前方移動で含まれていないため、次の一致は、前回の一致とまったく同じ場所で開始し、同じ空の文字列を繰り返しに一致が。  
  
具体的な例を次に示します。 正規表現パターン<c>、*</c>文字の 0 個以上の出現箇所を検索文字列"abaabb"の"a"です。 の例では、からの出力に示す 6 つの一致を検索します。 最初の一致する試行が 1 つ目を検索します"a"です。 最初の b の前に、終了と一致する、最初に正確に 2 番目の一致が開始これは、"a"の 0 個の出現箇所を検索し、空の文字列を返します。 3 番目の一致が始まらない正確に 2 番目の一致が終了した位置、2 番目の一致には、空の文字列が返されるためです。 代わりに、最初の"b"後で、1 つの文字を開始します。 3 番目の一致では、"a"の 2 つの出現箇所を検索して、"aa"を返します。 4 番目の一致の試行は、2 番目"b"の前に、3 番目の一致の終了位置を開始し、空の文字列を返します。 3 番目の"b"の前に開始し、空の文字列を返すように、5 番目の一致の試行はもう一度 1 つの文字を進めます。 6 番目の一致では、最後の"b"した後に開始し、もう一度空の文字列を返します。  
  
[! コード csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [! コード vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">使用する置換パターン。</param>
        <summary>指定された置換パターンを展開して返します。</summary>
        <returns>
          <paramref name="replacement" /> パラメーターの展開形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一方、<xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType>メソッドに指定された置換パターンでは、置換、入力文字列内のすべての一致、<xref:System.Text.RegularExpressions.Match.Result%2A>メソッドは、指定された置換パターンで、単一の一致を置き換えます。 呼び出す前に、一致した文字列に対して処理を実行することがも、個別の一致で運用されるため、<xref:System.Text.RegularExpressions.Match.Result%2A>メソッド。  
  
 `replacement`パラメーターは、標準の正規表現の置換パターン。 文字リテラルと正規表現の置換の構成することができます。 詳細については、「[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)」を参照してください。  
  
   
  
## Examples  
 次の例では、先頭し、末尾のかっこ、かっこで囲まれた式をハイフンが置き換えられます。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 この正規表現パターン `--(.+?)--` の解釈を次の表に示します。  
  
|パターン|説明|  
|-------------|-----------------|  
|`--`|2 つのハイフンと一致します。|  
|`(.+?)`|任意の文字を 1 つまたは複数回、最も少ない繰り返しに一致します。 これが最初のキャプチャ グループです。|  
|`--`|2 つのハイフンと一致します。|  
  
 なお、正規表現パターン`--(.+?)--`遅延の量指定子を使用して`+?`します。 場合、最長一致の量化子`+`使用された代わりに、正規表現エンジンは、入力文字列内の単一の一致のみを検索は。  
  
 置換文字列`($1)`一致をかっこで囲まれた最初のキャプチャ グループに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="replacement" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.NotSupportedException">このパターンは展開できません。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="http://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">置換</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" />
      </Parameters>
      <Docs>
        <param name="inner">要求する一致と等価の正規表現一致。</param>
        <summary>指定されたオブジェクトと等価であり、かつ複数のスレッド間での共有に適した <see cref="T:System.Text.RegularExpressions.Match" /> インスタンスを返します。</summary>
        <returns>複数のスレッド間での共有に適した正規表現一致。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inner" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>