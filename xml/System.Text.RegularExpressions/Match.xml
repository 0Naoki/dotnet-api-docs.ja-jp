<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Match.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fb63372e2192302c84aaf2b9879a89ead4000664.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb63372e2192302c84aaf2b9879a89ead4000664</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.RegularExpressions.Match">
          <source>Represents the results from a single regular expression match.</source>
          <target state="translated">1 回の正規表現検索に一致した結果を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object is immutable and has no public constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph>オブジェクトは変更不可にし、パブリック コンス トラクターを持たない。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>An instance of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> class is returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> method and represents the first pattern match in a string.</source>
          <target state="translated">インスタンス、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph>クラスは、によって返される、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph>メソッドを表す文字列の最初のパターンに一致します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Subsequent matches are represented by <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">後続の一致がによって表される<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph>によって返されるオブジェクト、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>In addition, a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object that consists of zero, one, or more <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects is returned by the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">さらに、 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> 0、1 つ、以上から成るオブジェクト<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph>によってオブジェクトが返される、<ph id="ph3">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>If the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> method fails to match a regular expression pattern in an input string, it returns an empty <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph>入力文字列内で正規表現パターンに一致するメソッドが失敗した場合、空白を返しますそれ<ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can then use a <ph id="ph1">`foreach`</ph> construct in C# or a <ph id="ph2">`For Each`</ph> construct in Visual Basic to iterate the collection.</source>
          <target state="translated">使用してできます、 <ph id="ph1">`foreach`</ph> c# で作成または<ph id="ph2">`For Each`</ph>コレクションを反復処理する Visual Basic で作成します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>If the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> method fails to match the regular expression pattern, it returns a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object that is equal to <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph>メソッドは、正規表現パターンの照合に失敗すると、それを返します、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph>と等しいオブジェクト<ph id="ph3">&lt;xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph> property to determine whether the match was successful.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Success%2A&gt;</ph>プロパティを一致が成功したかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The following example provides an illustration.</source>
          <target state="translated">具体的な例を次に示します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>If a pattern match is successful, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property contains the matched substring, the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Capture.Index%2A&gt;</ph> property indicates the zero-based starting position of the matched substring in the input string, and the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.Capture.Length%2A&gt;</ph> property indicates the length of matched substring in the input string.</source>
          <target state="translated">パターン一致が成功した場合、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph>プロパティに一致した部分文字列が含まれています、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Capture.Index%2A&gt;</ph>プロパティは、入力文字列内の一致した部分文字列の 0 から始まる開始位置を示すと<ph id="ph3">&lt;xref:System.Text.RegularExpressions.Capture.Length%2A&gt;</ph>プロパティは、入力文字列内の一致した部分文字列の長さを示します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Because a single match can involve multiple capturing groups, <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> has a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property that returns the <ph id="ph3">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph>.</source>
          <target state="translated">単一の一致が複数のキャプチャ グループに生じる可能性があるため<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph>が、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph>プロパティを返す、<ph id="ph3">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> instance itself is equivalent to the first object in the collection, at <ph id="ph2">`Match.Groups[0]`</ph> (<ph id="ph3">`Match.Groups(0)`</ph> in Visual Basic), which represents the entire match.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph>インスタンス自体は、コレクションの最初のオブジェクトと同等に<ph id="ph2">`Match.Groups[0]`</ph>(<ph id="ph3">`Match.Groups(0)`</ph> Visual Basic で)、一致した文字列全体を表します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can access the captured groups in a match in the following ways:</source>
          <target state="translated">検索一致でキャプチャされたグループは、次の方法でアクセスできます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can iterate the members of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object  by using a <ph id="ph2">`foreach`</ph> (C#) or <ph id="ph3">`For Each`</ph> (Visual Basic) construct.</source>
          <target state="translated">メンバーを反復処理することができます、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph>オブジェクトを使用して、 <ph id="ph2">`foreach`</ph> (c#) または<ph id="ph3">`For Each`</ph>(Visual Basic) コンストラクトです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType&gt;</ph> property to retrieve groups by the number of the capturing group.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType&gt;</ph>でグループ化して、キャプチャ グループの数を取得するプロパティです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Note that you can determine which numbered groups are present in a regular expression by calling the instance <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">注こと番号付きグループがインスタンスを呼び出すことによって、正規表現であるかを判断<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>You can use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType&gt;</ph> property to retrieve groups by the name of the capturing group.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType&gt;</ph>キャプチャ グループの名前でグループを取得するプロパティです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Note that you can determine which named groups are present in a regular expression by calling the instance <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">注できるかを特定する名前付きグループは、インスタンスを呼び出すことによって、正規表現内に存在<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The following examples use the regular expression <ph id="ph1">`Console\.Write(Line)?`</ph>.</source>
          <target state="translated">次の例は、正規表現を使用して<ph id="ph1">`Console\.Write(Line)?`</ph>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The regular expression is interpreted as follows:</source>
          <target state="translated">この正規表現パターンは、次のように解釈されます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Console<ph id="ph1">\\</ph>.Write</source>
          <target state="translated">コンソール<ph id="ph1">\\</ph>です。書き込み</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Match the string "Console.Write".</source>
          <target state="translated">文字列 "Console.Write" と一致します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Note that the "." character is escaped so that it is interpreted as a literal period rather than as a wildcard that matches any character.</source>
          <target state="translated">注意してください、"です。"文字がエスケープされた任意の文字に一致するワイルドカードとしてのではなく、リテラル期間として解釈されるようにします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>(Line)?</source>
          <target state="translated">(行) ですか。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>Match zero or one occurrence of the string "Line".</source>
          <target state="translated">文字列 "Line" の 0 回または 1 回の繰り返しに一致します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>例 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method to retrieve all pattern matches in an input string.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph>入力文字列内のすべてのパターン マッチを取得します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>It then iterates the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects in the returned <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object to display information about each match.</source>
          <target state="translated">反復処理、 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> 、返されたオブジェクト<ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>各一致に関する情報を表示するオブジェクト。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>例 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.Match">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A&gt;</ph> methods to retrieve one match at a time.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29&gt;</ph>と<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A&gt;</ph>を一度に 1 つの一致を取得するメソッド。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.Match.Empty">
          <source>Gets the empty group.</source>
          <target state="translated">空のグループを取得します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.Match.Empty">
          <source>All failed matches return this empty match.</source>
          <target state="translated">一致する対象が見つからなかった検索は、この空一致を返します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Empty">
          <source>An empty match.</source>
          <target state="translated">空一致。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Empty">
          <source>This property should not be used to determine if a match is successful.</source>
          <target state="translated">このプロパティは、一致が成功したかを判断できません使用する必要があります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Empty">
          <source>Instead, use the <ph id="ph1">`Match.Success`</ph> property (which is inherited from <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">代わりに、使用、<ph id="ph1">`Match.Success`</ph>プロパティ (から継承される<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>Gets a collection of groups matched by the regular expression.</source>
          <target state="translated">正規表現に一致したグループのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The character groups matched by the pattern.</source>
          <target state="translated">パターンに一致した文字グループ。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses.</source>
          <target state="translated">正規表現パターンでは、正規表現パターンの一部をかっこで囲んでで定義されている部分式を含めることができます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>Every such subexpression forms a group.</source>
          <target state="translated">このようなすべての部分式は、グループを形成します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property provides access to information about those subexpression matches.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph>プロパティはこれらの部分文字列に関する情報へのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>For example, the regular expression pattern <ph id="ph1">`(\d{3})-(\d{3}-\d{4})`</ph>, which matches North American telephone numbers, has two subexpressions.</source>
          <target state="translated">たとえば、正規表現パターン<ph id="ph1">`(\d{3})-(\d{3}-\d{4})`</ph>、2 つの部分式を持つ北アメリカの電話番号に一致します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The first consists of the area code, which composes the first three digits of the telephone number.</source>
          <target state="translated">最初は、市外局番を表し、電話番号の最初の 3 つの桁で構成されます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>This group is captured by the first portion of the regular expression, <ph id="ph1">`(\d{3})`</ph>.The second consists of the individual telephone number, which composes the last seven digits of the telephone number.</source>
          <target state="translated">このグループは、正規表現の最初の部分でキャプチャ<ph id="ph1">`(\d{3})`</ph>です。2 つ目は、個々 の電話番号を表し、電話番号の最後の 7 桁の数字で構成されます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>This group is captured by the second portion of the regular expression, <ph id="ph1">`(\d{3}-\d{4})`</ph>.</source>
          <target state="translated">このグループは、正規表現の 2 番目の部分でキャプチャ<ph id="ph1">`(\d{3}-\d{4})`</ph>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>These two groups can then be retrieved from the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object that is returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property, as the following example shows.</source>
          <target state="translated">これら 2 つのグループから取得できます、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph>によって返されるオブジェクト、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph>プロパティは、次の例のようにします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType&gt;</ph> property is a zero-based collection object that always has at least one member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph>によって返されるオブジェクト、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType&gt;</ph>プロパティは 0 から始まるコレクション オブジェクトであり、常に少なくとも 1 つのメンバーを持ちます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>If the regular expression engine cannot find any matches in a particular input string, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType&gt;</ph> property of the single <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object in the collection (the object at index 0) is set to <ph id="ph3">`false`</ph> and the <ph id="ph4">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object's <ph id="ph5">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property is set to <ph id="ph6">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">正規表現エンジンは、特定の入力文字列内ですべての一致を見つけられない場合、 <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType&gt;</ph> 1 つのプロパティ<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph>(インデックス 0 位置にあるオブジェクト) のコレクション内のオブジェクトに設定されている<ph id="ph3">`false`</ph>と<ph id="ph4">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph>オブジェクトの<ph id="ph5">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph>プロパティに設定されている<ph id="ph6">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>If the regular expression engine can find a match, the first element of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph> object (the element at index 0) returned by the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property contains a string that matches the entire regular expression pattern.</source>
          <target state="translated">正規表現エンジンが一致の最初の要素を見つけることができるかどうか、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.GroupCollection&gt;</ph>によって返されるオブジェクト (インデックス 0 位置にある要素)、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph>プロパティには、正規表現パターンに一致する文字列が含まれています。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups.</source>
          <target state="translated">後続の各要素のインデックスから上方向を表します、キャプチャされたグループ、正規表現では、キャプチャ グループが含まれる場合。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>For more information, see the "Grouping Constructs and Regular Expression Objects" section of the <bpt id="p1">[</bpt>Grouping Constructs<ept id="p1">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept> article.</source>
          <target state="translated">詳細については、の「グループ化を構築し、、正規表現オブジェクト」セクションを参照して、<bpt id="p1">[</bpt>グループ化構成体<ept id="p1">](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)</ept>資料です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The following example attempts to match a regular expression pattern against a sample string.</source>
          <target state="translated">次の例は、サンプルの文字列に対して正規表現パターンに一致を試みます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.Match.Groups">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph> property to store information that is retrieved by the match for display to the console.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Groups%2A&gt;</ph>プロパティをコンソールに表示するための一致によって取得される情報を格納します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</source>
          <target state="translated">一致する対象が最後に見つかった位置の終了位置 (最後に一致した文字の後の文字) から開始して、次に一致する対象を検索した結果の新しい <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The next regular expression match.</source>
          <target state="translated">次の正規表現一致。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>This method is similar to calling <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> again and passing (<ph id="ph2">`Index+Length`</ph>) as the new starting position.</source>
          <target state="translated">このメソッドは呼び出しに似ています<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>再び、受け渡し (<ph id="ph2">`Index+Length`</ph>) として、新しい開始される位置。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>This method does not modify the current instance.</source>
          <target state="translated">このメソッドは、現在のインスタンスを変更しません。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Instead, it returns a new <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object that contains information about the next match.</source>
          <target state="translated">代わりに、新しい返します<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph>次の一致に関する情報を含むオブジェクト。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Attempting to retrieve the next match may throw a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval.</source>
          <target state="translated">スローする可能性が次の一致項目を取得しようとすると、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph>かどうか、照合操作のタイムアウト値が有効になり、次の一致を検索しようとすると、そのタイムアウト間隔を超えています。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A&gt;</ph> method to capture regular expression matches beyond the first match.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A&gt;</ph>最初の一致を超えると一致する正規表現をキャプチャする方法です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>A time-out occurred.</source>
          <target state="translated">タイムアウトが発生しました。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>When a match attempt is repeated by calling the <ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph> method, the regular expression engine gives empty matches special treatment.</source>
          <target state="translated">呼び出して、一致する試行が繰り返された場合、<ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph>メソッド、正規表現エンジンは、空一致特別な処理です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Usually, <ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph> begins the search for the next match exactly where the previous match left off.</source>
          <target state="translated">通常、<ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph>正確に前の一致するところから次の一致の検索を開始します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>However, after an empty match, the <ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph> method advances by one character before trying the next match.</source>
          <target state="translated">ただし、空一致した後、<ph id="ph1">&lt;see cref="M:System.Text.RegularExpressions.Match.NextMatch" /&gt;</ph>メソッドが次の一致を試みる前に 1 文字進めます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>This behavior guarantees that the regular expression engine will progress through the string.</source>
          <target state="translated">この動作は、正規表現エンジンはその文字列を進行状況のことを保証します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.</source>
          <target state="translated">それ以外の場合、空一致が前方移動に含まれていないため、前の一致項目とまったく同じ場所では次の一致を開始し、繰り返し同じ空の文字列は一致します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The following example provides an illustration.</source>
          <target state="translated">具体的な例を次に示します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The regular expression pattern <bpt id="p1">&lt;c&gt;</bpt>a*<ept id="p1">&lt;/c&gt;</ept> searches for zero or more occurrences of the letter "a" in the string "abaabb".</source>
          <target state="translated">正規表現パターン<bpt id="p1">&lt;c&gt;</bpt>、*<ept id="p1">&lt;/c&gt;</ept>の文字の 0 個以上の出現箇所を検索、文字列"abaabb"に"a"です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>As the output from the example shows, the search finds six matches.</source>
          <target state="translated">例の出力では、検索は 6 つの一致を検索します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The first match attempt finds the first "a".</source>
          <target state="translated">最初の一致試行最初の検索"a"です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string.</source>
          <target state="translated">ここで最初と一致する最初の b の前に終了すると、2 番目の一致が開始これにより、"a"の発生回数をゼロを検索して、空の文字列を返します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The third match does not begin exactly where the second match ended, because the second match returned an empty string.</source>
          <target state="translated">3 番目の一致始まらない正確に 2 番目の一致の終了位置、2 番目の一致には、空の文字列が返されたためです。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>Instead, it begins one character later, after the first "b".</source>
          <target state="translated">代わりに、その後、最初の"b"に 1 つの文字を開始します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The third match finds two occurrences of "a" and returns "aa".</source>
          <target state="translated">3 番目の一致では、"a"の 2 回の出現を検索して、"aa"を返します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string.</source>
          <target state="translated">4 番目の一致する試行が 2 番目"b"の前に、3 番目の一致の終了位置を開始し、空の文字列を返します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string.</source>
          <target state="translated">5 番目の一致する試行は、3 番目の"b"の前に、から開始し、空の文字列を取得できるように、1 つの文字をもう一度進めます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.NextMatch">
          <source>The sixth match begins after the last "b" and returns an empty string again.</source>
          <target state="translated">6 番目の一致では、最後の"b"の後から開始し、もう一度、空の文字列を返します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The replacement pattern to use.</source>
          <target state="translated">使用する置換パターン。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Returns the expansion of the specified replacement pattern.</source>
          <target state="translated">指定された置換パターンを展開して返します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The expanded version of the <ph id="ph1">&lt;paramref name="replacement" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="replacement" /&gt;</ph> パラメーターの展開形式。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Whereas the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType&gt;</ph> method replaces all matches in an input string with a specified replacement pattern, the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Result%2A&gt;</ph> method replaces a single match with a specified replacement pattern.</source>
          <target state="translated">一方、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType&gt;</ph>メソッドは、指定された置換パターンで、入力文字列内のすべての一致項目を置き換えます、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match.Result%2A&gt;</ph>メソッドは、指定された置換パターンで単一の一致を置き換えます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Result%2A&gt;</ph> method.</source>
          <target state="translated">呼び出す前に、一致した文字列の処理を実行することがも個々 の一致を操作するため、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match.Result%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The <ph id="ph1">`replacement`</ph> parameter is a standard regular expression replacement pattern.</source>
          <target state="translated"><ph id="ph1">`replacement`</ph>パラメーターは、標準の正規表現置換パターン。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>It can consist of literal characters and regular expression substitutions.</source>
          <target state="translated">これは、リテラル文字および正規表現の置換ので構成できます。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Substitutions<ept id="p1">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>置換<ept id="p1">](~/docs/standard/base-types/substitutions-in-regular-expressions.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The following example replaces the hyphens that begin and end a parenthetical expression with parentheses.</source>
          <target state="translated">次の例では、始まりし、終わりかっこがある式をかっこで囲んだハイフンが置き換えられます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The regular expression pattern <ph id="ph1">`--(.+?)--`</ph> is interpreted as shown in the following table.</source>
          <target state="translated">この正規表現パターン <ph id="ph1">`--(.+?)--`</ph> の解釈を次の表に示します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Pattern</source>
          <target state="translated">パターン</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Match two hyphens.</source>
          <target state="translated">2 つのハイフンと一致します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Match any character one or more times, but as few times as possible.</source>
          <target state="translated">1 つまたは複数回、できるだけがだけ少ない回数を任意の文字に一致します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>This is the first capturing group.</source>
          <target state="translated">これが最初のキャプチャ グループです。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Match two hyphens.</source>
          <target state="translated">2 つのハイフンと一致します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Note that the regular expression pattern <ph id="ph1">`--(.+?)--`</ph> uses the lazy quantifier <ph id="ph2">`+?`</ph>.</source>
          <target state="translated">なお、正規表現パターン<ph id="ph1">`--(.+?)--`</ph>最短一致の量指定子を使用して<ph id="ph2">`+?`</ph>です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>If the greedy quantifier <ph id="ph1">`+`</ph> were used instead, the regular expression engine would find only a single match in the input string.</source>
          <target state="translated">場合、最長一致の量化子<ph id="ph1">`+`</ph>使用された正規表現エンジンが入力文字列内で単一の一致のみを検索が代わりに、します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>The replacement string <ph id="ph1">`($1)`</ph> replaces the match with the first captured group, which is enclosed in parentheses.</source>
          <target state="translated">置換文字列<ph id="ph1">`($1)`</ph>一致をかっこで囲まれた最初のキャプチャ グループに置き換えます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source><ph id="ph1">&lt;paramref name="replacement" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="replacement" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Result(System.String)">
          <source>Expansion is not allowed for this pattern.</source>
          <target state="translated">このパターンは展開できません。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
          <source>A regular expression match equivalent to the one expected.</source>
          <target state="translated">要求する一致と等価の正規表現一致。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> instance equivalent to the one supplied that is suitable to share between multiple threads.</source>
          <target state="translated">指定されたオブジェクトと等価であり、かつ複数のスレッド間での共有に適した <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> インスタンスを返します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
          <source>A regular expression match that is suitable to share between multiple threads.</source>
          <target state="translated">複数のスレッド間での共有に適した正規表現一致。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
          <source><ph id="ph1">&lt;paramref name="inner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inner" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>