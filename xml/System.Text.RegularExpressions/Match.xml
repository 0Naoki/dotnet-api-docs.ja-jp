<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b567cd4a90c37a3a3968897ceb3a116cce7d88c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39902357" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="947e4-101">1 回の正規表現検索に一致した結果を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="947e4-101">Represents the results from a single regular expression match.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947e4-102"><xref:System.Text.RegularExpressions.Match>オブジェクトは不変でありパブリック コンス トラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="947e4-102">The <xref:System.Text.RegularExpressions.Match> object is immutable and has no public constructor.</span></span> <span data-ttu-id="947e4-103">インスタンス、<xref:System.Text.RegularExpressions.Match>クラスは、によって返される、<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>メソッドを表す文字列の最初のパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="947e4-103">An instance of the <xref:System.Text.RegularExpressions.Match> class is returned by the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> method and represents the first pattern match in a string.</span></span> <span data-ttu-id="947e4-104">後続の一致するがによって表される<xref:System.Text.RegularExpressions.Match>によって返されるオブジェクト、<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="947e4-104">Subsequent matches are represented by <xref:System.Text.RegularExpressions.Match> objects returned by the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="947e4-105">さらに、 <xref:System.Text.RegularExpressions.MatchCollection> 0、1 つ、以上から成るオブジェクト<xref:System.Text.RegularExpressions.Match>によってオブジェクトが返される、<xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="947e4-105">In addition, a <xref:System.Text.RegularExpressions.MatchCollection> object that consists of zero, one, or more <xref:System.Text.RegularExpressions.Match> objects is returned by the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="947e4-106">場合、 <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> 、入力文字列内の正規表現パターンに一致するメソッドが失敗した、空を返します<xref:System.Text.RegularExpressions.MatchCollection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="947e4-106">If the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> method fails to match a regular expression pattern in an input string, it returns an empty <xref:System.Text.RegularExpressions.MatchCollection> object.</span></span> <span data-ttu-id="947e4-107">使用することができます、 `foreach` (C#) を構築または`For Each`コレクションを反復処理する Visual Basic で作成します。</span><span class="sxs-lookup"><span data-stu-id="947e4-107">You can then use a `foreach` construct in C# or a `For Each` construct in Visual Basic to iterate the collection.</span></span>  
  
 <span data-ttu-id="947e4-108">場合、<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>メソッドは、正規表現パターンに一致するように失敗すると、それを返します、<xref:System.Text.RegularExpressions.Match>オブジェクトと等しい<xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="947e4-108">If the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> method fails to match the regular expression pattern, it returns a <xref:System.Text.RegularExpressions.Match> object that is equal to <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="947e4-109">使用することができます、<xref:System.Text.RegularExpressions.Group.Success%2A>プロパティを一致が成功したかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="947e4-109">You can use the <xref:System.Text.RegularExpressions.Group.Success%2A> property to determine whether the match was successful.</span></span> <span data-ttu-id="947e4-110">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="947e4-110">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 <span data-ttu-id="947e4-111">パターン一致が成功した場合、<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティに一致した部分文字列が含まれています、<xref:System.Text.RegularExpressions.Capture.Index%2A>プロパティが一致した部分文字列の入力文字列内の 0 から始まる開始位置を示す、<xref:System.Text.RegularExpressions.Capture.Length%2A>プロパティを示します、入力文字列内で一致した部分文字列の長さ。</span><span class="sxs-lookup"><span data-stu-id="947e4-111">If a pattern match is successful, the <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the matched substring, the <xref:System.Text.RegularExpressions.Capture.Index%2A> property indicates the zero-based starting position of the matched substring in the input string, and the <xref:System.Text.RegularExpressions.Capture.Length%2A> property indicates the length of matched substring in the input string.</span></span>  
  
 <span data-ttu-id="947e4-112">単一の一致が複数のキャプチャ グループを含むため、<xref:System.Text.RegularExpressions.Match>が、<xref:System.Text.RegularExpressions.Match.Groups%2A>プロパティを返す、<xref:System.Text.RegularExpressions.GroupCollection>します。</span><span class="sxs-lookup"><span data-stu-id="947e4-112">Because a single match can involve multiple capturing groups, <xref:System.Text.RegularExpressions.Match> has a <xref:System.Text.RegularExpressions.Match.Groups%2A> property that returns the <xref:System.Text.RegularExpressions.GroupCollection>.</span></span> <span data-ttu-id="947e4-113"><xref:System.Text.RegularExpressions.Match>インスタンス自体は、コレクションの最初のオブジェクトと等価で`Match.Groups[0]`(`Match.Groups(0)` Visual basic)、一致した文字列全体を表します。</span><span class="sxs-lookup"><span data-stu-id="947e4-113">The <xref:System.Text.RegularExpressions.Match> instance itself is equivalent to the first object in the collection, at `Match.Groups[0]` (`Match.Groups(0)` in Visual Basic), which represents the entire match.</span></span> <span data-ttu-id="947e4-114">一致でキャプチャされたグループは、次の方法でアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="947e4-114">You can access the captured groups in a match in the following ways:</span></span>  
  
-   <span data-ttu-id="947e4-115">メンバーを反復処理できる、<xref:System.Text.RegularExpressions.GroupCollection>オブジェクトを使用して、 `foreach` (c#) または`For Each`(Visual Basic) の構成要素。</span><span class="sxs-lookup"><span data-stu-id="947e4-115">You can iterate the members of the <xref:System.Text.RegularExpressions.GroupCollection> object  by using a `foreach` (C#) or `For Each` (Visual Basic) construct.</span></span>  
  
-   <span data-ttu-id="947e4-116">使用することができます、<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType>キャプチャ グループの番号でグループを取得するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="947e4-116">You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> property to retrieve groups by the number of the capturing group.</span></span> <span data-ttu-id="947e4-117">インスタンスを呼び出すことによって、番号付きグループは正規表現内に存在を確認することができますに注意してください<xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="947e4-117">Note that you can determine which numbered groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="947e4-118">使用することができます、<xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType>キャプチャ グループの名前でグループを取得するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="947e4-118">You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> property to retrieve groups by the name of the capturing group.</span></span> <span data-ttu-id="947e4-119">インスタンスを呼び出すことによって、どの名前付きグループは正規表現内に存在を確認することができますに注意してください<xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="947e4-119">Note that you can determine which named groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947e4-120">次の例では、正規表現を使用して、`Console\.Write(Line)?`します。</span><span class="sxs-lookup"><span data-stu-id="947e4-120">The following examples use the regular expression `Console\.Write(Line)?`.</span></span> <span data-ttu-id="947e4-121">この正規表現パターンは、次のように解釈されます。</span><span class="sxs-lookup"><span data-stu-id="947e4-121">The regular expression is interpreted as follows:</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="947e4-122">コンソール\\します。書き込み</span><span class="sxs-lookup"><span data-stu-id="947e4-122">Console\\.Write</span></span>|<span data-ttu-id="947e4-123">文字列 "Console.Write" と一致します。</span><span class="sxs-lookup"><span data-stu-id="947e4-123">Match the string "Console.Write".</span></span> <span data-ttu-id="947e4-124">なお、"."任意の文字に一致するワイルドカードとしてではなく、その期間をリテラルとして解釈されますように文字がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="947e4-124">Note that the "." character is escaped so that it is interpreted as a literal period rather than as a wildcard that matches any character.</span></span>|  
|<span data-ttu-id="947e4-125">(行) ですか。</span><span class="sxs-lookup"><span data-stu-id="947e4-125">(Line)?</span></span>|<span data-ttu-id="947e4-126">文字列 "Line" の 0 回または 1 回の繰り返しに一致します。</span><span class="sxs-lookup"><span data-stu-id="947e4-126">Match zero or one occurrence of the string "Line".</span></span>|  
  
 <span data-ttu-id="947e4-127">**例 1**</span><span class="sxs-lookup"><span data-stu-id="947e4-127">**Example 1**</span></span>  
  
 <span data-ttu-id="947e4-128">次の例では、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType>入力文字列内のすべてのパターン一致を取得します。</span><span class="sxs-lookup"><span data-stu-id="947e4-128">The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> method to retrieve all pattern matches in an input string.</span></span> <span data-ttu-id="947e4-129">反復処理し、 <xref:System.Text.RegularExpressions.Match> 、返されるオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>各一致に関する情報を表示するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="947e4-129">It then iterates the <xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> object to display information about each match.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 <span data-ttu-id="947e4-130">**例 2**</span><span class="sxs-lookup"><span data-stu-id="947e4-130">**Example 2**</span></span>  
  
 <span data-ttu-id="947e4-131">次の例では、<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29>と<xref:System.Text.RegularExpressions.Match.NextMatch%2A>を一度に 1 つの一致を取得するメソッド。</span><span class="sxs-lookup"><span data-stu-id="947e4-131">The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> and <xref:System.Text.RegularExpressions.Match.NextMatch%2A> methods to retrieve one match at a time.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="947e4-132">空のグループを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-132">Gets the empty group.</span>
          </span>
          <span data-ttu-id="947e4-133">一致する対象が見つからなかった検索は、この空一致を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-133">All failed matches return this empty match.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="947e4-134">空一致。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-134">An empty match.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947e4-135">一致が成功したかどうかを決定する、このプロパティを使用しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="947e4-135">This property should not be used to determine if a match is successful.</span></span> <span data-ttu-id="947e4-136">代わりに、使用、`Match.Success`プロパティ (から継承<xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="947e4-136">Instead, use the `Match.Success` property (which is inherited from <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="947e4-137">正規表現に一致したグループのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-137">Gets a collection of groups matched by the regular expression.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="947e4-138">パターンに一致した文字グループ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-138">The character groups matched by the pattern.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947e4-139">正規表現パターンでは、正規表現パターンの一部をかっこで囲んで定義されている部分式を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="947e4-139">A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses.</span></span> <span data-ttu-id="947e4-140">このようなすべての部分式は、グループを形成します。</span><span class="sxs-lookup"><span data-stu-id="947e4-140">Every such subexpression forms a group.</span></span> <span data-ttu-id="947e4-141"><xref:System.Text.RegularExpressions.Match.Groups%2A>プロパティはこれらの部分式一致に関する情報へのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="947e4-141">The <xref:System.Text.RegularExpressions.Match.Groups%2A> property provides access to information about those subexpression matches.</span></span> <span data-ttu-id="947e4-142">たとえば、正規表現パターン`(\d{3})-(\d{3}-\d{4})`、2 つの部分式には北アメリカの電話番号に一致します。</span><span class="sxs-lookup"><span data-stu-id="947e4-142">For example, the regular expression pattern `(\d{3})-(\d{3}-\d{4})`, which matches North American telephone numbers, has two subexpressions.</span></span> <span data-ttu-id="947e4-143">1 つ目を表し、最初の 3 つの桁の電話番号の市外局番で構成されます。</span><span class="sxs-lookup"><span data-stu-id="947e4-143">The first consists of the area code, which composes the first three digits of the telephone number.</span></span> <span data-ttu-id="947e4-144">このグループは、正規表現の最初の部分でキャプチャ`(\d{3})`します。2 つ目は、個々 の電話番号を表し、電話番号の最後の 7 桁で構成されます。</span><span class="sxs-lookup"><span data-stu-id="947e4-144">This group is captured by the first portion of the regular expression, `(\d{3})`.The second consists of the individual telephone number, which composes the last seven digits of the telephone number.</span></span> <span data-ttu-id="947e4-145">このグループは、正規表現の 2 番目の部分によってキャプチャ`(\d{3}-\d{4})`します。</span><span class="sxs-lookup"><span data-stu-id="947e4-145">This group is captured by the second portion of the regular expression, `(\d{3}-\d{4})`.</span></span> <span data-ttu-id="947e4-146">これら 2 つのグループから取得できます、<xref:System.Text.RegularExpressions.GroupCollection>オブジェクトによって返される、<xref:System.Text.RegularExpressions.Match.Groups%2A>プロパティは、次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="947e4-146">These two groups can then be retrieved from the <xref:System.Text.RegularExpressions.GroupCollection> object that is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property, as the following example shows.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 <span data-ttu-id="947e4-147"><xref:System.Text.RegularExpressions.GroupCollection>によって返されるオブジェクト、<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType>プロパティは常に少なくとも 1 つのメンバーを含む 0 から始まるコレクション オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="947e4-147">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property is a zero-based collection object that always has at least one member.</span></span> <span data-ttu-id="947e4-148">正規表現エンジンでは、特定の入力文字列で、一致した結果が見つからない場合、 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 、1 つのプロパティ<xref:System.Text.RegularExpressions.Group>(インデックス 0 位置にあるオブジェクト) のコレクション内のオブジェクトに設定されている`false`と<xref:System.Text.RegularExpressions.Group>オブジェクト<xref:System.Text.RegularExpressions.Capture.Value%2A>プロパティに設定されて<xref:System.String.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="947e4-148">If the regular expression engine cannot find any matches in a particular input string, the <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property of the single <xref:System.Text.RegularExpressions.Group> object in the collection (the object at index 0) is set to `false` and the <xref:System.Text.RegularExpressions.Group> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property is set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="947e4-149">正規表現エンジンが一致の最初の要素を見つけることができるかどうか、<xref:System.Text.RegularExpressions.GroupCollection>によって返されるオブジェクト (インデックス 0 位置にある要素)、<xref:System.Text.RegularExpressions.Match.Groups%2A>プロパティには、正規表現パターンに一致する文字列が含まれています。</span><span class="sxs-lookup"><span data-stu-id="947e4-149">If the regular expression engine can find a match, the first element of the <xref:System.Text.RegularExpressions.GroupCollection> object (the element at index 0) returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property contains a string that matches the entire regular expression pattern.</span></span> <span data-ttu-id="947e4-150">後続の各要素のインデックスから上に、グループを表しますキャプチャされた、正規表現では、キャプチャ グループが含まれる場合。</span><span class="sxs-lookup"><span data-stu-id="947e4-150">Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="947e4-151">詳細については、の"グループ化を構築し、正規表現オブジェクト」セクションを参照してください、[グループ化構成体](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)記事。</span><span class="sxs-lookup"><span data-stu-id="947e4-151">For more information, see the "Grouping Constructs and Regular Expression Objects" section of the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947e4-152">次の例は、サンプルの文字列に対して正規表現パターンに一致を試みます。</span><span class="sxs-lookup"><span data-stu-id="947e4-152">The following example attempts to match a regular expression pattern against a sample string.</span></span> <span data-ttu-id="947e4-153">この例では、<xref:System.Text.RegularExpressions.Match.Groups%2A>コンソールに表示するための一致によって取得される情報を格納するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="947e4-153">The example uses the <xref:System.Text.RegularExpressions.Match.Groups%2A> property to store information that is retrieved by the match for display to the console.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="947e4-154">一致する対象が最後に見つかった位置の終了位置 (最後に一致した文字の後の文字) から開始して、次に一致する対象を検索した結果の新しい <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-154">Returns a new <see cref="T:System.Text.RegularExpressions.Match" /> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="947e4-155">次の正規表現一致。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-155">The next regular expression match.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947e4-156">このメソッドを呼び出すことは<xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>もう一度と受け渡し (`Index+Length`) として、新しい開始位置。</span><span class="sxs-lookup"><span data-stu-id="947e4-156">This method is similar to calling <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> again and passing (`Index+Length`) as the new starting position.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="947e4-157">このメソッドでは、現在のインスタンスは変更されません。</span><span class="sxs-lookup"><span data-stu-id="947e4-157">This method does not modify the current instance.</span></span> <span data-ttu-id="947e4-158">代わりに、新しい返します<xref:System.Text.RegularExpressions.Match>次の一致に関する情報を含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="947e4-158">Instead, it returns a new <xref:System.Text.RegularExpressions.Match> object that contains information about the next match.</span></span>  
  
 <span data-ttu-id="947e4-159">スローする可能性が次の一致を取得しようとすると、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>かどうか、照合操作のタイムアウト値が有効で、次の一致を検索しようとすると、そのタイムアウト間隔を超えています。</span><span class="sxs-lookup"><span data-stu-id="947e4-159">Attempting to retrieve the next match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947e4-160">次の例では、<xref:System.Text.RegularExpressions.Match.NextMatch%2A>最初の一致を超えると一致する正規表現をキャプチャするメソッド。</span><span class="sxs-lookup"><span data-stu-id="947e4-160">The following example uses the <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method to capture regular expression matches beyond the first match.</span></span>  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
          <span data-ttu-id="947e4-161">タイムアウトが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-161">A time-out occurred.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="947e4-162">
            <para>呼び出すことで、一致する試行が繰り返された場合、<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />メソッドでは、正規表現エンジンは、空一致特別な処理。通常、<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />前回の一致が左を正確に次の一致の検索を開始します。ただし、空一致後、<see cref="M:System.Text.RegularExpressions.Match.NextMatch" />メソッドは、次の一致を試みる前に、1 つ文字分だけ進めます。この動作は、正規表現エンジンは、文字列を進めることが保証されます。それ以外の場合、空一致が、前方移動で含まれていないため、次の一致は、前回の一致とまったく同じ場所で開始し、同じ空の文字列を繰り返しに一致が。具体的な例を次に示します。正規表現パターン<c>、\*</c>文字の 0 個以上の出現箇所を検索文字列"abaabb"の"a"です。の例では、からの出力に示す 6 つの一致を検索します。最初の一致する試行が 1 つ目を検索します"a"です。最初の b の前に、終了と一致する、最初に正確に 2 番目の一致が開始これは、"a"の 0 個の出現箇所を検索し、空の文字列を返します。3 番目の一致が始まらない正確に 2 番目の一致が終了した位置、2 番目の一致には、空の文字列が返されるためです。代わりに、最初の"b"後で、1 つの文字を開始します。3 番目の一致では、"a"の 2 つの出現箇所を検索して、"aa"を返します。4 番目の一致の試行は、2 番目"b"の前に、3 番目の一致の終了位置を開始し、空の文字列を返します。3 番目の"b"の前に開始し、空の文字列を返すように、5 番目の一致の試行はもう一度 1 つの文字を進めます。6 番目の一致では、最後の"b"した後に開始し、もう一度空の文字列を返します。 [! コード csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [! コード vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-162">
              <para>When a match attempt is repeated by calling the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method, the regular expression engine gives empty matches special treatment. Usually, <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> begins the search for the next match exactly where the previous match left off. However, after an empty match, the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method advances by one character before trying the next match. This behavior guarantees that the regular expression engine will progress through the string. Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.  The following example provides an illustration. The regular expression pattern <c>a\*</c> searches for zero or more occurrences of the letter "a" in the string "abaabb". As the output from the example shows, the search finds six matches. The first match attempt finds the first "a". The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string. The third match does not begin exactly where the second match ended, because the second match returned an empty string. Instead, it begins one character later, after the first "b". The third match finds two occurrences of "a" and returns "aa". The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string. The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string. The sixth match begins after the last "b" and returns an empty string again.  [!code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [!code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">
          <span data-ttu-id="947e4-163">使用する置換パターン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-163">The replacement pattern to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="947e4-164">指定された置換パターンを展開して返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-164">Returns the expansion of the specified replacement pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="947e4-165">
            <paramref name="replacement" /> パラメーターの展開形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-165">The expanded version of the <paramref name="replacement" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="947e4-166">一方、<xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType>メソッドに指定された置換パターンでは、置換、入力文字列内のすべての一致、<xref:System.Text.RegularExpressions.Match.Result%2A>メソッドは、指定された置換パターンで、単一の一致を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="947e4-166">Whereas the <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> method replaces all matches in an input string with a specified replacement pattern, the <xref:System.Text.RegularExpressions.Match.Result%2A> method replaces a single match with a specified replacement pattern.</span></span> <span data-ttu-id="947e4-167">呼び出す前に、一致した文字列に対して処理を実行することがも、個別の一致で運用されるため、<xref:System.Text.RegularExpressions.Match.Result%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="947e4-167">Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the <xref:System.Text.RegularExpressions.Match.Result%2A> method.</span></span>  
  
 <span data-ttu-id="947e4-168">`replacement`パラメーターは、標準の正規表現の置換パターン。</span><span class="sxs-lookup"><span data-stu-id="947e4-168">The `replacement` parameter is a standard regular expression replacement pattern.</span></span> <span data-ttu-id="947e4-169">文字リテラルと正規表現の置換の構成することができます。</span><span class="sxs-lookup"><span data-stu-id="947e4-169">It can consist of literal characters and regular expression substitutions.</span></span> <span data-ttu-id="947e4-170">詳細については、「[置換](~/docs/standard/base-types/substitutions-in-regular-expressions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="947e4-170">For more information, see [Substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="947e4-171">次の例では、先頭し、末尾のかっこ、かっこで囲まれた式をハイフンが置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="947e4-171">The following example replaces the hyphens that begin and end a parenthetical expression with parentheses.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 <span data-ttu-id="947e4-172">この正規表現パターン `--(.+?)--` の解釈を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="947e4-172">The regular expression pattern `--(.+?)--` is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="947e4-173">パターン</span><span class="sxs-lookup"><span data-stu-id="947e4-173">Pattern</span></span>|<span data-ttu-id="947e4-174">説明</span><span class="sxs-lookup"><span data-stu-id="947e4-174">Description</span></span>|  
|-------------|-----------------|  
|`--`|<span data-ttu-id="947e4-175">2 つのハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="947e4-175">Match two hyphens.</span></span>|  
|`(.+?)`|<span data-ttu-id="947e4-176">任意の文字を 1 つまたは複数回、最も少ない繰り返しに一致します。</span><span class="sxs-lookup"><span data-stu-id="947e4-176">Match any character one or more times, but as few times as possible.</span></span> <span data-ttu-id="947e4-177">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="947e4-177">This is the first capturing group.</span></span>|  
|`--`|<span data-ttu-id="947e4-178">2 つのハイフンと一致します。</span><span class="sxs-lookup"><span data-stu-id="947e4-178">Match two hyphens.</span></span>|  
  
 <span data-ttu-id="947e4-179">なお、正規表現パターン`--(.+?)--`遅延の量指定子を使用して`+?`します。</span><span class="sxs-lookup"><span data-stu-id="947e4-179">Note that the regular expression pattern `--(.+?)--` uses the lazy quantifier `+?`.</span></span> <span data-ttu-id="947e4-180">場合、最長一致の量化子`+`使用された代わりに、正規表現エンジンは、入力文字列内の単一の一致のみを検索は。</span><span class="sxs-lookup"><span data-stu-id="947e4-180">If the greedy quantifier `+` were used instead, the regular expression engine would find only a single match in the input string.</span></span>  
  
 <span data-ttu-id="947e4-181">置換文字列`($1)`一致をかっこで囲まれた最初のキャプチャ グループに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="947e4-181">The replacement string `($1)` replaces the match with the first captured group, which is enclosed in parentheses.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="947e4-182">
            <paramref name="replacement" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-182">
              <paramref name="replacement" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="947e4-183">このパターンは展開できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-183">Expansion is not allowed for this pattern.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" />
      </Parameters>
      <Docs>
        <param name="inner">
          <span data-ttu-id="947e4-184">要求する一致と等価の正規表現一致。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-184">A regular expression match equivalent to the one expected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="947e4-185">指定されたオブジェクトと等価であり、かつ複数のスレッド間での共有に適した <see cref="T:System.Text.RegularExpressions.Match" /> インスタンスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-185">Returns a <see cref="T:System.Text.RegularExpressions.Match" /> instance equivalent to the one supplied that is suitable to share between multiple threads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="947e4-186">複数のスレッド間での共有に適した正規表現一致。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-186">A regular expression match that is suitable to share between multiple threads.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="947e4-187">
            <paramref name="inner" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="947e4-187">
              <paramref name="inner" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>