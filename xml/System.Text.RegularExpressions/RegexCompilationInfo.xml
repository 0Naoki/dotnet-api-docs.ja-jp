<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f164cfc9abe8e849fb31f3e1ac69fd860eddbf89" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52371121" /></Metadata><TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <TypeSignature Language="F#" Value="type RegexCompilationInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>正規表現をコンパイルしてスタンドアロン アセンブリを作成するために使用する正規表現についての情報を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列の<xref:System.Text.RegularExpressions.RegexCompilationInfo>にオブジェクトが渡される、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッド、アセンブリに含まれる各正規表現に関する情報を提供します。 各アセンブリに含まれているコンパイルされた正規表現がから派生したクラスとして表される<xref:System.Text.RegularExpressions.Regex>します。 プロパティ、<xref:System.Text.RegularExpressions.RegexCompilationInfo>型定義の正規表現のクラス名、その完全修飾名 (つまり、その名前空間、型の名前)、その正規表現パターン (正規表現がかどうかなどその他のオプション大文字)、および正規表現エンジンが一致を検索する必要があります期間を指定するタイムアウト間隔。  
  
 インスタンス化することができます、<xref:System.Text.RegularExpressions.RegexCompilationInfo>そのクラスのオーバー ロードされたコンス トラクターを呼び出すことによってオブジェクト。  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
    <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">コンパイルと再利用</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">コンパイルする正規表現。</param>
        <param name="options">正規表現をコンパイルするときに使用する正規表現オプション。</param>
        <param name="name">コンパイル済みの正規表現を表す型の名前。</param>
        <param name="fullnamespace">新しい型の所属先となる名前空間。</param>
        <param name="ispublic">コンパイルされた正規表現をパブリックに参照できるようにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>アセンブリに含める正規表現についての情報を格納する <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各パラメーター、<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>コンス トラクターは、のプロパティに直接対応、<xref:System.Text.RegularExpressions.RegexCompilationInfo>クラス。 すべてのプロパティは読み取り/書き込みであるためは、その値が直接割り当てることもできます。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドはコンパイルされた正規表現を格納するアセンブリを生成します。 そのため、指定しないでください<xref:System.Text.RegularExpressions.RegexOptions.Compiled>の値の 1 つとして`options`します。  
  
 場合`ispublic`は`true`、コンパイルされた正規表現クラスは、パブリック アクセシビリティを指定します。 つまり、任意のアセンブリで実行されるコードからインスタンス化することができます。 場合`ispublic`は`false`、コンパイルされた正規表現クラスを指定`internal`(で C# の場合) または`Friend`(Visual Basic) でのアクセシビリティ。 つまり、正規表現クラスと同じアセンブリで実行されるコードからのみインスタンス化することができます。  
  
   
  
## Examples  
 次の例では、作成し、2 つの手順でコンパイルされた正規表現を使用します。  
  
 最初の手順では、コンパイルし、次のコード例を実行します。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A>コンス トラクターのコード例ではコンパイルされた正規表現を定義します。 コードを実行した結果がという名前のコンパイル済みの正規型を含む FishRegex.dll という名前のアセンブリ`FishRegex`します。  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 2 番目の手順で、FishRegex.dll への参照を使用して、次のコード例をコンパイルし、結果として得られる実行可能ファイルを実行します。 実行可能ファイルを使用して、対象の文字列を一致する、 `FishRegex` 「」と、ターゲット文字列の一致、グループ、キャプチャ グループ、および一致項目のインデックス位置を表示します。  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="name" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="fullnamespace" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage"><para>このコンス トラクターを作成するアプリケーション ドメインの既定のタイムアウト値を使用するコンパイルされた正規表現を作成します。 コンパイルされた正規表現は値を使用する場合は、アプリケーション ドメインのタイムアウト値が定義されている、 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、パターン マッチング操作タイムアウトを防ぐことができます。コンパイルされた正規表現を作成するための推奨されるコンス トラクターは<see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool * TimeSpan -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">コンパイルする正規表現。</param>
        <param name="options">正規表現をコンパイルするときに使用する正規表現オプション。</param>
        <param name="name">コンパイル済みの正規表現を表す型の名前。</param>
        <param name="fullnamespace">新しい型の所属先となる名前空間。</param>
        <param name="ispublic">コンパイルされた正規表現をパブリックに参照できるようにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="matchTimeout">正規表現の既定のタイムアウト間隔。</param>
        <summary>アセンブリに含めるタイムアウト値を指定した正規表現についての情報を格納する <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各パラメーター、<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>コンス トラクターは、のプロパティに直接対応、<xref:System.Text.RegularExpressions.RegexCompilationInfo>クラス。 すべてのプロパティは読み取り/書き込みであるためは、その値が直接割り当てることもできます。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドはコンパイルされた正規表現を格納するアセンブリを生成します。 そのため、指定しないでください<xref:System.Text.RegularExpressions.RegexOptions.Compiled>の値の 1 つとして`options`します。  
  
 場合`ispublic`は`true`、コンパイルされた正規表現クラスは、パブリック アクセシビリティを指定します。 つまり、任意のアセンブリで実行されるコードからインスタンス化することができます。 場合`ispublic`は`false`、コンパイルされた正規表現クラスを指定`internal`(で C# の場合) または`Friend`(Visual Basic) でのアクセシビリティ。 つまり、正規表現クラスと同じアセンブリで実行されるコードからのみインスタンス化することができます。  
  
 `matchTimeout`パラメーターがコンパイルされた正規表現の既定のタイムアウト間隔を定義します。 この値は、操作がタイムアウトになると、正規表現エンジンをスローする前に、コンパイルされた正規表現オブジェクトは 1 つの一致する操作を実行、時間の概算の量を表す、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> [次へ] のタイミングのチェック中に例外. タイムアウト値の詳細については、次を参照してください。、<xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>プロパティ。  
  
> [!IMPORTANT]
>  常にコンパイルされた正規表現の既定のタイムアウト値を設定することをお勧めします。 正規表現ライブラリのコンシューマーは渡すことによってそのタイムアウト値をオーバーライドすることができます、<xref:System.TimeSpan>このコンス トラクターのオーバー ロードに新しいタイムアウト間隔を表す値です。  
  
   
  
## Examples  
 次の例は、という名前の単一のコンパイルされた正規表現を定義します。 `DuplicateChars` 、入力文字列内の同じ文字の 2 つ以上の出現箇所を識別します。 コンパイル済みの正規表現に 2 秒の既定のタイムアウト。 例を実行するときに、コンパイルされた正規表現を含む RegexLib.dll をという名前のクラス ライブラリを作成します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 正規表現パターン `(\w)\1+` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`(\w)`|任意の単語文字と一致し、最初のキャプチャ グループに割り当てます。|  
|`\1+`|最初のキャプチャ グループの値の 1 つまたは複数回の出現に一致します。|  
  
 次の例では、`DuplicatedChars`文字列配列に重複する文字を識別するために正規表現。 呼び出し時に、`DuplicatedChars`コンス トラクターは、.5 秒間にタイムアウト間隔を変更します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="name" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="fullnamespace" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンパイルされた正規表現をパブリックに参照できるかどうかを示す値を取得または設定します。</summary>
        <value>正規表現をパブリックに参照できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A>プロパティは`false`クラスを含むアセンブリで実行されているコードからのみ、現在のインスタンスで定義された正規表現クラスをインスタンス化することができます。 ただし、ため、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType>メソッドをコンパイルされた正規表現のみを含み、追加する追加のコードを許可しないアセンブリを生成する、一般にこのプロパティの値を割り当てる理由はありません`false`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正規表現の既定のタイムアウト間隔を取得または設定します。</summary>
        <value><see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> がスローされる前にパターン一致操作で経過できる既定の最大時間間隔、またはタイムアウトが無効な場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>プロパティは、コンパイルされた正規表現の既定のタイムアウト間隔を定義します。 この値は、操作がタイムアウトになると、正規表現エンジンをスローする前にコンパイルされた正規表現が一致する 1 つの操作を実行する時間の概算の量を表す、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> [次へ] のタイミングのチェック中に例外。  
  
> [!IMPORTANT]
>  常にコンパイルされた正規表現の既定のタイムアウト値を設定することをお勧めします。 正規表現ライブラリのコンシューマーは渡すことによってそのタイムアウト値をオーバーライドすることができます、<xref:System.TimeSpan>コンパイルされた正規表現のクラスのコンス トラクターに新しいタイムアウト間隔を表す値です。  
  
 既定のタイムアウト値を割り当てることができます、<xref:System.Text.RegularExpressions.RegexCompilationInfo>で、次の方法のいずれかのオブジェクト。  
  
-   呼び出すことによって、<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>メソッドとの文字列表現を提供する、 <xref:System.TimeSpan> "REGEX_DEFAULT_MATCH_TIMEOUT"プロパティの値。  
  
-   呼び出すことによって、<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29>コンス トラクターとの値を提供する、`matchTimeout`パラメーター。  
  
-   このプロパティの値を設定します。  
  
 妥当なタイムアウト間隔を設定するには、次の要因を検討します。  
  
-   長さと複雑さの正規表現パターン。 時間が長くより複雑な正規表現では、短くてわかりやすいものよりも時間が必要です。  
  
-   予想されるマシンの負荷。 処理では、CPU とメモリ使用率が高いシステムでより多くの時間がかかります。  
  
   
  
## Examples  
 次の例は、という名前の単一のコンパイルされた正規表現を定義します。 `DuplicateChars` 、入力文字列内の同じ文字の 2 つ以上の出現箇所を識別します。 コンパイル済みの正規表現に 2 秒の既定のタイムアウト。 例を実行するときに、コンパイルされた正規表現を含む RegexLib.dll をという名前のクラス ライブラリを作成します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 正規表現パターン `(\w)\1+` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`(\w)`|任意の単語文字と一致し、最初のキャプチャ グループに割り当てます。|  
|`\1+`|最初のキャプチャ グループの値の 1 つまたは複数回の出現に一致します。|  
  
 次の例では、`DuplicatedChars`文字列配列に重複する文字を識別するために正規表現。 呼び出し時に、`DuplicatedChars`コンス トラクターは、.5 秒間にタイムアウト間隔を変更します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンパイル済みの正規表現を表す型の名前を取得または設定します。</summary>
        <value>新しい型の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo>クラスから派生したクラスとして表されるコンパイルされた正規表現の定義に使用されます<xref:System.Text.RegularExpressions.Regex>します。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>プロパティは、正規表現の種類のクラス名を定義、<xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>と<xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>プロパティが一緒に、完全修飾名を定義します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティの値は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">このプロパティの値は空の文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しい型の所属先となる名前空間を取得または設定します。</summary>
        <value>新しい型の名前空間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo>クラスから派生したクラスとして表されるコンパイルされた正規表現の定義に使用されます<xref:System.Text.RegularExpressions.Regex>します。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>プロパティは、コンパイルされた正規表現の型を含む名前空間を定義、<xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>と<xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>プロパティが一緒に、完全修飾名を定義します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティの値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正規表現をコンパイルするときに使用するオプションを取得または設定します。</summary>
        <value>列挙値のビットごとの組み合わせ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドはコンパイルされた正規表現を格納するアセンブリを生成します。 そのため、指定する必要はない<xref:System.Text.RegularExpressions.RegexOptions.Compiled>としてこのプロパティの値のいずれか。 それが存在する場合、<xref:System.Text.RegularExpressions.RegexOptions.Compiled>オプションは無視されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pattern : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンパイルする正規表現を取得または設定します。</summary>
        <value>コンパイルする正規表現。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>プロパティは、任意の有効な正規表現を含めることができます。 場合の値、<xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>プロパティは、正しい構文の正規表現パターンへの呼び出しではありません、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドがスローされます、<xref:System.ArgumentException>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティの値は <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expressions.md">.NET Framework の正規表現</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">正規表現言語要素</related>
      </Docs>
    </Member>
  </Members>
</Type>