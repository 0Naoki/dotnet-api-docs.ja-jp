<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MatchCollection.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e87525df368996e12afb05786542f35ef70697a6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e87525df368996e12afb05786542f35ef70697a6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.</source>
          <target state="translated">正規表現パターンを入力文字列に繰り返し適用したときに、パターンに一致した一連の対象を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The collection is immutable (read-only) and has no public constructor.</source>
          <target state="translated">コレクションは変更不可 (読み取り専用) のパブリック コンス トラクターはありません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> メソッドは <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The collection contains zero or more <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph> objects.</source>
          <target state="translated">コレクションは、0 個以上含まれています。<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>If the match is successful, the collection is populated with one <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph> object for each match found in the input string.</source>
          <target state="translated">いずれかのコレクションが作成される場合は、一致と見なされます、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph>入力文字列内で見つかった一致ごとのオブジェクト。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>If the match is unsuccessful, the collection contains no <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph> objects, and its <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property equals zero.</source>
          <target state="translated">一致が成功しなかった場合、コレクションが含ま<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType&gt;</ph>オブジェクト、およびその<ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph>プロパティが 0 に等しい。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>When applying a regular expression pattern to a particular input string, the regular expression engine uses either of two techniques to build the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object:</source>
          <target state="translated">正規表現パターンを特定の入力文字列に適用すると、ときに、正規表現エンジンを使用して 2 つの手法のいずれかをビルド、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>Direct evaluation.</source>
          <target state="translated">直接評価します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is populated all at once, with all matches resulting from a particular call to the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクトには、一度にすべてに特定の呼び出しの結果として得られるすべての一致、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>This technique is used when the collection's <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property is accessed.</source>
          <target state="translated">この手法を使用するときに、コレクションの<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph>プロパティにアクセスします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>It typically is the more expensive method of populating the collection and entails a greater performance hit.</source>
          <target state="translated">コレクションの高価なメソッドは、通常とだけで、パフォーマンスに大きく影響します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>Lazy evaluation.</source>
          <target state="translated">レイジー評価します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is populated as needed on a match-by-match basis.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクトは、一致-- ごとで、必要に応じて設定されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>It is equivalent to the regular expression engine calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> method repeatedly and adding each match to the collection.</source>
          <target state="translated">これは、正規表現エンジンの呼び出し元に相当、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph>メソッド繰り返し、コレクションに一致した各文字列を追加するとします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>This technique is used when the collection is accessed through its <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method, or when it is accessed using the <ph id="ph2">`foreach`</ph> statement (in C#) or the <ph id="ph3">`For Each`</ph>...<ph id="ph4">`Next`</ph> statement (in Visual Basic).</source>
          <target state="translated">コレクションにアクセスする場合、この手法が使用されるその<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph>メソッドを使用してアクセスしたときや、<ph id="ph2">`foreach`</ph>ステートメント (c#) または<ph id="ph3">`For Each`</ph>しています.<ph id="ph4">`Next`</ph>ステートメント (Visual Basic の場合)。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as <ph id="ph1">`foreach`</ph> in C# and <ph id="ph2">`For Each`</ph>…<ph id="ph3">`Next`</ph></source>
          <target state="translated">コレクションのメンバーを反復処理には、言語によって提供されるコレクションのイテレーション構文を使用する必要があります (など<ph id="ph1">`foreach`</ph>C# の場合と<ph id="ph2">`For Each`</ph>.<ph id="ph3">`Next`</ph></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>in Visual Basic) instead of retrieving the enumerator that is returned by the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method.</source>
          <target state="translated">Visual basic) によって返される列挙子を取得する代わりに、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.RegularExpressions.MatchCollection">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> class to interrogate a set of <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> instances.</source>
          <target state="translated">次の例では、使用、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>クラスのセットを調査する<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>The array the collection is to be copied into.</source>
          <target state="translated">コレクションのコピー先の配列。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>The position in the array where copying is to begin.</source>
          <target state="translated">コピーの開始位置を示す、配列内の位置。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>Copies all the elements of the collection to the given array starting at the given index.</source>
          <target state="translated">指定したインデックスを開始位置として、指定した配列にコレクションのすべての要素をコピーします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>Because the collection is copied into the array starting at the given index, the destination array must be at least as large as the entire collection.</source>
          <target state="translated">コレクションは、指定したインデックスから始まる配列にコピーされる、ために、コピー先の配列は、コレクション全体と少なくとも同じサイズでなければなりません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">対象とするアプリケーションを開発する場合、<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>を使用して、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType&gt;</ph>メソッド代わりにします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to copy the collection before it has been fully populated may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクトに設定は通常、レイジー評価を使用すると、完全に読み込まれた前に、コレクションをコピーしようとしてスローする可能性が、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.</source>
          <target state="translated">照合操作のタイムアウト値が有効でを単一の一致を検索しようとするがそのタイムアウト間隔を超えている場合、この例外をスローできます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is a multi-dimensional array.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は、多次元配列です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is outside the bounds of <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> が <ph id="ph2">&lt;paramref name="array" /&gt;</ph> の境界の外側にあります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> plus <ph id="ph2">&lt;see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /&gt;</ph> is outside the bounds of <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> に <ph id="ph2">&lt;see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /&gt;</ph> を加えた値が <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の境界の外側にあります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
          <source>A time-out occurred.</source>
          <target state="translated">タイムアウトが発生しました。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>Gets the number of matches.</source>
          <target state="translated">一致の数を取得します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>The number of matches.</source>
          <target state="translated">一致の数。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>Accessing individual members of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object by retrieving the value of the collection's <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property causes the regular expression engine to populate the collection using direct evaluation.</source>
          <target state="translated">個々 のメンバーにアクセスする、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクトはコレクションの値を取得して<ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph>プロパティにより、正規表現エンジン直接評価を使用して、コレクションを設定します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>ln contrast, calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method (or using the <ph id="ph2">`foreach`</ph> statement in C# and the <ph id="ph3">`For Each`</ph>...<ph id="ph4">`Next`</ph> statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation.</source>
          <target state="translated">ln コントラスト、通話、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph>メソッド (またはを使用して、 <ph id="ph2">`foreach`</ph> (C#) ステートメント、および<ph id="ph3">`For Each`</ph>.<ph id="ph4">`Next`</ph> Visual Basic でのステートメント) としてのコレクションは、レイジー評価を使用する単位を必要な設定に、正規表現エンジンが発生します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>Direct evaluation can be a much more expensive method of building the collection than lazy evaluation.</source>
          <target state="translated">直接の評価は、レイジー評価でコレクションを構築の高コストのメソッドを指定できます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to determine the number of elements in the collection before it has been fully populated may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクトにをスローする可能性が完全に読み込まれた前に、コレクション内の要素の数を決定しようとしている、遅延評価を使用して、設定、通常、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.</source>
          <target state="translated">照合操作のタイムアウト値が有効でを単一の一致を検索しようとするがそのタイムアウト間隔を超えている場合、この例外をスローできます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property to determine whether the call to the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method found any matches.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph>を決定するプロパティかどうかを呼び出し、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph>メソッドには、すべての一致が見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>If not, it indicates that no matches were found.</source>
          <target state="translated">それ以外の場合は、一致が見つからなかったことを示します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>Otherwise, it enumerates the matches and displays their value and the position in the input string at which they were found.</source>
          <target state="translated">それ以外の場合、一致項目を列挙し、それらの値と検出位置を入力文字列内の位置が表示されます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>The regular expression pattern <ph id="ph1">`\d+`</ph> matches one or more decimal characters in an input string.</source>
          <target state="translated">正規表現パターン<ph id="ph1">`\d+`</ph>入力文字列内で 1 つ以上の 10 進数の文字に一致します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Count">
          <source>A time-out occurred.</source>
          <target state="translated">タイムアウトが発生しました。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>Provides an enumerator that iterates through the collection.</source>
          <target state="translated">コレクションを反復処理する列挙子を提供します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>An object that contains all <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> objects within the <ph id="ph2">&lt;see cref="T:System.Text.RegularExpressions.MatchCollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> 内にあるすべての <ph id="ph2">&lt;see cref="T:System.Text.RegularExpressions.MatchCollection" /&gt;</ph> オブジェクトを格納しているオブジェクト。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>Instead of  calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method to retrieve an enumerator that lets you iterate through the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> objects in the collection, you should use the group iteration construct (such as <ph id="ph3">`foreach`</ph> in C# and <ph id="ph4">`For Each`</ph>…<ph id="ph5">`Next`</ph></source>
          <target state="translated">呼び出す代わりに、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph>を反復処理できる列挙子を取得する方法を<ph id="ph2">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph>グループ イテレーション構文を使用する必要があります、コレクション内のオブジェクト (など<ph id="ph3">`foreach`</ph>C# の場合と<ph id="ph4">`For Each`</ph>.<ph id="ph5">`Next`</ph></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>in Visual Basic) provided by your programming language.</source>
          <target state="translated">Visual Basic) で使用するプログラミング言語によって提供されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>Iterating the members of the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object using the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method (or the <ph id="ph3">`foreach`</ph> statement in C# and the <ph id="ph4">`For Each`</ph>...<ph id="ph5">`Next`</ph> statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation.</source>
          <target state="translated">メンバーを繰り返し処理、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクトを使用して、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph>メソッド (または<ph id="ph3">`foreach`</ph>(C#) ステートメント、および<ph id="ph4">`For Each`</ph>.<ph id="ph5">`Next`</ph> Visual Basic でのステートメント) としてのコレクションは、レイジー評価を使用する単位を必要な設定に、正規表現エンジンが発生します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>This is analogous to repeatedly calling the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph> method, and then adding the resulting match to the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object.</source>
          <target state="translated">これは繰り返しの呼び出しに似ています、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType&gt;</ph>メソッドを追加し、結果として得られる一致と見なさ、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>In contrast, the regular expression engine uses direct evaluation to populate the collection all at once when the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property is accessed.</source>
          <target state="translated">正規表現エンジンは直接評価を使用して、コレクションを設定する、すべて一度にとこれに対し、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph>プロパティにアクセスします。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>This can be a much more expensive method of building the collection than lazy evaluation.</source>
          <target state="translated">レイジー評価でコレクションを構築の高コストのメソッドを指定できます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to navigate to the next member of the collection may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクトに設定は通常、レイジー評価を使用すると、コレクションの次のメンバーに移動しようとしてスローする可能性が、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find the next match exceeds that time-out interval.</source>
          <target state="translated">照合操作のタイムアウト値が有効で、次の一致を検索しようとすると、そのタイムアウト間隔を超えた場合、この例外をスローすることができます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
          <source>A time-out occurred.</source>
          <target state="translated">タイムアウトが発生しました。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
          <source>Gets a value that indicates whether the collection is read only.</source>
          <target state="translated">コレクションが読み取り専用かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">常に <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
          <source>Gets a value indicating whether access to the collection is synchronized (thread-safe).</source>
          <target state="translated">コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated">常に <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType&gt;</ph> property instead.</source>
          <target state="translated">対象とするアプリケーションを開発する場合、<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>を使用して、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType&gt;</ph>プロパティ代わりにします。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>Index into the <ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.RegularExpressions.Match" /&gt;</ph> コレクション内のインデックス。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>Gets an individual member of the collection.</source>
          <target state="translated">コレクションの個別のメンバーを取得します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>The captured substring at position <ph id="ph1">&lt;paramref name="i" /&gt;</ph> in the collection.</source>
          <target state="translated">コレクション内の <ph id="ph1">&lt;paramref name="i" /&gt;</ph> の位置にあるキャプチャされた部分文字列。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>In C#, the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Item%2A&gt;</ph> property is an indexer; it is not explicitly referenced in code, but instead allows the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> collection to be accessed as if it were an array.</source>
          <target state="translated">C# の場合は、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Item%2A&gt;</ph>プロパティは、インデクサーです。 コードでは、明示的に参照されていませんが、により、代わりに、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>コレクションに配列の場合と同様にアクセスします。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>Typically, individual items in the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object are accessed by their index only after the total number of items in the collection has been determined from the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property.</source>
          <target state="translated">通常、個々 の項目、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>からコレクション内の項目の合計数が決定した後にのみ、オブジェクトが、インデックスによってアクセスされる、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>However, accessing the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph> property causes the regular expression engine to use direct evaluation to build the collection all at once.</source>
          <target state="translated">ただしへのアクセス、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Count%2A&gt;</ph>プロパティにより、正規表現エンジンを直接評価を使用して、一度にすべてのコレクションを構築します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>This is typically more expensive than iterating the collection using the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph> method, the C# <ph id="ph2">`foreach`</ph> statement, or the Visual Basic <ph id="ph3">`For Each`</ph>...<ph id="ph4">`Next`</ph> statement.</source>
          <target state="translated">これは通常を使用してコレクションを反復処理するよりも高価、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.GetEnumerator%2A&gt;</ph>メソッド、c#<ph id="ph2">`foreach`</ph>ステートメント、または Visual Basic<ph id="ph3">`For Each`</ph>しています.<ph id="ph4">`Next`</ph>ステートメントです。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object is generally populated by using lazy evaluation, trying to navigate to a specific match may throw a <ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>オブジェクトに設定は通常、レイジー評価を使用すると、特定の一致に移動しようとしてスローする可能性が、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a specific match exceeds that time-out interval.</source>
          <target state="translated">照合操作のタイムアウト値が有効でを特定の一致を検索しようとするがそのタイムアウト間隔を超えている場合、この例外をスローできます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>The following example parses the first sentence of Nathaniel Hawthorne's <bpt id="p1">*</bpt>House of the Seven Gables<ept id="p1">*</ept> and returns a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph> object that contains all words that begin with either an uppercase or lowercase "h".</source>
          <target state="translated">次の例は、Nathaniel Hawthorne の最初の文を解析<bpt id="p1">*</bpt>7 アンの家<ept id="p1">*</ept>を返します、<ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection&gt;</ph>に、大文字または小文字"h"で始まるすべての単語を含むオブジェクトです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Item%2A&gt;</ph> property is then used to retrieve each word and display it to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchCollection.Item%2A&gt;</ph>プロパティは、各単語を取得し、それをコンソールに表示し、使用できます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>The example produces the following output:</source>
          <target state="translated">この例では次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="i" /&gt;</ph> is less than 0 or greater than or equal to <ph id="ph2">&lt;see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="i" /&gt;</ph> が 0 未満、または <ph id="ph2">&lt;see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
          <source>A time-out occurred.</source>
          <target state="translated">タイムアウトが発生しました。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
          <source>Gets an object that can be used to synchronize access to the collection.</source>
          <target state="translated">コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
          <source>An object that can be used to synchronize access to the collection.</source>
          <target state="translated">コレクションへのアクセスを同期するために使用できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
          <source>This property always returns the object itself.</source>
          <target state="translated">このプロパティは常にオブジェクト自体を返します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
          <source>This member is not present in the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
          <source>If you are developing applications that target the <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>, use the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType&gt;</ph> property instead.</source>
          <target state="translated">対象とするアプリケーションを開発する場合、<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>を使用して、<ph id="ph2">&lt;xref:System.Text.RegularExpressions.MatchCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType&gt;</ph>プロパティ代わりにします。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>