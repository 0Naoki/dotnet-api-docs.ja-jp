<Type Name="Capture" FullName="System.Text.RegularExpressions.Capture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="913debbf33c072f348f77e7d349a334dc4e6de5a" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70521153" /></Metadata><TypeSignature Language="C#" Value="public class Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Capture extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="VB.NET" Value="Public Class Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Capture" />
  <TypeSignature Language="F#" Value="type Capture = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>正常に終了した単一の部分式キャプチャの結果を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Capture>オブジェクトは変更できず、パブリックコンストラクターもありません。 インスタンスは<xref:System.Text.RegularExpressions.CaptureCollection>オブジェクトを通じて返されます。このオブジェクトは<xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> 、プロパティ`Match.Captures`およびプロパティによって返されます。 ただし、プロパティ`Match.Captures`は、 <xref:System.Text.RegularExpressions.Match>オブジェクトと同じ一致に関する情報を提供します。  
  
 量指定子をキャプチャグループに適用しない場合、プロパティ<xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType>は、 <xref:System.Text.RegularExpressions.Group>オブジェクト<xref:System.Text.RegularExpressions.CaptureCollection>と同じキャプチャ<xref:System.Text.RegularExpressions.Capture>に関する情報を提供する単一のオブジェクトを持つを返します。 量指定子をキャプチャグループに適用すると、、 `Group.Index` `Group.Length`、および`Group.Value`の各プロパティは、最後にキャプチャされたグループに関する情報のみ<xref:System.Text.RegularExpressions.CaptureCollection>を提供します。一方、内のオブジェクトは<xref:System.Text.RegularExpressions.Capture> 、すべてに関する情報を提供します。部分式キャプチャ。 具体的な例を次に示します。  
  
   
  
## Examples  
 次の例では、ピリオド (".") 以外の区切り記号を含まない文に一致する正規表現を定義しています。  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 正規表現パターン `((\w+)[\s.])+` は、次の表に示すように定義されています。 この正規表現では、量指定子 (+) が正規表現全体に適用されることに注意してください。  
  
|パターン|説明|  
|-------------|-----------------|  
|`(\w+)`|1 つ以上の単語文字に一致します。 これが 2 番目のキャプチャ グループです。|  
|`[\s.])`|空白文字またはピリオド (".") と一致します。|  
|`((\w+)[\s.])`|1個以上の単語文字の後に空白文字またはピリオド (".") が続くパターンと一致します。 これが最初のキャプチャ グループです。|  
|`((\w+)[\s.])+`|1個以上の単語文字の後に空白文字またはピリオド (".") が続くパターンの1回以上の出現と一致します。|  
  
 この例では、入力文字列は2つの文で構成されています。 出力に示されているように<xref:System.Text.RegularExpressions.CaptureCollection> 、最初の文は1つの単語で構成されているので、オブジェクトにはオブジェクトと<xref:System.Text.RegularExpressions.Group>同じキャプチャを表す1つ<xref:System.Text.RegularExpressions.Capture>のオブジェクトがあります。 2番目の文は複数の単語で<xref:System.Text.RegularExpressions.Group>構成されるため、オブジェクトには最後に一致した部分式に関する情報のみが含まれます。 最初のキャプチャを表すグループ1は、終了期間がある文の最後の単語を含んでいます。 2番目のキャプチャを表すグループ2は、文の最後の単語を含んでいます。 ただし、グループ<xref:System.Text.RegularExpressions.Capture>の<xref:System.Text.RegularExpressions.CaptureCollection>オブジェクト内のオブジェクトは、各部分式の一致をキャプチャします。 最初<xref:System.Text.RegularExpressions.Capture>のキャプチャグループのキャプチャコレクション内のオブジェクトには、キャプチャされた単語と空白文字または期間に関する情報が含まれています。 2 <xref:System.Text.RegularExpressions.Capture>番目のキャプチャグループのキャプチャコレクション内のオブジェクトには、キャプチャされた各単語に関する情報が含まれています。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.CaptureCollection" />
  </Docs>
  <Members>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Text.RegularExpressions.Capture.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャプチャした部分文字列の最初の文字が見つかる元の文字列内の位置。</summary>
        <value>キャプチャした部分文字列が見つかった元の文字列内の開始位置を示す 0 から始まる数値。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Text.RegularExpressions.Capture.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャプチャした部分文字列の長さを取得します。</summary>
        <value>キャプチャした部分文字列の長さ。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Capture.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="capture.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Text.RegularExpressions.Capture.Value" /> プロパティを呼び出して、入力文字列からキャプチャされた部分文字列を取得します。</summary>
        <returns>検索によってキャプチャされた部分文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ToString`は、実際にはプロパティの<xref:System.Text.RegularExpressions.Capture.Value%2A>内部呼び出しです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Text.RegularExpressions.Capture.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>入力文字列からキャプチャした部分文字列を取得します。</summary>
        <value>検索によってキャプチャされた部分文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドまたは<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType>メソッドの<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType>呼び出しが一致を見つけられなかった場合、返される`Match.Value`プロパティの<xref:System.String.Empty?displayProperty=nameWithType>値はになります。 正規表現エンジンがキャプチャグループと一致しない場合は。 返され`Group.Value`たプロパティの値が<xref:System.String.Empty?displayProperty=nameWithType>です。 図については、2番目の例を参照してください。  
  
   
  
## Examples  
 次の例では、ピリオド (".") 以外の区切り記号を含まない文に一致する正規表現を定義しています。 プロパティ`Match.Value`は、一致した各文字列について、一致した文で構成される結果文字列を表示します。 プロパティ`Group.Value`は、各キャプチャグループの結果文字列を表示します。これは、そのキャプチャグループによってキャプチャされた最後の文字列で構成されます。 プロパティ<xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=nameWithType>は、各キャプチャの結果文字列を表示します。  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 正規表現パターン `((\w+)[\s.])+` は、次の表に示すように定義されています。 この正規表現では、量指定子 (+) が正規表現全体に適用されることに注意してください。  
  
|パターン|説明|  
|-------------|-----------------|  
|`(\w+)`|1 つ以上の単語文字に一致します。 これが 2 番目のキャプチャ グループです。|  
|`[\s.])`|空白文字またはピリオド (".") と一致します。|  
|`((\w+)[\s.])`|1個以上の単語文字の後に空白文字またはピリオド (".") が続くパターンと一致します。 これが最初のキャプチャ グループです。|  
|`((\w+)[\s.])+`|1個以上の単語文字の後に空白文字またはピリオド (".") が続くパターンの1回以上の出現と一致します。|  
  
 この例では、入力文字列は2つの文で構成されています。 出力に示されているように<xref:System.Text.RegularExpressions.CaptureCollection> 、最初の文は1つの単語で構成されているので、オブジェクトにはオブジェクトと<xref:System.Text.RegularExpressions.Group>同じキャプチャを表す1つ<xref:System.Text.RegularExpressions.Capture>のオブジェクトがあります。 2番目の文は複数の単語で<xref:System.Text.RegularExpressions.Group>構成されるため、オブジェクトには最後に一致した部分式に関する情報のみが含まれます。 最初のキャプチャを表すグループ1は、終了期間がある文の最後の単語を含んでいます。 2番目のキャプチャを表すグループ2は、文の最後の単語を含んでいます。 ただし、グループ<xref:System.Text.RegularExpressions.Capture>の<xref:System.Text.RegularExpressions.CaptureCollection>オブジェクト内のオブジェクトは、各部分式の一致をキャプチャします。 最初<xref:System.Text.RegularExpressions.Capture>のキャプチャグループのキャプチャコレクション内のオブジェクトには、キャプチャされた単語と空白文字または期間に関する情報が含まれています。 2 <xref:System.Text.RegularExpressions.Capture>番目のキャプチャグループのキャプチャコレクション内のオブジェクトには、キャプチャされた各単語に関する情報が含まれています。  
  
 次の例では、正規表現パターン`^([a-z]+)(\d+)*\.([a-z]+(\d)*)$`を使用して、2つの部分で構成される製品番号とピリオドで区切られています。 どちらの部分も、アルファベット文字の後に省略可能な数値が続く形式で構成されます。 最初の入力文字列がパターンに一致しないため、返される<xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType> `Value`オブジェクトのプロパティの値は<xref:System.String.Empty?displayProperty=nameWithType>になります。 同様に、正規表現パターンがキャプチャグループと一致しない場合、対応<xref:System.Text.RegularExpressions.Group>するオブジェクトの`Value`プロパティの値は<xref:System.String.Empty?displayProperty=nameWithType>になります。  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb#1)]  
  
 正規表現パターンは、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`^`|文字列の先頭から照合を開始します。|  
|`([a-z]+)`|A ~ z の任意の文字の1回以上の出現に一致します。 正規表現エンジンには<xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType>オプションが渡されるため、この比較では大文字と小文字が区別されません。 これが最初のキャプチャ グループです。|  
|`(\d+)?`|1個以上の10進数字の0回または1回の出現と一致します。 これが 2 番目のキャプチャ グループです。|  
|`\.`|リテラルのピリオド文字と一致します。|  
|`([a-z]+`|A ~ z の任意の文字の1回以上の出現に一致します。 比較では大文字と小文字が区別されません。|  
|`(\d)*`|0 個以上の 10 進数と一致します。 1つの一致する数字が4番目のキャプチャグループです。|  
|`([a-z]+(\d)*)`|A から z の後に0個、1個、または複数の10進数字が続く1つ以上のアルファベット文字と一致します。 これが 4 番目のキャプチャ グループです。|  
|`$`|文字列の末尾から照合を終了します。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
