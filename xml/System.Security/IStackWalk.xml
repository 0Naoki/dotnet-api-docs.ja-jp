<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata><Meta Name="ms.openlocfilehash" Value="483fd0c19eb94202f890b134abe0af6b4d2336e7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69161705" /></Metadata><TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <TypeSignature Language="F#" Value="type IStackWalk = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4f5aa-101">コール スタック内のすべての呼び出し元に、保護されているリソースへのアクセスに必要なアクセス許可が与えられているかどうかを判断するスタック ウォークを管理します。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-101">Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f5aa-102">部分的に信頼されたコードは、常にセキュリティ上のリスクをもたらします。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-102">Partially trusted code always presents a security risk.</span></span> <span data-ttu-id="4f5aa-103">リソースにアクセスするためのアクセス許可がない悪意のあるコードに代わってアクションを実行することがあります。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-103">It can sometimes be manipulated to perform actions on behalf of malicious code that does not have permission to access a resource.</span></span> <span data-ttu-id="4f5aa-104">このようにして、悪意のあるコードが許可されるよりも高いセキュリティアクセスを実現できます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-104">In this way, malicious code can achieve higher security access than it should be allowed.</span></span>  
  
 <span data-ttu-id="4f5aa-105">共通言語ランタイムは、すべての呼び出しでスタックウォークを実行することで、これらの攻撃からマネージコードを保護するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-105">The common language runtime helps protect managed code from these attacks by running a stack walk on all calls.</span></span> <span data-ttu-id="4f5aa-106">スタックウォークでは、呼び出し履歴のすべてのコードが、保護されたリソースにアクセスするためのアクセス許可を持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-106">The stack walk requires that all code in the call stack has permission to access a protected resource.</span></span> <span data-ttu-id="4f5aa-107">攻撃を試みるコードは常に呼び出し履歴内のどこかにあるため、独自のセキュリティアクセス許可を超えることはできません。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-107">Because the code attempting the attack will always be somewhere in the call stack, it will be unable to exceed its own security permissions.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit" Usage="iStackWalk.Assert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f5aa-108">スタック内の上位にある呼び出し元に、現在のアクセス許可オブジェクトによって識別されているリソースへのアクセス許可がない場合でも、呼び出しコードがそのリソースにアクセスできるようにアサートします。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-108">Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f5aa-109">を<xref:System.Security.IStackWalk.Assert%2A>呼び出すと、呼び出し履歴の上位にある呼び出し元に対するアクセス許可チェックが停止されます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-109">Calling <xref:System.Security.IStackWalk.Assert%2A> stops the permission check on callers higher in the call stack.</span></span> <span data-ttu-id="4f5aa-110">そのため、これらの呼び出し元に必要なアクセス許可がない場合でも、リソースにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-110">Therefore, even if these callers do not have the requisite permissions, they can still access resources.</span></span> <span data-ttu-id="4f5aa-111">アサーションは、を呼び出す<xref:System.Security.IStackWalk.Assert%2A>コードが、アサートされているアクセス許可のセキュリティチェックに合格した場合にのみ有効になります。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-111">An assertion is effective only if the code that calls <xref:System.Security.IStackWalk.Assert%2A> passes the security check for the permission that it is asserting.</span></span>  
  
 <span data-ttu-id="4f5aa-112">の呼び出し<xref:System.Security.IStackWalk.Assert%2A>は、呼び出し元のコードが呼び出し元に戻るまで、またはの後続<xref:System.Security.IStackWalk.Assert%2A>の呼び出しが直前のアサーションを無効にするまで有効になります。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-112">A call to <xref:System.Security.IStackWalk.Assert%2A> is effective until the calling code returns to its caller or until a subsequent call to <xref:System.Security.IStackWalk.Assert%2A> renders the previous assertion ineffective.</span></span> <span data-ttu-id="4f5aa-113">また<xref:System.Security.CodeAccessPermission.RevertAssert%2A> <xref:System.Security.IStackWalk.Assert%2A>、保留中のを削除します。 <xref:System.Security.CodeAccessPermission.RevertAll%2A></span><span class="sxs-lookup"><span data-stu-id="4f5aa-113">Also, <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> removes a pending <xref:System.Security.IStackWalk.Assert%2A>.</span></span>  
  
 <span data-ttu-id="4f5aa-114"><xref:System.Security.IStackWalk.Assert%2A>は、許可されていないアクセス許可の要求が成功しないため、このアクセス許可は無視されます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-114"><xref:System.Security.IStackWalk.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="4f5aa-115">ただし、呼び出し履歴上のコードがそのアクセス<xref:System.Security.IStackWalk.Demand%2A>許可を呼び出すと<xref:System.Security.SecurityException> 、スタックウォークがを呼び出そう<xref:System.Security.IStackWalk.Assert%2A>としたコードに到達すると、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-115">However, if code lower on the call stack calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.Assert%2A>.</span></span> <span data-ttu-id="4f5aa-116">これは、を呼び出し<xref:System.Security.IStackWalk.Assert%2A>たコードにアクセス許可が付与されていないために<xref:System.Security.IStackWalk.Assert%2A>発生します。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-116">This happens because the code that called <xref:System.Security.IStackWalk.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.IStackWalk.Assert%2A> it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="4f5aa-117">を呼び<xref:System.Security.IStackWalk.Assert%2A>出すと、指定したリソースにアクセスするためのアクセス許可が呼び出しチェーン内のすべてのコードに付与されている必要があるという要件がなくなるため、誤って、または不適切に使用した場合、セキュリティの脆弱性を開くことができます</span><span class="sxs-lookup"><span data-stu-id="4f5aa-117">Because calling <xref:System.Security.IStackWalk.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately.</span></span> <span data-ttu-id="4f5aa-118">そのため、十分な注意を払って使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-118">Therefore, it should be used with great caution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="4f5aa-119">呼び出しコードに <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-119">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/misc/using-the-assert-method.md"><span data-ttu-id="4f5aa-120">Assert メソッドの使用</span><span class="sxs-lookup"><span data-stu-id="4f5aa-120">Using the Assert Method</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit" Usage="iStackWalk.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f5aa-121">コール スタック内のすべての呼び出し元に、現在のアクセス許可オブジェクトによって指定されているアクセス許可が与えられているかどうかを実行時に判断します。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-121">Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f5aa-122">このメソッドは、通常、呼び出し元にリソースへのアクセス許可があることを保証するために、安全なライブラリによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-122">This method is typically used by secure libraries to ensure that callers have permission to access a resource.</span></span> <span data-ttu-id="4f5aa-123">たとえば、セキュリティで保護されたクラスライブラリ内の<xref:System.Security.IStackWalk.Demand%2A>ファイルクラスは<xref:System.Security.Permissions.FileIOPermission> 、呼び出し元によって要求されたファイル操作を実行する前に、必要なを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-123">For example, a file class in a secure class library calls <xref:System.Security.IStackWalk.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.</span></span>  
  
 <span data-ttu-id="4f5aa-124">このメソッドを呼び出すコードのアクセス許可は検証されません。このチェックは、そのコードの直前の呼び出し元から開始され、スタックを進めます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-124">The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</span></span> <span data-ttu-id="4f5aa-125"><xref:System.Security.IStackWalk.Demand%2A><xref:System.Security.SecurityException>が発生しなかった場合にのみ成功します。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-125"><xref:System.Security.IStackWalk.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="4f5aa-126">コール スタック内の上位にある呼び出し元に、現在のアクセス許可オブジェクトによって指定されているアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-126">A caller higher in the call stack does not have the permission specified by the current permission object.</span></span>  
  
<span data-ttu-id="4f5aa-127">または</span><span class="sxs-lookup"><span data-stu-id="4f5aa-127">-or-</span></span> 
<span data-ttu-id="4f5aa-128">コール スタック内の呼び出し元が、現在のアクセス許可オブジェクトに対して <see cref="M:System.Security.IStackWalk.Deny" /> を呼び出しました。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-128">A caller in the call stack has called <see cref="M:System.Security.IStackWalk.Deny" /> on the current permission object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit" Usage="iStackWalk.Deny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f5aa-129">呼び出しコードを通過する現在のオブジェクトに対するすべての <see cref="M:System.Security.IStackWalk.Demand" /> を失敗させます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-129">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for the current object that passes through the calling code to fail.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f5aa-130">このメソッドは、呼び出し履歴の上位にある呼び出し元が、このメソッドを呼び出すコードを通じて保護されたリソースにアクセスできないようにします。呼び出し元にアクセス許可が付与されている場合でも同様です。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-130">This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</span></span> <span data-ttu-id="4f5aa-131">呼び出し履歴は、通常、コールスタックの上位にあるメソッドが呼び出し履歴の下位にあるメソッドを呼び出すように、拡張ダウンとして表されます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-131">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="4f5aa-132"><xref:System.Security.IStackWalk.Deny%2A>では、拒否されたアクセス許可によって保護されているリソースにアクセスする<xref:System.Security.IStackWalk.Deny%2A>ためにを呼び出すメソッドが使用されないようにするため、プログラマの責任を制限したり、誤ったセキュリティの脆弱性を防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-132"><xref:System.Security.IStackWalk.Deny%2A> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <xref:System.Security.IStackWalk.Deny%2A> from being used to access the resource protected by the denied permission.</span></span> <span data-ttu-id="4f5aa-133">メソッドがアクセス許可<xref:System.Security.IStackWalk.Deny%2A>に対してを呼び出し、その<xref:System.Security.IStackWalk.Demand%2A>アクセス許可のが呼び出し履歴の下位にある呼び出し元によって呼び出された場合、そのセキュリティチェック<xref:System.Security.IStackWalk.Deny%2A>はに到達すると失敗します。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-133">If a method calls <xref:System.Security.IStackWalk.Deny%2A> on a permission, and if a <xref:System.Security.IStackWalk.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.IStackWalk.Deny%2A>.</span></span>  
  
 <span data-ttu-id="4f5aa-134"><xref:System.Security.IStackWalk.Deny%2A>は、許可されていないアクセス許可の要求が成功しないため、このアクセス許可は無視されます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-134"><xref:System.Security.IStackWalk.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4f5aa-135">このメソッドをオーバーライドすることはできません。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-135">You cannot override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit" Usage="iStackWalk.PermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f5aa-136">コール スタック内の上位にあるコードに、他のリソースへのアクセス許可が与えられている場合でも、現在のオブジェクトを除き、呼び出しコードを通過するすべてのオブジェクトに対するすべての <see cref="M:System.Security.IStackWalk.Demand" /> を失敗させます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-136">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f5aa-137"><xref:System.Security.IStackWalk.PermitOnly%2A>はと似<xref:System.Security.IStackWalk.Deny%2A>ていますが、それ以外の場合は成功した場合にスタックウォークが失敗します。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-137"><xref:System.Security.IStackWalk.PermitOnly%2A> is similar to <xref:System.Security.IStackWalk.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed.</span></span> <span data-ttu-id="4f5aa-138">違いは、が<xref:System.Security.IStackWalk.Deny%2A>スタックウォークを失敗させるアクセス許可を指定すること<xref:System.Security.IStackWalk.PermitOnly%2A>ですが、スタックウォークが失敗することのない唯一のアクセス許可を指定することです。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-138">The difference is that <xref:System.Security.IStackWalk.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.IStackWalk.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.</span></span> <span data-ttu-id="4f5aa-139">コードを使用して、指定したリソースにのみアクセスできるようにするには、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-139">Call this method to ensure that your code can be used to access only the specified resources.</span></span>  
  
 <span data-ttu-id="4f5aa-140"><xref:System.Security.IStackWalk.PermitOnly%2A>は、許可されていないアクセス許可の要求が成功しないため、このアクセス許可は無視されます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-140"><xref:System.Security.IStackWalk.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="4f5aa-141">ただし、後で呼び出し履歴のコードがそのアクセス<xref:System.Security.IStackWalk.Demand%2A>許可を呼び出すと<xref:System.Security.SecurityException> 、スタックウォークがを呼び出そう<xref:System.Security.IStackWalk.PermitOnly%2A>としたコードに到達すると、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-141">However, if code lower on the call stack later calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.PermitOnly%2A>.</span></span> <span data-ttu-id="4f5aa-142">これは、呼び出さ<xref:System.Security.IStackWalk.PermitOnly%2A>れたコードに、そのアクセス許可に対してが呼び出さ<xref:System.Security.IStackWalk.PermitOnly%2A>れていてもアクセス許可が付与されていないためです。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-142">This is because the code that called <xref:System.Security.IStackWalk.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.IStackWalk.PermitOnly%2A> for that permission.</span></span> <span data-ttu-id="4f5aa-143">呼び出し履歴は、通常、コールスタックの上位にあるメソッドが呼び出し履歴の下位にあるメソッドを呼び出すように、拡張ダウンとして表されます。</span><span class="sxs-lookup"><span data-stu-id="4f5aa-143">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
