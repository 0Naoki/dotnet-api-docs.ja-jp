<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68bb1d581343b243676d9e52c3b1ec47ab5eed42" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49143199" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <TypeSignature Language="F#" Value="type IStackWalk = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>呼び出し履歴内のすべての呼び出し元に、保護されたリソースへのアクセスに必要なアクセス許可を設定するかどうかを判断するスタック ウォークを管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 部分的に信頼されたコードには、セキュリティ リスクが常に表示します。 リソースへのアクセス許可を持たない悪意のあるコードに代わって操作を実行することもあります操作できます。 これにより、悪意のあるコードが許可するより高いセキュリティ アクセスを実現できます。  
  
 共通言語ランタイムは、すべての呼び出しで、スタック ウォークを実行して、これらの攻撃からマネージ コードを保護します。 スタック ウォークは、呼び出し履歴内のすべてのコードが、保護されたリソースにアクセスする権限を持っている必要があります。 攻撃を行おうとするコードは、呼び出し履歴はどこかにも常にため、そのことを独自のセキュリティ権限を超えることです。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit" Usage="iStackWalk.Assert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>スタック内の上位の呼び出し元がリソースへのアクセス許可を付与されていない場合であっても、呼び出し元のコードが現在のアクセス許可で識別されるリソースにアクセスできることをアサートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す<xref:System.Security.IStackWalk.Assert%2A>コール スタックの上位の呼び出し元のアクセス許可のチェックを停止します。 そのため、場合でも、これらの呼び出し元には、必要なアクセス許可がない、まだリソースにアクセスできます。 アサーションは、コードを呼び出す場合にのみ<xref:System.Security.IStackWalk.Assert%2A>がアサートしているアクセス許可のセキュリティ チェックに合格します。  
  
 呼び出し<xref:System.Security.IStackWalk.Assert%2A>は呼び出し元のコードを返します、呼び出し元にまたは後続の呼び出しまでまで有効<xref:System.Security.IStackWalk.Assert%2A>前のアサーションを無駄にレンダリングします。 また、<xref:System.Security.CodeAccessPermission.RevertAssert%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>削除を保留中<xref:System.Security.IStackWalk.Assert%2A>します。  
  
 <xref:System.Security.IStackWalk.Assert%2A> しないアクセス許可をその要求が成功しないためを付与するアクセス許可は無視されます。 ただし、コール スタックの低いコードから呼び出す場合<xref:System.Security.IStackWalk.Demand%2A>そのアクセス許可を<xref:System.Security.SecurityException>スタック ウォークを呼び出そうとするコードに達した場合にスローされる<xref:System.Security.IStackWalk.Assert%2A>します。 これは、コードを呼び出したため<xref:System.Security.IStackWalk.Assert%2A>与えられていない、アクセス許可しようとした場合でも<xref:System.Security.IStackWalk.Assert%2A>こと。  
  
> [!CAUTION]
>  呼び出すため、<xref:System.Security.IStackWalk.Assert%2A>削除呼び出しチェーンのすべてのコードを要求する必要がありますアクセス許可が指定されたリソースにアクセスするが正しくないか、不適切に使用されるセキュリティの脆弱性を開くことができます。 そのため、注意して使用する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコードに <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /> がありません。</exception>
        <related type="Article" href="~/docs/framework/misc/using-the-assert-method.md">Assert メソッドの使用</related>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit" Usage="iStackWalk.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出し履歴のすべての呼び出し元に、現在のアクセス許可オブジェクトで指定されたアクセス許可が付与されているかどうかを判断します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、呼び出し元にリソースにアクセスするためのアクセス許可があることを確実にセキュリティで保護されたライブラリで通常使用されます。 安全なクラス ライブラリ ファイルのクラスを呼び出して、たとえば、<xref:System.Security.IStackWalk.Demand%2A>のために必要な<xref:System.Security.Permissions.FileIOPermission>呼び出し元によって要求されたファイルの操作を実行する前にします。  
  
 このメソッドを呼び出すコードのアクセス許可はチェックされません。チェックは、そのコードの直前の呼び出し元から開始し、スタックの上位します。 <xref:System.Security.IStackWalk.Demand%2A> 場合にのみ成功しない<xref:System.Security.SecurityException>が発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し履歴の上位にある呼び出し元には、現在のアクセス許可オブジェクトで指定されたアクセス許可がありません。  
  
- または - 
呼び出し履歴内の呼び出し元は、現在のアクセス許可オブジェクトで <see cref="M:System.Security.IStackWalk.Deny" /> を呼び出しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit" Usage="iStackWalk.Deny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出し元のコードを通過する現在のオブジェクトのすべての <see cref="M:System.Security.IStackWalk.Demand" /> が失敗します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、コール スタックの上位の呼び出し元が呼び出しへのアクセス許可が付与されている場合でも、このメソッドを呼び出すコードを保護されたリソースにアクセスできなくなります。 通常、呼び出し履歴は、コール スタックに呼び出し履歴の上位にメソッドが下にあるメソッドを呼び出すように、成長として表されます。  
  
 <xref:System.Security.IStackWalk.Deny%2A> プログラマの責任の制限、またはメソッドを呼び出すを防ぐのに役立つため、偶発的なセキュリティの脆弱性を防ぐ<xref:System.Security.IStackWalk.Deny%2A>拒否されたアクセス許可によって保護されているリソースにアクセスするために使用されているからです。 メソッドを呼び出す場合<xref:System.Security.IStackWalk.Deny%2A>、アクセス許可の場合、<xref:System.Security.IStackWalk.Demand%2A>に達したときのアクセス許可が呼び出し履歴内の下位にある呼び出し元によって呼び出されると、そのセキュリティ チェックは失敗します、<xref:System.Security.IStackWalk.Deny%2A>します。  
  
 <xref:System.Security.IStackWalk.Deny%2A> しないアクセス許可をその要求が成功しないためを付与するアクセス許可は無視されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドすることはできません。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit" Usage="iStackWalk.PermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出し側コードによってパススルーされる現在のものを除き、全オブジェクトのあらゆる <see cref="M:System.Security.IStackWalk.Demand" /> を失敗させます。これは、呼び出しスタックの上位にあるコードに対して他のリソースにアクセスするためのアクセス権限が付与されている場合にも当てはまります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.IStackWalk.PermitOnly%2A> ような<xref:System.Security.IStackWalk.Deny%2A>両方をそれ以外の場合操作が成功すると失敗するスタック ウォークが発生することで、します。 される点が異なります<xref:System.Security.IStackWalk.Deny%2A>が失敗し、スタック ウォークを原因となるアクセス許可を指定しますが、<xref:System.Security.IStackWalk.PermitOnly%2A>失敗するスタック ウォークが発生しないアクセス許可を指定します。 コードを指定されたリソースのみへのアクセスに使用できるようにするには、このメソッドを呼び出します。  
  
 <xref:System.Security.IStackWalk.PermitOnly%2A> しないアクセス許可をその要求が成功しないためを付与するアクセス許可は無視されます。 ただし、コードのコール スタックを後で場合呼び出し<xref:System.Security.IStackWalk.Demand%2A>そのアクセス許可、<xref:System.Security.SecurityException>スタック ウォークを呼び出そうとするコードに達した場合にスローされる<xref:System.Security.IStackWalk.PermitOnly%2A>します。 これは、コードを呼び出したため<xref:System.Security.IStackWalk.PermitOnly%2A>与えられていない、アクセス許可が呼び出されていなくて<xref:System.Security.IStackWalk.PermitOnly%2A>そのアクセス許可。 通常、呼び出し履歴は、コール スタックに呼び出し履歴の上位にメソッドが下にあるメソッドを呼び出すように、成長として表されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>