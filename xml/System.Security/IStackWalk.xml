<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b37ff083eff27618aa07c0a744562f3f8a613708" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30499166" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="950b3-101">呼び出し履歴内のすべての呼び出し元に、保護されたリソースへのアクセスに必要なアクセス許可を設定するかどうかを判断するスタック ウォークを管理します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="950b3-101">Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="950b3-102">部分的に信頼されたコードは、セキュリティ上のリスクを常に表示します。</span><span class="sxs-lookup"><span data-stu-id="950b3-102">Partially trusted code always presents a security risk.</span></span> <span data-ttu-id="950b3-103">リソースへのアクセス許可を持たない悪意のあるコードの代理としてアクションを実行することもあります操作できます。</span><span class="sxs-lookup"><span data-stu-id="950b3-103">It can sometimes be manipulated to perform actions on behalf of malicious code that does not have permission to access a resource.</span></span> <span data-ttu-id="950b3-104">この方法では、悪意のあるコードがより高いセキュリティよりもアクセス権が許可されることを実現できます。</span><span class="sxs-lookup"><span data-stu-id="950b3-104">In this way, malicious code can achieve higher security access than it should be allowed.</span></span>  
  
 <span data-ttu-id="950b3-105">共通言語ランタイムは、すべての呼び出しでスタック ウォークを実行して、これらの攻撃からマネージ コードを保護します。</span><span class="sxs-lookup"><span data-stu-id="950b3-105">The common language runtime helps protect managed code from these attacks by running a stack walk on all calls.</span></span> <span data-ttu-id="950b3-106">スタック ウォークは、呼び出し履歴内のすべてのコードが保護されたリソースにアクセスする権限を持っている必要があります。</span><span class="sxs-lookup"><span data-stu-id="950b3-106">The stack walk requires that all code in the call stack has permission to access a protected resource.</span></span> <span data-ttu-id="950b3-107">あるため、攻撃を試みるコードは常にどこかにコール スタックに、そのことはできませんを独自のセキュリティ権限を超えます。</span><span class="sxs-lookup"><span data-stu-id="950b3-107">Because the code attempting the attack will always be somewhere in the call stack, it will be unable to exceed its own security permissions.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="950b3-108">スタック内の上位の呼び出し元がリソースへのアクセス許可を付与されていない場合であっても、呼び出し元のコードが現在のアクセス許可で識別されるリソースにアクセスできることをアサートします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="950b3-108">Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="950b3-109">呼び出す<xref:System.Security.IStackWalk.Assert%2A>コール スタックの上位の呼び出し元のアクセス許可のチェックを停止します。</span><span class="sxs-lookup"><span data-stu-id="950b3-109">Calling <xref:System.Security.IStackWalk.Assert%2A> stops the permission check on callers higher in the call stack.</span></span> <span data-ttu-id="950b3-110">したがって、場合でも、これらの呼び出し元には、必要なアクセス許可がない、リソースがアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="950b3-110">Therefore, even if these callers do not have the requisite permissions, they can still access resources.</span></span> <span data-ttu-id="950b3-111">アサーションは、コードを呼び出す場合にのみ<xref:System.Security.IStackWalk.Assert%2A>アサートしている、権限のセキュリティ チェックに合格します。</span><span class="sxs-lookup"><span data-stu-id="950b3-111">An assertion is effective only if the code that calls <xref:System.Security.IStackWalk.Assert%2A> passes the security check for the permission that it is asserting.</span></span>  
  
 <span data-ttu-id="950b3-112">呼び出し<xref:System.Security.IStackWalk.Assert%2A>は呼び出し元のコードを返します、呼び出し元に、またはそれ以降の呼び出しまでまで有効<xref:System.Security.IStackWalk.Assert%2A>薄い前のアサーションをレンダリングします。</span><span class="sxs-lookup"><span data-stu-id="950b3-112">A call to <xref:System.Security.IStackWalk.Assert%2A> is effective until the calling code returns to its caller or until a subsequent call to <xref:System.Security.IStackWalk.Assert%2A> renders the previous assertion ineffective.</span></span> <span data-ttu-id="950b3-113">また、<xref:System.Security.CodeAccessPermission.RevertAssert%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>を削除、保留中<xref:System.Security.IStackWalk.Assert%2A>です。</span><span class="sxs-lookup"><span data-stu-id="950b3-113">Also, <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> removes a pending <xref:System.Security.IStackWalk.Assert%2A>.</span></span>  
  
 <span data-ttu-id="950b3-114"><xref:System.Security.IStackWalk.Assert%2A> そのアクセス許可の確認要求は成功しませんので許可されていなかった権限は無視されます。</span><span class="sxs-lookup"><span data-stu-id="950b3-114"><xref:System.Security.IStackWalk.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="950b3-115">ただし、コール スタックの下部のコードを呼び出す場合<xref:System.Security.IStackWalk.Demand%2A>そのアクセス許可、<xref:System.Security.SecurityException>スタック ウォークを呼び出そうとするコードに達した場合にスローされる<xref:System.Security.IStackWalk.Assert%2A>です。</span><span class="sxs-lookup"><span data-stu-id="950b3-115">However, if code lower on the call stack calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.Assert%2A>.</span></span> <span data-ttu-id="950b3-116">これは、コードを呼び出したため<xref:System.Security.IStackWalk.Assert%2A>与えられていない、アクセス許可、しようとした場合でも<xref:System.Security.IStackWalk.Assert%2A>ことです。</span><span class="sxs-lookup"><span data-stu-id="950b3-116">This happens because the code that called <xref:System.Security.IStackWalk.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.IStackWalk.Assert%2A> it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="950b3-117">呼び出すため<xref:System.Security.IStackWalk.Assert%2A>削除コードの呼び出しチェーン内のすべてのある要件は、指定されたリソースにアクセスする権限を付与する必要がある、開くことができるセキュリティの脆弱性を誤ってまたは不適切に使用する場合。</span><span class="sxs-lookup"><span data-stu-id="950b3-117">Because calling <xref:System.Security.IStackWalk.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately.</span></span> <span data-ttu-id="950b3-118">そのため、注意深く使用してください。</span><span class="sxs-lookup"><span data-stu-id="950b3-118">Therefore, it should be used with great caution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="950b3-119">呼び出しコードに <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="950b3-119">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="950b3-120">呼び出し履歴のすべての呼び出し元に、現在のアクセス許可オブジェクトで指定されたアクセス許可が付与されているかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="950b3-120">Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="950b3-121">このメソッドは呼び出し元がリソースにアクセスする権限を持っていることを確認する、セキュリティで保護されたライブラリで通常使用されます。</span><span class="sxs-lookup"><span data-stu-id="950b3-121">This method is typically used by secure libraries to ensure that callers have permission to access a resource.</span></span> <span data-ttu-id="950b3-122">たとえば、安全なクラス ライブラリ内のファイル クラスを呼び出します<xref:System.Security.IStackWalk.Demand%2A>、必要なの<xref:System.Security.Permissions.FileIOPermission>呼び出し元によって要求されたファイルの操作を実行する前にします。</span><span class="sxs-lookup"><span data-stu-id="950b3-122">For example, a file class in a secure class library calls <xref:System.Security.IStackWalk.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.</span></span>  
  
 <span data-ttu-id="950b3-123">このメソッドを呼び出すコードのアクセス許可はチェックされません。チェックは、そのコードの直前の呼び出し元から開始され、スタックの上位に進みます。</span><span class="sxs-lookup"><span data-stu-id="950b3-123">The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</span></span> <span data-ttu-id="950b3-124"><xref:System.Security.IStackWalk.Demand%2A> 場合にのみ成功ありません<xref:System.Security.SecurityException>が発生します。</span><span class="sxs-lookup"><span data-stu-id="950b3-124"><xref:System.Security.IStackWalk.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="950b3-125">呼び出し履歴の上位にある呼び出し元には、現在のアクセス許可オブジェクトで指定されたアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="950b3-125">A caller higher in the call stack does not have the permission specified by the current permission object.</span>
          </span>
          <span data-ttu-id="950b3-126">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="950b3-126">-or-</span>
          </span>
          <span data-ttu-id="950b3-127">呼び出し履歴内の呼び出し元は、現在のアクセス許可オブジェクトで <see cref="M:System.Security.IStackWalk.Deny" /> を呼び出しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="950b3-127">A caller in the call stack has called <see cref="M:System.Security.IStackWalk.Deny" /> on the current permission object.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="950b3-128">呼び出し元のコードを通過する現在のオブジェクトのすべての <see cref="M:System.Security.IStackWalk.Demand" /> が失敗します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="950b3-128">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for the current object that passes through the calling code to fail.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="950b3-129">このメソッドは、コール スタックの上位の呼び出し元がそれらの呼び出し元にはそれにアクセスする権限が付与されている場合でもこのメソッドを呼び出すコードを保護されたリソースにアクセスすることを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="950b3-129">This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</span></span> <span data-ttu-id="950b3-130">通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="950b3-130">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="950b3-131"><xref:System.Security.IStackWalk.Deny%2A> プログラマの責任の制限、または呼び出されるメソッドを防ぐのに役立つので偶発的なセキュリティの脆弱性を防ぐ<xref:System.Security.IStackWalk.Deny%2A>拒否されたアクセス許可によって保護されているリソースにアクセスするために使用されているからです。</span><span class="sxs-lookup"><span data-stu-id="950b3-131"><xref:System.Security.IStackWalk.Deny%2A> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <xref:System.Security.IStackWalk.Deny%2A> from being used to access the resource protected by the denied permission.</span></span> <span data-ttu-id="950b3-132">メソッドを呼び出す場合<xref:System.Security.IStackWalk.Deny%2A>、アクセス許可の場合は、<xref:System.Security.IStackWalk.Demand%2A>になったときにそのアクセス許可は、呼び出し履歴内の下位にある呼び出し元によって呼び出されるのセキュリティ チェックは失敗します、<xref:System.Security.IStackWalk.Deny%2A>です。</span><span class="sxs-lookup"><span data-stu-id="950b3-132">If a method calls <xref:System.Security.IStackWalk.Deny%2A> on a permission, and if a <xref:System.Security.IStackWalk.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.IStackWalk.Deny%2A>.</span></span>  
  
 <span data-ttu-id="950b3-133"><xref:System.Security.IStackWalk.Deny%2A> そのアクセス許可の確認要求は成功しませんので許可されていなかった権限は無視されます。</span><span class="sxs-lookup"><span data-stu-id="950b3-133"><xref:System.Security.IStackWalk.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="950b3-134">このメソッドをオーバーライドすることはできません。</span>
            <span class="sxs-lookup">
              <span data-stu-id="950b3-134">You cannot override this method.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="950b3-135">コール スタック内の上位にあるコードに、他のリソースへのアクセス許可が与えられている場合でも、現在のオブジェクトを除き、呼び出しコードを通過するすべてのオブジェクトに対するすべての <see cref="M:System.Security.IStackWalk.Demand" /> を失敗させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="950b3-135">Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="950b3-136"><xref:System.Security.IStackWalk.PermitOnly%2A> ような<xref:System.Security.IStackWalk.Deny%2A>両方が発生する場合は操作が成功すると失敗するスタック ウォーク点で、します。</span><span class="sxs-lookup"><span data-stu-id="950b3-136"><xref:System.Security.IStackWalk.PermitOnly%2A> is similar to <xref:System.Security.IStackWalk.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed.</span></span> <span data-ttu-id="950b3-137">される点が異なります<xref:System.Security.IStackWalk.Deny%2A>が失敗し、スタック ウォークを原因となるアクセス許可を指定しますが、<xref:System.Security.IStackWalk.PermitOnly%2A>が失敗するスタック ウォークが発生しないのみのアクセス許可を指定します。</span><span class="sxs-lookup"><span data-stu-id="950b3-137">The difference is that <xref:System.Security.IStackWalk.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.IStackWalk.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.</span></span> <span data-ttu-id="950b3-138">このメソッドを呼び出して、指定されたリソースのみにアクセスするコードを使用できることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="950b3-138">Call this method to ensure that your code can be used to access only the specified resources.</span></span>  
  
 <span data-ttu-id="950b3-139"><xref:System.Security.IStackWalk.PermitOnly%2A> そのアクセス許可の確認要求は成功しませんので許可されていなかった権限は無視されます。</span><span class="sxs-lookup"><span data-stu-id="950b3-139"><xref:System.Security.IStackWalk.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="950b3-140">ただし、コードのコール スタックを後で場合呼び出し<xref:System.Security.IStackWalk.Demand%2A>そのアクセス許可、<xref:System.Security.SecurityException>スタック ウォークを呼び出そうとするコードに達した場合にスローされる<xref:System.Security.IStackWalk.PermitOnly%2A>です。</span><span class="sxs-lookup"><span data-stu-id="950b3-140">However, if code lower on the call stack later calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.PermitOnly%2A>.</span></span> <span data-ttu-id="950b3-141">これは、コードを呼び出したため<xref:System.Security.IStackWalk.PermitOnly%2A>与えられていない、アクセス許可が呼び出されていなくても<xref:System.Security.IStackWalk.PermitOnly%2A>そのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="950b3-141">This is because the code that called <xref:System.Security.IStackWalk.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.IStackWalk.PermitOnly%2A> for that permission.</span></span> <span data-ttu-id="950b3-142">通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="950b3-142">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>