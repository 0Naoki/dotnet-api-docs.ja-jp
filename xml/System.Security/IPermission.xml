<Type Name="IPermission" FullName="System.Security.IPermission">
  <Metadata><Meta Name="ms.openlocfilehash" Value="798f1afb6c058d039fc80310ea97f6850c39fd5a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69161752" /></Metadata><TypeSignature Language="C#" Value="public interface IPermission : System.Security.ISecurityEncodable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPermission implements class System.Security.ISecurityEncodable" />
  <TypeSignature Language="DocId" Value="T:System.Security.IPermission" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPermission&#xA;Implements ISecurityEncodable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPermission : System::Security::ISecurityEncodable" />
  <TypeSignature Language="F#" Value="type IPermission = interface&#xA;    interface ISecurityEncodable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アクセス許可の種類によって実装されるメソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 共通言語ランタイムのアクセス許可は、指定されたリソースに対してセキュリティで保護できる一連の操作を記述するオブジェクトです。 アクセス許可オブジェクトでは、セキュリティ制御の対象となる操作またはアクセスが記述されます。アクセスまたは操作を実行する権限を表していません。 アクセス許可は、次の方法でアプリケーションコードと .NET Framework セキュリティシステムの両方で使用されます。  
  
-   コードは、実行するために必要なアクセス許可を要求します。  
  
-   セキュリティシステムポリシーは、コードを実行するためのアクセス許可をコードに付与します。  
  
-   コードを呼び出すコードでは、アクセス許可が必要です。  
  
-   コードは、アサート/拒否/許可のみを使用して、セキュリティスタックをオーバーライドします。  
  
> [!NOTE]
>  新しいアクセス許可を作成する場合は、このインターフェイスをクラスに実装する必要があります。  
  
> [!IMPORTANT]
>  複数のスレッドからアクセス許可にアクセスできます。 このインターフェイスを実装する場合は、、、 <xref:System.Security.IPermission.IsSubsetOf%2A> <xref:System.Security.IPermission.Union%2A>、 <xref:System.Security.IPermission.Intersect%2A>および<xref:System.Security.IPermission.Copy%2A>メソッドの実装がスレッドセーフであることを保証する必要があります。  
  
   
  
## Examples  
 この例では、コードアクセスセキュリティで使用するアクセス許可クラスを定義する方法を示します。 必要なすべてのアクセス許可インターフェイスが実装されます。  
  
 [!code-cpp[Permission#1](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#1)]
 [!code-csharp[Permission#1](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#1)]
 [!code-vb[Permission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission" Usage="iPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のアクセス許可の同一のコピーを作成して返します。</summary>
        <returns>現在のアクセス許可のコピー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アクセス許可のコピーは、元のアクセス許可と同じリソースへのアクセスを表します。  
  
   
  
## Examples  
 次のコード例は、メソッド<xref:System.Security.IPermission.Copy%2A>を実装する方法を示しています。 このコード例は、 <xref:System.Security.IPermission>クラスに対して提供される大規模な例の一部です。  
  
 [!code-cpp[Permission#4](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#4)]
 [!code-csharp[Permission#4](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#4)]
 [!code-vb[Permission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit" Usage="iPermission.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>セキュリティ要件が満たされない場合、実行時に <see cref="T:System.Security.SecurityException" /> をスローします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、通常、呼び出し元にリソースへのアクセス許可があることを保証するために、安全なライブラリによって使用されます。 たとえば、セキュリティで保護されたクラスライブラリ内の<xref:System.Security.CodeAccessPermission.Demand%2A>ファイルクラスは<xref:System.Security.Permissions.FileIOPermission> 、呼び出し元によって要求されたファイル操作を実行する前に、必要なを呼び出します。  
  
 このインターフェイスメソッドを実装するクラスの大部分は、完全なスタックウォークを実行することによってセキュリティ条件を満たすため、必ずしもスタックウォークが実行されるわけではありません。 スタックウォークを実行しない実装の例としては<xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=nameWithType>、があります。  
  
 スタックウォークを実行すると、このメソッドを呼び出すコードのアクセス許可は検査されません。このチェックは、そのコードの直前の呼び出し元から開始され、スタックを進めます。 呼び出し履歴は、通常、コールスタックの上位にあるメソッドが呼び出し履歴の下位にあるメソッドを呼び出すように、拡張ダウンとして表されます。 <xref:System.Security.CodeAccessPermission.Demand%2A><xref:System.Security.SecurityException>が発生しなかった場合にのみ成功します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="iPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可との共通部分のあるアクセス許可。 これは、現在のアクセス許可と同じ型であることが必要です。</param>
        <summary>現在のアクセス許可と指定したアクセス許可の積集合となるアクセス許可を作成して返します。</summary>
        <returns>現在のアクセス許可と指定したアクセス許可の共通部分を表す新しいアクセス許可。 積集合が空の場合、この新しいアクセス許可は <see langword="null" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2つのアクセス許可の積集合は、両方が共通で記述する一連の操作を記述するアクセス許可です。 両方の元のアクセス許可を渡す要求だけが、積集合を渡します。  
  
 次のステートメントは、 <xref:System.Security.IPermission.Intersect%2A>メソッドのすべての実装に対して true である必要があります。 `X`および`Y`は<xref:System.Security.IPermission> 、ではない`null`オブジェクト参照を表します。  
  
-   `X`.Intersect (`X`) は、 `X`と等しい値を返します。  
  
-   `X`.Intersect (`Y`) はと`Y`同じ値を返します。Intersect (`X`)。  
  
-   `X`.Intersect (`null`) は`null`を返します。  
  
   
  
## Examples  
 次のコード例は、メソッド<xref:System.Security.IPermission.Intersect%2A>を実装する方法を示しています。 このコード例は、 <xref:System.Security.IPermission>クラスに対して提供される大規模な例の一部です。  
  
 [!code-cpp[Permission#2](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#2)]
 [!code-csharp[Permission#2](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#2)]
 [!code-vb[Permission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="target" /> パラメーターが <see langword="null" /> ではなく、現在のアクセス許可と同じクラスのインスタンスでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="iPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">サブセットの関係にあるかどうかをテストするアクセス許可。 このアクセス許可は、現在のアクセス許可と同じ型であることが必要です。</param>
        <summary>現在のアクセス許可が、指定したアクセス許可のサブセットであるかどうかを判断します。</summary>
        <returns>現在のアクセス許可が、指定したアクセス許可のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のアクセス許可が、指定したアクセス許可によって完全に含まれる一連の操作を指定している場合、現在のアクセス許可は、指定したアクセス許可のサブセットになります。 たとえば、C:\example.txt へのアクセスを表すアクセス許可は、C:\\へのアクセスを表すアクセス許可のサブセットです。 このメソッドがを`true`返す場合、現在のアクセス許可は、指定されたアクセス許可よりも保護されたリソースへのアクセスを許可しません。  
  
 次のステートメントは、 <xref:System.Security.IPermission.IsSubsetOf%2A>メソッドのすべての実装に対して true である必要があります。 `X`、 `Y`、および`Z`は<xref:System.Security.IPermission> 、ではない`null`オブジェクトを表します。  
  
-   `X`.IsSubsetOf (`X`) は`true`を返します。  
  
-   `X`.IsSubsetOf (`Y`) は、と`Y`同じ値を返します。`X` `X`と`Y`が同じ権限のセットを表している場合にのみ、IsSubsetOf ()。  
  
-   の`X`場合。IsSubsetOf (`Y`) および`Y`。IsSubsetOf (`Z`) はどちら`true`も`X`を返します。IsSubsetOf (`Z`) は`true`を返します。  
  
 が`X`のアクセス許可<xref:System.Security.IPermission> `null` `X`状態`Y`を持つ空の<xref:System.Security.Permissions.PermissionState.None>オブジェクトを表し、がであるオブジェクトを表している場合は。<xref:System.Security.IPermission>IsSubsetOf (`Y`) は`true`を返します。 が`Z`空のアクセス許可でもある場合は、 `X`複合セット演算。Union (Z)。IsSubsetOf (Y) は、 `true` 2 つの空のアクセス許可の和集合が空のアクセス許可であるため、もを返します。  
  
   
  
## Examples  
 次のコード例は、メソッド<xref:System.Security.IPermission.IsSubsetOf%2A>を実装する方法を示しています。 このコード例は、 <xref:System.Security.IPermission>クラスに対して提供される大規模な例の一部です。  
  
 [!code-cpp[Permission#3](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#3)]
 [!code-csharp[Permission#3](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#3)]
 [!code-vb[Permission#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="target" /> パラメーターが <see langword="null" /> でなく、また現在のアクセス許可と同じ型でもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="iPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可と結合するアクセス許可。 これは、現在のアクセス許可と同じ型であることが必要です。</param>
        <summary>現在のアクセス許可と指定されたアクセス許可の和集合であるアクセス許可を作成します。</summary>
        <returns>現在のアクセス許可と指定されたアクセス許可の和集合を表す新しいアクセス許可。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の呼び出し<xref:System.Security.IPermission.Union%2A>の結果は、現在のアクセス許可と指定したアクセス許可の両方によって表されるすべての操作を表すアクセス許可です。 いずれかのアクセス許可を渡す要求では、その共用体が渡されます。  
  
 次のステートメントは、 <xref:System.Security.IPermission.Union%2A>メソッドのすべての実装に対して true である必要があります。 `X`および`Y`は<xref:System.Security.IPermission> 、ではない`null`オブジェクトを表します。  
  
-   `X`.Union (`X`) は、と`X`同じ値を持つオブジェクトを返します。  
  
-   `X`.Union (`Y`) は、によって`Y`返されるオブジェクトと同じ値を持つオブジェクトを返します。Union (`X`)。  
  
-   `X`.Union (`null`) は、と`X`同じ値を持つオブジェクトを返します。  
  
   
  
## Examples  
 次のコード例は、メソッド<xref:System.Security.IPermission.Union%2A>を実装する方法を示しています。 このコード例は、 <xref:System.Security.IPermission>クラスに対して提供される大規模な例の一部です。  
  
 [!code-cpp[Permission#5](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#5)]
 [!code-csharp[Permission#5](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#5)]
 [!code-vb[Permission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#5)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="target" /> パラメーターが <see langword="null" /> でなく、また現在のアクセス許可と同じ型でもありません。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
