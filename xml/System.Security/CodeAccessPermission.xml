<Type Name="CodeAccessPermission" FullName="System.Security.CodeAccessPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b9b62c5c5e8a78ac51623a5e547ee8b9410de80e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36424287" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit CodeAccessPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.CodeAccessPermission" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeAccessPermission&#xA;Implements IPermission, IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeAccessPermission abstract : System::Security::IPermission, System::Security::IStackWalk" />
  <TypeSignature Language="F#" Value="type CodeAccessPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IStackWalk</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2c37e-101">Defines the underlying structure of all code access permissions.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c37e-101">Defines the underlying structure of all code access permissions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-102">コード アクセス許可では、スタック ウォークを使用して、アクセス許可がコードのすべての呼び出し元に付与されていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="2c37e-102">Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission.</span></span> <span data-ttu-id="2c37e-103">権限オブジェクトが場合`null`、処理の状態でアクセス許可オブジェクトと同じ<xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-103">If a permission object is `null`, it is handled the same as a permission object with the state <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2c37e-104">通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-104">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="2c37e-105">継承元、<xref:System.Security.CodeAccessPermission>クラスには、セキュリティ インフラストラクチャを拡張するアクセス許可として正しく機能する完全な信頼を与える必要があります。</span><span class="sxs-lookup"><span data-stu-id="2c37e-105">Inheritors of the <xref:System.Security.CodeAccessPermission> class must be granted full trust to function correctly as permissions extending the security infrastructure.</span></span> <span data-ttu-id="2c37e-106">継承元が完全に信頼できることを確認する<xref:System.Security.CodeAccessPermission>問題、<xref:System.Security.Permissions.SecurityAction.InheritanceDemand>の<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence>  =  `true`と<xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy>  = `true`です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-106">To determine that the inheritors are fully trusted, <xref:System.Security.CodeAccessPermission> issues an <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> for <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence> = `true` and <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy> = `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c37e-107">次のコード例から派生したアクセス許可を示しています、<xref:System.Security.CodeAccessPermission>クラスです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-107">The following code example shows a permission derived from the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#1)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#1)]
 [!code-vb[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="2c37e-108">継承元の証拠とビューを提供し、ポリシーを変更する機能です。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c37e-108">for the ability of inheritors to provide evidence and view and modify policy.</span>
      </span>
      <span data-ttu-id="2c37e-109">関連する列挙: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />、<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />です。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c37e-109">Associated enumerations: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />.</span>
      </span>
    </permission>
    <block subset="none" type="overrides">
      <span data-ttu-id="2c37e-110">
        <para>継承する場合<see cref="T:System.Security.CodeAccessPermission" />、実装することも必要があります、<see cref="T:System.Security.Permissions.IUnrestrictedPermission" />インターフェイスです。次<see cref="T:System.Security.CodeAccessPermission" />メンバーをオーバーライドする必要があります: <see cref="M:System.Security.CodeAccessPermission.Copy" />、 <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />、 <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />、 <see cref="M:System.Security.CodeAccessPermission.ToXml" />、 <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />、および<see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />です。受け取るコンス トラクターを定義することも必要があります、<see cref="T:System.Security.Permissions.PermissionState" />唯一のパラメーターとして。適用する必要があります、<see cref="T:System.SerializableAttribute" />属性から継承するクラスを<see cref="T:System.Security.CodeAccessPermission" />です。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="2c37e-110">
          <para>When you inherit from <see cref="T:System.Security.CodeAccessPermission" />, you must also implement the <see cref="T:System.Security.Permissions.IUnrestrictedPermission" /> interface.  The following <see cref="T:System.Security.CodeAccessPermission" /> members must be overridden: <see cref="M:System.Security.CodeAccessPermission.Copy" />, <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.ToXml" />, <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />, and <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />.  You must also define a constructor that takes a <see cref="T:System.Security.Permissions.PermissionState" /> as its only parameter.  You must apply the <see cref="T:System.SerializableAttribute" /> attribute to a class that inherits from <see cref="T:System.Security.CodeAccessPermission" />.</para>
        </span>
      </span>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeAccessPermission ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeAccessPermission();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-111">Initializes a new instance of the <see cref="T:System.Security.CodeAccessPermission" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-111">Initializes a new instance of the <see cref="T:System.Security.CodeAccessPermission" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-112">このコンス トラクターは、派生クラスのインスタンスが作成されるたびに、型の状態を初期化するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-112">This constructor is called to initialize state in the type whenever an instance of the derived class is created.</span></span> <span data-ttu-id="2c37e-113">派生クラスのコンス トラクターのコンス トラクター宣言で、このコンス トラクターを明示的に呼び出すことができますが一致しない通常必要です。ほとんどのコンパイラでは、呼び出しを自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-113">Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit&#xA;override this.Assert : unit -&gt; unit" Usage="codeAccessPermission.Assert " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-114">Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-114">Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.</span>
          </span>
          <span data-ttu-id="2c37e-115">Using <see cref="M:System.Security.CodeAccessPermission.Assert" /> can create security issues.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-115">Using <see cref="M:System.Security.CodeAccessPermission.Assert" /> can create security issues.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-116">通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-116">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span> <span data-ttu-id="2c37e-117">呼び出す<xref:System.Security.CodeAccessPermission.Assert%2A>低い発信元このメソッドを呼び出すコードを超える呼び出し履歴を先に進むからのコール スタックがスタック ウォークを防止します。</span><span class="sxs-lookup"><span data-stu-id="2c37e-117">Calling <xref:System.Security.CodeAccessPermission.Assert%2A> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method.</span></span> <span data-ttu-id="2c37e-118">そのため、場合でも、呼び出し履歴の上位の呼び出し元には、リソースにアクセスするために必要なアクセス許可がない、それらにアクセスできることにより、コードをこのメソッドを呼び出すために必要なアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="2c37e-118">Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission.</span></span> <span data-ttu-id="2c37e-119">アサーションは、コードを呼び出す場合にのみ<xref:System.Security.CodeAccessPermission.Assert%2A>アサートしている、権限のセキュリティ チェックに合格します。</span><span class="sxs-lookup"><span data-stu-id="2c37e-119">An assertion is effective only if the code that calls <xref:System.Security.CodeAccessPermission.Assert%2A> passes the security check for the permission that it is asserting.</span></span>  
  
 <span data-ttu-id="2c37e-120">呼び出し<xref:System.Security.CodeAccessPermission.Assert%2A>は呼び出し元のコードがその呼び出し元に戻るまで有効です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-120">The call to <xref:System.Security.CodeAccessPermission.Assert%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="2c37e-121">1 つだけ<xref:System.Security.CodeAccessPermission.Assert%2A>フレーム上でアクティブにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-121">Only one <xref:System.Security.CodeAccessPermission.Assert%2A> can be active on a frame.</span></span> <span data-ttu-id="2c37e-122">呼び出そうとした<xref:System.Security.CodeAccessPermission.Assert%2A>ときに、アクティブな<xref:System.Security.CodeAccessPermission.Assert%2A>でフレーム結果上に存在する、<xref:System.Security.SecurityException>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-122">An attempt to call <xref:System.Security.CodeAccessPermission.Assert%2A> when an active <xref:System.Security.CodeAccessPermission.Assert%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="2c37e-123">呼び出す<xref:System.Security.CodeAccessPermission.RevertAssert%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>、アクティブなを削除する<xref:System.Security.CodeAccessPermission.Assert%2A>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-123">Call <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span>  
  
 <span data-ttu-id="2c37e-124"><xref:System.Security.CodeAccessPermission.Assert%2A> そのアクセス許可の確認要求は成功しませんので許可されていなかった権限は無視されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-124"><xref:System.Security.CodeAccessPermission.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="2c37e-125">ただし、コール スタックの下部のコードを呼び出す場合<xref:System.Security.CodeAccessPermission.Demand%2A>そのアクセス許可、<xref:System.Security.SecurityException>スタック ウォークを呼び出そうとするコードに達した場合にスローされる<xref:System.Security.CodeAccessPermission.Assert%2A>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-125">However, if code lower on the call stack calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="2c37e-126">これは、コードを呼び出したため<xref:System.Security.CodeAccessPermission.Assert%2A>与えられていない、アクセス許可、しようとした場合でも<xref:System.Security.CodeAccessPermission.Assert%2A>ことです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-126">This happens because the code that called <xref:System.Security.CodeAccessPermission.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.CodeAccessPermission.Assert%2A> it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2c37e-127">呼び出すため<xref:System.Security.CodeAccessPermission.Assert%2A>削除コードの呼び出しチェーン内のすべてのある要件は、指定されたリソースにアクセスする権限を付与する必要がある、開くことができるセキュリティの問題を誤ってまたは不適切に使用する場合。</span><span class="sxs-lookup"><span data-stu-id="2c37e-127">Because calling <xref:System.Security.CodeAccessPermission.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately.</span></span> <span data-ttu-id="2c37e-128">そのため、注意深く使用してください。</span><span class="sxs-lookup"><span data-stu-id="2c37e-128">Therefore, it should be used with great caution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2c37e-129">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-129">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span>
          </span>
          <span data-ttu-id="2c37e-130">-or-  There is already an active <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-130">-or-  There is already an active <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2c37e-131">呼び出すことの<see cref="M:System.Security.CodeAccessPermission.Assert" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-131">for the ability to call <see cref="M:System.Security.CodeAccessPermission.Assert" />.</span>
          </span>
          <span data-ttu-id="2c37e-132">関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-132">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></span>
          </span>
        </permission>
        <block subset="none" type="overrides">
          <span data-ttu-id="2c37e-133">
            <para>このメソッドをオーバーライドすることはできません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-133">
              <para>You cannot override this method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission" Usage="codeAccessPermission.Copy " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Copy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-134">When implemented by a derived class, creates and returns an identical copy of the current permission object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-134">When implemented by a derived class, creates and returns an identical copy of the current permission object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c37e-135">A copy of the current permission object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-135">A copy of the current permission object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-136">アクセス許可オブジェクトのコピーは、元のアクセス許可オブジェクトと、リソースに対して同じアクセス権を表します。</span><span class="sxs-lookup"><span data-stu-id="2c37e-136">A copy of a permission object represents the same access to resources as the original permission object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c37e-137">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.Copy%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-137">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Copy%2A> method.</span></span> <span data-ttu-id="2c37e-138">このコード例に示されている例の一部である、<xref:System.Security.CodeAccessPermission>クラスです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-138">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#2)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#2)]
 [!code-vb[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="2c37e-139">
            <para>派生クラスでは、このメソッドをオーバーライドする必要があります。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-139">
              <para>You must override this method in a derived class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="codeAccessPermission.Demand " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-140">Forces a <see cref="T:System.Security.SecurityException" /> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-140">Forces a <see cref="T:System.Security.SecurityException" /> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-141">このメソッドは呼び出し元がリソースにアクセスする権限を持っていることを確認する、セキュリティで保護されたライブラリで通常使用されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-141">This method is typically used by secure libraries to ensure that callers have permission to access a resource.</span></span> <span data-ttu-id="2c37e-142">たとえば、安全なクラス ライブラリ内のファイル クラスを呼び出します<xref:System.Security.CodeAccessPermission.Demand%2A>、必要なの<xref:System.Security.Permissions.FileIOPermission>呼び出し元によって要求されたファイルの操作を実行する前にします。</span><span class="sxs-lookup"><span data-stu-id="2c37e-142">For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.</span></span>  
  
 <span data-ttu-id="2c37e-143">このメソッドを呼び出すコードのアクセス許可はチェックされません。チェックは、そのコードの直前の呼び出し元から開始され、スタックの上位に進みます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-143">The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</span></span> <span data-ttu-id="2c37e-144">通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-144">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span> <span data-ttu-id="2c37e-145"><xref:System.Security.CodeAccessPermission.Demand%2A> 場合にのみ成功ありません<xref:System.Security.SecurityException>が発生します。</span><span class="sxs-lookup"><span data-stu-id="2c37e-145"><xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2c37e-146">A caller higher in the call stack does not have the permission specified by the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-146">A caller higher in the call stack does not have the permission specified by the current instance.</span>
          </span>
          <span data-ttu-id="2c37e-147">-or-  A caller higher in the call stack has called <see cref="M:System.Security.CodeAccessPermission.Deny" /> on the current permission object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-147">-or-  A caller higher in the call stack has called <see cref="M:System.Security.CodeAccessPermission.Deny" /> on the current permission object.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2c37e-148">
            <para>このメソッドをオーバーライドすることはできません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-148">
              <para>You cannot override this method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit&#xA;override this.Deny : unit -&gt; unit" Usage="codeAccessPermission.Deny " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-149">Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-149">Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="2c37e-150"><xref:System.Security.CodeAccessPermission.Deny%2A>完全に信頼されたコードでのみリソースを保護する偶発的なアクセスからメソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2c37e-150">The <xref:System.Security.CodeAccessPermission.Deny%2A> method should be used only to protect resources from accidental access by fully trusted code.</span></span> <span data-ttu-id="2c37e-151">指定しないでリソースを意図的な誤用から保護する信頼されていないコードでします。</span><span class="sxs-lookup"><span data-stu-id="2c37e-151">It should not be used to protect resources from intentional misuse by untrusted code.</span></span> <span data-ttu-id="2c37e-152">たとえば場合、メソッド`A`問題、<xref:System.Security.CodeAccessPermission.Deny%2A>な権限と、呼び出しメソッド`B`、メソッド`B`獲得をオーバーライドできます、<xref:System.Security.CodeAccessPermission.Deny%2A>を発行して、<xref:System.Security.CodeAccessPermission.Assert%2A>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-152">For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.Deny%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.Deny%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="2c37e-153">呼び出されたメソッドは、スタック内の上位は常にします。</span><span class="sxs-lookup"><span data-stu-id="2c37e-153">The called method is always higher in the stack.</span></span> <span data-ttu-id="2c37e-154">したがって場合、メソッド`B`保護されたリソース、セキュリティ システムへのアクセスの試行がためアクセス許可と、その確認を開始メソッド`B`直前の呼び出し元は、上下しウォークがあることを確認するスタックありません<xref:System.Security.CodeAccessPermission.Deny%2A>または<xref:System.Security.CodeAccessPermission.PermitOnly%2A>スタック内の下位です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-154">Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack.</span></span> <span data-ttu-id="2c37e-155">メソッド`B`、リソースにアクセスしようとするは直ちに停止できるスタック ウォークを使用して、<xref:System.Security.CodeAccessPermission.Assert%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-155">Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method.</span></span> <span data-ttu-id="2c37e-156">その場合は、<xref:System.Security.CodeAccessPermission.Deny%2A>メソッドによって、スタックに配置`A`(呼び出し元のメソッド) が検出されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2c37e-156">In that case, the <xref:System.Security.CodeAccessPermission.Deny%2A> placed on the stack by method `A` (the calling method) is never discovered.</span></span>  
  
 <span data-ttu-id="2c37e-157">このメソッドは、コール スタックの上位の呼び出し元がそれらの呼び出し元にはそれにアクセスする権限が付与されている場合でもこのメソッドを呼び出すコードを保護されたリソースにアクセスすることを防ぎます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-157">This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</span></span> <span data-ttu-id="2c37e-158">通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-158">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="2c37e-159"><xref:System.Security.CodeAccessPermission.Deny%2A> プログラマの責任の制限、または呼び出されるメソッドを防ぐのに役立つので偶発的なセキュリティの問題を防ぐ<xref:System.Security.CodeAccessPermission.Deny%2A>拒否されたアクセス許可によって保護されているリソースにアクセスするために使用されているからです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-159"><xref:System.Security.CodeAccessPermission.Deny%2A> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <xref:System.Security.CodeAccessPermission.Deny%2A> from being used to access the resource protected by the denied permission.</span></span> <span data-ttu-id="2c37e-160">メソッドを呼び出す場合<xref:System.Security.CodeAccessPermission.Deny%2A>、アクセス許可の場合は、<xref:System.Security.CodeAccessPermission.Demand%2A>になったときにそのアクセス許可は、呼び出し履歴内の下位にある呼び出し元によって呼び出されるのセキュリティ チェックは失敗します、<xref:System.Security.CodeAccessPermission.Deny%2A>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-160">If a method calls <xref:System.Security.CodeAccessPermission.Deny%2A> on a permission, and if a <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.CodeAccessPermission.Deny%2A>.</span></span>  
  
 <span data-ttu-id="2c37e-161">呼び出し<xref:System.Security.CodeAccessPermission.Deny%2A>は呼び出し元のコードがその呼び出し元に戻るまで有効です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-161">The call to <xref:System.Security.CodeAccessPermission.Deny%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="2c37e-162">1 つだけ<xref:System.Security.CodeAccessPermission.Deny%2A>フレーム上でアクティブにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-162">Only one <xref:System.Security.CodeAccessPermission.Deny%2A> can be active on a frame.</span></span> <span data-ttu-id="2c37e-163">呼び出そうとした<xref:System.Security.CodeAccessPermission.Deny%2A>ときに、アクティブな<xref:System.Security.CodeAccessPermission.Deny%2A>でフレーム結果上に存在する、<xref:System.Security.SecurityException>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-163">An attempt to call <xref:System.Security.CodeAccessPermission.Deny%2A> when an active <xref:System.Security.CodeAccessPermission.Deny%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="2c37e-164">呼び出す<xref:System.Security.CodeAccessPermission.RevertDeny%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>、アクティブなを削除する<xref:System.Security.CodeAccessPermission.Deny%2A>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-164">Call <xref:System.Security.CodeAccessPermission.RevertDeny%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Deny%2A>.</span></span> <span data-ttu-id="2c37e-165"><xref:System.Security.CodeAccessPermission.Deny%2A> そのアクセス許可の確認要求は成功しませんので許可されていなかった権限は無視されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-165"><xref:System.Security.CodeAccessPermission.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2c37e-166">There is already an active <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-166">There is already an active <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2c37e-167">
            <para>このメソッドをオーバーライドすることはできません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-167">
              <para>You cannot override this method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="codeAccessPermission.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="2c37e-168">The <see cref="T:System.Security.CodeAccessPermission" /> object to compare with the current <see cref="T:System.Security.CodeAccessPermission" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-168">The <see cref="T:System.Security.CodeAccessPermission" /> object to compare with the current <see cref="T:System.Security.CodeAccessPermission" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c37e-169">Determines whether the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-169">Determines whether the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c37e-170">
            <see langword="true" /> if the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-170">
              <see langword="true" /> if the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-171">詳細については、「<xref:System.Object.Equals%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2c37e-171">For more information, see <xref:System.Object.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public abstract void FromXml (System.Security.SecurityElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub FromXml (elem As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void FromXml(System::Security::SecurityElement ^ elem);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit" Usage="codeAccessPermission.FromXml elem" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elem" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="elem">
          <span data-ttu-id="2c37e-172">The XML encoding to use to reconstruct the security object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-172">The XML encoding to use to reconstruct the security object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c37e-173">When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-173">When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-174">セキュリティ オブジェクトを拡張するカスタム コードを実装する必要があります、<xref:System.Security.CodeAccessPermission.ToXml%2A>と<xref:System.Security.CodeAccessPermission.FromXml%2A>セキュリティ encodable オブジェクトを作成する方法です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-174">Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c37e-175">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.FromXml%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-175">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.FromXml%2A> method.</span></span> <span data-ttu-id="2c37e-176">このコード例に示されている例の一部である、<xref:System.Security.CodeAccessPermission>クラスです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-176">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#10)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#10)]
 [!code-vb[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c37e-177">The <paramref name="elem" /> parameter is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-177">The <paramref name="elem" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c37e-178">The <paramref name="elem" /> parameter does not contain the XML encoding for an instance of the same type as the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-178">The <paramref name="elem" /> parameter does not contain the XML encoding for an instance of the same type as the current instance.</span>
          </span>
          <span data-ttu-id="2c37e-179">-or-  The version number of the <paramref name="elem" /> parameter is not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-179">-or-  The version number of the <paramref name="elem" /> parameter is not supported.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2c37e-180">
            <para>派生クラスでは、このメソッドをオーバーライドする必要があります。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-180">
              <para>You must override this method in a derived class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="codeAccessPermission.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-181">Gets a hash code for the <see cref="T:System.Security.CodeAccessPermission" /> object that is suitable for use in hashing algorithms and data structures such as a hash table.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-181">Gets a hash code for the <see cref="T:System.Security.CodeAccessPermission" /> object that is suitable for use in hashing algorithms and data structures such as a hash table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c37e-182">A hash code for the current <see cref="T:System.Security.CodeAccessPermission" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-182">A hash code for the current <see cref="T:System.Security.CodeAccessPermission" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-183">同じアクセス許可の 2 つのインスタンスのハッシュ コードが異なる可能性があります、ためハッシュ コードを比較する 2 つ使用するされません<xref:System.Security.CodeAccessPermission>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2c37e-183">The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.CodeAccessPermission> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="codeAccessPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Intersect(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="2c37e-184">A permission to intersect with the current permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-184">A permission to intersect with the current permission.</span>
          </span>
          <span data-ttu-id="2c37e-185">It must be of the same type as the current permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-185">It must be of the same type as the current permission.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c37e-186">When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-186">When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c37e-187">A new permission that represents the intersection of the current permission and the specified permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-187">A new permission that represents the intersection of the current permission and the specified permission.</span>
          </span>
          <span data-ttu-id="2c37e-188">This new permission is <see langword="null" /> if the intersection is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-188">This new permission is <see langword="null" /> if the intersection is empty.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-189">2 つのアクセス許可の積集合は、一連の両方に共通する操作を説明する権限です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-189">The intersection of two permissions is a permission that describes the set of operations they both describe in common.</span></span> <span data-ttu-id="2c37e-190">元の両方の権限を通過する要求だけでは、積集合を渡されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-190">Only a demand that passes both original permissions will pass the intersection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c37e-191">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.Intersect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-191">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Intersect%2A> method.</span></span> <span data-ttu-id="2c37e-192">このコード例に示されている例の一部である、<xref:System.Security.CodeAccessPermission>クラスです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-192">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#5)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#5)]
 [!code-vb[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c37e-193">The <paramref name="target" /> parameter is not <see langword="null" /> and is not an instance of the same class as the current permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-193">The <paramref name="target" /> parameter is not <see langword="null" /> and is not an instance of the same class as the current permission.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2c37e-194">
            <para>派生クラスでは、このメソッドをオーバーライドする必要があります。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-194">
              <para>You must override this method in a derived class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public abstract bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="codeAccessPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="2c37e-195">A permission that is to be tested for the subset relationship.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-195">A permission that is to be tested for the subset relationship.</span>
          </span>
          <span data-ttu-id="2c37e-196">This permission must be of the same type as the current permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-196">This permission must be of the same type as the current permission.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c37e-197">When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-197">When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c37e-198">
            <see langword="true" /> if the current permission is a subset of the specified permission; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-198">
              <see langword="true" /> if the current permission is a subset of the specified permission; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-199">現在のアクセス許可は、現在のアクセス許可を指定した権限によって完全に含まれる一連の操作を指定する場合、指定したアクセス許可のサブセットです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-199">The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.</span></span> <span data-ttu-id="2c37e-200">たとえば、C:\example.txt へのアクセスを表すアクセス許可は、c: へのアクセスを表すためのアクセス許可のサブセット\\です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-200">For example, a permission that represents access to C:\example.txt is a subset of a permission that represents access to C:\\.</span></span> <span data-ttu-id="2c37e-201">このメソッドが戻る場合`true`、現在のアクセス許可は、アクセスは保護されたリソースには、指定した権限を表します。</span><span class="sxs-lookup"><span data-stu-id="2c37e-201">If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.</span></span>  
  
 <span data-ttu-id="2c37e-202">次のステートメントである必要は`true`の上書きをすべてに対して、<xref:System.Security.CodeAccessPermission.IsSubsetOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-202">The following statements are required to be `true` for all overrides of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method.</span></span> <span data-ttu-id="2c37e-203">*X*、 *Y*、および*Z* 、null 参照ではないカスタム コード アクセス許可オブジェクトを表す*U*無制限のコード アクセス権限を表しますおよび*N*で空のアクセス許可を表す、<xref:System.Security.Permissions.PermissionState>の<xref:System.Security.Permissions.PermissionState.None>します。</span><span class="sxs-lookup"><span data-stu-id="2c37e-203">*X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState.None>.</span></span>  
  
-   <span data-ttu-id="2c37e-204">*X*です。IsSubsetOf (*X*) を返します`true`です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-204">*X*.IsSubsetOf(*X*) returns `true`.</span></span>  
  
-   <span data-ttu-id="2c37e-205">*X*です。IsSubsetOf (*Y*) と同じ値を返します*Y*です。IsSubsetOf (*X*) 場合にのみ*X*と*Y*権限のセットは変わりません。</span><span class="sxs-lookup"><span data-stu-id="2c37e-205">*X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.</span></span>  
  
-   <span data-ttu-id="2c37e-206">場合*X*です。IsSubsetOf (*Y*) および*Y*です。IsSubsetOf (*Z*) 両方を返す`true`、 *X*です。IsSubsetOf (*Z*) を返します`true`です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-206">If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.</span></span>  
  
-   <span data-ttu-id="2c37e-207">*X*です。IsSubsetOf (*U*) を返します`true`です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-207">*X*.IsSubsetOf(*U*) returns `true`.</span></span>  
  
-   <span data-ttu-id="2c37e-208">*X*です。IsSubsetOf (*N*) を返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-208">*X*.IsSubsetOf(*N*) returns `false`.</span></span>  
  
-   <span data-ttu-id="2c37e-209">*N*です。IsSubsetOf (*X*) を返します`true`です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-209">*N*.IsSubsetOf(*X*) returns `true`.</span></span>  
  
 <span data-ttu-id="2c37e-210">場合*X*と*Y*が null 参照は、カスタム コードのアクセス許可オブジェクトを表す*X*です。IsSubsetOf (*Y*) を返します`true`です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-210">If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`.</span></span> <span data-ttu-id="2c37e-211">場合*Z*が null でも、複合セット操作*X*です。共用体 (*Y*)。IsSubsetOf (*Z*) も返します`true`null 2 つのアクセス許可の和集合が null のアクセス許可であるためです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-211">If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c37e-212">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.IsSubsetOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-212">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method.</span></span> <span data-ttu-id="2c37e-213">このコード例に示されている例の一部である、<xref:System.Security.CodeAccessPermission>クラスです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-213">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#4)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#4)]
 [!code-vb[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2c37e-214">The <paramref name="target" /> parameter is not <see langword="null" /> and is not of the same type as the current permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-214">The <paramref name="target" /> parameter is not <see langword="null" /> and is not of the same type as the current permission.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2c37e-215">
            <para>派生クラスでは、このメソッドをオーバーライドする必要があります。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-215">
              <para>You must override this method in a derived class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit&#xA;override this.PermitOnly : unit -&gt; unit" Usage="codeAccessPermission.PermitOnly " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-216">Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-216">Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="2c37e-217"><xref:System.Security.CodeAccessPermission.PermitOnly%2A>完全に信頼されたコードでのみリソースを保護する偶発的なアクセスからメソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2c37e-217">The <xref:System.Security.CodeAccessPermission.PermitOnly%2A> method should be used only to protect resources from accidental access by fully trusted code.</span></span> <span data-ttu-id="2c37e-218">指定しないでリソースを意図的な誤用から保護する信頼されていないコードでします。</span><span class="sxs-lookup"><span data-stu-id="2c37e-218">It should not be used to protect resources from intentional misuse by untrusted code.</span></span> <span data-ttu-id="2c37e-219">たとえば場合、メソッド`A`問題、<xref:System.Security.CodeAccessPermission.PermitOnly%2A>な権限と、呼び出しメソッド`B`、メソッド`B`獲得をオーバーライドできます、<xref:System.Security.CodeAccessPermission.PermitOnly%2A>を発行して、<xref:System.Security.CodeAccessPermission.Assert%2A>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-219">For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="2c37e-220">呼び出されたメソッドは、スタック内の上位は常にします。</span><span class="sxs-lookup"><span data-stu-id="2c37e-220">The called method is always higher in the stack.</span></span> <span data-ttu-id="2c37e-221">したがって場合、メソッド`B`保護されたリソース、セキュリティ システムへのアクセスの試行がためアクセス許可と、その確認を開始メソッド`B`直前の呼び出し元は、上下しウォークがあることを確認するスタックありません<xref:System.Security.CodeAccessPermission.Deny%2A>または<xref:System.Security.CodeAccessPermission.PermitOnly%2A>スタック内の下位です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-221">Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack.</span></span> <span data-ttu-id="2c37e-222">メソッド`B`、リソースにアクセスしようとするは直ちに停止できるスタック ウォークを使用して、<xref:System.Security.CodeAccessPermission.Assert%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-222">Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method.</span></span> <span data-ttu-id="2c37e-223">その場合は、<xref:System.Security.CodeAccessPermission.PermitOnly%2A>メソッドによって、スタックに配置`A`(呼び出し元のメソッド) が検出されることはありません。</span><span class="sxs-lookup"><span data-stu-id="2c37e-223">In that case, the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placed on the stack by method `A` (the calling method) is never discovered.</span></span>  
  
 <span data-ttu-id="2c37e-224"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> ような<xref:System.Security.CodeAccessPermission.Deny%2A>両方が発生する場合は操作が成功すると失敗するスタック ウォーク点で、します。</span><span class="sxs-lookup"><span data-stu-id="2c37e-224"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> is similar to <xref:System.Security.CodeAccessPermission.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed.</span></span> <span data-ttu-id="2c37e-225">される点が異なります<xref:System.Security.CodeAccessPermission.Deny%2A>が失敗し、スタック ウォークを原因となるアクセス許可を指定しますが、<xref:System.Security.CodeAccessPermission.PermitOnly%2A>が失敗するスタック ウォークが発生しないのみのアクセス許可を指定します。</span><span class="sxs-lookup"><span data-stu-id="2c37e-225">The difference is that <xref:System.Security.CodeAccessPermission.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.CodeAccessPermission.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.</span></span>  
  
 <span data-ttu-id="2c37e-226">このメソッドを呼び出して、指定されたリソースのみにアクセスするコードを使用できることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="2c37e-226">Call this method to ensure that your code can be used to access only the specified resources.</span></span> <span data-ttu-id="2c37e-227">呼び出し<xref:System.Security.CodeAccessPermission.PermitOnly%2A>は呼び出し元のコードがその呼び出し元に戻るまで有効です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-227">The call to <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="2c37e-228">1 つだけ<xref:System.Security.CodeAccessPermission.PermitOnly%2A>フレーム上でアクティブにすることができます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-228">Only one <xref:System.Security.CodeAccessPermission.PermitOnly%2A> can be active on a frame.</span></span> <span data-ttu-id="2c37e-229">呼び出そうとした<xref:System.Security.CodeAccessPermission.PermitOnly%2A>ときに、アクティブな<xref:System.Security.CodeAccessPermission.PermitOnly%2A>でフレーム結果上に存在する、<xref:System.Security.SecurityException>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-229">An attempt to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A> when an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="2c37e-230">呼び出す<xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>、アクティブなを削除する<xref:System.Security.CodeAccessPermission.PermitOnly%2A>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-230">Call <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span></span>  
  
 <span data-ttu-id="2c37e-231"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> そのアクセス許可の確認要求は成功しませんので許可されていなかった権限は無視されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-231"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="2c37e-232">ただし、コードのコール スタックを後で場合呼び出し<xref:System.Security.CodeAccessPermission.Demand%2A>そのアクセス許可、<xref:System.Security.SecurityException>スタック ウォークを呼び出そうとするコードに達した場合にスローされる<xref:System.Security.CodeAccessPermission.PermitOnly%2A>です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-232">However, if code lower on the call stack later calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span></span> <span data-ttu-id="2c37e-233">これは、コードを呼び出したため<xref:System.Security.CodeAccessPermission.PermitOnly%2A>与えられていない、アクセス許可が呼び出されていなくても<xref:System.Security.CodeAccessPermission.PermitOnly%2A>そのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="2c37e-233">This is because the code that called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for that permission.</span></span> <span data-ttu-id="2c37e-234">通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-234">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2c37e-235">There is already an active <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-235">There is already an active <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2c37e-236">
            <para>このメソッドをオーバーライドすることはできません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-236">
              <para>You cannot override this method.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RevertAll">
      <MemberSignature Language="C#" Value="public static void RevertAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAll" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAll();" />
      <MemberSignature Language="F#" Value="static member RevertAll : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-237">Causes all previous overrides for the current frame to be removed and no longer in effect.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-237">Causes all previous overrides for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-238">上書きがない場合 (<xref:System.Security.CodeAccessPermission.Assert%2A>、 <xref:System.Security.CodeAccessPermission.Deny%2A>、または<xref:System.Security.CodeAccessPermission.PermitOnly%2A>) 現在のフレーム、<xref:System.ExecutionEngineException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-238">If there are no overrides (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, or <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c37e-239">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" />, or <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-239">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" />, or <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RevertAssert">
      <MemberSignature Language="C#" Value="public static void RevertAssert ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAssert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAssert" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAssert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAssert();" />
      <MemberSignature Language="F#" Value="static member RevertAssert : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertAssert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-240">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame to be removed and no longer in effect.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-240">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-241">ある場合ありません<xref:System.Security.CodeAccessPermission.Assert%2A>現在のフレーム、<xref:System.ExecutionEngineException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-241">If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c37e-242">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-242">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RevertDeny">
      <MemberSignature Language="C#" Value="public static void RevertDeny ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertDeny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertDeny" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertDeny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertDeny();" />
      <MemberSignature Language="F#" Value="static member RevertDeny : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertDeny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-243">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame to be removed and no longer in effect.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-243">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-244">ある場合ありません<xref:System.Security.CodeAccessPermission.Deny%2A>現在のフレーム、<xref:System.ExecutionEngineException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-244">If there is no <xref:System.Security.CodeAccessPermission.Deny%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c37e-245">There is no previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-245">There is no previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RevertPermitOnly">
      <MemberSignature Language="C#" Value="public static void RevertPermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertPermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertPermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertPermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertPermitOnly();" />
      <MemberSignature Language="F#" Value="static member RevertPermitOnly : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertPermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-246">Causes any previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame to be removed and no longer in effect.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-246">Causes any previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-247">ある場合ありません<xref:System.Security.CodeAccessPermission.PermitOnly%2A>現在のフレーム、<xref:System.ExecutionEngineException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-247">If there is no <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c37e-248">There is no previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-248">There is no previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IPermission.Demand">
      <MemberSignature Language="C#" Value="void IPermission.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IPermission.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IPermission#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IPermission.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IPermission.Demand() = System::Security::IPermission::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Assert">
      <MemberSignature Language="C#" Value="void IStackWalk.Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert" />
      <MemberSignature Language="VB.NET" Value="Sub Assert () Implements IStackWalk.Assert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Assert() = System::Security::IStackWalk::Assert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Demand">
      <MemberSignature Language="C#" Value="void IStackWalk.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IStackWalk.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Demand() = System::Security::IStackWalk::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Deny">
      <MemberSignature Language="C#" Value="void IStackWalk.Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny" />
      <MemberSignature Language="VB.NET" Value="Sub Deny () Implements IStackWalk.Deny" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Deny() = System::Security::IStackWalk::Deny;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.PermitOnly">
      <MemberSignature Language="C#" Value="void IStackWalk.PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Sub PermitOnly () Implements IStackWalk.PermitOnly" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.PermitOnly() = System::Security::IStackWalk::PermitOnly;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="codeAccessPermission.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-249">Creates and returns a string representation of the current permission object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-249">Creates and returns a string representation of the current permission object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c37e-250">A string representation of the current permission object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-250">A string representation of the current permission object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-251">このメソッドは、文字列として、アクセス許可を表示する必要がある場合のデバッグに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="2c37e-251">This method is useful in debugging when you need to display the permission as a string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public abstract System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement" Usage="codeAccessPermission.ToXml " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.ToXml</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c37e-252">When overridden in a derived class, creates an XML encoding of the security object and its current state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-252">When overridden in a derived class, creates an XML encoding of the security object and its current state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c37e-253">An XML encoding of the security object, including any state information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-253">An XML encoding of the security object, including any state information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-254">セキュリティ オブジェクトを拡張するカスタム コードを実装する必要があります、<xref:System.Security.CodeAccessPermission.ToXml%2A>と<xref:System.Security.CodeAccessPermission.FromXml%2A>セキュリティ encodable オブジェクトを作成する方法です。</span><span class="sxs-lookup"><span data-stu-id="2c37e-254">Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c37e-255">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.ToXml%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-255">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.ToXml%2A> method.</span></span> <span data-ttu-id="2c37e-256">このコード例に示されている例の一部である、<xref:System.Security.CodeAccessPermission>クラスです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-256">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#11)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#11)]
 [!code-vb[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="2c37e-257">
            <para>派生クラスでは、このメソッドをオーバーライドする必要があります。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-257">
              <para>You must override this method in a derived class.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public virtual System.Security.IPermission Union (System.Security.IPermission other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Union (other As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="codeAccessPermission.Union other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Union(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="2c37e-258">A permission to combine with the current permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-258">A permission to combine with the current permission.</span>
          </span>
          <span data-ttu-id="2c37e-259">It must be of the same type as the current permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-259">It must be of the same type as the current permission.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c37e-260">When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-260">When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c37e-261">A new permission that represents the union of the current permission and the specified permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-261">A new permission that represents the union of the current permission and the specified permission.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c37e-262">呼び出しの結果<xref:System.Security.CodeAccessPermission.Union%2A>は、現在のアクセス許可と、指定した権限の両方で表されるすべての操作を表す権限。</span><span class="sxs-lookup"><span data-stu-id="2c37e-262">The result of a call to <xref:System.Security.CodeAccessPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission.</span></span> <span data-ttu-id="2c37e-263">いずれかのアクセス許可に適合する要求は、その共用体を渡します。</span><span class="sxs-lookup"><span data-stu-id="2c37e-263">Any demand that passes either permission passes their union.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c37e-264">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.Union%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-264">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Union%2A> method.</span></span> <span data-ttu-id="2c37e-265">このコード例に示されている例の一部である、<xref:System.Security.CodeAccessPermission>クラスです。</span><span class="sxs-lookup"><span data-stu-id="2c37e-265">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#12)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#12)]
 [!code-vb[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2c37e-266">The <paramref name="other" /> parameter is not <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-266">The <paramref name="other" /> parameter is not <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2c37e-267">This method is only supported at this level when passed <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-267">This method is only supported at this level when passed <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2c37e-268">
            <para>派生クラスでは、このメソッドをオーバーライドする必要があります。場合は、アクセス許可のコピーを返す必要がありますの値、<paramref name="other" />パラメーターは<see langword="null" />します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2c37e-268">
              <para>You must override this method in a derived class. You should return a copy of the permission if the value of the <paramref name="other" /> parameter is <see langword="null" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>