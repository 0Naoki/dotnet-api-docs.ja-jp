<Type Name="CodeAccessPermission" FullName="System.Security.CodeAccessPermission">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0db6f622c9c8c143d57875ed3c232bf5b1d39578" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52913379" /></Metadata><TypeSignature Language="C#" Value="public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit CodeAccessPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.CodeAccessPermission" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeAccessPermission&#xA;Implements IPermission, IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeAccessPermission abstract : System::Security::IPermission, System::Security::IStackWalk" />
  <TypeSignature Language="F#" Value="type CodeAccessPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IStackWalk</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e3cc5-101">コード アクセス許可すべての基になる構造を定義します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-101">Defines the underlying structure of all code access permissions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-102">コード アクセス許可では、スタック ウォークを使用して、コードのすべての呼び出し元の権限を付与されていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-102">Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission.</span></span> <span data-ttu-id="e3cc5-103">権限オブジェクトが場合`null`、処理、状態を持つアクセス許可オブジェクトと同じ<xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-103">If a permission object is `null`, it is handled the same as a permission object with the state <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e3cc5-104">通常、呼び出し履歴は、コール スタックに呼び出し履歴の上位にメソッドが下にあるメソッドを呼び出すように、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-104">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="e3cc5-105">継承元、<xref:System.Security.CodeAccessPermission>クラスがセキュリティ インフラストラクチャを拡張するアクセス許可として正常に機能する完全な信頼を付与する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-105">Inheritors of the <xref:System.Security.CodeAccessPermission> class must be granted full trust to function correctly as permissions extending the security infrastructure.</span></span> <span data-ttu-id="e3cc5-106">継承先が完全に信頼されたことを確認する<xref:System.Security.CodeAccessPermission>問題、<xref:System.Security.Permissions.SecurityAction.InheritanceDemand>の<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence>  =  `true`と<xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy>  = `true`します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-106">To determine that the inheritors are fully trusted, <xref:System.Security.CodeAccessPermission> issues an <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> for <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence> = `true` and <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy> = `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cc5-107">次のコード例から派生したアクセス許可を示しています、<xref:System.Security.CodeAccessPermission>クラス。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-107">The following code example shows a permission derived from the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#1)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#1)]
 [!code-vb[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="e3cc5-108">継承の証拠とビューを提供し、ポリシーを変更する権限です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-108">for the ability of inheritors to provide evidence and view and modify policy.</span></span> <span data-ttu-id="e3cc5-109">列挙体に関連付けられている: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />、<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-109">Associated enumerations: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />.</span></span></permission>
    <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-110">継承する場合<see cref="T:System.Security.CodeAccessPermission" />、実装することも必要があります、<see cref="T:System.Security.Permissions.IUnrestrictedPermission" />インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-110">When you inherit from <see cref="T:System.Security.CodeAccessPermission" />, you must also implement the <see cref="T:System.Security.Permissions.IUnrestrictedPermission" /> interface.</span></span>  
  
<span data-ttu-id="e3cc5-111">次<see cref="T:System.Security.CodeAccessPermission" />メンバーをオーバーライドする必要があります: <see cref="M:System.Security.CodeAccessPermission.Copy" />、 <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />、 <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />、 <see cref="M:System.Security.CodeAccessPermission.ToXml" />、 <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />、および<see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-111">The following <see cref="T:System.Security.CodeAccessPermission" /> members must be overridden: <see cref="M:System.Security.CodeAccessPermission.Copy" />, <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.ToXml" />, <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />, and <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />.</span></span>  
  
<span data-ttu-id="e3cc5-112">受け取るコンス トラクターを定義することも必要があります、<see cref="T:System.Security.Permissions.PermissionState" />唯一のパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-112">You must also define a constructor that takes a <see cref="T:System.Security.Permissions.PermissionState" /> as its only parameter.</span></span>  
  
<span data-ttu-id="e3cc5-113">適用する必要があります、<see cref="T:System.SerializableAttribute" />属性から継承するクラスを<see cref="T:System.Security.CodeAccessPermission" />します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-113">You must apply the <see cref="T:System.SerializableAttribute" /> attribute to a class that inherits from <see cref="T:System.Security.CodeAccessPermission" />.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeAccessPermission ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeAccessPermission();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-114"><see cref="T:System.Security.CodeAccessPermission" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-114">Initializes a new instance of the <see cref="T:System.Security.CodeAccessPermission" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-115">このコンス トラクターは派生クラスのインスタンスが作成されるたびに、型の状態を初期化するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-115">This constructor is called to initialize state in the type whenever an instance of the derived class is created.</span></span> <span data-ttu-id="e3cc5-116">これは通常必要; ありませんが、派生クラスのコンス トラクターのコンス トラクター宣言で、このコンス トラクターを明示的に呼び出すことができます、ほとんどのコンパイラでは、呼び出しを自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-116">Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit&#xA;override this.Assert : unit -&gt; unit" Usage="codeAccessPermission.Assert " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-117">呼び出し側コードが、このメソッドを呼び出すコードを通じて、アクセス許可要求によって保護されているリソースにアクセス可能であるということ、それも、スタックの中で上位に位置する呼び出し側にリソースへのアクセス許可が付与されていない場合でさえそれが可能であることを宣言します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-117">Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.</span></span> <span data-ttu-id="e3cc5-118"><see cref="M:System.Security.CodeAccessPermission.Assert" /> を使用すると、セキュリティ上の問題が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-118">Using <see cref="M:System.Security.CodeAccessPermission.Assert" /> can create security issues.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-119">通常、呼び出し履歴は、コール スタックに呼び出し履歴の上位にメソッドが下にあるメソッドを呼び出すように、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-119">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span> <span data-ttu-id="e3cc5-120">呼び出す<xref:System.Security.CodeAccessPermission.Assert%2A>このメソッドを呼び出すコードを超える呼び出し履歴を先に進むからのコール スタックの下位から発信されるスタック ウォークを防止します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-120">Calling <xref:System.Security.CodeAccessPermission.Assert%2A> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method.</span></span> <span data-ttu-id="e3cc5-121">そのため、場合でも、呼び出し履歴の上位の呼び出し元には、リソースへのアクセスに必要なアクセス許可がないができるアクセスを必要なアクセス許可でこのメソッドを呼び出すコードを。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-121">Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission.</span></span> <span data-ttu-id="e3cc5-122">アサーションは、コードを呼び出す場合にのみ<xref:System.Security.CodeAccessPermission.Assert%2A>がアサートしているアクセス許可のセキュリティ チェックに合格します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-122">An assertion is effective only if the code that calls <xref:System.Security.CodeAccessPermission.Assert%2A> passes the security check for the permission that it is asserting.</span></span>  
  
 <span data-ttu-id="e3cc5-123">呼び出し<xref:System.Security.CodeAccessPermission.Assert%2A>は、呼び出し元のコードは、呼び出し元に返されるまで有効です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-123">The call to <xref:System.Security.CodeAccessPermission.Assert%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="e3cc5-124">1 つだけ<xref:System.Security.CodeAccessPermission.Assert%2A>フレーム上でアクティブにすることができます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-124">Only one <xref:System.Security.CodeAccessPermission.Assert%2A> can be active on a frame.</span></span> <span data-ttu-id="e3cc5-125">呼び出そうとすると<xref:System.Security.CodeAccessPermission.Assert%2A>ときに、アクティブな<xref:System.Security.CodeAccessPermission.Assert%2A>でフレーム結果上に存在する、<xref:System.Security.SecurityException>します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-125">An attempt to call <xref:System.Security.CodeAccessPermission.Assert%2A> when an active <xref:System.Security.CodeAccessPermission.Assert%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="e3cc5-126">呼び出す<xref:System.Security.CodeAccessPermission.RevertAssert%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>、アクティブなを削除する<xref:System.Security.CodeAccessPermission.Assert%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-126">Call <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span>  
  
 <span data-ttu-id="e3cc5-127"><xref:System.Security.CodeAccessPermission.Assert%2A> しないアクセス許可をその要求が成功しないためを付与するアクセス許可は無視されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-127"><xref:System.Security.CodeAccessPermission.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="e3cc5-128">ただし、コール スタックの低いコードから呼び出す場合<xref:System.Security.CodeAccessPermission.Demand%2A>そのアクセス許可を<xref:System.Security.SecurityException>スタック ウォークを呼び出そうとするコードに達した場合にスローされる<xref:System.Security.CodeAccessPermission.Assert%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-128">However, if code lower on the call stack calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="e3cc5-129">これは、コードを呼び出したため<xref:System.Security.CodeAccessPermission.Assert%2A>与えられていない、アクセス許可しようとした場合でも<xref:System.Security.CodeAccessPermission.Assert%2A>こと。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-129">This happens because the code that called <xref:System.Security.CodeAccessPermission.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.CodeAccessPermission.Assert%2A> it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e3cc5-130">呼び出すため、<xref:System.Security.CodeAccessPermission.Assert%2A>削除呼び出しチェーンのすべてのコードを要求する必要がありますアクセス許可が指定されたリソースにアクセスするが正しくないか、不適切に使用されるセキュリティ上の問題が開くことができます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-130">Because calling <xref:System.Security.CodeAccessPermission.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately.</span></span> <span data-ttu-id="e3cc5-131">そのため、注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-131">Therefore, it should be used with great caution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3cc5-132">呼び出し元のコードに <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /> がありません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-132">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span></span>  
  
<span data-ttu-id="e3cc5-133">- または -</span><span class="sxs-lookup"><span data-stu-id="e3cc5-133">-or-</span></span> 
<span data-ttu-id="e3cc5-134">現在のフレームにはアクティブな <see cref="M:System.Security.CodeAccessPermission.Assert" /> が既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-134">There is already an active <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="e3cc5-135">呼び出す機能の<see cref="M:System.Security.CodeAccessPermission.Assert" />します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-135">for the ability to call <see cref="M:System.Security.CodeAccessPermission.Assert" />.</span></span> <span data-ttu-id="e3cc5-136">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></span><span class="sxs-lookup"><span data-stu-id="e3cc5-136">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-137">このメソッドをオーバーライドすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-137">You cannot override this method.</span></span></para></block>
        <related type="Article" href="~/docs/framework/misc/using-the-assert-method.md"><span data-ttu-id="e3cc5-138">Assert メソッドの使用</span><span class="sxs-lookup"><span data-stu-id="e3cc5-138">Using the Assert Method</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission" Usage="codeAccessPermission.Copy " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Copy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-139">派生クラスにより実装されると、現在のアクセス許可オブジェクトの同一のコピーを作成して返します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-139">When implemented by a derived class, creates and returns an identical copy of the current permission object.</span></span></summary>
        <returns><span data-ttu-id="e3cc5-140">現在のアクセス許可オブジェクトのコピー。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-140">A copy of the current permission object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-141">アクセス許可オブジェクトのコピーは、元のアクセス許可オブジェクトとリソースに対して同じアクセス許可を表します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-141">A copy of a permission object represents the same access to resources as the original permission object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cc5-142">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.Copy%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-142">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Copy%2A> method.</span></span> <span data-ttu-id="e3cc5-143">このコード例が示されている例の一部、<xref:System.Security.CodeAccessPermission>クラス。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-143">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#2)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#2)]
 [!code-vb[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-144">派生クラスでは、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-144">You must override this method in a derived class.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="codeAccessPermission.Demand " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-145">呼び出し履歴の上位にあるすべての呼び出し元に、現在のインスタンスによって指定されているアクセス許可が付与されていない場合、実行時に <see cref="T:System.Security.SecurityException" /> を強制します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-145">Forces a <see cref="T:System.Security.SecurityException" /> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-146">このメソッドは、呼び出し元にリソースにアクセスするためのアクセス許可があることを確実にセキュリティで保護されたライブラリで通常使用されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-146">This method is typically used by secure libraries to ensure that callers have permission to access a resource.</span></span> <span data-ttu-id="e3cc5-147">安全なクラス ライブラリ ファイルのクラスを呼び出して、たとえば、<xref:System.Security.CodeAccessPermission.Demand%2A>のために必要な<xref:System.Security.Permissions.FileIOPermission>呼び出し元によって要求されたファイルの操作を実行する前にします。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-147">For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.</span></span>  
  
 <span data-ttu-id="e3cc5-148">このメソッドを呼び出すコードのアクセス許可はチェックされません。チェックは、そのコードの直前の呼び出し元から開始し、スタックの上位します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-148">The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</span></span> <span data-ttu-id="e3cc5-149">通常、呼び出し履歴は、コール スタックに呼び出し履歴の上位にメソッドが下にあるメソッドを呼び出すように、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-149">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span> <span data-ttu-id="e3cc5-150"><xref:System.Security.CodeAccessPermission.Demand%2A> 場合にのみ成功しない<xref:System.Security.SecurityException>が発生します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-150"><xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3cc5-151">呼び出し履歴の上位にある呼び出し元には、現在のインスタンスで指定されたアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-151">A caller higher in the call stack does not have the permission specified by the current instance.</span></span>  
  
<span data-ttu-id="e3cc5-152">- または -</span><span class="sxs-lookup"><span data-stu-id="e3cc5-152">-or-</span></span> 
<span data-ttu-id="e3cc5-153">呼び出し履歴の上位にある呼び出し元は、現在のアクセス許可オブジェクトで <see cref="M:System.Security.CodeAccessPermission.Deny" /> を呼び出しました。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-153">A caller higher in the call stack has called <see cref="M:System.Security.CodeAccessPermission.Deny" /> on the current permission object.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-154">このメソッドをオーバーライドすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-154">You cannot override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit&#xA;override this.Deny : unit -&gt; unit" Usage="codeAccessPermission.Deny " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Deny is obsolete and will be removed in a future release of the .NET Framework. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-155">呼び出し履歴内の上位の呼び出し元が、このメソッドを呼び出すコードを使用して、現在のインスタンスで指定されたリソースにアクセスしないようにします。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-155">Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3cc5-156"><xref:System.Security.CodeAccessPermission.Deny%2A>メソッドは、完全に信頼されたコードによって偶発的なアクセスからリソースを保護する場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-156">The <xref:System.Security.CodeAccessPermission.Deny%2A> method should be used only to protect resources from accidental access by fully trusted code.</span></span> <span data-ttu-id="e3cc5-157">これは、使わないで意図的な誤用からリソースを保護する信頼できないコードでします。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-157">It should not be used to protect resources from intentional misuse by untrusted code.</span></span> <span data-ttu-id="e3cc5-158">たとえば場合、メソッド`A`問題、<xref:System.Security.CodeAccessPermission.Deny%2A>な権限と、呼び出しメソッド`B`、メソッド`B`獲得をオーバーライドできます、<xref:System.Security.CodeAccessPermission.Deny%2A>を発行して、 <xref:System.Security.CodeAccessPermission.Assert%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-158">For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.Deny%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.Deny%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="e3cc5-159">呼び出されたメソッドは、スタック内の上位は常にします。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-159">The called method is always higher in the stack.</span></span> <span data-ttu-id="e3cc5-160">そのため場合、メソッド`B`保護されたリソース、セキュリティ システムへのアクセスを試みますがアクセス許可と、そのため、確認を開始メソッド`B`直前の呼び出し元からウォークがあることを確認するスタックを下へありません<xref:System.Security.CodeAccessPermission.Deny%2A>または<xref:System.Security.CodeAccessPermission.PermitOnly%2A>スタック内の下位です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-160">Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack.</span></span> <span data-ttu-id="e3cc5-161">メソッド`B`は、リソースにアクセスしようとすることができます、スタック ウォークを直ちに停止を使用して、<xref:System.Security.CodeAccessPermission.Assert%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-161">Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method.</span></span> <span data-ttu-id="e3cc5-162">その場合は、<xref:System.Security.CodeAccessPermission.Deny%2A>メソッドによって、スタックに配置`A`(呼び出し元のメソッド) が検出されることはありません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-162">In that case, the <xref:System.Security.CodeAccessPermission.Deny%2A> placed on the stack by method `A` (the calling method) is never discovered.</span></span>  
  
 <span data-ttu-id="e3cc5-163">このメソッドでは、コール スタックの上位の呼び出し元が呼び出しへのアクセス許可が付与されている場合でも、このメソッドを呼び出すコードを保護されたリソースにアクセスできなくなります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-163">This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</span></span> <span data-ttu-id="e3cc5-164">通常、呼び出し履歴は、コール スタックに呼び出し履歴の上位にメソッドが下にあるメソッドを呼び出すように、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-164">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="e3cc5-165"><xref:System.Security.CodeAccessPermission.Deny%2A> プログラマの責任の制限、またはメソッドを呼び出すを防ぐのに役立つため、偶発的なセキュリティの問題を防ぐ<xref:System.Security.CodeAccessPermission.Deny%2A>拒否されたアクセス許可によって保護されているリソースにアクセスするために使用されているからです。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-165"><xref:System.Security.CodeAccessPermission.Deny%2A> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <xref:System.Security.CodeAccessPermission.Deny%2A> from being used to access the resource protected by the denied permission.</span></span> <span data-ttu-id="e3cc5-166">メソッドを呼び出す場合<xref:System.Security.CodeAccessPermission.Deny%2A>、アクセス許可の場合、<xref:System.Security.CodeAccessPermission.Demand%2A>に達したときのアクセス許可が呼び出し履歴内の下位にある呼び出し元によって呼び出されると、そのセキュリティ チェックは失敗します、<xref:System.Security.CodeAccessPermission.Deny%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-166">If a method calls <xref:System.Security.CodeAccessPermission.Deny%2A> on a permission, and if a <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.CodeAccessPermission.Deny%2A>.</span></span>  
  
 <span data-ttu-id="e3cc5-167">呼び出し<xref:System.Security.CodeAccessPermission.Deny%2A>は、呼び出し元のコードは、呼び出し元に返されるまで有効です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-167">The call to <xref:System.Security.CodeAccessPermission.Deny%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="e3cc5-168">1 つだけ<xref:System.Security.CodeAccessPermission.Deny%2A>フレーム上でアクティブにすることができます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-168">Only one <xref:System.Security.CodeAccessPermission.Deny%2A> can be active on a frame.</span></span> <span data-ttu-id="e3cc5-169">呼び出そうとすると<xref:System.Security.CodeAccessPermission.Deny%2A>ときに、アクティブな<xref:System.Security.CodeAccessPermission.Deny%2A>でフレーム結果上に存在する、<xref:System.Security.SecurityException>します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-169">An attempt to call <xref:System.Security.CodeAccessPermission.Deny%2A> when an active <xref:System.Security.CodeAccessPermission.Deny%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="e3cc5-170">呼び出す<xref:System.Security.CodeAccessPermission.RevertDeny%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>、アクティブなを削除する<xref:System.Security.CodeAccessPermission.Deny%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-170">Call <xref:System.Security.CodeAccessPermission.RevertDeny%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Deny%2A>.</span></span> <span data-ttu-id="e3cc5-171"><xref:System.Security.CodeAccessPermission.Deny%2A> しないアクセス許可をその要求が成功しないためを付与するアクセス許可は無視されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-171"><xref:System.Security.CodeAccessPermission.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3cc5-172">現在のフレームにはアクティブな <see cref="M:System.Security.CodeAccessPermission.Deny" /> が既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-172">There is already an active <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-173">このメソッドをオーバーライドすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-173">You cannot override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="codeAccessPermission.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e3cc5-174">現在の <see cref="T:System.Security.CodeAccessPermission" /> と比較する <see cref="T:System.Security.CodeAccessPermission" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-174">The <see cref="T:System.Security.CodeAccessPermission" /> object to compare with the current <see cref="T:System.Security.CodeAccessPermission" />.</span></span></param>
        <summary><span data-ttu-id="e3cc5-175">指定した <see cref="T:System.Security.CodeAccessPermission" /> オブジェクトが、現在の <see cref="T:System.Security.CodeAccessPermission" /> と等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-175">Determines whether the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />.</span></span></summary>
        <returns><span data-ttu-id="e3cc5-176">指定した <see cref="T:System.Security.CodeAccessPermission" /> オブジェクトが現在の <see cref="T:System.Security.CodeAccessPermission" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-176"><see langword="true" /> if the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-177">詳細については、「<xref:System.Object.Equals%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-177">For more information, see <xref:System.Object.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public abstract void FromXml (System.Security.SecurityElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub FromXml (elem As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void FromXml(System::Security::SecurityElement ^ elem);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit" Usage="codeAccessPermission.FromXml elem" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elem" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="elem"><span data-ttu-id="e3cc5-178">セキュリティ オブジェクトの再構築に使用する XML エンコード。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-178">The XML encoding to use to reconstruct the security object.</span></span></param>
        <summary><span data-ttu-id="e3cc5-179">派生クラスでオーバーライドされると、XML エンコードから指定された状態で、セキュリティ オブジェクトを再構築します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-179">When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-180">セキュリティ オブジェクトを拡張するカスタム コードを実装する必要があります、<xref:System.Security.CodeAccessPermission.ToXml%2A>と<xref:System.Security.CodeAccessPermission.FromXml%2A>セキュリティ encodable オブジェクトを作成する方法。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-180">Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cc5-181">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.FromXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-181">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.FromXml%2A> method.</span></span> <span data-ttu-id="e3cc5-182">このコード例が示されている例の一部、<xref:System.Security.CodeAccessPermission>クラス。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-182">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#10)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#10)]
 [!code-vb[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3cc5-183"><paramref name="elem" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-183">The <paramref name="elem" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3cc5-184"><paramref name="elem" /> パラメーターには、現在のインスタンスと同じ型のインスタンスの XML エンコードが含まれていません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-184">The <paramref name="elem" /> parameter does not contain the XML encoding for an instance of the same type as the current instance.</span></span>  
  
<span data-ttu-id="e3cc5-185">- または -</span><span class="sxs-lookup"><span data-stu-id="e3cc5-185">-or-</span></span> 
<span data-ttu-id="e3cc5-186"><paramref name="elem" /> パラメーターのバージョン番号は、サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-186">The version number of the <paramref name="elem" /> parameter is not supported.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-187">派生クラスでは、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-187">You must override this method in a derived class.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="codeAccessPermission.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-188">ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造での使用に適している、<see cref="T:System.Security.CodeAccessPermission" /> オブジェクトのハッシュ コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-188">Gets a hash code for the <see cref="T:System.Security.CodeAccessPermission" /> object that is suitable for use in hashing algorithms and data structures such as a hash table.</span></span></summary>
        <returns><span data-ttu-id="e3cc5-189">現在の <see cref="T:System.Security.CodeAccessPermission" /> オブジェクトのハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-189">A hash code for the current <see cref="T:System.Security.CodeAccessPermission" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-190">同じアクセス許可の 2 つのインスタンスのハッシュ コードが異なる可能性があります、ためハッシュ コードを比較する 2 つ使用するされません<xref:System.Security.CodeAccessPermission>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-190">The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.CodeAccessPermission> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="codeAccessPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Intersect(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="e3cc5-191">現在のアクセス許可との共通部分のあるアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-191">A permission to intersect with the current permission.</span></span> <span data-ttu-id="e3cc5-192">これは、現在のアクセス許可と同じ型であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-192">It must be of the same type as the current permission.</span></span></param>
        <summary><span data-ttu-id="e3cc5-193">派生クラスで実装される場合、現在のアクセス許可と指定したアクセス許可の積集合であるアクセス許可を作成して返します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-193">When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</span></span></summary>
        <returns><span data-ttu-id="e3cc5-194">現在のアクセス許可と指定したアクセス許可の共通部分を表す新しいアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-194">A new permission that represents the intersection of the current permission and the specified permission.</span></span> <span data-ttu-id="e3cc5-195">積集合が空の場合、この新しいアクセス許可は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-195">This new permission is <see langword="null" /> if the intersection is empty.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-196">2 つのアクセス許可の積集合は、両方に共通する操作のセットを説明する権限です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-196">The intersection of two permissions is a permission that describes the set of operations they both describe in common.</span></span> <span data-ttu-id="e3cc5-197">元の両方の権限を通過する要求だけでは、積集合を渡します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-197">Only a demand that passes both original permissions will pass the intersection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cc5-198">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.Intersect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-198">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Intersect%2A> method.</span></span> <span data-ttu-id="e3cc5-199">このコード例が示されている例の一部、<xref:System.Security.CodeAccessPermission>クラス。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-199">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#5)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#5)]
 [!code-vb[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3cc5-200"><paramref name="target" /> パラメーターは <see langword="null" /> ではなく、現在のアクセス許可と同じクラスのインスタンスでもありません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-200">The <paramref name="target" /> parameter is not <see langword="null" /> and is not an instance of the same class as the current permission.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-201">派生クラスでは、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-201">You must override this method in a derived class.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public abstract bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="codeAccessPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="e3cc5-202">サブセット リレーションシップをテストするアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-202">A permission that is to be tested for the subset relationship.</span></span> <span data-ttu-id="e3cc5-203">このアクセス許可は、現在のアクセス許可と同じ型であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-203">This permission must be of the same type as the current permission.</span></span></param>
        <summary><span data-ttu-id="e3cc5-204">派生クラスによって実装された場合は、現在のアクセス許可が、指定したアクセス許可のサブセットであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-204">When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</span></span></summary>
        <returns><span data-ttu-id="e3cc5-205">現在のアクセス許可が、指定したアクセス許可のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-205"><see langword="true" /> if the current permission is a subset of the specified permission; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-206">現在のアクセス許可は、現在のアクセス許可を指定した権限によって完全に含まれる一連の操作を指定する場合、指定したアクセス許可のサブセットです。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-206">The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.</span></span> <span data-ttu-id="e3cc5-207">たとえば、C:\example.txt へのアクセスを表すアクセス許可は、c: へのアクセスを表すアクセス許可のサブセット\\します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-207">For example, a permission that represents access to C:\example.txt is a subset of a permission that represents access to C:\\.</span></span> <span data-ttu-id="e3cc5-208">このメソッドが戻る場合`true`、現在のアクセス許可がない以上へのアクセスが保護されたリソースは、指定した権限を表します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-208">If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.</span></span>  
  
 <span data-ttu-id="e3cc5-209">次のステートメントは、する必要がある`true`のすべての上書きを<xref:System.Security.CodeAccessPermission.IsSubsetOf%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-209">The following statements are required to be `true` for all overrides of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method.</span></span> <span data-ttu-id="e3cc5-210">*X*、 *Y*、および*Z* 、null 参照でない、カスタム コードへのアクセス許可オブジェクトを表す*U*コードを無制限のアクセス許可を表します*N*で空のアクセス許可を表す、<xref:System.Security.Permissions.PermissionState>の<xref:System.Security.Permissions.PermissionState.None>します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-210">*X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState.None>.</span></span>  
  
-   <span data-ttu-id="e3cc5-211">*X*します。IsSubsetOf (*X*) を返します`true`します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-211">*X*.IsSubsetOf(*X*) returns `true`.</span></span>  
  
-   <span data-ttu-id="e3cc5-212">*X*します。IsSubsetOf (*Y*) と同じ値を返します*Y*します。IsSubsetOf (*X*) 場合にのみ*X*と*Y*同じアクセス許可のセットを表します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-212">*X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.</span></span>  
  
-   <span data-ttu-id="e3cc5-213">場合*X*します。IsSubsetOf (*Y*) と*Y*します。IsSubsetOf (*Z*) 両方を返す`true`、 *X*します。IsSubsetOf (*Z*) を返します`true`します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-213">If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.</span></span>  
  
-   <span data-ttu-id="e3cc5-214">*X*します。IsSubsetOf (*U*) を返します`true`します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-214">*X*.IsSubsetOf(*U*) returns `true`.</span></span>  
  
-   <span data-ttu-id="e3cc5-215">*X*します。IsSubsetOf (*N*) を返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-215">*X*.IsSubsetOf(*N*) returns `false`.</span></span>  
  
-   <span data-ttu-id="e3cc5-216">*N*します。IsSubsetOf (*X*) を返します`true`します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-216">*N*.IsSubsetOf(*X*) returns `true`.</span></span>  
  
 <span data-ttu-id="e3cc5-217">場合*X*と*Y*が null 参照は、カスタム コードへのアクセス許可オブジェクトを表す*X*します。IsSubsetOf (*Y*) を返します`true`します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-217">If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`.</span></span> <span data-ttu-id="e3cc5-218">場合*Z*が null の場合も、複合操作を設定する*X*します。共用体 (*Y*)。IsSubsetOf (*Z*) も返します`true`null の 2 つのアクセス許可の和集合が null のアクセス許可であるためです。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-218">If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cc5-219">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.IsSubsetOf%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-219">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method.</span></span> <span data-ttu-id="e3cc5-220">このコード例が示されている例の一部、<xref:System.Security.CodeAccessPermission>クラス。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-220">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#4)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#4)]
 [!code-vb[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3cc5-221"><paramref name="target" /> パラメーターは <see langword="null" /> でなく、また現在のアクセス許可と同じ型でもありません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-221">The <paramref name="target" /> parameter is not <see langword="null" /> and is not of the same type as the current permission.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-222">派生クラスでは、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-222">You must override this method in a derived class.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit&#xA;override this.PermitOnly : unit -&gt; unit" Usage="codeAccessPermission.PermitOnly " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-223">呼び出し履歴内の上位の呼び出し元が、このメソッドを呼び出すコードでは一切リソースにアクセスできないようにします。ただし、現在のインスタンスで指定されているリソースは例外です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-223">Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="e3cc5-224"><xref:System.Security.CodeAccessPermission.PermitOnly%2A>メソッドは、完全に信頼されたコードによって偶発的なアクセスからリソースを保護する場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-224">The <xref:System.Security.CodeAccessPermission.PermitOnly%2A> method should be used only to protect resources from accidental access by fully trusted code.</span></span> <span data-ttu-id="e3cc5-225">これは、使わないで意図的な誤用からリソースを保護する信頼できないコードでします。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-225">It should not be used to protect resources from intentional misuse by untrusted code.</span></span> <span data-ttu-id="e3cc5-226">たとえば場合、メソッド`A`問題、<xref:System.Security.CodeAccessPermission.PermitOnly%2A>な権限と、呼び出しメソッド`B`、メソッド`B`獲得をオーバーライドできます、<xref:System.Security.CodeAccessPermission.PermitOnly%2A>を発行して、 <xref:System.Security.CodeAccessPermission.Assert%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-226">For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="e3cc5-227">呼び出されたメソッドは、スタック内の上位は常にします。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-227">The called method is always higher in the stack.</span></span> <span data-ttu-id="e3cc5-228">そのため場合、メソッド`B`保護されたリソース、セキュリティ システムへのアクセスを試みますがアクセス許可と、そのため、確認を開始メソッド`B`直前の呼び出し元からウォークがあることを確認するスタックを下へありません<xref:System.Security.CodeAccessPermission.Deny%2A>または<xref:System.Security.CodeAccessPermission.PermitOnly%2A>スタック内の下位です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-228">Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack.</span></span> <span data-ttu-id="e3cc5-229">メソッド`B`は、リソースにアクセスしようとすることができます、スタック ウォークを直ちに停止を使用して、<xref:System.Security.CodeAccessPermission.Assert%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-229">Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method.</span></span> <span data-ttu-id="e3cc5-230">その場合は、<xref:System.Security.CodeAccessPermission.PermitOnly%2A>メソッドによって、スタックに配置`A`(呼び出し元のメソッド) が検出されることはありません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-230">In that case, the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placed on the stack by method `A` (the calling method) is never discovered.</span></span>  
  
 <span data-ttu-id="e3cc5-231"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> ような<xref:System.Security.CodeAccessPermission.Deny%2A>両方をそれ以外の場合操作が成功すると失敗するスタック ウォークが発生することで、します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-231"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> is similar to <xref:System.Security.CodeAccessPermission.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed.</span></span> <span data-ttu-id="e3cc5-232">される点が異なります<xref:System.Security.CodeAccessPermission.Deny%2A>が失敗し、スタック ウォークを原因となるアクセス許可を指定しますが、<xref:System.Security.CodeAccessPermission.PermitOnly%2A>失敗するスタック ウォークが発生しないアクセス許可を指定します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-232">The difference is that <xref:System.Security.CodeAccessPermission.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.CodeAccessPermission.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.</span></span>  
  
 <span data-ttu-id="e3cc5-233">コードを指定されたリソースのみへのアクセスに使用できるようにするには、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-233">Call this method to ensure that your code can be used to access only the specified resources.</span></span> <span data-ttu-id="e3cc5-234">呼び出し<xref:System.Security.CodeAccessPermission.PermitOnly%2A>は、呼び出し元のコードは、呼び出し元に返されるまで有効です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-234">The call to <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="e3cc5-235">1 つだけ<xref:System.Security.CodeAccessPermission.PermitOnly%2A>フレーム上でアクティブにすることができます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-235">Only one <xref:System.Security.CodeAccessPermission.PermitOnly%2A> can be active on a frame.</span></span> <span data-ttu-id="e3cc5-236">呼び出そうとすると<xref:System.Security.CodeAccessPermission.PermitOnly%2A>ときに、アクティブな<xref:System.Security.CodeAccessPermission.PermitOnly%2A>でフレーム結果上に存在する、<xref:System.Security.SecurityException>します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-236">An attempt to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A> when an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="e3cc5-237">呼び出す<xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>、アクティブなを削除する<xref:System.Security.CodeAccessPermission.PermitOnly%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-237">Call <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span></span>  
  
 <span data-ttu-id="e3cc5-238"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> しないアクセス許可をその要求が成功しないためを付与するアクセス許可は無視されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-238"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="e3cc5-239">ただし、コードのコール スタックを後で場合呼び出し<xref:System.Security.CodeAccessPermission.Demand%2A>そのアクセス許可、<xref:System.Security.SecurityException>スタック ウォークを呼び出そうとするコードに達した場合にスローされる<xref:System.Security.CodeAccessPermission.PermitOnly%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-239">However, if code lower on the call stack later calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span></span> <span data-ttu-id="e3cc5-240">これは、コードを呼び出したため<xref:System.Security.CodeAccessPermission.PermitOnly%2A>与えられていない、アクセス許可が呼び出されていなくて<xref:System.Security.CodeAccessPermission.PermitOnly%2A>そのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-240">This is because the code that called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for that permission.</span></span> <span data-ttu-id="e3cc5-241">通常、呼び出し履歴は、コール スタックに呼び出し履歴の上位にメソッドが下にあるメソッドを呼び出すように、成長として表されます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-241">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="e3cc5-242">現在のフレームにはアクティブな <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> が既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-242">There is already an active <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-243">このメソッドをオーバーライドすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-243">You cannot override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="RevertAll">
      <MemberSignature Language="C#" Value="public static void RevertAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAll" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAll();" />
      <MemberSignature Language="F#" Value="static member RevertAll : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-244">現在のフレームの以前のオーバーライドすべてが削除され、有効ではなくなります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-244">Causes all previous overrides for the current frame to be removed and no longer in effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-245">上書きがない場合 (<xref:System.Security.CodeAccessPermission.Assert%2A>、 <xref:System.Security.CodeAccessPermission.Deny%2A>、または<xref:System.Security.CodeAccessPermission.PermitOnly%2A>) 現在のフレームを<xref:System.ExecutionEngineException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-245">If there are no overrides (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, or <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3cc5-246">現在のフレームには以前の <see cref="M:System.Security.CodeAccessPermission.Assert" />、<see cref="M:System.Security.CodeAccessPermission.Deny" />、または <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> はありません。 </span><span class="sxs-lookup"><span data-stu-id="e3cc5-246">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" />, or <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RevertAssert">
      <MemberSignature Language="C#" Value="public static void RevertAssert ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAssert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAssert" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAssert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAssert();" />
      <MemberSignature Language="F#" Value="static member RevertAssert : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertAssert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-247">現在のフレームの以前の <see cref="M:System.Security.CodeAccessPermission.Assert" /> がすべて削除され、有効ではなくなります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-247">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame to be removed and no longer in effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-248">存在する場合ありません<xref:System.Security.CodeAccessPermission.Assert%2A>現在のフレームを<xref:System.ExecutionEngineException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-248">If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3cc5-249">現在のフレームには以前の <see cref="M:System.Security.CodeAccessPermission.Assert" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-249">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RevertDeny">
      <MemberSignature Language="C#" Value="public static void RevertDeny ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertDeny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertDeny" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertDeny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertDeny();" />
      <MemberSignature Language="F#" Value="static member RevertDeny : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertDeny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Deny is obsolete and will be removed in a future release of the .NET Framework. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-250">現在のフレームの以前の <see cref="M:System.Security.CodeAccessPermission.Deny" /> がすべて削除され、有効ではなくなります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-250">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame to be removed and no longer in effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-251">存在する場合ありません<xref:System.Security.CodeAccessPermission.Deny%2A>現在のフレームを<xref:System.ExecutionEngineException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-251">If there is no <xref:System.Security.CodeAccessPermission.Deny%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3cc5-252">現在のフレームには以前の <see cref="M:System.Security.CodeAccessPermission.Deny" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-252">There is no previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RevertPermitOnly">
      <MemberSignature Language="C#" Value="public static void RevertPermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertPermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertPermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertPermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertPermitOnly();" />
      <MemberSignature Language="F#" Value="static member RevertPermitOnly : unit -&gt; unit" Usage="System.Security.CodeAccessPermission.RevertPermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.Diagnostics.Conditional("FEATURE_MONO_CAS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-253">現在のフレームの以前の <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> がすべて削除され、有効ではなくなります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-253">Causes any previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame to be removed and no longer in effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-254">存在する場合ありません<xref:System.Security.CodeAccessPermission.PermitOnly%2A>現在のフレームを<xref:System.ExecutionEngineException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-254">If there is no <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e3cc5-255">現在のフレームには以前の <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-255">There is no previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IPermission.Demand">
      <MemberSignature Language="C#" Value="void IPermission.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IPermission.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IPermission#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IPermission.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IPermission.Demand() = System::Security::IPermission::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Assert">
      <MemberSignature Language="C#" Value="void IStackWalk.Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert" />
      <MemberSignature Language="VB.NET" Value="Sub Assert () Implements IStackWalk.Assert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Assert() = System::Security::IStackWalk::Assert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Demand">
      <MemberSignature Language="C#" Value="void IStackWalk.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IStackWalk.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Demand() = System::Security::IStackWalk::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Deny">
      <MemberSignature Language="C#" Value="void IStackWalk.Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny" />
      <MemberSignature Language="VB.NET" Value="Sub Deny () Implements IStackWalk.Deny" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Deny() = System::Security::IStackWalk::Deny;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.PermitOnly">
      <MemberSignature Language="C#" Value="void IStackWalk.PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Sub PermitOnly () Implements IStackWalk.PermitOnly" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.PermitOnly() = System::Security::IStackWalk::PermitOnly;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="codeAccessPermission.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-256">現在のアクセス許可オブジェクトの文字列形式を作成して返します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-256">Creates and returns a string representation of the current permission object.</span></span></summary>
        <returns><span data-ttu-id="e3cc5-257">現在のアクセス許可オブジェクトの文字列形式。	</span><span class="sxs-lookup"><span data-stu-id="e3cc5-257">A string representation of the current permission object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-258">このメソッドは、文字列として、アクセス許可を表示する必要がある場合のデバッグに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-258">This method is useful in debugging when you need to display the permission as a string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public abstract System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement" Usage="codeAccessPermission.ToXml " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.ToXml</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3cc5-259">派生クラスでオーバーライドされた場合、セキュリティ オブジェクトとその現在の状態の XML エンコーディングを作成します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-259">When overridden in a derived class, creates an XML encoding of the security object and its current state.</span></span></summary>
        <returns><span data-ttu-id="e3cc5-260">状態情報のすべてを含む、セキュリティ オブジェクトの XML エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-260">An XML encoding of the security object, including any state information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-261">セキュリティ オブジェクトを拡張するカスタム コードを実装する必要があります、<xref:System.Security.CodeAccessPermission.ToXml%2A>と<xref:System.Security.CodeAccessPermission.FromXml%2A>セキュリティ encodable オブジェクトを作成する方法。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-261">Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cc5-262">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.ToXml%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-262">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.ToXml%2A> method.</span></span> <span data-ttu-id="e3cc5-263">このコード例が示されている例の一部、<xref:System.Security.CodeAccessPermission>クラス。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-263">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#11)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#11)]
 [!code-vb[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-264">派生クラスでは、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-264">You must override this method in a derived class.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public virtual System.Security.IPermission Union (System.Security.IPermission other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Union (other As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="codeAccessPermission.Union other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Union(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e3cc5-265">現在のアクセス許可と結合するアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-265">A permission to combine with the current permission.</span></span> <span data-ttu-id="e3cc5-266">これは、現在のアクセス許可と同じ型であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-266">It must be of the same type as the current permission.</span></span></param>
        <summary><span data-ttu-id="e3cc5-267">派生クラスでオーバーライドされると、現在のアクセス許可と指定されたアクセス許可の和集合であるアクセス許可を作成します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-267">When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</span></span></summary>
        <returns><span data-ttu-id="e3cc5-268">現在のアクセス許可と指定されたアクセス許可の和集合を表す新しいアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-268">A new permission that represents the union of the current permission and the specified permission.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3cc5-269">呼び出しの結果<xref:System.Security.CodeAccessPermission.Union%2A>は現在のアクセス許可と指定した権限の両方で表されるすべての操作を表すアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-269">The result of a call to <xref:System.Security.CodeAccessPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission.</span></span> <span data-ttu-id="e3cc5-270">いずれかのアクセス許可に適合する要求は、その共用体を渡します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-270">Any demand that passes either permission passes their union.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3cc5-271">次のコード例のオーバーライドを示しています、<xref:System.Security.CodeAccessPermission.Union%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-271">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Union%2A> method.</span></span> <span data-ttu-id="e3cc5-272">このコード例が示されている例の一部、<xref:System.Security.CodeAccessPermission>クラス。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-272">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#12)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#12)]
 [!code-vb[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3cc5-273"><paramref name="other" /> パラメーターが <see langword="null" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-273">The <paramref name="other" /> parameter is not <see langword="null" />.</span></span> <span data-ttu-id="e3cc5-274">このメソッドは、<see langword="null" /> に渡された場合に、このレベルでのみサポートされます。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-274">This method is only supported at this level when passed <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="e3cc5-275">派生クラスでは、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-275">You must override this method in a derived class.</span></span> <span data-ttu-id="e3cc5-276">場合は、アクセス許可のコピーを返す必要がありますの値、<paramref name="other" />パラメーターが<see langword="null" />します。</span><span class="sxs-lookup"><span data-stu-id="e3cc5-276">You should return a copy of the permission if the value of the <paramref name="other" /> parameter is <see langword="null" />.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>