<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fe25203598008b380f581e3ca68f53880bebef3f" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56346214" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>不要になったときにコンピューターのメモリから削除するなどして機密を保持する必要があるテキストを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  使用することをお勧めしません、`SecureString`クラスの新しい開発します。 詳細については、次を参照してください。 [SecureString を使用してはならない](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md)GitHub でします。

 <xref:System.Security.SecureString> セキュリティ対策を提供する文字列型です。 可能性のある機密性の高い文字列をプレーン テキストとしてプロセス メモリに格納しないようにしようとします。  (ただし、参照制限については、 [SecureString はどのくらい安全でしょうか](#HowSecure)セクションです。)。インスタンスの値<xref:System.Security.SecureString>インスタンスが初期化されるときに、または値が変更されたときに、基になるプラットフォームでサポートされているメカニズムを使用して自動的に保護します。 アプリケーションがインスタンスを変更できないレンダリングし、呼び出すことによってさらに変更を防ぐため、<xref:System.Security.SecureString.MakeReadOnly%2A>メソッド。  
  
 最大長を<xref:System.Security.SecureString>インスタンスが 65,536 文字。  
  
> [!IMPORTANT]
>  この型は <xref:System.IDisposable> インターフェイスを実装します。 型のインスタンスを使用してが完了したら、直接的または間接的にそれを破棄する必要があります。 直接的に型を破棄するには、`try` / `catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。 間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。 詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。  
  
 <xref:System.Security.SecureString>クラスとそのメンバーが COM に表示されません。 詳細については、「<xref:System.Runtime.InteropServices.ComVisibleAttribute>」を参照してください。  
  
 このセクションの内容:  
  
 [Vs の文字列を指定します。SecureString](#vsString)   
 [SecureString 操作](#Ops)   
 [SecureString と相互運用機能](#interop)   
 [SecureString はどのようにセキュリティで保護されたのですか。](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a>SecureString と文字列  
 インスタンス、<xref:System.String?displayProperty=nameWithType>クラスは、両方の変更できないと、不要になったときにガベージ コレクションのプログラムでスケジュールできませんつまり、インスタンスは読み取り専用が作成されると、インスタンスがになりますを予測することはできません。コンピューターのメモリから削除されます。 <xref:System.String?displayProperty=nameWithType>インスタンスが変更可能な既存のインスタンスを変更する表示される操作が実際に操作のコピーを作成します。 そのため場合、<xref:System.String>オブジェクトには、パスワード、クレジット_カード番号、または個人データなどの機密情報が含まれています、アプリケーションは、コンピューターのメモリから、データを削除できないため、使用後、情報が盗まれるリスクがあります。  
  
 A<xref:System.Security.SecureString>オブジェクトと似ています、<xref:System.String>オブジェクトのテキスト値を持つことにします。 ただしの値を<xref:System.Security.SecureString>オブジェクトがメモリに固定されている、アプリケーションが読み取り専用としてマークされるまで、基になるオペレーティング システムによって提供される、暗号化を変更できるよう保護機構を使用する可能性があります、コンピューターのメモリから削除できますいずれか、アプリケーションを呼び出すことによって、<xref:System.Security.SecureString.Dispose%2A>メソッドまたは .NET Framework のガベージ コレクターによって。  
  
 制限事項の詳細については、<xref:System.Security.SecureString>クラスを参照してください、 [SecureString はどのくらい安全でしょうか。](#HowSecure)セクション。  
  
 [ページのトップへ](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a>SecureString 操作  
 <xref:System.Security.SecureString>クラスには、次を実行するためのメンバーが含まれています。  
  
 インスタンスを作成、<xref:System.Security.SecureString>オブジェクト  
 インスタンス化する、<xref:System.Security.SecureString>パラメーターなしのコンス トラクターを呼び出すことによってオブジェクト。  
  
 文字を追加、<xref:System.Security.SecureString>オブジェクト  
 一度に 1 つの文字を追加することができます、<xref:System.Security.SecureString>オブジェクトを呼び出すことによってその<xref:System.Security.SecureString.AppendChar%2A>または<xref:System.Security.SecureString.InsertAt%2A>メソッド。  
  
> [!IMPORTANT]
>  A<xref:System.Security.SecureString>からオブジェクトを構築しない必要があります、<xref:System.String>機微なデータが変更できないのメモリの永続化の結果の対象が既にあるため、<xref:System.String>クラス。 構築する最善の方法、<xref:System.Security.SecureString>などは、時間での文字の管理されていないソースからオブジェクト、<xref:System.Console.ReadKey%2A?displayProperty=nameWithType>メソッド。  
  
 文字を削除、<xref:System.Security.SecureString>オブジェクト  
 呼び出すことによって、個々 の文字を置き換えることができます、<xref:System.Security.SecureString.SetAt%2A>メソッドを呼び出すことによって、個々 の文字を削除、<xref:System.Security.SecureString.RemoveAt%2A>メソッド、またはすべての文字から削除、<xref:System.Security.SecureString>インスタンスを呼び出すことによって、<xref:System.Security.SecureString.Clear%2A>メソッド。  
  
 ように、<xref:System.Security.SecureString>読み取り専用オブジェクト  
 定義すると、文字列を<xref:System.Security.SecureString>オブジェクトを表し、呼び出すことがその<xref:System.Security.SecureString.MakeReadOnly%2A>読み取り専用文字列を作成するメソッド。  
  
 に関する情報を取得、<xref:System.Security.SecureString>オブジェクト  
 <xref:System.Security.SecureString>クラスには、文字列についての情報を提供する 2 つだけのメンバー: その<xref:System.Security.SecureString.Length%2A>文字列で UTF16 でエンコードされたコード ユニットの数を示すプロパティと<xref:System.Security.SecureString.IsReadOnly%2A>メソッドは、インスタンスがかどうかを示します読み取り専用です。  
  
 割り当てられたメモリの解放、<xref:System.Security.SecureString>インスタンス  
 <xref:System.Security.SecureString>実装、<xref:System.IDisposable>インターフェイスを呼び出すことによって、メモリを解放する、<xref:System.Security.SecureString.Dispose%2A>メソッド。  
  
 <xref:System.Security.SecureString>クラスが検査、比較、またはの値を変換するメンバーを持たない、<xref:System.Security.SecureString>します。 このようなメンバーがない場合は、誤ってまたは悪意のある露出からのインスタンスの値を保護します。 適切なメンバーを使用して、<xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType>クラスなど、<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>の値を操作するメソッド、<xref:System.Security.SecureString>オブジェクト。  
  
 よく使われる、.NET Framework クラス ライブラリ<xref:System.Security.SecureString>次の方法でインスタンス。  
  
-   使用して、プロセスにパスワード情報を提供する、<xref:System.Diagnostics.ProcessStartInfo>構造体またはのオーバー ロードを呼び出すことによって、<xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType>メソッド型のパラメーターを持つ<xref:System.Security.SecureString>します。  
  
-   呼び出すことによってネットワーク パスワードの情報を提供する、<xref:System.Net.NetworkCredential>型のパラメーターを持つクラスのコンス トラクター<xref:System.Security.SecureString>またはを使用して、<xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType>プロパティ。  
  
-   呼び出すことによって、SQL Server 認証のパスワードの情報を提供する、<xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType>コンス トラクターまたはの値を取得、<xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType>プロパティ。  
  
-   アンマネージ コードに文字列を渡す。 詳細については、次を参照してください。、 [SecureString と相互運用機能](#interop)セクション。  
  
 [ページのトップへ](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a>SecureString と相互運用機能  
 オペレーティング システムは直接サポートされていません<xref:System.Security.SecureString>の値を変換する必要があります、<xref:System.Security.SecureString>ネイティブ メソッドを文字列を渡す前に必要な文字列型のオブジェクト。  <xref:System.Runtime.InteropServices.Marshal>クラスがこれを実行する 5 つのメソッドには。  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>、に変換する、<xref:System.Security.SecureString>バイナリ文字列 (BSTR) の COM で認識する文字列値  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>、コピー、<xref:System.Security.SecureString>文字列をアンマネージ メモリ内の ANSI 文字列値。  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>、コピー、<xref:System.Security.SecureString>文字列をアンマネージ メモリ内の Unicode 文字列値。  
  
 これらの各メソッドは、アンマネージ メモリ内、クリア テキスト文字列を作成します。 ゼロにして、不要になったとすぐにそのメモリを解放する開発者の役目です。 各文字列変換とメモリの割り当て方法、対応するメソッドをゼロにし、割り当てられたメモリを解放するには。  
  
|割り当てと変換メソッド|0 と free メソッド|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [ページのトップへ](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a>SecureString はどのようにセキュリティで保護されたのですか。  
 正常に作成されたときに、<xref:System.Security.SecureString>インスタンスよりも多くのデータ保護を提供する、<xref:System.String>します。 時間での文字のソースから文字列を作成するときに<xref:System.String>、メモリ内で複数の中間を作成できませんでは<xref:System.Security.SecureString>1 つのインスタンスを作成します。  ガベージ コレクションの<xref:System.String>オブジェクトは非確定的です。 さらに、そのメモリが固定されていないため、ガベージ コレクターは追加のコピーを作成<xref:System.String>値の移動とメモリを圧縮します。 これに対しに割り当てられた、メモリ、<xref:System.Security.SecureString>オブジェクトが固定されているし、そのメモリを呼び出すことによって解放できる、<xref:System.Security.SecureString.Dispose%2A>メソッド。  
  
 格納されているデータが、<xref:System.Security.SecureString>インスタンスが格納されているデータよりも安全、<xref:System.String>インスタンスのセキュリティで保護する方法の大きな制限がある、<xref:System.Security.SecureString>インスタンスがします。 次の設定があります。  
  
 プラットフォーム  
 Windows オペレーティング システムでの内容を<xref:System.Security.SecureString>インスタンスの内部文字配列が暗号化されます。 ただし、Api またはキー管理の問題がない、ためかどうかの暗号化は使用できませんのすべてのプラットフォームです。 このプラットフォームの依存関係のため<xref:System.Security.SecureString>非 Windows プラットフォーム上の内部記憶域では暗号化されません。 その他の手法は、追加の保護を提供するこれらのプラットフォームで使用されます。
  
 存続期間  
 場合でも、<xref:System.Security.SecureString>実装が暗号化を活用するためにプレーン テキストが割り当てられている、<xref:System.Security.SecureString>インスタンスは、さまざまなタイミングで公開する可能性があります。  
  
-   Windows がオペレーティング システム レベルでセキュリティで保護された文字列の実装を提供していませんので、.NET Framework はまだをプレーン テキスト形式が使用するには、セキュリティで保護された文字列値を変換します。  
  
-   たびにセキュリティで保護された文字列の値は、メソッドによって変更など<xref:System.Security.SecureString.AppendChar%2A>または<xref:System.Security.SecureString.RemoveAt%2A>、その必要がありますの暗号化を解除 (つまり、変換されるプレーン テキストに戻す)、変更され、再度暗号化されます。  
  
-   相互運用機能の呼び出しで、セキュリティで保護された文字列を使用する場合は、ANSI 文字列、Unicode 文字列、またはバイナリ文字列 (BSTR) に変換する必要があります。 詳細については、次を参照してください。、 [SecureString と相互運用機能](#interop)セクション。  
  
 対象の時間間隔、<xref:System.Security.SecureString>インスタンスの値が公開されている比較する短縮だけで、<xref:System.String>クラス。  
  
 ストレージ使用量と  
 一般的に、<xref:System.Security.SecureString>クラスは、保護されているまたは機密性を保持する文字列値を格納するメカニズムを定義します。 ただし、.NET Framework 自体の外部で使用状況のメカニズムをサポートする<xref:System.Security.SecureString>します。 つまり、セキュリティで保護された文字列をそのターゲットが認識できる使用可能な形式 (通常はクリア テキスト形式) に変換する必要があります、復号化し、変換は、ユーザー領域で発生する必要があります。  
  
 全体として、<xref:System.Security.SecureString>よりも安全<xref:System.String>機密性の高い文字列データの露出を制限するためです。 ただし、これらの文字列であり、まだしたプロセスまたはホスト コンピューター、プロセスのダンプ、またはユーザー表示可能なスワップ ファイルで実行されている悪意のあるプロセスなどの生のメモリにアクセスできる操作に公開する可能性があります。 使用する代わりに<xref:System.Security.SecureString>パスワード保護のため、推奨される代替手段は、プロセスの外部で格納されている資格情報を非透過ハンドルを使用します。  
  
 [ページのトップへ](#top)  
  
   
  
## Examples  
 次の例では、使用する方法、<xref:System.Security.SecureString>新しいプロセスを開始する資格情報として使用するためのユーザーのパスワードをセキュリティで保護します。  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Security.SecureString" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Security.SecureString" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコードの例では、既定値 (またはパラメーターなし)、新しいインスタンスを作成するコンス トラクター<xref:System.Security.SecureString>オブジェクト。 呼び出して、<xref:System.Security.SecureString.AppendChar%2A>文字の配列を追加するメソッド。  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 次の例では、作成、<xref:System.Security.SecureString>オブジェクトの値から、<xref:System.String>オブジェクト。  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">このインスタンスの値を暗号化または復号化するときにエラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">この操作は、このプラットフォームではサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
  <see cref="T:System.Char" /> オブジェクトの配列へのポインター。</param>
        <param name="length">新しいインスタンスに含める <paramref name="value" /> の要素の数。</param>
        <summary><see cref="T:System.Char" /> オブジェクトのサブ配列から <see cref="T:System.Security.SecureString" /> クラスの新しいインスタンスを初期化します。  
  
このコンストラクターは、CLS 準拠ではありません。 CLS 準拠の代わりとして <see cref="M:System.Security.SecureString.#ctor" /> を使用できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが新しいを初期化します<xref:System.Security.SecureString>オブジェクト内の文字の数を`value`で指定された`length`; のインスタンスの値が暗号化されます。  
  
 C# では、このコンス トラクターは、アンセーフ コードのコンテキストでのみ定義されます。  
  
   
  
## Examples  
 次の例では、新しいインスタンスを作成<xref:System.Security.SecureString>文字配列へのポインターをコンス トラクターに渡して、オブジェクト。  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> が 0 未満か、65,536 を超えています。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">この操作は、このプラットフォームではサポートされていません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">このセキュリティ文字列に追加される文字。</param>
        <summary>現在のセキュリティ文字列の末尾に、文字を 1 つ追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 あれば、このセキュリティ文字列の値が保護されている; は、実装、暗号化などの保護メカニズムを使用している場合`c`が追加されます。 セキュリティで保護された文字列の新しい値は再保護します。  
  
   
  
## Examples  
 例を次に示しますが、どのように<xref:System.Security.SecureString.AppendChar%2A>、 <xref:System.Security.SecureString.InsertAt%2A>、 <xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>と<xref:System.Security.SecureString.Clear%2A>メソッドの値に影響を<xref:System.Security.SecureString>オブジェクト。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 次の例で、<xref:System.Security.SecureString.AppendChar%2A>と<xref:System.Security.SecureString.RemoveAt%2A>メソッドは、パスワードの文字を収集するために使用できます。  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">このセキュリティ文字列は読み取り専用です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">この操作を実行すると、このセキュリティ文字列の長さが 65,536 文字を超えます。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のセキュリティ文字列の値を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このセキュリティ文字列の値を含むコンピューターのメモリをゼロに設定し、このセキュリティ文字列の値の長さが 0 に設定します。  
  
   
  
## Examples  
 例を次に示しますが、どのように<xref:System.Security.SecureString.AppendChar%2A>、 <xref:System.Security.SecureString.InsertAt%2A>、 <xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>と<xref:System.Security.SecureString.Clear%2A>メソッドの値に影響を<xref:System.Security.SecureString>オブジェクト。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">このセキュリティ文字列は読み取り専用です。</exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のセキュリティ文字列のコピーを作成します。</summary>
        <returns>このセキュリティ文字列の複製。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インスタンスの場合、<xref:System.Security.SecureString>は読み取り専用にマークされると、そのインスタンスのコピーができない読み取り専用です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Security.SecureString" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Dispose%2A>メソッドのこの値を含む割り当てられたメモリへのバイナリのゼロが書き込まれる<xref:System.Security.SecureString>オブジェクト、し、割り当てられたメモリを解放します。  
  
 詳細については、次を参照してください。[ガベージ コレクション](~/docs/standard/garbage-collection/index.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">パラメーター <paramref name="c" /> が挿入されるインデックス位置。</param>
        <param name="c">挿入する文字。</param>
        <summary>このセキュリティ文字列の指定したインデックス位置に文字を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インデックスが 0 から始まります。このセキュリティ文字列の最初の文字は、インデックス位置 0 です。  
  
 存在する場合は、セキュリティで保護された文字列の値が保護されている; は、実装、暗号化などの保護メカニズムを使用している場合`c`は、指定したインデックス位置に挿入し、新しい値を再保護します。 <xref:System.Security.SecureString.InsertAt%2A>メソッドと同じ結果を生成する、<xref:System.Security.SecureString.AppendChar%2A>場合は、セキュリティ保護された文字列の末尾に文字を挿入するメソッド、`index`パラメーターの<xref:System.Security.SecureString.InsertAt%2A>がこのインスタンスの長さに設定します。  
  
   
  
## Examples  
 例を次に示しますが、どのように<xref:System.Security.SecureString.AppendChar%2A>、 <xref:System.Security.SecureString.InsertAt%2A>、 <xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>と<xref:System.Security.SecureString.Clear%2A>メソッドの値に影響を<xref:System.Security.SecureString>オブジェクト。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">このセキュリティ文字列は読み取り専用です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さを超えています。  
  
または 
この操作を実行すると、このセキュリティ文字列の長さが 65,536 文字を超えます。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このセキュリティ文字列が読み取り専用としてマークされているかどうかを示します。</summary>
        <returns>このセキュリティ文字列が読み取り専用にマークされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インスタンスの後<xref:System.Security.SecureString>で読み取り専用にマーク、<xref:System.Security.SecureString.MakeReadOnly%2A>メソッドを呼び出そうとするインスタンスがスローされますの値を変更する、<xref:System.InvalidOperationException>します。 使用して、<xref:System.Security.SecureString.IsReadOnly%2A>メソッドをテストするかどうかを<xref:System.Security.SecureString>はそれを変更する前に読み取り専用です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のセキュリティ文字列内の文字数を取得します。</summary>
        <value>このセキュリティ文字列に含まれる <see cref="T:System.Char" /> オブジェクトの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Length%2A>プロパティの数を返します<xref:System.Char>このインスタンス内のオブジェクト、Unicode 文字数ではありません。 1 つ以上の Unicode 文字を表す場合があります<xref:System.Char>オブジェクト。  
  
 最大長を<xref:System.Security.SecureString>インスタンスが 65,536 文字。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このセキュリティ文字列のテキスト値を読み取り専用にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インスタンスのテキスト値を初期化、<xref:System.Security.SecureString>クラス、<xref:System.Security.SecureString.%23ctor%2A>コンス トラクターで値を変更し、 <xref:System.Security.SecureString.Clear%2A>、 <xref:System.Security.SecureString.RemoveAt%2A>、 <xref:System.Security.SecureString.SetAt%2A>、<xref:System.Security.SecureString.InsertAt%2A>と<xref:System.Security.SecureString.AppendChar%2A>メソッド。  
  
 使用して、最終的な変更を行った後、<xref:System.Security.SecureString.MakeReadOnly%2A>インスタンスの値を変更できないようにするメソッド (読み取り専用)。 読み取り専用とマークされる値と、さらにしようとする変更がスローされます、<xref:System.InvalidOperationException>します。  
  
 呼び出しの効果<xref:System.Security.SecureString.MakeReadOnly%2A>は永続的なので、<xref:System.Security.SecureString>を再度変更可能にするには、セキュリティで保護された文字列クラスの手段がありません。 使用して、<xref:System.Security.SecureString.IsReadOnly%2A>メソッドのインスタンスかどうかをテストする<xref:System.Security.SecureString>は読み取り専用です。  
  
   
  
## Examples  
 次の例で、<xref:System.Security.SecureString.AppendChar%2A>と<xref:System.Security.SecureString.RemoveAt%2A>メソッドは、パスワードの文字を収集するために使用できます。 パスワードが収集されると、読み取り専用にされます。  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">このセキュリティ文字列に含まれる文字のインデックス位置。</param>
        <summary>このセキュリティ文字列の指定されたインデックス位置にある文字を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インデックスが 0 から始まります。このインスタンスの最初の文字は、インデックス位置 0 です。  
  
 あれば、このセキュリティ文字列の値が保護されている; は、実装、暗号化などの保護メカニズムを使用している場合指定したインデックス位置にある文字が削除されます。新しい値を再保護します。  
  
   
  
## Examples  
 例を次に示しますが、どのように<xref:System.Security.SecureString.AppendChar%2A>、 <xref:System.Security.SecureString.InsertAt%2A>、 <xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>と<xref:System.Security.SecureString.Clear%2A>メソッドの値に影響を<xref:System.Security.SecureString>オブジェクト。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 次の例で、<xref:System.Security.SecureString.AppendChar%2A>と<xref:System.Security.SecureString.RemoveAt%2A>メソッドは、パスワードの文字を収集するために使用できます。  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">このセキュリティ文字列は読み取り専用です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さ以上です。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">このセキュリティ文字列に含まれる既存の文字のインデックス位置。</param>
        <param name="c">既存の文字を置換する文字。</param>
        <summary>指定されたインデックス位置にある既存の文字を別の文字に置き換えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インデックスが 0 から始まります。このインスタンスの最初の文字は、インデックス位置 0 です。  
  
 存在する場合は、セキュリティで保護された文字列の値が保護されている; は、実装、暗号化などの保護メカニズムを使用している場合`c` ; 指定したインデックス位置に割り当てられている新しい値は再保護します。  
  
   
  
## Examples  
 例を次に示しますが、どのように<xref:System.Security.SecureString.AppendChar%2A>、 <xref:System.Security.SecureString.InsertAt%2A>、 <xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>と<xref:System.Security.SecureString.Clear%2A>メソッドの値に影響を<xref:System.Security.SecureString>オブジェクト。  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
        <exception cref="T:System.InvalidOperationException">このセキュリティ文字列は読み取り専用です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さ以上です。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
      </Docs>
    </Member>
  </Members>
</Type>