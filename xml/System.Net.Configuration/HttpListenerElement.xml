<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ee07f6e7b74dae2549d6bab3dcdedf39366246a2" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48728826" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerElement sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type HttpListenerElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>構成ファイルの HttpListener 要素を表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスに対応して、 \<httpListener > 要素 (ネットワーク設定) の構成要素。 このクラスは、構成ファイルに格納できる情報にプログラムでアクセスを提供します。  
  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>プロパティを示す場合<xref:System.Net.HttpListener>をパーセントでエンコードされた値は変換され、その他の正規化の手順を実行、変換された URI ではなく生のエスケープ解除された URI を使用します。  
  
 ときに、<xref:System.Net.HttpListener>インスタンスを介して要求を受け取ると、`http.sys`により指定された URI 文字列のインスタンスを作成しますが、サービス`http.sys`、としてそれを公開、<xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType>プロパティ。  
  
 `http.sys`サービスは 2 つの要求 URI の文字列を公開します。  
  
-   生の URI  
  
-   変換された URI  
  
 生の URI は、 <xref:System.Uri?displayProperty=nameWithType> HTTP 要求の要求行で提供されます。  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 によって提供された生の URI`http.sys`上記のように、要求は"パス"/です。 これは、次の HTTP 動詞がネットワーク経由で送信した文字列を表します。  
  
 `http.sys`サービスは、HTTP 要求行で指定された URI を使用して、要求で提供される情報から変換された URI を作成しに、要求の配信元サーバーを決定する、ホスト ヘッダーを転送する必要があります。 これは、一連の登録済みの URI プレフィックスを使用して要求からの情報を比較することによって行います。 HTTP サーバー SDK のドキュメントとして変換されたこの URI を指す、 [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108)構造体。  
  
 登録済みの URI プレフィックスを持つ要求を比較できるようにするには、するには、要求の正規化をいくつかを実行する必要があります。 変換された URI 上のサンプルであるように。  
  
 `http://www.contoso.com/path/`  
  
 `http.sys`サービスの結合、<xref:System.Uri.Host%2A?displayProperty=nameWithType>プロパティの値と、変換された URI を作成する要求の行の文字列。 さらに、`http.sys`と<xref:System.Uri?displayProperty=nameWithType>クラスも、次の操作します。  
  
-   すべてのパーセントでエンコードされた値エスケープ解除します。  
  
-   Utf-16 文字表現に非 ASCII 文字をパーセントでエンコードに変換します。 Unicode の文字 (Unicode のエンコード %uxxxx 形式を使用) と、utf-8 と ANSI や DBCS 文字がサポートされていることに注意してください。  
  
-   パスの圧縮など、他の正規化の手順を実行します。  
  
 要求には、パーセントでエンコードされた値に使用されるエンコーディングに関する情報が含まれていない、以降は、パーセントでエンコードされた値を解析するだけで正しいエンコーディングを判断することはできません。  
  
 そのため`http.sys`プロセスを変更するための 2 つのレジストリ キーを提供します。  
  
|レジストリ キー|既定値|説明|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|0 の場合、 `http.sys` UTF エンコードの Url のみを受け入れます。<br /><br /> 0 以外の場合`http.sys`も要求で ANSI でエンコードされたまたは DBCS でエンコードされた Url を受け取ります。|  
|FavorUTF8|1|0 以外の場合`http.sys`最初をデコードする URL を utf-8 として; 変換に失敗したし、EnableNonUTF8 が 0 以外の場合と常に、Http.sys、ANSI または DBCS とデコードを試みます。<br /><br /> 0 の場合 (および EnableNonUTF8 が 0 以外)、`http.sys`を ANSI または DBCS; としてデコードする試行が成功しなかった、utf-8 変換を試みます。|  
  
 ときに<xref:System.Net.HttpListener>要求を受信から変換された URI を使用して`http.sys`への入力として、<xref:System.Net.HttpListenerRequest.Url%2A>プロパティ。  
  
 Uri の文字と数字以外の文字をサポートする必要があります。 例としては、次の URI は、お客様の顧客情報を取得するために使用番号「1/3812」。  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Uri (%2f) でパーセント エンコード スラッシュに注意してください。 これは、スラッシュ文字を表すデータとパス区切り記号ではなくこのケースであるため、必要に応じて。  
  
 Uri のコンス トラクターに文字列を渡すことは、次の URI につながります。  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 パスはセグメントに分割することで、次の要素になります。  
  
 `Customer('1`  
  
 `3812')`  
  
 これは、要求の送信元の目的ではありません。  
  
 場合、<xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>プロパティが false に設定し、ときに、<xref:System.Net.HttpListener>要求を受信から変換された URI ではなく生の URI を使用して`http.sys`への入力として、<xref:System.Net.HttpListenerRequest.Url%2A>プロパティ。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/index.md">ネットワーク設定スキーマ</related>
    <related type="Article" href="http://msdn.microsoft.com/library/62f121fd-3f2e-4033-bb39-48ae996bfbd9">&lt;httpListener&gt;要素 (ネットワーク設定)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListenerElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.Configuration.HttpListenerElement" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeouts As HttpListenerTimeoutsElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Configuration::HttpListenerTimeoutsElement ^ Timeouts { System::Net::Configuration::HttpListenerTimeoutsElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeouts : System.Net.Configuration.HttpListenerTimeoutsElement" Usage="System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpListener" /> オブジェクトで使用する既定のタイムアウト要素を取得します。</summary>
        <value>
          <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" /> を返します。  
  
<see cref="T:System.Net.HttpListener" /> オブジェクトが使用するタイムアウト要素です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnescapeRequestUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnescapeRequestUrl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UnescapeRequestUrl : bool" Usage="System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Net.HttpListener" /> が変換された URI ではなくエスケープされていない生の URI を使用するかどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Net.HttpListener" /> が変換された URI ではなくエスケープされていない生の URI を使用するかどうかを示すブール値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>プロパティを示す場合<xref:System.Net.HttpListener>をパーセントでエンコードされた値は変換され、その他の正規化の手順を実行、変換された URI ではなく生のエスケープ解除された URI を使用します。  
  
 ときに、<xref:System.Net.HttpListener>インスタンスを介して要求を受け取ると、`http.sys`により指定された URI 文字列のインスタンスを作成しますが、サービス`http.sys`、としてそれを公開、<xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType>プロパティ。  
  
 `http.sys`サービスは 2 つの要求 URI の文字列を公開します。  
  
-   生の URI  
  
-   変換された URI  
  
 生の URI は、 <xref:System.Uri?displayProperty=nameWithType> HTTP 要求の要求行で提供されます。  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 によって提供された生の URI`http.sys`上記のように、要求は"パス"/です。 これは、次の HTTP 動詞がネットワーク経由で送信した文字列を表します。  
  
 `http.sys`サービスは、HTTP 要求行で指定された URI を使用して、要求で提供される情報から変換された URI を作成しに、要求の配信元サーバーを決定する、ホスト ヘッダーを転送する必要があります。 これは、一連の登録済みの URI プレフィックスを使用して要求からの情報を比較することによって行います。 HTTP サーバー SDK のドキュメントとして変換されたこの URI を指す、 [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108)構造体。  
  
 登録済みの URI プレフィックスを持つ要求を比較できるようにするには、するには、要求の正規化をいくつかを実行する必要があります。 変換された URI 上のサンプルであるように。  
  
 `http://www.contoso.com/path/`  
  
 `http.sys`サービスの結合、<xref:System.Uri.Host%2A?displayProperty=nameWithType>プロパティの値と、変換された URI を作成する要求の行の文字列。 さらに、`http.sys`と<xref:System.Uri?displayProperty=nameWithType>クラスも、次の操作します。  
  
-   すべてのパーセントでエンコードされた値エスケープ解除します。  
  
-   Utf-16 文字表現に非 ASCII 文字をパーセントでエンコードに変換します。 Unicode の文字 (Unicode のエンコード %uxxxx 形式を使用) と、utf-8 と ANSI や DBCS 文字がサポートされていることに注意してください。  
  
-   パスの圧縮など、他の正規化の手順を実行します。  
  
 要求には、パーセントでエンコードされた値に使用されるエンコーディングに関する情報が含まれていない、以降は、パーセントでエンコードされた値を解析するだけで正しいエンコーディングを判断することはできません。  
  
 そのため`http.sys`プロセスを変更するための 2 つのレジストリ キーを提供します。  
  
|レジストリ キー|既定値|説明|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|0 の場合、 `http.sys` UTF エンコードの Url のみを受け入れます。<br /><br /> 0 以外の場合`http.sys`も要求で ANSI でエンコードされたまたは DBCS でエンコードされた Url を受け取ります。|  
|FavorUTF8|1|0 以外の場合`http.sys`最初をデコードする URL を utf-8 として; 変換に失敗したし、EnableNonUTF8 が 0 以外の場合と常に、Http.sys、ANSI または DBCS とデコードを試みます。<br /><br /> 0 の場合 (および EnableNonUTF8 が 0 以外)、`http.sys`を ANSI または DBCS; としてデコードする試行が成功しなかった、utf-8 変換を試みます。|  
  
 ときに<xref:System.Net.HttpListener>要求を受信から変換された URI を使用して`http.sys`への入力として、<xref:System.Net.HttpListenerRequest.Url%2A>プロパティ。  
  
 Uri の文字と数字以外の文字をサポートする必要があります。 例としては、次の URI は、お客様の顧客情報を取得するために使用番号「1/3812」。  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Uri (%2f) でパーセント エンコード スラッシュに注意してください。 これは、スラッシュ文字を表すデータとパス区切り記号ではなくこのケースであるため、必要に応じて。  
  
 Uri のコンス トラクターに文字列を渡すことは、次の URI につながります。  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 パスはセグメントに分割することで、次の要素になります。  
  
 `Customer('1`  
  
 `3812')`  
  
 これは、要求の送信元の目的ではありません。  
  
 場合、<xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>プロパティが false に設定し、ときに、<xref:System.Net.HttpListener>要求を受信から変換された URI ではなく生の URI を使用して`http.sys`への入力として、<xref:System.Net.HttpListenerRequest.Url%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/index.md">ネットワーク設定スキーマ</related>
        <related type="Article" href="http://msdn.microsoft.com/library/62f121fd-3f2e-4033-bb39-48ae996bfbd9">&lt;httpListener&gt;要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
  </Members>
</Type>