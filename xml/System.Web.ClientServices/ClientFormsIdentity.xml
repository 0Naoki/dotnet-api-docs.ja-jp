<Type Name="ClientFormsIdentity" FullName="System.Web.ClientServices.ClientFormsIdentity">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="54f7d5829c77d68988cff1dcb760367182714829" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530316" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClientFormsIdentity : IDisposable, System.Security.Principal.IIdentity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClientFormsIdentity extends System.Object implements class System.IDisposable, class System.Security.Principal.IIdentity" />
  <TypeSignature Language="DocId" Value="T:System.Web.ClientServices.ClientFormsIdentity" />
  <TypeSignature Language="VB.NET" Value="Public Class ClientFormsIdentity&#xA;Implements IDisposable, IIdentity" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientFormsIdentity : IDisposable, System::Security::Principal::IIdentity" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Principal.IIdentity</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>フォーム認証を使用してクライアント アプリケーション サービスに対して認証されたユーザー ID を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアント アプリケーション サービスの機能では、このクラスを使用して、認証されたユーザーを表します。 クライアント アプリケーション サービスとフォーム認証を使用するアプリケーションを構成するときに呼び出すことによってユーザーを認証することができます、 `static` <xref:System.Web.Security.Membership.ValidateUser%2A?displayProperty=nameWithType>メソッドです。 認証後、現在への参照を取得することができます<xref:System.Web.ClientServices.ClientFormsIdentity>を通じてインスタンス、<xref:System.Security.Principal.IPrincipal.Identity%2A>のプロパティ、<xref:System.Security.Principal.IPrincipal>を介して取得、 `static` <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>プロパティです。 詳細については、「[クライアント アプリケーション サービス](~/docs/framework/common-client-technologies/client-application-services.md)」を参照してください。  
  
 通常、アクセス、<xref:System.Web.ClientServices.ClientFormsIdentity>オブジェクトとして、<xref:System.Security.Principal.IIdentity>このクラスに直接依存関係を避けるために参照します。 チェックして、ユーザーが認証されるかどうかを決定できます、 <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=nameWithType> id のプロパティです。 ただし、windows の場合は、クライアント アプリケーション サービスではなく、ユーザーは認証可能性があります。 クライアント アプリケーション サービスのユーザーが認証されたかどうかを判断するのにはまたことを確認して、<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=nameWithType>プロパティの値は"ClientForms"です。  
  
 明示的な使用する必要があります<xref:System.Web.ClientServices.ClientFormsIdentity>呼び出しへの参照、<xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A>メソッドで、によって定義されていない、<xref:System.Security.Principal.IIdentity>インターフェイスです。  
  
   
  
## Examples  
 次のコード例では、このクラスを使用して、アプリケーションがオフライン状態になったときに、ユーザーを自動的に再検証する方法を示します。 この例では、<xref:System.Windows.Forms.CheckBox.CheckedChanged>イベント ハンドラーは、チェック ボックスの値に一致するオフラインの状態を更新します。 イベント ハンドラーが呼び出すことによってユーザーの再検証しようとした場合は、ユーザーがアプリケーションをオンライン状態を設定、<xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A>メソッドです。 ただし、認証サーバーが使用できない場合、イベント ハンドラーは、アプリケーションをオフラインの状態を返します。  
  
> [!NOTE]
>  <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> メソッドは便宜的なものに過ぎません。 このメソッドには戻り値がないため、再検証が失敗したかどうかを示すことはできません。 再検証は失敗することがあります。たとえば、サーバーでユーザーの資格情報が変更された場合などです。 この場合、サービスの呼び出しが失敗した後に、明示的にユーザーを検証するコードを含めることができます。 詳細については、Web 設定へのアクセス」セクションを参照してください。[チュートリアル: クライアント アプリケーション サービスを使用する](~/docs/framework/common-client-technologies/walkthrough-using-client-application-services.md)です。  
  
 [!code-csharp[ClientApplicationServices#315](~/samples/snippets/csharp/VS_Snippets_Winforms/ClientApplicationServices/CS/Class1.cs#315)]
 [!code-vb[ClientApplicationServices#315](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClientApplicationServices/VB/Class1.vb#315)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.Security.Membership.ValidateUser(System.String,System.String)" />
    <altmember cref="M:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser" />
    <altmember cref="P:System.Threading.Thread.CurrentPrincipal" />
    <altmember cref="T:System.Security.Principal.IPrincipal" />
    <altmember cref="P:System.Security.Principal.IPrincipal.Identity" />
    <altmember cref="T:System.Security.Principal.IIdentity" />
    <altmember cref="P:System.Security.Principal.IIdentity.IsAuthenticated" />
    <altmember cref="P:System.Web.ClientServices.ClientFormsIdentity.IsAuthenticated" />
    <altmember cref="P:System.Web.ClientServices.ClientFormsIdentity.AuthenticationType" />
    <altmember cref="M:System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider.Logout" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClientFormsIdentity (string name, string password, System.Web.Security.MembershipProvider provider, string authenticationType, bool isAuthenticated, System.Net.CookieContainer authenticationCookies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string password, class System.Web.Security.MembershipProvider provider, string authenticationType, bool isAuthenticated, class System.Net.CookieContainer authenticationCookies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.ClientServices.ClientFormsIdentity.#ctor(System.String,System.String,System.Web.Security.MembershipProvider,System.String,System.Boolean,System.Net.CookieContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, password As String, provider As MembershipProvider, authenticationType As String, isAuthenticated As Boolean, authenticationCookies As CookieContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClientFormsIdentity(System::String ^ name, System::String ^ password, System::Web::Security::MembershipProvider ^ provider, System::String ^ authenticationType, bool isAuthenticated, System::Net::CookieContainer ^ authenticationCookies);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="provider" Type="System.Web.Security.MembershipProvider" />
        <Parameter Name="authenticationType" Type="System.String" />
        <Parameter Name="isAuthenticated" Type="System.Boolean" />
        <Parameter Name="authenticationCookies" Type="System.Net.CookieContainer" />
      </Parameters>
      <Docs>
        <param name="name">認証済みユーザーの名前。</param>
        <param name="password">認証済みユーザーのパスワード。</param>
        <param name="provider">ユーザーの認証に使用したメンバーシップ プロバイダー。</param>
        <param name="authenticationType">使用した認証の種類。</param>
        <param name="isAuthenticated">
          ユーザーが認証されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="authenticationCookies">認証サーバーから取得したクッキー。</param>
        <summary>
          <see cref="T:System.Web.ClientServices.ClientFormsIdentity" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationCookies">
      <MemberSignature Language="C#" Value="public System.Net.CookieContainer AuthenticationCookies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.CookieContainer AuthenticationCookies" />
      <MemberSignature Language="DocId" Value="P:System.Web.ClientServices.ClientFormsIdentity.AuthenticationCookies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthenticationCookies As CookieContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::CookieContainer ^ AuthenticationCookies { System::Net::CookieContainer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.CookieContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認証サーバーから取得したクッキーのコレクションを取得します。</summary>
        <value>認証サーバーから取得したクッキー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、アプリケーション コードで使用するためのものではありません。 このプロパティを介して取得された cookie を変更することはできません明確と有用な情報がないです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationType">
      <MemberSignature Language="C#" Value="public string AuthenticationType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AuthenticationType" />
      <MemberSignature Language="DocId" Value="P:System.Web.ClientServices.ClientFormsIdentity.AuthenticationType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthenticationType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AuthenticationType { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーの認証に使用した認証の種類を取得します。</summary>
        <value>ユーザーの認証に使用した認証の種類。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、アクセス、<xref:System.Web.ClientServices.ClientFormsIdentity>オブジェクトとして、<xref:System.Security.Principal.IIdentity>このクラスに直接依存関係を避けるために参照します。 チェックして、ユーザーが認証されるかどうかを決定できます、 <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=nameWithType> id のプロパティです。 ただし、windows の場合は、クライアント アプリケーション サービスではなく、ユーザーは認証可能性があります。 クライアント アプリケーション サービスのユーザーが認証されたかどうかを判断するのにはまたことを確認して、<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=nameWithType>プロパティの値は"ClientForms"です。 詳細については、次を参照してください。、<xref:System.Web.ClientServices.ClientFormsIdentity>クラスの概要です。  
  
   
  
## Examples  
 次のコード例を使用してこのプロパティを使用する方法を示します、<xref:System.Security.Principal.IIdentity>クライアント アプリケーション サービスのユーザーが現在認証されているかどうかを決定する参照。 この例では、アプリケーションが、既定の構成、ユーザーは、もう一度認証 cookie 期限が切れたときにログインする必要はありません。 それ以外の場合、<xref:System.Net.WebException>ユーザー ログインの有効期限が切れている可能性があります。 詳細については、「 [How to: Configure Client Application Services](~/docs/framework/common-client-technologies/how-to-configure-client-application-services.md)」を参照してください。  
  
 [!code-csharp[ClientApplicationServices#312](~/samples/snippets/csharp/VS_Snippets_Winforms/ClientApplicationServices/CS/Class1.cs#312)]
 [!code-vb[ClientApplicationServices#312](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClientApplicationServices/VB/Class1.vb#312)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Principal.IIdentity" />
        <altmember cref="P:System.Security.Principal.IIdentity.IsAuthenticated" />
        <altmember cref="P:System.Security.Principal.IIdentity.AuthenticationType" />
        <altmember cref="P:System.Web.ClientServices.ClientFormsIdentity.IsAuthenticated" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.ClientServices.ClientFormsIdentity" /> で使用したリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.ClientServices.ClientFormsIdentity.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.ClientServices.ClientFormsIdentity" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> を使い終わったら <xref:System.Web.ClientServices.ClientFormsIdentity> を呼び出します。 <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> メソッドによって、<xref:System.Web.ClientServices.ClientFormsIdentity> は使用不可の状態になります。 呼び出した後<xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A>へのすべての参照を解放する必要があります、<xref:System.Web.ClientServices.ClientFormsIdentity>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Web.ClientServices.ClientFormsIdentity>占有されていた。 詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。  
  
> [!NOTE]
>  <xref:System.Web.ClientServices.ClientFormsIdentity.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.Web.ClientServices.ClientFormsIdentity> を呼び出してください。 そうしないと、ガベージ コレクターが <xref:System.Web.ClientServices.ClientFormsIdentity> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.ClientServices.ClientFormsIdentity.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Web.ClientServices.ClientFormsIdentity" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッドです。 `Dispose()` プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A> 呼び出す`Dispose`で`disposing`'éý'`false`です。  
  
 ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放します。 この<xref:System.Web.ClientServices.ClientFormsIdentity>参照します。 このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。 オーバーライドする場合<see langword="Dispose(Boolean)" />既に破棄されているを以前の呼び出しでオブジェクトを参照しないように注意する<see langword="Dispose" />です。 実装する方法の詳細についての<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。  
  
 詳細については<see langword="Dispose" />と<see cref="M:System.Object.Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Web.ClientServices.ClientFormsIdentity.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが認証されているかどうかを示す値を取得します。</summary>
        <value>
          ユーザーが認証されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、アクセス、<xref:System.Web.ClientServices.ClientFormsIdentity>オブジェクトとして、<xref:System.Security.Principal.IIdentity>このクラスに直接依存関係を避けるために参照します。 チェックして、ユーザーが認証されるかどうかを決定できます、 <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A?displayProperty=nameWithType> id のプロパティです。 ただし、windows の場合は、クライアント アプリケーション サービスではなく、ユーザーは認証可能性があります。 クライアント アプリケーション サービスのユーザーが認証されたかどうかを判断するのにはまたことを確認して、<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=nameWithType>プロパティの値は"ClientForms"です。 詳細については、次を参照してください。、<xref:System.Web.ClientServices.ClientFormsIdentity>クラスの概要です。  
  
   
  
## Examples  
 次のコード例を使用してこのプロパティを使用する方法を示します、<xref:System.Security.Principal.IIdentity>クライアント アプリケーション サービスのユーザーが現在認証されているかどうかを決定する参照。 この例では、アプリケーションが、既定の構成、ユーザーは、もう一度認証 cookie 期限が切れたときにログインする必要はありません。 それ以外の場合、<xref:System.Net.WebException>ユーザー ログインの有効期限が切れている可能性があります。 詳細については、「 [How to: Configure Client Application Services](~/docs/framework/common-client-technologies/how-to-configure-client-application-services.md)」を参照してください。  
  
 [!code-csharp[ClientApplicationServices#312](~/samples/snippets/csharp/VS_Snippets_Winforms/ClientApplicationServices/CS/Class1.cs#312)]
 [!code-vb[ClientApplicationServices#312](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClientApplicationServices/VB/Class1.vb#312)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentPrincipal" />
        <altmember cref="T:System.Security.Principal.IPrincipal" />
        <altmember cref="P:System.Security.Principal.IPrincipal.Identity" />
        <altmember cref="T:System.Security.Principal.IIdentity" />
        <altmember cref="P:System.Security.Principal.IIdentity.IsAuthenticated" />
        <altmember cref="P:System.Security.Principal.IIdentity.AuthenticationType" />
        <altmember cref="P:System.Web.ClientServices.ClientFormsIdentity.AuthenticationType" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.ClientServices.ClientFormsIdentity.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーの名前を取得します。</summary>
        <value>ユーザーの名前。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.Security.MembershipProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Security.MembershipProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.ClientServices.ClientFormsIdentity.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As MembershipProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Security::MembershipProvider ^ Provider { System::Web::Security::MembershipProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーの認証に使用したメンバーシップ プロバイダーを取得します。</summary>
        <value>ユーザーの認証に使用したメンバーシップ プロバイダー。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RevalidateUser">
      <MemberSignature Language="C#" Value="public void RevalidateUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RevalidateUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser" />
      <MemberSignature Language="VB.NET" Value="Public Sub RevalidateUser ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RevalidateUser();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>キャッシュされた資格情報を使用してユーザーを自動的に認証します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 フォーム認証を使用して、現在のユーザーを検証するときに、<xref:System.Web.ClientServices.ClientFormsIdentity>クラスは、アプリケーションが実行されている限り、ユーザーの資格情報を格納します。 ただし、認証 cookie の有効期限が切れるまで、ユーザーは認証のみです。 Cookie が経過すると、リモート ロールまたは Web 設定サービスにアクセスするには、ユーザーを再検証する必要があります。 使用することができます、**サービスの詳細設定**」の説明に従って、ユーザーを自動的に再検証するアプリケーションの構成 ダイアログ ボックス[する方法: クライアント アプリケーション サービスを構成する](~/docs/framework/common-client-technologies/how-to-configure-client-application-services.md)です。 ただし、cookie の有効期限を優先するアプリケーションを構成する場合は、することができますプログラムでユーザーの再検証を呼び出して、<xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A>メソッドです。 このメソッドもオフライン モードからオンライン モードに切り替える際、アプリケーションがシャット ダウンされたため間、オフラインです。  
  
> [!NOTE]
>  <xref:System.Web.ClientServices.ClientFormsIdentity.RevalidateUser%2A> メソッドは便宜的なものに過ぎません。 このメソッドには戻り値がないため、再検証が失敗したかどうかを示すことはできません。 再検証は失敗することがあります。たとえば、サーバーでユーザーの資格情報が変更された場合などです。 この場合、サービスの呼び出しが失敗した後に、明示的にユーザーを検証するコードを含めることができます。 詳細については、Web 設定へのアクセス」セクションを参照してください。[チュートリアル: クライアント アプリケーション サービスを使用する](~/docs/framework/common-client-technologies/walkthrough-using-client-application-services.md)です。  
  
   
  
## Examples  
 次のコード例では、このメソッドを使用して、アプリケーションがオフライン状態になったときに、ユーザーを自動的に再検証する方法を示します。 この例では、<xref:System.Windows.Forms.CheckBox.CheckedChanged>イベント ハンドラーは、チェック ボックスの値に一致するオフラインの状態を更新します。 ユーザーは、アプリケーションをオンライン状態を設定、イベント ハンドラーは、ユーザーの再検証しようとします。 ただし、認証サーバーが使用できない場合、イベント ハンドラーは、アプリケーションをオフラインの状態を返します。  
  
 [!code-csharp[ClientApplicationServices#315](~/samples/snippets/csharp/VS_Snippets_Winforms/ClientApplicationServices/CS/Class1.cs#315)]
 [!code-vb[ClientApplicationServices#315](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClientApplicationServices/VB/Class1.vb#315)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.ClientServices.ConnectivityStatus" />
        <altmember cref="P:System.Web.ClientServices.ConnectivityStatus.IsOffline" />
      </Docs>
    </Member>
  </Members>
</Type>