<Type Name="IDictionary&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b9d3feaa0077ec6041422e5dc07ac39d5e6bc002" /><Meta Name="ms.sourcegitcommit" Value="a22d0855bbf24d893f43605f8b7e3a44bd9551a5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70339071" /></Metadata><TypeSignature Language="C#" Value="public interface IDictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDictionary`2&lt;TKey, TValue&gt; implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IDictionary`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDictionary(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public interface class IDictionary : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;" />
  <TypeSignature Language="F#" Value="type IDictionary&lt;'Key, 'Value&gt; = interface&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
    <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
    <summary>キーと値のペアのジェネリック コレクションを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IDictionary%602>インターフェイスは、キーと値のペアのジェネリックコレクションの基本インターフェイスです。  
  
 各要素は、 <xref:System.Collections.Generic.KeyValuePair%602>オブジェクトに格納されているキーと値のペアです。  
  
 各ペアには一意のキーが必要です。 実装は、にすることが`key`許可さ`null`れているかどうかによって異なります。 値はにする`null`ことができ、一意である必要はありません。 インターフェイス<xref:System.Collections.Generic.IDictionary%602>は、含まれているキーと値を列挙することを許可しますが、特定の並べ替え順序を意味しません。  
  
 C#言語`foreach`の`For Each`ステートメントC++(Visual Basic では) は、コレクション内の要素の型のオブジェクトを返します。 `for each` の各要素<xref:System.Collections.Generic.IDictionary%602>はキーと値のペアであるため、要素の型はキーの型でも、値の型でもありません。 代わりに、要素の型は<xref:System.Collections.Generic.KeyValuePair%602>です。 次に例を示します。  
  
 [!code-cpp[Generic.IDictionary#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source2.cpp#11)]
 [!code-csharp[Generic.IDictionary#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source2.cs#11)]
 [!code-vb[Generic.IDictionary#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source2.vb#11)]  
  
 `foreach`ステートメントは、列挙子のラッパーであり、コレクションへの書き込みではなく読み取りのみが許可されます。  
  
> [!NOTE]
>  キーを継承してその動作を変更できるため、 <xref:System.Type.Equals%2A>メソッドを使用して比較することで、それらの絶対一意性を保証することはできません。  
  
   
  
## Examples  
 次のコード例では、 <xref:System.Collections.Generic.Dictionary%602>文字列キーを使用して空の文字列を作成し<xref:System.Collections.Generic.IDictionary%602> 、インターフェイスを介してその文字列にアクセスします。  
  
 このコード例では<xref:System.Collections.Generic.IDictionary%602.Add%2A> 、メソッドを使用していくつかの要素を追加します。 この例では、 <xref:System.Collections.Generic.IDictionary%602.Add%2A>重複する<xref:System.ArgumentException>キーを追加しようとしたときに、メソッドがスローすることを示しています。  
  
 この例では値を取得するために<xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティ (C# のインデクサー) を使用して、要求されたキーが存在しない場合には例外<xref:System.Collections.Generic.KeyNotFoundException>が投げられることとキーと関連付けされた値を置き換えることができることを示しています。  
  
 この例では、プログラムが<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>ディクショナリに含まれていないキー値を試す必要がある場合に、値を取得するためのより効率的な方法とし<xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A>てメソッドを使用する方法、およびメソッドを使用してキーが存在<xref:System.Collections.Generic.IDictionary%602.Add%2A>するかどうかをテストする方法を示します。メソッド。  
  
 最後に、この例では、ディクショナリのキーと値を列挙する方法と、 <xref:System.Collections.Generic.IDictionary%602.Values%2A>プロパティを使用して値を列挙する方法を示します。  
  
 [!code-cpp[Generic.IDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#1)]
 [!code-csharp[Generic.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>実装するクラスには、キーを比較するための手段が必要です。</para></block>
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * 'Value -&gt; unit" Usage="iDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key">追加する要素のキーとして使用するオブジェクト。</param>
        <param name="value">追加する要素の値として使用するオブジェクト。</param>
        <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 また、ディクショナリに存在<xref:System.Collections.Generic.IDictionary%602.Item%2A>しないキーの値を設定することによって、プロパティを使用して新しい要素を追加することC#も`myCollection("myNonexistentKey") = myValue`できます。たとえば、 `myCollection["myNonexistentKey"] = myValue` (Visual Basic の) のようになります。 ただし、指定したキーがディクショナリに既に存在する場合<xref:System.Collections.Generic.IDictionary%602.Item%2A>は、プロパティを設定すると古い値が上書きされます。 これに対して<xref:System.Collections.Generic.IDictionary%602.Add%2A> 、メソッドは既存の要素を変更しません。  
  
 実装は、オブジェクトが等しいかどうかを判断する方法によって異なります。たとえば<xref:System.Collections.Generic.List%601> 、クラスはを<xref:System.Collections.Generic.Dictionary%602>使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>しますが、クラスでは、キーの<xref:System.Collections.Generic.IComparer%601>比較に使用する実装をユーザーが指定できます。  
  
 実装は、にすることが`key`許可さ`null`れているかどうかによって異なります。  
  
   
  
## Examples  
 次のコード例では、 <xref:System.Collections.Generic.Dictionary%602>整数キーを使用して空の文字列を作成し<xref:System.Collections.Generic.IDictionary%602> 、インターフェイスを介してそれにアクセスします。 このコード例では<xref:System.Collections.Generic.IDictionary%602.Add%2A> 、メソッドを使用していくつかの要素を追加します。 例では重複するキーを追加しようとしたとき、<xref:System.Collections.Generic.IDictionary%602.Add%2A>メソッドが、例外<xref:System.ArgumentException>を投げることを示しています。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 以下を参照してください。<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>  
  
 [!code-cpp[Generic.IDictionary#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#2)]
 [!code-csharp[Generic.IDictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#2)]
 [!code-vb[Generic.IDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.IDictionary`2" /> に既に存在します。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IDictionary`2" /> は読み取り専用です。</exception>
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsKey(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool" Usage="iDictionary.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Collections.Generic.IDictionary`2" /> 内で検索されるキー。</param>
        <summary>指定したキーの要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> に格納されているかどうかを確認します。</summary>
        <returns>指定したキーを持つ要素を <see langword="true" /> が保持している場合は <see cref="T:System.Collections.Generic.IDictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実装は、オブジェクトが等しいかどうかを判断する方法によって異なります。たとえば<xref:System.Collections.Generic.List%601> 、クラスはを<xref:System.Collections.Generic.Dictionary%602>使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>しますが、クラスでは、キーの<xref:System.Collections.Generic.IComparer%601>比較に使用する実装をユーザーが指定できます。  
  
 実装は、にすることが`key`許可さ`null`れているかどうかによって異なります。  
  
   
  
## Examples  
 メソッドを使用<xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A>して、 <xref:System.Collections.Generic.IDictionary%602.Add%2A>メソッドを呼び出す前にキーが存在するかどうかをテストする方法を次のコード例に示します。 また、メソッドの<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>使用方法も示しています。これは、プログラムがディクショナリに含まれていないキー値を頻繁に試行する場合に、より効率的に値を取得する方法です。 最後に、プロパティ (の<xref:System.Collections.Generic.IDictionary%602.Item%2A> C#インデクサー) を使用して項目を挿入する方法を示します。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 以下を参照してください。<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>  
  
 [!code-cpp[Generic.IDictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#6)]
 [!code-csharp[Generic.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#6)]
 [!code-vb[Generic.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#6)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Value with get, set" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">取得または設定する要素のキー。</param>
        <summary>指定したキーを持つ要素を取得または設定します。</summary>
        <value>指定したキーを持つ要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、 `myCollection[key]` (`myCollection(key)` Visual Basic で) という構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。  
  
 また、ディクショナリに存在<xref:System.Collections.Generic.IDictionary%602.Item%2A>しないキーの値を設定することによって、プロパティを使用して新しい要素を追加することC#も`myCollection("myNonexistentKey") = myValue`できます。たとえば、 `myCollection["myNonexistentKey"] = myValue` (Visual Basic の) のようになります。 ただし、指定したキーがディクショナリに既に存在する場合<xref:System.Collections.Generic.IDictionary%602.Item%2A>は、プロパティを設定すると古い値が上書きされます。 これに対して<xref:System.Collections.Generic.IDictionary%602.Add%2A> 、メソッドは既存の要素を変更しません。  
  
 実装は、オブジェクトが等しいかどうかを判断する方法によって異なります。たとえば<xref:System.Collections.Generic.List%601> 、クラスはを<xref:System.Collections.Generic.Dictionary%602>使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>しますが、クラスでは、キーの<xref:System.Collections.Generic.IComparer%601>比較に使用する実装をユーザーが指定できます。  
  
 このC#言語では[](~/docs/csharp/language-reference/keywords/this.md) 、 <xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティを実装する代わりに、this キーワードを使用してインデクサーを定義します。 Visual Basic は、<xref:System.Collections.Generic.IDictionary%602.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。  
  
 実装は、にすることが`key`許可さ`null`れているかどうかによって異なります。  
  
   
  
## Examples  
 次のコード例では<xref:System.Collections.Generic.IDictionary%602.Item%2A> 、プロパティ (のC#インデクサー) を使用して値を取得<xref:System.Collections.Generic.KeyNotFoundException>します。これは、要求されたキーが存在しない場合にがスローされ、キーに関連付けられている値を置き換えることができることを示しています。  
  
 また、この例では、プログラム<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>がディクショナリに含まれていないキー値を試す必要がある場合に、より効率的に値を取得する方法として、メソッドを使用する方法も示しています。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 以下を参照してください。<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>  
  
 [!code-cpp[Generic.IDictionary#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#3)]
 [!code-csharp[Generic.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#3)]
 [!code-vb[Generic.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#3)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティは取得されますが、<paramref name="key" /> が見つかりません。</exception>
        <exception cref="T:System.NotSupportedException">このプロパティが設定されていますが、<see cref="T:System.Collections.Generic.IDictionary`2" /> が読み取り専用です。</exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TKey&gt; ^ Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.ICollection&lt;'Key&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
        <value><see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返される<xref:System.Collections.Generic.ICollection%601>のキーの順序は指定されていませんが、 <xref:System.Collections.Generic.IDictionary%602.Values%2A>プロパティによって<xref:System.Collections.Generic.ICollection%601>返される内の対応する値と同じ順序であることが保証されます。  
  
   
  
## Examples  
 次のコード例は、プロパティを使用して、 <xref:System.Collections.Generic.IDictionary%602.Keys%2A>キーだけを列挙する方法を示しています。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 以下を参照してください。<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>  
  
 [!code-cpp[Generic.IDictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#9)]
 [!code-csharp[Generic.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#9)]
 [!code-vb[Generic.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool" Usage="iDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">削除する要素のキー。</param>
        <summary>指定したキーを持つ要素を <see cref="T:System.Collections.Generic.IDictionary`2" /> から削除します。</summary>
        <returns>要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、元の <see cref="T:System.Collections.Generic.IDictionary`2" /> で <paramref name="key" /> が見つからなかった場合にも <see langword="false" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実装は、オブジェクトが等しいかどうかを判断する方法によって異なります。たとえば<xref:System.Collections.Generic.List%601> 、クラスはを<xref:System.Collections.Generic.Dictionary%602>使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>しますが、クラスでは、キーの<xref:System.Collections.Generic.IComparer%601>比較に使用する実装をユーザーが指定できます。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.IDictionary%602.Remove%2A>メソッドを使用してディクショナリからキーと値のペアを削除する方法を示しています。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 以下を参照してください。<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>  
  
 [!code-cpp[Generic.IDictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#10)]
 [!code-csharp[Generic.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#10)]
 [!code-vb[Generic.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IDictionary`2" /> は読み取り専用です。</exception>
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key * 'Value -&gt; bool" Usage="iDictionary.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">値を取得する対象のキー。</param>
        <param name="value">このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定したキーに関連付けられている値を取得します。</summary>
        <returns>指定したキーを持つ要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトに格納されている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、 <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A>メソッド<xref:System.Collections.Generic.IDictionary%602.Item%2A>とプロパティの機能を組み合わせたものです。  
  
 キーが見つからない場合`value` 、パラメーターは、型`TValue`の適切な既定値を取得します。たとえば、整数型の場合はゼロ (0 `false` )、ブール型`null`の場合は、参照型の場合はです。  
  
   
  
## Examples  
 この例では、 <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>メソッドを使用して値を取得する方法を示します。 プログラムがディクショナリに含まれていないキー値を頻繁に試行<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>する場合、メソッドは、 <xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティ (のC#インデクサー) を使用するよりも効率的です。この場合、存在しないキーを取得しようとすると例外がスローされます。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 以下を参照してください。<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>  
  
 [!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
 [!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
 [!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TValue&gt; ^ Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.ICollection&lt;'Value&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
        <value><see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返される<xref:System.Collections.Generic.ICollection%601>の値の順序は指定されていませんが、 <xref:System.Collections.Generic.IDictionary%602.Keys%2A>プロパティによって<xref:System.Collections.Generic.ICollection%601>返される内の対応するキーと同じ順序であることが保証されます。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.IDictionary%602.Values%2A>プロパティを使用してのみ値を列挙する方法を示しています。  
  
 このコードは、コンパイルして実行できる大きな例の一部です。 以下を参照してください。<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>  
  
 [!code-cpp[Generic.IDictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#8)]
 [!code-csharp[Generic.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#8)]
 [!code-vb[Generic.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
  </Members>
</Type>
