<Type Name="IDictionary&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="36bc19fcec582cbbc2b76d76ec94cd2c8db509f5" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37701832" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDictionary`2&lt;TKey, TValue&gt; implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IDictionary`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDictionary(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public interface class IDictionary : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;" />
  <TypeSignature Language="F#" Value="type IDictionary&lt;'Key, 'Value&gt; = interface&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">
      <span data-ttu-id="14cdc-101">ディクショナリ内のキーの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="14cdc-101">The type of keys in the dictionary.</span>
      </span>
    </typeparam>
    <typeparam name="TValue">
      <span data-ttu-id="14cdc-102">ディクショナリ内の値の型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="14cdc-102">The type of values in the dictionary.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="14cdc-103">キーと値のペアのジェネリック コレクションを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="14cdc-103">Represents a generic collection of key/value pairs.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14cdc-104"><xref:System.Collections.Generic.IDictionary%602>インターフェイスはキー/値ペアのジェネリック コレクションに対する基本インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="14cdc-104">The <xref:System.Collections.Generic.IDictionary%602> interface is the base interface for generic collections of key/value pairs.</span></span>  
  
 <span data-ttu-id="14cdc-105">各要素に格納されているキー/値ペアは、<xref:System.Collections.Generic.KeyValuePair%602>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14cdc-105">Each element is a key/value pair stored in a <xref:System.Collections.Generic.KeyValuePair%602> object.</span></span>  
  
 <span data-ttu-id="14cdc-106">各ペアには、一意キーを持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="14cdc-106">Each pair must have a unique key.</span></span> <span data-ttu-id="14cdc-107">実装できるかどうかによって異なります`key`する`null`します。</span><span class="sxs-lookup"><span data-stu-id="14cdc-107">Implementations can vary in whether they allow `key` to be `null`.</span></span> <span data-ttu-id="14cdc-108">値を指定できます`null`が一意であるとします。</span><span class="sxs-lookup"><span data-stu-id="14cdc-108">The value can be `null` and does not have to be unique.</span></span> <span data-ttu-id="14cdc-109"><xref:System.Collections.Generic.IDictionary%602>インターフェイスにより、格納されているキーと値を列挙するが、特定の並べ替え順序は意味しません。</span><span class="sxs-lookup"><span data-stu-id="14cdc-109">The <xref:System.Collections.Generic.IDictionary%602> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</span></span>  
  
 <span data-ttu-id="14cdc-110">`foreach` C# 言語のステートメント (`For Each` Visual basic で`for each`C++ で)、コレクション内の要素の型のオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="14cdc-110">The `foreach` statement of the C# language (`For Each` in Visual Basic, `for each` in C++) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="14cdc-111">以降の各要素、<xref:System.Collections.Generic.IDictionary%602>キー/値のペアは、要素の型がないと、キーの型または値の型。</span><span class="sxs-lookup"><span data-stu-id="14cdc-111">Since each element of the <xref:System.Collections.Generic.IDictionary%602> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="14cdc-112">要素の型は、代わりに、<xref:System.Collections.Generic.KeyValuePair%602>します。</span><span class="sxs-lookup"><span data-stu-id="14cdc-112">Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>.</span></span> <span data-ttu-id="14cdc-113">例:</span><span class="sxs-lookup"><span data-stu-id="14cdc-113">For example:</span></span>  
  
 [!code-cpp[Generic.IDictionary#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source2.cpp#11)]
 [!code-csharp[Generic.IDictionary#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source2.cs#11)]
 [!code-vb[Generic.IDictionary#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source2.vb#11)]  
  
 <span data-ttu-id="14cdc-114">`foreach`ステートメントは、コレクションを記述しないからの読み取りのみを許可する列挙子のラッパーです。</span><span class="sxs-lookup"><span data-stu-id="14cdc-114">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="14cdc-115">キーを継承する、その動作が変更された、絶対の一意性を保証できませんを使用する比較であるため、<xref:System.Type.Equals%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="14cdc-115">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14cdc-116">次のコード例は、空を作成します。 <xref:System.Collections.Generic.Dictionary%602> 、文字列の文字列を使用して、キーとそれにアクセスする、<xref:System.Collections.Generic.IDictionary%602>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="14cdc-116">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with string keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span>  
  
 <span data-ttu-id="14cdc-117">コード例では、<xref:System.Collections.Generic.IDictionary%602.Add%2A>メソッドをいくつかの要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="14cdc-117">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="14cdc-118">例を示しますが、<xref:System.Collections.Generic.IDictionary%602.Add%2A>メソッドがスローされます<xref:System.ArgumentException>重複するキーを追加しようとしています。</span><span class="sxs-lookup"><span data-stu-id="14cdc-118">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="14cdc-119">この例では、<xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティ (c# のインデクサー) を示す値を取得する、<xref:System.Collections.Generic.KeyNotFoundException>要求されたキーが存在しないと置き換えることができます、値がキーに関連付けられていることを示す場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="14cdc-119">The example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="14cdc-120">例では、使用する方法を示します、<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>メソッドをより効率的な場合は、プログラムは多くの場合、キーの値を使用する方法と、辞書にないを試みる必要があります値を取得する方法として、 <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> を呼び出す前に、キーが存在するかどうかをテストするメソッド<xref:System.Collections.Generic.IDictionary%602.Add%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="14cdc-120">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span>  
  
 <span data-ttu-id="14cdc-121">最後に、例では、キーと、ディクショナリ内の値を列挙する方法を使用して単独の値を列挙する方法、<xref:System.Collections.Generic.IDictionary%602.Values%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="14cdc-121">Finally, the example shows how to enumerate the keys and values in the dictionary, and how to enumerate the values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 [!code-cpp[Generic.IDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#1)]
 [!code-csharp[Generic.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="14cdc-122">
        <para>実装するクラスには、キーを比較するための手段が必要です。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="14cdc-122">
          <para>The implementing class must have a means to compare keys.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * 'Value -&gt; unit" Usage="iDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14cdc-123">追加する要素のキーとして使用するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-123">The object to use as the key of the element to add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="14cdc-124">追加する要素の値として使用するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-124">The object to use as the value of the element to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14cdc-125">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-125">Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14cdc-126">使用することも、<xref:System.Collections.Generic.IDictionary%602.Item%2A>ディクショナリ内に存在しないキーの値を設定して、新しい要素を追加するプロパティなど、 `myCollection["myNonexistentKey"] = myValue` (C#) (`myCollection("myNonexistentKey") = myValue` Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="14cdc-126">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="14cdc-127">ただし、ディクショナリで指定したキーが既に存在する場合は、設定、<xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティには、古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="14cdc-127">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="14cdc-128">これに対し、<xref:System.Collections.Generic.IDictionary%602.Add%2A>メソッドでは、既存の要素は変更しません。</span><span class="sxs-lookup"><span data-stu-id="14cdc-128">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="14cdc-129">オブジェクトが等しいかどうかを判断する方法で実装が異なりますたとえば、<xref:System.Collections.Generic.List%601>クラスで使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>であるのに対し、<xref:System.Collections.Generic.Dictionary%602>クラスでは、ユーザーを指定できます、<xref:System.Collections.Generic.IComparer%601>キーの比較に使用する実装。</span><span class="sxs-lookup"><span data-stu-id="14cdc-129">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="14cdc-130">実装できるかどうかによって異なります`key`する`null`します。</span><span class="sxs-lookup"><span data-stu-id="14cdc-130">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14cdc-131">次のコード例は、空を作成します。<xref:System.Collections.Generic.Dictionary%602>の文字列、整数キーでは、とにアクセスして、<xref:System.Collections.Generic.IDictionary%602>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="14cdc-131">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with integer keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span> <span data-ttu-id="14cdc-132">コード例では、<xref:System.Collections.Generic.IDictionary%602.Add%2A>メソッドをいくつかの要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="14cdc-132">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="14cdc-133">例を示しますが、<xref:System.Collections.Generic.IDictionary%602.Add%2A>メソッドがスローされます、<xref:System.ArgumentException>重複するキーを追加しようとしています。</span><span class="sxs-lookup"><span data-stu-id="14cdc-133">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="14cdc-134">このコードをコンパイルして実行できる例の一部です。</span><span class="sxs-lookup"><span data-stu-id="14cdc-134">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="14cdc-135">「<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14cdc-135">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#2)]
 [!code-csharp[Generic.IDictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#2)]
 [!code-vb[Generic.IDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14cdc-136">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-136">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="14cdc-137">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.IDictionary`2" /> に既に存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-137">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="14cdc-138">
            <see cref="T:System.Collections.Generic.IDictionary`2" /> は読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-138">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsKey(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool" Usage="iDictionary.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14cdc-139">
            <see cref="T:System.Collections.Generic.IDictionary\`2" /> 内で検索されるキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-139">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14cdc-140">指定したキーの要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> に格納されているかどうかを確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-140">Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14cdc-141">指定したキーを持つ要素を <see langword="true" /> が保持している場合は <see cref="T:System.Collections.Generic.IDictionary`2" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-141">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14cdc-142">オブジェクトが等しいかどうかを判断する方法で実装が異なりますたとえば、<xref:System.Collections.Generic.List%601>クラスで使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>であるのに対し、<xref:System.Collections.Generic.Dictionary%602>クラスでは、ユーザーを指定できます、<xref:System.Collections.Generic.IComparer%601>キーの比較に使用する実装。</span><span class="sxs-lookup"><span data-stu-id="14cdc-142">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="14cdc-143">実装できるかどうかによって異なります`key`する`null`します。</span><span class="sxs-lookup"><span data-stu-id="14cdc-143">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14cdc-144">次のコード例を使用する方法を示しています、<xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A>メソッドを呼び出す前に、キーが存在するかどうかをテストする、<xref:System.Collections.Generic.IDictionary%602.Add%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="14cdc-144">The following code example shows how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span> <span data-ttu-id="14cdc-145">使用する方法も示します、<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>メソッドより効率的なプログラムには、キー値をディクショナリではありません。 頻繁にしようとすると、値を取得することができます。</span><span class="sxs-lookup"><span data-stu-id="14cdc-145">It also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method, which can be a more efficient way to retrieve values if a program frequently tries key values that are not in the dictionary.</span></span> <span data-ttu-id="14cdc-146">最後を使用して項目を挿入する方法を示します<xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="14cdc-146">Finally, it shows how to insert items using <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#).</span></span>  
  
 <span data-ttu-id="14cdc-147">このコードをコンパイルして実行できる例の一部です。</span><span class="sxs-lookup"><span data-stu-id="14cdc-147">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="14cdc-148">「<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14cdc-148">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#6)]
 [!code-csharp[Generic.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#6)]
 [!code-vb[Generic.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#6)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14cdc-149">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-149">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Value with get, set" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14cdc-150">取得または設定する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-150">The key of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14cdc-151">指定したキーを持つ要素を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-151">Gets or sets the element with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14cdc-152">指定したキーを持つ要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-152">The element with the specified key.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14cdc-153">このプロパティは、次の構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。 `myCollection[key]` (`myCollection(key)` Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="14cdc-153">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="14cdc-154">使用することも、<xref:System.Collections.Generic.IDictionary%602.Item%2A>ディクショナリ内に存在しないキーの値を設定して、新しい要素を追加するプロパティなど、 `myCollection["myNonexistentKey"] = myValue` (C#) (`myCollection("myNonexistentKey") = myValue` Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="14cdc-154">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="14cdc-155">ただし、ディクショナリで指定したキーが既に存在する場合は、設定、<xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティには、古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="14cdc-155">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="14cdc-156">これに対し、<xref:System.Collections.Generic.IDictionary%602.Add%2A>メソッドでは、既存の要素は変更しません。</span><span class="sxs-lookup"><span data-stu-id="14cdc-156">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="14cdc-157">オブジェクトが等しいかどうかを判断する方法で実装が異なりますたとえば、<xref:System.Collections.Generic.List%601>クラスで使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>であるのに対し、<xref:System.Collections.Generic.Dictionary%602>クラスでは、ユーザーを指定できます、<xref:System.Collections.Generic.IComparer%601>キーの比較に使用する実装。</span><span class="sxs-lookup"><span data-stu-id="14cdc-157">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="14cdc-158">C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="14cdc-158">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span> <span data-ttu-id="14cdc-159">Visual Basic は、<xref:System.Collections.Generic.IDictionary%602.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="14cdc-159">Visual Basic implements <xref:System.Collections.Generic.IDictionary%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="14cdc-160">実装できるかどうかによって異なります`key`する`null`します。</span><span class="sxs-lookup"><span data-stu-id="14cdc-160">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14cdc-161">次のコード例では、<xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティ (c# のインデクサー) を示す値を取得する、<xref:System.Collections.Generic.KeyNotFoundException>要求されたキーが存在しないと置き換えることができます、値がキーに関連付けられていることを示す場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="14cdc-161">The following code example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="14cdc-162">使用する方法も示します、<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>場合は、プログラムは多くの場合、ディクショナリではありません。 キーの値を試みる必要があります値を取得するより効率的な方法としてのメソッド。</span><span class="sxs-lookup"><span data-stu-id="14cdc-162">The example also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</span></span>  
  
 <span data-ttu-id="14cdc-163">このコードをコンパイルして実行できる例の一部です。</span><span class="sxs-lookup"><span data-stu-id="14cdc-163">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="14cdc-164">「<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14cdc-164">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#3)]
 [!code-csharp[Generic.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#3)]
 [!code-vb[Generic.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#3)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14cdc-165">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-165">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="14cdc-166">プロパティは取得されますが、<paramref name="key" /> が見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-166">The property is retrieved and <paramref name="key" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="14cdc-167">このプロパティが設定されていますが、<see cref="T:System.Collections.Generic.IDictionary`2" /> が読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-167">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TKey&gt; ^ Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.ICollection&lt;'Key&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14cdc-168">
            <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-168">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14cdc-169">
            <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-169">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14cdc-170">返されたキーの順序<xref:System.Collections.Generic.ICollection%601>は指定しませんで対応する値と同じ順序にすることが保証されますが、<xref:System.Collections.Generic.ICollection%601>によって返される、<xref:System.Collections.Generic.IDictionary%602.Values%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="14cdc-170">The order of the keys in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14cdc-171">次のコード例を使用して単独でキーを列挙する方法を示しています、<xref:System.Collections.Generic.IDictionary%602.Keys%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="14cdc-171">The following code example shows how to enumerate keys alone using the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="14cdc-172">このコードをコンパイルして実行できる例の一部です。</span><span class="sxs-lookup"><span data-stu-id="14cdc-172">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="14cdc-173">「<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14cdc-173">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#9)]
 [!code-csharp[Generic.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#9)]
 [!code-vb[Generic.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool" Usage="iDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14cdc-174">削除する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-174">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14cdc-175">指定したキーを持つ要素を <see cref="T:System.Collections.Generic.IDictionary`2" /> から削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-175">Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14cdc-176">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-176">
              <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="14cdc-177">このメソッドは、元の <see langword="false" /> で <paramref name="key" /> が見つからなかった場合にも <see cref="T:System.Collections.Generic.IDictionary`2" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-177">This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14cdc-178">オブジェクトが等しいかどうかを判断する方法で実装が異なりますたとえば、<xref:System.Collections.Generic.List%601>クラスで使用<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>であるのに対し、<xref:System.Collections.Generic.Dictionary%602>クラスでは、ユーザーを指定できます、<xref:System.Collections.Generic.IComparer%601>キーの比較に使用する実装。</span><span class="sxs-lookup"><span data-stu-id="14cdc-178">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14cdc-179">次のコード例を使用して、ディクショナリからキー/値ペアを削除する方法を示しています、<xref:System.Collections.Generic.IDictionary%602.Remove%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="14cdc-179">The following code example shows how to remove a key/value pair from a dictionary using the <xref:System.Collections.Generic.IDictionary%602.Remove%2A> method.</span></span>  
  
 <span data-ttu-id="14cdc-180">このコードをコンパイルして実行できる例の一部です。</span><span class="sxs-lookup"><span data-stu-id="14cdc-180">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="14cdc-181">「<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14cdc-181">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#10)]
 [!code-csharp[Generic.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#10)]
 [!code-vb[Generic.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14cdc-182">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-182">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="14cdc-183">
            <see cref="T:System.Collections.Generic.IDictionary`2" /> は読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-183">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key *  -&gt; bool" Usage="iDictionary.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="14cdc-184">値を取得する対象のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-184">The key whose value to get.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="14cdc-185">このメソッドが返ったときに、キーが見つかった場合は、指定したキーに関連付けられている値、それ以外の場合は <c>value</c> パラメーターの型に対する既定の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-185">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <c>value</c> parameter.</span>
          </span>
          <span data-ttu-id="14cdc-186">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-186">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="14cdc-187">指定したキーに関連付けられている値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-187">Gets the value associated with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="14cdc-188">指定したキーを持つ要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> を実装するオブジェクトに格納されている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-188">
              <see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14cdc-189">このメソッドには、機能が組み合わされて、<xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A>メソッドと<xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="14cdc-189">This method combines the functionality of the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="14cdc-190">キーが見つからない場合、`value`パラメーター型の適切な既定値を取得する`TValue`; たとえば、整数型では、ゼロ (0)`false`ブール型の場合と`null`参照型。</span><span class="sxs-lookup"><span data-stu-id="14cdc-190">If the key is not found, then the `value` parameter gets the appropriate default value for the type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14cdc-191">例では、使用する方法を示します、<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>値を取得するメソッド。</span><span class="sxs-lookup"><span data-stu-id="14cdc-191">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method to retrieve values.</span></span> <span data-ttu-id="14cdc-192">プログラム、ディクショナリではありません。 キーの値を頻繁に試行する場合、<xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A>メソッドは、を使用するより効率的であることができます、<xref:System.Collections.Generic.IDictionary%602.Item%2A>プロパティ (c# のインデクサー) が存在しないキーを取得中に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="14cdc-192">If a program frequently tries key values that are not in a dictionary, the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method can be more efficient than using the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#), which throws exceptions when attempting to retrieve nonexistent keys.</span></span>  
  
 <span data-ttu-id="14cdc-193">このコードをコンパイルして実行できる例の一部です。</span><span class="sxs-lookup"><span data-stu-id="14cdc-193">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="14cdc-194">「<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14cdc-194">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
 [!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
 [!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="14cdc-195">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-195">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TValue&gt; ^ Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.ICollection&lt;'Value&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="14cdc-196">
            <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-196">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="14cdc-197">
            <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="14cdc-197">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14cdc-198">返される値の順序<xref:System.Collections.Generic.ICollection%601>は指定しません内の対応するキーと同じ順序にすることが保証されますが、<xref:System.Collections.Generic.ICollection%601>によって返される、<xref:System.Collections.Generic.IDictionary%602.Keys%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="14cdc-198">The order of the values in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="14cdc-199">次のコード例を使用して単独で値を列挙する方法を示しています、<xref:System.Collections.Generic.IDictionary%602.Values%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="14cdc-199">The following code example shows how to enumerate values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="14cdc-200">このコードをコンパイルして実行できる例の一部です。</span><span class="sxs-lookup"><span data-stu-id="14cdc-200">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="14cdc-201">「<xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="14cdc-201">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#8)]
 [!code-csharp[Generic.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#8)]
 [!code-vb[Generic.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
  </Members>
</Type>