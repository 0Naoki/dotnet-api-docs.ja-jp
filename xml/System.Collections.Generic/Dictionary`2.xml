<Type Name="Dictionary&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="163fb3d8300ba81e4fb53fa35da1b5b9eb5b669f" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70713727" /></Metadata><TypeSignature Language="C#" Value="public class Dictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Dictionary`2&lt;TKey, TValue&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Dictionary`2" />
  <TypeSignature Language="VB.NET" Value="Public Class Dictionary(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IDeserializationCallback, IDictionary, IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public ref class Dictionary : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IDictionary&lt;TKey, TValue&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IReadOnlyCollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IReadOnlyDictionary&lt;TKey, TValue&gt;, System::Collections::IDictionary, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Dictionary&lt;'Key, 'Value&gt; = class&#xA;    interface IDictionary&lt;'Key, 'Value&gt;&#xA;    interface IDictionary&#xA;    interface IReadOnlyDictionary&lt;'Key, 'Value&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_DictionaryDebugView`2))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="29a05-101">ディクショナリ内のキーの型。</span><span class="sxs-lookup"><span data-stu-id="29a05-101">The type of the keys in the dictionary.</span></span></typeparam>
    <typeparam name="TValue"><span data-ttu-id="29a05-102">ディクショナリ内の値の型。</span><span class="sxs-lookup"><span data-stu-id="29a05-102">The type of the values in the dictionary.</span></span></typeparam>
    <summary><span data-ttu-id="29a05-103">キーと値のコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="29a05-103">Represents a collection of keys and values.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-104">ジェネリック<xref:System.Collections.Generic.Dictionary%602>クラスは、一連のキーから一連の値へのマッピングを提供します。</span><span class="sxs-lookup"><span data-stu-id="29a05-104">The <xref:System.Collections.Generic.Dictionary%602> generic class provides a mapping from a set of keys to a set of values.</span></span> <span data-ttu-id="29a05-105">ディクショナリに追加される各エントリは、値とその値に関連付けられたキーで構成されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-105">Each addition to the dictionary consists of a value and its associated key.</span></span> <span data-ttu-id="29a05-106">この<xref:System.Collections.Generic.Dictionary%602>クラスはハッシュテーブルとして実装されているため、キーを使用して値を取得することは非常に高速で、O (1) に近いものになります。</span><span class="sxs-lookup"><span data-stu-id="29a05-106">Retrieving a value by using its key is very fast, close to O(1), because the <xref:System.Collections.Generic.Dictionary%602> class is implemented as a hash table.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29a05-107">取得の速度は、に対して`TKey`指定された型のハッシュアルゴリズムの品質によって異なります。</span><span class="sxs-lookup"><span data-stu-id="29a05-107">The speed of retrieval depends on the quality of the hashing algorithm of the type specified for `TKey`.</span></span>  
  
 <span data-ttu-id="29a05-108">オブジェクトがの<xref:System.Collections.Generic.Dictionary%602>キーとして使用されている限り、そのハッシュ値に影響する何らかの方法でオブジェクトを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="29a05-108">As long as an object is used as a key in the <xref:System.Collections.Generic.Dictionary%602>, it must not change in any way that affects its hash value.</span></span> <span data-ttu-id="29a05-109">内の<xref:System.Collections.Generic.Dictionary%602>すべてのキーは、ディクショナリの等値比較子に従って一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-109">Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the dictionary's equality comparer.</span></span> <span data-ttu-id="29a05-110">キーをにする`null`ことはできませんが、型`TValue`が参照型である場合は値をにすることができます。</span><span class="sxs-lookup"><span data-stu-id="29a05-110">A key cannot be `null`, but a value can be, if its type `TValue` is a reference type.</span></span>  
  
 <span data-ttu-id="29a05-111"><xref:System.Collections.Generic.Dictionary%602>キーが等しいかどうかを判断するには、等値の実装が必要です。</span><span class="sxs-lookup"><span data-stu-id="29a05-111"><xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal.</span></span> <span data-ttu-id="29a05-112">パラメーターを<xref:System.Collections.Generic.IEqualityComparer%601> `comparer`受け取るコンストラクターを使用して、ジェネリックインターフェイスの実装を指定できます。実装を指定しない場合は、既定のジェネリック等値<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>比較子が使用されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-112">You can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter; if you do not specify an implementation, the default generic equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id="29a05-113">型`TKey`が<xref:System.IEquatable%601?displayProperty=nameWithType>ジェネリックインターフェイスを実装している場合、既定の等値比較子はその実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-113">If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=nameWithType> generic interface, the default equality comparer uses that implementation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29a05-114">たとえば、 <xref:System.StringComparer>クラスによって提供される大文字と小文字を区別しない文字列の比較子を使用して、大文字と小文字を区別しない文字列キーで辞書を作成できます。</span><span class="sxs-lookup"><span data-stu-id="29a05-114">For example, you can use the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.</span></span>  
  
 <span data-ttu-id="29a05-115"><xref:System.Collections.Generic.Dictionary%602>の容量は、<xref:System.Collections.Generic.Dictionary%602>が保持できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="29a05-115">The capacity of a <xref:System.Collections.Generic.Dictionary%602> is the number of elements the <xref:System.Collections.Generic.Dictionary%602> can hold.</span></span> <span data-ttu-id="29a05-116">要素がに<xref:System.Collections.Generic.Dictionary%602>追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-116">As elements are added to a <xref:System.Collections.Generic.Dictionary%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="29a05-117">**.NET Framework のみ:** 非常に大きな<xref:System.Collections.Generic.Dictionary%602>オブジェクトの場合は、実行時環境で[`<gcAllowVeryLargeObjects>`](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)構成要素の`enabled`属性をに設定する`true`ことによって、64ビットシステム上の最大容量を20億要素に増やすことができます。</span><span class="sxs-lookup"><span data-stu-id="29a05-117">**.NET Framework only:** For very large <xref:System.Collections.Generic.Dictionary%602> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the [`<gcAllowVeryLargeObjects>`](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="29a05-118">列挙型の場合、ディクショナリ内の各項目は、値と<xref:System.Collections.Generic.KeyValuePair%602>そのキーを表す構造体として扱われます。</span><span class="sxs-lookup"><span data-stu-id="29a05-118">For purposes of enumeration, each item in the dictionary is treated as a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.</span></span> <span data-ttu-id="29a05-119">項目が返される順序は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="29a05-119">The order in which the items are returned is undefined.</span></span>  
  
 <span data-ttu-id="29a05-120">C# `for each` C++言語の`For Each`ステートメント (では、Visual Basic) によって、コレクション内の要素の型のオブジェクトが返されます。 `foreach`</span><span class="sxs-lookup"><span data-stu-id="29a05-120">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="29a05-121"><xref:System.Collections.Generic.Dictionary%602>はキーと値のコレクションであるため、要素型はキーの型でも値の型でもありません。</span><span class="sxs-lookup"><span data-stu-id="29a05-121">Since the <xref:System.Collections.Generic.Dictionary%602> is a collection of keys and values, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="29a05-122">代わりに、要素の型は<xref:System.Collections.Generic.KeyValuePair%602> 、キーの型と値の型のです。</span><span class="sxs-lookup"><span data-stu-id="29a05-122">Instead, the element type is a <xref:System.Collections.Generic.KeyValuePair%602> of the key type and the value type.</span></span> <span data-ttu-id="29a05-123">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-123">For example:</span></span>  
  
 [!code-cpp[Generic.Dictionary#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source2.cpp#11)]
 [!code-csharp[Generic.Dictionary#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source2.cs#11)]
 [!code-vb[Generic.Dictionary#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source2.vb#11)]  
  
 <span data-ttu-id="29a05-124">`foreach`ステートメントは、列挙子のラッパーであり、コレクションからの読み取りのみを許可し、それに書き込むことはできません。</span><span class="sxs-lookup"><span data-stu-id="29a05-124">The `foreach` statement is a wrapper around the enumerator, which allows only reading from the collection, not writing to it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29a05-125">キーを継承してその動作を変更できるため、 <xref:System.Type.Equals%2A>メソッドを使用して比較することで、それらの絶対一意性を保証することはできません。</span><span class="sxs-lookup"><span data-stu-id="29a05-125">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  

 [!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]
 
 <span data-ttu-id="29a05-126">次のコード例では、 <xref:System.Collections.Generic.Dictionary%602>文字列キーを使用して空の<xref:System.Collections.Generic.Dictionary%602.Add%2A>文字列を作成し、メソッドを使用していくつかの要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-126">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings with string keys and uses the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="29a05-127">この例では、 <xref:System.Collections.Generic.Dictionary%602.Add%2A>重複するキー <xref:System.ArgumentException>を追加しようとしたときに、メソッドがをスローすることを示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-127">The example demonstrates that the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="29a05-128">この例では<xref:System.Collections.Generic.Dictionary%602.Item%2A> 、プロパティ (のC#インデクサー) を使用して値を取得<xref:System.Collections.Generic.KeyNotFoundException>します。これは、要求されたキーが存在しない場合にがスローされ、キーに関連付けられている値を置き換えることができることを示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-128">The example uses the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="29a05-129">例を使用する方法を示します、<xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A>メソッド値を取得する場合は、プログラムは多くの場合、ディクショナリに含まれていないキーの値を試行する必要があり、使用する方法を示しますより効率的な方法として、 <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> を呼び出す前に、キーが存在するかどうかをテストする方法を <xref:System.Collections.Generic.Dictionary%602.Add%2A> メソッドです。</span><span class="sxs-lookup"><span data-stu-id="29a05-129">The example shows how to use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and it shows how to use the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method to test whether a key exists before calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method.</span></span>  
  
 <span data-ttu-id="29a05-130">この例では、ディクショナリのキーと値を列挙する方法と、 <xref:System.Collections.Generic.Dictionary%602.Keys%2A>プロパティ<xref:System.Collections.Generic.Dictionary%602.Values%2A>とプロパティを使用してキーと値を個別に列挙する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-130">The example shows how to enumerate the keys and values in the dictionary and how to enumerate the keys and values alone using the <xref:System.Collections.Generic.Dictionary%602.Keys%2A> property and the <xref:System.Collections.Generic.Dictionary%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="29a05-131">最後に、メソッドの<xref:System.Collections.Generic.Dictionary%602.Remove%2A>例を示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-131">Finally, the example demonstrates the <xref:System.Collections.Generic.Dictionary%602.Remove%2A> method.</span></span>  
  
 [!code-cpp[Generic.Dictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#1)]
 [!code-csharp-interactive[Generic.Dictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#1)]
 [!code-vb[Generic.Dictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="29a05-132">は<see cref="T:System.Collections.Generic.Dictionary`2" /> 、コレクションが変更されていない限り、複数のリーダーを同時にサポートできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-132">A <see cref="T:System.Collections.Generic.Dictionary`2" /> can support multiple readers concurrently, as long as the collection is not modified.</span></span> <span data-ttu-id="29a05-133">それでも、コレクションを列挙することは、本質的にはスレッドセーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="29a05-133">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="29a05-134">まれに、列挙が書き込みアクセスと競合する場合は、列挙全体でコレクションをロックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-134">In the rare case where an enumeration contends with write accesses, the collection must be locked during the entire enumeration.</span></span> <span data-ttu-id="29a05-135">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-135">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
<span data-ttu-id="29a05-136">スレッドセーフな代替方法について<see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />は、 <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />クラスまたはクラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="29a05-136">For thread-safe alternatives, see the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> class or <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> class.</span></span>  
  
<span data-ttu-id="29a05-137">パブリック静的 (Visual Basic では<see langword="Shared" />) なこの型のメンバーはスレッド セーフです</span><span class="sxs-lookup"><span data-stu-id="29a05-137">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Collections.Generic.IDictionary`2" />
    <altmember cref="T:System.Collections.Generic.SortedList`2" />
    <altmember cref="T:System.Collections.Generic.KeyValuePair`2" />
    <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="29a05-138"><see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="29a05-138">Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Dictionary();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29a05-139">空で、既定の初期量を備え、キーの型の既定の等値比較子を使用する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="29a05-139">Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-140">内の<xref:System.Collections.Generic.Dictionary%602>すべてのキーは、既定の等値比較子に従って一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-140">Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the default equality comparer.</span></span>  
  
 <span data-ttu-id="29a05-141"><xref:System.Collections.Generic.Dictionary%602>キーが等しいかどうかを判断するには、等値の実装が必要です。</span><span class="sxs-lookup"><span data-stu-id="29a05-141"><xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal.</span></span> <span data-ttu-id="29a05-142">このコンストラクターは、既定のジェネリック等値<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>比較子であるを使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-142">This constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="29a05-143">型`TKey`が<xref:System.IEquatable%601?displayProperty=nameWithType>ジェネリックインターフェイスを実装している場合、既定の等値比較子はその実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-143">If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=nameWithType> generic interface, the default equality comparer uses that implementation.</span></span> <span data-ttu-id="29a05-144">また、パラメーターを<xref:System.Collections.Generic.IEqualityComparer%601> `comparer`受け取るコンストラクターを使用して、ジェネリックインターフェイスの実装を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-144">Alternatively, you can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29a05-145">コレクションのサイズを推定できる場合は、初期容量を指定するコンストラクターを使用して、 <xref:System.Collections.Generic.Dictionary%602>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="29a05-145">If you can estimate the size of the collection, using a constructor that specifies the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
 <span data-ttu-id="29a05-146">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-146">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  

 [!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]

 <span data-ttu-id="29a05-147">次のコード例では、 <xref:System.Collections.Generic.Dictionary%602>文字列キーを使用して空の<xref:System.Collections.Generic.Dictionary%602.Add%2A>文字列を作成し、メソッドを使用していくつかの要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-147">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings with string keys and uses the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="29a05-148">この例では、 <xref:System.Collections.Generic.Dictionary%602.Add%2A>重複するキー <xref:System.ArgumentException>を追加しようとしたときに、メソッドがをスローすることを示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-148">The example demonstrates that the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="29a05-149">このコード例は、 <xref:System.Collections.Generic.Dictionary%602>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="29a05-149">This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class.</span></span>  
  
 [!code-cpp[Generic.Dictionary#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#2)]
 [!code-csharp-interactive[Generic.Dictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#2)]
 [!code-vb[Generic.Dictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Immutable.IImmutableDictionary`2" />
        <altmember cref="P:System.Collections.Generic.EqualityComparer`1.Default" />
        <altmember cref="T:System.IEquatable`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt; dictionary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dictionary As IDictionary(Of TKey, TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Dictionary(System::Collections::Generic::IDictionary&lt;TKey, TValue&gt; ^ dictionary);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; : System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; dictionary" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="dictionary"><span data-ttu-id="29a05-150">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-150">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></param>
        <summary><span data-ttu-id="29a05-151">指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> から要素をコピーして格納し、キーの型の既定の等値比較子を使用する、<see cref="T:System.Collections.Generic.IDictionary`2" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="29a05-151">Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the default equality comparer for the key type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-152">内<xref:System.Collections.Generic.Dictionary%602>のすべてのキーは、既定の等値比較子に従って一意である必要が`dictionary`あります。同様に、ソース内のすべてのキーも、既定の等値比較子に従って一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-152">Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the default equality comparer; likewise, every key in the source `dictionary` must also be unique according to the default equality comparer.</span></span>  
  
 <span data-ttu-id="29a05-153">新しい<xref:System.Collections.Generic.Dictionary%602>の初期容量は、のすべての`dictionary`要素を格納するのに十分な大きさです。</span><span class="sxs-lookup"><span data-stu-id="29a05-153">The initial capacity of the new <xref:System.Collections.Generic.Dictionary%602> is large enough to contain all the elements in `dictionary`.</span></span>  
  
 <span data-ttu-id="29a05-154"><xref:System.Collections.Generic.Dictionary%602>キーが等しいかどうかを判断するには、等値の実装が必要です。</span><span class="sxs-lookup"><span data-stu-id="29a05-154"><xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal.</span></span> <span data-ttu-id="29a05-155">このコンストラクターは、既定のジェネリック等値<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>比較子であるを使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-155">This constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="29a05-156">型`TKey`が<xref:System.IEquatable%601?displayProperty=nameWithType>ジェネリックインターフェイスを実装している場合、既定の等値比較子はその実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-156">If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=nameWithType> generic interface, the default equality comparer uses that implementation.</span></span> <span data-ttu-id="29a05-157">また、パラメーターを<xref:System.Collections.Generic.IEqualityComparer%601> `comparer`受け取るコンストラクターを使用して、ジェネリックインターフェイスの実装を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-157">Alternatively, you can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="29a05-158">このコンストラクターは O (n) 操作です。ここで、n は内`dictionary`の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="29a05-158">This constructor is an O(n) operation, where n is the number of elements in `dictionary`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-159">次のコード例は、 <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29>コンストラクターを使用して、別のディクショナリから並べ替えられたコンテンツを使用してを<xref:System.Collections.Generic.Dictionary%602>初期化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-159">The following code example shows how to use the <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor to initialize a <xref:System.Collections.Generic.Dictionary%602> with sorted content from another dictionary.</span></span> <span data-ttu-id="29a05-160">このコード例では<xref:System.Collections.Generic.SortedDictionary%602> 、を作成し、ランダムな順序でデータを設定<xref:System.Collections.Generic.SortedDictionary%602>し、 <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29>をコンストラクターに渡し<xref:System.Collections.Generic.Dictionary%602>て、並べ替えられたを作成します。</span><span class="sxs-lookup"><span data-stu-id="29a05-160">The code example creates a <xref:System.Collections.Generic.SortedDictionary%602> and populates it with data in random order, then passes the <xref:System.Collections.Generic.SortedDictionary%602> to the <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor, creating a <xref:System.Collections.Generic.Dictionary%602> that is sorted.</span></span> <span data-ttu-id="29a05-161">これは、ある時点で静的になる並べ替えられたディクショナリを構築する必要がある場合に便利です。から<xref:System.Collections.Generic.SortedDictionary%602>にデータをコピーすると<xref:System.Collections.Generic.Dictionary%602> 、取得速度が向上します。</span><span class="sxs-lookup"><span data-stu-id="29a05-161">This is useful if you need to build a sorted dictionary that at some point becomes static; copying the data from a <xref:System.Collections.Generic.SortedDictionary%602> to a <xref:System.Collections.Generic.Dictionary%602> improves retrieval speed.</span></span>  
  
 [!code-csharp[Generic.Dictionary.ctor_IDic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.ctor_IDic/CS/source.cs#1)]
 [!code-vb[Generic.Dictionary.ctor_IDic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.ctor_IDic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-162"><paramref name="dictionary" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-162"><paramref name="dictionary" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="29a05-163"><paramref name="dictionary" /> に、1 つ以上の重複するキーが格納されています。</span><span class="sxs-lookup"><span data-stu-id="29a05-163"><paramref name="dictionary" /> contains one or more duplicate keys.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
        <altmember cref="P:System.Collections.Generic.EqualityComparer`1.Default" />
        <altmember cref="T:System.IEquatable`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Dictionary(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; : seq&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="collection">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Dictionary(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="29a05-164">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 実装。キーの型の既定の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-164">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</span></span></param>
        <summary><span data-ttu-id="29a05-165">空で、既定の初期量を備え、指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="29a05-165">Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-166">このコンストラクターは、大文字と小文字を区別しない<xref:System.StringComparer>文字列キーで辞書を作成するためにクラスによって提供される大文字と小文字を区別しない文字列比較子と共に使用</span><span class="sxs-lookup"><span data-stu-id="29a05-166">Use this constructor with the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.</span></span>  
  
 <span data-ttu-id="29a05-167">内の<xref:System.Collections.Generic.Dictionary%602>すべてのキーは、指定された比較子に従って一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-167">Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="29a05-168"><xref:System.Collections.Generic.Dictionary%602>キーが等しいかどうかを判断するには、等値の実装が必要です。</span><span class="sxs-lookup"><span data-stu-id="29a05-168"><xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal.</span></span> <span data-ttu-id="29a05-169">が`comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の場合、このコンストラクターは既定のジェネリック等値比較子であるを使用します。 `null`</span><span class="sxs-lookup"><span data-stu-id="29a05-169">If `comparer` is `null`, this constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="29a05-170">型`TKey`が<xref:System.IEquatable%601?displayProperty=nameWithType>ジェネリックインターフェイスを実装している場合、既定の等値比較子はその実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-170">If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=nameWithType> generic interface, the default equality comparer uses that implementation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29a05-171">コレクションのサイズを推定できる場合は、初期容量を指定するコンストラクターを使用して、 <xref:System.Collections.Generic.Dictionary%602>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="29a05-171">If you can estimate the size of the collection, using a constructor that specifies the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
 <span data-ttu-id="29a05-172">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-172">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-173">次のコード例では<xref:System.Collections.Generic.Dictionary%602> 、現在のカルチャの大文字と小文字を区別しない等値比較子を使用して、を作成します。</span><span class="sxs-lookup"><span data-stu-id="29a05-173">The following code example creates a <xref:System.Collections.Generic.Dictionary%602> with a case-insensitive equality comparer for the current culture.</span></span> <span data-ttu-id="29a05-174">この例では、4つの要素 (小文字のキーを持つ要素と、大文字のキーを持つ要素) を追加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-174">The example adds four elements, some with lower-case keys and some with upper-case keys.</span></span> <span data-ttu-id="29a05-175">次に、既存のキーと異なるキーを使用して要素を追加しようとします。この場合、大文字小文字の区別のみが発生し、結果として得られる例外をキャッチして、エラーメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-175">The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</span></span> <span data-ttu-id="29a05-176">最後に、この例ではディクショナリ内の要素を表示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-176">Finally, the example displays the elements in the dictionary.</span></span>  
  
 [!code-csharp[Generic.Dictionary.ctor_IEqC#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.ctor_IEqC/CS/source.cs#1)]
 [!code-vb[Generic.Dictionary.ctor_IEqC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.ctor_IEqC/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
        <altmember cref="P:System.Collections.Generic.EqualityComparer`1.Default" />
        <altmember cref="T:System.IEquatable`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Dictionary(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; : int -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="29a05-177"><see cref="T:System.Collections.Generic.Dictionary`2" /> が格納できる要素数の初期値。</span><span class="sxs-lookup"><span data-stu-id="29a05-177">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</span></span></param>
        <summary><span data-ttu-id="29a05-178">空で、指定した初期量を備え、キーの型の既定の等値比較子を使用する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="29a05-178">Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-179">内の<xref:System.Collections.Generic.Dictionary%602>すべてのキーは、既定の等値比較子に従って一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-179">Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the default equality comparer.</span></span>  
  
 <span data-ttu-id="29a05-180">の<xref:System.Collections.Generic.Dictionary%602>容量は、 <xref:System.Collections.Generic.Dictionary%602>サイズ変更が必要になる前にに追加できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="29a05-180">The capacity of a <xref:System.Collections.Generic.Dictionary%602> is the number of elements that can be added to the <xref:System.Collections.Generic.Dictionary%602> before resizing is necessary.</span></span> <span data-ttu-id="29a05-181">要素がに<xref:System.Collections.Generic.Dictionary%602>追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-181">As elements are added to a <xref:System.Collections.Generic.Dictionary%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="29a05-182">コレクションのサイズを推定できる場合、初期容量を指定すると、 <xref:System.Collections.Generic.Dictionary%602>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="29a05-182">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
 <span data-ttu-id="29a05-183"><xref:System.Collections.Generic.Dictionary%602>キーが等しいかどうかを判断するには、等値の実装が必要です。</span><span class="sxs-lookup"><span data-stu-id="29a05-183"><xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal.</span></span> <span data-ttu-id="29a05-184">このコンストラクターは、既定のジェネリック等値<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>比較子であるを使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-184">This constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="29a05-185">型`TKey`が<xref:System.IEquatable%601?displayProperty=nameWithType>ジェネリックインターフェイスを実装している場合、既定の等値比較子はその実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-185">If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=nameWithType> generic interface, the default equality comparer uses that implementation.</span></span> <span data-ttu-id="29a05-186">また、パラメーターを<xref:System.Collections.Generic.IEqualityComparer%601> `comparer`受け取るコンストラクターを使用して、ジェネリックインターフェイスの実装を指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-186">Alternatively, you can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="29a05-187">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-187">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-188">次のコード例では、初期容量が4のディクショナリを作成し、4つのエントリを設定します。</span><span class="sxs-lookup"><span data-stu-id="29a05-188">The following code example creates a dictionary with an initial capacity of 4 and populates it with 4 entries.</span></span>  
  
 [!code-csharp[Generic.Dictionary.ctor_Int32#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.ctor_Int32/CS/source.cs#1)]
 [!code-vb[Generic.Dictionary.ctor_Int32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.ctor_Int32/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="29a05-189"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="29a05-189"><paramref name="capacity" /> is less than 0.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.EqualityComparer`1.Default" />
        <altmember cref="T:System.IEquatable`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt; dictionary, class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dictionary As IDictionary(Of TKey, TValue), comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Dictionary(System::Collections::Generic::IDictionary&lt;TKey, TValue&gt; ^ dictionary, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; : System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; (dictionary, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="dictionary"><span data-ttu-id="29a05-190">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-190">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="29a05-191">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 実装。キーの型の既定の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-191">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</span></span></param>
        <summary><span data-ttu-id="29a05-192">指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> から要素をコピーして格納し、指定した <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="29a05-192">Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-193">このコンストラクターは、大文字と小文字を区別しない<xref:System.StringComparer>文字列キーで辞書を作成するためにクラスによって提供される大文字と小文字を区別しない文字列比較子と共に使用</span><span class="sxs-lookup"><span data-stu-id="29a05-193">Use this constructor with the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.</span></span>  
  
 <span data-ttu-id="29a05-194">内<xref:System.Collections.Generic.Dictionary%602>のすべてのキーは、指定された比較子に従って一意である必要`dictionary`があります。同様に、ソース内のすべてのキーは、指定された比較子に従って一意である必要もあります。</span><span class="sxs-lookup"><span data-stu-id="29a05-194">Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the specified comparer; likewise, every key in the source `dictionary` must also be unique according to the specified comparer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29a05-195">たとえば、が<xref:System.StringComparer>クラスによって提供`comparer`される大文字と小文字を区別しない文字列比較子`dictionary`の1つであり、大文字と小文字を区別しない比較演算子キーを使用しない場合、重複キーが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-195">For example, duplicate keys can occur if `comparer` is one of the case-insensitive string comparers provided by the <xref:System.StringComparer> class and `dictionary` does not use a case-insensitive comparer key.</span></span>  
  
 <span data-ttu-id="29a05-196">新しい<xref:System.Collections.Generic.Dictionary%602>の初期容量は、のすべての`dictionary`要素を格納するのに十分な大きさです。</span><span class="sxs-lookup"><span data-stu-id="29a05-196">The initial capacity of the new <xref:System.Collections.Generic.Dictionary%602> is large enough to contain all the elements in `dictionary`.</span></span>  
  
 <span data-ttu-id="29a05-197"><xref:System.Collections.Generic.Dictionary%602>キーが等しいかどうかを判断するには、等値の実装が必要です。</span><span class="sxs-lookup"><span data-stu-id="29a05-197"><xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal.</span></span> <span data-ttu-id="29a05-198">が`comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の場合、このコンストラクターは既定のジェネリック等値比較子であるを使用します。 `null`</span><span class="sxs-lookup"><span data-stu-id="29a05-198">If `comparer` is `null`, this constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="29a05-199">型`TKey`が<xref:System.IEquatable%601?displayProperty=nameWithType>ジェネリックインターフェイスを実装している場合、既定の等値比較子はその実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-199">If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=nameWithType> generic interface, the default equality comparer uses that implementation.</span></span>  
  
 <span data-ttu-id="29a05-200">このコンストラクターは O (`n`) 操作です。ここ`n`で、は内`dictionary`の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="29a05-200">This constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-201">次のコード例では、 <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%600%7D%29>コンストラクターを使用して、別のディクショナリからの大文字と小文字を区別しない並べ替えられたコンテンツを使用してを<xref:System.Collections.Generic.Dictionary%602>初期化する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-201">The following code example shows how to use the <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor to initialize a <xref:System.Collections.Generic.Dictionary%602> with case-insensitive sorted content from another dictionary.</span></span> <span data-ttu-id="29a05-202">このコード例では<xref:System.Collections.Generic.SortedDictionary%602> 、大文字と小文字を区別しない比較子を使用してを作成<xref:System.Collections.Generic.SortedDictionary%602>し、ランダムな順序でデータを設定します。次に、 <xref:System.Collections.Generic.Dictionary%602>を<xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%600%7D%29>コンストラクターに渡し、大文字と小文字を区別しない等値比較子を作成します。並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="29a05-202">The code example creates a <xref:System.Collections.Generic.SortedDictionary%602> with a case-insensitive comparer and populates it with data in random order, then passes the <xref:System.Collections.Generic.SortedDictionary%602> to the <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor, along with a case-insensitive equality comparer, creating a <xref:System.Collections.Generic.Dictionary%602> that is sorted.</span></span> <span data-ttu-id="29a05-203">これは、ある時点で静的になる並べ替えられたディクショナリを構築する必要がある場合に便利です。から<xref:System.Collections.Generic.SortedDictionary%602>にデータをコピーすると<xref:System.Collections.Generic.Dictionary%602> 、取得速度が向上します。</span><span class="sxs-lookup"><span data-stu-id="29a05-203">This is useful if you need to build a sorted dictionary that at some point becomes static; copying the data from a <xref:System.Collections.Generic.SortedDictionary%602> to a <xref:System.Collections.Generic.Dictionary%602> improves retrieval speed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29a05-204">大文字と小文字を区別しない比較子を使用して新しいディクショナリを作成し、大文字と小文字を区別する比較子を使用するディクショナリからのエントリを設定すると、この例のように、入力ディクショナリに大文字と小文字のみが異なるキーがある場合に例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="29a05-204">When you create a new dictionary with a case-insensitive comparer and populate it with entries from a dictionary that uses a case-sensitive comparer, as in this example, an exception occurs if the input dictionary has keys that differ only by case.</span></span>  
  
 [!code-csharp[Generic.Dictionary.ctor_IDicIEqC#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.ctor_IDicIEqC/CS/source.cs#1)]
 [!code-vb[Generic.Dictionary.ctor_IDicIEqC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.ctor_IDicIEqC/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-205"><paramref name="dictionary" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-205"><paramref name="dictionary" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="29a05-206"><paramref name="dictionary" /> に、1 つ以上の重複するキーが格納されています。</span><span class="sxs-lookup"><span data-stu-id="29a05-206"><paramref name="dictionary" /> contains one or more duplicate keys.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
        <altmember cref="P:System.Collections.Generic.EqualityComparer`1.Default" />
        <altmember cref="T:System.IEquatable`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; collection, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; collection, class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)), comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Dictionary(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ collection, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; : seq&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; (collection, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="collection">To be added.</param>
        <param name="comparer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (int capacity, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Dictionary(int capacity, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; : int * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; (capacity, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="29a05-207"><see cref="T:System.Collections.Generic.Dictionary`2" /> が格納できる要素数の初期値。</span><span class="sxs-lookup"><span data-stu-id="29a05-207">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</span></span></param>
        <param name="comparer"><span data-ttu-id="29a05-208">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 実装。キーの型の既定の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-208">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</span></span></param>
        <summary><span data-ttu-id="29a05-209">空で、指定した初期量を備え、指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="29a05-209">Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-210">このコンストラクターは、大文字と小文字を区別しない<xref:System.StringComparer>文字列キーで辞書を作成するためにクラスによって提供される大文字と小文字を区別しない文字列比較子と共に使用</span><span class="sxs-lookup"><span data-stu-id="29a05-210">Use this constructor with the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.</span></span>  
  
 <span data-ttu-id="29a05-211">内の<xref:System.Collections.Generic.Dictionary%602>すべてのキーは、指定された比較子に従って一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-211">Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="29a05-212">の<xref:System.Collections.Generic.Dictionary%602>容量は、 <xref:System.Collections.Generic.Dictionary%602>サイズ変更が必要になる前にに追加できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="29a05-212">The capacity of a <xref:System.Collections.Generic.Dictionary%602> is the number of elements that can be added to the <xref:System.Collections.Generic.Dictionary%602> before resizing is necessary.</span></span> <span data-ttu-id="29a05-213">要素がに<xref:System.Collections.Generic.Dictionary%602>追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-213">As elements are added to a <xref:System.Collections.Generic.Dictionary%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="29a05-214">コレクションのサイズを推定できる場合、初期容量を指定すると、 <xref:System.Collections.Generic.Dictionary%602>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="29a05-214">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
 <span data-ttu-id="29a05-215"><xref:System.Collections.Generic.Dictionary%602>キーが等しいかどうかを判断するには、等値の実装が必要です。</span><span class="sxs-lookup"><span data-stu-id="29a05-215"><xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal.</span></span> <span data-ttu-id="29a05-216">が`comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の場合、このコンストラクターは既定のジェネリック等値比較子であるを使用します。 `null`</span><span class="sxs-lookup"><span data-stu-id="29a05-216">If `comparer` is `null`, this constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="29a05-217">型`TKey`が<xref:System.IEquatable%601?displayProperty=nameWithType>ジェネリックインターフェイスを実装している場合、既定の等値比較子はその実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-217">If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=nameWithType> generic interface, the default equality comparer uses that implementation.</span></span>  
  
 <span data-ttu-id="29a05-218">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-218">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-219">次のコード例では<xref:System.Collections.Generic.Dictionary%602> 、初期量が5で、現在のカルチャの大文字と小文字を区別しない等値比較子を使用して、を作成します。</span><span class="sxs-lookup"><span data-stu-id="29a05-219">The following code example creates a <xref:System.Collections.Generic.Dictionary%602> with an initial capacity of 5 and a case-insensitive equality comparer for the current culture.</span></span> <span data-ttu-id="29a05-220">この例では、4つの要素 (小文字のキーを持つ要素と、大文字のキーを持つ要素) を追加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-220">The example adds four elements, some with lower-case keys and some with upper-case keys.</span></span> <span data-ttu-id="29a05-221">次に、既存のキーと異なるキーを使用して要素を追加しようとします。この場合、大文字小文字の区別のみが発生し、結果として得られる例外をキャッチして、エラーメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-221">The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</span></span> <span data-ttu-id="29a05-222">最後に、この例ではディクショナリ内の要素を表示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-222">Finally, the example displays the elements in the dictionary.</span></span>  
  
 [!code-csharp[Generic.Dictionary.ctor_Int32IEqC#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.ctor_Int32IEqC/CS/source.cs#1)]
 [!code-vb[Generic.Dictionary.ctor_Int32IEqC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.ctor_Int32IEqC/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="29a05-223"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="29a05-223"><paramref name="capacity" /> is less than 0.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
        <altmember cref="P:System.Collections.Generic.EqualityComparer`1.Default" />
        <altmember cref="T:System.IEquatable`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Dictionary (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Dictionary(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="29a05-224"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Collections.Generic.Dictionary`2" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="29a05-224">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></param>
        <param name="context"><span data-ttu-id="29a05-225"><see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Collections.Generic.Dictionary`2" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="29a05-225">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></param>
        <summary><span data-ttu-id="29a05-226">シリアル化したデータを使用して、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="29a05-226">Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-227">このコンストラクターは、逆シリアル化中に、ストリームで送信されるオブジェクトを再構築するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-227">This constructor is called during deserialization to reconstitute an object transmitted over a stream.</span></span> <span data-ttu-id="29a05-228">詳細については、次を参照してください。 [XML および SOAP シリアル化](~/docs/standard/serialization/xml-and-soap-serialization.md)します。</span><span class="sxs-lookup"><span data-stu-id="29a05-228">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Runtime.Serialization" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * 'Value -&gt; unit&#xA;override this.Add : 'Key * 'Value -&gt; unit" Usage="dictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Add(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29a05-229">追加する要素のキー。</span><span class="sxs-lookup"><span data-stu-id="29a05-229">The key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="29a05-230">追加する要素の値。</span><span class="sxs-lookup"><span data-stu-id="29a05-230">The value of the element to add.</span></span> <span data-ttu-id="29a05-231">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="29a05-231">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="29a05-232">指定したキーと値をディクショナリに追加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-232">Adds the specified key and value to the dictionary.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-233"><xref:System.Collections.Generic.Dictionary%602.Item%2A>プロパティを使用して、 <xref:System.Collections.Generic.Dictionary%602>に存在しないキーの値を設定することによって、新しい要素を追加すること`myCollection[myKey] = myValue`もできます。 `myCollection(myKey) = myValue`たとえば、(Visual Basic の場合) です。</span><span class="sxs-lookup"><span data-stu-id="29a05-233">You can also use the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.Dictionary%602>; for example, `myCollection[myKey] = myValue` (in Visual Basic, `myCollection(myKey) = myValue`).</span></span> <span data-ttu-id="29a05-234">ただし、指定したキーがに既に<xref:System.Collections.Generic.Dictionary%602>存在する場合<xref:System.Collections.Generic.Dictionary%602.Item%2A>は、プロパティを設定すると古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="29a05-234">However, if the specified key already exists in the <xref:System.Collections.Generic.Dictionary%602>, setting the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="29a05-235">これに対して<xref:System.Collections.Generic.Dictionary%602.Add%2A> 、指定したキーを持つ値が既に存在する場合、メソッドは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="29a05-235">In contrast, the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method throws an exception if a value with the specified key already exists.</span></span>  
  
 <span data-ttu-id="29a05-236">プロパティ値が既に容量に等しい場合、の容量は<xref:System.Collections.Generic.Dictionary%602> 、内部配列が自動的に再割り当てされ、新しい要素が追加される前に既存の要素が新しい配列にコピーされます。 <xref:System.Collections.Generic.Dictionary%602.Count%2A></span><span class="sxs-lookup"><span data-stu-id="29a05-236">If the <xref:System.Collections.Generic.Dictionary%602.Count%2A> property value already equals the capacity, the capacity of the <xref:System.Collections.Generic.Dictionary%602> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="29a05-237">キーをにする`null`ことはできませんが、が`TValue`参照型である場合は値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="29a05-237">A key cannot be `null`, but a value can be, if `TValue` is a reference type.</span></span>  
  
 <span data-ttu-id="29a05-238">が<xref:System.Collections.Generic.Dictionary%602.Count%2A>容量より小さい場合、このメソッドは O (1) 操作にアプローチします。</span><span class="sxs-lookup"><span data-stu-id="29a05-238">If <xref:System.Collections.Generic.Dictionary%602.Count%2A> is less than the capacity, this method approaches an O(1) operation.</span></span> <span data-ttu-id="29a05-239">新しい要素を格納するために容量を増やす必要がある場合、このメソッドは`n`O () 操作`n`に<xref:System.Collections.Generic.Dictionary%602.Count%2A>なります。ここで、はです。</span><span class="sxs-lookup"><span data-stu-id="29a05-239">If the capacity must be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.</span></span>  
  
   
  
## Examples  

 [!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]
 
 <span data-ttu-id="29a05-240">次のコード例では、 <xref:System.Collections.Generic.Dictionary%602>文字列キーを使用して空の<xref:System.Collections.Generic.Dictionary%602.Add%2A>文字列を作成し、メソッドを使用していくつかの要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-240">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings with string keys and uses the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="29a05-241">この例では、 <xref:System.Collections.Generic.Dictionary%602.Add%2A>重複するキー <xref:System.ArgumentException>を追加しようとしたときに、メソッドがをスローすることを示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-241">The example demonstrates that the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="29a05-242">このコード例は、 <xref:System.Collections.Generic.Dictionary%602>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="29a05-242">This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class.</span></span>  
  
 [!code-cpp[Generic.Dictionary#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#2)]
 [!code-csharp-interactive[Generic.Dictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#2)]
 [!code-vb[Generic.Dictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-243"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-243"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="29a05-244">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</span><span class="sxs-lookup"><span data-stu-id="29a05-244">An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Dictionary`2.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.Dictionary`2.Item(`0)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="dictionary.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29a05-245"><see cref="T:System.Collections.Generic.Dictionary`2" /> からすべてのキーと値を削除します。</span><span class="sxs-lookup"><span data-stu-id="29a05-245">Removes all keys and values from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-246"><xref:System.Collections.Generic.Dictionary%602.Count%2A>プロパティは0に設定され、コレクションの要素から他のオブジェクトへの参照も解放されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-246">The <xref:System.Collections.Generic.Dictionary%602.Count%2A> property is set to 0, and references to other objects from elements of the collection are also released.</span></span> <span data-ttu-id="29a05-247">容量は変更されません。</span><span class="sxs-lookup"><span data-stu-id="29a05-247">The capacity remains unchanged.</span></span>  
  
 <span data-ttu-id="29a05-248">このメソッドは O (`n`) 操作です。ここ`n`で、はディクショナリの容量です。</span><span class="sxs-lookup"><span data-stu-id="29a05-248">This method is an O(`n`) operation, where `n` is the capacity of the dictionary.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-249">ディクショナリのキーが等しいかどうかを確認するために使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-249">Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> that is used to determine equality of keys for the dictionary.</span></span></summary>
        <value><span data-ttu-id="29a05-250">現在の <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> のキーが等しいかどうかを確認し、キーのハッシュ値を提供するために使用する <see cref="T:System.Collections.Generic.Dictionary`2" /> ジェネリック インターフェイスの実装。</span><span class="sxs-lookup"><span data-stu-id="29a05-250">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface implementation that is used to determine equality of keys for the current <see cref="T:System.Collections.Generic.Dictionary`2" /> and to provide hash values for the keys.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-251"><xref:System.Collections.Generic.Dictionary%602>キーが等しいかどうかを判断するには、等値の実装が必要です。</span><span class="sxs-lookup"><span data-stu-id="29a05-251"><xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal.</span></span> <span data-ttu-id="29a05-252">パラメーターを<xref:System.Collections.Generic.IEqualityComparer%601> `comparer`受け取るコンストラクターを使用して、ジェネリックインターフェイスの実装を指定できます。パラメーターを指定しない場合は、既定のジェネリック等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>値比較子が使用されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-252">You can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter; if you do not specify one, the default generic equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> is used.</span></span>  
  
 <span data-ttu-id="29a05-253">このプロパティの値の取得は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-253">Getting the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool&#xA;override this.ContainsKey : 'Key -&gt; bool" Usage="dictionary.ContainsKey key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29a05-254"><see cref="T:System.Collections.Generic.Dictionary`2" /> 内で検索されるキー。</span><span class="sxs-lookup"><span data-stu-id="29a05-254">The key to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></param>
        <summary><span data-ttu-id="29a05-255">指定したキーが <see cref="T:System.Collections.Generic.Dictionary`2" /> に格納されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="29a05-255">Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains the specified key.</span></span></summary>
        <returns><span data-ttu-id="29a05-256">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.Dictionary`2" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-256"><see langword="true" /> if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-257">このメソッドは、O (1) 操作にアプローチします。</span><span class="sxs-lookup"><span data-stu-id="29a05-257">This method approaches an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-258">メソッドを使用<xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A>して、 <xref:System.Collections.Generic.Dictionary%602.Add%2A>メソッドを呼び出す前にキーが存在するかどうかをテストする方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-258">The following code example shows how to use the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method.</span></span> <span data-ttu-id="29a05-259">また、 <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A>メソッドを使用して値を取得する方法についても説明します。これは、プログラムがディクショナリに含まれていないキーを頻繁に試行する場合に、値を取得する効率的な方法です。</span><span class="sxs-lookup"><span data-stu-id="29a05-259">It also shows how to use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the dictionary.</span></span> <span data-ttu-id="29a05-260">最後に、 <xref:System.Collections.Generic.Dictionary%602.Item%2A>プロパティ (のC#インデクサー) を使用して、キーが存在するかどうかをテストするための最も効率的な方法を示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-260">Finally, it shows the least efficient way to test whether keys exist, by using the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property (the indexer in C#).</span></span>  
  
 <span data-ttu-id="29a05-261">このコード例は、 <xref:System.Collections.Generic.Dictionary%602>クラスに対して用意されているより大きな例の一部です (`openWith`は、この例で使用されるディクショナリの名前です)。</span><span class="sxs-lookup"><span data-stu-id="29a05-261">This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).</span></span>  
  
 [!code-cpp[Generic.Dictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#6)]
 [!code-csharp[Generic.Dictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#6)]
 [!code-vb[Generic.Dictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#6)]  
[!code-cpp[Generic.Dictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.Dictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#5)]
[!code-vb[Generic.Dictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#5)]  
[!code-cpp[Generic.Dictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.Dictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#4)]
[!code-vb[Generic.Dictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-262"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-262"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public bool ContainsValue (TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsValue(!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsValue (value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsValue(TValue value);" />
      <MemberSignature Language="F#" Value="member this.ContainsValue : 'Value -&gt; bool" Usage="dictionary.ContainsValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="29a05-263"><see cref="T:System.Collections.Generic.Dictionary`2" /> 内で検索される値。</span><span class="sxs-lookup"><span data-stu-id="29a05-263">The value to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span> <span data-ttu-id="29a05-264">参照型の場合は <see langword="null" /> の値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="29a05-264">The value can be <see langword="null" /> for reference types.</span></span></param>
        <summary><span data-ttu-id="29a05-265"><see cref="T:System.Collections.Generic.Dictionary`2" /> に特定の値が格納されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="29a05-265">Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="29a05-266">指定した値を持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.Dictionary`2" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-266"><see langword="true" /> if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-267">このメソッドは、ディクショナリ内の値の<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>型`TValue`の既定の等値比較子を使用して、等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="29a05-267">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `TValue`, the type of values in the dictionary.</span></span>  
  
 <span data-ttu-id="29a05-268">このメソッドは、線形検索を実行します。したがって、平均実行時間はに<xref:System.Collections.Generic.Dictionary%602.Count%2A>比例します。</span><span class="sxs-lookup"><span data-stu-id="29a05-268">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.Dictionary%602.Count%2A>.</span></span> <span data-ttu-id="29a05-269">つまり、このメソッドは O (`n`) 演算です。ここ`n`で、 <xref:System.Collections.Generic.Dictionary%602.Count%2A>はです。</span><span class="sxs-lookup"><span data-stu-id="29a05-269">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.EqualityComparer`1.Default" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-270"><see cref="T:System.Collections.Generic.Dictionary`2" /> に格納されているキー/値ペアの数を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-270">Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="29a05-271"><see cref="T:System.Collections.Generic.Dictionary`2" /> に格納されているキー/値ペアの数。</span><span class="sxs-lookup"><span data-stu-id="29a05-271">The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-272">の<xref:System.Collections.Generic.Dictionary%602>容量は、 <xref:System.Collections.Generic.Dictionary%602>が格納できる要素の数です。</span><span class="sxs-lookup"><span data-stu-id="29a05-272">The capacity of a <xref:System.Collections.Generic.Dictionary%602> is the number of elements that the <xref:System.Collections.Generic.Dictionary%602> can store.</span></span> <span data-ttu-id="29a05-273">プロパティは、 <xref:System.Collections.Generic.Dictionary%602>に実際に存在する要素の数です。 <xref:System.Collections.Generic.Dictionary%602.Count%2A></span><span class="sxs-lookup"><span data-stu-id="29a05-273">The <xref:System.Collections.Generic.Dictionary%602.Count%2A> property is the number of elements that are actually in the <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
 <span data-ttu-id="29a05-274">容量は常に <xref:System.Collections.Generic.Dictionary%602.Count%2A> 以上です。</span><span class="sxs-lookup"><span data-stu-id="29a05-274">The capacity is always greater than or equal to <xref:System.Collections.Generic.Dictionary%602.Count%2A>.</span></span> <span data-ttu-id="29a05-275">要素を追加するときに <xref:System.Collections.Generic.Dictionary%602.Count%2A> が容量を上回る場合、容量は、古い要素をコピーして新しい要素を追加する前に、内部配列を自動的に再割り当てすることによって増加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-275">If <xref:System.Collections.Generic.Dictionary%602.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="29a05-276">このプロパティの値の取得は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-276">Getting the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureCapacity">
      <MemberSignature Language="C#" Value="public int EnsureCapacity (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EnsureCapacity(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureCapacity (capacity As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EnsureCapacity(int capacity);" />
      <MemberSignature Language="F#" Value="member this.EnsureCapacity : int -&gt; int" Usage="dictionary.EnsureCapacity capacity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="29a05-277">エントリの数。</span><span class="sxs-lookup"><span data-stu-id="29a05-277">The number of entries.</span></span></param>
        <summary><span data-ttu-id="29a05-278">バッキング ストレージをさらに拡張することなく、ディクショナリに指定したエントリ数まで格納できるようにします。</span><span class="sxs-lookup"><span data-stu-id="29a05-278">Ensures that the dictionary can hold up to a specified number of entries without any further expansion of its backing storage.</span></span></summary>
        <returns><span data-ttu-id="29a05-279"><see cref="T:System.Collections.Generic.Dictionary`2" /> の現在の容量。</span><span class="sxs-lookup"><span data-stu-id="29a05-279">The current capacity of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="29a05-280"><paramref name="capacity" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="29a05-280"><paramref name="capacity" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Dictionary`2/Enumerator&lt;!TKey, !TValue&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Dictionary(Of TKey, TValue).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Dictionary&lt;TKey, TValue&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;.Enumerator" Usage="dictionary.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29a05-281"><see cref="T:System.Collections.Generic.Dictionary`2" /> を反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-281">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></summary>
        <returns><span data-ttu-id="29a05-282"><see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> の <see cref="T:System.Collections.Generic.Dictionary`2" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="29a05-282">A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> structure for the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-283">列挙型の場合、各項目は値<xref:System.Collections.Generic.KeyValuePair%602>とそのキーを表す構造体です。</span><span class="sxs-lookup"><span data-stu-id="29a05-283">For purposes of enumeration, each item is a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.</span></span>  
  
 <span data-ttu-id="29a05-284">C#言語`foreach`のステートメント`for each` (でC++は、 `For Each` Visual Basic) は、列挙子の複雑さを隠蔽します。</span><span class="sxs-lookup"><span data-stu-id="29a05-284">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators.</span></span> <span data-ttu-id="29a05-285">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="29a05-285">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="29a05-286">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="29a05-286">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="29a05-287">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="29a05-287">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="29a05-288">この位置では、<xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="29a05-288">At this position, <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="29a05-289"><xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> の <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> 値を読み取る前に、メソッドを呼び出して、列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-289">You must call the <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="29a05-290">プロパティは、 <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A>メソッドが呼び出されるまで同じ要素を返します。 <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A></span><span class="sxs-lookup"><span data-stu-id="29a05-290">The <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property returns the same element until the <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> method is called.</span></span> <span data-ttu-id="29a05-291"><xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="29a05-291"><xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="29a05-292"><xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-292">If <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="29a05-293">列挙子がこの位置にある場合、後続の <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-293">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="29a05-294">の最後の呼び出し<xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A>が返さ`false`れた場合、 <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A>が未定義になります。</span><span class="sxs-lookup"><span data-stu-id="29a05-294">If the last call to <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="29a05-295"><xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-295">You cannot set <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="29a05-296">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="29a05-296">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="29a05-297">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに<xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A>無効化され、次のまたは<xref:System.Collections.Generic.Dictionary%602.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>の呼び出しでがスロー <xref:System.InvalidOperationException>されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-297">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Dictionary%602.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="29a05-298">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="29a05-298">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="29a05-299">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-299">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="29a05-300">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-300">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="29a05-301"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="29a05-301">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="29a05-302">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-302">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dictionary.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="29a05-303"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="29a05-303">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.</span></span></param>
        <param name="context"><span data-ttu-id="29a05-304"><see cref="T:System.Runtime.Serialization.StreamingContext" /> インスタンスに関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="29a05-304">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.</span></span></param>
        <summary><span data-ttu-id="29a05-305"><see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.Dictionary`2" /> インスタンスをシリアル化するために必要なデータを返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-305">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-306">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Generic.Dictionary%602.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="29a05-306">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-307"><paramref name="info" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-307"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="29a05-308">シリアル化サービスを提供します。</span><span class="sxs-lookup"><span data-stu-id="29a05-308">for providing serialization services.</span></span> <span data-ttu-id="29a05-309">関連付けられ<see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" />た列挙: セキュリティアクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span><span class="sxs-lookup"><span data-stu-id="29a05-309">Associated enumeration:   <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="29a05-310">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="29a05-310">requires full trust for the immediate caller.</span></span> <span data-ttu-id="29a05-311">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="29a05-311">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Value with get, set" Usage="System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Item(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29a05-312">取得または設定する値のキー。</span><span class="sxs-lookup"><span data-stu-id="29a05-312">The key of the value to get or set.</span></span></param>
        <summary><span data-ttu-id="29a05-313">指定されたキーに関連付けられている値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="29a05-313">Gets or sets the value associated with the specified key.</span></span></summary>
        <value><span data-ttu-id="29a05-314">指定されたキーに関連付けられている値。</span><span class="sxs-lookup"><span data-stu-id="29a05-314">The value associated with the specified key.</span></span> <span data-ttu-id="29a05-315">指定したキーが見つからなかった場合、get 操作は <see cref="T:System.Collections.Generic.KeyNotFoundException" /> をスローし、set 操作は指定したキーを持つ新しい要素を作成します。</span><span class="sxs-lookup"><span data-stu-id="29a05-315">If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element with the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-316">このプロパティは、 C# `myCollection[key]` (`myCollection(key)` Visual Basic で) という構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="29a05-316">This property provides the ability to access a specific element in the collection by using the following C# syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="29a05-317">また、 <xref:System.Collections.Generic.Dictionary%602.Item%2A>プロパティを使用して、に存在しないキーの値を設定することによって、 <xref:System.Collections.Generic.Dictionary%602>新しい要素を追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-317">You can also use the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.Dictionary%602>.</span></span> <span data-ttu-id="29a05-318">プロパティ値を設定すると、キーが<xref:System.Collections.Generic.Dictionary%602>にある場合は、そのキーに関連付けられている値が割り当てられた値に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="29a05-318">When you set the property value, if the key is in the <xref:System.Collections.Generic.Dictionary%602>, the value associated with that key is replaced by the assigned value.</span></span> <span data-ttu-id="29a05-319">キーがにない<xref:System.Collections.Generic.Dictionary%602>場合は、キーと値がディクショナリに追加されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-319">If the key is not in the <xref:System.Collections.Generic.Dictionary%602>, the key and value are added to the dictionary.</span></span> <span data-ttu-id="29a05-320">これに対して<xref:System.Collections.Generic.Dictionary%602.Add%2A> 、メソッドは既存の要素を変更しません。</span><span class="sxs-lookup"><span data-stu-id="29a05-320">In contrast, the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="29a05-321">キーをにする`null`ことはできませんが、値の型`TValue`が参照型である場合は値をにすることができます。</span><span class="sxs-lookup"><span data-stu-id="29a05-321">A key cannot be `null`, but a value can be, if the value type `TValue` is a reference type.</span></span>  
  
 <span data-ttu-id="29a05-322">このC#言語では[`this`](~/docs/csharp/language-reference/keywords/this.md) 、 <xref:System.Collections.Generic.Dictionary%602.Item%2A>プロパティを実装する代わりに、キーワードを使用してインデクサーを定義します。</span><span class="sxs-lookup"><span data-stu-id="29a05-322">The C# language uses the [`this`](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property.</span></span> <span data-ttu-id="29a05-323">Visual Basic は、<xref:System.Collections.Generic.Dictionary%602.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="29a05-323">Visual Basic implements <xref:System.Collections.Generic.Dictionary%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="29a05-324">このプロパティの値を取得または設定すると、O (1) 操作に近づくことになります。</span><span class="sxs-lookup"><span data-stu-id="29a05-324">Getting or setting the value of this property approaches an O(1) operation.</span></span>  
  
   
  
## Examples  

 [!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]
 
 <span data-ttu-id="29a05-325">次のコード例では<xref:System.Collections.Generic.Dictionary%602.Item%2A> 、プロパティ (のC#インデクサー) を使用して値を取得<xref:System.Collections.Generic.KeyNotFoundException>します。これは、要求されたキーが存在しない場合にがスローされ、キーに関連付けられている値を置き換えることができることを示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-325">The following code example uses the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="29a05-326">また、この例では、プログラム<xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A>がディクショナリに含まれていないキー値を試す必要がある場合に、より効率的に値を取得する方法として、メソッドを使用する方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-326">The example also shows how to use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</span></span>  
  
 <span data-ttu-id="29a05-327">このコード例は、 <xref:System.Collections.Generic.Dictionary%602>クラスに対して提供される大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="29a05-327">This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class.</span></span> <span data-ttu-id="29a05-328">`openWith`この例で使用するディクショナリの名前を指定します。</span><span class="sxs-lookup"><span data-stu-id="29a05-328">`openWith` is the name of the Dictionary used in this example.</span></span>  
  
 [!code-cpp[Generic.Dictionary#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#2)]
 [!code-csharp-interactive[Generic.Dictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#2)]
 [!code-vb[Generic.Dictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#2)]  
[!code-cpp[Generic.Dictionary#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#3)]
[!code-csharp[Generic.Dictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#3)]
[!code-vb[Generic.Dictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#3)]  
[!code-cpp[Generic.Dictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.Dictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#4)]
[!code-vb[Generic.Dictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#4)]  
[!code-cpp[Generic.Dictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.Dictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#5)]
[!code-vb[Generic.Dictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-329"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-329"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="29a05-330">プロパティが取得されましたが、コレクション内に <paramref name="key" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="29a05-330">The property is retrieved and <paramref name="key" /> does not exist in the collection.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.KeyCollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2/KeyCollection&lt;!TKey, !TValue&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As Dictionary(Of TKey, TValue).KeyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::Dictionary&lt;TKey, TValue&gt;::KeyCollection ^ Keys { System::Collections::Generic::Dictionary&lt;TKey, TValue&gt;::KeyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;.KeyCollection" Usage="System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;+KeyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-331"><see cref="T:System.Collections.Generic.Dictionary`2" /> 内のキーを格納しているコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-331">Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="29a05-332"><see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 内のキーを格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-332">A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-333">内<xref:System.Collections.Generic.Dictionary%602.KeyCollection>のキーの順序は指定されていませんが、 <xref:System.Collections.Generic.Dictionary%602.Values%2A>プロパティによって<xref:System.Collections.Generic.Dictionary%602.ValueCollection>返される内の関連付けられた値と同じ順序になります。</span><span class="sxs-lookup"><span data-stu-id="29a05-333">The order of the keys in the <xref:System.Collections.Generic.Dictionary%602.KeyCollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.Generic.Dictionary%602.ValueCollection> returned by the <xref:System.Collections.Generic.Dictionary%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="29a05-334">返さ<xref:System.Collections.Generic.Dictionary%602.KeyCollection>れるは静的なコピーではなく、 <xref:System.Collections.Generic.Dictionary%602.KeyCollection>は元<xref:System.Collections.Generic.Dictionary%602>ののキーを参照します。</span><span class="sxs-lookup"><span data-stu-id="29a05-334">The returned <xref:System.Collections.Generic.Dictionary%602.KeyCollection> is not a static copy; instead, the <xref:System.Collections.Generic.Dictionary%602.KeyCollection> refers back to the keys in the original <xref:System.Collections.Generic.Dictionary%602>.</span></span> <span data-ttu-id="29a05-335">したがって、へ<xref:System.Collections.Generic.Dictionary%602>の変更は、 <xref:System.Collections.Generic.Dictionary%602.KeyCollection>引き続きに反映されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-335">Therefore, changes to the <xref:System.Collections.Generic.Dictionary%602> continue to be reflected in the <xref:System.Collections.Generic.Dictionary%602.KeyCollection>.</span></span>  
  
 <span data-ttu-id="29a05-336">このプロパティの値の取得は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-336">Getting the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-337">次のコード例は、 <xref:System.Collections.Generic.Dictionary%602.Keys%2A>プロパティを使用してディクショナリ内のキーを列挙する方法と、ディクショナリのキーと値を列挙する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-337">The following code example shows how to enumerate the keys in the dictionary using the <xref:System.Collections.Generic.Dictionary%602.Keys%2A> property, and how to enumerate the keys and values in the dictionary.</span></span>  
  
 <span data-ttu-id="29a05-338">このコードは、コンパイルして実行できる大きな例の一部です (`openWith`この例で使用されているディクショナリの名前です)。</span><span class="sxs-lookup"><span data-stu-id="29a05-338">This code is part of a larger example that can be compiled and executed (`openWith` is the name of the Dictionary used in this example).</span></span> <span data-ttu-id="29a05-339">以下を参照してください。<xref:System.Collections.Generic.Dictionary%602></span><span class="sxs-lookup"><span data-stu-id="29a05-339">See <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
 [!code-cpp[Generic.Dictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#9)]
 [!code-csharp[Generic.Dictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#9)]
 [!code-vb[Generic.Dictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#9)]  
[!code-cpp[Generic.Dictionary#7](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#7)]
[!code-csharp[Generic.Dictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#7)]
[!code-vb[Generic.Dictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />
        <altmember cref="P:System.Collections.Generic.Dictionary`2.Values" />
      </Docs>
    </Member>
    <Member MemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="public virtual void OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnDeserialization (sender As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnDeserialization(System::Object ^ sender);" />
      <MemberSignature Language="F#" Value="abstract member OnDeserialization : obj -&gt; unit&#xA;override this.OnDeserialization : obj -&gt; unit" Usage="dictionary.OnDeserialization sender" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="29a05-340">逆シリアル化イベントのソース。</span><span class="sxs-lookup"><span data-stu-id="29a05-340">The source of the deserialization event.</span></span></param>
        <summary><span data-ttu-id="29a05-341"><see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="29a05-341">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-342">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Generic.Dictionary%602.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="29a05-342">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><span data-ttu-id="29a05-343">現在の <see cref="T:System.Collections.Generic.Dictionary`2" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</span><span class="sxs-lookup"><span data-stu-id="29a05-343">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with the current <see cref="T:System.Collections.Generic.Dictionary`2" /> instance is invalid.</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool&#xA;override this.Remove : 'Key -&gt; bool" Usage="dictionary.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29a05-344">削除する要素のキー。</span><span class="sxs-lookup"><span data-stu-id="29a05-344">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="29a05-345">指定したキーを持つ値を <see cref="T:System.Collections.Generic.Dictionary`2" /> から削除します。</span><span class="sxs-lookup"><span data-stu-id="29a05-345">Removes the value with the specified key from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></summary>
        <returns><span data-ttu-id="29a05-346">要素が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-346"><see langword="true" /> if the element is successfully found and removed; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="29a05-347">このメソッドは、<paramref name="key" /> が <see cref="T:System.Collections.Generic.Dictionary`2" /> に見つからない場合、<see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-347">This method returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-348">指定し<xref:System.Collections.Generic.Dictionary%602>たキーを持つ要素がに含まれてい<xref:System.Collections.Generic.Dictionary%602>ない場合、は変更されません。</span><span class="sxs-lookup"><span data-stu-id="29a05-348">If the <xref:System.Collections.Generic.Dictionary%602> does not contain an element with the specified key, the <xref:System.Collections.Generic.Dictionary%602> remains unchanged.</span></span> <span data-ttu-id="29a05-349">例外をスローすることはありません。</span><span class="sxs-lookup"><span data-stu-id="29a05-349">No exception is thrown.</span></span>  
  
 <span data-ttu-id="29a05-350">このメソッドは、O (1) 操作にアプローチします。</span><span class="sxs-lookup"><span data-stu-id="29a05-350">This method approaches an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-351">次のコード例は、 <xref:System.Collections.Generic.Dictionary%602.Remove%2A>メソッドを使用してディクショナリからキーと値のペアを削除する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-351">The following code example shows how to remove a key/value pair from a dictionary using the <xref:System.Collections.Generic.Dictionary%602.Remove%2A> method.</span></span>  
  
 <span data-ttu-id="29a05-352">このコード例は、 <xref:System.Collections.Generic.Dictionary%602>クラスに対して用意されているより大きな例の一部です (`openWith`は、この例で使用されるディクショナリの名前です)。</span><span class="sxs-lookup"><span data-stu-id="29a05-352">This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).</span></span>  
  
 [!code-cpp[Generic.Dictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#10)]
 [!code-csharp[Generic.Dictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#10)]
 [!code-vb[Generic.Dictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-353"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="29a05-353"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'Key *  -&gt; bool" Usage="dictionary.Remove (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="TValue" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Add (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (keyValuePair As KeyValuePair(Of TKey, TValue)) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair"><span data-ttu-id="29a05-354"><see cref="T:System.Collections.Generic.Dictionary`2" /> に追加するキーと値を表す <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="29a05-354">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure representing the key and value to add to the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></param>
        <summary><span data-ttu-id="29a05-355">指定した値を、指定したキーと共に <see cref="T:System.Collections.Generic.ICollection`1" /> に追加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-355">Adds the specified value to the <see cref="T:System.Collections.Generic.ICollection`1" /> with the specified key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-356"><paramref name="keyValuePair" /> のキーは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="29a05-356">The key of <paramref name="keyValuePair" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="29a05-357">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</span><span class="sxs-lookup"><span data-stu-id="29a05-357">An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Contains(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Function Contains (keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair"><span data-ttu-id="29a05-358"><see cref="T:System.Collections.Generic.KeyValuePair`2" /> 内で検索される <see cref="T:System.Collections.Generic.ICollection`1" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="29a05-358">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span></param>
        <summary><span data-ttu-id="29a05-359"><see cref="T:System.Collections.Generic.ICollection`1" /> に特定のキーと値が格納されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="29a05-359">Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific key and value.</span></span></summary>
        <returns><span data-ttu-id="29a05-360"><see langword="true" /> が <paramref name="keyValuePair" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-360"><see langword="true" /> if <paramref name="keyValuePair" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As KeyValuePair(Of TKey, TValue)(), index As Integer) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(cli::array &lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ array, int index) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="29a05-361"><see cref="T:System.Collections.Generic.ICollection`1" /> からコピーされる <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 要素のコピー先である <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の 1 次元配列。</span><span class="sxs-lookup"><span data-stu-id="29a05-361">The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> that is the destination of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span> <span data-ttu-id="29a05-362">配列には、0 から始まるインデックスが設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-362">The array must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="29a05-363">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</span><span class="sxs-lookup"><span data-stu-id="29a05-363">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="29a05-364">指定した配列インデックスを開始位置として、<see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の配列に <see cref="T:System.Collections.Generic.ICollection`1" /> の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="29a05-364">Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" />, starting at the specified array index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-365"><paramref name="array" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="29a05-365"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="29a05-366"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="29a05-366"><paramref name="index" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="29a05-367">コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="29a05-367">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey,TValue&gt;&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-368">ディクショナリが読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-368">Gets a value that indicates whether the dictionary is read-only.</span></span></summary>
        <value><span data-ttu-id="29a05-369"><see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-369"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="29a05-370"><see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-370">In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Remove(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair"><span data-ttu-id="29a05-371"><see cref="T:System.Collections.Generic.Dictionary`2" /> から削除するキーと値を表す <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="29a05-371">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure representing the key and value to remove from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></param>
        <summary><span data-ttu-id="29a05-372">ディクショナリからキーと値を削除します。</span><span class="sxs-lookup"><span data-stu-id="29a05-372">Removes a key and value from the dictionary.</span></span></summary>
        <returns><span data-ttu-id="29a05-373"><paramref name="keyValuePair" /> で表されたキーと値が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-373"><see langword="true" /> if the key and value represented by <paramref name="keyValuePair" /> is successfully found and removed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="29a05-374">このメソッドは、<paramref name="keyValuePair" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからない場合、<see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-374">This method returns <see langword="false" /> if <paramref name="keyValuePair" /> is not found in the <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary&lt;TKey,TValue&gt;#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection(Of TKey) Implements IDictionary(Of TKey, TValue).Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;TKey&gt; ^ System::Collections::Generic::IDictionary&lt;TKey,TValue&gt;::Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-375"><see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-375">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="29a05-376"><see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <paramref name="TKey" /> 型の <see cref="T:System.Collections.Generic.IDictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-376">An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <paramref name="TKey" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary&lt;TKey,TValue&gt;#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection(Of TValue) Implements IDictionary(Of TKey, TValue).Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;TValue&gt; ^ System::Collections::Generic::IDictionary&lt;TKey,TValue&gt;::Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-377"><see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-377">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="29a05-378"><see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <paramref name="TValue" /> 型の <see cref="T:System.Collections.Generic.IDictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-378">An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <paramref name="TValue" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue)) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29a05-379">コレクションを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-379">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="29a05-380">コレクションの反復処理に使用できる列挙子。</span><span class="sxs-lookup"><span data-stu-id="29a05-380">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary&lt;TKey,TValue&gt;#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As IEnumerable(Of TKey) Implements IReadOnlyDictionary(Of TKey, TValue).Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IEnumerable&lt;TKey&gt; ^ System::Collections::Generic::IReadOnlyDictionary&lt;TKey,TValue&gt;::Keys { System::Collections::Generic::IEnumerable&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-381"><see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> のキーを格納しているコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-381">Gets a collection containing the keys of the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="29a05-382"><see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> のキーを格納しているコレクション。</span><span class="sxs-lookup"><span data-stu-id="29a05-382">A collection containing the keys of the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary&lt;TKey,TValue&gt;#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As IEnumerable(Of TValue) Implements IReadOnlyDictionary(Of TKey, TValue).Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IEnumerable&lt;TValue&gt; ^ System::Collections::Generic::IReadOnlyDictionary&lt;TKey,TValue&gt;::Values { System::Collections::Generic::IEnumerable&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-383"><see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> の値を格納しているコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-383">Gets a collection containing the values of the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="29a05-384"><see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 内の値を格納しているコレクション。</span><span class="sxs-lookup"><span data-stu-id="29a05-384">A collection containing the values of the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="29a05-385"><see cref="T:System.Collections.Generic.ICollection`1" /> から要素がコピーされる 1 次元の配列。</span><span class="sxs-lookup"><span data-stu-id="29a05-385">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />.</span></span> <span data-ttu-id="29a05-386">配列には、0 から始まるインデックスが設定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-386">The array must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="29a05-387">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</span><span class="sxs-lookup"><span data-stu-id="29a05-387">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="29a05-388">指定した配列インデックスを開始位置として、配列に <see cref="T:System.Collections.Generic.ICollection`1" /> の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="29a05-388">Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-389">から<xref:System.Collections.Generic.Dictionary%602> コピー <xref:System.Collections.Generic.KeyValuePair%602> された各要素は、値とそのキーを表す構造体です。</span><span class="sxs-lookup"><span data-stu-id="29a05-389">Each element copied from a <xref:System.Collections.Generic.Dictionary%602> is a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="29a05-390">変換<xref:System.Collections.ICollection>元の型を変換先`array`の型に自動的にキャストできない場合、の非ジェネリックの<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>実装で<xref:System.InvalidCastException>はがスローされますが<xref:System.ArgumentException>、ジェネリック実装ではがスローされます。</span><span class="sxs-lookup"><span data-stu-id="29a05-390">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw an <xref:System.InvalidCastException>, whereas the generic implementations throw an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="29a05-391">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.Generic.Dictionary%602.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="29a05-391">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-392"><paramref name="array" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-392"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="29a05-393"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="29a05-393"><paramref name="index" /> is less than 0.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="29a05-394"><paramref name="array" /> が多次元です。</span><span class="sxs-lookup"><span data-stu-id="29a05-394"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="29a05-395">- または -</span><span class="sxs-lookup"><span data-stu-id="29a05-395">-or-</span></span> 
 <span data-ttu-id="29a05-396"><paramref name="array" /> には、0 から始まるインデックス番号がありません。</span><span class="sxs-lookup"><span data-stu-id="29a05-396"><paramref name="array" /> does not have zero-based indexing.</span></span>  
  
<span data-ttu-id="29a05-397">- または -</span><span class="sxs-lookup"><span data-stu-id="29a05-397">-or-</span></span> 
<span data-ttu-id="29a05-398">コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</span><span class="sxs-lookup"><span data-stu-id="29a05-398">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span>  
  
<span data-ttu-id="29a05-399">または</span><span class="sxs-lookup"><span data-stu-id="29a05-399">-or-</span></span> 
<span data-ttu-id="29a05-400">コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="29a05-400">The type of the source <see cref="T:System.Collections.Generic.ICollection`1" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-401"><see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-401">Gets a value that indicates whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="29a05-402"><see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-402"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="29a05-403"><see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-403">In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-404"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="29a05-404">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="29a05-405">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="29a05-405">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="29a05-406">コレクションが同期されている場合でも、他のスレッドでコレクションを変更できます。これにより、列挙子が例外をスローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-406">Even when a collection is synchronized, other threads can still modify the collection, which can cause the enumerator to throw an exception.</span></span> <span data-ttu-id="29a05-407">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="29a05-407">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="29a05-408">プロパティ<xref:System.Collections.ICollection.SyncRoot%2A>は、への<xref:System.Collections.ICollection>アクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-408">The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="29a05-409">同期は、コレクションにアクセスする前にすべてのスレッドがオブジェクトをロックする場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="29a05-409">Synchronization is effective only if all threads lock the object before accessing the collection.</span></span>  
  
 <span data-ttu-id="29a05-410">このプロパティの値の取得は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-410">Getting the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-411"><see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-411">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="29a05-412"><see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="29a05-412">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-413"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="29a05-413">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="29a05-414">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="29a05-414">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="29a05-415">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-415">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="29a05-416">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-416">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="29a05-417">プロパティ<xref:System.Collections.ICollection.SyncRoot%2A>は、への<xref:System.Collections.ICollection>アクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-417">The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="29a05-418">同期は、コレクションにアクセスする前にすべてのスレッドがオブジェクトをロックする場合にのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="29a05-418">Synchronization is effective only if all threads lock the object before accessing the collection.</span></span> <span data-ttu-id="29a05-419">次のコードは、、 <xref:System.Collections.ICollection.SyncRoot%2A> C++、および Visual Basic のC#プロパティを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-419">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="29a05-420">このプロパティの値の取得は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-420">Getting the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Add">
      <MemberSignature Language="C#" Value="void IDictionary.Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As Object, value As Object) Implements IDictionary.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Add(System::Object ^ key, System::Object ^ value) = System::Collections::IDictionary::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29a05-421">キーとして使用するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="29a05-421">The object to use as the key.</span></span></param>
        <param name="value"><span data-ttu-id="29a05-422">値として使用するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="29a05-422">The object to use as the value.</span></span></param>
        <summary><span data-ttu-id="29a05-423">指定したキーと値をディクショナリに追加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-423">Adds the specified key and value to the dictionary.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-424">また、 <xref:System.Collections.IDictionary.Item%2A>プロパティを使用して、ディクショナリに存在しないキーの値 (など) `myCollection["myNonexistentKey"] = myValue`を設定することによって、新しい要素を追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-424">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="29a05-425">ただし、指定したキーがディクショナリに既に存在する場合<xref:System.Collections.IDictionary.Item%2A>は、プロパティを設定すると古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="29a05-425">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="29a05-426">これに対して<xref:System.Collections.IDictionary.Add%2A> 、指定したキーが既に存在する場合、メソッドは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="29a05-426">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method throws an exception if the specified key already exists.</span></span>  
  
 <span data-ttu-id="29a05-427">が<xref:System.Collections.Generic.Dictionary%602.Count%2A>容量より小さい場合、このメソッドは O (1) 操作にアプローチします。</span><span class="sxs-lookup"><span data-stu-id="29a05-427">If <xref:System.Collections.Generic.Dictionary%602.Count%2A> is less than the capacity, this method approaches an O(1) operation.</span></span> <span data-ttu-id="29a05-428">新しい要素を格納するために容量を増やす必要がある場合、このメソッドは O`n`() 操作に`n`なり<xref:System.Collections.Generic.Dictionary%602.Count%2A>ます。ここで、はです。</span><span class="sxs-lookup"><span data-stu-id="29a05-428">If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-429">次のコード例は、 <xref:System.Collections.Generic.Dictionary%602> <xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスを使用してクラスにアクセスする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-429">The following code example shows how to access the <xref:System.Collections.Generic.Dictionary%602> class through the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="29a05-430">このコード例では、 <xref:System.Collections.Generic.Dictionary%602>文字列キーを使用して空の<xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A>文字列を作成し、メソッドを使用していくつかの要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="29a05-430">The code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings with string keys and uses the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method to add some elements.</span></span> <span data-ttu-id="29a05-431">この例では、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A>重複するキー <xref:System.ArgumentException>を追加しようとしたとき、または間違ったデータ型のキーまたは値が指定されたときに、メソッドがをスローすることを示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-431">The example demonstrates that the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.</span></span>  
  
 <span data-ttu-id="29a05-432">このコード例は、 <xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスの他のいくつかのメンバーの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-432">The code example demonstrates the use of several other members of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 [!code-csharp[Generic.Dictionary.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.Dictionary.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-433"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-433"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="29a05-434"><paramref name="key" /> が、<see cref="T:System.Collections.Generic.Dictionary`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。</span><span class="sxs-lookup"><span data-stu-id="29a05-434"><paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span>  
  
<span data-ttu-id="29a05-435">- または -</span><span class="sxs-lookup"><span data-stu-id="29a05-435">-or-</span></span> 
 <span data-ttu-id="29a05-436"><paramref name="value" /> が、<see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値の型である <paramref name="TValue" /> に代入できない型です。</span><span class="sxs-lookup"><span data-stu-id="29a05-436"><paramref name="value" /> is of a type that is not assignable to <paramref name="TValue" />, the type of values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span>  
  
<span data-ttu-id="29a05-437">- または -</span><span class="sxs-lookup"><span data-stu-id="29a05-437">-or-</span></span> 
<span data-ttu-id="29a05-438">同じキーを持つ値が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</span><span class="sxs-lookup"><span data-stu-id="29a05-438">A value with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></exception>
        <altmember cref="P:System.Collections.IDictionary.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Contains">
      <MemberSignature Language="C#" Value="bool IDictionary.Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IDictionary.Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (key As Object) As Boolean Implements IDictionary.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IDictionary.Contains(System::Object ^ key) = System::Collections::IDictionary::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29a05-439"><see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</span><span class="sxs-lookup"><span data-stu-id="29a05-439">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</span></span></param>
        <summary><span data-ttu-id="29a05-440">指定したキーの要素が <see cref="T:System.Collections.IDictionary" /> に格納されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="29a05-440">Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</span></span></summary>
        <returns><span data-ttu-id="29a05-441">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-441"><see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-442">がのキー `false`型`key` `TKey` に代入できない型の場合、このメソッドは <xref:System.Collections.Generic.Dictionary%602> を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-442">This method returns `false` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
 <span data-ttu-id="29a05-443">このメソッドは、O (1) 操作にアプローチします。</span><span class="sxs-lookup"><span data-stu-id="29a05-443">This method approaches an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-444">次のコード例は、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Contains%2A> <xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスのメソッドをと共<xref:System.Collections.Generic.Dictionary%602>に使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-444">The following code example shows how to use the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Contains%2A> method of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.Dictionary%602>.</span></span> <span data-ttu-id="29a05-445">この例では、間違った`false`データ型のキーが指定された場合に、メソッドからが返されることを示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-445">The example demonstrates that the method returns `false` if a key of the wrong data type is supplied.</span></span>  
  
 <span data-ttu-id="29a05-446">このコード例は、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A>メソッドに指定された出力を含む、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="29a05-446">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.Dictionary.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.Dictionary.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#6)]
[!code-vb[Generic.Dictionary.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#6)]  
[!code-csharp[Generic.Dictionary.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-447"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-447"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IDictionaryEnumerator Implements IDictionary.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IDictionaryEnumerator ^ System.Collections.IDictionary.GetEnumerator() = System::Collections::IDictionary::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29a05-448"><see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-448">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</span></span></summary>
        <returns><span data-ttu-id="29a05-449"><see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-449">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-450">列挙型の場合、各項目は<xref:System.Collections.DictionaryEntry>構造体です。</span><span class="sxs-lookup"><span data-stu-id="29a05-450">For purposes of enumeration, each item is a <xref:System.Collections.DictionaryEntry> structure.</span></span>  
  
 <span data-ttu-id="29a05-451">C#言語`foreach`のステートメント`for each` (でC++は、 `For Each` Visual Basic) は、列挙子の複雑さを隠蔽します。</span><span class="sxs-lookup"><span data-stu-id="29a05-451">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators.</span></span> <span data-ttu-id="29a05-452">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="29a05-452">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="29a05-453">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="29a05-453">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="29a05-454">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="29a05-454">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="29a05-455"><xref:System.Collections.IEnumerator.Reset%2A> メソッドは、この位置に列挙子を戻します。</span><span class="sxs-lookup"><span data-stu-id="29a05-455">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span>  <span data-ttu-id="29a05-456">この位置では、<xref:System.Collections.IDictionaryEnumerator.Entry%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="29a05-456">At this position, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined.</span></span> <span data-ttu-id="29a05-457">そのため、<xref:System.Collections.IDictionaryEnumerator.Entry%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.MoveNext%2A> メソッドを呼び出し、列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-457">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>.</span></span>  
  
 <span data-ttu-id="29a05-458">プロパティは、メソッド<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>メソッドが呼び出されるまで、同じ要素を返します。 <xref:System.Collections.IDictionaryEnumerator.Entry%2A></span><span class="sxs-lookup"><span data-stu-id="29a05-458">The <xref:System.Collections.IDictionaryEnumerator.Entry%2A> property returns the same element until either the <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="29a05-459"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IDictionaryEnumerator.Entry%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="29a05-459"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.</span></span>  
  
 <span data-ttu-id="29a05-460"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-460">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="29a05-461">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-461">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="29a05-462">の最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>が返さ`false`れた場合、 <xref:System.Collections.IDictionaryEnumerator.Entry%2A>が未定義になります。</span><span class="sxs-lookup"><span data-stu-id="29a05-462">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined.</span></span> <span data-ttu-id="29a05-463"><xref:System.Collections.IDictionaryEnumerator.Entry%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="29a05-463">To set <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="29a05-464">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="29a05-464">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="29a05-465">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに<xref:System.Collections.IEnumerator.MoveNext%2A>無効化され、次のまたは<xref:System.Collections.IEnumerator.Reset%2A>の呼び出しでがスロー <xref:System.InvalidOperationException>されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-465">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="29a05-466">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="29a05-466">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="29a05-467">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-467">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="29a05-468">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-468">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="29a05-469"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="29a05-469">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="29a05-470">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-470">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-471">次のコード例では、列挙子の使用を非`foreach`表示にするステートメント (`For Each` Visual Basic `for each`ではC++) を使用して、ディクショナリ内のキーと値のペアを列挙する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-471">The following code example shows how to enumerate the key/value pairs in the dictionary by using the `foreach` statement (`For Each` in Visual Basic, `for each` in C++), which hides the use of the enumerator.</span></span> <span data-ttu-id="29a05-472">特に、 <xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスの列挙子は<xref:System.Collections.Generic.KeyValuePair%602>オブジェクトでは<xref:System.Collections.DictionaryEntry>なくオブジェクトを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="29a05-472">In particular, note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="29a05-473">このコード例は、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A>メソッドに指定された出力を含む、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="29a05-473">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.Dictionary.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.Dictionary.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.Dictionary.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.Dictionary.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IDictionary.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IDictionary::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-474"><see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-474">Gets a value that indicates whether the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="29a05-475"><see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-475"><see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="29a05-476"><see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-476">In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-477">固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-477">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="29a05-478">固定サイズのコレクションは、要素の追加と削除を防ぐラッパーを持つ単純なコレクションです。したがって、要素の追加や削除など、基になるコレクションに変更が加えられた場合、固定サイズのコレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-478">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="29a05-479">このプロパティの値の取得は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-479">Getting the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IDictionary.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IDictionary::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-480"><see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-480">Gets a value that indicates whether the <see cref="T:System.Collections.IDictionary" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="29a05-481"><see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-481"><see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="29a05-482"><see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-482">In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-483">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="29a05-483">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="29a05-484">読み取り専用のコレクションは、単純にコレクションを変更できないようにするラッパーを含むコレクションです。したがって、基になるコレクションに変更が加えられた場合、読み取り専用コレクションにはこれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-484">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="29a05-485">このプロパティの値の取得は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-485">Getting the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionary.Item[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IDictionary.Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(key As Object) As Object Implements IDictionary.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IDictionary::Item[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29a05-486">取得する値のキー。</span><span class="sxs-lookup"><span data-stu-id="29a05-486">The key of the value to get.</span></span></param>
        <summary><span data-ttu-id="29a05-487">指定したキーの値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="29a05-487">Gets or sets the value with the specified key.</span></span></summary>
        <value><span data-ttu-id="29a05-488"><paramref name="key" /> がディクショナリにない場合、または <paramref name="key" /> が <see cref="T:System.Collections.Generic.Dictionary`2" /> のキー型 <paramref name="TKey" /> に代入できる型ではない場合は、指定したキーに関連付けられた値または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-488">The value associated with the specified key, or <see langword="null" /> if <paramref name="key" /> is not in the dictionary or <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-489">このプロパティは、 C# `myCollection[key]` (`myCollection(key)` Visual Basic で) という構文を使用して、コレクション内の特定の値にアクセスする機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="29a05-489">This property provides the ability to access a specific value in the collection by using the following C# syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="29a05-490">また、 <xref:System.Collections.IDictionary.Item%2A>プロパティを使用して、ディクショナリに存在しないキーの値 (など) `myCollection["myNonexistentKey"] = myValue`を設定することによって、新しい要素を追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-490">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="29a05-491">ただし、指定したキーがディクショナリに既に存在する場合<xref:System.Collections.IDictionary.Item%2A>は、プロパティを設定すると古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="29a05-491">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="29a05-492">これに対して<xref:System.Collections.IDictionary.Add%2A> 、メソッドは既存の要素を変更しません。</span><span class="sxs-lookup"><span data-stu-id="29a05-492">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="29a05-493">このC#言語では[](~/docs/csharp/language-reference/keywords/this.md) 、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A>プロパティを実装する代わりに、this キーワードを使用してインデクサーを定義します。</span><span class="sxs-lookup"><span data-stu-id="29a05-493">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A> property.</span></span> <span data-ttu-id="29a05-494">Visual Basic は、<xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="29a05-494">Visual Basic implements <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="29a05-495">このプロパティの値を取得または設定すると、O (1) 操作に近づくことになります。</span><span class="sxs-lookup"><span data-stu-id="29a05-495">Getting or setting the value of this property approaches an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-496">次のコード例は、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A> <xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスのプロパティ (のインデクサー C#) をと共<xref:System.Collections.Generic.Dictionary%602>に使用する方法を示しています。また、 <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType>プロパティとプロパティの違いについて説明します。</span><span class="sxs-lookup"><span data-stu-id="29a05-496">The following code example shows how to use the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A> property (the indexer in C#) of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.Dictionary%602>, and ways the property differs from the <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="29a05-497">この例では、 <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType>プロパティ<xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType>と同様に、プロパティは既存のキーに関連付けられている値を変更でき、指定されたキーがディクショナリにない場合に新しいキーと値のペアを追加するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="29a05-497">The example shows that, like the <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType> property, the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the dictionary.</span></span> <span data-ttu-id="29a05-498">また、この例では、 <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType>プロパティ<xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType>とは異なり、がディクショナリに含まれ`key`ておらず、代わりに null 参照を返す場合に、プロパティが例外をスローしないことも示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-498">The example also shows that unlike the <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType> property, the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property does not throw an exception if `key` is not in the dictionary, returning a null reference instead.</span></span> <span data-ttu-id="29a05-499">最後に、この例では、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType>が正しいデータ型でない`key`場合に、プロパティを取得すると null 参照が返されることを示し`key`ています。また、が正しいデータ型でない場合は、プロパティを設定すると例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="29a05-499">Finally, the example demonstrates that getting the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property returns a null reference if `key` is not the correct data type, and that setting the property throws an exception if `key` is not the correct data type.</span></span>  
  
 <span data-ttu-id="29a05-500">このコード例は、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A>メソッドに指定された出力を含む、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="29a05-500">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.Dictionary.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.Dictionary.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#3)]
[!code-vb[Generic.Dictionary.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#3)]  
[!code-csharp[Generic.Dictionary.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.Dictionary.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#4)]  
[!code-csharp[Generic.Dictionary.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-501"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="29a05-501"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="29a05-502">値を代入しようとしていますが、<paramref name="key" /> は、<see cref="T:System.Collections.Generic.Dictionary`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。</span><span class="sxs-lookup"><span data-stu-id="29a05-502">A value is being assigned, and <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span>  
  
<span data-ttu-id="29a05-503">- または -</span><span class="sxs-lookup"><span data-stu-id="29a05-503">-or-</span></span> 
<span data-ttu-id="29a05-504">値を代入しようとしていますが、<paramref name="value" /> は、<see cref="T:System.Collections.Generic.Dictionary`2" /> の値の型 <paramref name="TValue" /> に代入できない型です。</span><span class="sxs-lookup"><span data-stu-id="29a05-504">A value is being assigned, and <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></exception>
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Keys">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection Implements IDictionary.Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System::Collections::IDictionary::Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-505"><see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-505">Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</span></span></summary>
        <value><span data-ttu-id="29a05-506"><see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-506">An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-507">返される<xref:System.Collections.ICollection>のキーの順序は指定されていませんが、 <xref:System.Collections.IDictionary.Values%2A>プロパティによって<xref:System.Collections.ICollection>返される内の対応する値と同じ順序であることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-507">The order of the keys in the returned <xref:System.Collections.ICollection> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.</span></span>  
  
 <span data-ttu-id="29a05-508">このプロパティの値の取得は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-508">Getting the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-509">次のコード例は、と共<xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Keys%2A> <xref:System.Collections.Generic.Dictionary%602>に<xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスのプロパティを使用して、ディクショナリ内のキーを一覧表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-509">The following code example shows how to use the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Keys%2A> property of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.Dictionary%602>, to list the keys in the dictionary.</span></span> <span data-ttu-id="29a05-510">この例では、ディクショナリ内のキーと値のペアを列挙する方法も示しています。<xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスの列挙子は、 <xref:System.Collections.Generic.KeyValuePair%602>オブジェクトで<xref:System.Collections.DictionaryEntry>はなくオブジェクトを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="29a05-510">The example also shows how to enumerate the key/value pairs in the dictionary; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="29a05-511">このコード例は、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A>メソッドに指定された出力を含む、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="29a05-511">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.Dictionary.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.Dictionary.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#9)]
[!code-vb[Generic.Dictionary.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#9)]  
[!code-csharp[Generic.Dictionary.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.Dictionary.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.Dictionary.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Remove">
      <MemberSignature Language="C#" Value="void IDictionary.Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (key As Object) Implements IDictionary.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Remove(System::Object ^ key) = System::Collections::IDictionary::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29a05-512">削除する要素のキー。</span><span class="sxs-lookup"><span data-stu-id="29a05-512">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="29a05-513">指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</span><span class="sxs-lookup"><span data-stu-id="29a05-513">Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-514">このメソッドは、O (1) 操作にアプローチします。</span><span class="sxs-lookup"><span data-stu-id="29a05-514">This method approaches an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-515">次のコード例は、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Remove%2A> <xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスのをと共<xref:System.Collections.Generic.Dictionary%602>に使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-515">The following code example shows how to use the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Remove%2A> of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
 <span data-ttu-id="29a05-516">このコード例は、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A>メソッドに指定された出力を含む、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="29a05-516">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.Dictionary.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.Dictionary.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#10)]
[!code-vb[Generic.Dictionary.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#10)]  
[!code-csharp[Generic.Dictionary.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-517"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-517"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Values">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection Implements IDictionary.Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System::Collections::IDictionary::Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-518"><see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-518">Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</span></span></summary>
        <value><span data-ttu-id="29a05-519"><see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-519">An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-520">返される<xref:System.Collections.ICollection>の値の順序は指定されていませんが、 <xref:System.Collections.IDictionary.Keys%2A>プロパティによって<xref:System.Collections.ICollection>返される内の対応するキーと同じ順序であることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-520">The order of the values in the returned <xref:System.Collections.ICollection> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="29a05-521">このプロパティの値の取得は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-521">Getting the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-522">次のコード例は、と共<xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Values%2A> <xref:System.Collections.Generic.Dictionary%602>に<xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスのプロパティを使用して、ディクショナリ内の値を一覧表示する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-522">The following code example shows how to use the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Values%2A> property of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.Dictionary%602>, to list the values in the dictionary.</span></span> <span data-ttu-id="29a05-523">この例では、ディクショナリ内のキーと値のペアを列挙する方法も示しています。<xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスの列挙子は、 <xref:System.Collections.Generic.KeyValuePair%602>オブジェクトで<xref:System.Collections.DictionaryEntry>はなくオブジェクトを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="29a05-523">The example also shows how to enumerate the key/value pairs in the dictionary; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="29a05-524">このコード例は、 <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A>メソッドに指定された出力を含む、より大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="29a05-524">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.Dictionary.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.Dictionary.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#8)]
[!code-vb[Generic.Dictionary.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#8)]  
[!code-csharp[Generic.Dictionary.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.Dictionary.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.Dictionary.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29a05-525">コレクションを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-525">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="29a05-526">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-526">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="29a05-527">C#言語`foreach`のステートメント`for each` (でC++は、 `For Each` Visual Basic) は、列挙子の複雑さを隠蔽します。</span><span class="sxs-lookup"><span data-stu-id="29a05-527">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators.</span></span> <span data-ttu-id="29a05-528">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="29a05-528">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="29a05-529">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="29a05-529">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="29a05-530">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="29a05-530">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="29a05-531"><xref:System.Collections.IEnumerator.Reset%2A> メソッドは、この位置に列挙子を戻します。</span><span class="sxs-lookup"><span data-stu-id="29a05-531">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span>  <span data-ttu-id="29a05-532">この位置では、<xref:System.Collections.IEnumerator.Current%2A> プロパティは定義されていません。</span><span class="sxs-lookup"><span data-stu-id="29a05-532">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="29a05-533">そのため、<xref:System.Collections.IEnumerator.Current%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.MoveNext%2A> メソッドを呼び出し、列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-533">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="29a05-534">プロパティは、メソッド<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>メソッドが呼び出されるまで、同じ要素を返します。 <xref:System.Collections.IEnumerator.Current%2A></span><span class="sxs-lookup"><span data-stu-id="29a05-534">The <xref:System.Collections.IEnumerator.Current%2A> property returns the same element until either the <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="29a05-535"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="29a05-535"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="29a05-536"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-536">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="29a05-537">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="29a05-537">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="29a05-538">の最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>が返さ`false`れた場合、 <xref:System.Collections.IEnumerator.Current%2A>が未定義になります。</span><span class="sxs-lookup"><span data-stu-id="29a05-538">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="29a05-539"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="29a05-539">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="29a05-540">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="29a05-540">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="29a05-541">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに<xref:System.Collections.IEnumerator.MoveNext%2A>無効化され、次のまたは<xref:System.Collections.IEnumerator.Reset%2A>の呼び出しでがスロー <xref:System.InvalidOperationException>されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-541">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="29a05-542">列挙子には、コレクションへの排他アクセスがありません。したがって、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="29a05-542">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span>  <span data-ttu-id="29a05-543">列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="29a05-543">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="29a05-544">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="29a05-544">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="29a05-545"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="29a05-545">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="29a05-546">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-546">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="dictionary.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="29a05-547">このディクショナリの容量を、そのすべてのエントリが最初に初期化されていた場合に想定される容量に設定します。</span><span class="sxs-lookup"><span data-stu-id="29a05-547">Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="29a05-548">このメソッドは、ディクショナリに新しい要素が追加されないことがわかった場合に、メモリのオーバーヘッドを最小限に抑えるために使用できます。</span><span class="sxs-lookup"><span data-stu-id="29a05-548">This method can be used to minimize memory overhead once it is known that no new elements will be added to the dictionary.</span></span> <span data-ttu-id="29a05-549">最小サイズのストレージアレイを割り当てるには、次のステートメントを実行します。</span><span class="sxs-lookup"><span data-stu-id="29a05-549">To allocate  a minimum size storage array, execute the following statements:</span></span>

```csharp
dictionary.Clear();
dictionary.TrimExcess();
```

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess(int capacity);" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : int -&gt; unit" Usage="dictionary.TrimExcess capacity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="29a05-550">新しい容量。</span><span class="sxs-lookup"><span data-stu-id="29a05-550">The new capacity.</span></span></param>
        <summary><span data-ttu-id="29a05-551">バッキング ストレージをさらに拡張することなく、指定したエントリ数まで格納できるようにこのディクショナリの容量を設定します。</span><span class="sxs-lookup"><span data-stu-id="29a05-551">Sets the capacity of this dictionary to hold up a specified number of entries without any further expansion of its backing storage.</span></span></summary>
        <remarks><span data-ttu-id="29a05-552">このメソッドを使用すると、新しい要素が追加されないことがわかった場合に、メモリのオーバーヘッドを最小限に抑えることができます。</span><span class="sxs-lookup"><span data-stu-id="29a05-552">This method can be used to minimize the memory overhead once it is known that no new elements will be added.</span></span></remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="29a05-553"><paramref name="capacity" /> は <see cref="T:System.Collections.Generic.Dictionary`2" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="29a05-553"><paramref name="capacity" /> is less than <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryAdd">
      <MemberSignature Language="C#" Value="public bool TryAdd (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAdd(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryAdd (key As TKey, value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryAdd(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="member this.TryAdd : 'Key * 'Value -&gt; bool" Usage="dictionary.TryAdd (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="TValue" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29a05-554">追加する要素のキー。</span><span class="sxs-lookup"><span data-stu-id="29a05-554">The key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="29a05-555">追加する要素の値。</span><span class="sxs-lookup"><span data-stu-id="29a05-555">The value of the element to add.</span></span> <span data-ttu-id="29a05-556"><see langword="null" />を指定できます。</span><span class="sxs-lookup"><span data-stu-id="29a05-556">It can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="29a05-557">ディクショナリに対して、指定したキーと値の追加を試みます。</span><span class="sxs-lookup"><span data-stu-id="29a05-557">Attempts to add the specified key and value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="29a05-558">キー/値ペアがディクショナリに正常に追加削除された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-558"><see langword="true" /> if the key/value pair was added to the dictionary successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="29a05-559"><xref:System.Collections.Generic.Dictionary%602.Add%2A>メソッドとは異なり、このメソッドは、指定されたキーを持つ要素がディクショナリに存在する場合、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="29a05-559">Unlike the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method, this method doesn't throw an exception if the element with the given key exists in the dictionary.</span></span> <span data-ttu-id="29a05-560">ディクショナリインデクサーとは異なり`TryAdd` 、では、指定されたキーを持つ要素がディクショナリ内に存在する場合、は要素をオーバーライドしません。</span><span class="sxs-lookup"><span data-stu-id="29a05-560">Unlike the Dictionary indexer, `TryAdd` doesn't override the element if the element with the given key exists in the dictionary.</span></span> <span data-ttu-id="29a05-561">キーが既に存在する`TryAdd`場合、は何`false`も行いません。</span><span class="sxs-lookup"><span data-stu-id="29a05-561">If the key already exists, `TryAdd` does nothing and returns `false`.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-562"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-562"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key *  -&gt; bool&#xA;override this.TryGetValue : 'Key *  -&gt; bool" Usage="dictionary.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="29a05-563">取得する値のキー。</span><span class="sxs-lookup"><span data-stu-id="29a05-563">The key of the value to get.</span></span></param>
        <param name="value"><span data-ttu-id="29a05-564">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値。</span><span class="sxs-lookup"><span data-stu-id="29a05-564">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter.</span></span> <span data-ttu-id="29a05-565">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-565">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="29a05-566">指定したキーに関連付けられている値を取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-566">Gets the value associated with the specified key.</span></span></summary>
        <returns><span data-ttu-id="29a05-567">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.Dictionary`2" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-567"><see langword="true" /> if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-568">このメソッドは、 <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A>メソッド<xref:System.Collections.Generic.Dictionary%602.Item%2A>とプロパティの機能を組み合わせたものです。</span><span class="sxs-lookup"><span data-stu-id="29a05-568">This method combines the functionality of the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="29a05-569">キーが見つからない場合`value` 、パラメーターは、型`TValue`の適切な既定値を取得します。たとえば、整数型の場合は 0 (ゼロ`false` )、ブール型`null`の場合は、参照型の場合はです。</span><span class="sxs-lookup"><span data-stu-id="29a05-569">If the key is not found, then the `value` parameter gets the appropriate default value for the type `TValue`; for example, 0 (zero) for integer types, `false` for Boolean types, and `null` for reference types.</span></span>  
  
 <span data-ttu-id="29a05-570">コードが<xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A>ディクショナリに含まれていないキーに頻繁にアクセスしようとする場合は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="29a05-570">Use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method if your code frequently attempts to access keys that are not in the dictionary.</span></span> <span data-ttu-id="29a05-571">このメソッドの使用は、 <xref:System.Collections.Generic.KeyNotFoundException> <xref:System.Collections.Generic.Dictionary%602.Item%2A>プロパティによってスローされたをキャッチするよりも効率的です。</span><span class="sxs-lookup"><span data-stu-id="29a05-571">Using this method is more efficient than catching the <xref:System.Collections.Generic.KeyNotFoundException> thrown by the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="29a05-572">このメソッドは、O (1) 操作にアプローチします。</span><span class="sxs-lookup"><span data-stu-id="29a05-572">This method approaches an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-573">この例では、 <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A>メソッドを使用して、ディクショナリに含まれていないキーを頻繁に試行するプログラムの値をより効率的に取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-573">The example shows how to use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the dictionary.</span></span> <span data-ttu-id="29a05-574">一方、この例では、存在し<xref:System.Collections.Generic.Dictionary%602.Item%2A>ないキーを取得しC#ようとしたときに、プロパティ (のインデクサー) が例外をスローする方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="29a05-574">For contrast, the example also shows how the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.</span></span>  
  
 <span data-ttu-id="29a05-575">このコード例は、 <xref:System.Collections.Generic.Dictionary%602>クラスに対して用意されているより大きな例の一部です (`openWith`は、この例で使用されるディクショナリの名前です)。</span><span class="sxs-lookup"><span data-stu-id="29a05-575">This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).</span></span>  
  
 [!code-cpp[Generic.Dictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#5)]
 [!code-csharp[Generic.Dictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#5)]
 [!code-vb[Generic.Dictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#5)]  
[!code-cpp[Generic.Dictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.Dictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#4)]
[!code-vb[Generic.Dictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="29a05-576"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="29a05-576"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.Dictionary`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.ValueCollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2/ValueCollection&lt;!TKey, !TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Dictionary`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As Dictionary(Of TKey, TValue).ValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::Dictionary&lt;TKey, TValue&gt;::ValueCollection ^ Values { System::Collections::Generic::Dictionary&lt;TKey, TValue&gt;::ValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;.ValueCollection" Usage="System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;+ValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="29a05-577"><see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値を格納しているコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="29a05-577">Gets a collection containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="29a05-578"><see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 内の値を格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="29a05-578">A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29a05-579"><xref:System.Collections.Generic.Dictionary%602.ValueCollection> 内の値の順序は指定されていませんが、<xref:System.Collections.Generic.Dictionary%602.KeyCollection> プロパティによって返される <xref:System.Collections.Generic.Dictionary%602.Keys%2A> 内の関連するキーと同じ順序です。</span><span class="sxs-lookup"><span data-stu-id="29a05-579">The order of the values in the <xref:System.Collections.Generic.Dictionary%602.ValueCollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.Generic.Dictionary%602.KeyCollection> returned by the <xref:System.Collections.Generic.Dictionary%602.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="29a05-580">返さ<xref:System.Collections.Generic.Dictionary%602.ValueCollection>れるは静的なコピーではなく、 <xref:System.Collections.Generic.Dictionary%602.ValueCollection>は元<xref:System.Collections.Generic.Dictionary%602>のの値を参照します。</span><span class="sxs-lookup"><span data-stu-id="29a05-580">The returned <xref:System.Collections.Generic.Dictionary%602.ValueCollection> is not a static copy; instead, the <xref:System.Collections.Generic.Dictionary%602.ValueCollection> refers back to the values in the original <xref:System.Collections.Generic.Dictionary%602>.</span></span> <span data-ttu-id="29a05-581">したがって、へ<xref:System.Collections.Generic.Dictionary%602>の変更は、 <xref:System.Collections.Generic.Dictionary%602.ValueCollection>引き続きに反映されます。</span><span class="sxs-lookup"><span data-stu-id="29a05-581">Therefore, changes to the <xref:System.Collections.Generic.Dictionary%602> continue to be reflected in the <xref:System.Collections.Generic.Dictionary%602.ValueCollection>.</span></span>  
  
 <span data-ttu-id="29a05-582">このプロパティの値の取得は O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="29a05-582">Getting the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29a05-583">このコード例では、 <xref:System.Collections.Generic.Dictionary%602.Values%2A>プロパティを使用してディクショナリ内の値を列挙する方法と、ディクショナリのキーと値を列挙する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="29a05-583">This code example shows how to enumerate the values in the dictionary using the <xref:System.Collections.Generic.Dictionary%602.Values%2A> property, and how to enumerate the keys and values in the dictionary.</span></span>  
  
 <span data-ttu-id="29a05-584">このコード例は、 <xref:System.Collections.Generic.Dictionary%602>クラスに対して用意されているより大きな例の一部です (`openWith`は、この例で使用されるディクショナリの名前です)。</span><span class="sxs-lookup"><span data-stu-id="29a05-584">This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).</span></span>  
  
 [!code-cpp[Generic.Dictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#8)]
 [!code-csharp[Generic.Dictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#8)]
 [!code-vb[Generic.Dictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#8)]  
[!code-cpp[Generic.Dictionary#7](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.Dictionary/cpp/source.cpp#7)]
[!code-csharp[Generic.Dictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Dictionary/CS/source.cs#7)]
[!code-vb[Generic.Dictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Dictionary/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />
        <altmember cref="P:System.Collections.Generic.Dictionary`2.Keys" />
      </Docs>
    </Member>
  </Members>
</Type>
