<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Dictionary`2.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac501d6c6007f8665d72bc06b2e847e42b64121d593.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01d6c6007f8665d72bc06b2e847e42b64121d593</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The type of the keys in the dictionary.</source>
          <target state="translated">ディクショナリ内のキーの型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The type of the values in the dictionary.</source>
          <target state="translated">ディクショナリ内の値の型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Represents a collection of keys and values.</source>
          <target state="translated">キーと値のコレクションを表します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> generic class provides a mapping from a set of keys to a set of values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>ジェネリック クラスは、一連のキーから値のセットへのマッピングを提供します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Each addition to the dictionary consists of a value and its associated key.</source>
          <target state="translated">ディクショナリに追加される各エントリは、値とその値に関連付けられたキーで構成されます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Retrieving a value by using its key is very fast, close to O(1), because the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class is implemented as a hash table.</source>
          <target state="translated">そのキーを使用して値を取得するが、非常に高速閉じる o (1)、ため、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラスは、ハッシュ テーブルとして実装します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The speed of retrieval depends on the quality of the hashing algorithm of the type specified for <ph id="ph1">`TKey`</ph>.</source>
          <target state="translated">検索の速度に指定された型のハッシュ アルゴリズムの品質に依存<ph id="ph1">`TKey`</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>As long as an object is used as a key in the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, it must not change in any way that affects its hash value.</source>
          <target state="translated">オブジェクトが内のキーとして使用される限り、 <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>、そのハッシュ値に影響する任意の方法で変更しないでください。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> must be unique according to the dictionary's equality comparer.</source>
          <target state="translated">内のすべてのキー、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>ディクショナリの等値比較子に従って一意である必要があります。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be, if the value type <ph id="ph2">`TValue`</ph> is a reference type.</source>
          <target state="translated">キーには<ph id="ph1">`null`</ph>、ですが、型の値の場合、値が<ph id="ph2">`TValue`</ph>は参照型です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> requires an equality implementation to determine whether keys are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> キーが等しいかどうかを決定する、等しいかどうかの実装が必要です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>You can specify an implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface by using a constructor that accepts a <ph id="ph2">`comparer`</ph> parameter; if you do not specify an implementation, the default generic equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> is used.</source>
          <target state="translated">実装を指定することができます、<ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>ジェネリック インターフェイスを受け取るコンス トラクターを使用して、<ph id="ph2">`comparer`</ph>パラメーター以外の場合は、実装では、既定のジェネリック等値比較子を指定しないかどうかは<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>を使用します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>If type <ph id="ph1">`TKey`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> generic interface, the default equality comparer uses that implementation.</source>
          <target state="translated">場合型<ph id="ph1">`TKey`</ph>を実装する、 <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> 、ジェネリック インターフェイスの既定の等値比較子は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>For example, you can use the case-insensitive string comparers provided by the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class to create dictionaries with case-insensitive string keys.</source>
          <target state="translated">たとえば、によって提供される文字列の大文字と小文字の比較子を使用することができます、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>大文字と小文字の文字列のキーを持つディクショナリを作成するクラス。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> can hold.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>要素の数が、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>を保持できます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>For very large <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id="ph2">`enabled`</ph> attribute of the  configuration element to <ph id="ph3">`true`</ph> in the run-time environment.</source>
          <target state="translated">非常に大きな<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>オブジェクト、設定して、64 ビット システム上の 20億要素に最大の容量を増やすことができます、<ph id="ph2">`enabled`</ph>する構成要素の属性<ph id="ph3">`true`</ph>実行時環境でします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>For purposes of enumeration, each item in the dictionary is treated as a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> structure representing a value and its key.</source>
          <target state="translated">列挙のために、ディクショナリ内の各項目として扱われます、<ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>値とそのキーを表す構造体。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The order in which the items are returned is undefined.</source>
          <target state="translated">項目が返される順序は定義されません。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual Basic で)、コレクション内の要素の型のオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Since the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> is a collection of keys and values, the element type is not the type of the key or the type of the value.</source>
          <target state="translated">以降、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>がキーと値、要素の型のコレクションが、キーの型または値の型。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Instead, the element type is a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> of the key type and the value type.</source>
          <target state="translated">代わりに、要素型は、<ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>のキーの種類と値の型。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>For example:</source>
          <target state="translated">例:</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator, which allows only reading from the collection, not writing to it.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph>ステートメントは、列挙子、コレクションからの読み取りのみを許可するには書き込めませんをラップするラッパー。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <ph id="ph1">&lt;xref:System.Type.Equals%2A&gt;</ph> method.</source>
          <target state="translated">キーを継承する、その動作を変更、絶対の一意性を保証できませんを使用する比較であるため、<ph id="ph1">&lt;xref:System.Type.Equals%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">次のコード例は、空を作成<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>string キーと使用方法を使用した文字列の<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph>をいくつかの要素を追加するメソッド。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">この例では、ことを示します、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph>メソッドがスローされます、<ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>重複するキーを追加しようとするとき。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph>プロパティ (c# のインデクサー) を示す値を取得する、<ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph>要求されたキーが存在しないと、値がキーに関連付けられていることを示すを置き換えることができる場合にスローされます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and it shows how to use the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> method to test whether a key exists before calling the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">例を使用する方法を示します、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph>メソッド値を取得する場合は、プログラムは多くの場合、ディクショナリに含まれていないキーの値を試行する必要があり、使用する方法を示しますより効率的な方法として、 <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> を呼び出す前に、キーが存在するかどうかをテストする方法を「c5/&gt;メソッドです<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>The example shows how to enumerate the keys and values in the dictionary and how to enumerate the keys and values alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Keys%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">この例は、キーとディクショナリ内の値を列挙する方法と、キーを列挙する方法を示していて、単独で使用して値を<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Keys%2A&gt;</ph>プロパティおよび<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Values%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Finally, the example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph> method.</source>
          <target state="translated">最後に、この例は、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">A<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>コレクションが変更されない限り、複数のリーダーを同時にサポートできます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">それでも、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>In the rare case where an enumeration contends with write accesses, the collection must be locked during the entire enumeration.</source>
          <target state="translated">まれに、列挙型と競合書き込みアクセスでは、列挙中にコレクションをロックする必要があります。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>For thread-safe alternatives, see the <ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /&gt;</ph> class or <ph id="ph2">&lt;see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /&gt;</ph> class.</source>
          <target state="translated">スレッド セーフな代替方法については、次を参照してください。、<ph id="ph1">&lt;see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /&gt;</ph>クラスまたは<ph id="ph2">&lt;see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">パブリック静的 (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> Visual Basic で) この型のメンバーは、スレッド セーフであります。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Dictionary`2">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.</source>
          <target state="translated">空で、既定の初期量を備え、キーの型の既定の等値比較子を使用する、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> must be unique according to the default equality comparer.</source>
          <target state="translated">内のすべてのキー、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>既定の等値比較子に従って一意である必要があります。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> requires an equality implementation to determine whether keys are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> キーが等しいかどうかを決定する、等しいかどうかの実装が必要です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source>This constructor uses the default generic equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このコンス トラクターは、既定のジェネリック等値比較子を使用して<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source>If type <ph id="ph1">`TKey`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> generic interface, the default equality comparer uses that implementation.</source>
          <target state="translated">場合型<ph id="ph1">`TKey`</ph>を実装する、 <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> 、ジェネリック インターフェイスの既定の等値比較子は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source>Alternatively, you can specify an implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface by using a constructor that accepts a <ph id="ph2">`comparer`</ph> parameter.</source>
          <target state="translated">またの実装を指定することができます、<ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>ジェネリック インターフェイスを受け取るコンス トラクターを使用して、<ph id="ph2">`comparer`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source>If you can estimate the size of the collection, using a constructor that specifies the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">場合は、コレクションのサイズを見積もるには、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定するコンス トラクターを使用して、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">次のコード例は、空を作成<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>string キーと使用方法を使用した文字列の<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph>をいくつかの要素を追加するメソッド。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">この例では、ことを示します、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph>メソッドがスローされます、<ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>重複するキーを追加しようとするとき。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> whose elements are copied to the new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> に要素がコピーされた <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> class that contains elements copied from the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> and uses the default equality comparer for the key type.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> から要素をコピーして格納し、キーの型の既定の等値比較子を使用する、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> must be unique according to the default equality comparer; likewise, every key in the source <ph id="ph2">`dictionary`</ph> must also be unique according to the default equality comparer.</source>
          <target state="translated">内のすべてのキー、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>既定に従って一意である必要があります等値比較子です。 同様に、ソース内のすべてのキー<ph id="ph2">`dictionary`</ph>既定の等値比較子に従って一意もする必要があります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The initial capacity of the new <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> is large enough to contain all the elements in <ph id="ph2">`dictionary`</ph>.</source>
          <target state="translated">新しいの初期容量<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>内のすべての要素を格納するのに十分な大きさが<ph id="ph2">`dictionary`</ph>です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> requires an equality implementation to determine whether keys are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> キーが等しいかどうかを決定する、等しいかどうかの実装が必要です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>This constructor uses the default generic equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このコンス トラクターは、既定のジェネリック等値比較子を使用して<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>If type <ph id="ph1">`TKey`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> generic interface, the default equality comparer uses that implementation.</source>
          <target state="translated">場合型<ph id="ph1">`TKey`</ph>を実装する、 <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> 、ジェネリック インターフェイスの既定の等値比較子は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>Alternatively, you can specify an implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface by using a constructor that accepts a <ph id="ph2">`comparer`</ph> parameter.</source>
          <target state="translated">またの実装を指定することができます、<ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>ジェネリック インターフェイスを受け取るコンス トラクターを使用して、<ph id="ph2">`comparer`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`dictionary`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>内の要素の数は、<ph id="ph3">`dictionary`</ph>です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph> constructor to initialize a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> with sorted content from another dictionary.</source>
          <target state="translated">次のコード例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph>を初期化するコンス トラクター、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>で別の辞書からコンテンツを並べ替えます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>The code example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> and populates it with data in random order, then passes the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> to the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph> constructor, creating a <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> that is sorted.</source>
          <target state="translated">コード例を作成、 <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> 、ランダムにデータを設定しを渡します、<ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>を<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph>コンス トラクターを作成する、<ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>が並べ替えられています。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source>This is useful if you need to build a sorted dictionary that at some point becomes static; copying the data from a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> to a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> improves retrieval speed.</source>
          <target state="translated">これは静的になるいくつかの時点を並べ替えられたディクショナリを作成する必要がある場合に役立ちます。データをコピー、<ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>を<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>検索速度が向上します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> contains one or more duplicate keys.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> には 1 つまたは複数の重複するキーが含まれます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> implementation to use when comparing keys, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default <ph id="ph3">&lt;see cref="T:System.Collections.Generic.EqualityComparer`1" /&gt;</ph> for the type of the key.</source>
          <target state="translated">キーの比較時に使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 実装。キーの型の既定の <ph id="ph2">&lt;see langword="null" /&gt;</ph> を使用する場合は <ph id="ph3">&lt;see cref="T:System.Collections.Generic.EqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> class that is empty, has the default initial capacity, and uses the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">空で、既定の初期量を備え、指定した <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> を使用する、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>Use this constructor with the case-insensitive string comparers provided by the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class to create dictionaries with case-insensitive string keys.</source>
          <target state="translated">によって提供される文字列の大文字と小文字の比較子をこのコンス トラクターを使用して、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>大文字と小文字の文字列のキーを持つディクショナリを作成するクラス。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> must be unique according to the specified comparer.</source>
          <target state="translated">内のすべてのキー、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>指定した比較子に従って一意である必要があります。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> requires an equality implementation to determine whether keys are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> キーが等しいかどうかを決定する、等しいかどうかの実装が必要です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, this constructor uses the default generic equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>は<ph id="ph2">`null`</ph>、このコンス トラクターは、既定のジェネリック等値比較子を使用して<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>If type <ph id="ph1">`TKey`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> generic interface, the default equality comparer uses that implementation.</source>
          <target state="translated">場合型<ph id="ph1">`TKey`</ph>を実装する、 <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> 、ジェネリック インターフェイスの既定の等値比較子は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>If you can estimate the size of the collection, using a constructor that specifies the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">場合は、コレクションのサイズを見積もるには、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定するコンス トラクターを使用して、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> with a case-insensitive equality comparer for the current culture.</source>
          <target state="translated">次のコード例を作成、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>現在のカルチャの大文字と小文字の等値比較子を使用します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>The example adds four elements, some with lower-case keys and some with upper-case keys.</source>
          <target state="translated">例では、小文字のキーを使用して一部使用と、大文字のキーを使用して一部を使用する、4 つの要素を追加します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</source>
          <target state="translated">大文字小文字によってのみ、既存のキーとは異なるキーを持つ要素を追加する操作は、結果として得られる例外をキャッチし、エラー メッセージが表示されます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>Finally, the example displays the elements in the dictionary.</source>
          <target state="translated">最後に、ディクショナリ内の要素を表示します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> can contain.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> が格納できる要素数の初期値。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.</source>
          <target state="translated">空で、指定した初期量を備え、キーの型の既定の等値比較子を使用する、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> must be unique according to the default equality comparer.</source>
          <target state="translated">内のすべてのキー、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>既定の等値比較子に従って一意である必要があります。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> is the number of elements that can be added to the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> before resizing is necessary.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>に追加できる要素の数が、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>必要なサイズを変更する前にします。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> requires an equality implementation to determine whether keys are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> キーが等しいかどうかを決定する、等しいかどうかの実装が必要です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>This constructor uses the default generic equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このコンス トラクターは、既定のジェネリック等値比較子を使用して<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>If type <ph id="ph1">`TKey`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> generic interface, the default equality comparer uses that implementation.</source>
          <target state="translated">場合型<ph id="ph1">`TKey`</ph>を実装する、 <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> 、ジェネリック インターフェイスの既定の等値比較子は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>Alternatively, you can specify an implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface by using a constructor that accepts a <ph id="ph2">`comparer`</ph> parameter.</source>
          <target state="translated">またの実装を指定することができます、<ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>ジェネリック インターフェイスを受け取るコンス トラクターを使用して、<ph id="ph2">`comparer`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source>The following code example creates a dictionary with an initial capacity of 4 and populates it with 4 entries.</source>
          <target state="translated">次のコード例では、4 分の初期容量とディクショナリを作成し、4 つのエントリが挿入されます。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> whose elements are copied to the new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> に要素がコピーされた <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> implementation to use when comparing keys, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default <ph id="ph3">&lt;see cref="T:System.Collections.Generic.EqualityComparer`1" /&gt;</ph> for the type of the key.</source>
          <target state="translated">キーの比較時に使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 実装。キーの型の既定の <ph id="ph2">&lt;see langword="null" /&gt;</ph> を使用する場合は <ph id="ph3">&lt;see cref="T:System.Collections.Generic.EqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> class that contains elements copied from the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> and uses the specified <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> から要素をコピーして格納し、指定した <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> を使用する、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>Use this constructor with the case-insensitive string comparers provided by the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class to create dictionaries with case-insensitive string keys.</source>
          <target state="translated">によって提供される文字列の大文字と小文字の比較子をこのコンス トラクターを使用して、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>大文字と小文字の文字列のキーを持つディクショナリを作成するクラス。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> must be unique according to the specified comparer; likewise, every key in the source <ph id="ph2">`dictionary`</ph> must also be unique according to the specified comparer.</source>
          <target state="translated">内のすべてのキー、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>に従って、指定された一意である必要がありますの比較子です。 同様に、ソース内のすべてのキー<ph id="ph2">`dictionary`</ph>指定した比較子に従って一意もする必要があります。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>For example, duplicate keys can occur if <ph id="ph1">`comparer`</ph> is one of the case-insensitive string comparers provided by the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class and <ph id="ph3">`dictionary`</ph> does not use a case-insensitive comparer key.</source>
          <target state="translated">たとえば、重複するキーは場合に発生<ph id="ph1">`comparer`</ph>によって提供される文字列の大文字と小文字の比較子の 1 つ、<ph id="ph2">&lt;xref:System.StringComparer&gt;</ph>クラスと<ph id="ph3">`dictionary`</ph>大文字と小文字の比較子キーを使用しません。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>The initial capacity of the new <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> is large enough to contain all the elements in <ph id="ph2">`dictionary`</ph>.</source>
          <target state="translated">新しいの初期容量<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>内のすべての要素を格納するのに十分な大きさが<ph id="ph2">`dictionary`</ph>です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> requires an equality implementation to determine whether keys are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> キーが等しいかどうかを決定する、等しいかどうかの実装が必要です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, this constructor uses the default generic equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>は<ph id="ph2">`null`</ph>、このコンス トラクターは、既定のジェネリック等値比較子を使用して<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>If type <ph id="ph1">`TKey`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> generic interface, the default equality comparer uses that implementation.</source>
          <target state="translated">場合型<ph id="ph1">`TKey`</ph>を実装する、 <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> 、ジェネリック インターフェイスの既定の等値比較子は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`dictionary`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>内の要素の数は、<ph id="ph3">`dictionary`</ph>です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph> constructor to initialize a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> with case-insensitive sorted content from another dictionary.</source>
          <target state="translated">次のコード例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph>を初期化するコンス トラクター、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>別ディクショナリからの大文字と小文字の並べ替えられたコンテンツを持つ。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>The code example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> with a case-insensitive comparer and populates it with data in random order, then passes the <ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> to the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph> constructor, along with a case-insensitive equality comparer, creating a <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> that is sorted.</source>
          <target state="translated">コード例を作成、<ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>大文字と小文字の比較子を使用し、ランダムにデータを入力し渡します、<ph id="ph2">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>を<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph>コンス トラクターを作成する、大文字と小文字の等値比較子と共に、 <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>並べ替えられます。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>This is useful if you need to build a sorted dictionary that at some point becomes static; copying the data from a <ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> to a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> improves retrieval speed.</source>
          <target state="translated">これは静的になるいくつかの時点を並べ替えられたディクショナリを作成する必要がある場合に役立ちます。データをコピー、<ph id="ph1">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph>を<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>検索速度が向上します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source>When you create a new dictionary with a case-insensitive comparer and populate it with entries from a dictionary that uses a case-sensitive comparer, as in this example, an exception occurs if the input dictionary has keys that differ only by case.</source>
          <target state="translated">大文字と小文字の比較子の新しいディクショナリを作成してこの例のように、区別する比較子を使用しているディクショナリからエントリを読み込むときに、大文字小文字のみが異なるキーを入力ディクショナリがある場合に例外が発生します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> contains one or more duplicate keys.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionary" /&gt;</ph> には 1 つまたは複数の重複するキーが含まれます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> can contain.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> が格納できる要素数の初期値。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> implementation to use when comparing keys, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default <ph id="ph3">&lt;see cref="T:System.Collections.Generic.EqualityComparer`1" /&gt;</ph> for the type of the key.</source>
          <target state="translated">キーの比較時に使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 実装。キーの型の既定の <ph id="ph2">&lt;see langword="null" /&gt;</ph> を使用する場合は <ph id="ph3">&lt;see cref="T:System.Collections.Generic.EqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> class that is empty, has the specified initial capacity, and uses the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">空で、指定した初期量を備え、指定した <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> を使用する、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>Use this constructor with the case-insensitive string comparers provided by the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class to create dictionaries with case-insensitive string keys.</source>
          <target state="translated">によって提供される文字列の大文字と小文字の比較子をこのコンス トラクターを使用して、<ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>大文字と小文字の文字列のキーを持つディクショナリを作成するクラス。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> must be unique according to the specified comparer.</source>
          <target state="translated">内のすべてのキー、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>指定した比較子に従って一意である必要があります。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> is the number of elements that can be added to the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> before resizing is necessary.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>に追加できる要素の数が、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>必要なサイズを変更する前にします。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> requires an equality implementation to determine whether keys are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> キーが等しいかどうかを決定する、等しいかどうかの実装が必要です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, this constructor uses the default generic equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>は<ph id="ph2">`null`</ph>、このコンス トラクターは、既定のジェネリック等値比較子を使用して<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>If type <ph id="ph1">`TKey`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> generic interface, the default equality comparer uses that implementation.</source>
          <target state="translated">場合型<ph id="ph1">`TKey`</ph>を実装する、 <ph id="ph2">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> 、ジェネリック インターフェイスの既定の等値比較子は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> with an initial capacity of 5 and a case-insensitive equality comparer for the current culture.</source>
          <target state="translated">次のコード例を作成、 <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> 5 と大文字と小文字の等値比較子の現在のカルチャの初期容量を持つ。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>The example adds four elements, some with lower-case keys and some with upper-case keys.</source>
          <target state="translated">例では、小文字のキーを使用して一部使用と、大文字のキーを使用して一部を使用する、4 つの要素を追加します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</source>
          <target state="translated">大文字小文字によってのみ、既存のキーとは異なるキーを持つ要素を追加する操作は、結果として得られる例外をキャッチし、エラー メッセージが表示されます。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source>Finally, the example displays the elements in the dictionary.</source>
          <target state="translated">最後に、ディクショナリ内の要素を表示します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object containing the information required to serialize the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> をシリアル化するために必要な情報を格納している <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> structure containing the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> に関連付けられているシリアル化ストリームの送信元および送信先を格納している <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> class with serialized data.</source>
          <target state="translated">シリアル化したデータを使用して、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute an object transmitted over a stream.</source>
          <target state="translated">このコンス トラクターは、ストリームを介して送信されたオブジェクトを構築するには、逆シリアル化中に呼び出されます。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML および SOAP シリアル化<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>The key of the element to add.</source>
          <target state="translated">追加する要素のキー。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>The value of the element to add.</source>
          <target state="translated">追加する要素の値。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>Adds the specified key and value to the dictionary.</source>
          <target state="translated">指定したキーと値をディクショナリに追加します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>; for example, <ph id="ph3">`myCollection[myKey] = myValue`</ph> (in Visual Basic, <ph id="ph4">`myCollection(myKey) = myValue`</ph>).</source>
          <target state="translated">使用することも、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph>にキーの値を設定して、新しい要素を追加するプロパティが存在しません、 <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>。 たとえば、 <ph id="ph3">`myCollection[myKey] = myValue`</ph> (Visual basic で<ph id="ph4">`myCollection(myKey) = myValue`</ph>)。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>However, if the specified key already exists in the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, setting the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">ただしで指定したキーが既に存在する場合、 <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>、設定、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph>プロパティに古い値が上書きされます。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method throws an exception if a value with the specified key already exists.</source>
          <target state="translated">これに対し、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph>メソッドは、指定されたキーに値が既に存在する場合に例外をスローします。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph> property value already equals the capacity, the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>プロパティの値は、容量の容量を既に等しい、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be, if <ph id="ph2">`TValue`</ph> is a reference type.</source>
          <target state="translated">キーには<ph id="ph1">`null`</ph>、ですが場合の値が<ph id="ph2">`TValue`</ph>は参照型です。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph> is less than the capacity, this method approaches an O(1) operation.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>が小さい、容量よりもこのメソッドに近づく、o (1) 操作になります。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>If the capacity must be increased to accommodate the new element, this method becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>.</source>
          <target state="translated">新しい要素のためには、容量を増やす必要があります、このメソッドが O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">次のコード例は、空を作成<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>string キーと使用方法を使用した文字列の<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph>をいくつかの要素を追加するメソッド。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">この例では、ことを示します、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph>メソッドがスローされます、<ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>重複するキーを追加しようとするとき。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
          <source>An element with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">同じキーを持つ要素が、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> に既に存在します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Clear">
          <source>Removes all keys and values from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> からすべてのキーと値を削除します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph> property is set to 0, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>プロパティが 0 に設定され、コレクションの要素から他のオブジェクトへの参照も解放します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Clear">
          <source>The capacity remains unchanged.</source>
          <target state="translated">容量はそのまま残ります。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the capacity of the dictionary.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>ディクショナリの容量します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.Comparer">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> that is used to determine equality of keys for the dictionary.</source>
          <target state="translated">ディクショナリのキーが等しいかどうかを確認するために使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Comparer">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> generic interface implementation that is used to determine equality of keys for the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> and to provide hash values for the keys.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> のキーが等しいかどうかを確認し、キーのハッシュ値を提供するために使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> ジェネリック インターフェイスの実装。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Comparer">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> requires an equality implementation to determine whether keys are equal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> キーが等しいかどうかを決定する、等しいかどうかの実装が必要です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Comparer">
          <source>You can specify an implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface by using a constructor that accepts a <ph id="ph2">`comparer`</ph> parameter; if you do not specify one, the default generic equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> is used.</source>
          <target state="translated">実装を指定することができます、<ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>ジェネリック インターフェイスを受け取るコンス トラクターを使用して、<ph id="ph2">`comparer`</ph>パラメーター以外のかどうかを指定しない 1 つ、既定のジェネリック等値比較子<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>を使用します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Comparer">
          <source>Getting the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 内で検索されるキー。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> contains the specified key.</source>
          <target state="translated">指定したキーが <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> に格納されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定したキーを持つ要素が <ph id="ph1">&lt;see langword="true" /&gt;</ph> に格納されている場合は <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
          <source>This method approaches an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作に近くなります。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> method to test whether a key exists prior to calling the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph>メソッドを呼び出す前に、キーが存在するかどうかをテストする、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
          <source>It also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the dictionary.</source>
          <target state="translated">使用する方法も示します、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph>を効率よくプログラム頻繁にしようとすると、ディクショナリに含まれていないキーの値を取得するには、値を取得するメソッド。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
          <source>Finally, it shows the least efficient way to test whether keys exist, by using the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">さらに、その説明をテストする最も非効率的な方法では、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class (<ph id="ph2">`openWith`</ph> is the name of the Dictionary used in this example).</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラス (<ph id="ph2">`openWith`</ph>この例で使用されるディクショナリの名前です)。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 内で検索される値。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> contains a specific value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> に特定の値が格納されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> contains an element with the specified value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定した値を持つ要素が <ph id="ph1">&lt;see langword="true" /&gt;</ph> に格納されている場合は <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`TValue`</ph>, the type of values in the dictionary.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`TValue`</ph>ディクショナリ内の値の型。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
          <source>This method performs a linear search; therefore, the average execution time is proportional to <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。したがって、平均実行時間に比例して<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
          <source>That is, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>.</source>
          <target state="translated">つまり、このメソッドは、O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.Count">
          <source>Gets the number of key/value pairs contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> に格納されているキー/値ペアの数を取得します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Count">
          <source>The number of key/value pairs contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> に格納されているキー/値ペアの数。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Count">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> can store.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>は要素の数を<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>格納できます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph> property is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>プロパティは、実際には、要素の数、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Count">
          <source>The capacity is always greater than or equal to <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>.</source>
          <target state="translated">容量は、常により大きいまたは等しい<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>要素を追加するときに、容量を超える場合、前の要素をコピーし、新しい要素を追加する前に、内部の配列を自動的に再割り当てによって、容量が増加します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Count">
          <source>Getting the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> を反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /&gt;</ph> structure for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>For purposes of enumeration, each item is a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> structure representing a value and its key.</source>
          <target state="translated">列挙のために、各項目は、<ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>値とそのキーを表す構造体。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual basic) 列挙子の複雑さです。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">この位置にある、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph>プロパティが定義されていません。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">そのため、呼び出す必要があります、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>For better performance, the enumerator returned by this property does not throw an exception if it is positioned before the first element or after the last element and the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> property is accessed; the value of the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">パフォーマンスを向上させるには、このプロパティによって返された列挙子は例外をスローしません最初の要素の前に、または最後の要素の後に配置されている場合、 <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> ; プロパティへのアクセスの値、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph>プロパティが定義されていません。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> property returns the same element until the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph>まで同じ要素を返します、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 名前空間のコレクションの既定の実装は同期されません。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object that contains the information required to serialize the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> インスタンスをシリアル化するために必要な情報を格納する <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> structure that contains the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> 構造体。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and returns the data needed to serialize the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> インターフェイスを実装し、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> インスタンスをシリアル化するために必要なデータを返します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>for providing serialization services.</source>
          <target state="translated">シリアル化サービスを提供します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Associated enumeration:   <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> Security action: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">関連する列挙値:<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>セキュリティ アクション。 <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>The key of the value to get or set.</source>
          <target state="translated">取得または設定する値のキー。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>Gets or sets the value associated with the specified key.</source>
          <target state="translated">指定されたキーに関連付けられている値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>The value associated with the specified key.</source>
          <target state="translated">指定されたキーに関連付けられている値。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>If the specified key is not found, a get operation throws a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.KeyNotFoundException" /&gt;</ph>, and a set operation creates a new element with the specified key.</source>
          <target state="translated">指定したキーが見つからなかった場合、get 操作は <ph id="ph1">&lt;see cref="T:System.Collections.Generic.KeyNotFoundException" /&gt;</ph> をスローし、set 操作は指定したキーを持つ新しい要素を作成します。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>This property provides the ability to access a specific element in the collection by using the following C# syntax: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> in Visual Basic).</source>
          <target state="translated">このプロパティは、次の c# の構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。 <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">使用することも、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph>にキーの値を設定して、新しい要素を追加するプロパティが存在しません、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>When you set the property value, if the key is in the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, the value associated with that key is replaced by the assigned value.</source>
          <target state="translated">キーがである場合に、プロパティの値を設定すると、 <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>、そのキーに関連付けられている値は、割り当てられた値で置き換えられます。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>If the key is not in the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, the key and value are added to the dictionary.</source>
          <target state="translated">キーに含まれていない場合、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>キーと値がディクショナリに追加します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">これに対し、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Add%2A&gt;</ph>メソッドでは、既存の要素は変更しません。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>A key cannot be <ph id="ph1">`null`</ph>, but a value can be, if the value type <ph id="ph2">`TValue`</ph> is a reference type.</source>
          <target state="translated">キーには<ph id="ph1">`null`</ph>、ですが、型の値の場合、値が<ph id="ph2">`TValue`</ph>は参照型です。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic は、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>Getting or setting the value of this property approaches an O(1) operation.</source>
          <target state="translated">このプロパティの値の設定を取得または o (1) 操作に近くなります。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph>プロパティ (c# のインデクサー) を示す値を取得する、<ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph>要求されたキーが存在しないと、値がキーに関連付けられていることを示すを置き換えることができる場合にスローされます。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</source>
          <target state="translated">使用する方法も示します、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph>メソッドとして場合に、プログラムは多くの場合、ディクショナリに含まれていないキーの値を試行する必要があります値を取得する方法がより効率的です。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source><ph id="ph1">`openWith`</ph> is the name of the Dictionary used in this example.</source>
          <target state="translated"><ph id="ph1">`openWith`</ph> この例で使用されるディクショナリの名前です。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.Item(`0)">
          <source>The property is retrieved and <ph id="ph1">&lt;paramref name="key" /&gt;</ph> does not exist in the collection.</source>
          <target state="translated">プロパティが取得されましたが、コレクション内に <ph id="ph1">&lt;paramref name="key" /&gt;</ph> が存在しません。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.Keys">
          <source>Gets a collection containing the keys in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 内のキーを格納しているコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Keys">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /&gt;</ph> containing the keys in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /&gt;</ph> 内のキーを格納している <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Keys">
          <source>The order of the keys in the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.KeyCollection&gt;</ph> is unspecified, but it is the same order as the associated values in the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ValueCollection&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">内のキーの順序、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.KeyCollection&gt;</ph>は指定しませんが、関連付けられている値と同じ順序、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ValueCollection&gt;</ph>によって返される、<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Values%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Keys">
          <source>The returned <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.KeyCollection&gt;</ph> is not a static copy; instead, the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.KeyCollection&gt;</ph> refers back to the keys in the original <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">返された<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.KeyCollection&gt;</ph>静的コピーではありません。 代わりに、、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.KeyCollection&gt;</ph>は元のキーを逆参照<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Keys">
          <source>Therefore, changes to the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> continue to be reflected in the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.KeyCollection&gt;</ph>.</source>
          <target state="translated">そのため、変更、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>に反映されるまでに続行、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.KeyCollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Keys">
          <source>Getting the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Keys">
          <source>The following code example shows how to enumerate the keys in the dictionary using the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Keys%2A&gt;</ph> property, and how to enumerate the keys and values in the dictionary.</source>
          <target state="translated">次のコード例を使用して、ディクショナリ内のキーを列挙する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Keys%2A&gt;</ph>プロパティ、およびキーとディクショナリ内の値を列挙する方法です。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Keys">
          <source>This code is part of a larger example that can be compiled and executed (<ph id="ph1">`openWith`</ph> is the name of the Dictionary used in this example).</source>
          <target state="translated">このコード例をコンパイルして実行できるは (<ph id="ph1">`openWith`</ph>この例で使用されるディクショナリの名前です)。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Keys">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
          <source>The source of the deserialization event.</source>
          <target state="translated">逆シリアル化イベントのソース。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and raises the deserialization event when the deserialization is complete.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object associated with the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> instance is invalid.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> インスタンスに関連付けられている <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> オブジェクトが無効です。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
          <source>The key of the element to remove.</source>
          <target state="translated">削除する要素のキー。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
          <source>Removes the value with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">指定したキーを持つ値を <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> から削除します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is successfully found and removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">要素が見つかり、正常に削除された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
          <source>This method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is not found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph2">&lt;paramref name="key" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> に見つからない場合、<ph id="ph1">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> does not contain an element with the specified key, the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> remains unchanged.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>指定のキーを持つ要素が含まれていない、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>は変更されません。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
          <source>No exception is thrown.</source>
          <target state="translated">例外をスローすることはありません。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
          <source>This method approaches an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作に近くなります。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
          <source>The following code example shows how to remove a key/value pair from a dictionary using the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例を使用して、ディクショナリからキー/値ペアを削除する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class (<ph id="ph2">`openWith`</ph> is the name of the Dictionary used in this example).</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラス (<ph id="ph2">`openWith`</ph>この例で使用されるディクショナリの名前です)。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional array that is the destination of the elements copied from <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> から要素がコピーされる 1 次元の配列。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The array must have zero-based indexing.</source>
          <target state="translated">配列には、0 から始まるインデックスが設定されている必要があります。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> to an array, starting at the specified array index.</source>
          <target state="translated">指定した配列インデックスを開始位置として、配列に <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> の要素をコピーします。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Each element copied from a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> is a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> structure representing a value and its key.</source>
          <target state="translated">各要素からコピーした、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>は、<ph id="ph2">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>値とそのキーを表す構造体。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the nongeneric implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw an <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">場合、ソースの種類<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>変換先の型に自動的にキャストすることはできません<ph id="ph2">`array`</ph>の非ジェネリックの実装<ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph>スロー、 <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>、汎用の実装をスロー、<ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> が多次元です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> には、0 から始まるインデックス番号がありません。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> の要素数が、コピー先 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の <ph id="ph2">&lt;paramref name="index" /&gt;</ph> から最後までの使用可能領域を超えています。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> の型をコピー先の <ph id="ph2">&lt;paramref name="array" /&gt;</ph> の型に自動的にキャストすることはできません。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> へのアクセスが同期されている (スレッド セーフである) 場合は <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 名前空間のコレクションの既定の実装は同期されません。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which can cause the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、例外をスローする列挙子が発生することができます。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph>プロパティへのアクセスを同期するために使用できるオブジェクトを返します、<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock the object before accessing the collection.</source>
          <target state="translated">同期は、すべてのスレッドがコレクションにアクセスする前に、オブジェクトをロックする場合のみ有効です。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
          <source>Getting the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスを同期するために使用できるオブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスの同期に使用できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 名前空間のコレクションの既定の実装は同期されません。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph>プロパティへのアクセスを同期するために使用できるオブジェクトを返します、<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock the object before accessing the collection.</source>
          <target state="translated">同期は、すべてのスレッドがコレクションにアクセスする前に、オブジェクトをロックする場合のみ有効です。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">次のコードの使用を示しています、 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> c#、C++、および Visual Basic のプロパティです。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
          <source>Getting the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The object to use as the key.</source>
          <target state="translated">キーとして使用するオブジェクト。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The object to use as the value.</source>
          <target state="translated">値として使用するオブジェクト。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>Adds the specified key and value to the dictionary.</source>
          <target state="translated">指定したキーと値をディクショナリに追加します。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">使用することも、 <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> ; ディクショナリに存在しないキーの値を設定して、新しい要素を追加するプロパティなど、<ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>です。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">ただし、ディクショナリ内で指定したキーが既に存在する場合は、設定、<ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph>プロパティに古い値が上書きされます。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method throws an exception if the specified key already exists.</source>
          <target state="translated">これに対し、<ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph>メソッドは、指定したキーが既に存在する場合に例外をスローします。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph> is less than the capacity, this method approaches an O(1) operation.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>が小さい、容量よりもこのメソッドに近づく、o (1) 操作になります。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>If the capacity needs to be increased to accommodate the new element, this method becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>.</source>
          <target state="translated">容量は、新しい要素を格納するためにする必要があります、このメソッドが O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The following code example shows how to access the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class through the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface.</source>
          <target state="translated">次のコード例にアクセスする方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラスを通じて、<ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> of strings with string keys and uses the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">このコード例は、空を作成<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>string キーと使用方法を使用した文字列の<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph>をいくつかの要素を追加するメソッド。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.</source>
          <target state="translated">この例では、ことを示します、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph>メソッドがスローされます、<ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>が重複キーを追加しようとするとき、または、キーまたは正しくないデータ型の値が指定されている場合。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>The code example demonstrates the use of several other members of the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface.</source>
          <target state="translated">他のいくつかのメンバーの使用のコード例を<ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is of a type that is not assignable to the key type <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> が、<ph id="ph3">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> のキーの型 <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> に代入できない型です。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph>, the type of values in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が、<ph id="ph3">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 内の値の型である <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> に代入できない型です。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
          <source>A value with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">同じキーを持つ値が、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> に既に存在します。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> 内で検索されるキー。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contains an element with the specified key.</source>
          <target state="translated">指定したキーの要素が <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> に格納されているかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定したキーを持つ要素が <ph id="ph1">&lt;see langword="true" /&gt;</ph> に格納されている場合は <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>This method returns <ph id="ph1">`false`</ph> if <ph id="ph2">`key`</ph> is of a type that is not assignable to the key type <ph id="ph3">`TKey`</ph> of the <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">このメソッドが戻る<ph id="ph1">`false`</ph>場合<ph id="ph2">`key`</ph>のキー型に割り当てることはできません型<ph id="ph3">`TKey`</ph>の<ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>This method approaches an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作に近くなります。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Contains%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">次のコード例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Contains%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph>とのインターフェイス、<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The example demonstrates that the method returns <ph id="ph1">`false`</ph> if a key of the wrong data type is supplied.</source>
          <target state="translated">例は、メソッドを返す<ph id="ph1">`false`</ph>不適切なデータ型のキーを指定した場合。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">コード例は、指定された出力を含む例の一部、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>For purposes of enumeration, each item is a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> structure representing a value and its key.</source>
          <target state="translated">列挙のために、各項目は、<ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>値とそのキーを表す構造体。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual basic) 列挙子の複雑さです。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>メソッドがこの位置に戻さも、列挙子を表示します。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> property is undefined.</source>
          <target state="translated">この位置にある、<ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>プロパティが定義されていません。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>.</source>
          <target state="translated">そのため、呼び出す必要があります、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> property returns the same element until either the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>されるまで、同じ要素を返します、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Entry%2A&gt;</ph> をコレクションの最初の要素にもう一度設定するには、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> を呼び出してから <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 名前空間のコレクションの既定の実装は同期されません。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>The following code example shows how to enumerate the key/value pairs in the dictionary by using the <ph id="ph1">`foreach`</ph> statement (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++), which hides the use of the enumerator.</source>
          <target state="translated">次のコード例を使用して、ディクショナリのキー/値ペアを列挙する方法を示しています、<ph id="ph1">`foreach`</ph>ステートメント (<ph id="ph2">`For Each`</ph> Visual basic で<ph id="ph3">`for each`</ph>C++ で)、列挙子の使用を非表示になります。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>In particular, note that the enumerator for the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface returns <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objects rather than <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objects.</source>
          <target state="translated">具体的には、なおの列挙子、<ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph>インターフェイスを返します<ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph>オブジェクトなく<ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">コード例は、指定された出力を含む例の一部、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> が固定サイズかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> has a fixed size; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が固定サイズの場合は <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</source>
          <target state="translated">固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
          <source>Getting the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> が読み取り専用かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が読み取り専用である場合は <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
          <source>Getting the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The key of the value to get.</source>
          <target state="translated">取得する値のキー。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Gets or sets the value with the specified key.</source>
          <target state="translated">指定したキーの値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The value associated with the specified key, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is not in the dictionary or <ph id="ph3">&lt;paramref name="key" /&gt;</ph> is of a type that is not assignable to the key type <ph id="ph4">&lt;paramref name="TKey" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">指定したキーに関連付けられた値。ただし、<ph id="ph2">&lt;paramref name="key" /&gt;</ph> がディクショナリにない場合、または <ph id="ph3">&lt;paramref name="key" /&gt;</ph> が <ph id="ph5">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> のキー型 <ph id="ph4">&lt;paramref name="TKey" /&gt;</ph> に割り当てられない型である場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>This property provides the ability to access a specific value in the collection by using the following C# syntax: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> in Visual Basic).</source>
          <target state="translated">このプロパティは、次の c# の構文を使用して、コレクション内の特定の値にアクセスする機能を提供します。 <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>.</source>
          <target state="translated">使用することも、 <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> ; ディクショナリに存在しないキーの値を設定して、新しい要素を追加するプロパティなど、<ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>です。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">ただし、ディクショナリ内で指定したキーが既に存在する場合は、設定、<ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph>プロパティに古い値が上書きされます。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">これに対し、<ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph>メソッドでは、既存の要素は変更しません。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The C# language uses the <bpt id="p1">[</bpt>this<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 言語を使用して、<bpt id="p1">[</bpt>この<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept>キーワードを実装する代わりに、インデクサーの定義、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic は、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Getting or setting the value of this property approaches an O(1) operation.</source>
          <target state="translated">このプロパティの値の設定を取得または o (1) 操作に近くなります。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph> property (the indexer in C#) of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, and ways the property differs from the <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">次のコード例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A&gt;</ph>のプロパティ (c# のインデクサー)、<ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph>とのインターフェイス、 <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>、および方法は、プロパティと異なります、<ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The example shows that, like the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the dictionary.</source>
          <target state="translated">同様に、例、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType&gt;</ph>プロパティ、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph>プロパティが既存のキーに関連付けられている値を変更でき、指定したキーがディクショナリにない場合は、新しいキー/値ペアを追加するために使用できます。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The example also shows that unlike the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> property does not throw an exception if <ph id="ph3">`key`</ph> is not in the dictionary, returning a null reference instead.</source>
          <target state="translated">示しますとは異なり、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=nameWithType&gt;</ph>プロパティ、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph>場合に、プロパティが例外をスローしません<ph id="ph3">`key`</ph>がディクショナリで返されない、null 参照代わりにします。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>Finally, the example demonstrates that getting the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph> property returns a null reference if <ph id="ph2">`key`</ph> is not the correct data type, and that setting the property throws an exception if <ph id="ph3">`key`</ph> is not the correct data type.</source>
          <target state="translated">最後に、この例はその作業、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType&gt;</ph>場合、プロパティが null 参照を返します<ph id="ph2">`key`</ph>正しいデータ型ではないと、プロパティの設定は例外をスロー<ph id="ph3">`key`</ph>正しいデータ型ではありません。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">コード例は、指定された出力を含む例の一部、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>A value is being assigned, and <ph id="ph1">&lt;paramref name="key" /&gt;</ph> is of a type that is not assignable to the key type <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">値を代入しようとしていますが、<ph id="ph1">&lt;paramref name="key" /&gt;</ph> は、<ph id="ph3">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> のキーの型 <ph id="ph2">&lt;paramref name="TKey" /&gt;</ph> に代入できない型です。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
          <source>A value is being assigned, and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the value type <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> of the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated">値を代入しようとしていますが、<ph id="ph1">&lt;paramref name="value" /&gt;</ph> は、<ph id="ph3">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> の値の型 <ph id="ph2">&lt;paramref name="TValue" /&gt;</ph> に代入できない型です。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> のキーを保持している <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> のキーを保持している <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
          <source>The order of the keys in the returned <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.IDictionary.Values%2A&gt;</ph> property.</source>
          <target state="translated">返された内のキーの順序<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>は指定しませんが、対応する値と同じ順序である保証は、<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>によって返される、<ph id="ph3">&lt;xref:System.Collections.IDictionary.Values%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
          <source>Getting the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Keys%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, to list the keys in the dictionary.</source>
          <target state="translated">次のコード例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Keys%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph>とのインターフェイス、<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>ディクショナリのキーを一覧表示します。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
          <source>The example also shows how to enumerate the key/value pairs in the dictionary; note that the enumerator for the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface returns <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objects rather than <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objects.</source>
          <target state="translated">ディクショナリ内のキー/値ペアを列挙する方法も示しますなおの列挙子、<ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph>インターフェイスを返します<ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph>オブジェクトなく<ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">コード例は、指定された出力を含む例の一部、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>The key of the element to remove.</source>
          <target state="translated">削除する要素のキー。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated">指定したキーを持つ要素を <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> から削除します。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>This method approaches an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作に近くなります。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Remove%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">次のコード例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Remove%2A&gt;</ph>の<ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph>とのインターフェイス、<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">コード例は、指定された出力を含む例の一部、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 内の値を格納している <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 内の値を格納している <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
          <source>The order of the values in the returned <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> property.</source>
          <target state="translated">返される値の順序<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>は指定しませんが、内の対応するキーと同じ順序である保証は、<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>によって返される、<ph id="ph3">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
          <source>Getting the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Values%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface with a <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, to list the values in the dictionary.</source>
          <target state="translated">次のコード例は、使用する方法を示しています。、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Values%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph>とのインターフェイス、 <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>、ディクショナリ内の値の一覧を表示します。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
          <source>The example also shows how to enumerate the key/value pairs in the dictionary; note that the enumerator for the <ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph> interface returns <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objects rather than <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> objects.</source>
          <target state="translated">ディクショナリ内のキー/値ペアを列挙する方法も示しますなおの列挙子、<ph id="ph1">&lt;xref:System.Collections.IDictionary?displayProperty=nameWithType&gt;</ph>インターフェイスを返します<ph id="ph2">&lt;xref:System.Collections.DictionaryEntry&gt;</ph>オブジェクトなく<ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
          <source>The code example is part of a larger example, including output, provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph> method.</source>
          <target state="translated">コード例は、指定された出力を含む例の一部、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">コレクションを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">コレクションを反復処理するために使用できる <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>For purposes of enumeration, each item is a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> structure representing a value and its key.</source>
          <target state="translated">列挙のために、各項目は、<ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>値とそのキーを表す構造体。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual basic) 列挙子の複雑さです。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>メソッドがこの位置に戻さも、列挙子を表示します。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">この位置にある、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>プロパティが定義されていません。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">そのため、呼び出す必要があります、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>For better performance, the enumerator returned by this property does not throw an exception if it is positioned before the first element or after the last element and the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> property is accessed; the value of the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">パフォーマンスを向上させるには、このプロパティによって返された列挙子は例外をスローしません最初の要素の前に、または最後の要素の後に配置されている場合、 <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph> ; プロパティへのアクセスの値、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A&gt;</ph>プロパティが定義されていません。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property returns the same element until either the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>されるまで、同じ要素を返します、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> をコレクションの最初の要素にもう一度設定するには、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> を呼び出してから <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</source>
          <target state="translated">列挙子には、コレクションへの排他アクセスがありません。したがって、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 名前空間のコレクションの既定の実装は同期されません。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>The key of the value to get.</source>
          <target state="translated">取得する値のキー。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">このメソッドが返るときに、キーが見つかった場合は、指定したキーに関連付けられている値が含まれます。それ以外の場合は <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> パラメーターの型に対する既定の値です。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">このパラメーターは初期化せずに渡されます。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>Gets the value associated with the specified key.</source>
          <target state="translated">指定したキーに関連付けられている値を取得します。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定したキーを持つ要素が <ph id="ph1">&lt;see langword="true" /&gt;</ph> に格納されている場合は <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>This method combines the functionality of the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">このメソッドの機能を組み合わせて、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>If the key is not found, then the <ph id="ph1">`value`</ph> parameter gets the appropriate default value for the type <ph id="ph2">`TValue`</ph>; for example, 0 (zero) for integer types, <ph id="ph3">`false`</ph> for Boolean types, and <ph id="ph4">`null`</ph> for reference types.</source>
          <target state="translated">キーが見つからない場合、<ph id="ph1">`value`</ph>パラメーター型の適切な既定値を取得する<ph id="ph2">`TValue`</ph>; たとえば、整数型の 0 (ゼロ)<ph id="ph3">`false`</ph>ブール型の場合と<ph id="ph4">`null`</ph>参照型の場合。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph> method if your code frequently attempts to access keys that are not in the dictionary.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph>メソッド コードは、頻繁にディクショナリに含まれていないキーのアクセスを試みた場合。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>Using this method is more efficient than catching the <ph id="ph1">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> thrown by the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">キャッチよりも効率的ではこのメソッドを使用して、<ph id="ph1">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph>によってスローされた、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>This method approaches an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作に近くなります。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the dictionary.</source>
          <target state="translated">例を使用する方法を示します、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A&gt;</ph>メソッドとして、ディクショナリに含まれていないキーを頻繁に試行するプログラムで値を取得する方法がより効率的です。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>For contrast, the example also shows how the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.</source>
          <target state="translated">これに対しても示しますが、どのように<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Item%2A&gt;</ph>プロパティ (c# のインデクサー) が存在しないキーを取得中に例外をスローします。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class (<ph id="ph2">`openWith`</ph> is the name of the Dictionary used in this example).</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラス (<ph id="ph2">`openWith`</ph>この例で使用されるディクショナリの名前です)。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Dictionary`2.Values">
          <source>Gets a collection containing the values in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 内の値を格納しているコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Values">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /&gt;</ph> 内の値を格納している <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Values">
          <source>The order of the values in the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.ValueCollection&gt;</ph> is unspecified, but it is the same order as the associated keys in the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.KeyCollection&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Keys%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.ValueCollection&gt;</ph> 内の値の順序は指定されていませんが、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.KeyCollection&gt;</ph> プロパティによって返される <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602.Keys%2A&gt;</ph> 内の関連するキーと同じ順序です。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Values">
          <source>The returned <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.ValueCollection&gt;</ph> is not a static copy; instead, the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ValueCollection&gt;</ph> refers back to the values in the original <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">返された<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.ValueCollection&gt;</ph>静的コピーではありません。 代わりに、、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ValueCollection&gt;</ph>は元の値を逆参照<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Values">
          <source>Therefore, changes to the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> continue to be reflected in the <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ValueCollection&gt;</ph>.</source>
          <target state="translated">そのため、変更、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>に反映されるまでに続行、<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ValueCollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Values">
          <source>Getting the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Values">
          <source>This code example shows how to enumerate the values in the dictionary using the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Values%2A&gt;</ph> property, and how to enumerate the keys and values in the dictionary.</source>
          <target state="translated">このコード例を使用して、ディクショナリ内の値を列挙する方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602.Values%2A&gt;</ph>プロパティ、およびキーとディクショナリ内の値を列挙する方法です。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Dictionary`2.Values">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class (<ph id="ph2">`openWith`</ph> is the name of the Dictionary used in this example).</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラス (<ph id="ph2">`openWith`</ph>この例で使用されるディクショナリの名前です)。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>