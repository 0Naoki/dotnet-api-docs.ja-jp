<Type Name="Comparer&lt;T&gt;" FullName="System.Collections.Generic.Comparer&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f518f5ced972dfa63784d51c93c4cd0209b57c3" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70702477" /></Metadata><TypeSignature Language="C#" Value="public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Comparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;!T&gt;, class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Comparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Comparer(Of T)&#xA;Implements IComparer, IComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Comparer abstract : System::Collections::Generic::IComparer&lt;T&gt;, System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type Comparer&lt;'T&gt; = class&#xA;    interface IComparer&#xA;    interface IComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">比較するオブジェクトの型。</typeparam>
    <summary><see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスの実装のための基本クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラス<xref:System.Collections.Generic.IComparer%601> <xref:System.Collections.Generic.SortedList%602>やジェネリック <xref:System.Collections.Generic.SortedDictionary%602> クラスなどのコレクションクラスで使用するインターフェイスのカスタム実装を提供するには、このクラスから派生させます。  
  
 <xref:System.Collections.Generic.Comparer%601>クラスからの派生とインターフェイスの<xref:System.IComparable?displayProperty=nameWithType>実装の違いは、次のとおりです。  
  
-   2つのオブジェクトを既定で比較する方法を指定する<xref:System.IComparable?displayProperty=nameWithType>には、クラスにインターフェイスを実装します。 これにより、指定した既定の比較コードが並べ替え操作で使用されます。  
  
-   既定の比較子の代わりに使用する比較子を定義するに<xref:System.Collections.Generic.Comparer%601>は、クラスから派生させます。 この比較子は、比較子をパラメーターとして受け取る並べ替え操作で使用できます。  
  
 <xref:System.Collections.Generic.Comparer%601.Default%2A>プロパティによって返されるオブジェクトは<xref:System.IComparable%601?displayProperty=nameWithType> 、ジェネリックインターフェイス`IComparable<T>` ( C#で`IComparable(Of T)`は、Visual Basic) を使用して2つのオブジェクトを比較します。 型`T`が<xref:System.IComparable%601?displayProperty=nameWithType>ジェネリックインターフェイスを実装していない<xref:System.Collections.Generic.Comparer%601.Default%2A>場合、プロパティ<xref:System.Collections.Generic.Comparer%601>は<xref:System.IComparable?displayProperty=nameWithType>インターフェイスを使用するを返します。  
  
   
  
## Examples  
 次の例では、クラス`BoxLengthFirst` <xref:System.Collections.Generic.Comparer%601>からクラスを派生させることができます。 この比較子は、型`Box`の2つのオブジェクトを比較します。 これらの値は、まず長さ、次に高さ、次に幅で並べ替えられます。 クラス`Box`は、2 <xref:System.IComparable%601>つ`Box`のオブジェクト間の既定の比較を制御するインターフェイスを実装します。 この既定の実装では、最初に高さ、次に長さ、次に幅で並べ替えます。 この例では、最初に`Box` `BoxLengthFirst`比較子を使用し、次に既定の比較子を使用してオブジェクトのリストを並べ替えることによって、2つの比較の違いを示します。  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />と<see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" />の動作は、カルチャの区別と大文字小文字の区別の観点から異なる場合があります。  
  
文字列比較の場合は<see cref="T:System.StringComparer" /> 、 <c>&lt;比較子文字列&gt;</c>よりもクラスを使用することをお勧めします。  クラスのプロパティ<see cref="T:System.StringComparer" />は、カルチャの区別と大文字と小文字の区別の組み合わせが異なる文字列比較を実行する、定義済みのインスタンスを返します。  大文字と小文字の区別とカルチャの区別は、同じ<see cref="T:System.StringComparer" />インスタンスのメンバー間で一貫しています。  
  
カルチャ固有の比較の詳細については、 <see cref="N:System.Globalization" /> 「名前空間と[グローバリゼーションおよびローカリゼーション](~/docs/standard/globalization-localization/index.md)」を参照してください。</para></block>
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.StringComparer" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Comparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Comparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Comparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As T, y As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(T x, T y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : 'T * 'T -&gt; int" Usage="comparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">比較する最初のオブジェクト。</param>
        <param name="y">比較する 2 番目のオブジェクト。</param>
        <summary>派生クラスでオーバーライドされると、同じ型の 2 つのオブジェクトに対する比較を実行し、一方のオブジェクトが他方よりも小さいか、等しいか、大きいかを示す値を返します。</summary>
        <returns><paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 説明 
 </description></listheader><item><term> 0 より小さい値 
 </term><description><paramref name="x" /> は <paramref name="y" /> より小さい値です。  
  
 </description></item><item><term> 0 
 </term><description><paramref name="x" /> と <paramref name="y" /> は等しい。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="x" /> が <paramref name="y" /> より大きくなっています。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを実装して、型`T`の並べ替え順序の比較をカスタマイズします。  
  
   
  
## Examples  
 次の例では、既定`Box`の比較子の代わりに使用できるオブジェクトの比較子を定義します。 この例は、 <xref:System.Collections.Generic.Comparer%601>クラスに対して提供される大規模な例の一部です。  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]
 [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="T" /> 型が、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスと <see cref="T:System.IComparable" /> インターフェイスのいずれも実装していません。</exception>
        <block subset="none" type="overrides"><para>任意<see langword="null" />の参照型との比較は許可されており、例外は生成されません。 Null 参照は、null 以外の参照よりも小さいと見なされます。  
  
カルチャ固有の比較の詳細については<see cref="N:System.Globalization" /> 、「名前空間と[グローバリゼーションおよびローカリゼーション](~/docs/standard/globalization-localization/index.md)」を参照してください。</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Comparer`1&lt;!T&gt; Create(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (comparison As Comparison(Of T)) As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::Comparer&lt;T&gt; ^ Create(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Create : Comparison&lt;'T&gt; -&gt; System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Create comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="comparison">使用する比較。</param>
        <summary>指定した比較を使用して比較子を作成します。</summary>
        <returns>新しい比較子。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.Comparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Comparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::Comparer&lt;T&gt; ^ Default { System::Collections::Generic::Comparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>汎用引数で指定された型に対して、既定の並べ替え順序比較子を返します。</summary>
        <value><see cref="T:System.Collections.Generic.Comparer`1" /> を継承し、<paramref name="T" /> 型の並べ替え順序の比較子として機能するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この<xref:System.Collections.Generic.Comparer%601>プロパティによって返される<xref:System.IComparable%601?displayProperty=nameWithType>は、ジェネリック`IComparable<T>`インターフェイスC#( `IComparable(Of T)`では、Visual Basic) を使用して2つのオブジェクトを比較します。 型`T`がジェネリックインターフェイスを<xref:System.IComparable%601?displayProperty=nameWithType>実装していない場合、この<xref:System.Collections.Generic.Comparer%601>プロパティは<xref:System.IComparable?displayProperty=nameWithType>インターフェイスを使用するを返します。  
  
   
  
## Examples  
 次の例は、 <xref:System.Collections.Generic.Comparer%601.Default%2A>プロパティを使用して、既定の比較を実行するオブジェクトを取得する方法を示しています。 この例は、 <xref:System.Collections.Generic.Comparer%601>クラスに対して提供される大規模な例の一部です。  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>文字列比較の場合、 <see cref="T:System.StringComparer" />クラスは、<c>比較子&lt;文字列&gt;</c> (Visual Basic では<c>比較子 (Of string))</c>よりも優先されます。  クラスのプロパティ<see cref="T:System.StringComparer" />は、カルチャの区別と大文字と小文字の区別の組み合わせが異なる文字列比較を実行する、定義済みのインスタンスを返します。  大文字と小文字の区別とカルチャの区別は、同じ<see cref="T:System.StringComparer" />インスタンスのメンバー間で一貫しています。  
  
カルチャ固有の比較の詳細については、 <see cref="N:System.Globalization" /> 「名前空間と[グローバリゼーションおよびローカリゼーション](~/docs/standard/globalization-localization/index.md)」を参照してください。</para></block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">比較する最初のオブジェクト。</param>
        <param name="y">比較する 2 番目のオブジェクト。</param>
        <summary>2 つのオブジェクトを比較して、一方が他方より小さいか、同じか、または大きいかを示す値を返します。</summary>
        <returns><paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。  
  
 <list type="table"><listheader><term> [値] 
 </term><description> 説明 
 </description></listheader><item><term> 0 より小さい値 
 </term><description><paramref name="x" /> は <paramref name="y" /> より小さい値です。  
  
 </description></item><item><term> 0 
 </term><description><paramref name="x" /> と <paramref name="y" /> は等しい。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="x" /> が <paramref name="y" /> より大きくなっています。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、 <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29>メソッドのラッパーであるため`obj` 、現在のインスタンスのジェネリック引数`T`によって指定された型にキャストする必要があります。 `T`に <xref:System.ArgumentException> キャストできない場合は、がスローされます。  
  
 任意`null`の参照型との比較は許可されており、例外は生成されません。 並べ替えを行う`null`場合、は他のオブジェクトより小さいと見なされます。  
  
   
  
## Examples  
 次の例は、メソッドを使用<xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A>して2つのオブジェクトを比較する方法を示しています。 この例は、 <xref:System.Collections.Generic.Comparer%601>クラスに対して提供される大規模な例の一部です。  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]
 [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="x" /> または <paramref name="y" /> が、<paramref name="T" /> 型にキャストできない型です。  
  
または 
 <paramref name="x" /> および <paramref name="y" /> が、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスと <see cref="T:System.IComparable" /> インターフェイスのいずれも実装していません。</exception>
        <block subset="none" type="usage"><para>
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />と<see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" />の動作は、カルチャの区別と大文字小文字の区別の点で異なります。  
  
文字列比較の場合は<see cref="T:System.StringComparer" /> 、 <c>&lt;比較子文字列&gt;</c>よりもクラスを使用することをお勧めします。  クラスのプロパティ<see cref="T:System.StringComparer" />は、カルチャの区別と大文字と小文字の区別の組み合わせが異なる文字列比較を実行する、定義済みのインスタンスを返します。  大文字と小文字の区別とカルチャの区別は、同じ<see cref="T:System.StringComparer" />インスタンスのメンバー間で一貫しています。  
  
カルチャ固有の比較の詳細については、 <see cref="N:System.Globalization" /> 「名前空間と[グローバリゼーションおよびローカリゼーション](~/docs/standard/globalization-localization/index.md)」を参照してください。</para></block>
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>
