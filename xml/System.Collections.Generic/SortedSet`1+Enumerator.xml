<Type Name="SortedSet&lt;T&gt;+Enumerator" FullName="System.Collections.Generic.SortedSet&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d2489151c9133a8559cb454d71c94a0cfe6f0638" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SortedSet&lt;T&gt;.Enumerator : System.Collections.Generic.IEnumerator&lt;T&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi serializable sealed beforefieldinit SortedSet`1/Enumerator&lt;T&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerator`1&lt;!T&gt;, class System.Collections.IEnumerator, class System.IDisposable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.SortedSet`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure SortedSet(Of T).Enumerator&#xA;Implements IDeserializationCallback, IEnumerator(Of T), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public: value class SortedSet&lt;T&gt;::Enumerator : System::Collections::Generic::IEnumerator&lt;T&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="20790-101">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトの要素を列挙します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="20790-101">Enumerates the elements of a <see cref="T:System.Collections.Generic.SortedSet`1" /> object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20790-102">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual basic) 列挙子の複雑さです。</span><span class="sxs-lookup"><span data-stu-id="20790-102">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators.</span></span> <span data-ttu-id="20790-103">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="20790-103">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20790-104"><xref:System.IDisposable> インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="20790-104"><xref:System.IDisposable> interface.</span></span> <span data-ttu-id="20790-105">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="20790-105">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="20790-106">型の直接 dispose を呼び出す、<xref:System.IDisposable.Dispose%2A>メソッドで、`try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="20790-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a`try`/`catch` block.</span></span> <span data-ttu-id="20790-107">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(C# の場合) または`Using`(Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="20790-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="20790-108">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="20790-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="20790-109">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="20790-109">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="20790-110">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="20790-110">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="20790-111">この位置にある、<xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A>プロパティが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="20790-111">At this position, the <xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="20790-112">そのため、呼び出す必要があります、<xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A>です。</span><span class="sxs-lookup"><span data-stu-id="20790-112">Therefore, you must call the <xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="20790-113"><xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A> は、<xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="20790-113"><xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="20790-114"><xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="20790-114"><xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="20790-115">場合<xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="20790-115">If <xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="20790-116">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="20790-116">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="20790-117">最後の呼び出し場合<xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="20790-117">If the last call to <xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="20790-118">設定することはできません<xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A>再度、コレクションの最初の要素を作成する必要が新しい列挙子オブジェクト代わりにします。</span><span class="sxs-lookup"><span data-stu-id="20790-118">You cannot set <xref:System.Collections.Generic.SortedSet%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator object instead.</span></span>  
  
 <span data-ttu-id="20790-119">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="20790-119">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="20790-120">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="20790-120">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="20790-121">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="20790-121">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="20790-122">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="20790-122">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="20790-123">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="20790-123">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="20790-124"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="20790-124">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedSet`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="20790-125">列挙子の現在位置の要素を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-125">Gets the element at the current position of the enumerator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="20790-126">コレクション内の、列挙子の現在位置にある要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-126">The element in the collection at the current position of the enumerator.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20790-127">列挙子を作成した後、または後に、<xref:System.Collections.IEnumerator.Reset%2A>メソッドが呼び出されると、<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子の値を読み取る前に、コレクションの最初の要素に進めるメソッドを呼び出す必要があります、<xref:System.Collections.IEnumerator.Current%2A>プロパティ以外の場合、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="20790-127">After an enumerator is created or after the <xref:System.Collections.IEnumerator.Reset%2A> method is called, the <xref:System.Collections.IEnumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref:System.Collections.IEnumerator.Current%2A> property; otherwise, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span>  
  
 <span data-ttu-id="20790-128"><xref:System.Collections.IEnumerator.Current%2A> または例外をスロー、最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`コレクションの末尾を示します。</span><span class="sxs-lookup"><span data-stu-id="20790-128"><xref:System.Collections.IEnumerator.Current%2A> also throws an exception if the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="20790-129"><xref:System.Collections.IEnumerator.Current%2A> 連続して呼び出すと、列挙子の位置を移動しません<xref:System.Collections.IEnumerator.Current%2A>されるまで、同じオブジェクトを返す<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="20790-129"><xref:System.Collections.IEnumerator.Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Collections.IEnumerator.Current%2A> return the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="20790-130">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="20790-130">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="20790-131">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="20790-131">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="20790-132">呼び出し元のコレクションが変更された場合<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドとの値を取得する、<xref:System.Collections.IEnumerator.Current%2A>プロパティ、<xref:System.Collections.IEnumerator.Current%2A>列挙子が既に無効になっている場合でもに設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="20790-132">If the collection is modified between calling <xref:System.Collections.IEnumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.IEnumerator.Current%2A> property, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20790-133">
            <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-133">Releases all resources used by the <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20790-134">列挙子を <see cref="T:System.Collections.Generic.SortedSet`1" /> コレクションの次の要素に進めます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-134">Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.SortedSet`1" /> collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20790-135">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-135">
              <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20790-136">コレクション、および最初の呼び出しの最初の要素の前に、列挙子が配置されている列挙子を作成した後、<xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A>メソッドでは、列挙子をコレクションの最初の要素に進めます。</span><span class="sxs-lookup"><span data-stu-id="20790-136">After an enumerator is created, the enumerator is positioned before the first element in the collection, and the first call to the <xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> method advances the enumerator to the first element of the collection.</span></span>  
  
 <span data-ttu-id="20790-137">場合<xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="20790-137">If <xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="20790-138">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="20790-138">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.SortedSet%601.Enumerator.MoveNext%2A> also return `false`.</span></span>  
  
 <span data-ttu-id="20790-139">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="20790-139">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="20790-140">追加、変更、要素、削除など、コレクションに変更された場合の列挙子が無効になり回復できなくなります。</span><span class="sxs-lookup"><span data-stu-id="20790-140">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="20790-141">コレクションは、列挙子の作成後に変更されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-141">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="20790-142">列挙子の現在位置の要素を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-142">Gets the element at the current position of the enumerator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="20790-143">コレクション内の、列挙子の現在位置にある要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-143">The element in the collection at the current position of the enumerator.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20790-144">列挙子を作成した後、または後に、<xref:System.Collections.IEnumerator.Reset%2A>が呼び出されると、<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子の値を読み取る前に、コレクションの最初の要素に進めるを呼び出す必要があります<xref:System.Collections.IEnumerator.Current%2A>、それ以外の<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="20790-144">After an enumerator is created or after a <xref:System.Collections.IEnumerator.Reset%2A> is called, <xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>; otherwise, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span>  
  
 <span data-ttu-id="20790-145"><xref:System.Collections.IEnumerator.Current%2A> または例外をスロー、最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`コレクションの末尾を示します。</span><span class="sxs-lookup"><span data-stu-id="20790-145"><xref:System.Collections.IEnumerator.Current%2A> also throws an exception if the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="20790-146"><xref:System.Collections.IEnumerator.Current%2A> 連続して呼び出すと、列挙子の位置を移動しません<xref:System.Collections.IEnumerator.Current%2A>されるまで、同じオブジェクトを返す<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="20790-146"><xref:System.Collections.IEnumerator.Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Collections.IEnumerator.Current%2A> return the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="20790-147">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="20790-147">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="20790-148">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="20790-148">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="20790-149">間で、コレクションが変更された場合<xref:System.Collections.IEnumerator.MoveNext%2A>と<xref:System.Collections.IEnumerator.Current%2A>、<xref:System.Collections.IEnumerator.Current%2A>列挙子が既に無効になっている場合でもに設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="20790-149">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="20790-150">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-150">The enumerator is positioned before the first element of the collection or after the last element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Reset">
      <MemberSignature Language="C#" Value="void IEnumerator.Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IEnumerator.Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset" />
      <MemberSignature Language="VB.NET" Value="Sub Reset () Implements IEnumerator.Reset" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IEnumerator.Reset() = System::Collections::IEnumerator::Reset;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20790-151">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-151">Sets the enumerator to its initial position, which is before the first element in the collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20790-152">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="20790-152">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="20790-153">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="20790-153">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="20790-154">コレクションは、列挙子の作成後に変更されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-154">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="20790-155">逆シリアル化イベントのソース。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-155">The source of the deserialization event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20790-156">
            <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-156">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <span data-ttu-id="20790-157">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-157">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with the current <see cref="T:System.Collections.Generic.SortedSet`1" /> instance is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="20790-158">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-158">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.SortedSet`1" /> instance.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="20790-159">
            <see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-159">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.SortedSet`1" /> instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20790-160">
            <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスをシリアル化するために必要なデータを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-160">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Collections.Generic.SortedSet`1" /> instance.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="20790-161">
            <paramref name="info" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="20790-161">
              <paramref name="info" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>