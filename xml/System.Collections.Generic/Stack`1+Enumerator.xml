<Type Name="Stack&lt;T&gt;+Enumerator" FullName="System.Collections.Generic.Stack&lt;T&gt;+Enumerator">
  <TypeSignature Language="C#" Value="public struct Stack&lt;T&gt;.Enumerator : System.Collections.Generic.IEnumerator&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi serializable sealed beforefieldinit Stack`1/Enumerator&lt;T&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerator`1&lt;!T&gt;, class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Stack(Of T).Enumerator&#xA;Implements IEnumerator(Of T)" />
  <TypeSignature Language="C++ CLI" Value="public: value class Stack&lt;T&gt;::Enumerator : System::Collections::Generic::IEnumerator&lt;T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="a7121-101"><see cref="T:System.Collections.Generic.Stack`1" /> の要素を列挙します。</span><span class="sxs-lookup"><span data-stu-id="a7121-101">Enumerates the elements of a <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7121-102">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="a7121-102">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="a7121-103">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a7121-103">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a7121-104">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="a7121-104">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a7121-105">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a7121-105">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a7121-106">この位置では、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="a7121-106">At this position, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a7121-107">そのため、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a7121-107">Therefore, you must call <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="a7121-108"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> は、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a7121-108"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="a7121-109"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="a7121-109"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a7121-110">場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="a7121-110">If <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a7121-111">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="a7121-111">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a7121-112">最後の呼び出し場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="a7121-112">If the last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a7121-113"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a7121-113">You cannot set <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="a7121-114">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a7121-114">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a7121-115">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>または<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="a7121-115">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="a7121-116">呼び出し元のコレクションが変更された場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>メソッドとの値を取得する、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>プロパティ、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>列挙子が既に無効になっている場合でもに設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="a7121-116">If the collection is modified between calling <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> property, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>   
  
 <span data-ttu-id="a7121-117">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="a7121-117">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a7121-118">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a7121-118">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a7121-119">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a7121-119">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a7121-120">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a7121-120">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a7121-121">列挙子の現在位置の要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="a7121-121">Gets the element at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="a7121-122"><see cref="T:System.Collections.Generic.Stack`1" /> のうち、列挙子の現在位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="a7121-122">The element in the <see cref="T:System.Collections.Generic.Stack`1" /> at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7121-123"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> スロー、<xref:System.InvalidOperationException>次の条件のいずれか。</span><span class="sxs-lookup"><span data-stu-id="a7121-123"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> throws an <xref:System.InvalidOperationException> under any of the following conditions:</span></span>  
  
- <span data-ttu-id="a7121-124">列挙子はコレクションの最初の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a7121-124">The enumerator is positioned before the first element of the collection.</span></span> <span data-ttu-id="a7121-125">列挙子を作成した後、または後に発生する、<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a7121-125">That happens after an enumerator is created or after the <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> method is called.</span></span> <span data-ttu-id="a7121-126"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>列挙子の値を読み取る前に、コレクションの最初の要素に進めるメソッドを呼び出す必要があります、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a7121-126">The <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> property.</span></span>  
  
- <span data-ttu-id="a7121-127">最後に呼び出した<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>返される`false`コレクションの末尾を示す、列挙子がコレクションの最後の要素の後に配置します。</span><span class="sxs-lookup"><span data-stu-id="a7121-127">The last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the collection and that the enumerator is positioned after the last element of the collection.</span></span>

 <span data-ttu-id="a7121-128"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 連続して呼び出すと、列挙子の位置を移動しません<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>されるまで、同じオブジェクトを返す<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>または<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="a7121-128"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> return the same object until either <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="a7121-129">呼び出し元のコレクションが変更された場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>メソッドとの値を取得する、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>プロパティ、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>列挙子が無効になった場合でもに設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="a7121-129">If the collection is modified between calling <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> property, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the element that it is set to, even though the enumerator is invalidated.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a7121-130">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</span><span class="sxs-lookup"><span data-stu-id="a7121-130">The enumerator is positioned before the first element of the collection or after the last element.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Enumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a7121-131">
          <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a7121-131">Releases all resources used by the <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a7121-132">列挙子を <see cref="T:System.Collections.Generic.Stack`1" /> の次の要素に進めます。</span><span class="sxs-lookup"><span data-stu-id="a7121-132">Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Stack`1" />.</span></span></summary>
        <returns>
          <span data-ttu-id="a7121-133">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a7121-133"><see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7121-134">コレクション、および最初の呼び出しの最初の要素の前に、列挙子が配置されている列挙子を作成したら、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>列挙子をコレクションの最初の要素に進めます。</span><span class="sxs-lookup"><span data-stu-id="a7121-134">After an enumerator is created, the enumerator is positioned before the first element in the collection, and the first call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> advances the enumerator to the first element of the collection.</span></span>  
  
 <span data-ttu-id="a7121-135">場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="a7121-135">If <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a7121-136">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="a7121-136">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> also return `false`.</span></span>  
  
 <span data-ttu-id="a7121-137">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a7121-137">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a7121-138">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>または<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="a7121-138">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="a7121-139">呼び出し元のコレクションが変更された場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>メソッドとの値を取得する、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>プロパティ、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>列挙子が無効になった場合でもに設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="a7121-139">If the collection is modified between calling <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> property, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the element that it is set to, even though the enumerator is invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a7121-140">コレクションは、列挙子の作成後に変更されました。</span><span class="sxs-lookup"><span data-stu-id="a7121-140">The collection was modified after the enumerator was created.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.Stack`1.Enumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a7121-141">列挙子の現在位置の要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="a7121-141">Gets the element at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="a7121-142">コレクション内の、列挙子の現在位置にある要素。</span><span class="sxs-lookup"><span data-stu-id="a7121-142">The element in the collection at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
 <span data-ttu-id="a7121-143"><xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> スロー、<xref:System.InvalidOperationException>次の条件のいずれか。</span><span class="sxs-lookup"><span data-stu-id="a7121-143"><xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> throws an <xref:System.InvalidOperationException> under any of the following conditions:</span></span>  
  
- <span data-ttu-id="a7121-144">列挙子はコレクションの最初の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a7121-144">The enumerator is positioned before the first element of the collection.</span></span> <span data-ttu-id="a7121-145">列挙子を作成した後、または後に発生する、<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a7121-145">That happens after an enumerator is created or after the <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> method is called.</span></span> <span data-ttu-id="a7121-146"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>列挙子の値を読み取る前に、コレクションの最初の要素に進めるメソッドを呼び出す必要があります、<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a7121-146">The <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> property.</span></span>  
  
- <span data-ttu-id="a7121-147">最後に呼び出した<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>返される`false`コレクションの末尾を示す、列挙子がコレクションの最後の要素の後に配置します。</span><span class="sxs-lookup"><span data-stu-id="a7121-147">The last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the collection and that the enumerator is positioned after the last element of the collection.</span></span>

 <span data-ttu-id="a7121-148"><xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> 連続して呼び出すと、列挙子の位置を移動しません<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A>されるまで、同じオブジェクトを返す<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>または<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="a7121-148"><xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> return the same object until either <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="a7121-149">呼び出し元のコレクションが変更された場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>メソッドとの値を取得する、<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A>プロパティ、<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A>列挙子が無効になった場合でもに設定されている要素を返します。</span><span class="sxs-lookup"><span data-stu-id="a7121-149">If the collection is modified between calling <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> property, <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> returns the element that it is set to, even though the enumerator is invalidated.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a7121-150">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</span><span class="sxs-lookup"><span data-stu-id="a7121-150">The enumerator is positioned before the first element of the collection or after the last element.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Reset">
      <MemberSignature Language="C#" Value="void IEnumerator.Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IEnumerator.Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset" />
      <MemberSignature Language="VB.NET" Value="Sub Reset () Implements IEnumerator.Reset" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IEnumerator.Reset() = System::Collections::IEnumerator::Reset;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a7121-151">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</span><span class="sxs-lookup"><span data-stu-id="a7121-151">Sets the enumerator to its initial position, which is before the first element in the collection.</span></span> <span data-ttu-id="a7121-152">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="a7121-152">This class cannot be inherited.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a7121-153">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a7121-153">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a7121-154">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>または<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="a7121-154">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a7121-155">コレクションは、列挙子の作成後に変更されました。</span><span class="sxs-lookup"><span data-stu-id="a7121-155">The collection was modified after the enumerator was created.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Enumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>