<Type Name="IEnumerator&lt;T&gt;" FullName="System.Collections.Generic.IEnumerator&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5390581ed5675b3092655fe58078f370167b3b67" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37701468" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumerator&lt;out T&gt; : IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerator`1&lt;+ T&gt; implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerator(Of Out T)&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerator : IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type IEnumerator&lt;'T&gt; = interface&#xA;    interface IDisposable&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="fa975-101">列挙するオブジェクトの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fa975-101">The type of objects to enumerate.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="fa975-102">ジェネリック コレクションに対する単純な反復処理をサポートします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fa975-102">Supports a simple iteration over a generic collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa975-103"><xref:System.Collections.Generic.IEnumerator%601> すべてのジェネリック列挙子は、基本インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="fa975-103"><xref:System.Collections.Generic.IEnumerator%601> is the base interface for all generic enumerators.</span></span>  
  
 <span data-ttu-id="fa975-104">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual basic) 列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="fa975-104">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="fa975-105">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="fa975-105">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="fa975-106">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="fa975-106">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="fa975-107">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="fa975-107">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="fa975-108">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="fa975-108">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="fa975-109">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="fa975-109">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="fa975-110"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="fa975-110"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="fa975-111"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="fa975-111"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="fa975-112">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="fa975-112">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="fa975-113">この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="fa975-113">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="fa975-114">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="fa975-114">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="fa975-115"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fa975-115">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="fa975-116"><xref:System.Collections.IEnumerator.Reset%2A>メソッドが COM 相互運用性を提供します。</span><span class="sxs-lookup"><span data-stu-id="fa975-116">The <xref:System.Collections.IEnumerator.Reset%2A> method is provided for COM interoperability.</span></span> <span data-ttu-id="fa975-117">実装する。 必ずしも必要はありません。代わりに、実装者をスローする可能性を<xref:System.NotSupportedException>します。</span><span class="sxs-lookup"><span data-stu-id="fa975-117">It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="fa975-118">ただし、これを行う場合は、する必要がありますに呼び出し元は依存しないことを確認して、<xref:System.Collections.IEnumerator.Reset%2A>機能します。</span><span class="sxs-lookup"><span data-stu-id="fa975-118">However, if you choose to do this, you should make sure no callers are relying on the <xref:System.Collections.IEnumerator.Reset%2A> functionality.</span></span>  
  
 <span data-ttu-id="fa975-119">追加、変更、または、要素を削除するなど、コレクションに変更された場合、列挙子の動作は未定義です。</span><span class="sxs-lookup"><span data-stu-id="fa975-119">If changes are made to the collection, such as adding, modifying, or deleting elements, the behavior of the enumerator is undefined.</span></span>  
  
 <span data-ttu-id="fa975-120">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="fa975-120">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="fa975-121">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="fa975-121">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="fa975-122">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fa975-122">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="fa975-123"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="fa975-123">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa975-124">次の例の実装を示しています、<xref:System.Collections.Generic.IEnumerator%601>カスタム オブジェクトのコレクション クラスのインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="fa975-124">The following example shows an implementation of the <xref:System.Collections.Generic.IEnumerator%601> interface for a collection class of custom objects.</span></span> <span data-ttu-id="fa975-125">カスタム オブジェクトは、型のインスタンス`Box`、コレクション クラスは、`BoxCollection`します。</span><span class="sxs-lookup"><span data-stu-id="fa975-125">The custom object is an instance of the type `Box`, and the collection class is `BoxCollection`.</span></span> <span data-ttu-id="fa975-126">このコード例が示されている例の一部、<xref:System.Collections.Generic.ICollection%601>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="fa975-126">This code example is part of a larger example provided for the <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 [!code-csharp[System.Collections.Generic.BoxExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxexamples/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxexamples/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="fa975-127">
        <para>このインターフェイスを実装するには、非ジェネリックを実装する必要があります<see cref="T:System.Collections.IEnumerator" />インターフェイス。<see cref="M:System.Collections.IEnumerator.MoveNext" />と<see cref="M:System.Collections.IEnumerator.Reset" />メソッドに依存しない<typeparamref name="T" />、非ジェネリック インターフェイスにのみ表示されます。<see cref="P:System.Collections.Generic.IEnumerator`1.Current" />プロパティの両方のインターフェイスに表示し、異なる戻り値の型を持ちます。非ジェネリック実装<see cref="P:System.Collections.IEnumerator.Current" />プロパティとして明示的なインターフェイスの実装。これにより、ジェネリック インターフェイスを使用する、非ジェネリック インターフェイスのすべてのコンシューマーができます。さらに、<see cref="T:System.Collections.Generic.IEnumerator`1" />実装<see cref="T:System.IDisposable" />、実装する必要がある、<see cref="M:System.IDisposable.Dispose" />メソッド。これにより、データベース接続を閉じるか、その他のリソースを使用する場合は、ファイル ハンドルや同様の操作をリリースすることができます。その他のリソースを破棄しない場合は、提供、空<see cref="M:System.IDisposable.Dispose" />実装します。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="fa975-127">
          <para>Implementing this interface requires implementing the nongeneric <see cref="T:System.Collections.IEnumerator" /> interface. The <see cref="M:System.Collections.IEnumerator.MoveNext" /> and <see cref="M:System.Collections.IEnumerator.Reset" /> methods do not depend on <typeparamref name="T" />, and appear only on the nongeneric interface. The <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> property appears on both interfaces, and has different return types. Implement the nongeneric <see cref="P:System.Collections.IEnumerator.Current" /> property as an explicit interface implementation. This allows any consumer of the nongeneric interface to consume the generic interface.  In addition, <see cref="T:System.Collections.Generic.IEnumerator`1" /> implements <see cref="T:System.IDisposable" />, which requires you to implement the <see cref="M:System.IDisposable.Dispose" /> method. This enables you to close database connections or release file handles or similar operations when using other resources. If there are no additional resources to dispose of, provide an empty <see cref="M:System.IDisposable.Dispose" /> implementation.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IEnumerator`1.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Collections.Generic.IEnumerator&lt;'T&gt;.Current" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa975-128">列挙子の現在位置にあるコレクション内の要素を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa975-128">Gets the element in the collection at the current position of the enumerator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa975-129">コレクション内の、列挙子の現在位置にある要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa975-129">The element in the collection at the current position of the enumerator.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa975-130"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> 次の条件のいずれかは未定義です。</span><span class="sxs-lookup"><span data-stu-id="fa975-130"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="fa975-131">列挙子の作成後すぐに、列挙子は、コレクション内の最初の要素の前に位置します。</span><span class="sxs-lookup"><span data-stu-id="fa975-131">The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.</span></span>   <span data-ttu-id="fa975-132"><xref:System.Collections.IEnumerator.MoveNext%2A> 値を読み取る前に、コレクションの最初の要素を列挙子を進めるに呼び出す必要がある<xref:System.Collections.Generic.IEnumerator%601.Current%2A>します。</span><span class="sxs-lookup"><span data-stu-id="fa975-132"><xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
-   <span data-ttu-id="fa975-133">最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`コレクションの末尾を示します。</span><span class="sxs-lookup"><span data-stu-id="fa975-133">The last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
-   <span data-ttu-id="fa975-134">列挙子は追加、変更、または削除する要素など、コレクションで行われた変更が原因で無効になります。</span><span class="sxs-lookup"><span data-stu-id="fa975-134">The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</span></span>  
  
 <span data-ttu-id="fa975-135"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="fa975-135"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="fa975-136"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="fa975-136"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="fa975-137">
            <para>このインターフェイスを実装するには、非ジェネリックを実装する必要があります<see cref="T:System.Collections.IEnumerator" />インターフェイス。<see cref="P:System.Collections.Generic.IEnumerator`1.Current" />プロパティの両方のインターフェイスに表示し、異なる戻り値の型を持ちます。非ジェネリック実装<see cref="P:System.Collections.IEnumerator.Current" />プロパティとして明示的なインターフェイスの実装。これにより、ジェネリック インターフェイスを使用する、非ジェネリック インターフェイスのすべてのコンシューマーができます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="fa975-137">
              <para>Implementing this interface requires implementing the nongeneric <see cref="T:System.Collections.IEnumerator" /> interface. The <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> property appears on both interfaces, and has different return types. Implement the nongeneric <see cref="P:System.Collections.IEnumerator.Current" /> property as an explicit interface implementation. This allows any consumer of the nongeneric interface to consume the generic interface.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
      </Docs>
    </Member>
  </Members>
</Type>