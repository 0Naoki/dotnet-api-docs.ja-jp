<Type Name="IEnumerator&lt;T&gt;" FullName="System.Collections.Generic.IEnumerator&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7e4479c1651fa72e0392b7b806525ef6bb955034" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70526553" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerator&lt;out T&gt; : IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerator`1&lt;+ T&gt; implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerator(Of Out T)&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerator : IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type IEnumerator&lt;'T&gt; = interface&#xA;    interface IDisposable&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">列挙するオブジェクトの型。</typeparam>
    <summary>ジェネリック コレクションに対する単純な反復処理をサポートします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerator%601>は、すべての汎用列挙子の基本インターフェイスです。  
  
 C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。  したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。 そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。 <xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。  
  
 <xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。 列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。 の最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>が返さ`false`れた場合、 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>が未定義になります。 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。  
  
 メソッド<xref:System.Collections.IEnumerator.Reset%2A>は、COM 相互運用性のために用意されています。 必ずしも実装する必要はありません。代わりに、実装者はを<xref:System.NotSupportedException>スローするだけで済みます。 ただし、この方法を選択した場合は、その<xref:System.Collections.IEnumerator.Reset%2A>機能に依存している呼び出し元がないことを確認する必要があります。  
  
 要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子の動作は未定義になります。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。 列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。 コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。  
  
   
  
## Examples  
 次の例は、カスタムオブジェクトの<xref:System.Collections.Generic.IEnumerator%601>コレクションクラスのインターフェイスの実装を示しています。 カスタムオブジェクトは型`Box`のインスタンスで`BoxCollection`あり、コレクションクラスはです。 このコード例は、 <xref:System.Collections.Generic.ICollection%601>インターフェイス用に用意されている大規模な例の一部です。  
  
 [!code-csharp[System.Collections.Generic.BoxExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxexamples/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxexamples/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>このインターフェイスを実装するには<see cref="T:System.Collections.IEnumerator" /> 、非ジェネリックインターフェイスを実装する必要があります。 メソッド<see cref="M:System.Collections.IEnumerator.MoveNext" />と<see cref="M:System.Collections.IEnumerator.Reset" />メソッドはに<typeparamref name="T" />依存せず、非ジェネリックインターフェイスにのみ表示されます。 プロパティ<see cref="P:System.Collections.Generic.IEnumerator`1.Current" />は、両方のインターフェイスに表示されます。戻り値の型は異なります。 明示的な<see cref="P:System.Collections.IEnumerator.Current" />インターフェイスの実装として、非ジェネリックプロパティを実装します。 これにより、非ジェネリックインターフェイスのすべてのコンシューマーが、ジェネリックインターフェイスを使用できるようになります。  
  
さらに、 <see cref="T:System.Collections.Generic.IEnumerator`1" />は<see cref="T:System.IDisposable" />を実装します。これに<see cref="M:System.IDisposable.Dispose" />は、メソッドを実装する必要があります。 これにより、他のリソースを使用する場合に、データベース接続を終了したり、ファイルハンドルを解放したり、同様の操作を実行したりできます。 破棄するリソースが他にない場合は、空<see cref="M:System.IDisposable.Dispose" />の実装を指定します。</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IEnumerator`1.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Collections.Generic.IEnumerator&lt;'T&gt;.Current" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
        <value>コレクション内の、列挙子の現在位置にある要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>は、次のいずれかの条件下では未定義です。  
  
-   列挙子は、列挙子が作成された直後に、コレクション内の最初の要素の前に配置されます。   <xref:System.Collections.IEnumerator.MoveNext%2A>の<xref:System.Collections.Generic.IEnumerator%601.Current%2A>値を読み取る前に、列挙子をコレクションの最初の要素に進めるには、を呼び出す必要があります。  
  
-   コレクションの末尾を<xref:System.Collections.IEnumerator.MoveNext%2A>示す`false`、返されたの最後の呼び出し。  
  
-   コレクションに加えられた変更 (要素の追加、変更、削除など) が原因で、列挙子が無効になります。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。 <xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>このインターフェイスを実装するには<see cref="T:System.Collections.IEnumerator" /> 、非ジェネリックインターフェイスを実装する必要があります。 プロパティ<see cref="P:System.Collections.Generic.IEnumerator`1.Current" />は、両方のインターフェイスに表示されます。戻り値の型は異なります。 明示的な<see cref="P:System.Collections.IEnumerator.Current" />インターフェイスの実装として、非ジェネリックプロパティを実装します。 これにより、非ジェネリックインターフェイスのすべてのコンシューマーが、ジェネリックインターフェイスを使用できるようになります。</para></block>
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
      </Docs>
    </Member>
  </Members>
</Type>
