<Type Name="IEnumerator&lt;T&gt;" FullName="System.Collections.Generic.IEnumerator&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c01a2b4bfa9de11a71f8a595354f73626ce7353" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumerator&lt;out T&gt; : IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerator`1&lt;+ T&gt; implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerator(Of Out T)&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerator : IDisposable, System::Collections::IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="fd8fb-101">列挙するオブジェクトの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fd8fb-101">The type of objects to enumerate.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="fd8fb-102">ジェネリック コレクションに対する単純な反復処理をサポートします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="fd8fb-102">Supports a simple iteration over a generic collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd8fb-103"><xref:System.Collections.Generic.IEnumerator%601> すべてのジェネリック列挙子を基本インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-103"><xref:System.Collections.Generic.IEnumerator%601> is the base interface for all generic enumerators.</span></span>  
  
 <span data-ttu-id="fd8fb-104">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-104">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="fd8fb-105">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-105">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="fd8fb-106">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-106">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="fd8fb-107">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-107">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="fd8fb-108">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-108">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="fd8fb-109">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-109">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="fd8fb-110"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-110"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="fd8fb-111"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-111"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="fd8fb-112">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-112">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="fd8fb-113">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-113">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="fd8fb-114">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-114">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="fd8fb-115"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-115">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="fd8fb-116"><xref:System.Collections.IEnumerator.Reset%2A>メソッドは、COM 相互運用性を提供します。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-116">The <xref:System.Collections.IEnumerator.Reset%2A> method is provided for COM interoperability.</span></span> <span data-ttu-id="fd8fb-117">限りません。 実装する必要はありません。代わりにの実行者をスローできますだけで、<xref:System.NotSupportedException>です。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-117">It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="fd8fb-118">ただし、この方法を選択する場合を確認してくださいで呼び出し元がない証明書利用者、<xref:System.Collections.IEnumerator.Reset%2A>機能します。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-118">However, if you choose to do this, you should make sure no callers are relying on the <xref:System.Collections.IEnumerator.Reset%2A> functionality.</span></span>  
  
 <span data-ttu-id="fd8fb-119">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-119">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="fd8fb-120">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-120">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="fd8fb-121">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-121">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="fd8fb-122">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-122">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="fd8fb-123">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-123">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="fd8fb-124"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-124">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd8fb-125">次の例の実装を示しています、<xref:System.Collections.Generic.IEnumerator%601>カスタム オブジェクトのコレクション クラスのインターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-125">The following example shows an implementation of the <xref:System.Collections.Generic.IEnumerator%601> interface for a collection class of custom objects.</span></span> <span data-ttu-id="fd8fb-126">カスタム オブジェクトの種類のインスタンスでは`Box`、コレクション クラスは、`BoxCollection`です。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-126">The custom object is an instance of the type `Box`, and the collection class is `BoxCollection`.</span></span> <span data-ttu-id="fd8fb-127">このコード例に示されている例の一部である、<xref:System.Collections.Generic.ICollection%601>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-127">This code example is part of a larger example provided for the <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 [!code-csharp[System.Collections.Generic.BoxExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxexamples/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxexamples/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="fd8fb-128">このインターフェイスを実装するには、非ジェネリックの実装が必要です<see cref="T:System.Collections.IEnumerator" />インターフェイスです。</span>
        <span class="sxs-lookup">
          <span data-stu-id="fd8fb-128">Implementing this interface requires implementing the nongeneric <see cref="T:System.Collections.IEnumerator" /> interface.</span>
        </span>
        <span data-ttu-id="fd8fb-129">
          <see cref="M:System.Collections.IEnumerator.MoveNext" />と<see cref="M:System.Collections.IEnumerator.Reset" />メソッドには依存しない<typeparamref name="T" />、され、非ジェネリック インターフェイスにのみ表示されます。</span>
        <span class="sxs-lookup">
          <span data-stu-id="fd8fb-129">The <see cref="M:System.Collections.IEnumerator.MoveNext" /> and <see cref="M:System.Collections.IEnumerator.Reset" /> methods do not depend on <typeparamref name="T" />, and appear only on the nongeneric interface.</span>
        </span>
        <span data-ttu-id="fd8fb-130">
          <see cref="P:System.Collections.Generic.IEnumerator`1.Current" />プロパティは異なる戻り値の型があり、両方のインターフェイスに表示されます。</span>
        <span class="sxs-lookup">
          <span data-stu-id="fd8fb-130">The <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> property appears on both interfaces, and has different return types.</span>
        </span>
        <span data-ttu-id="fd8fb-131">非ジェネリックの実装<see cref="P:System.Collections.IEnumerator.Current" />プロパティとして、明示的なインターフェイスの実装です。</span>
        <span class="sxs-lookup">
          <span data-stu-id="fd8fb-131">Implement the nongeneric <see cref="P:System.Collections.IEnumerator.Current" /> property as an explicit interface implementation.</span>
        </span>
        <span data-ttu-id="fd8fb-132">これにより、ジェネリック インターフェイスを使用する、非ジェネリック インターフェイスのすべてのコンシューマーです。</span>
        <span class="sxs-lookup">
          <span data-stu-id="fd8fb-132">This allows any consumer of the nongeneric interface to consume the generic interface.</span>
        </span>
        <span data-ttu-id="fd8fb-133">さらに、<see cref="T:System.Collections.Generic.IEnumerator`1" />実装<see cref="T:System.IDisposable" />、実装する必要がある、<see cref="M:System.IDisposable.Dispose" />メソッドです。</span>
        <span class="sxs-lookup">
          <span data-stu-id="fd8fb-133">In addition, <see cref="T:System.Collections.Generic.IEnumerator`1" /> implements <see cref="T:System.IDisposable" />, which requires you to implement the <see cref="M:System.IDisposable.Dispose" /> method.</span>
        </span>
        <span data-ttu-id="fd8fb-134">これにより、データベース接続を閉じるか、その他のリソースを使用する場合に、ファイル ハンドルや同様の操作をリリースすることができます。</span>
        <span class="sxs-lookup">
          <span data-stu-id="fd8fb-134">This enables you to close database connections or release file handles or similar operations when using other resources.</span>
        </span>
        <span data-ttu-id="fd8fb-135">破棄するその他のリソースがない場合は、空を指定します。<see cref="M:System.IDisposable.Dispose" />実装します。</span>
        <span class="sxs-lookup">
          <span data-stu-id="fd8fb-135">If there are no additional resources to dispose of, provide an empty <see cref="M:System.IDisposable.Dispose" /> implementation.</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IEnumerator`1.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fd8fb-136">列挙子の現在位置にあるコレクション内の要素を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fd8fb-136">Gets the element in the collection at the current position of the enumerator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fd8fb-137">コレクション内の、列挙子の現在位置にある要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="fd8fb-137">The element in the collection at the current position of the enumerator.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd8fb-138"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> 次の条件のいずれかで定義されていません。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-138"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="fd8fb-139">列挙子の作成後すぐには、列挙子は、コレクション内の最初の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-139">The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.</span></span>   <span data-ttu-id="fd8fb-140"><xref:System.Collections.IEnumerator.MoveNext%2A> 列挙子の値を読み取る前に、コレクションの最初の要素に進めるを呼び出す必要があります<xref:System.Collections.Generic.IEnumerator%601.Current%2A>です。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-140"><xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
-   <span data-ttu-id="fd8fb-141">最後に呼び出した<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`コレクションの末尾を示します。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-141">The last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
-   <span data-ttu-id="fd8fb-142">列挙子は、追加、変更、または削除する要素など、コレクションで行われた変更により無効になりました。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-142">The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</span></span>  
  
 <span data-ttu-id="fd8fb-143"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-143"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="fd8fb-144"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="fd8fb-144"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="fd8fb-145">このインターフェイスを実装するには、非ジェネリックの実装が必要です<see cref="T:System.Collections.IEnumerator" />インターフェイスです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="fd8fb-145">Implementing this interface requires implementing the nongeneric <see cref="T:System.Collections.IEnumerator" /> interface.</span>
            </span>
            <span data-ttu-id="fd8fb-146">
              <see cref="P:System.Collections.Generic.IEnumerator`1.Current" />プロパティは異なる戻り値の型があり、両方のインターフェイスに表示されます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="fd8fb-146">The <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> property appears on both interfaces, and has different return types.</span>
            </span>
            <span data-ttu-id="fd8fb-147">非ジェネリックの実装<see cref="P:System.Collections.IEnumerator.Current" />プロパティとして、明示的なインターフェイスの実装です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="fd8fb-147">Implement the nongeneric <see cref="P:System.Collections.IEnumerator.Current" /> property as an explicit interface implementation.</span>
            </span>
            <span data-ttu-id="fd8fb-148">これにより、ジェネリック インターフェイスを使用する、非ジェネリック インターフェイスのすべてのコンシューマーです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="fd8fb-148">This allows any consumer of the nongeneric interface to consume the generic interface.</span>
            </span>
          </para>
        </block>
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
      </Docs>
    </Member>
  </Members>
</Type>