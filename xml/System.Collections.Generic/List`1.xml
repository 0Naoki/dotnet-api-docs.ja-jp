<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="List`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e6add71f8155950c8b8db1f2c266f86c847f8658.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6add71f8155950c8b8db1f2c266f86c847f8658</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The type of elements in the list.</source>
          <target state="translated">リスト内の要素の型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Represents a strongly typed list of objects that can be accessed by index.</source>
          <target state="translated">インデックスを使用してアクセスできる、厳密に型指定されたオブジェクトのリストを表します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Provides methods to search, sort, and manipulate lists.</source>
          <target state="translated">リストの検索、並べ替え、および操作のためのメソッドを提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is the generic equivalent of the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスはジェネリックと同等、<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>It implements the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface by using an array whose size is dynamically increased as required.</source>
          <target state="translated">実装する、<ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>サイズが動的に拡大されるとして配列を使用してジェネリック インターフェイスが必要です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>You can add items to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> by using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> methods.</source>
          <target state="translated">項目を追加することができます、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を使用して、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses both an equality comparer and an ordering comparer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスが、等値比較子と順序比較子の両方を使用します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph> use an equality comparer for the list elements.</source>
          <target state="translated">などのメソッド<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602.Remove%2A&gt;</ph>リストの要素に対して等値比較子を使用します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default equality comparer for type <ph id="ph1">`T`</ph> is determined as follows.</source>
          <target state="translated">型の既定の等値比較子<ph id="ph1">`T`</ph>は次のように決定されます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface, then the equality comparer is the <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%28%600%29&gt;</ph> method of that interface; otherwise, the default equality comparer is <ph id="ph4">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>を実装、<ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph>ジェネリック インターフェイスは、等値比較子は、 <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%28%600%29&gt;</ph> ; そのインターフェイスのメソッドは、それ以外の場合、既定の等値比較子<ph id="ph4">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> use an ordering comparer for the list elements.</source>
          <target state="translated">などのメソッド<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph>リスト要素に対して順序比較子を使用します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default comparer for type <ph id="ph1">`T`</ph> is determined as follows.</source>
          <target state="translated">型の既定の比較子<ph id="ph1">`T`</ph>は次のように決定されます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface, then the default comparer is the <ph id="ph3">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> method of that interface; otherwise, if type <ph id="ph4">`T`</ph> implements the nongeneric <ph id="ph5">&lt;xref:System.IComparable&gt;</ph> interface, then the default comparer is the <ph id="ph6">&lt;xref:System.IComparable.CompareTo%28System.Object%29&gt;</ph> method of that interface.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>を実装する、<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイスは、既定の比較子は、 <ph id="ph3">&lt;xref:System.IComparable%601.CompareTo%28%600%29&gt;</ph> ; そのインターフェイスのメソッドそれ以外の場合型<ph id="ph4">`T`</ph>否かにかかわらずを実装する<ph id="ph5">&lt;xref:System.IComparable&gt;</ph>既定の比較子は、インターフェイス、<ph id="ph6">&lt;xref:System.IComparable.CompareTo%28System.Object%29&gt;</ph>そのインターフェイスのメソッドです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If type <ph id="ph1">`T`</ph> implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>どちらのインターフェイスを実装し、既定の比較子がない、比較子または比較デリゲートを明示的に指定する必要があります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is not guaranteed to be sorted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>並べ替えは保証されません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>You must sort the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> before performing operations (such as <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>) that require the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to be sorted.</source>
          <target state="translated">並べ替える必要があります、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>操作を実行する前に (など<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>) を必要とする、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>並べ替えられます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Elements in this collection can be accessed using an integer index.</source>
          <target state="translated">このコレクション内の要素は、整数インデックスを使用してアクセスできます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Indexes in this collection are zero-based.</source>
          <target state="translated">このコレクションのインデックスは 0 から始まります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For very large <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id="ph2">`enabled`</ph> attribute of the  configuration element to <ph id="ph3">`true`</ph> in the run-time environment.</source>
          <target state="translated">非常に大きな<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>オブジェクト、設定して、64 ビット システム上の 20億要素に最大の容量を増やすことができます、<ph id="ph2">`enabled`</ph>する構成要素の属性<ph id="ph3">`true`</ph>実行時環境でします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For an immutable version of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, see <ph id="ph2">&lt;xref:System.Collections.Immutable.ImmutableList%601&gt;</ph>.</source>
          <target state="translated">不変のバージョンについては、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスを参照してください<ph id="ph2">&lt;xref:System.Collections.Immutable.ImmutableList%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Performance Considerations</source>
          <target state="translated">パフォーマンスに関する考慮事項</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>In deciding whether to use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> class, both of which have similar functionality, remember that the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class performs better in most cases and is type safe.</source>
          <target state="translated">使用するかどうかを決定するときに、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>または<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>ことに注意して同様の機能があるは、クラス、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスより多くの場合は実行し、タイプ セーフであります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If a reference type is used for type <ph id="ph1">`T`</ph> of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, the behavior of the two classes is identical.</source>
          <target state="translated">型の参照型を使用する場合<ph id="ph1">`T`</ph>の<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラス、2 つのクラスの動作は同じです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>However, if a value type is used for type <ph id="ph1">`T`</ph>, you need to consider implementation and boxing issues.</source>
          <target state="translated">ただし、型の値の型を使用する場合<ph id="ph1">`T`</ph>実装とボックス化の問題を考慮する必要があります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If a value type is used for type <ph id="ph1">`T`</ph>, the compiler generates an implementation of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class specifically for that value type.</source>
          <target state="translated">型の値の型を使用する場合<ph id="ph1">`T`</ph>、コンパイラの実装を生成する、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>具体的にはその値の型のクラスです。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>That means a list element of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.</source>
          <target state="translated">つまり、あるリスト要素の<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>要素を使用することができますと約 500 リストの要素が作成された後、メモリ保存リストの要素をボックス化されませんが、クラスの実装を生成するために使用するメモリよりも大きい前にボックス化されるオブジェクトがありません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Make certain the value type used for type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface.</source>
          <target state="translated">型に使用される値型を確認してください<ph id="ph1">`T`</ph>を実装する、<ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph>ジェネリック インターフェイス。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If not, methods such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> must call the <ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method, which boxes the affected list element.</source>
          <target state="translated">場合などのメソッド、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>呼び出す必要があります、<ph id="ph2">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>メソッドで、影響を受けるリスト要素のボックスです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If the value type implements the <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> interface and you own the source code, also implement the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface to prevent the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods from boxing list elements.</source>
          <target state="translated">値の型を実装する場合、<ph id="ph1">&lt;xref:System.IComparable&gt;</ph>インターフェイスを所有しているソース コードでも導入、<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイスを防ぐために、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph>リストの要素をボックス化からのメソッドです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If you do not own the source code, pass an <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods</source>
          <target state="translated">ソース コードを所有していない場合、<ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>オブジェクトを<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph>メソッド</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>It is to your advantage to use the type-specific implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class instead of using the <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> class or writing a strongly typed wrapper collection yourself.</source>
          <target state="translated">型に固有の実装を使用すると便利には、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスを使用せずに、<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>クラスまたは厳密に型指定されたラッパー コレクションを記述します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.</source>
          <target state="translated">理由は、実装する必要がありますどのような .NET Framework は既に、Microsoft intermediate language コードとメタデータの実装ことはできませんが、共通言語ランタイムを共有できます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>F# Considerations</source>
          <target state="translated">F# に関する考慮事項</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is used infrequently in F# code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>頻度の低い f# コードでクラスを使用します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Instead, <bpt id="p1">[</bpt>Lists<ept id="p1">](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)</ept>, which are immutable, singly-linked lists, are typically preferred.</source>
          <target state="translated">代わりに、<bpt id="p1">[</bpt>一覧<ept id="p1">](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)</ept>、これは、変更できない、シングル リンク リストは通常の優先します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development.</source>
          <target state="translated">F# のリストは、順序付けられ、変更できない一連の値を提供し、関数型スタイルの開発での使用はサポートされてです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>When used from F#, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class is typically referred to by the  <bpt id="p1">[</bpt>ResizeArray<ph id="ph2">\&lt;</ph>'T&gt;<ept id="p1">](https://msdn.microsoft.com/library/ee353447.aspx)</ept> type abbreviation to avoid naming conflicts with F# Lists</source>
          <target state="translated">F# から使用する場合、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラス通常によって参照される、 <bpt id="p1">[</bpt>ResizeArray<ph id="ph2">\&lt;</ph>' T &gt;<ept id="p1">](https://msdn.microsoft.com/library/ee353447.aspx)</ept>名前の f# の一覧との競合を回避するため省略形を入力</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The following example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class of type string.</source>
          <target state="translated">次の例は、いくつかのプロパティとメソッドを示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>文字列型のジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>(For an example of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of complex types, see the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> method.)</source>
          <target state="translated">(の例については、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の複合型は、次を参照してください、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>メソッドです。)。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default constructor is used to create a list of strings with the default capacity.</source>
          <target state="translated">既定のコンス トラクターを使用して、既定の容量を持つ文字列のリストを作成できます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method is used to add several items.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティを表示し、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph>メソッドを使用していくつかの項目に追加します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The items are listed, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again, along with the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property, to show that the capacity has been increased as needed.</source>
          <target state="translated">項目が表示されている場合、および<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティが表示されますと組み合わせて再度、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>プロパティは、必要に応じて容量が増加したことを表示します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> method is used to test for the presence of an item in the list, the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>メソッドは、リスト内の項目の存在をテストするため、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph>メソッドを使用して、一覧の途中で新しい項目を挿入して、一覧の内容が再度表示されます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The default <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property (the indexer in C#) is used to retrieve an item, the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again.</source>
          <target state="translated">既定値<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー) が、項目の取得に使用される、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph>メソッドを使用して、前に追加の重複する項目の最初のインスタンスを削除して、内容が再度表示されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method always removes the first instance it encounters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph>メソッドは常に検出した最初のインスタンスを削除します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method is used to reduce the capacity to match the count, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>メソッドを使用して、数と一致する容量を減らすと、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>プロパティが表示されます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</source>
          <target state="translated">未使用の容量が合計容量の 10% 未満である場合、リストがされているサイズ変更されません。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method is used to remove all items from the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph>メソッドを使用してリストから、すべての項目を削除して、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>プロパティが表示されます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">パブリック静的 (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> Visual Basic で) この型のメンバーは、スレッド セーフであります。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>It is safe to perform multiple read operations on a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, but issues can occur if the collection is modified while it’s being read.</source>
          <target state="translated">複数の読み取り操作を実行する安全では、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>問題は、読み取られるときに、コレクションが変更された場合に発生することができますが、します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>To ensure thread safety, lock the collection during a read or write operation.</source>
          <target state="translated">スレッド セーフを確保するには、読み取り中にコレクションをロックまたは書き込み操作をします。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>To enable a collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">読み取りと書き込みの複数のスレッドがアクセスするコレクションを有効にするには、独自に同期を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For collections with built-in synchronization, see the classes in the <ph id="ph1">&lt;see cref="N:System.Collections.Concurrent" /&gt;</ph> namespace.</source>
          <target state="translated">コレクションで組み込みの同期は、クラスを参照してください、<ph id="ph1">&lt;see cref="N:System.Collections.Concurrent" /&gt;</ph>名前空間。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For an inherently thread–safe alternative, see the <ph id="ph1">&lt;see cref="T:System.Collections.Immutable.ImmutableList`1" /&gt;</ph> class.</source>
          <target state="translated">本質的にスレッド セーフな代わりに、次を参照してください。、<ph id="ph1">&lt;see cref="T:System.Collections.Immutable.ImmutableList`1" /&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">空で、既定の初期量を備えた、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can hold.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>は要素の数を<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を保持できます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>If the size of the collection can be estimated, using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">使用して、コレクションのサイズを推定することができる場合、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph>コンス トラクターと、初期量を指定する数の要素を追加するときにサイズ変更操作を実行する必要がある、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The capacity can be decreased by calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">呼び出すことによって、容量を削減することができます、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>メソッドかを設定して、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティに明示的にします。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The following example demonstrates the default constructor of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">次の例での既定のコンス トラクター、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>ジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The default constructor creates a list with the default capacity, as demonstrated by displaying the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property.</source>
          <target state="translated">表示することによって示されているように、既定のコンス トラクターが既定の容量でリストを作成、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor">
          <source>The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.</source>
          <target state="translated">例では、追加するには、挿入、およびこれらのメソッドが使用されるように、容量がどのように変化するかを示す項目を削除します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements are copied to the new list.</source>
          <target state="translated">新しいリストに要素がコピーされたコレクション。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</source>
          <target state="translated">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> in the same order they are read by the enumerator of the collection.</source>
          <target state="translated">要素の上にコピー、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>コレクションの列挙子によって読み取られる同じ順序で。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>This constructor is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in <ph id="ph1">`collection`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>内の要素の数は、<ph id="ph1">`collection`</ph>です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%2A&gt;</ph> constructor and various methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%2A&gt;</ph>コンス トラクターとのさまざまなメソッド、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>範囲に作用するクラス。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>An array of strings is created and passed to the constructor, populating the list with the elements of the array.</source>
          <target state="translated">文字列の配列が作成され、配列の要素を含む一覧を設定するコンス トラクターに渡されます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティに表示されますの初期量であることが、入力要素を保持するために必要な事項を表示します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The number of elements that the new list can initially store.</source>
          <target state="translated">新しいリストに格納できる要素の数。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> class that is empty and has the specified initial capacity.</source>
          <target state="translated">空で、指定した初期量を備えた、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can hold.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>は要素の数を<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を保持できます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The capacity can be decreased by calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly.</source>
          <target state="translated">呼び出すことによって、容量を削減することができます、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>メソッドかを設定して、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティに明示的にします。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>This constructor is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`capacity`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">`capacity`</ph>します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>容量が 4 の文字列の作成、正確に 4 になるリストの最終的なサイズがわかっているためです。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source>The list is populated with four strings, and a read-only copy is created by using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> method.</source>
          <target state="translated">4 つの文字列のリストが表示され、使用して、読み取り専用コピーを作成、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The object to be added to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の末尾に追加するオブジェクト。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>Adds an object to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の末尾にオブジェクトを追加します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> already equals <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>既に同じ<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>、容量、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is less than <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(1) operation.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>はより小さい<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>、このメソッドは、o (1) 操作になります。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>If the capacity needs to be increased to accommodate the new element, this method becomes an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">容量は、新しい要素を格納するためにする必要があります、このメソッドが O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作、場所<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The following example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method.</source>
          <target state="translated">次の例は、いくつかのプロパティとメソッドを示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>ジェネリック クラスなど、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The default constructor is used to create a list of strings with a capacity of 0.</source>
          <target state="translated">既定のコンス トラクターを使用して、容量が 0 の文字列のリストを作成できます。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method is used to add several items.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティを表示し、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph>メソッドを使用していくつかの項目に追加します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>The items are listed, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again, along with the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property, to show that the capacity has been increased as needed.</source>
          <target state="translated">項目が表示されている場合、および<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティが表示されますと組み合わせて再度、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>プロパティは、必要に応じて容量が増加したことを表示します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Add(`0)">
          <source>Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.</source>
          <target state="translated">検索、挿入、および、リストから要素を削除するその他のプロパティとメソッドを使用し、最後に一覧を消去します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements should be added to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の末尾に要素が追加されるコレクション。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection itself cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, but it can contain elements that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> is a reference type.</source>
          <target state="translated">コレクション自体を <ph id="ph1">&lt;see langword="null" /&gt;</ph> にすることはできませんが、型 <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> が参照型の場合、コレクションに格納する要素は <ph id="ph2">&lt;see langword="null" /&gt;</ph> であってもかまいません。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>Adds the elements of the specified collection to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">指定したコレクションの要素を <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の末尾に追加します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The order of the elements in the collection is preserved in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">コレクション内の要素の順序が内でも維持される、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>If the new <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (the current <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</source>
          <target state="translated">場合、新しい<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>(現在<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>さらに、コレクションのサイズ) はより大きくなる<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>の容量、<ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>新しい要素では、それに合わせて内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can accommodate the new elements without increasing the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements to be added.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を増やすことがなく、新しい要素に対応できる、 <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作、場所<bpt id="p2">*</bpt>n<ept id="p2">*</ept>を追加する要素の数です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> + </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is the number of elements to be added and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> is <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">容量は、新しい要素を格納するためにする必要があります、このメソッドが O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> + </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) 操作では、ここで<bpt id="p3">*</bpt>n<ept id="p3">*</ept>要素の数です追加して<bpt id="p4">*</bpt>m<ept id="p4">*</ept>は<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> method and various other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph>メソッドと他の方法でさまざまな、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>範囲に作用するクラス。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>An array of strings is created and passed to the constructor, populating the list with the elements of the array.</source>
          <target state="translated">文字列の配列が作成され、配列の要素を含む一覧を設定するコンス トラクターに渡されます。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph> method is called, with the list as its argument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AddRange%2A&gt;</ph>メソッドは、その引数としてリストを使用します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source>The result is that the current elements of the list are added to the end of the list, duplicating all the elements.</source>
          <target state="translated">リストの現在の要素がすべての要素を複製するリストの末尾に追加されたことになります。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>Returns a read-only <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> wrapper for the current collection.</source>
          <target state="translated">現在のコレクションの読み取り専用の <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> ラッパーを返します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>An object that acts as a read-only wrapper around the current <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> をラップする読み取り専用のラッパーとして動作するオブジェクト。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>To prevent any modifications to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object, expose it only through this wrapper.</source>
          <target state="translated">変更を加えるを防ぐために、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>オブジェクト、このラッパーによってのみ公開されます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>A  <ph id="ph1">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> object does not expose methods that modify the collection.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph>オブジェクトがコレクションを変更するメソッドを公開していません。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>However, if changes are made to the underlying <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object, the read-only collection reflects those changes.</source>
          <target state="translated">ただし、基になる変更が加えられた場合<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>オブジェクト、読み取り専用コレクションには、これらの変更が反映されます。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> method.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>容量が 4 の文字列の作成、正確に 4 になるリストの最終的なサイズがわかっているためです。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>The list is populated with four strings, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph> method is used to get a read-only <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface implementation that wraps the original list.</source>
          <target state="translated">4 つの文字列のリストが表示されます、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph>メソッドを使用して、読み取り専用の取得<ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>元のリストをラップするジェネリック インターフェイスの実装です。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.AsReadOnly">
          <source>An element of the original list is set to "Coelophysis" using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.</source>
          <target state="translated">元のリストの要素に設定されている「コエロフィシス」を使用して、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph>を元のリスト用のラッパーだけであることを示すためにプロパティ (c# のインデクサー) および読み取り専用のリストの内容が再度に表示されます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Uses a binary search algorithm to locate a specific element in the sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated">バイナリ サーチ アルゴリズムを使用して、並べ替えられた <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の特定の要素またはその一部を検索します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The object to locate.</source>
          <target state="translated">検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>Searches the entire sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> for an element using the default comparer and returns the zero-based index of the element.</source>
          <target state="translated">既定の比較子を使用して、並べ替えられた要素の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体を検索し、その要素の 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="item" /&gt;</ph> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="item" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;paramref name="item" /&gt;</ph> が見つかった場合は、並べ替えられた <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の <ph id="ph1">&lt;paramref name="item" /&gt;</ph> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<ph id="ph4">&lt;paramref name="item" /&gt;</ph> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> のビットごとの補数です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>This method uses the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for type <ph id="ph2">`T`</ph> to determine the order of list elements.</source>
          <target state="translated">このメソッドは、既定の比較子を使用して<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>型<ph id="ph2">`T`</ph>リストの要素の順序を決定します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> property checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>プロパティのチェックを入力するかどうか<ph id="ph2">`T`</ph>を実装する、<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイスと使用可能な場合は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">ない場合は、<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph2">`T`</ph>を実装する、<ph id="ph3">&lt;xref:System.IComparable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>はいずれのインターフェイスを実装しません<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>スロー、<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> ; 比較子実装に従って並べ替えられている必要があります既にそれ以外の場合、結果が正しくないです。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>Comparing <ph id="ph1">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface.</source>
          <target state="translated">比較する<ph id="ph1">`null`</ph>任意の参照を持つ型が許可されを使用する場合は、例外を生成しません、<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイス。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">ソート時<ph id="ph1">`null`</ph>未満であるその他のオブジェクトと見なされます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>だけが含まれて、同じ値を持つ複数の要素には返します、出現回数、必ずしも 1 つ目のいずれかを返す、出現してのいずれかの可能性があります。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">場合、 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 、指定した値を含まない、メソッドは、負の整数を返します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">値を挿入するときに、 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>This method is an O(log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in the range.</source>
          <target state="translated">このメソッドは、O (ログ<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>範囲内の要素の数です。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph>メソッドのオーバー ロードおよび<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph>メソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The list is displayed, sorted, and displayed again.</source>
          <target state="translated">一覧が表示され、並べ替えが、もう一度表示されます。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload is then used to search for two strings that are not in the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert them.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph>メソッドのオーバー ロードが、一覧に含まれていない 2 つの文字列の検索に使用し、および<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph>に挿入するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The return value of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method is negative in each case, because the strings are not in the list.</source>
          <target state="translated">戻り値、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph>文字列が、一覧にはないために、メソッドは、各ケースで負の値。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>Taking the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</source>
          <target state="translated">ビットごとの補数を行う (、~ 演算子で c# および Visual C、 <ph id="ph1">`Xor`</ph> Visual Basic では-1) はこの場所では、検索文字列より大きいと、挿入リストの最初の要素のインデックスのこの負の数値の生成には、並べ替えが保持されます順序です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The second search string is larger than any element in the list, so the insertion position is at the end of the list.</source>
          <target state="translated">2 番目の検索文字列は、カーソル位置がリストの末尾であるため、一覧の任意の要素を超えています。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0)">
          <source>The default comparer <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph4">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">既定の比較子 <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> は、<ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ジェネリック インターフェイスの実装、または型 <ph id="ph4">&lt;paramref name="T" /&gt;</ph> の <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> インターフェイスの実装を見つけることができません。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The object to locate.</source>
          <target state="translated">検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements.</source>
          <target state="translated">要素を比較する場合に使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> の実装。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph2">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">既定の比較子 <ph id="ph2">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> を使用する場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Searches the entire sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.</source>
          <target state="translated">指定した比較子を使用して、並べ替えられた要素の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体を検索し、その要素の 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="item" /&gt;</ph> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="item" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;paramref name="item" /&gt;</ph> が見つかった場合は、並べ替えられた <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の <ph id="ph1">&lt;paramref name="item" /&gt;</ph> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<ph id="ph4">&lt;paramref name="item" /&gt;</ph> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> のビットごとの補数です。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer customizes how the elements are compared.</source>
          <target state="translated">比較演算子は、要素を比較する方法をカスタマイズします。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>For example, you can use a <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.</source>
          <target state="translated">たとえば、使用することができます、<ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph>大文字と小文字の文字列の検索を実行する比較演算子とインスタンス。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are compared to the specified value using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>が提供されるの要素、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>指定して、指定した値と比較<ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>は<ph id="ph2">`null`</ph>、既定の比較子<ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph4">`T`</ph>を実装、<ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイスし、使用可能な場合は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">ない場合は、<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph2">`T`</ph>を実装する、<ph id="ph3">&lt;xref:System.IComparable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>はいずれのインターフェイスを実装しません<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>スロー<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> ; 比較子実装に従って並べ替えられている必要があります既にそれ以外の場合、結果が正しくないです。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Comparing <ph id="ph1">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface.</source>
          <target state="translated">比較する<ph id="ph1">`null`</ph>任意の参照を持つ型が許可されを使用する場合は、例外を生成しません、<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイス。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">ソート時<ph id="ph1">`null`</ph>未満であるその他のオブジェクトと見なされます。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>だけが含まれて、同じ値を持つ複数の要素には返します、出現回数、必ずしも 1 つ目のいずれかを返す、出現してのいずれかの可能性があります。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">場合、 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 、指定した値を含まない、メソッドは、負の整数を返します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">値を挿入するときに、 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>This method is an O(log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in the range.</source>
          <target state="translated">このメソッドは、O (ログ<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>範囲内の要素の数です。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードおよび<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">実装する DinoCompare を名前付き文字列の代替の比較演算子が定義されています、 <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> Visual basic で<ph id="ph3">`IComparer&lt;String^&gt;`</ph>Visual C で) ジェネリック インターフェイス。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">比較子が次のように動作: 比較対照値があるテスト最初に、 <ph id="ph1">`null`</ph>、null 参照が null でないより小さいとして扱われます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, sorted using the alternate comparer, and displayed again.</source>
          <target state="translated">一覧が表示されます、代替の比較子を使用して並べ替えられ、表示されているもう一度です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードがいくつかの文字列は、一覧で、使用しない、代替の比較子を検索に使用されるからです。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert the strings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph>メソッドを使用して、文字列を挿入します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source>These two methods are located in the function named <ph id="ph1">`SearchAndInsert`</ph>, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph2">`Xor`</ph> -1 in Visual Basic) of the negative number returned by <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> and use it as an index for inserting the new string.</source>
          <target state="translated">これら 2 つの方法がという名前の関数内にある<ph id="ph1">`SearchAndInsert`</ph>、ビットごとの補数をコードと共に (、~ c# および Visual C で演算子<ph id="ph2">`Xor`</ph>Visual Basic では-1) によって返される負の数値の<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>のインデックスとして使用し、新しい文字列を挿入しています。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。また、既定の比較子 <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> は、<ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ジェネリック インターフェイスの実装、または型 <ph id="ph6">&lt;paramref name="T" /&gt;</ph> の <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> インターフェイスの実装を見つけることができません。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based starting index of the range to search.</source>
          <target state="translated">検索範囲の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The length of the range to search.</source>
          <target state="translated">検索する範囲の長さ。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The object to locate.</source>
          <target state="translated">検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">要素を比較する場合に使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> 実装。または、既定の比較子 <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> を使用する場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Searches a range of elements in the sorted <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> for an element using the specified comparer and returns the zero-based index of the element.</source>
          <target state="translated">指定した比較子を使用して、並べ替えられた要素の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の 1 つの要素の範囲を検索し、その要素の 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> in the sorted <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if <ph id="ph3">&lt;paramref name="item" /&gt;</ph> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <ph id="ph4">&lt;paramref name="item" /&gt;</ph> or, if there is no larger element, the bitwise complement of <ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;paramref name="item" /&gt;</ph> が見つかった場合は、並べ替えられた <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の <ph id="ph1">&lt;paramref name="item" /&gt;</ph> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<ph id="ph4">&lt;paramref name="item" /&gt;</ph> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<ph id="ph5">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> のビットごとの補数です。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer customizes how the elements are compared.</source>
          <target state="translated">比較演算子は、要素を比較する方法をカスタマイズします。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>For example, you can use a <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> instance as the comparer to perform case-insensitive string searches.</source>
          <target state="translated">たとえば、使用することができます、<ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph>大文字と小文字の文字列の検索を実行する比較演算子とインスタンス。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are compared to the specified value using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>が提供されるの要素、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>指定して、指定した値と比較<ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>は<ph id="ph2">`null`</ph>、既定の比較子<ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph4">`T`</ph>を実装、<ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイスし、使用可能な場合は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">ない場合は、<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph2">`T`</ph>を実装する、<ph id="ph3">&lt;xref:System.IComparable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>はいずれのインターフェイスを実装しません<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>スロー<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> ; 比較子実装に従って並べ替えられている必要があります既にそれ以外の場合、結果が正しくないです。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Comparing <ph id="ph1">`null`</ph> with any reference type is allowed and does not generate an exception when using the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> generic interface.</source>
          <target state="translated">比較する<ph id="ph1">`null`</ph>任意の参照を持つ型が許可されを使用する場合は、例外を生成しません、<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイス。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>When sorting, <ph id="ph1">`null`</ph> is considered to be less than any other object.</source>
          <target state="translated">ソート時<ph id="ph1">`null`</ph>未満であるその他のオブジェクトと見なされます。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>だけが含まれて、同じ値を持つ複数の要素には返します、出現回数、必ずしも 1 つ目のいずれかを返す、出現してのいずれかの可能性があります。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> does not contain the specified value, the method returns a negative integer.</source>
          <target state="translated">場合、 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 、指定した値を含まない、メソッドは、負の整数を返します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</source>
          <target state="translated">この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>When inserting the value into the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, this index should be used as the insertion point to maintain the sort order.</source>
          <target state="translated">値を挿入するときに、 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>This method is an O(log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements in the range.</source>
          <target state="translated">このメソッドは、O (ログ<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>範囲内の要素の数です。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードおよび<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">実装する DinoCompare を名前付き文字列の代替の比較演算子が定義されています、 <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> Visual basic で<ph id="ph3">`IComparer&lt;String^&gt;`</ph>Visual C で) ジェネリック インターフェイス。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">比較子が次のように動作: 比較対照値があるテスト最初に、 <ph id="ph1">`null`</ph>、null 参照が null でないより小さいとして扱われます。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列が作成され、5 つ herbivorous 恐竜やから恐竜の 3 つの名前に設定されます。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>Within each of the two groups, the names are not in any particular sort order.</source>
          <target state="translated">2 つのグループの各名前はない任意の特定の並べ替え順序でできます。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</source>
          <target state="translated">一覧が表示されます、恐竜の範囲は、代替の比較子を使用して並べ替えられておよびが再度表示されます。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search only the range of herbivores for "Brachiosaurus".</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> "Brachiosaurus"恐竜の範囲のみを検索するメソッドのオーバー ロードが使用されるからです。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of the negative number returned by the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method is used as an index for inserting the new string.</source>
          <target state="translated">文字列が見つからないとビットごとの補数 (、~ c# および Visual C で演算子<ph id="ph1">`Xor`</ph>Visual Basic では-1) によって返される負の数の<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドは、新しい文字列を挿入するためのインデックスとして使用します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の有効な範囲を示していません。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。また、既定の比較子 <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> は、<ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ジェネリック インターフェイスの実装、または型 <ph id="ph6">&lt;paramref name="T" /&gt;</ph> の <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> インターフェイスの実装を見つけることができません。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>Gets or sets the total number of elements the internal data structure can hold without resizing.</source>
          <target state="translated">内部データ構造体がサイズ変更せずに格納できる要素の合計数を取得または設定します。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> can contain before resizing is required.</source>
          <target state="translated">サイズ変更が必要となるまでに <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> に格納できる要素の数。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can store before resizing is required, whereas <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> 要素の数を<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>一方、サイズ変更が必要ですが、前に格納できる<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>が実際には、要素の数、<ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> 常により大きいまたは等しい<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>を超える<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>前の要素をコピーし、新しい要素を追加する前に、内部の配列を自動的に再割り当てして要素を追加するには、中に容量が増加します。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>If the capacity is significantly larger than the count and you want to reduce the memory used by the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>,  you can  decrease capacity by calling the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or by setting the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property explicitly to a lower value.</source>
          <target state="translated">容量は数よりもずっと大きなとによって使用されるメモリを縮小したい場合、 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>、呼び出すことによって、容量を減らすことができます、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>メソッドかを設定して、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>未満の値を明示的にプロパティです。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>When the value of <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.</source>
          <target state="translated">ときに、値の<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>が設定されている、明示的に指定した容量、それに合わせて内部の配列が再割り当てもとすべての要素がコピーされます。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the new capacity.</source>
          <target state="translated">このプロパティの値を取得する場合は、o (1) 操作です。O は、プロパティの設定 (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作、場所<bpt id="p2">*</bpt>n<ept id="p2">*</ept>新しい容量します。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The following example demonstrates how to check the capacity and count of a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object, and illustrates using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method to remove extra capacity.</source>
          <target state="translated">次の例では、容量およびの数を確認する方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を単純なビジネス オブジェクトを含むし、使用方法を示します、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>余分な容量を削除する方法です。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property at several points in the life of a list.</source>
          <target state="translated">次の例は、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティ リストのいくつかの時点です。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The default constructor is used to create a list of strings with a capacity of 0, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed to demonstrate this.</source>
          <target state="translated">既定のコンス トラクターは、容量が 0 の文字列のリストを作成するために使用され、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>これを実行するプロパティが表示されます。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>After the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method has been used to add several items, the items are listed, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again, along with the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property, to show that the capacity has been increased as needed.</source>
          <target state="translated">後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph>をいくつかの項目を追加するメソッドを使用した、項目が一覧表示、し、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティが表示されますと組み合わせて再度、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>プロパティで、必要に応じて容量が増加したことを示します。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property is displayed again after the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method is used to reduce the capacity to match the count.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>後にもう一度表示されるプロパティ、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>の数と一致する容量を削減するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method is used to remove all items from the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed again.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph>メソッドを使用してリストから、すべての項目を削除して、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>プロパティが再度表示されます。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Capacity">
          <source><ph id="ph1">&lt;see cref="P:System.Collections.Generic.List`1.Capacity" /&gt;</ph> is set to a value that is less than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Collections.Generic.List`1.Capacity" /&gt;</ph> は <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> より小さい値に設定されます。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Capacity">
          <source>There is not enough memory available on the system.</source>
          <target state="translated">システムで使用可能なメモリが不足しています。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Clear">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> からすべての要素を削除します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is set to 0, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> 0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> remains unchanged.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> 変更されません。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method or set the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property directly.</source>
          <target state="translated">容量をリセットする、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を呼び出し、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>メソッドまたはセット、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティを直接です。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>Decreasing the capacity reallocates memory and copies all the elements in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to the default capacity.</source>
          <target state="translated">空のトリミング<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>のキャパシティを設定、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を既定の容量。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method and various other properties and methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph>メソッドさまざまな他のプロパティおよびメソッドの<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>ジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method is used at the end of the program, to remove all items from the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are then displayed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph>メソッドに使用して、プログラムの終了をリストから、すべての項目を削除して、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>プロパティが表示されます。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">ある要素が <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内に存在するかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が <ph id="ph2">&lt;paramref name="item" /&gt;</ph> に存在する場合は <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>This method determines equality by using the default equality comparer, as defined by the object's implementation of the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> method for <ph id="ph2">`T`</ph> (the type of values in the list).</source>
          <target state="translated">このメソッドは、のオブジェクトの実装で定義されている既定の等値比較子を使用して、等しいかどうかを決定、<ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph>メソッド<ph id="ph2">`T`</ph>(リスト内の値の型)。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> methods on a <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object that implements <ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph>のメソッド、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を実装する単純なビジネス オブジェクトを格納している<ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The following example contains a list of complex objects of type <ph id="ph1">`Cube`</ph>.</source>
          <target state="translated">次の例は、型の複合オブジェクトの一覧を含む<ph id="ph1">`Cube`</ph>です。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>The <ph id="ph1">`Cube`</ph> class implements the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> method so that two cubes are considered equal if their dimensions are the same.</source>
          <target state="translated"><ph id="ph1">`Cube`</ph>クラスが実装する、<ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph>メソッド 2 つのキューブ、ディメンションが同じ場合、等しいと見なされるようにします。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Contains(`0)">
          <source>In this example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>, because a cube that has the specified dimensions is already in the collection.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>メソッドを返します。<ph id="ph2">`true`</ph>でキューブが指定した寸法がコレクション内に既にあるためです。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The type of the elements of the target array.</source>
          <target state="translated">変換後の配列要素の型。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Converter`2" /&gt;</ph> delegate that converts each element from one type to another type.</source>
          <target state="translated">各要素の型を変換するための <ph id="ph1">&lt;see cref="T:System.Converter`2" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>Converts the elements in the current <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to another type, and returns a list containing the converted elements.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の要素を別の型に変換し、変換された要素が格納されたリストを返します。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> of the target type containing the converted elements from the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の要素の型を変換した後の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Converter%602&gt;</ph> is a delegate to a method that converts an object to the target type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Converter%602&gt;</ph>オブジェクトを対象の型に変換するメソッドにデリゲートします。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Converter%602&gt;</ph> delegate, and the converted elements are saved in the new <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Converter%602&gt;</ph>デリゲート、および変換された要素は、新しい保存<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> remains unchanged.</source>
          <target state="translated">現在<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>は変更されません。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The following example defines a method named <ph id="ph1">`PointFToPoint`</ph> that converts a <ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph> structure to a <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> structure.</source>
          <target state="translated">次の例は、という名前のメソッドを定義<ph id="ph1">`PointFToPoint`</ph>変換する、<ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph>に構造体、<ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph>構造体。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The example then creates a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph> structures, creates a <ph id="ph3">`Converter\&lt;PointF, Point&gt;`</ph> delegate (<ph id="ph4">`Converter(Of PointF, Point)`</ph> in Visual Basic) to represent the <ph id="ph5">`PointFToPoint`</ph> method, and passes the delegate to the <ph id="ph6">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph> method.</source>
          <target state="translated">作成し、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の<ph id="ph2">&lt;xref:System.Drawing.PointF&gt;</ph>構造と、作成、<ph id="ph3">`Converter\&lt;PointF, Point&gt;`</ph>委任 (<ph id="ph4">`Converter(Of PointF, Point)`</ph> Visual Basic で) を表す、<ph id="ph5">`PointFToPoint`</ph>メソッドにデリゲートを渡します、<ph id="ph6">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph> method passes each element of the input list to the <ph id="ph2">`PointFToPoint`</ph> method and puts the converted elements into a new list of <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ConvertAll%2A&gt;</ph>メソッドは成功する入力の一覧の各要素、<ph id="ph2">`PointFToPoint`</ph>メソッドの新しいリストに変換された要素を格納および<ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph>構造体。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source>Both lists are displayed.</source>
          <target state="translated">両方の一覧が表示されます。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
          <source><ph id="ph1">&lt;paramref name="converter" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="converter" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it to an array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> またはその一部を配列にコピーします。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> から要素がコピーされる 1 次元の <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> には、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a compatible one-dimensional array, starting at the beginning of the target array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体を互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">このメソッドを使用して<ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>要素のコピー。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">要素のコピー先は、<ph id="ph1">&lt;xref:System.Array&gt;</ph>を列挙子が反復処理する順序と同じ順序で、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、3 つすべてのオーバー ロード、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with 5 strings.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列が作成され、5 つの文字列に設定されます。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>An empty string array of 15 elements is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</source>
          <target state="translated">15 の要素の空の文字列の配列を作成すると、および<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph>メソッドのオーバー ロードは、一覧のすべての要素を配列の最初の要素を開始位置として、配列にコピーするために使用します。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph>のすべての要素の配列インデックス 6 で開始位置として、配列にリスト (したままインデックス 5 空) をコピーするメソッドのオーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>インデックス 2 で始まるリストから 3 つの要素をコピーするには、配列の配列にするインデックスを 12 (したままインデックス 11 空の) メソッドのオーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The contents of the array are then displayed.</source>
          <target state="translated">配列の内容が表示されます。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[])">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> is greater than the number of elements that the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph> can contain.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の要素数が、コピー先 <ph id="ph2">&lt;paramref name="array" /&gt;</ph> に含めることができる要素数を超えています。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> から要素がコピーされる 1 次元の <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> には、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a compatible one-dimensional array, starting at the specified index of the target array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体を、互換性のある 1 次元配列の、指定したインデックスから始まる位置にコピーします。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">このメソッドを使用して<ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>要素のコピー。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">要素のコピー先は、<ph id="ph1">&lt;xref:System.Array&gt;</ph>を列挙子が反復処理する順序と同じ順序で、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、3 つすべてのオーバー ロード、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with 5 strings.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列が作成され、5 つの文字列に設定されます。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>An empty string array of 15 elements is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</source>
          <target state="translated">15 の要素の空の文字列の配列を作成すると、および<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph>メソッドのオーバー ロードは、一覧のすべての要素を配列の最初の要素を開始位置として、配列にコピーするために使用します。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph>のすべての要素の配列インデックス 6 で開始位置として、配列にリスト (したままインデックス 5 空) をコピーするメソッドのオーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>インデックス 2 で始まるリストから 3 つの要素をコピーするには、配列の配列にするインデックスを 12 (したままインデックス 11 空の) メソッドのオーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The contents of the array are then displayed.</source>
          <target state="translated">配列の内容が表示されます。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の要素数が、コピー先 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> から最後までの使用可能領域を超えています。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The zero-based index in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> at which copying begins.</source>
          <target state="translated">コピーを開始するコピー元の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の、0 から始まるインデックス番号。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の要素のコピー先となる 1 次元の <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> には、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The number of elements to copy.</source>
          <target state="translated">コピーする要素の数。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>Copies a range of elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a compatible one-dimensional array, starting at the specified index of the target array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうちある範囲の要素を、互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">このメソッドを使用して<ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>要素のコピー。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">要素のコピー先は、<ph id="ph1">&lt;xref:System.Array&gt;</ph>を列挙子が反復処理する順序と同じ順序で、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">`count`</ph>します。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、3 つすべてのオーバー ロード、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with 5 strings.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列が作成され、5 つの文字列に設定されます。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>An empty string array of 15 elements is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</source>
          <target state="translated">15 の要素の空の文字列の配列を作成すると、および<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29&gt;</ph>メソッドのオーバー ロードは、一覧のすべての要素を配列の最初の要素を開始位置として、配列にコピーするために使用します。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29&gt;</ph>のすべての要素の配列インデックス 6 で開始位置として、配列にリスト (したままインデックス 5 空) をコピーするメソッドのオーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>インデックス 2 で始まるリストから 3 つの要素をコピーするには、配列の配列にするインデックスを 12 (したままインデックス 11 空の) メソッドのオーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The contents of the array are then displayed.</source>
          <target state="translated">配列の内容が表示されます。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than the <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> of the source <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> がコピー元の <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">-または-</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
          <source>The number of elements from <ph id="ph1">&lt;paramref name="index" /&gt;</ph> to the end of the source <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> is greater than the available space from <ph id="ph3">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph4">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の <ph id="ph1">&lt;paramref name="index" /&gt;</ph> から最後までの要素数が、コピー先の <ph id="ph4">&lt;paramref name="array" /&gt;</ph> の <ph id="ph3">&lt;paramref name="arrayIndex" /&gt;</ph> から最後までの使用可能な領域を超えています。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> に格納されている要素の数を取得します。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> に格納されている要素の数。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can store before resizing is required.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> 要素の数を<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>のサイズを変更することが必要に格納できます。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> 実際には、要素の数、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> is always greater than or equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> 常により大きいまたは等しい<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> exceeds <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>を超える<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>前の要素をコピーし、新しい要素を追加する前に、内部の配列を自動的に再割り当てして要素を追加するには、中に容量が増加します。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>The following example demonstrates how to check the capacity and count of a  <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object, and illustrates using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method to remove extra capacity.</source>
          <target state="translated">次の例では、容量およびの数を確認する方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を単純なビジネス オブジェクトを含むし、使用方法を示します、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>余分な容量を削除する方法です。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>The following example shows the value of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property at various points in the life of a list.</source>
          <target state="translated">次の例の値を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>リストの有効期間内のさまざまな時点でのプロパティです。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>After the list has been created and populated and its elements displayed, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">その要素は次の表示、および一覧が作成され、設定した後、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>プロパティが表示されます。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Count">
          <source>These properties are displayed again after the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method has been called, and again after the contents of the list are cleared.</source>
          <target state="translated">後にもう一度これらのプロパティが表示されます、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>されている方式と呼ばれる、および一覧の内容の後にもう一度がクリアされます。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the elements to search for.</source>
          <target state="translated">検索する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contains elements that match the conditions defined by the specified predicate.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> に、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> に含まれる場合は、<ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and processing is stopped when a match is found.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>一致が見つかったときに、デリゲートと処理が停止します。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> methods on a <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object that implements <ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Contains%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph>のメソッド、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を実装する単純なビジネス オブジェクトを格納している<ph id="ph4">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method and several other methods that use the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> generic delegate.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph>メソッドを使用して、他のいくつかの方法、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>汎用デリゲート。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>文字列の作成、"saurus"で終わる (位置 1 から 5 など) のうちの 2 台の 8 恐竜の名前を含むです。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The example also defines a search predicate method named <ph id="ph1">`EndsWithSaurus`</ph>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</source>
          <target state="translated">という名前の検索述語メソッドも定義<ph id="ph1">`EndsWithSaurus`</ph>、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値です。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph> methods are used to search the list with the search predicate method, and then the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> method is used to remove all entries ending with "saurus".</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph>メソッドを使用して、検索述語メソッドを使用して、一覧を検索し、 <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> "saurus"で終わるすべてのエントリを削除するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method is called.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>It traverses the list from the beginning, passing each element in turn to the <ph id="ph1">`EndsWithSaurus`</ph> method.</source>
          <target state="translated">各要素を順番に渡して、先頭から、リストの走査、<ph id="ph1">`EndsWithSaurus`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The search stops and the method returns <ph id="ph1">`true`</ph> if the <ph id="ph2">`EndsWithSaurus`</ph> method returns <ph id="ph3">`true`</ph> for any element.</source>
          <target state="translated">検索は停止し、メソッドを返します<ph id="ph1">`true`</ph>場合、<ph id="ph2">`EndsWithSaurus`</ph>メソッドを返します。 <ph id="ph3">`true`</ph> 、任意の要素。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method returns <ph id="ph2">`false`</ph> because all such elements have been removed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph>メソッドを返します。<ph id="ph2">`false`</ph>などすべての要素が削除されているためです。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>In C# and Visual Basic, it is not necessary to create the <ph id="ph1">`Predicate&lt;string&gt;`</ph> delegate (<ph id="ph2">`Predicate(Of String)`</ph> in Visual Basic) explicitly.</source>
          <target state="translated">C# および Visual Basic の場合は、その必要はありませんを作成する、<ph id="ph1">`Predicate&lt;string&gt;`</ph>委任 (<ph id="ph2">`Predicate(Of String)`</ph> Visual Basic の) 明示的にします。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source>These languages infer the correct delegate from context and create it automatically.</source>
          <target state="translated">これらの言語では、コンテキストから適切なデリゲートを推論し、自動的に作成します。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">検索する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">指定された述語によって定義された条件と一致する要素を検索し、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体の中で最もインデックス番号の小さい要素を返します。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> の既定値。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, moving forward in the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, starting with the first element and ending with the last element.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>前進デリゲート、 <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>、最初の要素で開始および終了の最後の要素。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Processing is stopped when a match is found.</source>
          <target state="translated">一致が見つかった場合は、処理が停止しました。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</source>
          <target state="translated">値の型を含むリストを検索するときに、型の既定値は、検索述語を満たさないことを確認します。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</source>
          <target state="translated">それ以外の場合、一致が見つからなかったことを示す既定値と型の既定値が含まれているリスト要素を識別する方法はありません。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>If the default value satisfies the search predicate, use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method instead.</source>
          <target state="translated">既定値は、検索述語を満たす場合を使用して、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph>メソッド代わりにします。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph> method on a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple complex object.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>メソッドを<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>単純な複雑なオブジェクトを格納しています。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">次の例での検索方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">例を<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスに含まれる<ph id="ph2">`book`</ph>クラスのオブジェクト<ph id="ph3">`Book`</ph>、データを使用して、<bpt id="p1">[</bpt>サンプル XML ファイル: 書籍 (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>です。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated"><ph id="ph1">`FillList`</ph>メソッドの例では使用<bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept>のプロパティ値を XML から値を解析する、<ph id="ph2">`book`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">次の表では、検索方法を説明する例について説明します。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">メソッド</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">使用して、ID でブックを検索、<ph id="ph1">`IDToFind`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">C# の例では、匿名デリゲートを使用します。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">すべての書籍を持つ検索<ph id="ph1">`Genre`</ph>プロパティは、「コンピューター」を使用して、<ph id="ph2">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">2001 年を使用する前に、発行日を持つコレクション内の最後の書籍を検索、<ph id="ph1">`PubBefore2001`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">C# の例では、匿名デリゲートを使用します。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">コンピューター書籍を使用して最初のインデックスを検索、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">使用してコンピューター書籍の最後のインデックスを検索、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">コレクションの半分の 1 秒間の最初のコンピューター書籍のインデックスを検索を使用して、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the elements to search for.</source>
          <target state="translated">検索する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Retrieves all the elements that match the conditions defined by the specified predicate.</source>
          <target state="translated">指定された述語によって定義された条件と一致するすべての要素を取得します。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>。それ以外の場合は、空の <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and the elements that match the conditions are saved in the returned <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>デリゲート、および条件に一致する要素が保存、返された<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">次の例での検索方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">例を<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスに含まれる<ph id="ph2">`book`</ph>クラスのオブジェクト<ph id="ph3">`Book`</ph>、データを使用して、<bpt id="p1">[</bpt>サンプル XML ファイル: 書籍 (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>です。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated"><ph id="ph1">`FillList`</ph>メソッドの例では使用<bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept>のプロパティ値を XML から値を解析する、<ph id="ph2">`book`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">次の表では、検索方法を説明する例について説明します。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">メソッド</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">使用して、ID でブックを検索、<ph id="ph1">`IDToFind`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">C# の例では、匿名デリゲートを使用します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">すべての書籍を持つ検索<ph id="ph1">`Genre`</ph>プロパティは、「コンピューター」を使用して、<ph id="ph2">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">2001 年を使用する前に、発行日を持つコレクション内の最後の書籍を検索、<ph id="ph1">`PubBefore2001`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">C# の例では、匿名デリゲートを使用します。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">コンピューター書籍を使用して最初のインデックスを検索、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">使用してコンピューター書籍の最後のインデックスを検索、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">コレクションの半分の 1 秒間の最初のコンピューター書籍のインデックスを検索を使用して、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> またはその一部分から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>This method returns -1 if an item that matches the conditions is not found.</source>
          <target state="translated">このメソッドは、条件に一致する項目が見つからなかった場合に -1 を返します。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">検索する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The zero-based index of the first occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at the first element and ending at the last element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>はフォワード最初の要素を起点と最後の要素で終わる検索します。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The delegate has the signature:</source>
          <target state="translated">デリゲートは、シグネチャを持ちます。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class with two fields, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Id`</ph>.</source>
          <target state="translated">次の例では定義、 <ph id="ph1">`Employee`</ph> 2 つのフィールドを持つクラス<ph id="ph2">`Name`</ph>と<ph id="ph3">`Id`</ph>です。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>It also defines an <ph id="ph1">`EmployeeSearch`</ph> class with a single method, <ph id="ph2">`StartsWith`</ph>, that indicates whether the <ph id="ph3">`Employee.Name`</ph> field starts with a specified substring that is supplied to the <ph id="ph4">`EmployeeSearch`</ph> class constructor.</source>
          <target state="translated">定義、<ph id="ph1">`EmployeeSearch`</ph>単一のメソッドとクラス<ph id="ph2">`StartsWith`</ph>を示すかどうか、<ph id="ph3">`Employee.Name`</ph>フィールドに用意されている指定した部分文字列で始まる、<ph id="ph4">`EmployeeSearch`</ph>クラスのコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>Note  the signature of this method</source>
          <target state="translated">このメソッドのシグネチャに注意してください。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>corresponds to the signature of the delegate that can be passed to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method.</source>
          <target state="translated">渡すことができるデリゲートのシグネチャに対応する、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source>The example instantiates a <ph id="ph1">`List&lt;Employee&gt;`</ph> object, adds a number of <ph id="ph2">`Employee`</ph> objets to it, and then calls the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> method twice  to search the entire collection , the first time for the first <ph id="ph4">`Employee`</ph> object whose <ph id="ph5">`Name`</ph> field begins with "J", and the second time for the first <ph id="ph6">`Employee`</ph> object whose <ph id="ph7">`Name`</ph> field begins with "Ju".</source>
          <target state="translated">インスタンス化、<ph id="ph1">`List&lt;Employee&gt;`</ph>オブジェクト、いくつかの追加<ph id="ph2">`Employee`</ph>し、その呼び出しを objets、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph>初めて、最初、コレクション全体を検索するには、2 回メソッド<ph id="ph4">`Employee`</ph>オブジェクト<ph id="ph5">`Name`</ph>フィールドの開始"J"と、最初の 2 回目<ph id="ph6">`Employee`</ph>オブジェクト<ph id="ph7">`Name`</ph>フィールドは、"Ju"で始まります。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">検索の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">検索する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the specified index to the last element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の指定したインデックスから最後の要素までの範囲内で、指定した述語にで定義される条件に一致する要素を検索し、最初に見つかった 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the first occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`startIndex`</ph> and ending at the last element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>転送を開始位置として検索<ph id="ph2">`startIndex`</ph>と最後の要素で終了します。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The delegate has the signature:</source>
          <target state="translated">デリゲートは、シグネチャを持ちます。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from <ph id="ph1">`startIndex`</ph> to the end of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>から要素の数は、<ph id="ph1">`startIndex`</ph>の末尾に、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class with two fields, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Id`</ph>.</source>
          <target state="translated">次の例では定義、 <ph id="ph1">`Employee`</ph> 2 つのフィールドを持つクラス<ph id="ph2">`Name`</ph>と<ph id="ph3">`Id`</ph>です。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>It also defines an <ph id="ph1">`EmployeeSearch`</ph> class with a single method, <ph id="ph2">`StartsWith`</ph>, that indicates whether the <ph id="ph3">`Employee.Name`</ph> field starts with a specified substring that is supplied to the <ph id="ph4">`EmployeeSearch`</ph> class constructor.</source>
          <target state="translated">定義、<ph id="ph1">`EmployeeSearch`</ph>単一のメソッドとクラス<ph id="ph2">`StartsWith`</ph>を示すかどうか、<ph id="ph3">`Employee.Name`</ph>フィールドに用意されている指定した部分文字列で始まる、<ph id="ph4">`EmployeeSearch`</ph>クラスのコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>Note  the signature of this method</source>
          <target state="translated">このメソッドのシグネチャに注意してください。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>corresponds to the signature of the delegate that can be passed to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method.</source>
          <target state="translated">渡すことができるデリゲートのシグネチャに対応する、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The example instantiates a <ph id="ph1">`List&lt;Employee&gt;`</ph> object, adds a number of <ph id="ph2">`Employee`</ph> objets to it, and then calls the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> method twice  to search the collection starting with its fifth member (that is, the member at index 4).</source>
          <target state="translated">例では、インスタンス化、<ph id="ph1">`List&lt;Employee&gt;`</ph>オブジェクト、いくつかの追加<ph id="ph2">`Employee`</ph>し、その呼び出しを objets、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph>その 5 番目のメンバー (つまり、インデックス 4 のメンバー) から始まるコレクションを検索するには、2 回のメソッドです。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source>The first time, it searches for the first <ph id="ph1">`Employee`</ph> object whose <ph id="ph2">`Name`</ph> field begins with "J"; the second time, it searches for the first <ph id="ph3">`Employee`</ph> object whose <ph id="ph4">`Name`</ph> field begins with "Ju".</source>
          <target state="translated">最初の検索、初めて<ph id="ph1">`Employee`</ph>オブジェクト<ph id="ph2">`Name`</ph>フィールドが"J"で始まる以外の場合は、最初の検索、2 回目<ph id="ph3">`Employee`</ph>オブジェクト<ph id="ph4">`Name`</ph>フィールドは、"Ju"で始まります。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> が、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の有効なインデックスの範囲外です。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">検索の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The number of elements in the section to search.</source>
          <target state="translated">検索対象の範囲内にある要素の数。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">検索する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that starts at the specified index and contains the specified number of elements.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the first occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`startIndex`</ph> and ending at <ph id="ph3">`startIndex`</ph> plus <ph id="ph4">`count`</ph> minus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>転送を開始位置として検索が<ph id="ph2">`startIndex`</ph>で終わる<ph id="ph3">`startIndex`</ph>plus<ph id="ph4">`count`</ph>から 1 を引いた場合<ph id="ph5">`count`</ph>が 0 より大きい。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The delegate has the signature:</source>
          <target state="translated">デリゲートは、シグネチャを持ちます。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">`count`</ph>します。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class with two fields, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Id`</ph>.</source>
          <target state="translated">次の例では定義、 <ph id="ph1">`Employee`</ph> 2 つのフィールドを持つクラス<ph id="ph2">`Name`</ph>と<ph id="ph3">`Id`</ph>です。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>It also defines an <ph id="ph1">`EmployeeSearch`</ph> class with a single method, <ph id="ph2">`StartsWith`</ph>, that indicates whether the <ph id="ph3">`Employee.Name`</ph> field starts with a specified substring that is supplied to the <ph id="ph4">`EmployeeSearch`</ph> class constructor.</source>
          <target state="translated">定義、<ph id="ph1">`EmployeeSearch`</ph>単一のメソッドとクラス<ph id="ph2">`StartsWith`</ph>を示すかどうか、<ph id="ph3">`Employee.Name`</ph>フィールドに用意されている指定した部分文字列で始まる、<ph id="ph4">`EmployeeSearch`</ph>クラスのコンス トラクターです。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Note  the signature of this method</source>
          <target state="translated">このメソッドのシグネチャに注意してください。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>corresponds to the signature of the delegate that can be passed to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph> method.</source>
          <target state="translated">渡すことができるデリゲートのシグネチャに対応する、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The example instantiates a <ph id="ph1">`List&lt;Employee&gt;`</ph> object, adds a number of <ph id="ph2">`Employee`</ph> objets to it, and then calls the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph> method twice  to search the entire collection (that is, the members from index 0 to index <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> - 1).</source>
          <target state="translated">例では、インスタンス化、<ph id="ph1">`List&lt;Employee&gt;`</ph>オブジェクト、いくつかの追加<ph id="ph2">`Employee`</ph>し、その呼び出しを objets、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29&gt;</ph>コレクション全体を検索するには、2 回メソッド (インデックスをインデックス 0 からメンバーは、 <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> - 1)。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The first time, it searches for the first <ph id="ph1">`Employee`</ph> object whose <ph id="ph2">`Name`</ph> field begins with "J"; the second time, it searches for the first <ph id="ph3">`Employee`</ph> object whose <ph id="ph4">`Name`</ph> field begins with "Ju".</source>
          <target state="translated">最初の検索、初めて<ph id="ph1">`Employee`</ph>オブジェクト<ph id="ph2">`Name`</ph>フィールドが"J"で始まる以外の場合は、最初の検索、2 回目<ph id="ph3">`Employee`</ph>オブジェクト<ph id="ph4">`Name`</ph>フィールドは、"Ju"で始まります。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> が、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の有効なインデックスの範囲外です。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の有効な部分を指定していません。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">検索する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">指定された述語によって定義された条件と一致する要素を、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体を対象に検索し、最もインデックス番号の大きい要素を返します。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <ph id="ph1">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <ph id="ph1">&lt;paramref name="T" /&gt;</ph> の既定値。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, moving backward in the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, starting with the last element and ending with the first element.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>逆方向に移動して、デリゲート、 <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>、最後の要素で開始および終了の最初の要素。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Processing is stopped when a match is found.</source>
          <target state="translated">一致が見つかった場合は、処理が停止しました。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</source>
          <target state="translated">値の型を含むリストを検索するときに、型の既定値は、検索述語を満たさないことを確認します。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</source>
          <target state="translated">それ以外の場合、一致が見つからなかったことを示す既定値と型の既定値が含まれているリスト要素を識別する方法はありません。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>If the default value satisfies the search predicate, use the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindLastIndex%2A&gt;</ph> method instead.</source>
          <target state="translated">既定値は、検索述語を満たす場合を使用して、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindLastIndex%2A&gt;</ph>メソッド代わりにします。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">次の例での検索方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">例を<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスに含まれる<ph id="ph2">`book`</ph>クラスのオブジェクト<ph id="ph3">`Book`</ph>、データを使用して、<bpt id="p1">[</bpt>サンプル XML ファイル: 書籍 (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>です。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated"><ph id="ph1">`FillList`</ph>メソッドの例では使用<bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept>のプロパティ値を XML から値を解析する、<ph id="ph2">`book`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">次の表では、検索方法を説明する例について説明します。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">メソッド</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">使用して、ID でブックを検索、<ph id="ph1">`IDToFind`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">C# の例では、匿名デリゲートを使用します。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">すべての書籍を持つ検索<ph id="ph1">`Genre`</ph>プロパティは、「コンピューター」を使用して、<ph id="ph2">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">2001 年を使用する前に、発行日を持つコレクション内の最後の書籍を検索、<ph id="ph1">`PubBefore2001`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">C# の例では、匿名デリゲートを使用します。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">コンピューター書籍を使用して最初のインデックスを検索、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">使用してコンピューター書籍の最後のインデックスを検索、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">コレクションの半分の 1 秒間の最初のコンピューター書籍のインデックスを検索を使用して、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> またはその一部分から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">検索する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The zero-based index of the last occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at the last element and ending at the first element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>後方の最後の要素の最初と最後の最初の要素を検索します。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">次の例での検索方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">例を<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスに含まれる<ph id="ph2">`book`</ph>クラスのオブジェクト<ph id="ph3">`Book`</ph>、データを使用して、<bpt id="p1">[</bpt>サンプル XML ファイル: 書籍 (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>です。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated"><ph id="ph1">`FillList`</ph>メソッドの例では使用<bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept>のプロパティ値を XML から値を解析する、<ph id="ph2">`book`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">次の表では、検索方法を説明する例について説明します。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">メソッド</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">使用して、ID でブックを検索、<ph id="ph1">`IDToFind`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">C# の例では、匿名デリゲートを使用します。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">すべての書籍を持つ検索<ph id="ph1">`Genre`</ph>プロパティは、「コンピューター」を使用して、<ph id="ph2">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">2001 年を使用する前に、発行日を持つコレクション内の最後の書籍を検索、<ph id="ph1">`PubBefore2001`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">C# の例では、匿名デリゲートを使用します。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">コンピューター書籍を使用して最初のインデックスを検索、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">使用してコンピューター書籍の最後のインデックスを検索、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">コレクションの半分の 1 秒間の最初のコンピューター書籍のインデックスを検索を使用して、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">後方検索の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">検索する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the first element to the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the last occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`startIndex`</ph> and ending at the first element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>検索旧バージョンとを開始位置として、<ph id="ph2">`startIndex`</ph>と最初の要素で終了します。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from the beginning of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to <ph id="ph2">`startIndex`</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作、場所<bpt id="p2">*</bpt>n<ept id="p2">*</ept>の先頭から要素の数が、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に<ph id="ph2">`startIndex`</ph>です。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> が、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の有効なインデックスの範囲外です。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">後方検索の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The number of elements in the section to search.</source>
          <target state="translated">検索対象のセクション内にある要素の数。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the element to search for.</source>
          <target state="translated">検索する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains the specified number of elements and ends at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち、指定したインデックスで終わり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The zero-based index of the last occurrence of an element that matches the conditions defined by <ph id="ph1">&lt;paramref name="match" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`startIndex`</ph> and ending at <ph id="ph3">`startIndex`</ph> minus <ph id="ph4">`count`</ph> plus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>検索旧バージョンとを開始位置として、<ph id="ph2">`startIndex`</ph>で終わる<ph id="ph3">`startIndex`</ph>マイナス<ph id="ph4">`count`</ph>1、さらに場合<ph id="ph5">`count`</ph>が 0 より大きい。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">`count`</ph>します。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The following example demonstrates the find methods for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
          <target state="translated">次の例での検索方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The example for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains <ph id="ph2">`book`</ph> objects, of class <ph id="ph3">`Book`</ph>, using the data from the <bpt id="p1">[</bpt>Sample XML File: Books (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>.</source>
          <target state="translated">例を<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>クラスに含まれる<ph id="ph2">`book`</ph>クラスのオブジェクト<ph id="ph3">`Book`</ph>、データを使用して、<bpt id="p1">[</bpt>サンプル XML ファイル: 書籍 (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)</ept>です。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The <ph id="ph1">`FillList`</ph> method in the example uses <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept> to parse the values from the XML to property values of the <ph id="ph2">`book`</ph> objects.</source>
          <target state="translated"><ph id="ph1">`FillList`</ph>メソッドの例では使用<bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)</ept>のプロパティ値を XML から値を解析する、<ph id="ph2">`book`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>The following table describes the examples provided for the find methods.</source>
          <target state="translated">次の表では、検索方法を説明する例について説明します。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Method</source>
          <target state="translated">メソッド</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Example</source>
          <target state="translated">例</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds a book by an ID using the <ph id="ph1">`IDToFind`</ph> predicate delegate.</source>
          <target state="translated">使用して、ID でブックを検索、<ph id="ph1">`IDToFind`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">C# の例では、匿名デリゲートを使用します。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Find all books that whose <ph id="ph1">`Genre`</ph> property is "Computer" using the <ph id="ph2">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">すべての書籍を持つ検索<ph id="ph1">`Genre`</ph>プロパティは、「コンピューター」を使用して、<ph id="ph2">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the last book in the collection that has a publish date before 2001, using the <ph id="ph1">`PubBefore2001`</ph> predicate delegate.</source>
          <target state="translated">2001 年を使用する前に、発行日を持つコレクション内の最後の書籍を検索、<ph id="ph1">`PubBefore2001`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>C# example uses an anonymous delegate.</source>
          <target state="translated">C# の例では、匿名デリゲートを使用します。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of first computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">コンピューター書籍を使用して最初のインデックスを検索、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of the last computer book using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">使用してコンピューター書籍の最後のインデックスを検索、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of first computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">コレクションの半分の 1 秒間の最初のコンピューター書籍のインデックスを検索を使用して、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>Finds the index of last computer book in the second half of the collection, using the <ph id="ph1">`FindComputer`</ph> predicate delegate.</source>
          <target state="translated">2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、<ph id="ph1">`FindComputer`</ph>述語デリゲート。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> が、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の有効なインデックスの範囲外です。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の有効な部分を指定していません。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> delegate to perform on each element of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の各要素に対して実行する <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>Performs the specified action on each element of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の各要素に対して、指定された処理を実行します。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> is a delegate to a method that performs an action on the object passed to it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Action%601&gt;</ph>を渡すとき、オブジェクトが操作を実行するメソッドにデリゲートします。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Action%601&gt;</ph> delegate.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Action%601&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>Modifying the underlying collection in the body of the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate is not supported and causes undefined behavior.</source>
          <target state="translated">本体で基になるコレクションを変更する、<ph id="ph1">&lt;xref:System.Action%601&gt;</ph>デリゲートがサポートされておらず、未定義の動作が発生します。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate to print the contents of a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">次の例での使用、<ph id="ph1">&lt;xref:System.Action%601&gt;</ph>の内容を印刷するデリゲート、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>In this example the <ph id="ph1">`Print`</ph> method is used to display the contents of the list to the console.</source>
          <target state="translated">この例では、<ph id="ph1">`Print`</ph>一覧の内容をコンソールに表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>In addition to displaying the contents using the <ph id="ph1">`Print`</ph> method, the C# example demonstrates the use of  to display the results to the console.</source>
          <target state="translated">使用して内容を表示するだけでなく、<ph id="ph1">`Print`</ph>結果をコンソールに表示するメソッド、c# の例を示しますの使用。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source><ph id="ph1">&lt;paramref name="action" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="action" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
          <source>An element in the collection has been modified.</source>
          <target state="translated">コレクションの要素が変更されています。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> を反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1.Enumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1.Enumerator" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">この位置にある、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>プロパティが定義されていません。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">そのため、呼び出す必要があります、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> property returns the same object until <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>プロパティまで同じオブジェクトを返します<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Enumerator.Current%2A&gt;</ph> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 名前空間のコレクションの既定の実装は同期されません。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The zero-based <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> index at which the range starts.</source>
          <target state="translated">範囲が開始する位置の、0 から始まる <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のインデックス番号。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The number of elements in the range.</source>
          <target state="translated">範囲内の要素の数。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>Creates a shallow copy of a range of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の、ある範囲の要素の簡易コピーを作成します。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>A shallow copy of a range of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の、ある範囲の要素の簡易コピー。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection.</source>
          <target state="translated">参照型のコレクションまたはそのコレクションのサブセットのシャロー コピーには、コレクションの要素への参照だけが含まれています。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The objects themselves are not copied.</source>
          <target state="translated">オブジェクト自体はコピーされません。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The references in the new list point to the same objects as the references in the original list.</source>
          <target state="translated">新しいリスト内の参照は、元のリスト内の参照と同じオブジェクトをポイントします。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection.</source>
          <target state="translated">値の型のコレクションまたは、そのコレクションのサブセットのシャロー コピーには、コレクションの要素が含まれています。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>However, if the elements of the collection contain references to other objects, those objects are not copied.</source>
          <target state="translated">ただし、コレクションの要素に他のオブジェクトへの参照が含まれている場合、それらのオブジェクトはコピーされません。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.</source>
          <target state="translated">新しいコレクションの要素内の参照は、元のコレクションの要素内の参照と同じオブジェクトをポイントします。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">これに対し、コレクションのディープ コピーされた要素をコピーして、要素が直接または間接的に参照するすべてです。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">`count`</ph>します。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> method and other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph>メソッドと他の方法で、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>範囲に作用するクラス。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>At the end of the example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> method is used to get three items from the list, beginning with index location 2.</source>
          <target state="translated">この例の最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph>メソッドを使用して、リストから、インデックス位置 2 から 3 つの項目を取得します。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> method is called on the resulting <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, creating an array of three elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph>メソッドが、結果として得られる<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>、3 つの要素の配列を作成します。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>The elements of the array are displayed.</source>
          <target state="translated">配列の要素が表示されます。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の要素の有効範囲を示していません。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Returns the zero-based index of the first occurrence of a value in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or in a portion of it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体またはその一部において、最初に値が出現した位置のインデックス番号 (0 から始まる) を返します。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体から指定したオブジェクトを検索し、最初に見つかったオブジェクトのインデックス (0 から始まる) を返します。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the entire <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> 全体を対象に <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は –1。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at the first element and ending at the last element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>はフォワード最初の要素を起点と最後の要素で終わる検索します。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、3 つすべてのオーバー ロード、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> method overload searches the list from the beginning, and finds the first occurrence of the string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph>メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph>メソッドのオーバー ロードが 3 のインデックスの場所で始まるリストとリストの末尾まで続行を検索するために使用し、文字列の 2 番目の出現箇所を検索します。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>その範囲内で検索文字列のインスタンスが存在しないため – 1 を返しますではメソッドのオーバー ロードを使用して、インデックス位置 2 から 2 つのエントリの範囲を検索します。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">検索の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>0 (zero) is valid in an empty list.</source>
          <target state="translated">空のリストでは 0 (ゼロ) は正しい値です。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the specified index to the last element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from <ph id="ph3">&lt;paramref name="index" /&gt;</ph> to the last element, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち、<ph id="ph3">&lt;paramref name="index" /&gt;</ph> から最後の要素までの要素範囲の中で <ph id="ph1">&lt;paramref name="item" /&gt;</ph> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`index`</ph> and ending at the last element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>転送を開始位置として検索<ph id="ph2">`index`</ph>と最後の要素で終了します。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from <ph id="ph1">`index`</ph> to the end of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>から要素の数は、<ph id="ph1">`index`</ph>の末尾に、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、3 つすべてのオーバー ロード、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> method overload searches the list from the beginning, and finds the first occurrence of the string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph>メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph>メソッドのオーバー ロードが 3 のインデックスの場所で始まるリストとリストの末尾まで続行を検索するために使用し、文字列の 2 番目の出現箇所を検索します。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>その範囲内で検索文字列のインスタンスが存在しないため – 1 を返しますではメソッドのオーバー ロードを使用して、インデックス位置 2 から 2 つのエントリの範囲を検索します。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の有効なインデックスの範囲外です。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based starting index of the search.</source>
          <target state="translated">検索の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>0 (zero) is valid in an empty list.</source>
          <target state="translated">空のリストでは 0 (ゼロ) は正しい値です。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The number of elements in the section to search.</source>
          <target state="translated">検索対象の範囲内にある要素の数。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that starts at the specified index and contains the specified number of elements.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち、指定したインデックスから始まり、指定した要素数が含まれる要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that starts at <ph id="ph3">&lt;paramref name="index" /&gt;</ph> and contains <ph id="ph4">&lt;paramref name="count" /&gt;</ph> number of elements, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち、<ph id="ph3">&lt;paramref name="index" /&gt;</ph> から始まり、要素数が <ph id="ph4">&lt;paramref name="count" /&gt;</ph> 個の要素範囲の中で <ph id="ph1">&lt;paramref name="item" /&gt;</ph> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched forward starting at <ph id="ph2">`index`</ph> and ending at <ph id="ph3">`index`</ph> plus <ph id="ph4">`count`</ph> minus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>転送を開始位置として検索が<ph id="ph2">`index`</ph>で終わる<ph id="ph3">`index`</ph>plus<ph id="ph4">`count`</ph>から 1 を引いた場合<ph id="ph5">`count`</ph>が 0 より大きい。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">`count`</ph>します。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、3 つすべてのオーバー ロード、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph> method overload searches the list from the beginning, and finds the first occurrence of the string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%29&gt;</ph>メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29&gt;</ph>メソッドのオーバー ロードが 3 のインデックスの場所で始まるリストとリストの末尾まで続行を検索するために使用し、文字列の 2 番目の出現箇所を検索します。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>その範囲内で検索文字列のインスタンスが存在しないため – 1 を返しますではメソッドのオーバー ロードを使用して、インデックス位置 2 から 2 つのエントリの範囲を検索します。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の有効なインデックスの範囲外です。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の有効な部分を指定していません。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> を挿入する位置の、0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The object to insert.</source>
          <target state="translated">挿入するオブジェクト。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>Inserts an element into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の指定したインデックスの位置に要素を挿入します。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> already equals <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>既に同じ<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>、容量、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> is added to the end of <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`index`</ph>と等しい<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>、<ph id="ph3">`item`</ph>の末尾に追加された<ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method, along with various other properties and methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph>メソッドは、さまざまな他のプロパティおよびメソッドと共に、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>ジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>After the list is created, elements are added.</source>
          <target state="translated">一覧を作成すると、後に要素が追加されます。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert an item into the middle of the list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph>メソッドを使用して、リストの中央に項目を挿入します。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>The item inserted is a duplicate, which is later removed using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method.</source>
          <target state="translated">項目を使用して、後で削除が重複するは、挿入、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> より大きくなっています。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The zero-based index at which the new elements should be inserted.</source>
          <target state="translated">新しい要素が挿入される位置の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements should be inserted into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> に要素を挿入するコレクション。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The collection itself cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, but it can contain elements that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> is a reference type.</source>
          <target state="translated">コレクション自体を <ph id="ph1">&lt;see langword="null" /&gt;</ph> にすることはできませんが、型 <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> が参照型の場合、コレクションに格納する要素は <ph id="ph2">&lt;see langword="null" /&gt;</ph> であってもかまいません。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>Inserts the elements of a collection into the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> at the specified index.</source>
          <target state="translated">コレクションの要素を <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の指定したインデックスの位置に挿入します。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>If the new <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> (the current <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> plus the size of the collection) will be greater than <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, the capacity of the <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</source>
          <target state="translated">場合、新しい<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>(現在<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>さらに、コレクションのサイズ) はより大きくなる<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>の容量、<ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>新しい要素では、それに合わせて内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>, the elements are added to the end of <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`index`</ph>と等しい<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>の末尾に要素が追加されます<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The order of the elements in the collection is preserved in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">コレクション内の要素の順序が内でも維持される、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> * </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is the number of elements to be added and <bpt id="p4">*</bpt>m<ept id="p4">*</ept> is <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept><ph id="ph1"> * </ph><bpt id="p2">*</bpt>m<ept id="p2">*</ept>) 操作、場所<bpt id="p3">*</bpt>n<ept id="p3">*</ept>を追加する要素の数と<bpt id="p4">*</bpt>m<ept id="p4">*</ept>は<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>The following example demonstrates <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph> method and various other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">次の例で<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph>メソッドと他の方法でさまざまな、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>範囲に作用するクラス。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.</source>
          <target state="translated">リストが作成され、いくつか平和プラント食事、恐竜の名前に設定した後、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.InsertRange%2A&gt;</ph>インデックス位置 3 から、一覧に肉食事恐竜の 3 つのクリックの配列を挿入するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> より大きくなっています。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">取得または設定する要素の、0 から始まるインデックス番号。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">指定したインデックスにある要素を取得または設定します。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">指定したインデックス位置にある要素。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[index]`</ph>.</source>
          <target state="translated">このプロパティでは、<ph id="ph1">`myCollection[index]`</ph> という構文を使用して、コレクション内の特定の要素にアクセスできます。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもです。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The example in this section demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property (the indexer in C#) and various other properties and methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class.</source>
          <target state="translated">このセクションの例を示します、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー) さまざまな他のプロパティおよびメソッドの<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>ジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>After the list has been created and populated using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph> method, an element is retrieved and displayed using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">リストがされた後に作成および設定を使用して、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A&gt;</ph>メソッド、要素が取得されを使用して表示、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>(For an example that uses the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property to set the value of a list element, see <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph>.)</source>
          <target state="translated">(を使用する例については、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph>リスト要素の値を設定するプロパティを参照してください<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.AsReadOnly%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Visual Basic, C#, and C++ all have syntax for accessing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property without using its name.</source>
          <target state="translated">Visual Basic、c#、および C++ すべてにアクセスするための構文を持つ、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph>プロパティ名を使用しません。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Instead, the variable containing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is used as if it were an array.</source>
          <target state="translated">代わりに、変数を含む、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>配列の場合と同様に使用します。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic は、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Item%2A&gt;</ph> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> 以上になっています。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Returns the zero-based index of the last occurrence of a value in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or in a portion of it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体またはその一部において、最後に値が出現した位置のインデックス番号 (0 から始まる) を返します。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体から指定したオブジェクトを検索し、最後に見つかったオブジェクトのインデックス (0 から始まる) を返します。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the entire the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> が見つかった場合は、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体で最後に見つかった位置のインデックス番号 (0 から始まる)。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at the last element and ending at the first element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>後方の最後の要素の最初と最後の最初の要素を検索します。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、3 つすべてのオーバー ロード、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> method overload searches the entire list from the end, and finds the second occurrence of the string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph>メソッドのオーバー ロードが、末尾からリスト全体を検索し、文字列の 2 番目の出現箇所を検索します。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph>インデックス 3 の場所で始まると、一覧の先頭に、最初に見つかった文字列の一覧で、操作を続行旧バージョンとの一覧を検索するメソッド オーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>メソッドのオーバー ロードが、インデックスの位置 4 に開始し、逆方向に拡張する 4 つのエントリの範囲を検索に使用される (つまり、その項目を検索、4、3、2、および 1 の場所で); 検索のインスタンスが存在しないために、この検索は – 1 を返しますその範囲内の文字列。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">後方検索の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the first element to the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that extends from the first element to <ph id="ph3">&lt;paramref name="index" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち、最初の要素から <ph id="ph3">&lt;paramref name="index" /&gt;</ph> までの要素範囲内で <ph id="ph1">&lt;paramref name="item" /&gt;</ph> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`index`</ph> and ending at the first element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>検索旧バージョンとを開始位置として、<ph id="ph2">`index`</ph>と最初の要素で終了します。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the number of elements from the beginning of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to <ph id="ph2">`index`</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作、場所<bpt id="p2">*</bpt>n<ept id="p2">*</ept>の先頭から要素の数が、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に<ph id="ph2">`index`</ph>です。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、3 つすべてのオーバー ロード、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> method overload searches the entire list from the end, and finds the second occurrence of the string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph>メソッドのオーバー ロードが、末尾からリスト全体を検索し、文字列の 2 番目の出現箇所を検索します。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph>インデックス 3 の場所で始まると、一覧の先頭に、最初に見つかった文字列の一覧で、操作を続行旧バージョンとの一覧を検索するメソッド オーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>メソッドのオーバー ロードが、インデックスの位置 4 に開始し、逆方向に拡張する 4 つのエントリの範囲を検索に使用される (つまり、その項目を検索、4、3、2、および 1 の場所で); 検索のインスタンスが存在しないために、この検索は – 1 を返しますその範囲内の文字列。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の有効なインデックスの範囲外です。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based starting index of the backward search.</source>
          <target state="translated">後方検索の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The number of elements in the section to search.</source>
          <target state="translated">検索対象の範囲内にある要素の数。</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains the specified number of elements and ends at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The zero-based index of the last occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the range of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains <ph id="ph3">&lt;paramref name="count" /&gt;</ph> number of elements and ends at <ph id="ph4">&lt;paramref name="index" /&gt;</ph>, if found; otherwise, –1.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> のうち、<ph id="ph3">&lt;paramref name="count" /&gt;</ph> 個の要素が含まれ、<ph id="ph4">&lt;paramref name="index" /&gt;</ph> の位置で終了する要素範囲の中で <ph id="ph1">&lt;paramref name="item" /&gt;</ph> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> is searched backward starting at <ph id="ph2">`index`</ph> and ending at <ph id="ph3">`index`</ph> minus <ph id="ph4">`count`</ph> plus 1, if <ph id="ph5">`count`</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>検索旧バージョンとを開始位置として、<ph id="ph2">`index`</ph>で終わる<ph id="ph3">`index`</ph>マイナス<ph id="ph4">`count`</ph>1、さらに場合<ph id="ph5">`count`</ph>が 0 より大きい。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">`count`</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">`count`</ph>します。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The following example demonstrates all three overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、3 つすべてのオーバー ロード、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph> method overload searches the entire list from the end, and finds the second occurrence of the string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29&gt;</ph>メソッドのオーバー ロードが、末尾からリスト全体を検索し、文字列の 2 番目の出現箇所を検索します。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29&gt;</ph>インデックス 3 の場所で始まると、一覧の先頭に、最初に見つかった文字列の一覧で、操作を続行旧バージョンとの一覧を検索するメソッド オーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>メソッドのオーバー ロードが、インデックスの位置 4 に開始し、逆方向に拡張する 4 つのエントリの範囲を検索に使用される (つまり、その項目を検索、4、3、2、および 1 の場所で); 検索のインスタンスが存在しないために、この検索は – 1 を返しますその範囲内の文字列。</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is outside the range of valid indexes for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が、<ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の有効なインデックスの範囲外です。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid section in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の有効な部分を指定していません。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The object to remove from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> から削除するオブジェクト。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">特定のオブジェクトが <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内にあるときに、最初に出現したものを削除します。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is successfully removed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="item" /&gt;</ph> が正常に削除された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> was not found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;see langword="false" /&gt;</ph> が <ph id="ph2">&lt;paramref name="item" /&gt;</ph> に見つからなかった場合にも <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>If type <ph id="ph1">`T`</ph> implements the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface, the equality comparer is the <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method of that interface; otherwise, the default equality comparer is <ph id="ph4">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>を実装、<ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph>ジェネリック インターフェイスは、等値比較子は、 <ph id="ph3">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> ; そのインターフェイスのメソッドは、それ以外の場合、既定の等値比較子<ph id="ph4">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The following example demonstrates <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method.</source>
          <target state="translated">次の例で<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>Several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> generic class are used to add, insert, and search the list.</source>
          <target state="translated">いくつかのプロパティとメソッド、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>ジェネリック クラスは追加、insert、および一覧を検索するために使用します。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>After these operations, the list contains a duplicate.</source>
          <target state="translated">これらの操作後に、一覧には、重複が含まれています。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method is used to remove the first instance of the duplicate item, and the contents are displayed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph>メソッドを使用して、重複する項目の最初のインスタンスを削除して、内容が表示されます。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Remove(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph> method always removes the first instance it encounters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Remove%2A&gt;</ph>メソッドは常に検出した最初のインスタンスを削除します。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions of the elements to remove.</source>
          <target state="translated">削除する要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>Removes all the elements that match the conditions defined by the specified predicate.</source>
          <target state="translated">指定した述語によって定義される条件に一致するすべての要素を削除します。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The number of elements removed from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> .</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> から削除される要素の数。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and the elements that match the conditions are removed from the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>デリゲート、および条件に一致する要素から削除されます、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> method and several other methods that use the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> generic delegate.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph>メソッドを使用して、他のいくつかの方法、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>汎用デリゲート。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>文字列の作成、"saurus"で終わる (位置 1 から 5 など) のうちの 2 台の 8 恐竜の名前を含むです。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The example also defines a search predicate method named <ph id="ph1">`EndsWithSaurus`</ph>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</source>
          <target state="translated">という名前の検索述語メソッドも定義<ph id="ph1">`EndsWithSaurus`</ph>、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値です。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph> methods are used to search the list with the search predicate method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Find%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.FindLast%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.FindAll%2A&gt;</ph>メソッドを使用して、検索述語メソッドを使用して、一覧を検索します。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> method is used to remove all entries ending with "saurus".</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAll%2A&gt;</ph> "Saurus"で終わるすべてのエントリを削除するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>It traverses the list from the beginning, passing each element in turn to the <ph id="ph1">`EndsWithSaurus`</ph> method.</source>
          <target state="translated">各要素を順番に渡して、先頭から、リストの走査、<ph id="ph1">`EndsWithSaurus`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>The element is removed if the <ph id="ph1">`EndsWithSaurus`</ph> method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">場合、要素が削除された、<ph id="ph1">`EndsWithSaurus`</ph>メソッドを返します。<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>In C# and Visual Basic, it is not necessary to create the <ph id="ph1">`Predicate&lt;string&gt;`</ph> delegate (<ph id="ph2">`Predicate(Of String)`</ph> in Visual Basic) explicitly.</source>
          <target state="translated">C# および Visual Basic の場合は、その必要はありませんを作成する、<ph id="ph1">`Predicate&lt;string&gt;`</ph>委任 (<ph id="ph2">`Predicate(Of String)`</ph> Visual Basic の) 明示的にします。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>These languages infer the correct delegate from context, and create it automatically.</source>
          <target state="translated">これらの言語は、コンテキストから正しいデリゲートを推測し、自動的に作成します。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph> method verifies that there are no strings in the list that end with "saurus".</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Exists%2A&gt;</ph>メソッドでは、"saurus"で終わるリスト内の文字列がないことを確認します。</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>The zero-based index of the element to remove.</source>
          <target state="translated">削除する要素の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の指定したインデックスにある要素を削除します。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>When you call <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAt%2A&gt;</ph> to remove an item, the remaining items in the list are renumbered to replace the removed item.</source>
          <target state="translated">呼び出すと<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveAt%2A&gt;</ph>削除された項目を置換する項目を削除する、一覧の残りの項目が番号が変更されます。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position.</source>
          <target state="translated">たとえば、インデックス 3 のアイテムを削除すると、インデックス 4 項目は 3 つの位置に移動します。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>In addition, the number of items in the list (as represented by the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property) is reduced by 1.</source>
          <target state="translated">さらに、リスト内の項目の数 (で表される、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>プロパティ) が 1 つずつ減少します。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is (<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">`index`</ph>).</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は (<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">`index`</ph>)。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>The following example demonstrates how to add, remove, and insert a simple business object in a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated">次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.Generic.List`1.Count" /&gt;</ph> 以上になっています。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The zero-based starting index of the range of elements to remove.</source>
          <target state="translated">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The number of elements to remove.</source>
          <target state="translated">削除する要素の数を指定します。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>Removes a range of elements from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> から要素の範囲を削除します。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The items are removed and all the elements following them in the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> have their indexes reduced by <ph id="ph2">`count`</ph>.</source>
          <target state="translated">アイテムを削除してすべての要素を次に、 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 、そのインデックスによって削減あります<ph id="ph2">`count`</ph>です。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph> method and various other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph>メソッドと他の方法でさまざまな、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>範囲に作用するクラス。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>After the list has been created and modified, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph> method is used to remove two elements from the list, beginning at index location 2.</source>
          <target state="translated">リストが作成され、変更した後、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.RemoveRange%2A&gt;</ph>リストから、インデックス位置 2 から 2 つの要素を削除するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の要素の有効範囲を示していません。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Reverses the order of the elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> またはその一部の要素の順序を反転させます。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>Reverses the order of the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体の要素の順序を反転させます。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> to reverse the order of the elements.</source>
          <target state="translated">このメソッドを使用して<ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph>要素の順序を逆にします。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>The following example demonstrates both overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、両方のオーバー ロードの<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings and adds six strings.</source>
          <target state="translated">例は、作成、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列し、6 つの文字列を追加します。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph> method overload is used to reverse the list, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph>を元に、リストを戻すメソッドのオーバー ロードを使用し、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph>要素 1 で始まると、4 つの要素を含む、リストの中央を反転させるメソッド オーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The zero-based starting index of the range to reverse.</source>
          <target state="translated">反転させる範囲の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The number of elements in the range to reverse.</source>
          <target state="translated">反転させる範囲内にある要素の数。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>Reverses the order of the elements in the specified range.</source>
          <target state="translated">指定した範囲の要素の順序を反転させます。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph> to reverse the order of the elements.</source>
          <target state="translated">このメソッドを使用して<ph id="ph1">&lt;xref:System.Array.Reverse%2A?displayProperty=nameWithType&gt;</ph>要素の順序を逆にします。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The following example demonstrates both overloads of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、両方のオーバー ロードの<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings and adds six strings.</source>
          <target state="translated">例は、作成、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列し、6 つの文字列を追加します。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph> method overload is used to reverse the list, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Reverse&gt;</ph>を元に、リストを戻すメソッドのオーバー ロードを使用し、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29&gt;</ph>要素 1 で始まると、4 つの要素を含む、リストの中央を反転させるメソッド オーバー ロードを使用します。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range of elements in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の要素の有効範囲を示していません。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.List`1">
          <source>Sorts the elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> or a portion of it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> またはその一部の要素を並べ替えます。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Overloaded method syntax</source>
          <target state="translated">オーバー ロードされたメソッドの構文</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The  <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> methods enable you to sort with the default comparer for the object type in the list, or specify a customer sort method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph>メソッドを使用すると、一覧で、オブジェクトの種類の既定の比較子と並べ替えまたは顧客の並べ替え方法を指定します。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort()<ept id="p1">](xref:System.Collections.Generic.List`1.Sort*)</ept> Sorts the elements in the entire list using the default comparer of the object type held in the list.</source>
          <target state="translated"><bpt id="p1">[</bpt>リスト<ph id="ph1">\&lt;</ph>T &gt; です。Sort()<ept id="p1">](xref:System.Collections.Generic.List`1.Sort*)</ept>リストに保持されているオブジェクトの種類の既定の比較子を使用してリスト全体の要素を並べ替えます。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort M(Comparison<ph id="ph2">\&lt;</ph>T&gt; comparison)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29)</ept> Sorts the elements in the entire list using the specified comparer.</source>
          <target state="translated"><bpt id="p1">[</bpt>リスト<ph id="ph1">\&lt;</ph>T &gt; です。並べ替え M (比較<ph id="ph2">\&lt;</ph>T &gt; の比較)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29)</ept>リスト全体を指定した比較子を使用して要素を並べ替えます。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort(IComparer<ph id="ph2">\&lt;</ph>T&gt; comparer)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29)</ept> Sorts the elements in the entire list using the specified <ph id="ph3">&lt;xref:System.Comparison%601?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">[</bpt>リスト<ph id="ph1">\&lt;</ph>T &gt; です。並べ替え (IComparer<ph id="ph2">\&lt;</ph>T &gt; の比較演算子)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29)</ept>リスト全体を指定して要素を並べ替えます<ph id="ph3">&lt;xref:System.Comparison%601?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort(Int32 index, Int32 count, IComparer<ph id="ph2">\&lt;</ph>T&gt; comparer)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29)</ept> Sorts the elements in a range of elements in list using the specified comparer.</source>
          <target state="translated"><bpt id="p1">[</bpt>List<ph id="ph1">\&lt;</ph>T&gt;.Sort(Int32 index, Int32 count, IComparer<ph id="ph2">\&lt;</ph>T&gt; comparer)<ept id="p1">](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29)</ept> Sorts the elements in a range of elements in list using the specified comparer.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Parameters</source>
          <target state="translated">パラメーター</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Parameter</source>
          <target state="translated">パラメーター</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Type</source>
          <target state="translated">型</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The delegate method to use when comparing elements</source>
          <target state="translated">要素を比較するときに使用するデリゲート メソッド</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>comparer</source>
          <target state="translated">比較演算子</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use when comparing elements, or null to use the default comparer <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>要素を比較するときに使用するか、既定の比較子を使用する場合は null に実装<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The zero-based starting index of the range to sort.</source>
          <target state="translated">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The length of the range to sort.</source>
          <target state="translated">並べ替える範囲の長さ。</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Exceptions</source>
          <target state="translated">例外</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Exception</source>
          <target state="translated">例外</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>Condition</source>
          <target state="translated">条件</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`comparer`</ph> is not specified or <ph id="ph2">`null`</ph>, and the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> cannot find implementation of the <ph id="ph4">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> generic interface or the <ph id="ph5">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph> interface for type T.</source>
          <target state="translated"><ph id="ph1">`comparer`</ph> 指定されていないか、 <ph id="ph2">`null`</ph>、および既定の比較子<ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の実装を見つけることができません、<ph id="ph4">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph>ジェネリック インターフェイスまたは<ph id="ph5">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>T 型のインターフェイス</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`comparison`</ph> is <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`comparison`</ph> は <ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>The implementation of <ph id="ph1">`comparison`</ph> or <ph id="ph2">`comparer`</ph> caused an error during the sort.</source>
          <target state="translated">実装<ph id="ph1">`comparison`</ph>または<ph id="ph2">`comparer`</ph>並べ替え中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>For example, <ph id="ph1">`comparison`</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">たとえば、<ph id="ph1">`comparison`</ph> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`index`</ph> and <ph id="ph2">`count`</ph> do not specify a valid range in the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`index`</ph> および <ph id="ph2">`count`</ph> は <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> において有効な範囲を指定していません。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.List`1">
          <source><ph id="ph1">`index`</ph> is less than 0 or <ph id="ph2">`count`</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">`index`</ph> 0 未満または<ph id="ph2">`count`</ph>が 0 未満です。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the default comparer.</source>
          <target state="translated">既定の比較子を使用して、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体内の要素を並べ替えます。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>This method uses the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for type <ph id="ph2">`T`</ph> to determine the order of list elements.</source>
          <target state="translated">このメソッドは、既定の比較子を使用して<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>型<ph id="ph2">`T`</ph>リストの要素の順序を決定します。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> property checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>プロパティのチェックを入力するかどうか<ph id="ph2">`T`</ph>を実装する、<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイスと使用可能な場合は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">ない場合は、<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph2">`T`</ph>を実装する、<ph id="ph3">&lt;xref:System.IComparable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>はいずれのインターフェイスを実装しません<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>スロー、<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>This method uses the <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> method, which applies the introspective sort as follows:</source>
          <target state="translated">このメソッドを使用して、<ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>内省的で並べ替えを次のように適用されるメソッド。</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</source>
          <target state="translated">パーティションのサイズが 16 個未満の要素の場合は、挿入の並べ替えアルゴリズムを使用します。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a Heapsort algorithm.</source>
          <target state="translated">パーティションの数が 2 つのログを超えた場合<bpt id="p1">*</bpt>n<ept id="p1">*</ept>ここで、 <bpt id="p2">*</bpt>n<ept id="p2">*</ept>範囲 Heapsort アルゴリズムを使用して、入力配列のです。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">それ以外の場合、クイック ソート アルゴリズムを使用します。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">この実装は、不安定な並べ替えを実行しますつまり、2 つの要素が等しい場合、順序が維持されない可能性があります。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">これに対し、安定した並べ替えには、同じである要素の順序が保持されます。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">平均すると、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>ログ<bpt id="p2">*</bpt>n<ept id="p2">*</ept>) 操作、場所<bpt id="p3">*</bpt>n<ept id="p3">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>最悪の場合ですこれは、O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>。2<ept id="p5">&lt;/sup&gt;</ept>) 操作です。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The following example adds some names to a <ph id="ph1">`List&lt;String&gt;`</ph> object, displays the list in unsorted order, calls the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method, and then displays the sorted list.</source>
          <target state="translated">次の例では、いくつかの名前、<ph id="ph1">`List&lt;String&gt;`</ph>並べ替えの順序で一覧を呼び出すオブジェクト、表示、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph>メソッド、し、並べ替えられた一覧を表示します。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The following code demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method overloads on a simple business object.</source>
          <target state="translated">次のコード例、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph>単純なビジネス オブジェクトのメソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method results in the use of the default comparer for the Part type, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method is implemented by using an anonymous method.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph>メソッドにより、一部の種類の既定の比較子の使用と<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph>匿名メソッドを使用してメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort&gt;</ph>メソッドのオーバー ロードおよび<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph>メソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The list is displayed, sorted, and displayed again.</source>
          <target state="translated">一覧が表示され、並べ替えが、もう一度表示されます。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph> method overload is then used to search for two strings that are not in the list, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert them.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%29&gt;</ph>メソッドのオーバー ロードが、一覧に含まれていない 2 つの文字列の検索に使用し、および<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph>に挿入するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The return value of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph> method is negative in each case, because the strings are not in the list.</source>
          <target state="translated">戻り値、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%2A&gt;</ph>文字列が、一覧にはないために、メソッドは、各ケースで負の値。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>Taking the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</source>
          <target state="translated">ビットごとの補数を行う (、~ 演算子で c# および Visual C、 <ph id="ph1">`Xor`</ph> Visual Basic では-1) はこの場所では、検索文字列より大きいと、挿入リストの最初の要素のインデックスのこの負の数値の生成には、並べ替えが保持されます順序です。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The second search string is larger than any element in the list, so the insertion position is at the end of the list.</source>
          <target state="translated">2 番目の検索文字列は、カーソル位置がリストの末尾であるため、一覧の任意の要素を超えています。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort">
          <source>The default comparer <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find an implementation of the <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph4">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">既定の比較子 <ph id="ph1">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> は、<ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ジェネリック インターフェイスの実装、または型 <ph id="ph4">&lt;paramref name="T" /&gt;</ph> の <ph id="ph3">&lt;see cref="T:System.IComparable" /&gt;</ph> インターフェイスの実装を見つけることができません。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">要素を比較する場合に使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> 実装。または、既定の比較子 <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> を使用する場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the specified comparer.</source>
          <target state="translated">指定した比較子を使用して、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体内の要素を並べ替えます。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>が提供されるの要素、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を指定して並べ替える<ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>は<ph id="ph2">`null`</ph>、既定の比較子<ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph4">`T`</ph>を実装、<ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイスし、使用可能な場合は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">ない場合は、<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph2">`T`</ph>を実装する、<ph id="ph3">&lt;xref:System.IComparable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>はいずれのインターフェイスを実装しません<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>スロー、<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>This method uses the <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph> method, which applies the introspective sort as follows:</source>
          <target state="translated">このメソッドを使用して、<ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>内省的で並べ替えを次のように適用されるメソッド。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</source>
          <target state="translated">パーティションのサイズが 16 個未満の要素の場合は、挿入の並べ替えアルゴリズムを使用します。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a Heapsort algorithm.</source>
          <target state="translated">パーティションの数が 2 つのログを超えた場合<bpt id="p1">*</bpt>n<ept id="p1">*</ept>ここで、 <bpt id="p2">*</bpt>n<ept id="p2">*</ept>範囲 Heapsort アルゴリズムを使用して、入力配列のです。</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">それ以外の場合、クイック ソート アルゴリズムを使用します。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">この実装は、不安定な並べ替えを実行しますつまり、2 つの要素が等しい場合、順序が維持されない可能性があります。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">これに対し、安定した並べ替えには、同じである要素の順序が保持されます。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">平均すると、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>ログ<bpt id="p2">*</bpt>n<ept id="p2">*</ept>) 操作、場所<bpt id="p3">*</bpt>n<ept id="p3">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>最悪の場合ですこれは、O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>。2<ept id="p5">&lt;/sup&gt;</ept>) 操作です。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードおよび<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">実装する DinoCompare を名前付き文字列の代替の比較演算子が定義されています、 <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> Visual basic で<ph id="ph3">`IComparer&lt;String^&gt;`</ph>Visual C で) ジェネリック インターフェイス。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">比較子が次のように動作: 比較対照値があるテスト最初に、 <ph id="ph1">`null`</ph>、null 参照が null でないより小さいとして扱われます。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, sorted using the alternate comparer, and displayed again.</source>
          <target state="translated">一覧が表示されます、代替の比較子を使用して並べ替えられ、表示されているもう一度です。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードがいくつかの文字列は、一覧で、使用しない、代替の比較子を検索に使用されるからです。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph> method is used to insert the strings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Insert%2A&gt;</ph>メソッドを使用して、文字列を挿入します。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>These two methods are located in the function named <ph id="ph1">`SearchAndInsert`</ph>, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph2">`Xor`</ph> -1 in Visual Basic) of the negative number returned by <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> and use it as an index for inserting the new string.</source>
          <target state="translated">これら 2 つの方法がという名前の関数内にある<ph id="ph1">`SearchAndInsert`</ph>、ビットごとの補数をコードと共に (、~ c# および Visual C で演算子<ph id="ph2">`Xor`</ph>Visual Basic では-1) によって返される負の数値の<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>のインデックスとして使用し、新しい文字列を挿入しています。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> で、既定の比較関数 <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> が <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ジェネリック インターフェイスまたは <ph id="ph6">&lt;paramref name="T" /&gt;</ph> 型の <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> インターフェイスの実装を見つけることができません。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>The implementation of <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> caused an error during the sort.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> の実装により、並べ替え中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
          <source>For example, <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Comparison`1" /&gt;</ph> to use when comparing elements.</source>
          <target state="translated">要素を比較する場合に使用する <ph id="ph1">&lt;see cref="T:System.Comparison`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Sorts the elements in the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the specified <ph id="ph2">&lt;see cref="T:System.Comparison`1" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Comparison`1" /&gt;</ph> を使用して、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 全体内の要素を並べ替えます。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If <ph id="ph1">`comparison`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the method represented by the delegate.</source>
          <target state="translated">場合<ph id="ph1">`comparison`</ph>が提供されるの要素、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>デリゲートによって表されるメソッドを使用して並べ替えられます。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If <ph id="ph1">`comparison`</ph> is <ph id="ph2">`null`</ph>, an <ph id="ph3">&lt;xref:System.ArgumentNullException&gt;</ph> is thrown.</source>
          <target state="translated">場合<ph id="ph1">`comparison`</ph>は<ph id="ph2">`null`</ph>、<ph id="ph3">&lt;xref:System.ArgumentNullException&gt;</ph>がスローされます。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, which applies the introspective sort as follows:</source>
          <target state="translated">このメソッドを使用して<ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>、内省的で並べ替えを次のように適用します。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</source>
          <target state="translated">挿入の並べ替えアルゴリズムを使用してパーティションのサイズが 16 個未満の要素の場合は、</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a <bpt id="p3">[</bpt>Heapsort<ept id="p3">](http://en.wikipedia.org/wiki/Heapsort)</ept> algorithm.</source>
          <target state="translated">パーティションの数が 2 つのログを超えた場合<bpt id="p1">*</bpt>n<ept id="p1">*</ept>ここで、 <bpt id="p2">*</bpt>n<ept id="p2">*</ept>範囲を使用して、入力配列の<bpt id="p3">[</bpt>Heapsort<ept id="p3">](http://en.wikipedia.org/wiki/Heapsort)</ept>アルゴリズムです。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">それ以外の場合、クイック ソート アルゴリズムを使用します。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">この実装は、不安定な並べ替えを実行しますつまり、2 つの要素が等しい場合、順序が維持されない可能性があります。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">これに対し、安定した並べ替えには、同じである要素の順序が保持されます。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">平均すると、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>ログ<bpt id="p2">*</bpt>n<ept id="p2">*</ept>) 操作、場所<bpt id="p3">*</bpt>n<ept id="p3">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>最悪の場合ですこれは、O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>。2<ept id="p5">&lt;/sup&gt;</ept>) 操作です。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The following code demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method overloads on a simple business object.</source>
          <target state="translated">次のコード例、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph>単純なビジネス オブジェクトのメソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method results in the use of the default comparer for the Part type, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method is implemented using an anonymous method.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph>メソッドにより、一部の種類の既定の比較子の使用と<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph>匿名メソッドを使用してメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The example defines an alternative comparison method for strings, named <ph id="ph1">`CompareDinosByLength`</ph>.</source>
          <target state="translated">例では、名前付き文字列の代替の比較メソッドを定義する<ph id="ph1">`CompareDinosByLength`</ph>です。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>This method works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">この方法は次のように、機能: 比較対照値があるテスト最初に、 <ph id="ph1">`null`</ph>、null 参照が null でないより小さいとして扱われます。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with four strings, in no particular order.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The list also includes an empty string and a null reference.</source>
          <target state="translated">一覧は、空の文字列と null 参照にも含まれます。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The list is displayed, sorted using a <ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph> generic delegate representing the <ph id="ph2">`CompareDinosByLength`</ph> method, and displayed again.</source>
          <target state="translated">使用して並べ替えられて、一覧が表示されます、<ph id="ph1">&lt;xref:System.Comparison%601&gt;</ph>を表すジェネリック デリゲート、<ph id="ph2">`CompareDinosByLength`</ph>メソッドを再び表示されます。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source><ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>The implementation of <ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> caused an error during the sort.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> の実装により、並べ替え中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
          <source>For example, <ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;paramref name="comparison" /&gt;</ph> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The zero-based starting index of the range to sort.</source>
          <target state="translated">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The length of the range to sort.</source>
          <target state="translated">並べ替える範囲の長さ。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> implementation to use when comparing elements, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">要素を比較する場合に使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> 実装。または、既定の比較子 <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> を使用する場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Sorts the elements in a range of elements in <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> using the specified comparer.</source>
          <target state="translated">指定した比較子を使用して、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内の要素の範囲内の要素を並べ替えます。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is provided, the elements of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are sorted using the specified <ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>が提供されるの要素、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を指定して並べ替える<ph id="ph3">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph4">`T`</ph> implements the <ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph> generic interface and uses that implementation, if available.</source>
          <target state="translated">場合<ph id="ph1">`comparer`</ph>は<ph id="ph2">`null`</ph>、既定の比較子<ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph4">`T`</ph>を実装、<ph id="ph5">&lt;xref:System.IComparable%601&gt;</ph>ジェネリック インターフェイスし、使用可能な場合は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">ない場合は、<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph2">`T`</ph>を実装する、<ph id="ph3">&lt;xref:System.IComparable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>はいずれのインターフェイスを実装しません<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>スロー、<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>, which applies the introspective sort as follows:</source>
          <target state="translated">このメソッドを使用して<ph id="ph1">&lt;xref:System.Array.Sort%2A?displayProperty=nameWithType&gt;</ph>、内省的で並べ替えを次のように適用します。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</source>
          <target state="translated">挿入の並べ替えアルゴリズムを使用してパーティションのサイズが 16 個未満の要素の場合は、</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>If the number of partitions exceeds 2 log <bpt id="p1">*</bpt>n<ept id="p1">*</ept>, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is the range of the input array, it uses a <bpt id="p3">[</bpt>Heapsort<ept id="p3">](http://en.wikipedia.org/wiki/Heapsort)</ept> algorithm.</source>
          <target state="translated">パーティションの数が 2 つのログを超えた場合<bpt id="p1">*</bpt>n<ept id="p1">*</ept>ここで、 <bpt id="p2">*</bpt>n<ept id="p2">*</ept>範囲を使用して、入力配列の<bpt id="p3">[</bpt>Heapsort<ept id="p3">](http://en.wikipedia.org/wiki/Heapsort)</ept>アルゴリズムです。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Otherwise, it uses a Quicksort algorithm.</source>
          <target state="translated">それ以外の場合、クイック ソート アルゴリズムを使用します。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</source>
          <target state="translated">この実装は、不安定な並べ替えを実行しますつまり、2 つの要素が等しい場合、順序が維持されない可能性があります。</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>In contrast, a stable sort preserves the order of elements that are equal.</source>
          <target state="translated">これに対し、安定した並べ替えには、同じである要素の順序が保持されます。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>On average, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept> log <bpt id="p2">*</bpt>n<ept id="p2">*</ept>) operation, where <bpt id="p3">*</bpt>n<ept id="p3">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>; in the worst case it is an O(<bpt id="p4">*</bpt>n<ept id="p4">*</ept><bpt id="p5">&lt;sup&gt;</bpt>2<ept id="p5">&lt;/sup&gt;</ept>) operation.</source>
          <target state="translated">平均すると、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>ログ<bpt id="p2">*</bpt>n<ept id="p2">*</ept>) 操作、場所<bpt id="p3">*</bpt>n<ept id="p3">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>最悪の場合ですこれは、O (<bpt id="p4">*</bpt>n<ept id="p4">*</ept> <bpt id="p5">&lt;sup&gt;</bpt>。2<ept id="p5">&lt;/sup&gt;</ept>) 操作です。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードおよび<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドのオーバー ロードします。</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The example defines an alternative comparer for strings named DinoCompare, which implements the <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> in Visual Basic, <ph id="ph3">`IComparer&lt;String^&gt;`</ph> in Visual C++) generic interface.</source>
          <target state="translated">実装する DinoCompare を名前付き文字列の代替の比較演算子が定義されています、 <ph id="ph1">`IComparer&lt;string&gt;`</ph> (<ph id="ph2">`IComparer(Of String)`</ph> Visual basic で<ph id="ph3">`IComparer&lt;String^&gt;`</ph>Visual C で) ジェネリック インターフェイス。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The comparer works as follows: First, the comparands are tested for <ph id="ph1">`null`</ph>, and a null reference is treated as less than a non-null.</source>
          <target state="translated">比較子が次のように動作: 比較対照値があるテスト最初に、 <ph id="ph1">`null`</ph>、null 参照が null でないより小さいとして扱われます。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Second, the string lengths are compared, and the longer string is deemed to be greater.</source>
          <target state="translated">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Third, if the lengths are equal, ordinary string comparison is used.</source>
          <target state="translated">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>の文字列が作成され、5 つ herbivorous 恐竜やから恐竜の 3 つの名前に設定されます。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>Within each of the two groups, the names are not in any particular sort order.</source>
          <target state="translated">2 つのグループの各名前はない任意の特定の並べ替え順序でできます。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</source>
          <target state="translated">一覧が表示されます、恐竜の範囲は、代替の比較子を使用して並べ替えられておよびが再度表示されます。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method overload is then used to search only the range of herbivores for "Brachiosaurus".</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> "Brachiosaurus"恐竜の範囲のみを検索するメソッドのオーバー ロードが使用されるからです。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, <ph id="ph1">`Xor`</ph> -1 in Visual Basic) of the negative number returned by the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph> method is used as an index for inserting the new string.</source>
          <target state="translated">文字列が見つからないとビットごとの補数 (、~ c# および Visual C で演算子<ph id="ph1">`Xor`</ph>Visual Basic では-1) によって返される負の数の<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29&gt;</ph>メソッドは、新しい文字列を挿入するためのインデックスとして使用します。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid range in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> および <ph id="ph2">&lt;paramref name="count" /&gt;</ph> は <ph id="ph3">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> において有効な範囲を指定していません。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>The implementation of <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> caused an error during the sort.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> の実装により、並べ替え中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source>For example, <ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> might not return 0 when comparing an item with itself.</source>
          <target state="translated">たとえば、項目をそれ自体と比較する場合、<ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> は 0 を返さない可能性があります。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
          <source><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the default comparer <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> cannot find implementation of the <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> generic interface or the <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> interface for type <ph id="ph6">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="comparer" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> で、既定の比較関数 <ph id="ph3">&lt;see cref="P:System.Collections.Generic.Comparer`1.Default" /&gt;</ph> が <ph id="ph4">&lt;see cref="T:System.IComparable`1" /&gt;</ph> ジェネリック インターフェイスまたは <ph id="ph6">&lt;paramref name="T" /&gt;</ph> 型の <ph id="ph5">&lt;see cref="T:System.IComparable" /&gt;</ph> インターフェイスの実装を見つけることができません。</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> が読み取り専用かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が読み取り専用である場合は <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">コレクションを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">コレクションを反復処理するために使用できる <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">この位置にある、<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>プロパティが定義されていません。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">そのため、呼び出す必要があります、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>プロパティまで同じオブジェクトを返します<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 名前空間のコレクションの既定の実装は同期されません。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> から要素がコピーされる 1 次元の <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> には、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の要素を <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> にコピーします。コピーは特定の <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> のインデックスから開始されます。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the nongeneric implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">場合、ソースの種類<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>変換先の型に自動的にキャストすることはできません<ph id="ph2">`array`</ph>の非ジェネリックの実装<ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph>スロー<ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>汎用実装でスローされ、<ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> が多次元です。</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> には、0 から始まるインデックス番号がありません。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の要素数が、コピー先 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> から最後までの使用可能領域を超えています。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の型をコピー先の <ph id="ph2">&lt;paramref name="array" /&gt;</ph> の型に自動的にキャストすることはできません。</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> へのアクセスが同期されている (スレッド セーフである) 場合は <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 名前空間のコレクションの既定の実装は同期されません。</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.</source>
          <target state="translated">まれに、列挙型と競合書き込みアクセスでは、列挙中にコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> アクセスを同期するために使用できるオブジェクトを返します、<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスを同期するために使用できるオブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスの同期に使用できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 名前空間のコレクションの既定の実装は同期されません。</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> アクセスを同期するために使用できるオブジェクトを返します、<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">次のコードの使用を示しています、 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> c#、C++、および Visual Basic のプロパティです。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">コレクションを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">コレクションを反復処理するために使用できる <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> を実行した場合も、列挙子はこの位置に戻されます。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">この位置にある、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>プロパティが定義されていません。</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">そのため、呼び出す必要があります、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>プロパティでは、同じオブジェクトを取得するまで<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> をコレクションの最初の要素にもう一度設定するには、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> を呼び出してから <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 名前空間のコレクションの既定の実装は同期されません。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> に追加する <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>Adds an item to the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に項目を追加します。</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>The position into which the new element was inserted.</source>
          <target state="translated">新しい要素が挿入された位置。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is less than <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, this method is an O(1) operation.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>はより小さい<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>、このメソッドは、o (1) 操作になります。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source>If the capacity needs to be increased to accommodate the new element, this method becomes an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">容量は、新しい要素を格納するためにする必要があります、このメソッドが O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作、場所<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 内で検索される <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> contains a specific value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に特定の値が格納されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.IList" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が <ph id="ph2">&lt;paramref name="item" /&gt;</ph> に存在する場合は <ph id="ph3">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>Determines the index of a specific item in the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 内の特定の項目のインデックスを確認します。</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>The index of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> if found in the list; otherwise, –1.</source>
          <target state="translated">リストに存在する場合は <ph id="ph1">&lt;paramref name="item" /&gt;</ph> のインデックス。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> を挿入する位置の、0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>The object to insert into the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に挿入するオブジェクト。</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>Inserts an item to the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> at the specified index.</source>
          <target state="translated">指定したインデックスの <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に項目を挿入します。</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>If <ph id="ph1">`index`</ph> equals the number of items in the <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>, then <ph id="ph3">`item`</ph> is appended to the end.</source>
          <target state="translated"><ph id="ph1">`index`</ph> が <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph> 内の項目数に等しければ、<ph id="ph3">`item`</ph> が末尾に追加されます。</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> の有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> が固定サイズかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> has a fixed size; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が固定サイズの場合は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</source>
          <target state="translated">固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> が読み取り専用かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が読み取り専用である場合は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">取得または設定する要素の、0 から始まるインデックス番号。</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">指定したインデックスにある要素を取得または設定します。</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">指定したインデックス位置にある要素。</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The C# language uses the <bpt id="p1">[</bpt>this<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 言語を使用して、<bpt id="p1">[</bpt>この<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept>キーワードを実装する代わりに、インデクサーの定義、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic は、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A&gt;</ph> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもです。</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> の有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
          <source>The property is set and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">プロパティが設定されていて、<ph id="ph1">&lt;paramref name="value" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>The object to remove from the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> から削除するオブジェクト。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">特定のオブジェクトが <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 内にあるときに、最初に出現したものを削除します。</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> to a new array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の要素を新しい配列にコピーします。</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>An array containing copies of the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> の要素のコピーを格納する配列。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The elements are copied using <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>, which is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">要素のコピーを使用して<ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>、これは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作、場所<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> method and other methods of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class that act on ranges.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph>メソッドと他の方法で、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>範囲に作用するクラス。</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>At the end of the example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph> method is used to get three items from the list, beginning with index location 2.</source>
          <target state="translated">この例の最後に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.GetRange%2A&gt;</ph>メソッドを使用して、リストから、インデックス位置 2 から 3 つの項目を取得します。</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph> method is called on the resulting <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, creating an array of three elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ToArray%2A&gt;</ph>メソッドが、結果として得られる<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>、3 つの要素の配列を作成します。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.ToArray">
          <source>The elements of the array are displayed.</source>
          <target state="translated">配列の要素が表示されます。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, if that number is less than a threshold value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内にある実際の要素数がしきい値未満の場合は、容量をその数に設定します。</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">このメソッドは、コレクションのメモリ オーバーヘッドを最小要素がコレクションに追加されない場合に使用できます。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The cost of reallocating and copying a large <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> can be considerable, however, so the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.</source>
          <target state="translated">再割り当てすることや、大規模なコピーのコスト<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>考慮する必要が、ただし、ため、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>メソッドは何もリストが容量の 90% 以上である場合。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>This avoids incurring a large reallocation cost for a relatively small gain.</source>
          <target state="translated">これは、比較的小さい向上のための大規模な再割り当てコストをかけず回避できます。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The current threshold of 90 percent might change in future releases.</source>
          <target state="translated">現在のしきい値の 90% は、将来のリリースで変更があります。</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph> method before calling the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">リセットする、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を初期状態に呼び出し、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Clear%2A&gt;</ph>メソッドを呼び出す前に、<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> to the default capacity.</source>
          <target state="translated">空のトリミング<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>のキャパシティを設定、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を既定の容量。</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The capacity can also be set using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> property.</source>
          <target state="translated">使用して、容量を設定することも、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The following example demonstrates how to check the capacity and count of a  <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains a simple business object, and illustrates using the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method to remove extra capacity.</source>
          <target state="translated">次の例では、容量およびの数を確認する方法、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を単純なビジネス オブジェクトを含むし、使用方法を示します、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>余分な容量を削除する方法です。</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class are used to add, insert, and remove items from a list of strings.</source>
          <target state="translated">いくつかのプロパティとメソッド、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>を追加、insert、および文字列の一覧から項目を削除するクラスを使用します。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Then the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph> method is used to reduce the capacity to match the count, and the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> properties are displayed.</source>
          <target state="translated">次に、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrimExcess%2A&gt;</ph>メソッドは、数と一致する容量の削減に使用され、<ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>プロパティが表示されます。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</source>
          <target state="translated">未使用の容量が合計容量の 10% 未満である場合、リストがされているサイズ変更されません。</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrimExcess">
          <source>Finally, the contents of the list are cleared.</source>
          <target state="translated">最後に、一覧の内容が消去されます。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> delegate that defines the conditions to check against the elements.</source>
          <target state="translated">要素の条件を定義する <ph id="ph1">&lt;see cref="T:System.Predicate`1" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>Determines whether every element in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> matches the conditions defined by the specified predicate.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内のすべての要素が、指定した述語によって定義される条件に一致するかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if every element in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> matches the conditions defined by the specified predicate; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内のすべての要素が、指定した述語によって定義される条件に一致する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>If the list has no elements, the return value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">リストに要素がない場合、戻り値は <ph id="ph1">&lt;see langword="true" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> is a delegate to a method that returns <ph id="ph2">`true`</ph> if the object passed to it matches the conditions defined in the delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>を返すメソッドをデリゲート<ph id="ph2">`true`</ph>デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The elements of the current <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> are individually passed to the <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> delegate, and processing is stopped when the delegate returns <ph id="ph3">`false`</ph> for any element.</source>
          <target state="translated">現在の要素<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>に個別に渡される、<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>デリゲート、および処理が停止しているデリゲートが返されるときに<ph id="ph3">`false`</ph>任意の要素。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The elements are processed in order, and all calls are made on a single thread.</source>
          <target state="translated">要素は順番に処理され、すべての呼び出しは 1 つのスレッドで行われます。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>This method is an O(<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) operation, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<bpt id="p1">*</bpt>n<ept id="p1">*</ept>) 操作では、ここで<bpt id="p2">*</bpt>n<ept id="p2">*</ept>は<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph> method and several other methods that use <ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph> generic delegate.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph>メソッドを使用して、他のいくつかの方法<ph id="ph2">&lt;xref:System.Predicate%601&gt;</ph>汎用デリゲート。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>文字列の作成、"saurus"で終わる (位置 1 から 5 など) のうちの 2 台の 8 恐竜の名前を含むです。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The example also defines a search predicate method named <ph id="ph1">`EndsWithSaurus`</ph>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</source>
          <target state="translated">という名前の検索述語メソッドも定義<ph id="ph1">`EndsWithSaurus`</ph>、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値です。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph> method traverses the list from the beginning, passing each element in turn to the <ph id="ph2">`EndsWithSaurus`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.TrueForAll%2A&gt;</ph>メソッドは、最初に、各要素を順番に渡してから、リストを走査、<ph id="ph2">`EndsWithSaurus`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>The search stops when the <ph id="ph1">`EndsWithSaurus`</ph> method returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">検索を停止するときに、<ph id="ph1">`EndsWithSaurus`</ph>メソッドを返します。<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>In C# and Visual Basic, it is not necessary to create the <ph id="ph1">`Predicate&lt;string&gt;`</ph> delegate (<ph id="ph2">`Predicate(Of String)`</ph> in Visual Basic) explicitly.</source>
          <target state="translated">C# および Visual Basic の場合は、その必要はありませんを作成する、<ph id="ph1">`Predicate&lt;string&gt;`</ph>委任 (<ph id="ph2">`Predicate(Of String)`</ph> Visual Basic の) 明示的にします。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source>These languages infer the correct delegate from context and create it automatically.</source>
          <target state="translated">これらの言語では、コンテキストから適切なデリゲートを推論し、自動的に作成します。</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
          <source><ph id="ph1">&lt;paramref name="match" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="match" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>