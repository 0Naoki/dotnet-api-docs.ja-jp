<Type Name="List&lt;T&gt;" FullName="System.Collections.Generic.List&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="649dc28c23dbde95771a5a23c8feb6e1086637c4" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33683963" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class List&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit List`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.List`1" />
  <TypeSignature Language="VB.NET" Value="Public Class List(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class List : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="b83ea-101">リスト内の要素の型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b83ea-101">The type of elements in the list.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="b83ea-102">インデックスを使用してアクセスできる、厳密に型指定されたオブジェクトのリストを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b83ea-102">Represents a strongly typed list of objects that can be accessed by index.</span>
      </span>
      <span data-ttu-id="b83ea-103">リストの検索、並べ替え、および操作のためのメソッドを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b83ea-103">Provides methods to search, sort, and manipulate lists.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-104"><xref:System.Collections.Generic.List%601>クラスはジェネリックと同等、<xref:System.Collections.ArrayList>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-104">The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class.</span></span> <span data-ttu-id="b83ea-105">実装する、<xref:System.Collections.Generic.IList%601>サイズが動的に拡大されるとして配列を使用してジェネリック インターフェイスが必要です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-105">It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required.</span></span>  
  
 <span data-ttu-id="b83ea-106">項目を追加することができます、<xref:System.Collections.Generic.List%601>を使用して、<xref:System.Collections.Generic.List%601.Add%2A>または<xref:System.Collections.Generic.List%601.AddRange%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-106">You can add items to a <xref:System.Collections.Generic.List%601> by using the <xref:System.Collections.Generic.List%601.Add%2A> or <xref:System.Collections.Generic.List%601.AddRange%2A> methods.</span></span>  
  
 <span data-ttu-id="b83ea-107"><xref:System.Collections.Generic.List%601>クラスが、等値比較子と順序比較子の両方を使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-107">The <xref:System.Collections.Generic.List%601> class uses both an equality comparer and an ordering comparer.</span></span>  
  
-   <span data-ttu-id="b83ea-108">などのメソッド<xref:System.Collections.Generic.List%601.Contains%2A>、 <xref:System.Collections.Generic.List%601.IndexOf%2A>、 <xref:System.Collections.Generic.List%601.LastIndexOf%2A>、および<xref:System.Collections.Generic.Dictionary%602.Remove%2A>リストの要素に対して等値比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-108">Methods such as <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and <xref:System.Collections.Generic.Dictionary%602.Remove%2A> use an equality comparer for the list elements.</span></span> <span data-ttu-id="b83ea-109">型の既定の等値比較子`T`は次のように決定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-109">The default equality comparer for type `T` is determined as follows.</span></span> <span data-ttu-id="b83ea-110">場合型`T`を実装、<xref:System.IEquatable%601>ジェネリック インターフェイスは、等値比較子は、 <xref:System.IEquatable%601.Equals%28%600%29> ; そのインターフェイスのメソッドは、それ以外の場合、既定の等値比較子<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-110">If type `T` implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%28%600%29> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="b83ea-111">などのメソッド<xref:System.Collections.Generic.List%601.BinarySearch%2A>と<xref:System.Collections.Generic.List%601.Sort%2A>リスト要素に対して順序比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-111">Methods such as <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> use an ordering comparer for the list elements.</span></span> <span data-ttu-id="b83ea-112">型の既定の比較子`T`は次のように決定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-112">The default comparer for type `T` is determined as follows.</span></span>  <span data-ttu-id="b83ea-113">場合型`T`を実装する、<xref:System.IComparable%601>ジェネリック インターフェイスは、既定の比較子は、 <xref:System.IComparable%601.CompareTo%28%600%29> ; そのインターフェイスのメソッドそれ以外の場合型`T`否かにかかわらずを実装する<xref:System.IComparable>既定の比較子は、インターフェイス、<xref:System.IComparable.CompareTo%28System.Object%29>そのインターフェイスのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-113">If type `T` implements the <xref:System.IComparable%601> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29> method of that interface; otherwise, if type `T` implements the nongeneric <xref:System.IComparable> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29> method of that interface.</span></span> <span data-ttu-id="b83ea-114">場合型`T`どちらのインターフェイスを実装し、既定の比較子がない、比較子または比較デリゲートを明示的に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-114">If type `T` implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.</span></span>  
  
 <span data-ttu-id="b83ea-115"><xref:System.Collections.Generic.List%601>並べ替えは保証されません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-115">The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted.</span></span>  <span data-ttu-id="b83ea-116">並べ替える必要があります、<xref:System.Collections.Generic.List%601>操作を実行する前に (など<xref:System.Collections.Generic.List%601.BinarySearch%2A>) を必要とする、<xref:System.Collections.Generic.List%601>並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-116">You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted.</span></span>  
  
 <span data-ttu-id="b83ea-117">このコレクション内の要素は、整数インデックスを使用してアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-117">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="b83ea-118">このコレクションのインデックスは 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-118">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="b83ea-119">非常に大きな<xref:System.Collections.Generic.List%601>オブジェクト、設定して、64 ビット システム上の 20億要素に最大の容量を増やすことができます、`enabled`する構成要素の属性`true`実行時環境でします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-119">For very large <xref:System.Collections.Generic.List%601> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="b83ea-120"><xref:System.Collections.Generic.List%601> 受け付ける`null`と参照の有効な値の型により、重複する要素。</span><span class="sxs-lookup"><span data-stu-id="b83ea-120"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="b83ea-121">不変のバージョンについては、<xref:System.Collections.Generic.List%601>クラスを参照してください<xref:System.Collections.Immutable.ImmutableList%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-121">For an immutable version of the <xref:System.Collections.Generic.List%601> class, see <xref:System.Collections.Immutable.ImmutableList%601>.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="b83ea-122">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="b83ea-122">Performance Considerations</span></span>  
 <span data-ttu-id="b83ea-123">使用するかどうかを決定するときに、<xref:System.Collections.Generic.List%601>または<xref:System.Collections.ArrayList>ことに注意して同様の機能があるは、クラス、<xref:System.Collections.Generic.List%601>クラスより多くの場合は実行し、タイプ セーフであります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-123">In deciding whether to use the <xref:System.Collections.Generic.List%601> or <xref:System.Collections.ArrayList> class, both of which have similar functionality, remember that the <xref:System.Collections.Generic.List%601> class performs better in most cases and is type safe.</span></span> <span data-ttu-id="b83ea-124">型の参照型を使用する場合`T`の<xref:System.Collections.Generic.List%601>クラス、2 つのクラスの動作は同じです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-124">If a reference type is used for type `T` of the <xref:System.Collections.Generic.List%601> class, the behavior of the two classes is identical.</span></span> <span data-ttu-id="b83ea-125">ただし、型の値の型を使用する場合`T`実装とボックス化の問題を考慮する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-125">However, if a value type is used for type `T`, you need to consider implementation and boxing issues.</span></span>  
  
 <span data-ttu-id="b83ea-126">型の値の型を使用する場合`T`、コンパイラの実装を生成する、<xref:System.Collections.Generic.List%601>具体的にはその値の型のクラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-126">If a value type is used for type `T`, the compiler generates an implementation of the <xref:System.Collections.Generic.List%601> class specifically for that value type.</span></span> <span data-ttu-id="b83ea-127">つまり、あるリスト要素の<xref:System.Collections.Generic.List%601>要素を使用することができますと約 500 リストの要素が作成された後、メモリ保存リストの要素をボックス化されませんが、クラスの実装を生成するために使用するメモリよりも大きい前にボックス化されるオブジェクトがありません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-127">That means a list element of a <xref:System.Collections.Generic.List%601> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.</span></span>  
  
 <span data-ttu-id="b83ea-128">型に使用される値型を確認してください`T`を実装する、<xref:System.IEquatable%601>ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-128">Make certain the value type used for type `T` implements the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="b83ea-129">場合などのメソッド、<xref:System.Collections.Generic.List%601.Contains%2A>呼び出す必要があります、<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>メソッドで、影響を受けるリスト要素のボックスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-129">If not, methods such as <xref:System.Collections.Generic.List%601.Contains%2A> must call the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, which boxes the affected list element.</span></span> <span data-ttu-id="b83ea-130">値の型を実装する場合、<xref:System.IComparable>インターフェイスを所有しているソース コードでも導入、<xref:System.IComparable%601>ジェネリック インターフェイスを防ぐために、<xref:System.Collections.Generic.List%601.BinarySearch%2A>と<xref:System.Collections.Generic.List%601.Sort%2A>リストの要素をボックス化からのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-130">If the value type implements the <xref:System.IComparable> interface and you own the source code, also implement the <xref:System.IComparable%601> generic interface to prevent the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods from boxing list elements.</span></span> <span data-ttu-id="b83ea-131">ソース コードを所有していない場合、<xref:System.Collections.Generic.IComparer%601>オブジェクトを<xref:System.Collections.Generic.List%601.BinarySearch%2A>と<xref:System.Collections.Generic.List%601.Sort%2A>メソッド</span><span class="sxs-lookup"><span data-stu-id="b83ea-131">If you do not own the source code, pass an <xref:System.Collections.Generic.IComparer%601> object to the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods</span></span>  
  
 <span data-ttu-id="b83ea-132">型に固有の実装を使用すると便利には、<xref:System.Collections.Generic.List%601>クラスを使用せずに、<xref:System.Collections.ArrayList>クラスまたは厳密に型指定されたラッパー コレクションを記述します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-132">It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself.</span></span> <span data-ttu-id="b83ea-133">理由は、実装する必要がありますどのような .NET Framework は既に、Microsoft intermediate language コードとメタデータの実装ことはできませんが、共通言語ランタイムを共有できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-133">The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.</span></span>  
  
## <a name="f-considerations"></a><span data-ttu-id="b83ea-134">F# に関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="b83ea-134">F# Considerations</span></span>  
 <span data-ttu-id="b83ea-135"><xref:System.Collections.Generic.List%601>頻度の低い f# コードでクラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-135">The <xref:System.Collections.Generic.List%601> class is used infrequently in F# code.</span></span>  <span data-ttu-id="b83ea-136">代わりに、[一覧](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)、これは、変更できない、シングル リンク リストは通常の優先します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-136">Instead, [Lists](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), which are immutable, singly-linked lists, are typically preferred.</span></span> <span data-ttu-id="b83ea-137">F# のリストは、順序付けられ、変更できない一連の値を提供し、関数型スタイルの開発での使用はサポートされてです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-137">An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development.</span></span> <span data-ttu-id="b83ea-138">F# から使用する場合、<xref:System.Collections.Generic.List%601>クラス通常によって参照される、 [ResizeArray\<' T >](https://msdn.microsoft.com/library/ee353447.aspx)名前の f# の一覧との競合を回避するため省略形を入力</span><span class="sxs-lookup"><span data-stu-id="b83ea-138">When used from F#, the <xref:System.Collections.Generic.List%601> class is typically referred to by the  [ResizeArray\<'T>](https://msdn.microsoft.com/library/ee353447.aspx) type abbreviation to avoid naming conflicts with F# Lists</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-139">次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-139">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="b83ea-140">次の例は、いくつかのプロパティとメソッドを示しています、<xref:System.Collections.Generic.List%601>文字列型のジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-140">The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class of type string.</span></span> <span data-ttu-id="b83ea-141">(の例については、<xref:System.Collections.Generic.List%601>の複合型は、次を参照してください、<xref:System.Collections.Generic.List%601.Contains%2A>メソッドです。)。</span><span class="sxs-lookup"><span data-stu-id="b83ea-141">(For an example of a <xref:System.Collections.Generic.List%601> of complex types, see the <xref:System.Collections.Generic.List%601.Contains%2A> method.)</span></span>  
  
 <span data-ttu-id="b83ea-142">既定のコンス トラクターを使用して、既定の容量を持つ文字列のリストを作成できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-142">The default constructor is used to create a list of strings with the default capacity.</span></span> <span data-ttu-id="b83ea-143"><xref:System.Collections.Generic.List%601.Capacity%2A>プロパティを表示し、<xref:System.Collections.Generic.List%601.Add%2A>メソッドを使用していくつかの項目に追加します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-143">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items.</span></span> <span data-ttu-id="b83ea-144">項目が表示されている場合、および<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティが表示されますと組み合わせて再度、<xref:System.Collections.Generic.List%601.Count%2A>プロパティは、必要に応じて容量が増加したことを表示します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-144">The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="b83ea-145"><xref:System.Collections.Generic.List%601.Contains%2A>メソッドは、リスト内の項目の存在をテストするため、<xref:System.Collections.Generic.List%601.Insert%2A>メソッドを使用して、一覧の途中で新しい項目を挿入して、一覧の内容が再度表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-145">The <xref:System.Collections.Generic.List%601.Contains%2A> method is used to test for the presence of an item in the list, the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again.</span></span>  
  
 <span data-ttu-id="b83ea-146">既定値<xref:System.Collections.Generic.List%601.Item%2A>プロパティ (c# のインデクサー) が、項目の取得に使用される、<xref:System.Collections.Generic.List%601.Remove%2A>メソッドを使用して、前に追加の重複する項目の最初のインスタンスを削除して、内容が再度表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-146">The default <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) is used to retrieve an item, the <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again.</span></span> <span data-ttu-id="b83ea-147"><xref:System.Collections.Generic.List%601.Remove%2A>メソッドは常に検出した最初のインスタンスを削除します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-147">The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.</span></span>  
  
 <span data-ttu-id="b83ea-148"><xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドを使用して、数と一致する容量を減らすと、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-148">The <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="b83ea-149">未使用の容量が合計容量の 10% 未満である場合、リストがされているサイズ変更されません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-149">If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</span></span>  
  
 <span data-ttu-id="b83ea-150">最後に、<xref:System.Collections.Generic.List%601.Clear%2A>メソッドを使用してリストから、すべての項目を削除して、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-150">Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="b83ea-151">パブリック静的 (<see langword="Shared" /> Visual Basic で) この型のメンバーは、スレッド セーフであります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b83ea-151">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="b83ea-152">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b83ea-152">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="b83ea-153">複数の読み取り操作を実行する安全では、<see cref="T:System.Collections.Generic.List`1" />問題は、読み取られるときに、コレクションが変更された場合に発生することができますが、します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b83ea-153">It is safe to perform multiple read operations on a <see cref="T:System.Collections.Generic.List`1" />, but issues can occur if the collection is modified while it’s being read.</span>
      </span>
      <span data-ttu-id="b83ea-154">スレッド セーフを確保するには、読み取り中にコレクションをロックまたは書き込み操作をします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b83ea-154">To ensure thread safety, lock the collection during a read or write operation.</span>
      </span>
      <span data-ttu-id="b83ea-155">読み取りと書き込みの複数のスレッドがアクセスするコレクションを有効にするには、独自に同期を実装する必要があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b83ea-155">To enable a collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span>
      </span>
      <span data-ttu-id="b83ea-156">コレクションで組み込みの同期は、クラスを参照してください、<see cref="N:System.Collections.Concurrent" />名前空間。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b83ea-156">For collections with built-in synchronization, see the classes in the <see cref="N:System.Collections.Concurrent" /> namespace.</span>
      </span>
      <span data-ttu-id="b83ea-157">本質的にスレッド セーフな代わりに、次を参照してください。、<see cref="T:System.Collections.Immutable.ImmutableList`1" />クラスです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b83ea-157">For an inherently thread–safe alternative, see the <see cref="T:System.Collections.Immutable.ImmutableList`1" /> class.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.Immutable.ImmutableList`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-158">
            <see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-158">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-159">空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-159">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the default initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-160">容量、<xref:System.Collections.Generic.List%601>は要素の数を<xref:System.Collections.Generic.List%601>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-160">The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold.</span></span> <span data-ttu-id="b83ea-161">要素が追加されるにつれて、<xref:System.Collections.Generic.List%601>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-161">As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="b83ea-162">使用して、コレクションのサイズを推定することができる場合、<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29>コンス トラクターと、初期量を指定する数の要素を追加するときにサイズ変更操作を実行する必要がある、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-162">If the size of the collection can be estimated, using the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-163">呼び出すことによって、容量を削減することができます、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドかを設定して、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティに明示的にします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-163">The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="b83ea-164">メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-164">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-165">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-165">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-166">次の例での既定のコンス トラクター、<xref:System.Collections.Generic.List%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-166">The following example demonstrates the default constructor of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="b83ea-167">表示することによって示されているように、既定のコンス トラクターが既定の容量でリストを作成、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-167">The default constructor creates a list with the default capacity, as demonstrated by displaying the <xref:System.Collections.Generic.List%601.Capacity%2A> property.</span></span>  
  
 <span data-ttu-id="b83ea-168">例では、追加するには、挿入、およびこれらのメソッドが使用されるように、容量がどのように変化するかを示す項目を削除します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-168">The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="b83ea-169">新しいリストに要素がコピーされたコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-169">The collection whose elements are copied to the new list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-170">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-170">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-171">要素の上にコピー、<xref:System.Collections.Generic.List%601>コレクションの列挙子によって読み取られる同じ順序で。</span><span class="sxs-lookup"><span data-stu-id="b83ea-171">The elements are copied onto the <xref:System.Collections.Generic.List%601> in the same order they are read by the enumerator of the collection.</span></span>  
  
 <span data-ttu-id="b83ea-172">このコンス トラクターは、O (*n*) 操作では、ここで*n*内の要素の数は、`collection`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-172">This constructor is an O(*n*) operation, where *n* is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-173">次の例で、<xref:System.Collections.Generic.List%601.%23ctor%2A>コンス トラクターとのさまざまなメソッド、<xref:System.Collections.Generic.List%601>範囲に作用するクラス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-173">The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%2A> constructor and various methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="b83ea-174">文字列の配列が作成され、配列の要素を含む一覧を設定するコンス トラクターに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-174">An array of strings is created and passed to the constructor, populating the list with the elements of the array.</span></span> <span data-ttu-id="b83ea-175"><xref:System.Collections.Generic.List%601.Capacity%2A>プロパティに表示されますの初期量であることが、入力要素を保持するために必要な事項を表示します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-175">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-176">
            <paramref name="collection" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-176">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="b83ea-177">新しいリストに格納できる要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-177">The number of elements that the new list can initially store.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-178">空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-178">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the specified initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-179">容量、<xref:System.Collections.Generic.List%601>は要素の数を<xref:System.Collections.Generic.List%601>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-179">The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold.</span></span> <span data-ttu-id="b83ea-180">要素が追加されるにつれて、<xref:System.Collections.Generic.List%601>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-180">As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="b83ea-181">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-181">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-182">呼び出すことによって、容量を削減することができます、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドかを設定して、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティに明示的にします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-182">The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="b83ea-183">メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-183">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-184">このコンス トラクターは、O (*n*) 操作では、ここで*n*は`capacity`します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-184">This constructor is an O(*n*) operation, where *n* is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-185">次の例で、<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-185">The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="b83ea-186">A<xref:System.Collections.Generic.List%601>容量が 4 の文字列の作成、正確に 4 になるリストの最終的なサイズがわかっているためです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-186">A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</span></span> <span data-ttu-id="b83ea-187">4 つの文字列のリストが表示され、使用して、読み取り専用コピーを作成、<xref:System.Collections.Generic.List%601.AsReadOnly%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-187">The list is populated with four strings, and a read-only copy is created by using the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.</span></span>  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-188">
            <paramref name="capacity" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-188">
              <paramref name="capacity" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(T item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-189">
            <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-189">The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-190">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-190">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-191">
            <see cref="T:System.Collections.Generic.List`1" /> の末尾にオブジェクトを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-191">Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-192"><xref:System.Collections.Generic.List%601> 受け付ける`null`と参照の有効な値の型により、重複する要素。</span><span class="sxs-lookup"><span data-stu-id="b83ea-192"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="b83ea-193">場合<xref:System.Collections.Generic.List%601.Count%2A>既に同じ<xref:System.Collections.Generic.List%601.Capacity%2A>、容量、<xref:System.Collections.Generic.List%601>内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-193">If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="b83ea-194">場合<xref:System.Collections.Generic.List%601.Count%2A>はより小さい<xref:System.Collections.Generic.List%601.Capacity%2A>、このメソッドは、o (1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-194">If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation.</span></span> <span data-ttu-id="b83ea-195">容量は、新しい要素を格納するためにする必要があります、このメソッドが O (*n*) 操作、場所*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-195">If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-196">次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-196">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="b83ea-197">次の例は、いくつかのプロパティとメソッドを示しています、<xref:System.Collections.Generic.List%601>ジェネリック クラスなど、<xref:System.Collections.Generic.List%601.Add%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-197">The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class, including the <xref:System.Collections.Generic.List%601.Add%2A> method.</span></span> <span data-ttu-id="b83ea-198">既定のコンス トラクターを使用して、容量が 0 の文字列のリストを作成できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-198">The default constructor is used to create a list of strings with a capacity of 0.</span></span> <span data-ttu-id="b83ea-199"><xref:System.Collections.Generic.List%601.Capacity%2A>プロパティを表示し、<xref:System.Collections.Generic.List%601.Add%2A>メソッドを使用していくつかの項目に追加します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-199">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed, and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items.</span></span> <span data-ttu-id="b83ea-200">項目が表示されている場合、および<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティが表示されますと組み合わせて再度、<xref:System.Collections.Generic.List%601.Count%2A>プロパティは、必要に応じて容量が増加したことを表示します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-200">The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="b83ea-201">検索、挿入、および、リストから要素を削除するその他のプロパティとメソッドを使用し、最後に一覧を消去します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-201">Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="b83ea-202">
            <see cref="T:System.Collections.Generic.List`1" /> の末尾に要素が追加されるコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-202">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-203">コレクション自体を <see langword="null" /> にすることはできませんが、型 <c>T</c> が参照型の場合、コレクションに格納する要素は <see langword="null" /> であってもかまいません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-203">The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <c>T</c> is a reference type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-204">指定したコレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-204">Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-205">コレクション内の要素の順序が内でも維持される、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-205">The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-206">場合、新しい<xref:System.Collections.Generic.List%601.Count%2A>(現在<xref:System.Collections.Generic.List%601.Count%2A>さらに、コレクションのサイズ) はより大きくなる<xref:System.Collections.Generic.List%601.Capacity%2A>の容量、<xref:System.Collections.Generic.List%601>新しい要素では、それに合わせて内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-206">If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</span></span>  
  
 <span data-ttu-id="b83ea-207">場合、<xref:System.Collections.Generic.List%601>を増やすことがなく、新しい要素に対応できる、 <xref:System.Collections.Generic.List%601.Capacity%2A>、このメソッドは、O (*n*) 操作、場所*n*を追加する要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-207">If the <xref:System.Collections.Generic.List%601> can accommodate the new elements without increasing the <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(*n*) operation, where *n* is the number of elements to be added.</span></span> <span data-ttu-id="b83ea-208">容量は、新しい要素を格納するためにする必要があります、このメソッドが O (*n* + *m*) 操作では、ここで*n*要素の数です追加して*m*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-208">If the capacity needs to be increased to accommodate the new elements, this method becomes an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-209">次の例で、<xref:System.Collections.Generic.List%601.AddRange%2A>メソッドと他の方法でさまざまな、<xref:System.Collections.Generic.List%601>範囲に作用するクラス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-209">The following example demonstrates the <xref:System.Collections.Generic.List%601.AddRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="b83ea-210">文字列の配列が作成され、配列の要素を含む一覧を設定するコンス トラクターに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-210">An array of strings is created and passed to the constructor, populating the list with the elements of the array.</span></span> <span data-ttu-id="b83ea-211"><xref:System.Collections.Generic.List%601.AddRange%2A>メソッドは、その引数としてリストを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-211">The <xref:System.Collections.Generic.List%601.AddRange%2A> method is called, with the list as its argument.</span></span> <span data-ttu-id="b83ea-212">リストの現在の要素がすべての要素を複製するリストの末尾に追加されたことになります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-212">The result is that the current elements of the list are added to the end of the list, duplicating all the elements.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-213">
            <paramref name="collection" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-213">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnly">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!T&gt; AsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnly () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ AsReadOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-214">現在のコレクションの読み取り専用の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> ラッパーを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-214">Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-215">現在の <see cref="T:System.Collections.Generic.List`1" /> をラップする読み取り専用のラッパーとして動作するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-215">An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-216">変更を加えるを防ぐために、<xref:System.Collections.Generic.List%601>オブジェクト、このラッパーによってのみ公開されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-216">To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper.</span></span> <span data-ttu-id="b83ea-217">A<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>オブジェクトがコレクションを変更するメソッドを公開していません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-217">A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection.</span></span> <span data-ttu-id="b83ea-218">ただし、基になる変更が加えられた場合<xref:System.Collections.Generic.List%601>オブジェクト、読み取り専用コレクションには、これらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-218">However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="b83ea-219">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-219">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-220">次の例で、<xref:System.Collections.Generic.List%601.AsReadOnly%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-220">The following example demonstrates the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.</span></span> <span data-ttu-id="b83ea-221">A<xref:System.Collections.Generic.List%601>容量が 4 の文字列の作成、正確に 4 になるリストの最終的なサイズがわかっているためです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-221">A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</span></span> <span data-ttu-id="b83ea-222">4 つの文字列のリストが表示されます、<xref:System.Collections.Generic.List%601.AsReadOnly%2A>メソッドを使用して、読み取り専用の取得<xref:System.Collections.Generic.IList%601>元のリストをラップするジェネリック インターフェイスの実装です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-222">The list is populated with four strings, and the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method is used to get a read-only <xref:System.Collections.Generic.IList%601> generic interface implementation that wraps the original list.</span></span>  
  
 <span data-ttu-id="b83ea-223">元のリストの要素に設定されている「コエロフィシス」を使用して、<xref:System.Collections.Generic.List%601.Item%2A>を元のリスト用のラッパーだけであることを示すためにプロパティ (c# のインデクサー) および読み取り専用のリストの内容が再度に表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-223">An element of the original list is set to "Coelophysis" using the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.</span></span>  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-224">バイナリ サーチ アルゴリズムを使用して、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の特定の要素またはその一部を検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-224">Uses a binary search algorithm to locate a specific element in the sorted <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-225">検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-225">The object to locate.</span>
          </span>
          <span data-ttu-id="b83ea-226">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-226">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-227">既定の比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-227">Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the default comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-228">
            <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-228">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-229">このメソッドは、既定の比較子を使用して<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>型`T`リストの要素の順序を決定します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-229">This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for type `T` to determine the order of list elements.</span></span> <span data-ttu-id="b83ea-230"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>プロパティのチェックを入力するかどうか`T`を実装する、<xref:System.IComparable%601>ジェネリック インターフェイスと使用可能な場合は、その実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-230">The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="b83ea-231">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`を実装する、<xref:System.IComparable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-231">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="b83ea-232">場合型`T`はいずれのインターフェイスを実装しません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-232">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="b83ea-233"><xref:System.Collections.Generic.List%601> ; 比較子実装に従って並べ替えられている必要があります既にそれ以外の場合、結果が正しくないです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-233">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="b83ea-234">比較する`null`任意の参照を持つ型が許可されを使用する場合は、例外を生成しません、<xref:System.IComparable%601>ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-234">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="b83ea-235">ソート時`null`未満であるその他のオブジェクトと見なされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-235">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="b83ea-236">場合、<xref:System.Collections.Generic.List%601>だけが含まれて、同じ値を持つ複数の要素には返します、出現回数、必ずしも 1 つ目のいずれかを返す、出現してのいずれかの可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-236">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="b83ea-237">場合、 <xref:System.Collections.Generic.List%601> 、指定した値を含まない、メソッドは、負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-237">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="b83ea-238">この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-238">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="b83ea-239">値を挿入するときに、 <xref:System.Collections.Generic.List%601>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-239">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="b83ea-240">このメソッドは、O (ログ*n*) 操作では、ここで*n*範囲内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-240">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-241">次の例で、<xref:System.Collections.Generic.List%601.Sort>メソッドのオーバー ロードおよび<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-241">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload.</span></span> <span data-ttu-id="b83ea-242">A<xref:System.Collections.Generic.List%601>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-242">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="b83ea-243">一覧が表示され、並べ替えが、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-243">The list is displayed, sorted, and displayed again.</span></span>  
  
 <span data-ttu-id="b83ea-244"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>メソッドのオーバー ロードが、一覧に含まれていない 2 つの文字列の検索に使用し、および<xref:System.Collections.Generic.List%601.Insert%2A>に挿入するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-244">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them.</span></span> <span data-ttu-id="b83ea-245">戻り値、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>文字列が、一覧にはないために、メソッドは、各ケースで負の値。</span><span class="sxs-lookup"><span data-stu-id="b83ea-245">The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method is negative in each case, because the strings are not in the list.</span></span> <span data-ttu-id="b83ea-246">ビットごとの補数を行う (、~ 演算子で c# および Visual C、 `Xor` Visual Basic では-1) はこの場所では、検索文字列より大きいと、挿入リストの最初の要素のインデックスのこの負の数値の生成には、並べ替えが保持されます順序です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-246">Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</span></span> <span data-ttu-id="b83ea-247">2 番目の検索文字列は、カーソル位置がリストの末尾であるため、一覧の任意の要素を超えています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-247">The second search string is larger than any element in the list, so the insertion position is at the end of the list.</span></span>  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b83ea-248">既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 <paramref name="T" /> の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-248">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-249">検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-249">The object to locate.</span>
          </span>
          <span data-ttu-id="b83ea-250">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-250">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="b83ea-251">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-251">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</span>
          </span>
          <span data-ttu-id="b83ea-252">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-252">-or-</span>
          </span>
          <span data-ttu-id="b83ea-253">既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-253">
              <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-254">指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-254">Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-255">
            <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-255">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-256">比較演算子は、要素を比較する方法をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-256">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="b83ea-257">たとえば、使用することができます、<xref:System.Collections.CaseInsensitiveComparer>大文字と小文字の文字列の検索を実行する比較演算子とインスタンス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-257">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="b83ea-258">場合`comparer`が提供されるの要素、<xref:System.Collections.Generic.List%601>指定して、指定した値と比較<xref:System.Collections.Generic.IComparer%601>実装します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-258">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="b83ea-259">場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`を実装、<xref:System.IComparable%601>ジェネリック インターフェイスし、使用可能な場合は、その実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-259">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="b83ea-260">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`を実装する、<xref:System.IComparable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-260">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="b83ea-261">場合型`T`はいずれのインターフェイスを実装しません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-261">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="b83ea-262"><xref:System.Collections.Generic.List%601> ; 比較子実装に従って並べ替えられている必要があります既にそれ以外の場合、結果が正しくないです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-262">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="b83ea-263">比較する`null`任意の参照を持つ型が許可されを使用する場合は、例外を生成しません、<xref:System.IComparable%601>ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-263">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="b83ea-264">ソート時`null`未満であるその他のオブジェクトと見なされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-264">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="b83ea-265">場合、<xref:System.Collections.Generic.List%601>だけが含まれて、同じ値を持つ複数の要素には返します、出現回数、必ずしも 1 つ目のいずれかを返す、出現してのいずれかの可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-265">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="b83ea-266">場合、 <xref:System.Collections.Generic.List%601> 、指定した値を含まない、メソッドは、負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-266">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="b83ea-267">この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-267">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="b83ea-268">値を挿入するときに、 <xref:System.Collections.Generic.List%601>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-268">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="b83ea-269">このメソッドは、O (ログ*n*) 操作では、ここで*n*範囲内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-269">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-270">次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードおよび<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-270">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="b83ea-271">実装する DinoCompare を名前付き文字列の代替の比較演算子が定義されています、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual C で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-271">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="b83ea-272">比較子が次のように動作: 比較対照値があるテスト最初に、 `null`、null 参照が null でないより小さいとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-272">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="b83ea-273">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-273">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="b83ea-274">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-274">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="b83ea-275">A<xref:System.Collections.Generic.List%601>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-275">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="b83ea-276">一覧が表示されます、代替の比較子を使用して並べ替えられ、表示されているもう一度です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-276">The list is displayed, sorted using the alternate comparer, and displayed again.</span></span>  
  
 <span data-ttu-id="b83ea-277"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードがいくつかの文字列は、一覧で、使用しない、代替の比較子を検索に使用されるからです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-277">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</span></span> <span data-ttu-id="b83ea-278"><xref:System.Collections.Generic.List%601.Insert%2A>メソッドを使用して、文字列を挿入します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-278">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings.</span></span> <span data-ttu-id="b83ea-279">これら 2 つの方法がという名前の関数内にある`SearchAndInsert`、ビットごとの補数をコードと共に (、~ c# および Visual C で演算子`Xor`Visual Basic では-1) によって返される負の数値の<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>のインデックスとして使用し、新しい文字列を挿入しています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-279">These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b83ea-280">
            <paramref name="comparer" /> が <see langword="null" /> です。また、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 <paramref name="T" /> の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-280">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(int32 index, int32 count, !T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(int index, int count, T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-281">検索範囲の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-281">The zero-based starting index of the range to search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b83ea-282">検索する範囲の長さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-282">The length of the range to search.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="b83ea-283">検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-283">The object to locate.</span>
          </span>
          <span data-ttu-id="b83ea-284">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-284">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="b83ea-285">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-285">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-286">指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> の 1 つの要素の範囲を検索し、その要素の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-286">Searches a range of elements in the sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-287">
            <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-287">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-288">比較演算子は、要素を比較する方法をカスタマイズします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-288">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="b83ea-289">たとえば、使用することができます、<xref:System.Collections.CaseInsensitiveComparer>大文字と小文字の文字列の検索を実行する比較演算子とインスタンス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-289">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="b83ea-290">場合`comparer`が提供されるの要素、<xref:System.Collections.Generic.List%601>指定して、指定した値と比較<xref:System.Collections.Generic.IComparer%601>実装します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-290">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="b83ea-291">場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`を実装、<xref:System.IComparable%601>ジェネリック インターフェイスし、使用可能な場合は、その実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-291">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="b83ea-292">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`を実装する、<xref:System.IComparable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-292">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="b83ea-293">場合型`T`はいずれのインターフェイスを実装しません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-293">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="b83ea-294"><xref:System.Collections.Generic.List%601> ; 比較子実装に従って並べ替えられている必要があります既にそれ以外の場合、結果が正しくないです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-294">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="b83ea-295">比較する`null`任意の参照を持つ型が許可されを使用する場合は、例外を生成しません、<xref:System.IComparable%601>ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-295">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="b83ea-296">ソート時`null`未満であるその他のオブジェクトと見なされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-296">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="b83ea-297">場合、<xref:System.Collections.Generic.List%601>だけが含まれて、同じ値を持つ複数の要素には返します、出現回数、必ずしも 1 つ目のいずれかを返す、出現してのいずれかの可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-297">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="b83ea-298">場合、 <xref:System.Collections.Generic.List%601> 、指定した値を含まない、メソッドは、負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-298">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="b83ea-299">この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-299">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="b83ea-300">値を挿入するときに、 <xref:System.Collections.Generic.List%601>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-300">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="b83ea-301">このメソッドは、O (ログ*n*) 操作では、ここで*n*範囲内の要素の数です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-301">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-302">次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードおよび<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-302">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="b83ea-303">実装する DinoCompare を名前付き文字列の代替の比較演算子が定義されています、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual C で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-303">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="b83ea-304">比較子が次のように動作: 比較対照値があるテスト最初に、 `null`、null 参照が null でないより小さいとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-304">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="b83ea-305">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-305">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="b83ea-306">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-306">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="b83ea-307">A<xref:System.Collections.Generic.List%601>の文字列が作成され、5 つ herbivorous 恐竜やから恐竜の 3 つの名前に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-307">A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</span></span> <span data-ttu-id="b83ea-308">2 つのグループの各名前はない任意の特定の並べ替え順序でできます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-308">Within each of the two groups, the names are not in any particular sort order.</span></span> <span data-ttu-id="b83ea-309">一覧が表示されます、恐竜の範囲は、代替の比較子を使用して並べ替えられておよびが再度表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-309">The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</span></span>  
  
 <span data-ttu-id="b83ea-310"><xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> "Brachiosaurus"恐竜の範囲のみを検索するメソッドのオーバー ロードが使用されるからです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-310">The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for "Brachiosaurus".</span></span> <span data-ttu-id="b83ea-311">文字列が見つからないとビットごとの補数 (、~ c# および Visual C で演算子`Xor`Visual Basic では-1) によって返される負の数の<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドは、新しい文字列を挿入するためのインデックスとして使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-311">The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-312">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-312">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-313">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-313">-or-</span>
          </span>
          <span data-ttu-id="b83ea-314">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-314">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-315">
            <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の有効な範囲を示していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-315">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b83ea-316">
            <paramref name="comparer" /> が <see langword="null" /> です。また、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 <paramref name="T" /> の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-316">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-317">内部データ構造体がサイズ変更せずに格納できる要素の合計数を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-317">Gets or sets the total number of elements the internal data structure can hold without resizing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b83ea-318">サイズ変更が必要となるまでに <see cref="T:System.Collections.Generic.List`1" /> に格納できる要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-318">The number of elements that the <see cref="T:System.Collections.Generic.List`1" /> can contain before resizing is required.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-319"><xref:System.Collections.Generic.List%601.Capacity%2A> 要素の数を<xref:System.Collections.Generic.List%601>一方、サイズ変更が必要ですが、前に格納できる<xref:System.Collections.Generic.List%601.Count%2A>が実際には、要素の数、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-319"><xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-320"><xref:System.Collections.Generic.List%601.Capacity%2A> 常により大きいまたは等しい<xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-320"><xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>.</span></span> <span data-ttu-id="b83ea-321">場合<xref:System.Collections.Generic.List%601.Count%2A>を超える<xref:System.Collections.Generic.List%601.Capacity%2A>前の要素をコピーし、新しい要素を追加する前に、内部の配列を自動的に再割り当てして要素を追加するには、中に容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-321">If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="b83ea-322">容量は数よりもずっと大きなとによって使用されるメモリを縮小したい場合、 <xref:System.Collections.Generic.List%601>、呼び出すことによって、容量を減らすことができます、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドかを設定して、<xref:System.Collections.Generic.List%601.Capacity%2A>未満の値を明示的にプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-322">If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value.</span></span> <span data-ttu-id="b83ea-323">ときに、値の<xref:System.Collections.Generic.List%601.Capacity%2A>が設定されている、明示的に指定した容量、それに合わせて内部の配列が再割り当てもとすべての要素がコピーされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-323">When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.</span></span>  
  
 <span data-ttu-id="b83ea-324">このプロパティの値を取得する場合は、o (1) 操作です。O は、プロパティの設定 (*n*) 操作、場所*n*新しい容量します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-324">Retrieving the value of this property is an O(1) operation; setting the property is an O(*n*) operation, where *n* is the new capacity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-325">次の例では、容量およびの数を確認する方法、<xref:System.Collections.Generic.List%601>を単純なビジネス オブジェクトを含むし、使用方法を示します、<xref:System.Collections.Generic.List%601.TrimExcess%2A>余分な容量を削除する方法です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-325">The following example demonstrates how to check the capacity and count of a <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="b83ea-326">次の例は、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティ リストのいくつかの時点です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-326">The following example shows the <xref:System.Collections.Generic.List%601.Capacity%2A> property at several points in the life of a list.</span></span> <span data-ttu-id="b83ea-327">既定のコンス トラクターは、容量が 0 の文字列のリストを作成するために使用され、<xref:System.Collections.Generic.List%601.Capacity%2A>これを実行するプロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-327">The default constructor is used to create a list of strings with a capacity of 0, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed to demonstrate this.</span></span> <span data-ttu-id="b83ea-328">後に、<xref:System.Collections.Generic.List%601.Add%2A>をいくつかの項目を追加するメソッドを使用した、項目が一覧表示、し、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティが表示されますと組み合わせて再度、<xref:System.Collections.Generic.List%601.Count%2A>プロパティで、必要に応じて容量が増加したことを示します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-328">After the <xref:System.Collections.Generic.List%601.Add%2A> method has been used to add several items, the items are listed, and then the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="b83ea-329"><xref:System.Collections.Generic.List%601.Capacity%2A>後にもう一度表示されるプロパティ、<xref:System.Collections.Generic.List%601.TrimExcess%2A>の数と一致する容量を削減するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-329">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count.</span></span> <span data-ttu-id="b83ea-330">最後に、<xref:System.Collections.Generic.List%601.Clear%2A>メソッドを使用してリストから、すべての項目を削除して、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが再度表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-330">Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed again.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-331">
            <see cref="P:System.Collections.Generic.List`1.Capacity" /> は <see cref="P:System.Collections.Generic.List`1.Count" /> より小さい値に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-331">
              <see cref="P:System.Collections.Generic.List`1.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="b83ea-332">システムで使用可能なメモリが不足しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-332">There is not enough memory available on the system.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-333">
            <see cref="T:System.Collections.Generic.List\`1" /> からすべての要素を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-333">Removes all elements from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-334"><xref:System.Collections.Generic.List%601.Count%2A> 0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-334"><xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="b83ea-335"><xref:System.Collections.Generic.List%601.Capacity%2A> 変更されません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-335"><xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="b83ea-336">容量をリセットする、<xref:System.Collections.Generic.List%601>を呼び出し、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドまたはセット、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティを直接です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-336">To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly.</span></span> <span data-ttu-id="b83ea-337">メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-337">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span> <span data-ttu-id="b83ea-338">空のトリミング<xref:System.Collections.Generic.List%601>のキャパシティを設定、<xref:System.Collections.Generic.List%601>を既定の容量。</span><span class="sxs-lookup"><span data-stu-id="b83ea-338">Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="b83ea-339">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-339">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-340">次の例で、<xref:System.Collections.Generic.List%601.Clear%2A>メソッドさまざまな他のプロパティおよびメソッドの<xref:System.Collections.Generic.List%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-340">The following example demonstrates the <xref:System.Collections.Generic.List%601.Clear%2A> method and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="b83ea-341"><xref:System.Collections.Generic.List%601.Clear%2A>メソッドに使用して、プログラムの終了をリストから、すべての項目を削除して、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-341">The <xref:System.Collections.Generic.List%601.Clear%2A> method is used at the end of the program, to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are then displayed.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.TrimExcess" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-342">
            <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-342">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-343">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-343">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-344">ある要素が <see cref="T:System.Collections.Generic.List`1" /> 内に存在するかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-344">Determines whether an element is in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-345">
            <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-345">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.List`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-346">このメソッドは、のオブジェクトの実装で定義されている既定の等値比較子を使用して、等しいかどうかを決定、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>メソッド`T`(リスト内の値の型)。</span><span class="sxs-lookup"><span data-stu-id="b83ea-346">This method determines equality by using the default equality comparer, as defined by the object's implementation of the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method for `T` (the type of values in the list).</span></span>  
  
 <span data-ttu-id="b83ea-347">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-347">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-348">次の例で、<xref:System.Collections.Generic.List%601.Contains%2A>と<xref:System.Collections.Generic.List%601.Exists%2A>のメソッド、<xref:System.Collections.Generic.List%601>を実装する単純なビジネス オブジェクトを格納している<xref:System.IEquatable%601.Equals%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-348">The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="b83ea-349">次の例は、型の複合オブジェクトの一覧を含む`Cube`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-349">The following example contains a list of complex objects of type `Cube`.</span></span> <span data-ttu-id="b83ea-350">`Cube`クラスが実装する、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>メソッド 2 つのキューブ、ディメンションが同じ場合、等しいと見なされるようにします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-350">The `Cube` class implements the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method so that two cubes are considered equal if their dimensions are the same.</span></span> <span data-ttu-id="b83ea-351">この例では、<xref:System.Collections.Generic.List%601.Contains%2A>メソッドを返します。`true`でキューブが指定した寸法がコレクション内に既にあるためです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-351">In this example, the <xref:System.Collections.Generic.List%601.Contains%2A> method returns `true`, because a cube that has the specified dimensions is already in the collection.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.contains/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.contains/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Converter&lt;T,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!!TOutput&gt; ConvertAll&lt;TOutput&gt;(class System.Converter`2&lt;!T, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertAll(Of TOutput) (converter As Converter(Of T, TOutput)) As List(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA; System::Collections::Generic::List&lt;TOutput&gt; ^ ConvertAll(Converter&lt;T, TOutput&gt; ^ converter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="converter" Type="System.Converter&lt;T,TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="b83ea-352">変換後の配列要素の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-352">The type of the elements of the target array.</span>
          </span>
        </typeparam>
        <param name="converter">
          <span data-ttu-id="b83ea-353">各要素の型を変換するための <see cref="T:System.Converter`2" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-353">A <see cref="T:System.Converter`2" /> delegate that converts each element from one type to another type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-354">現在の <see cref="T:System.Collections.Generic.List`1" /> の要素を別の型に変換し、変換された要素が格納されたリストを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-354">Converts the elements in the current <see cref="T:System.Collections.Generic.List`1" /> to another type, and returns a list containing the converted elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-355">現在の <see cref="T:System.Collections.Generic.List`1" /> の要素の型を変換した後の <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-355">A <see cref="T:System.Collections.Generic.List`1" /> of the target type containing the converted elements from the current <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-356"><xref:System.Converter%602>オブジェクトを対象の型に変換するメソッドにデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-356">The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.</span></span>  <span data-ttu-id="b83ea-357">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Converter%602>デリゲート、および変換された要素は、新しい保存<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-357">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-358">現在<xref:System.Collections.Generic.List%601>は変更されません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-358">The current <xref:System.Collections.Generic.List%601> remains unchanged.</span></span>  
  
 <span data-ttu-id="b83ea-359">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-359">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-360">次の例は、という名前のメソッドを定義`PointFToPoint`変換する、<xref:System.Drawing.PointF>に構造体、<xref:System.Drawing.Point>構造体。</span><span class="sxs-lookup"><span data-stu-id="b83ea-360">The following example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure.</span></span> <span data-ttu-id="b83ea-361">作成し、<xref:System.Collections.Generic.List%601>の<xref:System.Drawing.PointF>構造と、作成、`Converter\<PointF, Point>`委任 (`Converter(Of PointF, Point)` Visual Basic で) を表す、`PointFToPoint`メソッドにデリゲートを渡します、<xref:System.Collections.Generic.List%601.ConvertAll%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-361">The example then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Drawing.PointF> structures, creates a `Converter\<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Collections.Generic.List%601.ConvertAll%2A> method.</span></span> <span data-ttu-id="b83ea-362"><xref:System.Collections.Generic.List%601.ConvertAll%2A>メソッドは成功する入力の一覧の各要素、`PointFToPoint`メソッドの新しいリストに変換された要素を格納および<xref:System.Drawing.Point>構造体。</span><span class="sxs-lookup"><span data-stu-id="b83ea-362">The <xref:System.Collections.Generic.List%601.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="b83ea-363">両方の一覧が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-363">Both lists are displayed.</span></span>  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-364">
            <paramref name="converter" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-364">
              <paramref name="converter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Converter`2" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-365">
            <see cref="T:System.Collections.Generic.List`1" /> またはその一部を配列にコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-365">Copies the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it to an array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="b83ea-366">
            <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-366">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-367">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-367">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-368">
            <see cref="T:System.Collections.Generic.List`1" /> 全体を互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-368">Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the beginning of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-369">このメソッドを使用して<xref:System.Array.Copy%2A?displayProperty=nameWithType>要素のコピー。</span><span class="sxs-lookup"><span data-stu-id="b83ea-369">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="b83ea-370">要素のコピー先は、<xref:System.Array>を列挙子が反復処理する順序と同じ順序で、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-370">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-371">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-371">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-372">次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.CopyTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-372">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="b83ea-373">A<xref:System.Collections.Generic.List%601>の文字列が作成され、5 つの文字列に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-373">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="b83ea-374">15 の要素の空の文字列の配列を作成すると、および<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>メソッドのオーバー ロードは、一覧のすべての要素を配列の最初の要素を開始位置として、配列にコピーするために使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-374">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="b83ea-375"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>のすべての要素の配列インデックス 6 で開始位置として、配列にリスト (したままインデックス 5 空) をコピーするメソッドのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-375">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="b83ea-376">最後に、<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>インデックス 2 で始まるリストから 3 つの要素をコピーするには、配列の配列にするインデックスを 12 (したままインデックス 11 空の) メソッドのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-376">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="b83ea-377">配列の内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-377">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-378">
            <paramref name="array" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-378">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-379">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="array" /> に含めることができる要素数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-379">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the number of elements that the destination <paramref name="array" /> can contain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="b83ea-380">
            <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-380">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-381">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-381">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="b83ea-382">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-382">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-383">
            <see cref="T:System.Collections.Generic.List`1" /> 全体を、互換性のある 1 次元配列の、指定したインデックスから始まる位置にコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-383">Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-384">このメソッドを使用して<xref:System.Array.Copy%2A?displayProperty=nameWithType>要素のコピー。</span><span class="sxs-lookup"><span data-stu-id="b83ea-384">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="b83ea-385">要素のコピー先は、<xref:System.Array>を列挙子が反復処理する順序と同じ順序で、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-385">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-386">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-386">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-387">次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.CopyTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-387">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="b83ea-388">A<xref:System.Collections.Generic.List%601>の文字列が作成され、5 つの文字列に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-388">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="b83ea-389">15 の要素の空の文字列の配列を作成すると、および<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>メソッドのオーバー ロードは、一覧のすべての要素を配列の最初の要素を開始位置として、配列にコピーするために使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-389">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="b83ea-390"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>のすべての要素の配列インデックス 6 で開始位置として、配列にリスト (したままインデックス 5 空) をコピーするメソッドのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-390">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="b83ea-391">最後に、<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>インデックス 2 で始まるリストから 3 つの要素をコピーするには、配列の配列にするインデックスを 12 (したままインデックス 11 空の) メソッドのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-391">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="b83ea-392">配列の内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-392">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-393">
            <paramref name="array" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-393">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-394">
            <paramref name="arrayIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-394">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-395">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-395">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 index, !T[] array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (index As Integer, array As T(), arrayIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int index, cli::array &lt;T&gt; ^ array, int arrayIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-396">コピーを開始するコピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、0 から始まるインデックス番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-396">The zero-based index in the source <see cref="T:System.Collections.Generic.List`1" /> at which copying begins.</span>
          </span>
        </param>
        <param name="array">
          <span data-ttu-id="b83ea-397">
            <see cref="T:System.Collections.Generic.List`1" /> の要素のコピー先となる 1 次元の <see cref="T:System.Array" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-397">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-398">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-398">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="b83ea-399">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-399">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b83ea-400">コピーする要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-400">The number of elements to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-401">
            <see cref="T:System.Collections.Generic.List`1" /> のうちある範囲の要素を、互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-401">Copies a range of elements from the <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-402">このメソッドを使用して<xref:System.Array.Copy%2A?displayProperty=nameWithType>要素のコピー。</span><span class="sxs-lookup"><span data-stu-id="b83ea-402">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="b83ea-403">要素のコピー先は、<xref:System.Array>を列挙子が反復処理する順序と同じ順序で、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-403">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-404">このメソッドは、O (*n*) 操作では、ここで*n*は`count`します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-404">This method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-405">次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.CopyTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-405">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="b83ea-406">A<xref:System.Collections.Generic.List%601>の文字列が作成され、5 つの文字列に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-406">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="b83ea-407">15 の要素の空の文字列の配列を作成すると、および<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>メソッドのオーバー ロードは、一覧のすべての要素を配列の最初の要素を開始位置として、配列にコピーするために使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-407">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="b83ea-408"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>のすべての要素の配列インデックス 6 で開始位置として、配列にリスト (したままインデックス 5 空) をコピーするメソッドのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-408">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="b83ea-409">最後に、<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>インデックス 2 で始まるリストから 3 つの要素をコピーするには、配列の配列にするインデックスを 12 (したままインデックス 11 空の) メソッドのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-409">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="b83ea-410">配列の内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-410">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-411">
            <paramref name="array" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-411">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-412">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-412">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-413">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-413">-or-</span>
          </span>
          <span data-ttu-id="b83ea-414">
            <paramref name="arrayIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-414">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-415">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-415">-or-</span>
          </span>
          <span data-ttu-id="b83ea-416">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-416">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-417">
            <paramref name="index" /> がコピー元の <see cref="T:System.Collections.Generic.List`1" /> の <see cref="P:System.Collections.Generic.List`1.Count" /> 以上です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-417">
              <paramref name="index" /> is equal to or greater than the <see cref="P:System.Collections.Generic.List`1.Count" /> of the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-418">-または-</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-418">-or-</span>
          </span>
          <span data-ttu-id="b83ea-419">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の <paramref name="index" /> から最後までの要素数が、コピー先の <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能な領域を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-419">The number of elements from <paramref name="index" /> to the end of the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-420">
            <see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-420">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b83ea-421">
            <see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-421">The number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-422"><xref:System.Collections.Generic.List%601.Capacity%2A> 要素の数を<xref:System.Collections.Generic.List%601>のサイズを変更することが必要に格納できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-422"><xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required.</span></span> <span data-ttu-id="b83ea-423"><xref:System.Collections.Generic.List%601.Count%2A> 実際には、要素の数、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-423"><xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-424"><xref:System.Collections.Generic.List%601.Capacity%2A> 常により大きいまたは等しい<xref:System.Collections.Generic.List%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-424"><xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>.</span></span> <span data-ttu-id="b83ea-425">場合<xref:System.Collections.Generic.List%601.Count%2A>を超える<xref:System.Collections.Generic.List%601.Capacity%2A>前の要素をコピーし、新しい要素を追加する前に、内部の配列を自動的に再割り当てして要素を追加するには、中に容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-425">If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="b83ea-426">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-426">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-427">次の例では、容量およびの数を確認する方法、<xref:System.Collections.Generic.List%601>を単純なビジネス オブジェクトを含むし、使用方法を示します、<xref:System.Collections.Generic.List%601.TrimExcess%2A>余分な容量を削除する方法です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-427">The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="b83ea-428">次の例の値を示しています、<xref:System.Collections.Generic.List%601.Count%2A>リストの有効期間内のさまざまな時点でのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-428">The following example shows the value of the <xref:System.Collections.Generic.List%601.Count%2A> property at various points in the life of a list.</span></span> <span data-ttu-id="b83ea-429">その要素は次の表示、および一覧が作成され、設定した後、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-429">After the list has been created and populated and its elements displayed, the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="b83ea-430">後にもう一度これらのプロパティが表示されます、<xref:System.Collections.Generic.List%601.TrimExcess%2A>されている方式と呼ばれる、および一覧の内容の後にもう一度がクリアされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-430">These properties are displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method has been called, and again after the contents of the list are cleared.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Exists(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="b83ea-431">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-431">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-432">
            <see cref="T:System.Collections.Generic.List`1" /> に、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-432">Determines whether the <see cref="T:System.Collections.Generic.List`1" /> contains elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-433">指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、<see cref="T:System.Collections.Generic.List`1" /> に含まれる場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-433">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.List`1" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-434"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-434">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-435">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>一致が見つかったときに、デリゲートと処理が停止します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-435">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when a match is found.</span></span>  
  
 <span data-ttu-id="b83ea-436">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-436">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-437">次の例で、<xref:System.Collections.Generic.List%601.Contains%2A>と<xref:System.Collections.Generic.List%601.Exists%2A>のメソッド、<xref:System.Collections.Generic.List%601>を実装する単純なビジネス オブジェクトを格納している<xref:System.IEquatable%601.Equals%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-437">The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="b83ea-438">次の例で、<xref:System.Collections.Generic.List%601.Exists%2A>メソッドを使用して、他のいくつかの方法、<xref:System.Predicate%601>汎用デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-438">The following example demonstrates the <xref:System.Collections.Generic.List%601.Exists%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="b83ea-439">A<xref:System.Collections.Generic.List%601>文字列の作成、"saurus"で終わる (位置 1 から 5 など) のうちの 2 台の 8 恐竜の名前を含むです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-439">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="b83ea-440">という名前の検索述語メソッドも定義`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-440">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="b83ea-441"><xref:System.Collections.Generic.List%601.Find%2A>、 <xref:System.Collections.Generic.List%601.FindLast%2A>、および<xref:System.Collections.Generic.List%601.FindAll%2A>メソッドを使用して、検索述語メソッドを使用して、一覧を検索し、 <xref:System.Collections.Generic.List%601.RemoveAll%2A> "saurus"で終わるすべてのエントリを削除するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-441">The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method, and then the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with "saurus".</span></span>  
  
 <span data-ttu-id="b83ea-442">最後に、<xref:System.Collections.Generic.List%601.Exists%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-442">Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method is called.</span></span> <span data-ttu-id="b83ea-443">各要素を順番に渡して、先頭から、リストの走査、`EndsWithSaurus`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-443">It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="b83ea-444">検索は停止し、メソッドを返します`true`場合、`EndsWithSaurus`メソッドを返します。 `true` 、任意の要素。</span><span class="sxs-lookup"><span data-stu-id="b83ea-444">The search stops and the method returns `true` if the `EndsWithSaurus` method returns `true` for any element.</span></span> <span data-ttu-id="b83ea-445"><xref:System.Collections.Generic.List%601.Exists%2A>メソッドを返します。`false`などすべての要素が削除されているためです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-445">The <xref:System.Collections.Generic.List%601.Exists%2A> method returns `false` because all such elements have been removed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b83ea-446">C# および Visual Basic の場合は、その必要はありませんを作成する、`Predicate<string>`委任 (`Predicate(Of String)` Visual Basic の) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-446">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="b83ea-447">これらの言語では、コンテキストから適切なデリゲートを推論し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-447">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-448">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-448">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public T Find (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Find(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Find(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="b83ea-449">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-449">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-450">指定された述語によって定義された条件と一致する要素を検索し、<see cref="T:System.Collections.Generic.List`1" /> 全体の中で最もインデックス番号の小さい要素を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-450">Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-451">見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-451">The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-452"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-452">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-453">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>前進デリゲート、 <xref:System.Collections.Generic.List%601>、最初の要素で開始および終了の最後の要素。</span><span class="sxs-lookup"><span data-stu-id="b83ea-453">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving forward in the <xref:System.Collections.Generic.List%601>, starting with the first element and ending with the last element.</span></span>  <span data-ttu-id="b83ea-454">一致が見つかった場合は、処理が停止しました。</span><span class="sxs-lookup"><span data-stu-id="b83ea-454">Processing is stopped when a match is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b83ea-455">値の型を含むリストを検索するときに、型の既定値は、検索述語を満たさないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-455">When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</span></span> <span data-ttu-id="b83ea-456">それ以外の場合、一致が見つからなかったことを示す既定値と型の既定値が含まれているリスト要素を識別する方法はありません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-456">Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</span></span> <span data-ttu-id="b83ea-457">既定値は、検索述語を満たす場合を使用して、<xref:System.Collections.Generic.List%601.FindIndex%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-457">If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead.</span></span>  
  
 <span data-ttu-id="b83ea-458">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-458">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-459">次の例で、<xref:System.Collections.Generic.List%601.Find%2A>メソッドを<xref:System.Collections.Generic.List%601>単純な複雑なオブジェクトを格納しています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-459">The following example demonstrates the <xref:System.Collections.Generic.List%601.Find%2A> method on a <xref:System.Collections.Generic.List%601> that contains a simple complex object.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="b83ea-460">次の例での検索方法、<xref:System.Collections.Generic.List%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-460">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="b83ea-461">例を<xref:System.Collections.Generic.List%601>クラスに含まれる`book`クラスのオブジェクト`Book`、データを使用して、[サンプル XML ファイル: 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-461">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="b83ea-462">`FillList`メソッドの例では使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)のプロパティ値を XML から値を解析する、`book`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b83ea-462">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="b83ea-463">次の表では、検索方法を説明する例について説明します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-463">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="b83ea-464">メソッド</span><span class="sxs-lookup"><span data-stu-id="b83ea-464">Method</span></span>|<span data-ttu-id="b83ea-465">例</span><span class="sxs-lookup"><span data-stu-id="b83ea-465">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-466">使用して、ID でブックを検索、`IDToFind`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-466">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="b83ea-467">C# の例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-467">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-468">すべての書籍を持つ検索`Genre`プロパティは、「コンピューター」を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-468">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-469">2001 年を使用する前に、発行日を持つコレクション内の最後の書籍を検索、`PubBefore2001`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-469">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="b83ea-470">C# の例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-470">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-471">コンピューター書籍を使用して最初のインデックスを検索、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-471">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-472">使用してコンピューター書籍の最後のインデックスを検索、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-472">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-473">コレクションの半分の 1 秒間の最初のコンピューター書籍のインデックスを検索を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-473">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-474">2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-474">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-475">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-475">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindAll">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; FindAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAll (match As Predicate(Of T)) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ FindAll(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="b83ea-476">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-476">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-477">指定された述語によって定義された条件と一致するすべての要素を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-477">Retrieves all the elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-478">指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は、空の <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-478">A <see cref="T:System.Collections.Generic.List`1" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-479"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-479">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-480">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>デリゲート、および条件に一致する要素が保存、返された<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-480">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are saved in the returned <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-481">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-481">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-482">次の例での検索方法、<xref:System.Collections.Generic.List%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-482">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="b83ea-483">例を<xref:System.Collections.Generic.List%601>クラスに含まれる`book`クラスのオブジェクト`Book`、データを使用して、[サンプル XML ファイル: 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-483">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="b83ea-484">`FillList`メソッドの例では使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)のプロパティ値を XML から値を解析する、`book`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b83ea-484">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="b83ea-485">次の表では、検索方法を説明する例について説明します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-485">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="b83ea-486">メソッド</span><span class="sxs-lookup"><span data-stu-id="b83ea-486">Method</span></span>|<span data-ttu-id="b83ea-487">例</span><span class="sxs-lookup"><span data-stu-id="b83ea-487">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-488">使用して、ID でブックを検索、`IDToFind`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-488">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="b83ea-489">C# の例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-489">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-490">すべての書籍を持つ検索`Genre`プロパティは、「コンピューター」を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-490">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-491">2001 年を使用する前に、発行日を持つコレクション内の最後の書籍を検索、`PubBefore2001`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-491">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="b83ea-492">C# の例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-492">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-493">コンピューター書籍を使用して最初のインデックスを検索、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-493">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-494">使用してコンピューター書籍の最後のインデックスを検索、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-494">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-495">コレクションの半分の 1 秒間の最初のコンピューター書籍のインデックスを検索を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-495">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-496">2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-496">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-497">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-497">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-498">
            <see cref="T:System.Collections.Generic.List`1" /> またはその一部分から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-498">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
          <span data-ttu-id="b83ea-499">このメソッドは、条件に一致する項目が見つからなかった場合に -1 を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-499">This method returns -1 if an item that matches the conditions is not found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="b83ea-500">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-500">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-501">
            <see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-501">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-502">
            <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-502">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-503"><xref:System.Collections.Generic.List%601>はフォワード最初の要素を起点と最後の要素で終わる検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-503">The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="b83ea-504"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-504">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-505">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-505">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="b83ea-506">デリゲートは、シグネチャを持ちます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-506">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="b83ea-507">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-507">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-508">次の例では定義、 `Employee` 2 つのフィールドを持つクラス`Name`と`Id`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-508">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="b83ea-509">定義、`EmployeeSearch`単一のメソッドとクラス`StartsWith`を示すかどうか、`Employee.Name`フィールドに用意されている指定した部分文字列で始まる、`EmployeeSearch`クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-509">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="b83ea-510">このメソッドのシグネチャに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b83ea-510">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="b83ea-511">渡すことができるデリゲートのシグネチャに対応する、<xref:System.Collections.Generic.List%601.FindIndex%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-511">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="b83ea-512">インスタンス化、`List<Employee>`オブジェクト、いくつかの追加`Employee`し、その呼び出しを objets、<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>初めて、最初、コレクション全体を検索するには、2 回メソッド`Employee`オブジェクト`Name`フィールドの開始"J"と、最初の 2 回目`Employee`オブジェクト`Name`フィールドは、"Ju"で始まります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-512">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection , the first time for the first `Employee` object whose `Name` field begins with "J", and the second time for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex2.cs#2)]
 [!code-vb[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-513">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-513">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="b83ea-514">検索の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-514">The zero-based starting index of the search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="b83ea-515">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-515">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-516">
            <see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスから最後の要素までの範囲内で、指定した述語にで定義される条件に一致する要素を検索し、最初に見つかった 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-516">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-517">
            <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-517">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-518"><xref:System.Collections.Generic.List%601>転送を開始位置として検索`startIndex`と最後の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-518">The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at the last element.</span></span>  
  
 <span data-ttu-id="b83ea-519"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-519">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-520">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-520">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="b83ea-521">デリゲートは、シグネチャを持ちます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-521">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="b83ea-522">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*から要素の数は、`startIndex`の末尾に、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-522">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `startIndex` to the end of the <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-523">次の例では定義、 `Employee` 2 つのフィールドを持つクラス`Name`と`Id`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-523">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="b83ea-524">定義、`EmployeeSearch`単一のメソッドとクラス`StartsWith`を示すかどうか、`Employee.Name`フィールドに用意されている指定した部分文字列で始まる、`EmployeeSearch`クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-524">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="b83ea-525">このメソッドのシグネチャに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b83ea-525">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="b83ea-526">渡すことができるデリゲートのシグネチャに対応する、<xref:System.Collections.Generic.List%601.FindIndex%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-526">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="b83ea-527">例では、インスタンス化、`List<Employee>`オブジェクト、いくつかの追加`Employee`し、その呼び出しを objets、<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>その 5 番目のメンバー (つまり、インデックス 4 のメンバー) から始まるコレクションを検索するには、2 回のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-527">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the collection starting with its fifth member (that is, the member at index 4).</span></span> <span data-ttu-id="b83ea-528">最初の検索、初めて`Employee`オブジェクト`Name`フィールドが"J"で始まる以外の場合は、最初の検索、2 回目`Employee`オブジェクト`Name`フィールドは、"Ju"で始まります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-528">The first time, it searches for the first `Employee` object whose `Name` field begins with "J"; the second time, it searches for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex3.cs#3)]
 [!code-vb[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-529">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-529">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-530">
            <paramref name="startIndex" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-530">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="b83ea-531">検索の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-531">The zero-based starting index of the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b83ea-532">検索対象の範囲内にある要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-532">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="b83ea-533">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-533">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-534">
            <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-534">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-535">
            <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-535">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-536"><xref:System.Collections.Generic.List%601>転送を開始位置として検索が`startIndex`で終わる`startIndex`plus`count`から 1 を引いた場合`count`が 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="b83ea-536">The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="b83ea-537"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-537">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-538">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-538">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="b83ea-539">デリゲートは、シグネチャを持ちます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-539">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="b83ea-540">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は`count`します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-540">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-541">次の例では定義、 `Employee` 2 つのフィールドを持つクラス`Name`と`Id`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-541">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="b83ea-542">定義、`EmployeeSearch`単一のメソッドとクラス`StartsWith`を示すかどうか、`Employee.Name`フィールドに用意されている指定した部分文字列で始まる、`EmployeeSearch`クラスのコンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-542">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="b83ea-543">このメソッドのシグネチャに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b83ea-543">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="b83ea-544">渡すことができるデリゲートのシグネチャに対応する、<xref:System.Collections.Generic.List%601.FindIndex%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-544">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="b83ea-545">例では、インスタンス化、`List<Employee>`オブジェクト、いくつかの追加`Employee`し、その呼び出しを objets、<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>コレクション全体を検索するには、2 回メソッド (インデックスをインデックス 0 からメンバーは、 <xref:System.Collections.Generic.List%601.Count%2A> - 1)。</span><span class="sxs-lookup"><span data-stu-id="b83ea-545">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection (that is, the members from index 0 to index <xref:System.Collections.Generic.List%601.Count%2A> - 1).</span></span> <span data-ttu-id="b83ea-546">最初の検索、初めて`Employee`オブジェクト`Name`フィールドが"J"で始まる以外の場合は、最初の検索、2 回目`Employee`オブジェクト`Name`フィールドは、"Ju"で始まります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-546">The first time, it searches for the first `Employee` object whose `Name` field begins with "J"; the second time, it searches for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex1.cs#1)]
 [!code-vb[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-547">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-547">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-548">
            <paramref name="startIndex" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-548">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-549">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-549">-or-</span>
          </span>
          <span data-ttu-id="b83ea-550">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-550">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-551">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-551">-or-</span>
          </span>
          <span data-ttu-id="b83ea-552">
            <paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の有効な部分を指定していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-552">
              <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLast">
      <MemberSignature Language="C#" Value="public T FindLast (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T FindLast(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLast (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T FindLast(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="b83ea-553">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-553">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-554">指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Collections.Generic.List`1" /> 全体を対象に検索し、最もインデックス番号の大きい要素を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-554">Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-555">見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-555">The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-556"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-556">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-557">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>逆方向に移動して、デリゲート、 <xref:System.Collections.Generic.List%601>、最後の要素で開始および終了の最初の要素。</span><span class="sxs-lookup"><span data-stu-id="b83ea-557">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving backward in the <xref:System.Collections.Generic.List%601>, starting with the last element and ending with the first element.</span></span>  <span data-ttu-id="b83ea-558">一致が見つかった場合は、処理が停止しました。</span><span class="sxs-lookup"><span data-stu-id="b83ea-558">Processing is stopped when a match is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b83ea-559">値の型を含むリストを検索するときに、型の既定値は、検索述語を満たさないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-559">When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</span></span> <span data-ttu-id="b83ea-560">それ以外の場合、一致が見つからなかったことを示す既定値と型の既定値が含まれているリスト要素を識別する方法はありません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-560">Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</span></span> <span data-ttu-id="b83ea-561">既定値は、検索述語を満たす場合を使用して、<xref:System.Collections.Generic.List%601.FindLastIndex%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-561">If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead.</span></span>  
  
 <span data-ttu-id="b83ea-562">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-562">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-563">次の例での検索方法、<xref:System.Collections.Generic.List%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-563">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="b83ea-564">例を<xref:System.Collections.Generic.List%601>クラスに含まれる`book`クラスのオブジェクト`Book`、データを使用して、[サンプル XML ファイル: 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-564">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="b83ea-565">`FillList`メソッドの例では使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)のプロパティ値を XML から値を解析する、`book`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b83ea-565">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="b83ea-566">次の表では、検索方法を説明する例について説明します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-566">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="b83ea-567">メソッド</span><span class="sxs-lookup"><span data-stu-id="b83ea-567">Method</span></span>|<span data-ttu-id="b83ea-568">例</span><span class="sxs-lookup"><span data-stu-id="b83ea-568">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-569">使用して、ID でブックを検索、`IDToFind`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-569">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="b83ea-570">C# の例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-570">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-571">すべての書籍を持つ検索`Genre`プロパティは、「コンピューター」を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-571">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-572">2001 年を使用する前に、発行日を持つコレクション内の最後の書籍を検索、`PubBefore2001`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-572">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="b83ea-573">C# の例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-573">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-574">コンピューター書籍を使用して最初のインデックスを検索、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-574">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-575">使用してコンピューター書籍の最後のインデックスを検索、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-575">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-576">コレクションの半分の 1 秒間の最初のコンピューター書籍のインデックスを検索を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-576">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-577">2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-577">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-578">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-578">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindLastIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-579">
            <see cref="T:System.Collections.Generic.List`1" /> またはその一部分から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-579">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="b83ea-580">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-580">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-581">
            <see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-581">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-582">
            <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-582">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-583"><xref:System.Collections.Generic.List%601>後方の最後の要素の最初と最後の最初の要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-583">The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="b83ea-584"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-584">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-585">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-585">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="b83ea-586">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-586">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-587">次の例での検索方法、<xref:System.Collections.Generic.List%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-587">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="b83ea-588">例を<xref:System.Collections.Generic.List%601>クラスに含まれる`book`クラスのオブジェクト`Book`、データを使用して、[サンプル XML ファイル: 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-588">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="b83ea-589">`FillList`メソッドの例では使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)のプロパティ値を XML から値を解析する、`book`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b83ea-589">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="b83ea-590">次の表では、検索方法を説明する例について説明します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-590">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="b83ea-591">メソッド</span><span class="sxs-lookup"><span data-stu-id="b83ea-591">Method</span></span>|<span data-ttu-id="b83ea-592">例</span><span class="sxs-lookup"><span data-stu-id="b83ea-592">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-593">使用して、ID でブックを検索、`IDToFind`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-593">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="b83ea-594">C# の例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-594">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-595">すべての書籍を持つ検索`Genre`プロパティは、「コンピューター」を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-595">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-596">2001 年を使用する前に、発行日を持つコレクション内の最後の書籍を検索、`PubBefore2001`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-596">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="b83ea-597">C# の例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-597">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-598">コンピューター書籍を使用して最初のインデックスを検索、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-598">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-599">使用してコンピューター書籍の最後のインデックスを検索、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-599">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-600">コレクションの半分の 1 秒間の最初のコンピューター書籍のインデックスを検索を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-600">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-601">2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-601">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-602">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-602">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="b83ea-603">後方検索の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-603">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="b83ea-604">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-604">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-605">
            <see cref="T:System.Collections.Generic.List`1" /> のうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-605">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-606">
            <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-606">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-607"><xref:System.Collections.Generic.List%601>検索旧バージョンとを開始位置として、`startIndex`と最初の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-607">The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="b83ea-608"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-608">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-609">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-609">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="b83ea-610">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、場所*n*の先頭から要素の数が、<xref:System.Collections.Generic.List%601>に`startIndex`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-610">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `startIndex`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-611">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-611">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-612">
            <paramref name="startIndex" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-612">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="b83ea-613">後方検索の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-613">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b83ea-614">検索対象のセクション内にある要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-614">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="b83ea-615">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-615">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-616">
            <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスで終わり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-616">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-617">
            <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-617">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-618"><xref:System.Collections.Generic.List%601>検索旧バージョンとを開始位置として、`startIndex`で終わる`startIndex`マイナス`count`1、さらに場合`count`が 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="b83ea-618">The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="b83ea-619"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-619">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-620">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-620">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="b83ea-621">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は`count`します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-621">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-622">次の例での検索方法、<xref:System.Collections.Generic.List%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-622">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="b83ea-623">例を<xref:System.Collections.Generic.List%601>クラスに含まれる`book`クラスのオブジェクト`Book`、データを使用して、[サンプル XML ファイル: 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-623">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="b83ea-624">`FillList`メソッドの例では使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)のプロパティ値を XML から値を解析する、`book`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b83ea-624">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="b83ea-625">次の表では、検索方法を説明する例について説明します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-625">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="b83ea-626">メソッド</span><span class="sxs-lookup"><span data-stu-id="b83ea-626">Method</span></span>|<span data-ttu-id="b83ea-627">例</span><span class="sxs-lookup"><span data-stu-id="b83ea-627">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-628">使用して、ID でブックを検索、`IDToFind`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-628">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="b83ea-629">C# の例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-629">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-630">すべての書籍を持つ検索`Genre`プロパティは、「コンピューター」を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-630">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-631">2001 年を使用する前に、発行日を持つコレクション内の最後の書籍を検索、`PubBefore2001`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-631">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="b83ea-632">C# の例では、匿名デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-632">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-633">コンピューター書籍を使用して最初のインデックスを検索、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-633">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-634">使用してコンピューター書籍の最後のインデックスを検索、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-634">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-635">コレクションの半分の 1 秒間の最初のコンピューター書籍のインデックスを検索を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-635">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="b83ea-636">2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、`FindComputer`述語デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-636">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-637">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-637">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-638">
            <paramref name="startIndex" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-638">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-639">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-639">-or-</span>
          </span>
          <span data-ttu-id="b83ea-640">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-640">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-641">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-641">-or-</span>
          </span>
          <span data-ttu-id="b83ea-642">
            <paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の有効な部分を指定していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-642">
              <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class System.Action`1&lt;!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ForEach (action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ForEach(Action&lt;T&gt; ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b83ea-643">
            <see cref="T:System.Collections.Generic.List`1" /> の各要素に対して実行する <see cref="T:System.Action`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-643">The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-644">
            <see cref="T:System.Collections.Generic.List`1" /> の各要素に対して、指定された処理を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-644">Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-645"><xref:System.Action%601>を渡すとき、オブジェクトが操作を実行するメソッドにデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-645">The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.</span></span>  <span data-ttu-id="b83ea-646">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Action%601>を委任します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-646">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate.</span></span>  
  
 <span data-ttu-id="b83ea-647">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-647">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="b83ea-648">本体で基になるコレクションを変更する、<xref:System.Action%601>デリゲートがサポートされておらず、未定義の動作が発生します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-648">Modifying the underlying collection in the body of the <xref:System.Action%601> delegate is not supported and causes undefined behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-649">次の例での使用、<xref:System.Action%601>の内容を印刷するデリゲート、<xref:System.Collections.Generic.List%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b83ea-649">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="b83ea-650">この例では、`Print`一覧の内容をコンソールに表示するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-650">In this example the `Print` method is used to display the contents of the list to the console.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b83ea-651">使用して内容を表示するだけでなく、`Print`結果をコンソールに表示するメソッド、c# の例を示しますの使用。</span><span class="sxs-lookup"><span data-stu-id="b83ea-651">In addition to displaying the contents using the `Print` method, the C# example demonstrates the use of  to display the results to the console.</span></span>  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-652">
            <paramref name="action" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-652">
              <paramref name="action" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b83ea-653">コレクションの要素が変更されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-653">An element in the collection has been modified.</span>
          </span>
        </exception>
        <altmember cref="T:System.Action`1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.List`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As List(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-654">
            <see cref="T:System.Collections.Generic.List`1" /> を反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-654">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-655">
            <see cref="T:System.Collections.Generic.List`1.Enumerator" /> の <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-655">A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-656">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-656">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="b83ea-657">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-657">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="b83ea-658">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-658">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="b83ea-659">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-659">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="b83ea-660">この位置にある、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>プロパティが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-660">At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="b83ea-661">そのため、呼び出す必要があります、<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-661">Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="b83ea-662"><xref:System.Collections.Generic.List%601.Enumerator.Current%2A>プロパティまで同じオブジェクトを返します<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-662">The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="b83ea-663"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-663"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="b83ea-664">場合<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-664">If <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="b83ea-665">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-665">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="b83ea-666">最後の呼び出し場合<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-666">If the last call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="b83ea-667"><xref:System.Collections.Generic.List%601.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-667">You cannot set <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="b83ea-668">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-668">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="b83ea-669">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-669">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="b83ea-670">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-670">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="b83ea-671">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-671">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="b83ea-672">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-672">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="b83ea-673"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-673">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="b83ea-674">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-674">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.List`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (index As Integer, count As Integer) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ GetRange(int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-675">範囲が開始する位置の、0 から始まる <see cref="T:System.Collections.Generic.List`1" /> のインデックス番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-675">The zero-based <see cref="T:System.Collections.Generic.List`1" /> index at which the range starts.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b83ea-676">範囲内の要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-676">The number of elements in the range.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-677">コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピーを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-677">Creates a shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-678">コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-678">A shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-679">参照型のコレクションまたはそのコレクションのサブセットのシャロー コピーには、コレクションの要素への参照だけが含まれています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-679">A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection.</span></span> <span data-ttu-id="b83ea-680">オブジェクト自体はコピーされません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-680">The objects themselves are not copied.</span></span> <span data-ttu-id="b83ea-681">新しいリスト内の参照は、元のリスト内の参照と同じオブジェクトをポイントします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-681">The references in the new list point to the same objects as the references in the original list.</span></span>  
  
 <span data-ttu-id="b83ea-682">値の型のコレクションまたは、そのコレクションのサブセットのシャロー コピーには、コレクションの要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-682">A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection.</span></span> <span data-ttu-id="b83ea-683">ただし、コレクションの要素に他のオブジェクトへの参照が含まれている場合、それらのオブジェクトはコピーされません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-683">However, if the elements of the collection contain references to other objects, those objects are not copied.</span></span> <span data-ttu-id="b83ea-684">新しいコレクションの要素内の参照は、元のコレクションの要素内の参照と同じオブジェクトをポイントします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-684">The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.</span></span>  
  
 <span data-ttu-id="b83ea-685">これに対し、コレクションのディープ コピーされた要素をコピーして、要素が直接または間接的に参照するすべてです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-685">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="b83ea-686">このメソッドは、O (*n*) 操作では、ここで*n*は`count`します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-686">This method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-687">次の例で、<xref:System.Collections.Generic.List%601.GetRange%2A>メソッドと他の方法で、<xref:System.Collections.Generic.List%601>範囲に作用するクラス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-687">The following example demonstrates the <xref:System.Collections.Generic.List%601.GetRange%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="b83ea-688">この例の最後に、<xref:System.Collections.Generic.List%601.GetRange%2A>メソッドを使用して、リストから、インデックス位置 2 から 3 つの項目を取得します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-688">At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2.</span></span> <span data-ttu-id="b83ea-689"><xref:System.Collections.Generic.List%601.ToArray%2A>メソッドが、結果として得られる<xref:System.Collections.Generic.List%601>、3 つの要素の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-689">The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements.</span></span> <span data-ttu-id="b83ea-690">配列の要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-690">The elements of the array are displayed.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-691">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-691">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-692">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-692">-or-</span>
          </span>
          <span data-ttu-id="b83ea-693">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-693">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-694">
            <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の要素の有効範囲を示していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-694">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-695">
            <see cref="T:System.Collections.Generic.List`1" /> 全体またはその一部において、最初に値が出現した位置のインデックス番号 (0 から始まる) を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-695">Returns the zero-based index of the first occurrence of a value in the <see cref="T:System.Collections.Generic.List`1" /> or in a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-696">
            <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-696">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-697">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-697">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-698">
            <see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最初に見つかったオブジェクトのインデックス (0 から始まる) を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-698">Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-699">
            <paramref name="item" /> 全体を対象に <see cref="T:System.Collections.Generic.List`1" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は –1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-699">The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-700"><xref:System.Collections.Generic.List%601>はフォワード最初の要素を起点と最後の要素で終わる検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-700">The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="b83ea-701">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。</span><span class="sxs-lookup"><span data-stu-id="b83ea-701">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="b83ea-702">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-702">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-703">次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-703">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="b83ea-704">A<xref:System.Collections.Generic.List%601>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-704">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="b83ea-705"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29>メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-705">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="b83ea-706"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>メソッドのオーバー ロードが 3 のインデックスの場所で始まるリストとリストの末尾まで続行を検索するために使用し、文字列の 2 番目の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-706">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="b83ea-707">最後に、<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>その範囲内で検索文字列のインスタンスが存在しないため – 1 を返しますではメソッドのオーバー ロードを使用して、インデックス位置 2 から 2 つのエントリの範囲を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-707">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-708">
            <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-708">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-709">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-709">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="b83ea-710">検索の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-710">The zero-based starting index of the search.</span>
          </span>
          <span data-ttu-id="b83ea-711">空のリストでは 0 (ゼロ) は正しい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-711">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-712">
            <see cref="T:System.Collections.Generic.List`1" /> のうち指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-712">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-713">
            <see cref="T:System.Collections.Generic.List`1" /> のうち、<paramref name="index" /> から最後の要素までの要素範囲の中で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-713">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from <paramref name="index" /> to the last element, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-714"><xref:System.Collections.Generic.List%601>転送を開始位置として検索`index`と最後の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-714">The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at the last element.</span></span>  
  
 <span data-ttu-id="b83ea-715">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。</span><span class="sxs-lookup"><span data-stu-id="b83ea-715">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="b83ea-716">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*から要素の数は、`index`の末尾に、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-716">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `index` to the end of the <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-717">次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-717">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="b83ea-718">A<xref:System.Collections.Generic.List%601>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-718">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="b83ea-719"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29>メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-719">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="b83ea-720"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>メソッドのオーバー ロードが 3 のインデックスの場所で始まるリストとリストの末尾まで続行を検索するために使用し、文字列の 2 番目の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-720">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="b83ea-721">最後に、<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>その範囲内で検索文字列のインスタンスが存在しないため – 1 を返しますではメソッドのオーバー ロードを使用して、インデックス位置 2 から 2 つのエントリの範囲を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-721">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-722">
            <paramref name="index" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-722">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-723">
            <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-723">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-724">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-724">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="b83ea-725">検索の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-725">The zero-based starting index of the search.</span>
          </span>
          <span data-ttu-id="b83ea-726">空のリストでは 0 (ゼロ) は正しい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-726">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b83ea-727">検索対象の範囲内にある要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-727">The number of elements in the section to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-728">
            <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスから始まり、指定した要素数が含まれる要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-728">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-729">
            <see cref="T:System.Collections.Generic.List`1" /> のうち、<paramref name="index" /> から始まり、要素数が <paramref name="count" /> 個の要素範囲の中で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-729">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-730"><xref:System.Collections.Generic.List%601>転送を開始位置として検索が`index`で終わる`index`plus`count`から 1 を引いた場合`count`が 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="b83ea-730">The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at `index` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="b83ea-731">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。</span><span class="sxs-lookup"><span data-stu-id="b83ea-731">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="b83ea-732">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は`count`します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-732">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-733">次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.IndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-733">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="b83ea-734">A<xref:System.Collections.Generic.List%601>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-734">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="b83ea-735"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29>メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-735">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="b83ea-736"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>メソッドのオーバー ロードが 3 のインデックスの場所で始まるリストとリストの末尾まで続行を検索するために使用し、文字列の 2 番目の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-736">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="b83ea-737">最後に、<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>その範囲内で検索文字列のインスタンスが存在しないため – 1 を返しますではメソッドのオーバー ロードを使用して、インデックス位置 2 から 2 つのエントリの範囲を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-737">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-738">
            <paramref name="index" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-738">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-739">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-739">-or-</span>
          </span>
          <span data-ttu-id="b83ea-740">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-740">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-741">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-741">-or-</span>
          </span>
          <span data-ttu-id="b83ea-742">
            <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の有効な部分を指定していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-742">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, T item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-743">
            <c>item</c> を挿入する位置の、0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-743">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="b83ea-744">挿入するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-744">The object to insert.</span>
          </span>
          <span data-ttu-id="b83ea-745">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-745">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-746">
            <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に要素を挿入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-746">Inserts an element into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-747"><xref:System.Collections.Generic.List%601> 受け付ける`null`と参照の有効な値の型により、重複する要素。</span><span class="sxs-lookup"><span data-stu-id="b83ea-747"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="b83ea-748">場合<xref:System.Collections.Generic.List%601.Count%2A>既に同じ<xref:System.Collections.Generic.List%601.Capacity%2A>、容量、<xref:System.Collections.Generic.List%601>内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-748">If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="b83ea-749">場合`index`と等しい<xref:System.Collections.Generic.List%601.Count%2A>、`item`の末尾に追加された<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-749">If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, `item` is added to the end of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-750">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-750">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-751">次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-751">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="b83ea-752">次の例で、<xref:System.Collections.Generic.List%601.Insert%2A>メソッドは、さまざまな他のプロパティおよびメソッドと共に、<xref:System.Collections.Generic.List%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-752">The following example demonstrates the <xref:System.Collections.Generic.List%601.Insert%2A> method, along with various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="b83ea-753">一覧を作成すると、後に要素が追加されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-753">After the list is created, elements are added.</span></span> <span data-ttu-id="b83ea-754"><xref:System.Collections.Generic.List%601.Insert%2A>メソッドを使用して、リストの中央に項目を挿入します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-754">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert an item into the middle of the list.</span></span> <span data-ttu-id="b83ea-755">項目を使用して、後で削除が重複するは、挿入、<xref:System.Collections.Generic.List%601.Remove%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-755">The item inserted is a duplicate, which is later removed using the <xref:System.Collections.Generic.List%601.Remove%2A> method.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-756">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-756">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-757">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-757">-or-</span>
          </span>
          <span data-ttu-id="b83ea-758">
            <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> より大きくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-758">
              <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public void InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertRange (index As Integer, collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-759">新しい要素が挿入される位置の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-759">The zero-based index at which the new elements should be inserted.</span>
          </span>
        </param>
        <param name="collection">
          <span data-ttu-id="b83ea-760">
            <see cref="T:System.Collections.Generic.List`1" /> に要素を挿入するコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-760">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-761">コレクション自体を <see langword="null" /> にすることはできませんが、型 <c>T</c> が参照型の場合、コレクションに格納する要素は <see langword="null" /> であってもかまいません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-761">The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <c>T</c> is a reference type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-762">コレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に挿入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-762">Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-763"><xref:System.Collections.Generic.List%601> 受け付ける`null`と参照の有効な値の型により、重複する要素。</span><span class="sxs-lookup"><span data-stu-id="b83ea-763"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="b83ea-764">場合、新しい<xref:System.Collections.Generic.List%601.Count%2A>(現在<xref:System.Collections.Generic.List%601.Count%2A>さらに、コレクションのサイズ) はより大きくなる<xref:System.Collections.Generic.List%601.Capacity%2A>の容量、<xref:System.Collections.Generic.List%601>新しい要素では、それに合わせて内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-764">If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</span></span>  
  
 <span data-ttu-id="b83ea-765">場合`index`と等しい<xref:System.Collections.Generic.List%601.Count%2A>の末尾に要素が追加されます<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-765">If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, the elements are added to the end of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-766">コレクション内の要素の順序が内でも維持される、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-766">The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-767">このメソッドは、O (*n* \* *m*) 操作、場所*n*を追加する要素の数と*m*は<xref:System.Collections.Generic.List%601.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="b83ea-767">This method is an O(*n* \* *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-768">次の例で<xref:System.Collections.Generic.List%601.InsertRange%2A>メソッドと他の方法でさまざまな、<xref:System.Collections.Generic.List%601>範囲に作用するクラス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-768">The following example demonstrates <xref:System.Collections.Generic.List%601.InsertRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="b83ea-769">リストが作成され、いくつか平和プラント食事、恐竜の名前に設定した後、<xref:System.Collections.Generic.List%601.InsertRange%2A>インデックス位置 3 から、一覧に肉食事恐竜の 3 つのクリックの配列を挿入するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-769">After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <xref:System.Collections.Generic.List%601.InsertRange%2A> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-770">
            <paramref name="collection" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-770">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-771">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-771">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-772">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-772">-or-</span>
          </span>
          <span data-ttu-id="b83ea-773">
            <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> より大きくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-773">
              <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); void set(int index, T value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-774">取得または設定する要素の、0 から始まるインデックス番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-774">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-775">指定したインデックスにある要素を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-775">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b83ea-776">指定したインデックス位置にある要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-776">The element at the specified index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-777"><xref:System.Collections.Generic.List%601> 受け付ける`null`と参照の有効な値の型により、重複する要素。</span><span class="sxs-lookup"><span data-stu-id="b83ea-777"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="b83ea-778">このプロパティでは、`myCollection[index]` という構文を使用して、コレクション内の特定の要素にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-778">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="b83ea-779">このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-779">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-780">このセクションの例を示します、<xref:System.Collections.Generic.List%601.Item%2A>プロパティ (c# のインデクサー) さまざまな他のプロパティおよびメソッドの<xref:System.Collections.Generic.List%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-780">The example in this section demonstrates the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="b83ea-781">リストがされた後に作成および設定を使用して、<xref:System.Collections.Generic.List%601.Add%2A>メソッド、要素が取得されを使用して表示、<xref:System.Collections.Generic.List%601.Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-781">After the list has been created and populated using the <xref:System.Collections.Generic.List%601.Add%2A> method, an element is retrieved and displayed using the <xref:System.Collections.Generic.List%601.Item%2A> property.</span></span> <span data-ttu-id="b83ea-782">(を使用する例については、<xref:System.Collections.Generic.List%601.Item%2A>リスト要素の値を設定するプロパティを参照してください<xref:System.Collections.Generic.List%601.AsReadOnly%2A>)。</span><span class="sxs-lookup"><span data-stu-id="b83ea-782">(For an example that uses the <xref:System.Collections.Generic.List%601.Item%2A> property to set the value of a list element, see <xref:System.Collections.Generic.List%601.AsReadOnly%2A>.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b83ea-783">Visual Basic、c#、および C++ すべてにアクセスするための構文を持つ、<xref:System.Collections.Generic.List%601.Item%2A>プロパティ名を使用しません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-783">Visual Basic, C#, and C++ all have syntax for accessing the <xref:System.Collections.Generic.List%601.Item%2A> property without using its name.</span></span> <span data-ttu-id="b83ea-784">代わりに、変数を含む、<xref:System.Collections.Generic.List%601>配列の場合と同様に使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-784">Instead, the variable containing the <xref:System.Collections.Generic.List%601> is used as if it were an array.</span></span>  
  
 <span data-ttu-id="b83ea-785">C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<xref:System.Collections.Generic.List%601.Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-785">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.Item%2A> property.</span></span> <span data-ttu-id="b83ea-786">Visual Basic は、<xref:System.Collections.Generic.List%601.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-786">Visual Basic implements <xref:System.Collections.Generic.List%601.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 [!code-csharp[List`1_Class#2](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#2)]
 [!code-vb[List`1_Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#2)]  
[!code-csharp[List`1_Class#3](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#3)]
[!code-vb[List`1_Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-787">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-787">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-788">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-788">-or-</span>
          </span>
          <span data-ttu-id="b83ea-789">
            <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-789">
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-790">
            <see cref="T:System.Collections.Generic.List`1" /> 全体またはその一部において、最後に値が出現した位置のインデックス番号 (0 から始まる) を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-790">Returns the zero-based index of the last occurrence of a value in the <see cref="T:System.Collections.Generic.List`1" /> or in a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-791">
            <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-791">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-792">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-792">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-793">
            <see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最後に見つかったオブジェクトのインデックス (0 から始まる) を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-793">Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-794">
            <paramref name="item" /> が見つかった場合は、<see cref="T:System.Collections.Generic.List`1" /> 全体で最後に見つかった位置のインデックス番号 (0 から始まる)。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-794">The zero-based index of the last occurrence of <paramref name="item" /> within the entire the <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-795"><xref:System.Collections.Generic.List%601>後方の最後の要素の最初と最後の最初の要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-795">The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="b83ea-796">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。</span><span class="sxs-lookup"><span data-stu-id="b83ea-796">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="b83ea-797">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-797">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-798">次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.LastIndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-798">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="b83ea-799">A<xref:System.Collections.Generic.List%601>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-799">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="b83ea-800"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>メソッドのオーバー ロードが、末尾からリスト全体を検索し、文字列の 2 番目の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-800">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="b83ea-801"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>インデックス 3 の場所で始まると、一覧の先頭に、最初に見つかった文字列の一覧で、操作を続行旧バージョンとの一覧を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-801">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="b83ea-802">最後に、<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードが、インデックスの位置 4 に開始し、逆方向に拡張する 4 つのエントリの範囲を検索に使用される (つまり、その項目を検索、4、3、2、および 1 の場所で); 検索のインスタンスが存在しないために、この検索は – 1 を返しますその範囲内の文字列。</span><span class="sxs-lookup"><span data-stu-id="b83ea-802">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-803">
            <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-803">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-804">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-804">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="b83ea-805">後方検索の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-805">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-806">
            <see cref="T:System.Collections.Generic.List`1" /> のうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-806">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-807">
            <see cref="T:System.Collections.Generic.List`1" /> のうち、最初の要素から <paramref name="index" /> までの要素範囲内で <paramref name="item" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-807">The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to <paramref name="index" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-808"><xref:System.Collections.Generic.List%601>検索旧バージョンとを開始位置として、`index`と最初の要素で終了します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-808">The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at the first element.</span></span>  
  
 <span data-ttu-id="b83ea-809">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。</span><span class="sxs-lookup"><span data-stu-id="b83ea-809">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="b83ea-810">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、場所*n*の先頭から要素の数が、<xref:System.Collections.Generic.List%601>に`index`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-810">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `index`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-811">次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.LastIndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-811">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="b83ea-812">A<xref:System.Collections.Generic.List%601>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-812">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="b83ea-813"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>メソッドのオーバー ロードが、末尾からリスト全体を検索し、文字列の 2 番目の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-813">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="b83ea-814"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>インデックス 3 の場所で始まると、一覧の先頭に、最初に見つかった文字列の一覧で、操作を続行旧バージョンとの一覧を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-814">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="b83ea-815">最後に、<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードが、インデックスの位置 4 に開始し、逆方向に拡張する 4 つのエントリの範囲を検索に使用される (つまり、その項目を検索、4、3、2、および 1 の場所で); 検索のインスタンスが存在しないために、この検索は – 1 を返しますその範囲内の文字列。</span><span class="sxs-lookup"><span data-stu-id="b83ea-815">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-816">
            <paramref name="index" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-816">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-817">
            <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-817">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-818">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-818">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="b83ea-819">後方検索の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-819">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b83ea-820">検索対象の範囲内にある要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-820">The number of elements in the section to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-821">
            <see cref="T:System.Collections.Generic.List`1" /> のうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-821">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-822">
            <see cref="T:System.Collections.Generic.List`1" /> のうち、<paramref name="count" /> 個の要素が含まれ、<paramref name="index" /> の位置で終了する要素範囲の中で <paramref name="item" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-822">The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-823"><xref:System.Collections.Generic.List%601>検索旧バージョンとを開始位置として、`index`で終わる`index`マイナス`count`1、さらに場合`count`が 0 より大きい。</span><span class="sxs-lookup"><span data-stu-id="b83ea-823">The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at `index` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="b83ea-824">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。</span><span class="sxs-lookup"><span data-stu-id="b83ea-824">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="b83ea-825">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は`count`します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-825">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-826">次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.LastIndexOf%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-826">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="b83ea-827">A<xref:System.Collections.Generic.List%601>文字列の作成されると、インデックス位置 0 と 5 のインデックス位置に 2 回、表示される 1 つのエントリにします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-827">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="b83ea-828"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>メソッドのオーバー ロードが、末尾からリスト全体を検索し、文字列の 2 番目の出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-828">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="b83ea-829"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>インデックス 3 の場所で始まると、一覧の先頭に、最初に見つかった文字列の一覧で、操作を続行旧バージョンとの一覧を検索するメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-829">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="b83ea-830">最後に、<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードが、インデックスの位置 4 に開始し、逆方向に拡張する 4 つのエントリの範囲を検索に使用される (つまり、その項目を検索、4、3、2、および 1 の場所で); 検索のインスタンスが存在しないために、この検索は – 1 を返しますその範囲内の文字列。</span><span class="sxs-lookup"><span data-stu-id="b83ea-830">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-831">
            <paramref name="index" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-831">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-832">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-832">-or-</span>
          </span>
          <span data-ttu-id="b83ea-833">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-833">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-834">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-834">-or-</span>
          </span>
          <span data-ttu-id="b83ea-835">
            <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の有効な部分を指定していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-835">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(T item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-836">
            <see cref="T:System.Collections.Generic.List`1" /> から削除するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-836">The object to remove from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-837">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-837">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-838">特定のオブジェクトが <see cref="T:System.Collections.Generic.List`1" /> 内にあるときに、最初に出現したものを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-838">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-839">
            <paramref name="item" /> が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-839">
              <see langword="true" /> if <paramref name="item" /> is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b83ea-840">このメソッドは、<see langword="false" /> が <paramref name="item" /> に見つからなかった場合にも <see cref="T:System.Collections.Generic.List`1" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-840">This method also returns <see langword="false" /> if <paramref name="item" /> was not found in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-841">場合型`T`を実装、<xref:System.IEquatable%601>ジェネリック インターフェイスは、等値比較子は、 <xref:System.IEquatable%601.Equals%2A> ; そのインターフェイスのメソッドは、それ以外の場合、既定の等値比較子<xref:System.Object.Equals%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-841">If type `T` implements the <xref:System.IEquatable%601> generic interface, the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b83ea-842">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-842">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-843">次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-843">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="b83ea-844">次の例で<xref:System.Collections.Generic.List%601.Remove%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-844">The following example demonstrates <xref:System.Collections.Generic.List%601.Remove%2A> method.</span></span> <span data-ttu-id="b83ea-845">いくつかのプロパティとメソッド、<xref:System.Collections.Generic.List%601>ジェネリック クラスは追加、insert、および一覧を検索するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-845">Several properties and methods of the <xref:System.Collections.Generic.List%601> generic class are used to add, insert, and search the list.</span></span> <span data-ttu-id="b83ea-846">これらの操作後に、一覧には、重複が含まれています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-846">After these operations, the list contains a duplicate.</span></span> <span data-ttu-id="b83ea-847"><xref:System.Collections.Generic.List%601.Remove%2A>メソッドを使用して、重複する項目の最初のインスタンスを削除して、内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-847">The <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item, and the contents are displayed.</span></span> <span data-ttu-id="b83ea-848"><xref:System.Collections.Generic.List%601.Remove%2A>メソッドは常に検出した最初のインスタンスを削除します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-848">The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public int RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="b83ea-849">削除する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-849">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-850">指定した述語によって定義される条件に一致するすべての要素を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-850">Removes all the elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-851">
            <see cref="T:System.Collections.Generic.List`1" /> から削除される要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-851">The number of elements removed from the <see cref="T:System.Collections.Generic.List`1" /> .</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-852"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-852">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-853">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>デリゲート、および条件に一致する要素から削除されます、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-853">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are removed from the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="b83ea-854">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-854">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-855">次の例で、<xref:System.Collections.Generic.List%601.RemoveAll%2A>メソッドを使用して、他のいくつかの方法、<xref:System.Predicate%601>汎用デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-855">The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="b83ea-856">A<xref:System.Collections.Generic.List%601>文字列の作成、"saurus"で終わる (位置 1 から 5 など) のうちの 2 台の 8 恐竜の名前を含むです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-856">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="b83ea-857">という名前の検索述語メソッドも定義`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-857">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="b83ea-858"><xref:System.Collections.Generic.List%601.Find%2A>、 <xref:System.Collections.Generic.List%601.FindLast%2A>、および<xref:System.Collections.Generic.List%601.FindAll%2A>メソッドを使用して、検索述語メソッドを使用して、一覧を検索します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-858">The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method.</span></span>  
  
 <span data-ttu-id="b83ea-859"><xref:System.Collections.Generic.List%601.RemoveAll%2A> "Saurus"で終わるすべてのエントリを削除するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-859">The <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with "saurus".</span></span> <span data-ttu-id="b83ea-860">各要素を順番に渡して、先頭から、リストの走査、`EndsWithSaurus`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-860">It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="b83ea-861">場合、要素が削除された、`EndsWithSaurus`メソッドを返します。`true`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-861">The element is removed if the `EndsWithSaurus` method returns `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b83ea-862">C# および Visual Basic の場合は、その必要はありませんを作成する、`Predicate<string>`委任 (`Predicate(Of String)` Visual Basic の) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-862">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="b83ea-863">これらの言語は、コンテキストから正しいデリゲートを推測し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-863">These languages infer the correct delegate from context, and create it automatically.</span></span>  
  
 <span data-ttu-id="b83ea-864">最後に、<xref:System.Collections.Generic.List%601.Exists%2A>メソッドでは、"saurus"で終わるリスト内の文字列がないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-864">Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method verifies that there are no strings in the list that end with "saurus".</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-865">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-865">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-866">削除する要素の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-866">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-867">
            <see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスにある要素を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-867">Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-868">呼び出すと<xref:System.Collections.Generic.List%601.RemoveAt%2A>削除された項目を置換する項目を削除する、一覧の残りの項目が番号が変更されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-868">When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item.</span></span> <span data-ttu-id="b83ea-869">たとえば、インデックス 3 のアイテムを削除すると、インデックス 4 項目は 3 つの位置に移動します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-869">For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position.</span></span> <span data-ttu-id="b83ea-870">さらに、リスト内の項目の数 (で表される、<xref:System.Collections.Generic.List%601.Count%2A>プロパティ) が 1 つずつ減少します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-870">In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1.</span></span>  
  
 <span data-ttu-id="b83ea-871">このメソッドは、O (*n*) 操作では、ここで*n*は (<xref:System.Collections.Generic.List%601.Count%2A> - `index`)。</span><span class="sxs-lookup"><span data-stu-id="b83ea-871">This method is an O(*n*) operation, where *n* is (<xref:System.Collections.Generic.List%601.Count%2A> - `index`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-872">次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<xref:System.Collections.Generic.List%601>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-872">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-873">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-873">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-874">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-874">-or-</span>
          </span>
          <span data-ttu-id="b83ea-875">
            <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-875">
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-876">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-876">The zero-based starting index of the range of elements to remove.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b83ea-877">削除する要素の数を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-877">The number of elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-878">
            <see cref="T:System.Collections.Generic.List`1" /> から要素の範囲を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-878">Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-879">アイテムを削除してすべての要素を次に、 <xref:System.Collections.Generic.List%601> 、そのインデックスによって削減あります`count`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-879">The items are removed and all the elements following them in the <xref:System.Collections.Generic.List%601> have their indexes reduced by `count`.</span></span>  
  
 <span data-ttu-id="b83ea-880">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-880">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-881">次の例で、<xref:System.Collections.Generic.List%601.RemoveRange%2A>メソッドと他の方法でさまざまな、<xref:System.Collections.Generic.List%601>範囲に作用するクラス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-881">The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="b83ea-882">リストが作成され、変更した後、<xref:System.Collections.Generic.List%601.RemoveRange%2A>リストから、インデックス位置 2 から 2 つの要素を削除するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-882">After the list has been created and modified, the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method is used to remove two elements from the list, beginning at index location 2.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-883">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-883">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-884">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-884">-or-</span>
          </span>
          <span data-ttu-id="b83ea-885">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-885">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-886">
            <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の要素の有効範囲を示していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-886">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-887">
            <see cref="T:System.Collections.Generic.List`1" /> またはその一部の要素の順序を反転させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-887">Reverses the order of the elements in the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-888">
            <see cref="T:System.Collections.Generic.List`1" /> 全体の要素の順序を反転させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-888">Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-889">このメソッドを使用して<xref:System.Array.Reverse%2A?displayProperty=nameWithType>要素の順序を逆にします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-889">This method uses <xref:System.Array.Reverse%2A?displayProperty=nameWithType> to reverse the order of the elements.</span></span>  
  
 <span data-ttu-id="b83ea-890">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-890">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-891">次の例では、両方のオーバー ロードの<xref:System.Collections.Generic.List%601.Reverse%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-891">The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method.</span></span> <span data-ttu-id="b83ea-892">例は、作成、<xref:System.Collections.Generic.List%601>の文字列し、6 つの文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-892">The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings.</span></span> <span data-ttu-id="b83ea-893"><xref:System.Collections.Generic.List%601.Reverse>を元に、リストを戻すメソッドのオーバー ロードを使用し、<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29>要素 1 で始まると、4 つの要素を含む、リストの中央を反転させるメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-893">The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</span></span>  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse(int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-894">反転させる範囲の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-894">The zero-based starting index of the range to reverse.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b83ea-895">反転させる範囲内にある要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-895">The number of elements in the range to reverse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-896">指定した範囲の要素の順序を反転させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-896">Reverses the order of the elements in the specified range.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-897">このメソッドを使用して<xref:System.Array.Reverse%2A?displayProperty=nameWithType>要素の順序を逆にします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-897">This method uses <xref:System.Array.Reverse%2A?displayProperty=nameWithType> to reverse the order of the elements.</span></span>  
  
 <span data-ttu-id="b83ea-898">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-898">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-899">次の例では、両方のオーバー ロードの<xref:System.Collections.Generic.List%601.Reverse%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-899">The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method.</span></span> <span data-ttu-id="b83ea-900">例は、作成、<xref:System.Collections.Generic.List%601>の文字列し、6 つの文字列を追加します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-900">The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings.</span></span> <span data-ttu-id="b83ea-901"><xref:System.Collections.Generic.List%601.Reverse>を元に、リストを戻すメソッドのオーバー ロードを使用し、<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29>要素 1 で始まると、4 つの要素を含む、リストの中央を反転させるメソッド オーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-901">The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</span></span>  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-902">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-902">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-903">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-903">-or-</span>
          </span>
          <span data-ttu-id="b83ea-904">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-904">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-905">
            <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の要素の有効範囲を示していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-905">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-906">
            <see cref="T:System.Collections.Generic.List`1" /> またはその一部の要素を並べ替えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-906">Sorts the elements in the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overloaded-method-syntax"></a><span data-ttu-id="b83ea-907">オーバー ロードされたメソッドの構文</span><span class="sxs-lookup"><span data-stu-id="b83ea-907">Overloaded method syntax</span></span>  
 <span data-ttu-id="b83ea-908"><xref:System.Collections.Generic.List%601.Sort%2A>メソッドを使用すると、一覧で、オブジェクトの種類の既定の比較子と並べ替えまたは顧客の並べ替え方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-908">The  <xref:System.Collections.Generic.List%601.Sort%2A> methods enable you to sort with the default comparer for the object type in the list, or specify a customer sort method.</span></span>  
  
 <span data-ttu-id="b83ea-909">[リスト\<T > です。Sort()](xref:System.Collections.Generic.List`1.Sort*)リストに保持されているオブジェクトの種類の既定の比較子を使用してリスト全体の要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-909">[List\<T>.Sort()](xref:System.Collections.Generic.List`1.Sort*) Sorts the elements in the entire list using the default comparer of the object type held in the list.</span></span>  
  
 <span data-ttu-id="b83ea-910">[リスト\<T > です。並べ替え M (比較\<T > の比較)](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29)リスト全体を指定した比較子を使用して要素を並べ替えます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-910">[List\<T>.Sort M(Comparison\<T> comparison)](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29) Sorts the elements in the entire list using the specified comparer.</span></span>  
  
 <span data-ttu-id="b83ea-911">[リスト\<T > です。並べ替え (IComparer\<T > の比較演算子)](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29)リスト全体を指定して要素を並べ替えます<xref:System.Comparison%601?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-911">[List\<T>.Sort(IComparer\<T> comparer)](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29) Sorts the elements in the entire list using the specified <xref:System.Comparison%601?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b83ea-912">[List\<T>.Sort(Int32 index, Int32 count, IComparer\<T> comparer)](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29) Sorts the elements in a range of elements in list using the specified comparer.</span><span class="sxs-lookup"><span data-stu-id="b83ea-912">[List\<T>.Sort(Int32 index, Int32 count, IComparer\<T> comparer)](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29) Sorts the elements in a range of elements in list using the specified comparer.</span></span>  
  
## <a name="parameters"></a><span data-ttu-id="b83ea-913">パラメーター</span><span class="sxs-lookup"><span data-stu-id="b83ea-913">Parameters</span></span>  
  
|<span data-ttu-id="b83ea-914">パラメーター</span><span class="sxs-lookup"><span data-stu-id="b83ea-914">Parameter</span></span>|<span data-ttu-id="b83ea-915">型</span><span class="sxs-lookup"><span data-stu-id="b83ea-915">Type</span></span>|<span data-ttu-id="b83ea-916">説明</span><span class="sxs-lookup"><span data-stu-id="b83ea-916">Description</span></span>|  
|---------------|----------|-----------------|  
|`comparison`|<xref:System.Comparison%601>|<span data-ttu-id="b83ea-917">要素を比較するときに使用するデリゲート メソッド</span><span class="sxs-lookup"><span data-stu-id="b83ea-917">The delegate method to use when comparing elements</span></span>|  
|<span data-ttu-id="b83ea-918">比較演算子</span><span class="sxs-lookup"><span data-stu-id="b83ea-918">comparer</span></span>|<xref:System.Collections.Generic.IComparer%601>|<span data-ttu-id="b83ea-919"><xref:System.Collections.Generic.IComparer%601>要素を比較するときに使用するか、既定の比較子を使用する場合は null に実装<xref:System.Collections.Generic.Comparer%601.Default>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-919">The <xref:System.Collections.Generic.IComparer%601> implementation to use when comparing elements, or null to use the default comparer <xref:System.Collections.Generic.Comparer%601.Default>.</span></span>|  
|`index`|<xref:System.Int32>|<span data-ttu-id="b83ea-920">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-920">The zero-based starting index of the range to sort.</span></span>|  
|`count`|<xref:System.Int32>|<span data-ttu-id="b83ea-921">並べ替える範囲の長さ。</span><span class="sxs-lookup"><span data-stu-id="b83ea-921">The length of the range to sort.</span></span>|  
  
## <a name="exceptions"></a><span data-ttu-id="b83ea-922">例外</span><span class="sxs-lookup"><span data-stu-id="b83ea-922">Exceptions</span></span>  
  
|<span data-ttu-id="b83ea-923">例外</span><span class="sxs-lookup"><span data-stu-id="b83ea-923">Exception</span></span>|<span data-ttu-id="b83ea-924">条件</span><span class="sxs-lookup"><span data-stu-id="b83ea-924">Condition</span></span>|  
|---------------|---------------|  
|<xref:System.InvalidOperationException>|<span data-ttu-id="b83ea-925">`comparer` 指定されていないか、 `null`、および既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>の実装を見つけることができません、<xref:System.IComparable%601?displayProperty=nameWithType>ジェネリック インターフェイスまたは<xref:System.IComparable?displayProperty=nameWithType>T 型のインターフェイス</span><span class="sxs-lookup"><span data-stu-id="b83ea-925">`comparer` is not specified or `null`, and the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> cannot find implementation of the <xref:System.IComparable%601?displayProperty=nameWithType> generic interface or the <xref:System.IComparable?displayProperty=nameWithType> interface for type T.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="b83ea-926">`comparison` は `null`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-926">`comparison` is `null`.</span></span>|  
|<xref:System.ArgumentException>|<span data-ttu-id="b83ea-927">実装`comparison`または`comparer`並べ替え中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b83ea-927">The implementation of `comparison` or `comparer` caused an error during the sort.</span></span> <span data-ttu-id="b83ea-928">たとえば、`comparison` は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-928">For example, `comparison` might not return 0 when comparing an item with itself.</span></span><br /><br /> <span data-ttu-id="b83ea-929">- または -</span><span class="sxs-lookup"><span data-stu-id="b83ea-929">-or-</span></span><br /><br /> <span data-ttu-id="b83ea-930">`index` および `count` は <xref:System.Collections.Generic.List%601> において有効な範囲を指定していません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-930">`index` and `count` do not specify a valid range in the <xref:System.Collections.Generic.List%601>.</span></span>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="b83ea-931">`index` 0 未満または`count`が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-931">`index` is less than 0 or `count` is less than 0.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-932">既定の比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-932">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the default comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-933">このメソッドは、既定の比較子を使用して<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>型`T`リストの要素の順序を決定します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-933">This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for type `T` to determine the order of list elements.</span></span> <span data-ttu-id="b83ea-934"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>プロパティのチェックを入力するかどうか`T`を実装する、<xref:System.IComparable%601>ジェネリック インターフェイスと使用可能な場合は、その実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-934">The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="b83ea-935">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`を実装する、<xref:System.IComparable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-935">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="b83ea-936">場合型`T`はいずれのインターフェイスを実装しません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-936">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="b83ea-937">このメソッドを使用して、<xref:System.Array.Sort%2A?displayProperty=nameWithType>内省的で並べ替えを次のように適用されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="b83ea-937">This method uses the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="b83ea-938">パーティションのサイズが 16 個未満の要素の場合は、挿入の並べ替えアルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-938">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</span></span>  
  
-   <span data-ttu-id="b83ea-939">パーティションの数が 2 つのログを超えた場合*n*ここで、 *n*範囲 Heapsort アルゴリズムを使用して、入力配列のです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-939">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.</span></span>  
  
-   <span data-ttu-id="b83ea-940">それ以外の場合、クイック ソート アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-940">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="b83ea-941">この実装は、不安定な並べ替えを実行しますつまり、2 つの要素が等しい場合、順序が維持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-941">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="b83ea-942">これに対し、安定した並べ替えには、同じである要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-942">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="b83ea-943">平均すると、このメソッドは、O (*n*ログ*n*) 操作、場所*n*は<xref:System.Collections.Generic.List%601.Count%2A>最悪の場合ですこれは、O (*n* <sup>。2</sup>) 操作です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-943">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-944">次の例では、いくつかの名前、`List<String>`並べ替えの順序で一覧を呼び出すオブジェクト、表示、<xref:System.Collections.Generic.List%601.Sort%2A>メソッド、し、並べ替えられた一覧を表示します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-944">The following example adds some names to a `List<String>` object, displays the list in unsorted order, calls the <xref:System.Collections.Generic.List%601.Sort%2A> method, and then displays the sorted list.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/Sort1.cs#2)]
 [!code-vb[System.Collections.Generic.List.Sort#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/Sort1.vb#2)]  
  
 <span data-ttu-id="b83ea-945">次のコード例、<xref:System.Collections.Generic.List%601.Sort>と<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>単純なビジネス オブジェクトのメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-945">The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort> and <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overloads on a simple business object.</span></span> <span data-ttu-id="b83ea-946">呼び出す、<xref:System.Collections.Generic.List%601.Sort>メソッドにより、一部の種類の既定の比較子の使用と<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>匿名メソッドを使用してメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-946">Calling the <xref:System.Collections.Generic.List%601.Sort> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method is implemented by using an anonymous method.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 <span data-ttu-id="b83ea-947">次の例で、<xref:System.Collections.Generic.List%601.Sort>メソッドのオーバー ロードおよび<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-947">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload.</span></span> <span data-ttu-id="b83ea-948">A<xref:System.Collections.Generic.List%601>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-948">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="b83ea-949">一覧が表示され、並べ替えが、もう一度表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-949">The list is displayed, sorted, and displayed again.</span></span>  
  
 <span data-ttu-id="b83ea-950"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>メソッドのオーバー ロードが、一覧に含まれていない 2 つの文字列の検索に使用し、および<xref:System.Collections.Generic.List%601.Insert%2A>に挿入するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-950">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them.</span></span> <span data-ttu-id="b83ea-951">戻り値、<xref:System.Collections.Generic.List%601.BinarySearch%2A>文字列が、一覧にはないために、メソッドは、各ケースで負の値。</span><span class="sxs-lookup"><span data-stu-id="b83ea-951">The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%2A> method is negative in each case, because the strings are not in the list.</span></span> <span data-ttu-id="b83ea-952">ビットごとの補数を行う (、~ 演算子で c# および Visual C、 `Xor` Visual Basic では-1) はこの場所では、検索文字列より大きいと、挿入リストの最初の要素のインデックスのこの負の数値の生成には、並べ替えが保持されます順序です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-952">Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</span></span> <span data-ttu-id="b83ea-953">2 番目の検索文字列は、カーソル位置がリストの末尾であるため、一覧の任意の要素を超えています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-953">The second search string is larger than any element in the list, so the insertion position is at the end of the list.</span></span>  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b83ea-954">既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 <paramref name="T" /> の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-954">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="b83ea-955">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-955">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-956">指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-956">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-957">場合`comparer`が提供されるの要素、<xref:System.Collections.Generic.List%601>を指定して並べ替える<xref:System.Collections.Generic.IComparer%601>実装します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-957">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="b83ea-958">場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`を実装、<xref:System.IComparable%601>ジェネリック インターフェイスし、使用可能な場合は、その実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-958">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="b83ea-959">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`を実装する、<xref:System.IComparable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-959">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="b83ea-960">場合型`T`はいずれのインターフェイスを実装しません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-960">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="b83ea-961">このメソッドを使用して、<xref:System.Array.Sort%2A?displayProperty=nameWithType>内省的で並べ替えを次のように適用されるメソッド。</span><span class="sxs-lookup"><span data-stu-id="b83ea-961">This method uses the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="b83ea-962">パーティションのサイズが 16 個未満の要素の場合は、挿入の並べ替えアルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-962">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</span></span>  
  
-   <span data-ttu-id="b83ea-963">パーティションの数が 2 つのログを超えた場合*n*ここで、 *n*範囲 Heapsort アルゴリズムを使用して、入力配列のです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-963">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.</span></span>  
  
-   <span data-ttu-id="b83ea-964">それ以外の場合、クイック ソート アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-964">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="b83ea-965">この実装は、不安定な並べ替えを実行しますつまり、2 つの要素が等しい場合、順序が維持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-965">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="b83ea-966">これに対し、安定した並べ替えには、同じである要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-966">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="b83ea-967">平均すると、このメソッドは、O (*n*ログ*n*) 操作、場所*n*は<xref:System.Collections.Generic.List%601.Count%2A>最悪の場合ですこれは、O (*n* <sup>。2</sup>) 操作です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-967">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-968">次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードおよび<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-968">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="b83ea-969">実装する DinoCompare を名前付き文字列の代替の比較演算子が定義されています、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual C で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-969">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="b83ea-970">比較子が次のように動作: 比較対照値があるテスト最初に、 `null`、null 参照が null でないより小さいとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-970">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="b83ea-971">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-971">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="b83ea-972">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-972">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="b83ea-973">A<xref:System.Collections.Generic.List%601>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-973">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="b83ea-974">一覧が表示されます、代替の比較子を使用して並べ替えられ、表示されているもう一度です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-974">The list is displayed, sorted using the alternate comparer, and displayed again.</span></span>  
  
 <span data-ttu-id="b83ea-975"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードがいくつかの文字列は、一覧で、使用しない、代替の比較子を検索に使用されるからです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-975">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</span></span> <span data-ttu-id="b83ea-976"><xref:System.Collections.Generic.List%601.Insert%2A>メソッドを使用して、文字列を挿入します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-976">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings.</span></span> <span data-ttu-id="b83ea-977">これら 2 つの方法がという名前の関数内にある`SearchAndInsert`、ビットごとの補数をコードと共に (、~ c# および Visual C で演算子`Xor`Visual Basic では-1) によって返される負の数値の<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>のインデックスとして使用し、新しい文字列を挿入しています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-977">These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b83ea-978">
            <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-978">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-979">
            <paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-979">The implementation of <paramref name="comparer" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="b83ea-980">たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-980">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparison As Comparison(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">
          <span data-ttu-id="b83ea-981">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-981">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-982">指定した <see cref="T:System.Comparison`1" /> を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-982">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified <see cref="T:System.Comparison`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-983">場合`comparison`が提供されるの要素、<xref:System.Collections.Generic.List%601>デリゲートによって表されるメソッドを使用して並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-983">If `comparison` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the method represented by the delegate.</span></span>  
  
 <span data-ttu-id="b83ea-984">場合`comparison`は`null`、<xref:System.ArgumentNullException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-984">If `comparison` is `null`, an <xref:System.ArgumentNullException> is thrown.</span></span>  
  
 <span data-ttu-id="b83ea-985">このメソッドを使用して<xref:System.Array.Sort%2A?displayProperty=nameWithType>、内省的で並べ替えを次のように適用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-985">This method uses <xref:System.Array.Sort%2A?displayProperty=nameWithType>, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="b83ea-986">挿入の並べ替えアルゴリズムを使用してパーティションのサイズが 16 個未満の要素の場合は、</span><span class="sxs-lookup"><span data-stu-id="b83ea-986">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</span></span>  
  
-   <span data-ttu-id="b83ea-987">パーティションの数が 2 つのログを超えた場合*n*ここで、 *n*範囲を使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズムです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-987">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="b83ea-988">それ以外の場合、クイック ソート アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-988">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="b83ea-989">この実装は、不安定な並べ替えを実行しますつまり、2 つの要素が等しい場合、順序が維持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-989">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="b83ea-990">これに対し、安定した並べ替えには、同じである要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-990">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="b83ea-991">平均すると、このメソッドは、O (*n*ログ*n*) 操作、場所*n*は<xref:System.Collections.Generic.List%601.Count%2A>最悪の場合ですこれは、O (*n* <sup>。2</sup>) 操作です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-991">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-992">次のコード例、<xref:System.Collections.Generic.List%601.Sort%2A>と<xref:System.Collections.Generic.List%601.Sort%2A>単純なビジネス オブジェクトのメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-992">The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> method overloads on a simple business object.</span></span> <span data-ttu-id="b83ea-993">呼び出す、<xref:System.Collections.Generic.List%601.Sort%2A>メソッドにより、一部の種類の既定の比較子の使用と<xref:System.Collections.Generic.List%601.Sort%2A>匿名メソッドを使用してメソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-993">Calling the <xref:System.Collections.Generic.List%601.Sort%2A> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%2A> method is implemented using an anonymous method.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 <span data-ttu-id="b83ea-994">次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-994">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="b83ea-995">例では、名前付き文字列の代替の比較メソッドを定義する`CompareDinosByLength`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-995">The example defines an alternative comparison method for strings, named `CompareDinosByLength`.</span></span> <span data-ttu-id="b83ea-996">この方法は次のように、機能: 比較対照値があるテスト最初に、 `null`、null 参照が null でないより小さいとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-996">This method works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="b83ea-997">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-997">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="b83ea-998">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-998">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="b83ea-999">A<xref:System.Collections.Generic.List%601>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-999">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="b83ea-1000">一覧は、空の文字列と null 参照にも含まれます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1000">The list also includes an empty string and a null reference.</span></span> <span data-ttu-id="b83ea-1001">使用して並べ替えられて、一覧が表示されます、<xref:System.Comparison%601>を表すジェネリック デリゲート、`CompareDinosByLength`メソッドを再び表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1001">The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.</span></span>  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-1002">
            <paramref name="comparison" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1002">
              <paramref name="comparison" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-1003">
            <paramref name="comparison" /> の実装により、並べ替え中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1003">The implementation of <paramref name="comparison" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="b83ea-1004">たとえば、<paramref name="comparison" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1004">For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
        <altmember cref="T:System.Comparison`1" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (index As Integer, count As Integer, comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-1005">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1005">The zero-based starting index of the range to sort.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b83ea-1006">並べ替える範囲の長さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1006">The length of the range to sort.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="b83ea-1007">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1007">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-1008">指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内の要素を並べ替えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1008">Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1009">場合`comparer`が提供されるの要素、<xref:System.Collections.Generic.List%601>を指定して並べ替える<xref:System.Collections.Generic.IComparer%601>実装します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1009">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="b83ea-1010">場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`を実装、<xref:System.IComparable%601>ジェネリック インターフェイスし、使用可能な場合は、その実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1010">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="b83ea-1011">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`を実装する、<xref:System.IComparable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1011">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="b83ea-1012">場合型`T`はいずれのインターフェイスを実装しません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1012">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="b83ea-1013">このメソッドを使用して<xref:System.Array.Sort%2A?displayProperty=nameWithType>、内省的で並べ替えを次のように適用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1013">This method uses <xref:System.Array.Sort%2A?displayProperty=nameWithType>, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="b83ea-1014">挿入の並べ替えアルゴリズムを使用してパーティションのサイズが 16 個未満の要素の場合は、</span><span class="sxs-lookup"><span data-stu-id="b83ea-1014">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</span></span>  
  
-   <span data-ttu-id="b83ea-1015">パーティションの数が 2 つのログを超えた場合*n*ここで、 *n*範囲を使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズムです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1015">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="b83ea-1016">それ以外の場合、クイック ソート アルゴリズムを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1016">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="b83ea-1017">この実装は、不安定な並べ替えを実行しますつまり、2 つの要素が等しい場合、順序が維持されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1017">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="b83ea-1018">これに対し、安定した並べ替えには、同じである要素の順序が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1018">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="b83ea-1019">平均すると、このメソッドは、O (*n*ログ*n*) 操作、場所*n*は<xref:System.Collections.Generic.List%601.Count%2A>最悪の場合ですこれは、O (*n* <sup>。2</sup>) 操作です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1019">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-1020">次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードおよび<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1020">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="b83ea-1021">実装する DinoCompare を名前付き文字列の代替の比較演算子が定義されています、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual C で) ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1021">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="b83ea-1022">比較子が次のように動作: 比較対照値があるテスト最初に、 `null`、null 参照が null でないより小さいとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1022">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="b83ea-1023">次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1023">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="b83ea-1024">3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1024">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="b83ea-1025">A<xref:System.Collections.Generic.List%601>の文字列が作成され、5 つ herbivorous 恐竜やから恐竜の 3 つの名前に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1025">A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</span></span> <span data-ttu-id="b83ea-1026">2 つのグループの各名前はない任意の特定の並べ替え順序でできます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1026">Within each of the two groups, the names are not in any particular sort order.</span></span> <span data-ttu-id="b83ea-1027">一覧が表示されます、恐竜の範囲は、代替の比較子を使用して並べ替えられておよびが再度表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1027">The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</span></span>  
  
 <span data-ttu-id="b83ea-1028"><xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> "Brachiosaurus"恐竜の範囲のみを検索するメソッドのオーバー ロードが使用されるからです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1028">The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for "Brachiosaurus".</span></span> <span data-ttu-id="b83ea-1029">文字列が見つからないとビットごとの補数 (、~ c# および Visual C で演算子`Xor`Visual Basic では-1) によって返される負の数の<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドは、新しい文字列を挿入するためのインデックスとして使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1029">The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-1030">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1030">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="b83ea-1031">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1031">-or-</span>
          </span>
          <span data-ttu-id="b83ea-1032">
            <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1032">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-1033">
            <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を指定していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1033">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="b83ea-1034">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1034">-or-</span>
          </span>
          <span data-ttu-id="b83ea-1035">
            <paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1035">The implementation of <paramref name="comparer" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="b83ea-1036">たとえば、項目をそれ自体と比較する場合、<paramref name="comparer" /> は 0 を返さない可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1036">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b83ea-1037">
            <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1037">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-1038">
            <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1038">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b83ea-1039">
            <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1039">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b83ea-1040">
            <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1040">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1041">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1041">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="b83ea-1042">読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1042">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="b83ea-1043">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1043">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-1044">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1044">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-1045">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1045">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1046">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1046">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="b83ea-1047">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1047">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="b83ea-1048">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1048">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="b83ea-1049">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1049">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="b83ea-1050">この位置にある、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>プロパティが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1050">At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined.</span></span> <span data-ttu-id="b83ea-1051">そのため、呼び出す必要があります、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<xref:System.Collections.Generic.IEnumerator%601.Current%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1051">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="b83ea-1052"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>プロパティまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1052">The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="b83ea-1053"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1053"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="b83ea-1054">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1054">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="b83ea-1055">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1055">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="b83ea-1056">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1056">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="b83ea-1057"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1057">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="b83ea-1058">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1058">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="b83ea-1059">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1059">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="b83ea-1060">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1060">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="b83ea-1061">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1061">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="b83ea-1062">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1062">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="b83ea-1063"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1063">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="b83ea-1064">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1064">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="b83ea-1065">
            <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1065">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="b83ea-1066">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1066">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="b83ea-1067">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1067">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-1068">
            <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。コピーは特定の <see cref="T:System.Array" /> のインデックスから開始されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1068">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b83ea-1069">場合、ソースの種類<xref:System.Collections.ICollection>変換先の型に自動的にキャストすることはできません`array`の非ジェネリックの実装<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>スロー<xref:System.InvalidCastException>汎用実装でスローされ、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1069">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="b83ea-1070">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1070">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-1071">
            <paramref name="array" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1071">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-1072">
            <paramref name="arrayIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1072">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-1073">
            <paramref name="array" /> が多次元です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1073">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="b83ea-1074">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1074">-or-</span>
          </span>
          <span data-ttu-id="b83ea-1075">
            <paramref name="array" /> には、0 から始まるインデックス番号がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1075">
              <paramref name="array" /> does not have zero-based indexing.</span>
          </span>
          <span data-ttu-id="b83ea-1076">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1076">-or-</span>
          </span>
          <span data-ttu-id="b83ea-1077">コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1077">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="b83ea-1078">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1078">-or-</span>
          </span>
          <span data-ttu-id="b83ea-1079">コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1079">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-1080">
            <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1080">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b83ea-1081">
            <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1081">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b83ea-1082">
            <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1082">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1083"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1083">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="b83ea-1084">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1084">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="b83ea-1085">まれに、列挙型と競合書き込みアクセスでは、列挙中にコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1085">In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="b83ea-1086">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1086">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="b83ea-1087"><xref:System.Collections.ICollection.SyncRoot%2A> アクセスを同期するために使用できるオブジェクトを返します、<xref:System.Collections.ICollection>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1087"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="b83ea-1088">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1088">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="b83ea-1089">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1089">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-1090">
            <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1090">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b83ea-1091">
            <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1091">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="b83ea-1092">
            <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1092">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1093"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1093">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="b83ea-1094">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1094">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="b83ea-1095">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1095">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="b83ea-1096">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1096">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="b83ea-1097"><xref:System.Collections.ICollection.SyncRoot%2A> アクセスを同期するために使用できるオブジェクトを返します、<xref:System.Collections.ICollection>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1097"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="b83ea-1098">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1098">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="b83ea-1099">次のコードの使用を示しています、 <xref:System.Collections.ICollection.SyncRoot%2A> c#、C++、および Visual Basic のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1099">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot)   
{  
    // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
    ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try   
{  
    Monitor::Enter(ic->SyncRoot);  
    // Access the collection.  
}  
finally   
{  
    Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="b83ea-1100">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1100">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-1101">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1101">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-1102">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1102">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1103">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1103">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="b83ea-1104">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1104">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="b83ea-1105">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1105">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="b83ea-1106">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1106">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="b83ea-1107"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1107"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="b83ea-1108">この位置にある、<xref:System.Collections.IEnumerator.Current%2A>プロパティが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1108">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="b83ea-1109">そのため、呼び出す必要があります、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<xref:System.Collections.IEnumerator.Current%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1109">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="b83ea-1110"><xref:System.Collections.IEnumerator.Current%2A>プロパティでは、同じオブジェクトを取得するまで<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>と呼びます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1110">The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="b83ea-1111"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1111"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="b83ea-1112">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1112">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="b83ea-1113">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1113">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="b83ea-1114">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1114">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="b83ea-1115"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1115">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="b83ea-1116">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1116">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="b83ea-1117">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1117">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="b83ea-1118">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1118">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="b83ea-1119">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1119">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="b83ea-1120">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1120">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="b83ea-1121"><xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1121">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="b83ea-1122">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1122">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-1123">
            <see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1123">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-1124">
            <see cref="T:System.Collections.IList" /> に項目を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1124">Adds an item to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-1125">新しい要素が挿入された位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1125">The position into which the new element was inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1126">場合<xref:System.Collections.Generic.List%601.Count%2A>はより小さい<xref:System.Collections.Generic.List%601.Capacity%2A>、このメソッドは、o (1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1126">If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation.</span></span> <span data-ttu-id="b83ea-1127">容量は、新しい要素を格納するためにする必要があります、このメソッドが O (*n*) 操作、場所*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1127">If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-1128">
            <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1128">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ item) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-1129">
            <see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1129">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-1130">
            <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1130">Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-1131">
            <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1131">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1132">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1132">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="b83ea-1133">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1133">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ item) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-1134">
            <see cref="T:System.Collections.IList" /> 内で検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1134">The object to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-1135">
            <see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1135">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-1136">リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1136">The index of <paramref name="item" /> if found in the list; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1137">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1137">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="b83ea-1138">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1138">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-1139">
            <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1139">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ item) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-1140">
            <c>item</c> を挿入する位置の、0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1140">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="b83ea-1141">
            <see cref="T:System.Collections.IList" /> に挿入するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1141">The object to insert into the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-1142">指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1142">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1143">`index` が <xref:System.Collections.IList> 内の項目数に等しければ、`item` が末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1143">If `index` equals the number of items in the <xref:System.Collections.IList>, then `item` is appended to the end.</span></span>  
  
 <span data-ttu-id="b83ea-1144">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1144">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-1145">
            <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1145">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-1146">
            <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1146">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-1147">
            <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1147">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b83ea-1148">
            <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1148">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b83ea-1149">
            <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1149">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1150">固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1150">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="b83ea-1151">固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1151">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="b83ea-1152">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1152">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-1153">
            <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1153">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b83ea-1154">
            <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1154">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b83ea-1155">
            <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1155">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1156">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1156">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="b83ea-1157">読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1157">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="b83ea-1158">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1158">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="b83ea-1159">取得または設定する要素の、0 から始まるインデックス番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1159">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-1160">指定したインデックスにある要素を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1160">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b83ea-1161">指定したインデックス位置にある要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1161">The element at the specified index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1162">C# 言語を使用して、[この](~/docs/csharp/language-reference/keywords/this.md)キーワードを実装する代わりに、インデクサーの定義、<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1162">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> property.</span></span> <span data-ttu-id="b83ea-1163">Visual Basic は、<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1163">Visual Basic implements <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="b83ea-1164">このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1164">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b83ea-1165">
            <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1165">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-1166">プロパティが設定されていて、<paramref name="value" /> が <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1166">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (item As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ item) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="b83ea-1167">
            <see cref="T:System.Collections.IList" /> から削除するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1167">The object to remove from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-1168">特定のオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1168">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1169">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1169">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="b83ea-1170">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1170">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b83ea-1171">
            <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1171">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-1172">
            <see cref="T:System.Collections.Generic.List`1" /> の要素を新しい配列にコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1172">Copies the elements of the <see cref="T:System.Collections.Generic.List`1" /> to a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-1173">
            <see cref="T:System.Collections.Generic.List`1" /> の要素のコピーを格納する配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1173">An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1174">要素のコピーを使用して<xref:System.Array.Copy%2A?displayProperty=nameWithType>、これは、O (*n*) 操作、場所*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1174">The elements are copied using <xref:System.Array.Copy%2A?displayProperty=nameWithType>, which is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="b83ea-1175">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1175">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-1176">次の例で、<xref:System.Collections.Generic.List%601.ToArray%2A>メソッドと他の方法で、<xref:System.Collections.Generic.List%601>範囲に作用するクラス。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1176">The following example demonstrates the <xref:System.Collections.Generic.List%601.ToArray%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="b83ea-1177">この例の最後に、<xref:System.Collections.Generic.List%601.GetRange%2A>メソッドを使用して、リストから、インデックス位置 2 から 3 つの項目を取得します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1177">At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2.</span></span> <span data-ttu-id="b83ea-1178"><xref:System.Collections.Generic.List%601.ToArray%2A>メソッドが、結果として得られる<xref:System.Collections.Generic.List%601>、3 つの要素の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1178">The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements.</span></span> <span data-ttu-id="b83ea-1179">配列の要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1179">The elements of the array are displayed.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b83ea-1180">
            <see cref="T:System.Collections.Generic.List`1" /> 内にある実際の要素数がしきい値未満の場合は、容量をその数に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1180">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.List`1" />, if that number is less than a threshold value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1181">このメソッドは、コレクションのメモリ オーバーヘッドを最小要素がコレクションに追加されない場合に使用できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1181">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="b83ea-1182">再割り当てすることや、大規模なコピーのコスト<xref:System.Collections.Generic.List%601>考慮する必要が、ただし、ため、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドは何もリストが容量の 90% 以上である場合。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1182">The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="b83ea-1183">これは、比較的小さい向上のための大規模な再割り当てコストをかけず回避できます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1183">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b83ea-1184">現在のしきい値の 90% は、将来のリリースで変更があります。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1184">The current threshold of 90 percent might change in future releases.</span></span>  
  
 <span data-ttu-id="b83ea-1185">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1185">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="b83ea-1186">リセットする、<xref:System.Collections.Generic.List%601>を初期状態に呼び出し、<xref:System.Collections.Generic.List%601.Clear%2A>メソッドを呼び出す前に、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1186">To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="b83ea-1187">空のトリミング<xref:System.Collections.Generic.List%601>のキャパシティを設定、<xref:System.Collections.Generic.List%601>を既定の容量。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1187">Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="b83ea-1188">使用して、容量を設定することも、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1188">The capacity can also be set using the <xref:System.Collections.Generic.List%601.Capacity%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-1189">次の例では、容量およびの数を確認する方法、<xref:System.Collections.Generic.List%601>を単純なビジネス オブジェクトを含むし、使用方法を示します、<xref:System.Collections.Generic.List%601.TrimExcess%2A>余分な容量を削除する方法です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1189">The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="b83ea-1190">次の例で、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1190">The following example demonstrates the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="b83ea-1191">いくつかのプロパティとメソッド、<xref:System.Collections.Generic.List%601>を追加、insert、および文字列の一覧から項目を削除するクラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1191">Several properties and methods of the <xref:System.Collections.Generic.List%601> class are used to add, insert, and remove items from a list of strings.</span></span> <span data-ttu-id="b83ea-1192">次に、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドは、数と一致する容量の削減に使用され、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1192">Then the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="b83ea-1193">未使用の容量が合計容量の 10% 未満である場合、リストがされているサイズ変更されません。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1193">If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</span></span> <span data-ttu-id="b83ea-1194">最後に、一覧の内容が消去されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1194">Finally, the contents of the list are cleared.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.Clear" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TrueForAll">
      <MemberSignature Language="C#" Value="public bool TrueForAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrueForAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrueForAll (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrueForAll(Predicate&lt;T&gt; ^ match);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="b83ea-1195">要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1195">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions to check against the elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b83ea-1196">
            <see cref="T:System.Collections.Generic.List`1" /> 内のすべての要素が、指定した述語によって定義される条件に一致するかどうかを調べます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1196">Determines whether every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b83ea-1197">
            <see cref="T:System.Collections.Generic.List`1" /> 内のすべての要素が、指定した述語によって定義される条件に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1197">
              <see langword="true" /> if every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b83ea-1198">リストに要素がない場合、戻り値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1198">If the list has no elements, the return value is <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b83ea-1199"><xref:System.Predicate%601>を返すメソッドをデリゲート`true`デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1199">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="b83ea-1200">現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>デリゲート、および処理が停止しているデリゲートが返されるときに`false`任意の要素。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1200">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when the delegate returns `false` for any element.</span></span> <span data-ttu-id="b83ea-1201">要素は順番に処理され、すべての呼び出しは 1 つのスレッドで行われます。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1201">The elements are processed in order, and all calls are made on a single thread.</span></span>  
  
 <span data-ttu-id="b83ea-1202">このメソッドは、O (*n*) 操作では、ここで*n*は<xref:System.Collections.Generic.List%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1202">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b83ea-1203">次の例で、<xref:System.Collections.Generic.List%601.TrueForAll%2A>メソッドを使用して、他のいくつかの方法<xref:System.Predicate%601>汎用デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1203">The following example demonstrates the <xref:System.Collections.Generic.List%601.TrueForAll%2A> method and several other methods that use <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="b83ea-1204">A<xref:System.Collections.Generic.List%601>文字列の作成、"saurus"で終わる (位置 1 から 5 など) のうちの 2 台の 8 恐竜の名前を含むです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1204">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="b83ea-1205">という名前の検索述語メソッドも定義`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1205">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="b83ea-1206"><xref:System.Collections.Generic.List%601.TrueForAll%2A>メソッドは、最初に、各要素を順番に渡してから、リストを走査、`EndsWithSaurus`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1206">The <xref:System.Collections.Generic.List%601.TrueForAll%2A> method traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="b83ea-1207">検索を停止するときに、`EndsWithSaurus`メソッドを返します。`false`です。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1207">The search stops when the `EndsWithSaurus` method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b83ea-1208">C# および Visual Basic の場合は、その必要はありませんを作成する、`Predicate<string>`委任 (`Predicate(Of String)` Visual Basic の) 明示的にします。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1208">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="b83ea-1209">これらの言語では、コンテキストから適切なデリゲートを推論し、自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="b83ea-1209">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b83ea-1210">
            <paramref name="match" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b83ea-1210">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
  </Members>
</Type>