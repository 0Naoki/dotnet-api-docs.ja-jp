<Type Name="List&lt;T&gt;" FullName="System.Collections.Generic.List&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc26ac9c2f51fa0b048df3ac25a13ac3d369c241" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37702641" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class List&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit List`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.List`1" />
  <TypeSignature Language="VB.NET" Value="Public Class List(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class List : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList" />
  <TypeSignature Language="F#" Value="type List&lt;'T&gt; = class&#xA;    interface IList&lt;'T&gt;&#xA;    interface IList&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">リスト内の要素の型。</typeparam>
    <summary>インデックスを使用してアクセスできる、厳密に型指定されたオブジェクトのリストを表します。 リストの検索、並べ替え、および操作のためのメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>クラスはジェネリックと同等の<xref:System.Collections.ArrayList>クラス。 実装、<xref:System.Collections.Generic.IList%601>サイズが動的に拡大されるとして配列を使用してジェネリック インターフェイスが必要です。  
  
 項目を追加することができます、<xref:System.Collections.Generic.List%601>を使用して、<xref:System.Collections.Generic.List%601.Add%2A>または<xref:System.Collections.Generic.List%601.AddRange%2A>メソッド。  
  
 <xref:System.Collections.Generic.List%601>クラスは、等値比較子と順序比較子の両方を使用します。  
  
-   などのメソッド<xref:System.Collections.Generic.List%601.Contains%2A>、 <xref:System.Collections.Generic.List%601.IndexOf%2A>、 <xref:System.Collections.Generic.List%601.LastIndexOf%2A>、および<xref:System.Collections.Generic.Dictionary%602.Remove%2A>リストの要素の等値比較子を使用します。 型の既定の等値比較子`T`は次のように決定されます。 場合型`T`実装、<xref:System.IEquatable%601>ジェネリック インターフェイスは、等値比較子は、<xref:System.IEquatable%601.Equals%28%600%29>メソッドはそのインターフェイスの既定の等値比較子は、それ以外の場合、<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>します。  
  
-   などのメソッド<xref:System.Collections.Generic.List%601.BinarySearch%2A>と<xref:System.Collections.Generic.List%601.Sort%2A>リストの要素の順序比較子を使用します。 型の既定の比較子`T`は次のように決定されます。  場合型`T`実装、<xref:System.IComparable%601>ジェネリック インターフェイスは、既定の比較子は、 <xref:System.IComparable%601.CompareTo%28%600%29> ; そのインターフェイスのメソッドの場合型`T`非ジェネリック実装<xref:System.IComparable>インターフェイスで、既定値比較子は、<xref:System.IComparable.CompareTo%28System.Object%29>そのインターフェイスのメソッド。 場合型`T`どちらのインターフェイスを実装する既定の比較子はありませんし、比較子または比較デリゲートを明示的に指定する必要があります。  
  
 <xref:System.Collections.Generic.List%601>並べ替えの基準とは限りません。  並べ替える必要があります、<xref:System.Collections.Generic.List%601>操作を実行する前に (など<xref:System.Collections.Generic.List%601.BinarySearch%2A>) を必要とする、<xref:System.Collections.Generic.List%601>並べ替えられます。  
  
 このコレクション内の要素は、整数インデックスを使用してアクセスできます。  このコレクションのインデックスは 0 から始まります。  
  
 非常に大きな<xref:System.Collections.Generic.List%601>オブジェクトを設定して、64 ビット システム上の 20億要素に最大容量を増やすことができます、`enabled`する構成要素の属性`true`実行時環境でします。  
  
 <xref:System.Collections.Generic.List%601> 受け入れる`null`参照の有効な値の型し、重複する要素を使用します。  
  
 変更不可バージョンを<xref:System.Collections.Generic.List%601>クラスを参照してください<xref:System.Collections.Immutable.ImmutableList%601>します。  
  
## <a name="performance-considerations"></a>パフォーマンスに関する考慮事項  
 使用するかどうかを決定するときに、<xref:System.Collections.Generic.List%601>または<xref:System.Collections.ArrayList>ことに注意して同様の機能があるは、クラス、<xref:System.Collections.Generic.List%601>クラスは、ほとんどの場合、パフォーマンスが向上し、タイプ セーフです。 型の参照型を使用する場合`T`の<xref:System.Collections.Generic.List%601>クラス、2 つのクラスの動作は同じです。 ただし、型の値の型が使用されている場合`T`実装とボックス化の問題を考慮する必要があります。  
  
 型の値の型が使用されている場合`T`、コンパイラ生成の実装、<xref:System.Collections.Generic.List%601>具体的にはその値の型のクラス。 つまり、リストの要素を<xref:System.Collections.Generic.List%601>オブジェクトは、要素を使用できる、していないリストの要素のボックス化を保存するメモリは、クラスの実装を生成するために使用するメモリよりも大きい約 500 のリストの要素が作成された後、ボックス化する必要はありません。  
  
 型に使用される値型を確認して`T`実装、<xref:System.IEquatable%601>ジェネリック インターフェイス。 場合などのメソッド、<xref:System.Collections.Generic.List%601.Contains%2A>呼び出す必要があります、<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>メソッドで、ボックスの一覧の影響を受ける要素。 値の型が実装されている場合、<xref:System.IComparable>インターフェイスを所有しているソース コードも実装、<xref:System.IComparable%601>ジェネリック インターフェイスを防ぐために、<xref:System.Collections.Generic.List%601.BinarySearch%2A>と<xref:System.Collections.Generic.List%601.Sort%2A>リストの要素のボックス化からメソッド。 ソース コードを所有していない場合、<xref:System.Collections.Generic.IComparer%601>オブジェクトを<xref:System.Collections.Generic.List%601.BinarySearch%2A>と<xref:System.Collections.Generic.List%601.Sort%2A>メソッド  
  
 種類に固有の実装を使用する方が得策ですが、<xref:System.Collections.Generic.List%601>クラスを使用してではなく、<xref:System.Collections.ArrayList>クラスまたは自分で厳密に型指定されたラッパー コレクションを作成します。 理由は、.NET Framework の動作を既に実装を行う必要があり、共通言語ランタイムは、Microsoft 中間言語コードと、実装のことはできません、メタデータを共有できますです。  
  
## <a name="f-considerations"></a>F# に関する考慮事項  
 <xref:System.Collections.Generic.List%601>頻度の低い f# コードでクラスを使用します。  代わりに、[一覧](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)、通常の優先は、変更不可で、シングル リンク リストであります。 F# リストは、順序付けられた、変更できない一連の値を提供され、関数型スタイルの開発で使用するためサポートされます。 F# から使用すると、<xref:System.Collections.Generic.List%601>でクラスを参照する通常の[ResizeArray\<' T >](https://msdn.microsoft.com/library/ee353447.aspx) f# リストで名前の競合を回避するために省略名を入力  
  
   
  
## Examples  
 次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<xref:System.Collections.Generic.List%601>します。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 次の例は、いくつかのプロパティとメソッドの<xref:System.Collections.Generic.List%601>文字列型のジェネリック クラスです。 (の例については、<xref:System.Collections.Generic.List%601>の複合型は、次を参照してください、<xref:System.Collections.Generic.List%601.Contains%2A>メソッドです。)。  
  
 既定のコンス トラクターを使用して、既定の容量で文字列のリストを作成できます。 <xref:System.Collections.Generic.List%601.Capacity%2A>プロパティを表示し、<xref:System.Collections.Generic.List%601.Add%2A>メソッドを使用して、複数の項目を追加します。 項目が表示されます、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティの表示と組み合わせて再度、<xref:System.Collections.Generic.List%601.Count%2A>プロパティは、必要に応じて、容量が増加したことを表示します。  
  
 <xref:System.Collections.Generic.List%601.Contains%2A>メソッドは、リスト内の項目の存在をテストするため、<xref:System.Collections.Generic.List%601.Insert%2A>リストの途中で新しい項目を挿入するメソッドを使用して、一覧の内容が再度表示されます。  
  
 既定の<xref:System.Collections.Generic.List%601.Item%2A>プロパティ (c# のインデクサー) を使用して、項目を取得、<xref:System.Collections.Generic.List%601.Remove%2A>以前では、追加の重複する項目の最初のインスタンスを削除するメソッドを使用し、内容が再度表示されます。 <xref:System.Collections.Generic.List%601.Remove%2A>メソッドは常に見つけた最初のインスタンスを削除します。  
  
 <xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドを使用して、数と一致する容量を削減し、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが表示されます。 未使用の容量が合計容量の 10% 未満である場合、リストはしないがサイズ変更されました。  
  
 最後に、<xref:System.Collections.Generic.List%601.Clear%2A>メソッドを使用して、一覧から、すべての項目を削除し、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが表示されます。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
    </remarks>
    <threadsafe>パブリック静的 (<see langword="Shared" /> Visual Basic で) この型のメンバーはスレッド セーフです。 インスタンス メンバーの場合は、スレッド セーフであるとは限りません。  複数の読み取り操作を実行するには、安全では、 <see cref="T:System.Collections.Generic.List`1" />、読み取られるときに、コレクションが変更された場合に、問題が発生することです。 スレッド セーフを確保するには、読み取り中にコレクションをロックまたは書き込み操作。 読み取りと書き込みの複数のスレッドがアクセスするコレクションを有効にするには、独自の同期を実装する必要があります。 組み込みの同期で、コレクション内のクラスを参照してください。、<see cref="N:System.Collections.Concurrent" />名前空間。 スレッド セーフな本質的に代わりに、次を参照してください。、<see cref="T:System.Collections.Immutable.ImmutableList`1" />クラス。</threadsafe>
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.Immutable.ImmutableList`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 容量を<xref:System.Collections.Generic.List%601>は要素の数を<xref:System.Collections.Generic.List%601>を保持できます。 要素が追加される、<xref:System.Collections.Generic.List%601>容量は自動的に増加内部配列を再割り当てすることで必要とします。  
  
 使用して、コレクションのサイズを推定できる場合、<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29>コンス トラクターと初期容量を指定する数の要素を追加するときにサイズ変更操作を実行する必要はありません、<xref:System.Collections.Generic.List%601>します。  
  
 呼び出すことによって、容量を削減できる、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドかを設定して、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティに明示的にします。 メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<xref:System.Collections.Generic.List%601>します。  
  
 このコンス トラクターは、o (1) 操作です。  
  
   
  
## Examples  
 次の例では、既定のコンス トラクター、<xref:System.Collections.Generic.List%601>ジェネリック クラスです。 既定のコンス トラクターは、表示することで示すように既定の容量をリストを作成、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティ。  
  
 例では、追加するには、挿入、およびこれらのメソッドを使用するように、容量がどのように変化するかを示す項目を削除します。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.List&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="new System.Collections.Generic.List&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">新しいリストに要素がコピーされたコレクション。</param>
        <summary>指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素の上にコピー、<xref:System.Collections.Generic.List%601>コレクションの列挙子によって読み取られるときと同じ順序で。  
  
 このコンス トラクターは、O (*n*) 操作、 *n*内の要素の数は、`collection`します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.%23ctor%2A>コンス トラクターとのさまざまなメソッド、<xref:System.Collections.Generic.List%601>範囲で動作するクラス。 文字列の配列が作成され、配列の要素を含む一覧を作成して、コンス トラクターに渡されます。 <xref:System.Collections.Generic.List%601.Capacity%2A>プロパティが表示され、初期容量が正確に入力の要素を保持するために必要なものを表示します。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collection" /> は <see langword="null" />です。</exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.List&lt;'T&gt; : int -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="new System.Collections.Generic.List&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">新しいリストに格納できる要素の数。</param>
        <summary>空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 容量を<xref:System.Collections.Generic.List%601>は要素の数を<xref:System.Collections.Generic.List%601>を保持できます。 要素が追加される、<xref:System.Collections.Generic.List%601>容量は自動的に増加内部配列を再割り当てすることで必要とします。  
  
 数の要素を追加するときにサイズ変更操作を実行する必要はありませんの初期量を指定する場合は、コレクションのサイズを推定することができます、<xref:System.Collections.Generic.List%601>します。  
  
 呼び出すことによって、容量を削減できる、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドかを設定して、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティに明示的にします。 メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<xref:System.Collections.Generic.List%601>します。  
  
 このコンス トラクターは、O (*n*) 操作、 *n*は`capacity`します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29>コンス トラクター。 A <xref:System.Collections.Generic.List%601> 4 の容量を持つ文字列の作成、一覧の最終的なサイズがちょうど 4 とわかっているためです。 リストが 4 つの文字列に設定し、を使用して読み取り専用のコピーが作成された、<xref:System.Collections.Generic.List%601.AsReadOnly%2A>メソッド。  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> が 0 未満です。</exception>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(T item);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; unit&#xA;override this.Add : 'T -&gt; unit" Usage="list.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> の末尾にオブジェクトを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601> 受け入れる`null`参照の有効な値の型し、重複する要素を使用します。  
  
 場合<xref:System.Collections.Generic.List%601.Count%2A>既に等しい<xref:System.Collections.Generic.List%601.Capacity%2A>の容量、<xref:System.Collections.Generic.List%601>は内部の配列を自動的に再割り当てによって向上し、新しい要素を追加する前に、既存の要素が新しい配列にコピーされます。  
  
 場合<xref:System.Collections.Generic.List%601.Count%2A>がより小さい<xref:System.Collections.Generic.List%601.Capacity%2A>、このメソッドは o (1) 操作。 このメソッドになります、O が新しい要素を格納するために、容量が必要な場合 (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<xref:System.Collections.Generic.List%601>します。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 次の例は、いくつかのプロパティとメソッドの<xref:System.Collections.Generic.List%601>ジェネリック クラスなど、<xref:System.Collections.Generic.List%601.Add%2A>メソッド。 既定のコンス トラクターを使用して、容量が 0 の文字列のリストを作成できます。 <xref:System.Collections.Generic.List%601.Capacity%2A>プロパティが表示されたらをクリックし、<xref:System.Collections.Generic.List%601.Add%2A>メソッドを使用して、複数の項目を追加します。 項目が表示されます、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティの表示と組み合わせて再度、<xref:System.Collections.Generic.List%601.Count%2A>プロパティは、必要に応じて、容量が増加したことを表示します。  
  
 検索、挿入、および、リストから要素を削除するその他のプロパティとメソッドを使用し、最後に、一覧をクリアします。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'T&gt; -&gt; unit" Usage="list.AddRange collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <see cref="T:System.Collections.Generic.List`1" /> の末尾に要素が追加されるコレクション。 コレクション自体を <see langword="null" /> にすることはできませんが、型 <c>T</c> が参照型の場合、コレクションに格納する要素は <see langword="null" /> であってもかまいません。</param>
        <summary>指定したコレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コレクション内の要素の順序を保持、<xref:System.Collections.Generic.List%601>します。  
  
 場合、新しい<xref:System.Collections.Generic.List%601.Count%2A>(現在<xref:System.Collections.Generic.List%601.Count%2A>さらに、コレクションのサイズ) より大きくなります<xref:System.Collections.Generic.List%601.Capacity%2A>、容量、<xref:System.Collections.Generic.List%601>を新しい要素を対応するために内部の配列を自動的に再割り当てすることで、既存の要素は、新しい要素が追加される前に、新しい配列にコピーされます。  
  
 場合、<xref:System.Collections.Generic.List%601>を上げることがなく、新しい要素に対応できます、 <xref:System.Collections.Generic.List%601.Capacity%2A>、このメソッドは O (*n*) 操作、 *n*は追加される要素の数です。 このメソッドになります、O に新しい要素を格納するために、容量が必要な場合 (*n* + *m*) 操作、場所*n*要素の数です追加して*m*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.AddRange%2A>メソッドとその他の方法は、さまざまな、<xref:System.Collections.Generic.List%601>範囲で動作するクラス。 文字列の配列が作成され、配列の要素を含む一覧を作成して、コンス トラクターに渡されます。 <xref:System.Collections.Generic.List%601.AddRange%2A>とその引数リストで、メソッドが呼び出されます。 結果は、リストの現在の要素は、すべての要素を複製、リストの末尾に追加されます。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collection" /> は <see langword="null" />です。</exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnly">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!T&gt; AsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnly () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ AsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.AsReadOnly : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="list.AsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のコレクションの読み取り専用の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> ラッパーを返します。</summary>
        <returns>現在の <see cref="T:System.Collections.Generic.List`1" /> をラップする読み取り専用のラッパーとして動作するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変更を防ぐために、<xref:System.Collections.Generic.List%601>オブジェクト、このラッパーを介してのみ公開されます。 A<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>オブジェクトは、コレクションを変更するメソッドを公開しません。 ただし、基になる変更が加えられた場合<xref:System.Collections.Generic.List%601>オブジェクト、読み取り専用コレクションには、これらの変更が反映されます。  
  
 このメソッドは、o (1) 操作です。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.AsReadOnly%2A>メソッド。 A <xref:System.Collections.Generic.List%601> 4 の容量を持つ文字列の作成、一覧の最終的なサイズがちょうど 4 とわかっているためです。 4 つの文字列、リストが表示されます、<xref:System.Collections.Generic.List%601.AsReadOnly%2A>メソッドを使用して、読み取り専用の取得<xref:System.Collections.Generic.IList%601>元のリストをラップするジェネリック インターフェイスの実装。  
  
 使用して「コエロフィシス」に設定されて、元のリストの要素、<xref:System.Collections.Generic.List%601.Item%2A>プロパティ (c# のインデクサー) と、読み取り専用のリストの内容は、元のリストのラッパーであるかを示すもう一度表示します。  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>バイナリ サーチ アルゴリズムを使用して、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の特定の要素またはその一部を検索します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T -&gt; int" Usage="list.BinarySearch item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>既定の比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、既定の比較子を使用して<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>型`T`リストの要素の順序を決定します。 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>プロパティ確認を入力するかどうか`T`実装、<xref:System.IComparable%601>ジェネリック インターフェイスと、使用可能な場合は、その実装を使用します。  ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`実装、<xref:System.IComparable>インターフェイス。  場合型`T`いずれかのインターフェイスを実装していません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー、<xref:System.InvalidOperationException>します。  
  
 <xref:System.Collections.Generic.List%601>既に装; に従って並べ替える必要がありますそれ以外の場合、結果が正しくありません。  
  
 比較する`null`型のすべての参照では許可されを使用する場合は、例外を生成しません、<xref:System.IComparable%601>ジェネリック インターフェイス。 ときに、並べ替え、`null`未満、他のオブジェクトと見なされます。  
  
 場合、<xref:System.Collections.Generic.List%601>だけを含む同じの値を持つ 1 つ以上の要素を返します、出現してのいずれかの出現回数、必ずしも 1 つ目のいずれかを返す可能性があります。  
  
 場合、<xref:System.Collections.Generic.List%601>に指定した値が含まれていないメソッドは負の整数を返します。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。 値を挿入するときに、 <xref:System.Collections.Generic.List%601>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。  
  
 このメソッドは O (log *n*) 操作、場所*n*範囲内の要素の数です。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.Sort>メソッドのオーバー ロードと<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>メソッドのオーバー ロードします。 A<xref:System.Collections.Generic.List%601>文字列の任意の順序で、4 つの文字列を設定して作成されます。 一覧が表示され、並べ替え、もう一度表示されます。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>メソッドのオーバー ロードは、一覧にない 2 つの文字列を検索するために使用し、<xref:System.Collections.Generic.List%601.Insert%2A>に挿入するメソッドを使用します。 戻り値、<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>メソッドは、文字列は、一覧にないため、各ケースで負の値。 ビットごとの補数を取得 (、~ 演算子が c# および Visual C、 `Xor` -1 Visual Basic で) この負の数値の生成は、この場所にして、検索文字列より大きい一覧の最初の要素のインデックスには、並べ替えが保持されます順序。 2 番目の検索文字列は、カーソルの位置がリストの末尾に、一覧で、任意の要素を超えています。  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 <paramref name="T" /> の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="list.BinarySearch (item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。  または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
        <summary>指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 比較演算子は、要素の比較方法をカスタマイズします。 たとえば、使用することができます、<xref:System.Collections.CaseInsensitiveComparer>大文字の文字列検索を実行する比較子としてインスタンス。  
  
 場合`comparer`が提供されるの要素、<xref:System.Collections.Generic.List%601>指定して、指定した値と比較されます<xref:System.Collections.Generic.IComparer%601>実装します。  
  
 場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`実装、<xref:System.IComparable%601>ジェネリック インターフェイスと使用可能な場合は、その実装を使用します。  ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`実装、<xref:System.IComparable>インターフェイス。  場合型`T`いずれかのインターフェイスを実装していません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー<xref:System.InvalidOperationException>します。  
  
 <xref:System.Collections.Generic.List%601>既に装; に従って並べ替える必要がありますそれ以外の場合、結果が正しくありません。  
  
 比較する`null`型のすべての参照では許可されを使用する場合は、例外を生成しません、<xref:System.IComparable%601>ジェネリック インターフェイス。 ときに、並べ替え、`null`未満、他のオブジェクトと見なされます。  
  
 場合、<xref:System.Collections.Generic.List%601>だけを含む同じの値を持つ 1 つ以上の要素を返します、出現してのいずれかの出現回数、必ずしも 1 つ目のいずれかを返す可能性があります。  
  
 場合、<xref:System.Collections.Generic.List%601>に指定した値が含まれていないメソッドは負の整数を返します。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。 値を挿入するときに、 <xref:System.Collections.Generic.List%601>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。  
  
 このメソッドは O (log *n*) 操作、場所*n*範囲内の要素の数です。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードと<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードします。  
  
 例では、定義を実装する、DinoCompare という名前の文字列の代替の比較子、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual C で) ジェネリック インターフェイス。 比較子が次のように動作: 比較対照値があるテスト最初に、 `null`、null 参照が null でない未満として扱われます。 次に、文字列の長さを比較してより長い文字列が大きいと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較が使用されます。  
  
 A<xref:System.Collections.Generic.List%601>文字列の任意の順序で、4 つの文字列を設定して作成されます。 一覧が表示されます、代替の比較子を使用して並べ替えられ、表示されているもう一度。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードが複数の文字列の一覧で採用していない別の比較子を検索に使用されるからです。 <xref:System.Collections.Generic.List%601.Insert%2A>文字列を挿入するメソッドを使用します。 という名前の関数でこれら 2 つのメソッドにある`SearchAndInsert`、ビットごとの補数をコードと共に (、~ 演算子が c# および Visual C、 `Xor` Visual Basic で-1) によって返される負の数値の<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>のインデックスとして使用新しい文字列を挿入します。  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> が <see langword="null" /> です。また、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 <paramref name="T" /> の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(int32 index, int32 count, !T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(int index, int count, T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : int * int * 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="list.BinarySearch (index, count, item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">検索範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索する範囲の長さ。</param>
        <param name="item">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
        <summary>指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> の 1 つの要素の範囲を検索し、その要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 比較演算子は、要素の比較方法をカスタマイズします。 たとえば、使用することができます、<xref:System.Collections.CaseInsensitiveComparer>大文字の文字列検索を実行する比較子としてインスタンス。  
  
 場合`comparer`が提供されるの要素、<xref:System.Collections.Generic.List%601>指定して、指定した値と比較されます<xref:System.Collections.Generic.IComparer%601>実装します。  
  
 場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`実装、<xref:System.IComparable%601>ジェネリック インターフェイスと使用可能な場合は、その実装を使用します。  ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`実装、<xref:System.IComparable>インターフェイス。  場合型`T`いずれかのインターフェイスを実装していません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー<xref:System.InvalidOperationException>します。  
  
 <xref:System.Collections.Generic.List%601>既に装; に従って並べ替える必要がありますそれ以外の場合、結果が正しくありません。  
  
 比較する`null`型のすべての参照では許可されを使用する場合は、例外を生成しません、<xref:System.IComparable%601>ジェネリック インターフェイス。 ときに、並べ替え、`null`未満、他のオブジェクトと見なされます。  
  
 場合、<xref:System.Collections.Generic.List%601>だけを含む同じの値を持つ 1 つ以上の要素を返します、出現してのいずれかの出現回数、必ずしも 1 つ目のいずれかを返す可能性があります。  
  
 場合、<xref:System.Collections.Generic.List%601>に指定した値が含まれていないメソッドは負の整数を返します。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。 値を挿入するときに、 <xref:System.Collections.Generic.List%601>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。  
  
 このメソッドは O (log *n*) 操作、場所*n*範囲内の要素の数です。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードと<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードします。  
  
 例では、定義を実装する、DinoCompare という名前の文字列の代替の比較子、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual C で) ジェネリック インターフェイス。 比較子が次のように動作: 比較対照値があるテスト最初に、 `null`、null 参照が null でない未満として扱われます。 次に、文字列の長さを比較してより長い文字列が大きいと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較が使用されます。  
  
 A<xref:System.Collections.Generic.List%601>文字列の 5 つの herbivorous 恐竜やから恐竜が 3 つの名前を設定して作成します。 内で 2 つのグループごとに、名前は任意の特定の並べ替え順序でないですします。 一覧が表示されます、恐竜の範囲は、代替の比較子を使用して並べ替えられて一覧が再び表示されます。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> "Brachiosaurus"恐竜の範囲のみを検索するメソッドのオーバー ロードが使用されるからです。 文字列が見つからないとビットごとの補数 (、~ 演算子が c# および Visual C、 `Xor` Visual Basic で-1) によって返される負の数値の<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドが新しい文字列を挿入するためのインデックスとして使用します。  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  または、<paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の有効な範囲を示していません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> が <see langword="null" /> です。また、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 <paramref name="T" /> の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.Generic.List&lt;'T&gt;.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内部データ構造体がサイズ変更せずに格納できる要素の合計数を取得または設定します。</summary>
        <value>サイズ変更が必要となるまでに <see cref="T:System.Collections.Generic.List`1" /> に格納できる要素の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 要素の数を<xref:System.Collections.Generic.List%601>一方、サイズ変更が必要な場合は、前に格納できる<xref:System.Collections.Generic.List%601.Count%2A>が実際には要素の数、<xref:System.Collections.Generic.List%601>します。  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 常より大きいまたは等しい<xref:System.Collections.Generic.List%601.Count%2A>します。 場合<xref:System.Collections.Generic.List%601.Count%2A>を超える<xref:System.Collections.Generic.List%601.Capacity%2A>古い要素をコピーして、新しい要素を追加する前に、内部配列を自動的に再割り当てして要素を追加するときに容量が増やされます。  
  
 容量は数よりもずっと大きなによって使用されるメモリを縮小したい場合、 <xref:System.Collections.Generic.List%601>、呼び出すことによって、容量を減らすことができます、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドかを設定して、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティを明示的に低い値にします。 ときの値<xref:System.Collections.Generic.List%601.Capacity%2A>が内部配列が指定した容量を対応するために再割り当てもと、すべての要素がコピーされる、明示的に設定します。  
  
 このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、O (*n*) 操作、 *n*は新しい容量です。  
  
   
  
## Examples  
 次の例では、容量と数を確認する方法、<xref:System.Collections.Generic.List%601>する単純なビジネス オブジェクトを含むし、を使用して、<xref:System.Collections.Generic.List%601.TrimExcess%2A>余分な容量を削除する方法。  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 次の例は、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティ一覧のいくつかの時点。 既定のコンス トラクターは、容量が 0 の文字列のリストを作成するために使用し、<xref:System.Collections.Generic.List%601.Capacity%2A>これを実行するプロパティが表示されます。 後に、<xref:System.Collections.Generic.List%601.Add%2A>いくつかの項目を追加するメソッドを使用した、項目が表示されますをクリックし、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティが表示されますと組み合わせて再度、<xref:System.Collections.Generic.List%601.Count%2A>プロパティは、必要に応じて、容量が増加したことを表示します。  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A>後にもう一度表示されるプロパティ、<xref:System.Collections.Generic.List%601.TrimExcess%2A>の数と一致する容量を削減するメソッドを使用します。 最後に、<xref:System.Collections.Generic.List%601.Clear%2A>メソッドを使用して、一覧から、すべての項目を削除し、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが再び表示されます。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Collections.Generic.List`1.Capacity" /> は <see cref="P:System.Collections.Generic.List`1.Count" /> より小さい値に設定されます。</exception>
        <exception cref="T:System.OutOfMemoryException">システムで使用可能なメモリが不足しています。</exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="list.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> からすべての要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601.Count%2A> 0 に設定されているコレクションの要素からその他のオブジェクトへの参照が解放されることもできます。  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 変更されません。 容量をリセットする、<xref:System.Collections.Generic.List%601>を呼び出し、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドまたはセット、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティを直接します。 メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<xref:System.Collections.Generic.List%601>します。 空のトリミング<xref:System.Collections.Generic.List%601>の容量設定、<xref:System.Collections.Generic.List%601>を既定の容量。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.Clear%2A>メソッドと、その他のプロパティおよびのメソッドをさまざまな、<xref:System.Collections.Generic.List%601>ジェネリック クラスです。 <xref:System.Collections.Generic.List%601.Clear%2A> 、プログラムの最後に、一覧からすべての項目を削除するメソッドが使用される、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが表示されます。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.TrimExcess" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="list.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>ある要素が <see cref="T:System.Collections.Generic.List`1" /> 内に存在するかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、のオブジェクトの実装で定義されている既定の等値比較子を使用して、等しいかどうかを決定、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>メソッド`T`(リスト内の値の型)。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.Contains%2A>と<xref:System.Collections.Generic.List%601.Exists%2A>メソッド、<xref:System.Collections.Generic.List%601>を実装する単純なビジネス オブジェクトを格納している<xref:System.IEquatable%601.Equals%2A>します。  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 次の例は、型の複合オブジェクトの一覧を含む`Cube`します。 `Cube`クラスが実装する、<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>メソッド 2 つのキューブ、ディメンションが同じ場合に等価と見なされるようにします。 この例で、<xref:System.Collections.Generic.List%601.Contains%2A>メソッドを返します。`true`を指定したディメンションを持つキューブが既にコレクションであるため、します。  
  
 [!code-csharp[System.Collections.Generic.List.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.contains/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.contains/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Converter&lt;T,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!!TOutput&gt; ConvertAll&lt;TOutput&gt;(class System.Converter`2&lt;!T, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertAll(Of TOutput) (converter As Converter(Of T, TOutput)) As List(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA; System::Collections::Generic::List&lt;TOutput&gt; ^ ConvertAll(Converter&lt;T, TOutput&gt; ^ converter);" />
      <MemberSignature Language="F#" Value="member this.ConvertAll : Converter&lt;'T, 'Output&gt; -&gt; System.Collections.Generic.List&lt;'Output&gt;" Usage="list.ConvertAll converter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="converter" Type="System.Converter&lt;T,TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">変換後の配列要素の型。</typeparam>
        <param name="converter">各要素の型を変換するための <see cref="T:System.Converter`2" /> デリゲート。</param>
        <summary>現在の <see cref="T:System.Collections.Generic.List`1" /> の要素を別の型に変換し、変換された要素が格納されたリストを返します。</summary>
        <returns>現在の <see cref="T:System.Collections.Generic.List`1" /> の要素の型を変換した後の <see cref="T:System.Collections.Generic.List`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Converter%602>オブジェクトを対象の型に変換するメソッドをデリゲートです。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Converter%602>デリゲート、および変換された要素は、新しい保存<xref:System.Collections.Generic.List%601>します。  
  
 現在<xref:System.Collections.Generic.List%601>は変更されません。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例は、という名前のメソッドを定義します。`PointFToPoint`に変換する、<xref:System.Drawing.PointF>構造体を、<xref:System.Drawing.Point>構造体。 作成し、<xref:System.Collections.Generic.List%601>の<xref:System.Drawing.PointF>構造体を作成、`Converter\<PointF, Point>`デリゲート (`Converter(Of PointF, Point)` Visual Basic で) を表す、`PointFToPoint`メソッドに、デリゲートを渡します、<xref:System.Collections.Generic.List%601.ConvertAll%2A>メソッド。 <xref:System.Collections.Generic.List%601.ConvertAll%2A>メソッドは、入力リストの各要素に渡します、`PointFToPoint`メソッドは、の新しいリストに変換された要素と<xref:System.Drawing.Point>構造体。 両方の一覧が表示されます。  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="converter" /> は <see langword="null" />です。</exception>
        <altmember cref="T:System.Converter`2" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> またはその一部を配列にコピーします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] -&gt; unit" Usage="list.CopyTo array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体を互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して<xref:System.Array.Copy%2A?displayProperty=nameWithType>要素のコピー。  
  
 要素のコピー先は、<xref:System.Array>を列挙子が反復処理と同じ順序で、<xref:System.Collections.Generic.List%601>します。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.CopyTo%2A>メソッド。 A<xref:System.Collections.Generic.List%601>文字列の 5 つの文字列を設定して作成されます。 15 要素の空の文字列の配列を作成すると、および<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>メソッドのオーバー ロードは、一覧のすべての要素を配列の最初の要素で始まる配列にコピーするために使用します。 <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>メソッドのオーバー ロードを使用してすべての要素の配列のインデックス 6 で始まる配列にリスト (インデックス 5 空のまま) をコピーします。 最後に、<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードはインデックス 2 以降、一覧から 3 つの要素をコピーするには配列で始まる配列のインデックス 12 (したままインデックス 11 空) を使用します。 配列の内容は表示されます。  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="array" /> に含めることができる要素数を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="list.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="arrayIndex">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体を、互換性のある 1 次元配列の、指定したインデックスから始まる位置にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して<xref:System.Array.Copy%2A?displayProperty=nameWithType>要素のコピー。  
  
 要素のコピー先は、<xref:System.Array>を列挙子が反復処理と同じ順序で、<xref:System.Collections.Generic.List%601>します。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.CopyTo%2A>メソッド。 A<xref:System.Collections.Generic.List%601>文字列の 5 つの文字列を設定して作成されます。 15 要素の空の文字列の配列を作成すると、および<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>メソッドのオーバー ロードは、一覧のすべての要素を配列の最初の要素で始まる配列にコピーするために使用します。 <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>メソッドのオーバー ロードを使用してすべての要素の配列のインデックス 6 で始まる配列にリスト (インデックス 5 空のまま) をコピーします。 最後に、<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードはインデックス 2 以降、一覧から 3 つの要素をコピーするには配列で始まる配列のインデックス 12 (したままインデックス 11 空) を使用します。 配列の内容は表示されます。  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="arrayIndex" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 index, !T[] array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (index As Integer, array As T(), arrayIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int index, cli::array &lt;T&gt; ^ array, int arrayIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * 'T[] * int * int -&gt; unit" Usage="list.CopyTo (index, array, arrayIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">コピーを開始するコピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、0 から始まるインデックス番号。</param>
        <param name="array">
          <see cref="T:System.Collections.Generic.List`1" /> の要素のコピー先となる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="arrayIndex">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</param>
        <param name="count">コピーする要素の数。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうちある範囲の要素を、互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して<xref:System.Array.Copy%2A?displayProperty=nameWithType>要素のコピー。  
  
 要素のコピー先は、<xref:System.Array>を列挙子が反復処理と同じ順序で、<xref:System.Collections.Generic.List%601>します。  
  
 このメソッドは O (*n*) 操作、 *n*は`count`します。  
  
   
  
## Examples  
 次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.CopyTo%2A>メソッド。 A<xref:System.Collections.Generic.List%601>文字列の 5 つの文字列を設定して作成されます。 15 要素の空の文字列の配列を作成すると、および<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>メソッドのオーバー ロードは、一覧のすべての要素を配列の最初の要素で始まる配列にコピーするために使用します。 <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>メソッドのオーバー ロードを使用してすべての要素の配列のインデックス 6 で始まる配列にリスト (インデックス 5 空のまま) をコピーします。 最後に、<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードはインデックス 2 以降、一覧から 3 つの要素をコピーするには配列で始まる配列のインデックス 12 (したままインデックス 11 空) を使用します。 配列の内容は表示されます。  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  または、<paramref name="arrayIndex" /> が 0 未満です。  または、<paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> がコピー元の <see cref="T:System.Collections.Generic.List`1" /> の <see cref="P:System.Collections.Generic.List`1.Count" /> 以上です。  または、コピー元の <see cref="T:System.Collections.Generic.List`1" /> の <paramref name="index" /> から最後までの要素数が、コピー先の <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能な領域を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.List&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数を取得します。</summary>
        <value>
          <see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 要素の数ですが、<xref:System.Collections.Generic.List%601>のサイズを変更することが要求されるまでに格納できます。 <xref:System.Collections.Generic.List%601.Count%2A> 実際には要素の数が、<xref:System.Collections.Generic.List%601>します。  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 常より大きいまたは等しい<xref:System.Collections.Generic.List%601.Count%2A>します。 場合<xref:System.Collections.Generic.List%601.Count%2A>を超える<xref:System.Collections.Generic.List%601.Capacity%2A>古い要素をコピーして、新しい要素を追加する前に、内部配列を自動的に再割り当てして要素を追加するときに容量が増やされます。  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
   
  
## Examples  
 次の例では、容量と数を確認する方法、<xref:System.Collections.Generic.List%601>する単純なビジネス オブジェクトを含むし、を使用して、<xref:System.Collections.Generic.List%601.TrimExcess%2A>余分な容量を削除する方法。  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 次の例の値を示しています、<xref:System.Collections.Generic.List%601.Count%2A>一連の有効期間のさまざまな時点でのプロパティ。 その要素が表示されると、リストの作成および設定した後、<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが表示されます。 後にもう一度これらのプロパティが表示されます、<xref:System.Collections.Generic.List%601.TrimExcess%2A>されている方式と呼ばれる、および一覧の内容の後にもう一度がクリアされます。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Exists(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Exists : Predicate&lt;'T&gt; -&gt; bool" Usage="list.Exists match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> に、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</summary>
        <returns>指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、<see cref="T:System.Collections.Generic.List`1" /> に含まれる場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>一致が見つかったときに、デリゲートと処理が停止します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.Contains%2A>と<xref:System.Collections.Generic.List%601.Exists%2A>メソッド、<xref:System.Collections.Generic.List%601>を実装する単純なビジネス オブジェクトを格納している<xref:System.IEquatable%601.Equals%2A>します。  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 次の例で、<xref:System.Collections.Generic.List%601.Exists%2A>メソッドおよび使用するその他のいくつかのメソッド、<xref:System.Predicate%601>汎用デリゲート。  
  
 A<xref:System.Collections.Generic.List%601>文字列の作成、"saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含むです。 この例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。  
  
 <xref:System.Collections.Generic.List%601.Find%2A>、 <xref:System.Collections.Generic.List%601.FindLast%2A>、および<xref:System.Collections.Generic.List%601.FindAll%2A>メソッドを使用して検索の述語メソッドを使用して、一覧を検索し、 <xref:System.Collections.Generic.List%601.RemoveAll%2A> "saurus"で終わるすべてのエントリを削除するメソッドを使用します。  
  
 最後に、<xref:System.Collections.Generic.List%601.Exists%2A>メソッドが呼び出されます。 各要素を順番に渡す、最初からリストを走査する、`EndsWithSaurus`メソッド。 検索は停止し、メソッドが返す`true`場合、`EndsWithSaurus`メソッドを返します。 `true` 、任意の要素。 <xref:System.Collections.Generic.List%601.Exists%2A>メソッドを返します。`false`このようなすべての要素が削除されています。  
  
> [!NOTE]
>  C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。 これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public T Find (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Find(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Find(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Find : Predicate&lt;'T&gt; -&gt; 'T" Usage="list.Find match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>指定された述語によって定義された条件と一致する要素を検索し、<see cref="T:System.Collections.Generic.List`1" /> 全体の中で最もインデックス番号の小さい要素を返します。</summary>
        <returns>見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>で前進デリゲート、<xref:System.Collections.Generic.List%601>で最初の要素で始まると、最後の要素で終了します。  一致が見つかった場合は、処理が停止しました。  
  
> [!IMPORTANT]
>  値の型を含む一覧を検索するときに、型の既定値は、検索述語を満たさないことを確認します。 それ以外の場合、一致が見つからなかったことを示す既定値と、型の既定値をリストの要素を区別する手段はありません。 既定値は、検索述語を満たしている場合は、使用、<xref:System.Collections.Generic.List%601.FindIndex%2A>メソッド代わりにします。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.Find%2A>メソッドを<xref:System.Collections.Generic.List%601>単純な複雑なオブジェクトを格納しています。  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 次の例では、find メソッド、<xref:System.Collections.Generic.List%601>クラス。 例を<xref:System.Collections.Generic.List%601>クラスが含まれます`book`クラスのオブジェクト、 `Book`、データを使用して、[サンプル XML ファイル: 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。 `FillList`メソッドの例では使用して[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)のプロパティ値を XML から値を解析する、`book`オブジェクト。  
  
 次の表では、find メソッドに提供される例について説明します。  
  
|メソッド|例|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|ID を使用して、本を検索、 `IDToFind` predicate デリゲートです。<br /><br /> C# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|すべての書籍を持つ検索`Genre`プロパティは、「コンピューター」を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|2001 年を使用する前に、発行日を含むコレクション内の最後の書籍を検索、 `PubBefore2001` predicate デリゲートです。<br /><br /> C# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|最初のコンピューター書籍の使用のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|最後のコンピューター書籍の使用のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|最初のコンピューター書籍のインデックスを検索、コレクションの半分を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|最後のコンピューター書籍のインデックスを検索、コレクションの半分を使用して、 `FindComputer` predicate デリゲートです。|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindAll">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; FindAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAll (match As Predicate(Of T)) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ FindAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindAll : Predicate&lt;'T&gt; -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="list.FindAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>指定された述語によって定義された条件と一致するすべての要素を取得します。</summary>
        <returns>指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は、空の <see cref="T:System.Collections.Generic.List`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>デリゲート、および条件に一致する要素を保存、返される<xref:System.Collections.Generic.List%601>します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、find メソッド、<xref:System.Collections.Generic.List%601>クラス。 例を<xref:System.Collections.Generic.List%601>クラスが含まれます`book`クラスのオブジェクト、 `Book`、データを使用して、[サンプル XML ファイル: 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。 `FillList`メソッドの例では使用して[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)のプロパティ値を XML から値を解析する、`book`オブジェクト。  
  
 次の表では、find メソッドに提供される例について説明します。  
  
|メソッド|例|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|ID を使用して、本を検索、 `IDToFind` predicate デリゲートです。<br /><br /> C# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|すべての書籍を持つ検索`Genre`プロパティは、「コンピューター」を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|2001 年を使用する前に、発行日を含むコレクション内の最後の書籍を検索、 `PubBefore2001` predicate デリゲートです。<br /><br /> C# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|最初のコンピューター書籍の使用のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|最後のコンピューター書籍の使用のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|最初のコンピューター書籍のインデックスを検索、コレクションの半分を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|最後のコンピューター書籍のインデックスを検索、コレクションの半分を使用して、 `FindComputer` predicate デリゲートです。|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> またはその一部分から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。 このメソッドは、条件に一致する項目が見つからなかった場合に -1 を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>転送の最初の要素から開始し、最後の要素の終了が検索されます。  
  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。 デリゲート シグネチャを持ちます。  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、定義、 `Employee` 、2 つのフィールドを持つクラス`Name`と`Id`します。 定義されています、 `EmployeeSearch` 1 つのメソッドを持つクラス`StartsWith`、ことを示すかどうか、`Employee.Name`フィールドに用意されている指定した部分文字列で始まる、`EmployeeSearch`クラスのコンス トラクター。 このメソッドのシグネチャに注意してください。  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 渡すことができるデリゲートのシグネチャに対応する、<xref:System.Collections.Generic.List%601.FindIndex%2A>メソッド。 例では、インスタンス化します、`List<Employee>`オブジェクトを多数追加`Employee`objets し、その呼び出しを<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>メソッドは、最初の最初に、コレクション全体を検索するには、2 回`Employee`オブジェクト`Name`フィールドの開始"J"と、最初の 2 回目`Employee`オブジェクト`Name`フィールドは、"Ju"で始まります。  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex2.cs#2)]
 [!code-vb[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスから最後の要素までの範囲内で、指定した述語にで定義される条件に一致する要素を検索し、最初に見つかった 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>転送を開始位置として検索`startIndex`と最後の要素で終了します。  
  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。 デリゲート シグネチャを持ちます。  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*から要素の数は、`startIndex`の末尾に、<xref:System.Collections.Generic.List%601>します。  
  
   
  
## Examples  
 次の例では、定義、 `Employee` 、2 つのフィールドを持つクラス`Name`と`Id`します。 定義されています、 `EmployeeSearch` 1 つのメソッドを持つクラス`StartsWith`、ことを示すかどうか、`Employee.Name`フィールドに用意されている指定した部分文字列で始まる、`EmployeeSearch`クラスのコンス トラクター。 このメソッドのシグネチャに注意してください。  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 渡すことができるデリゲートのシグネチャに対応する、<xref:System.Collections.Generic.List%601.FindIndex%2A>メソッド。 例では、インスタンス化、`List<Employee>`オブジェクトを多数追加`Employee`objets し、その呼び出しを<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>以降その 5 番目のメンバー (つまり、4 のインデックス位置にあるメンバー) でコレクションを検索するには、2 回のメソッド。 最初の検索、初めて`Employee`オブジェクト`Name`フィールドは、"J"で始まる; 最初の検索にもう一度`Employee`オブジェクト`Name`フィールドは、"Ju"で始まります。  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex3.cs#3)]
 [!code-vb[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>転送を開始位置として検索が`startIndex`で終わる`startIndex`plus`count`から 1 を引いた場合`count`が 0 より大きい。  
  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。 デリゲート シグネチャを持ちます。  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は`count`します。  
  
   
  
## Examples  
 次の例では、定義、 `Employee` 、2 つのフィールドを持つクラス`Name`と`Id`します。 定義されています、 `EmployeeSearch` 1 つのメソッドを持つクラス`StartsWith`、ことを示すかどうか、`Employee.Name`フィールドに用意されている指定した部分文字列で始まる、`EmployeeSearch`クラスのコンス トラクター。 このメソッドのシグネチャに注意してください。  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 渡すことができるデリゲートのシグネチャに対応する、<xref:System.Collections.Generic.List%601.FindIndex%2A>メソッド。 例では、インスタンス化、`List<Employee>`オブジェクトを多数追加`Employee`objets し、その呼び出しを<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>コレクション全体を検索するには、2 回のメソッド (インデックスをインデックス 0 からメンバーは、 <xref:System.Collections.Generic.List%601.Count%2A> - 1)。 最初の検索、初めて`Employee`オブジェクト`Name`フィールドは、"J"で始まる; 最初の検索にもう一度`Employee`オブジェクト`Name`フィールドは、"Ju"で始まります。  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex1.cs#1)]
 [!code-vb[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。  または、<paramref name="count" /> が 0 未満です。  または、<paramref name="startIndex" /> および <paramref name="count" /> で、<see cref="T:System.Collections.Generic.List`1" /> の有効なセクションが指定されていません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLast">
      <MemberSignature Language="C#" Value="public T FindLast (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T FindLast(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLast (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T FindLast(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLast : Predicate&lt;'T&gt; -&gt; 'T" Usage="list.FindLast match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Collections.Generic.List`1" /> 全体を対象に検索し、最もインデックス番号の大きい要素を返します。</summary>
        <returns>見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>逆方向に移動、デリゲート、 <xref:System.Collections.Generic.List%601>、以降の最後の要素では、最初の要素で終わる。  一致が見つかった場合は、処理が停止しました。  
  
> [!IMPORTANT]
>  値の型を含む一覧を検索するときに、型の既定値は、検索述語を満たさないことを確認します。 それ以外の場合、一致が見つからなかったことを示す既定値と、型の既定値をリストの要素を区別する手段はありません。 既定値は、検索述語を満たしている場合は、使用、<xref:System.Collections.Generic.List%601.FindLastIndex%2A>メソッド代わりにします。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、find メソッド、<xref:System.Collections.Generic.List%601>クラス。 例を<xref:System.Collections.Generic.List%601>クラスが含まれます`book`クラスのオブジェクト、 `Book`、データを使用して、[サンプル XML ファイル: 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。 `FillList`メソッドの例では使用して[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)のプロパティ値を XML から値を解析する、`book`オブジェクト。  
  
 次の表では、find メソッドに提供される例について説明します。  
  
|メソッド|例|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|ID を使用して、本を検索、 `IDToFind` predicate デリゲートです。<br /><br /> C# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|すべての書籍を持つ検索`Genre`プロパティは、「コンピューター」を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|2001 年を使用する前に、発行日を含むコレクション内の最後の書籍を検索、 `PubBefore2001` predicate デリゲートです。<br /><br /> C# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|最初のコンピューター書籍の使用のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|最後のコンピューター書籍の使用のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|最初のコンピューター書籍のインデックスを検索、コレクションの半分を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|最後のコンピューター書籍のインデックスを検索、コレクションの半分を使用して、 `FindComputer` predicate デリゲートです。|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindLastIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> またはその一部分から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>後方の最後の要素から開始し、最初の要素の終了が検索されます。  
  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、find メソッド、<xref:System.Collections.Generic.List%601>クラス。 例を<xref:System.Collections.Generic.List%601>クラスが含まれます`book`クラスのオブジェクト、 `Book`、データを使用して、[サンプル XML ファイル: 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。 `FillList`メソッドの例では使用して[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)のプロパティ値を XML から値を解析する、`book`オブジェクト。  
  
 次の表では、find メソッドに提供される例について説明します。  
  
|メソッド|例|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|ID を使用して、本を検索、 `IDToFind` predicate デリゲートです。<br /><br /> C# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|すべての書籍を持つ検索`Genre`プロパティは、「コンピューター」を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|2001 年を使用する前に、発行日を含むコレクション内の最後の書籍を検索、 `PubBefore2001` predicate デリゲートです。<br /><br /> C# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|最初のコンピューター書籍の使用のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|最後のコンピューター書籍の使用のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|最初のコンピューター書籍のインデックスを検索、コレクションの半分を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|最後のコンピューター書籍のインデックスを検索、コレクションの半分を使用して、 `FindComputer` predicate デリゲートです。|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>で検索された旧バージョンと開始`startIndex`と最初の要素で終了します。  
  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、場所*n*の先頭から要素の数が、<xref:System.Collections.Generic.List%601>に`startIndex`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象のセクション内にある要素の数。</param>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスで終わり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>で検索された旧バージョンと開始`startIndex`で終わる`startIndex`マイナス`count`+ 1 場合、`count`が 0 より大きい。  
  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>を委任します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は`count`します。  
  
   
  
## Examples  
 次の例では、find メソッド、<xref:System.Collections.Generic.List%601>クラス。 例を<xref:System.Collections.Generic.List%601>クラスが含まれます`book`クラスのオブジェクト、 `Book`、データを使用して、[サンプル XML ファイル: 書籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。 `FillList`メソッドの例では使用して[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)のプロパティ値を XML から値を解析する、`book`オブジェクト。  
  
 次の表では、find メソッドに提供される例について説明します。  
  
|メソッド|例|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|ID を使用して、本を検索、 `IDToFind` predicate デリゲートです。<br /><br /> C# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|すべての書籍を持つ検索`Genre`プロパティは、「コンピューター」を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|2001 年を使用する前に、発行日を含むコレクション内の最後の書籍を検索、 `PubBefore2001` predicate デリゲートです。<br /><br /> C# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|最初のコンピューター書籍の使用のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|最後のコンピューター書籍の使用のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|最初のコンピューター書籍のインデックスを検索、コレクションの半分を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|最後のコンピューター書籍のインデックスを検索、コレクションの半分を使用して、 `FindComputer` predicate デリゲートです。|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。  または、<paramref name="count" /> が 0 未満です。  または、<paramref name="startIndex" /> および <paramref name="count" /> で、<see cref="T:System.Collections.Generic.List`1" /> の有効なセクションが指定されていません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class System.Action`1&lt;!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ForEach (action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ForEach(Action&lt;T&gt; ^ action);" />
      <MemberSignature Language="F#" Value="member this.ForEach : Action&lt;'T&gt; -&gt; unit" Usage="list.ForEach action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="action">
          <see cref="T:System.Collections.Generic.List`1" /> の各要素に対して実行する <see cref="T:System.Action`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> の各要素に対して、指定された処理を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Action%601>はオブジェクトの操作を実行するメソッドへのデリゲートが渡されました。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Action%601>を委任します。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
 基になるコレクションの本体での変更、<xref:System.Action%601>デリゲートがサポートされておらず、未定義の動作が発生します。  
  
   
  
## Examples  
 次の例では、使用、<xref:System.Action%601>の内容を印刷するデリゲートを<xref:System.Collections.Generic.List%601>オブジェクト。 この例では、`Print`一覧の内容をコンソールに表示するメソッドを使用します。  
  
> [!NOTE]
>  使用してコンテンツを表示するだけでなく、`Print`コンソールに結果を表示するメソッド、c# の例に示しますを使用します。  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">コレクションの要素が変更されています。</exception>
        <altmember cref="T:System.Action`1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.List`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As List(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.List&lt;'T&gt;.Enumerator" Usage="list.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> を反復処理する列挙子を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1.Enumerator" /> の <see cref="T:System.Collections.Generic.List`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual basic) 列挙子の複雑さが隠されています。 したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 この位置では、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>プロパティが定義されていません。 そのため、呼び出す必要がある、<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素を列挙子を進める<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>します。  
  
 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>プロパティまで同じオブジェクトを返します<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>が呼び出されます。 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A> を次の要素に設定します。  
  
 場合<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>返します`false`します。 この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>を返すことも`false`します。 最後の呼び出し場合<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>が定義されていません。 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。  
  
 コレクションが変更されない限り、列挙子は有効です。 無効になり、次の呼び出しは変更を追加するなど、コレクション変更、または要素を削除するには、列挙子が不可能<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>または<xref:System.Collections.Generic.List%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>スロー、<xref:System.InvalidOperationException>します。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。 列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。  
  
 このメソッドは、o (1) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.List`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (index As Integer, count As Integer) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ GetRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetRange : int * int -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="list.GetRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">範囲が開始する位置の、0 から始まる <see cref="T:System.Collections.Generic.List`1" /> のインデックス番号。</param>
        <param name="count">範囲内の要素の数。</param>
        <summary>コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピーを作成します。</summary>
        <returns>コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 または、参照型のコレクション、そのコレクションのサブセットの簡易コピーには、コレクションの要素への参照のみが含まれています。 オブジェクト自体はコピーされません。 新しいリスト内の参照は、元のリスト内の参照と同じオブジェクトをポイントします。  
  
 値の型のコレクションまたは、そのコレクションのサブセットの簡易コピーには、コレクションの要素が含まれています。 ただし、コレクションの要素にその他のオブジェクトへの参照が含まれている場合、それらのオブジェクトはコピーされません。 新しいコレクションの要素内の参照は、元のコレクションの要素内の参照と同じオブジェクトをポイントします。  
  
 これに対し、コレクションのディープ コピーを要素をコピーして、要素が直接または間接的に参照するすべて。  
  
 このメソッドは O (*n*) 操作、 *n*は`count`します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.GetRange%2A>メソッドとその他の方法、<xref:System.Collections.Generic.List%601>範囲で動作するクラス。 この例の最後に、<xref:System.Collections.Generic.List%601.GetRange%2A>メソッドを使用して、インデックス位置 2 以降、リストから 3 つの項目を取得します。 <xref:System.Collections.Generic.List%601.ToArray%2A>メソッドは、結果として<xref:System.Collections.Generic.List%601>、3 つの要素の配列を作成します。 配列の要素が表示されます。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  または、<paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の要素の有効範囲を示していません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体またはその一部において、最初に値が出現した位置のインデックス番号 (0 から始まる) を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="list.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最初に見つかったオブジェクトのインデックス (0 から始まる) を返します。</summary>
        <returns>
          <paramref name="item" /> 全体を対象に <see cref="T:System.Collections.Generic.List`1" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は –1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>転送の最初の要素から開始し、最後の要素の終了が検索されます。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.IndexOf%2A>メソッド。 A<xref:System.Collections.Generic.List%601>の文字列が作成されるインデックス位置 0 と 5 のインデックスの場所に 2 回、表示される 1 つのエントリを使用します。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%29>メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス 3 の場所で始まるリストとリストの末尾に至ると、文字列の 2 つ目の項目を検索します。 最後に、<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>は 2 つのインデックス位置にある先頭の 2 つのエントリの範囲を検索するメソッドのオーバー ロードが使用されます。 その範囲内で検索文字列のインスタンスがないため、-1 を返します。  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int -&gt; int" Usage="list.IndexOf (item, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は正しい値です。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、<paramref name="index" /> から最後の要素までの要素範囲の中で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>転送を開始位置として検索`index`と最後の要素で終了します。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*から要素の数は、`index`の末尾に、<xref:System.Collections.Generic.List%601>します。  
  
   
  
## Examples  
 次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.IndexOf%2A>メソッド。 A<xref:System.Collections.Generic.List%601>の文字列が作成されるインデックス位置 0 と 5 のインデックスの場所に 2 回、表示される 1 つのエントリを使用します。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%29>メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス 3 の場所で始まるリストとリストの末尾に至ると、文字列の 2 つ目の項目を検索します。 最後に、<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>は 2 つのインデックス位置にある先頭の 2 つのエントリの範囲を検索するメソッドのオーバー ロードが使用されます。 その範囲内で検索文字列のインスタンスがないため、-1 を返します。  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * int -&gt; int" Usage="list.IndexOf (item, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は正しい値です。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスから始まり、指定した要素数が含まれる要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、<paramref name="index" /> から始まり、要素数が <paramref name="count" /> 個の要素範囲の中で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>転送を開始位置として検索が`index`で終わる`index`plus`count`から 1 を引いた場合`count`が 0 より大きい。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は`count`します。  
  
   
  
## Examples  
 次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.IndexOf%2A>メソッド。 A<xref:System.Collections.Generic.List%601>の文字列が作成されるインデックス位置 0 と 5 のインデックスの場所に 2 回、表示される 1 つのエントリを使用します。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%29>メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス 3 の場所で始まるリストとリストの末尾に至ると、文字列の 2 つ目の項目を検索します。 最後に、<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>は 2 つのインデックス位置にある先頭の 2 つのエントリの範囲を検索するメソッドのオーバー ロードが使用されます。 その範囲内で検索文字列のインスタンスがないため、-1 を返します。  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。  または、<paramref name="count" /> が 0 未満です。  または、<paramref name="index" /> および <paramref name="count" /> で、<see cref="T:System.Collections.Generic.List`1" /> の有効なセクションが指定されていません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; unit&#xA;override this.Insert : int * 'T -&gt; unit" Usage="list.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <c>item</c> を挿入する位置の、0 から始まるインデックス。</param>
        <param name="item">挿入するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601> 受け入れる`null`参照の有効な値の型し、重複する要素を使用します。  
  
 場合<xref:System.Collections.Generic.List%601.Count%2A>既に等しい<xref:System.Collections.Generic.List%601.Capacity%2A>の容量、<xref:System.Collections.Generic.List%601>は内部の配列を自動的に再割り当てによって向上し、新しい要素を追加する前に、既存の要素が新しい配列にコピーされます。  
  
 場合`index`と等しい<xref:System.Collections.Generic.List%601.Count%2A>、`item`の末尾に追加されます<xref:System.Collections.Generic.List%601>します。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<xref:System.Collections.Generic.List%601>します。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 次の例で、<xref:System.Collections.Generic.List%601.Insert%2A>メソッドは、さまざまな他のプロパティおよびメソッドと共に、<xref:System.Collections.Generic.List%601>ジェネリック クラスです。 リストが作成されると、要素が追加されます。 <xref:System.Collections.Generic.List%601.Insert%2A>リストの中央に項目を挿入するメソッドを使用します。 項目を使用して、後で削除が重複するは、挿入、<xref:System.Collections.Generic.List%601.Remove%2A>メソッド。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  または、<paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> を超えています。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public void InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertRange (index As Integer, collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * seq&lt;'T&gt; -&gt; unit" Usage="list.InsertRange (index, collection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">新しい要素が挿入される位置の 0 から始まるインデックス。</param>
        <param name="collection">
          <see cref="T:System.Collections.Generic.List`1" /> に要素を挿入するコレクション。 コレクション自体を <see langword="null" /> にすることはできませんが、型 <c>T</c> が参照型の場合、コレクションに格納する要素は <see langword="null" /> であってもかまいません。</param>
        <summary>コレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601> 受け入れる`null`参照の有効な値の型し、重複する要素を使用します。  
  
 場合、新しい<xref:System.Collections.Generic.List%601.Count%2A>(現在<xref:System.Collections.Generic.List%601.Count%2A>さらに、コレクションのサイズ) より大きくなります<xref:System.Collections.Generic.List%601.Capacity%2A>、容量、<xref:System.Collections.Generic.List%601>を新しい要素を対応するために内部の配列を自動的に再割り当てすることで、既存の要素は、新しい要素が追加される前に、新しい配列にコピーされます。  
  
 場合`index`と等しい<xref:System.Collections.Generic.List%601.Count%2A>の末尾に要素が追加されます<xref:System.Collections.Generic.List%601>します。  
  
 コレクション内の要素の順序を保持、<xref:System.Collections.Generic.List%601>します。  
  
 このメソッドは O (*n* * *m*) 操作、場所*n*が追加される要素の数と*m* は<xref:System.Collections.Generic.List%601.Count%2A>.  
  
   
  
## Examples  
 次の例で<xref:System.Collections.Generic.List%601.InsertRange%2A>メソッドとその他の方法は、さまざまな、<xref:System.Collections.Generic.List%601>範囲で動作するクラス。 一覧が作成されており、いくつか平和恐竜の名前を設定した後、<xref:System.Collections.Generic.List%601.InsertRange%2A>肉食事恐竜の 3 つのクリックの配列を 3 に、リストに挿入するメソッドを使用します。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collection" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  または、<paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> を超えています。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T with get, set" Usage="System.Collections.Generic.List&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
        <summary>指定したインデックスにある要素を取得または設定します。</summary>
        <value>指定したインデックス位置にある要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601> 受け入れる`null`参照の有効な値の型し、重複する要素を使用します。  
  
 このプロパティでは、`myCollection[index]` という構文を使用して、コレクション内の特定の要素にアクセスできます。  
  
 このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもします。  
  
   
  
## Examples  
 このセクションの例を示します、<xref:System.Collections.Generic.List%601.Item%2A>プロパティ (c# のインデクサー) と、その他のプロパティおよびのメソッドをさまざまな、<xref:System.Collections.Generic.List%601>ジェネリック クラスです。 一覧が表示された後に作成および設定を使用して、<xref:System.Collections.Generic.List%601.Add%2A>メソッド、要素が取得されを使用して表示、<xref:System.Collections.Generic.List%601.Item%2A>プロパティ。 (を使用する例については、<xref:System.Collections.Generic.List%601.Item%2A>リストの要素の値を設定するプロパティを参照してください<xref:System.Collections.Generic.List%601.AsReadOnly%2A>)。  
  
> [!NOTE]
>  Visual Basic、c#、および C++ すべてにアクセスするための構文がある、<xref:System.Collections.Generic.List%601.Item%2A>プロパティ名を使用しません。 代わりに、変数の格納先、<xref:System.Collections.Generic.List%601>配列の場合と同様に使用されます。  
  
 C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<xref:System.Collections.Generic.List%601.Item%2A>プロパティ。 Visual Basic は、<xref:System.Collections.Generic.List%601.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。  
  
 [!code-csharp[List`1_Class#2](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#2)]
 [!code-vb[List`1_Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#2)]  
[!code-csharp[List`1_Class#3](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#3)]
[!code-vb[List`1_Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  -または-  <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体またはその一部において、最後に値が出現した位置のインデックス番号 (0 から始まる) を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T -&gt; int" Usage="list.LastIndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最後に見つかったオブジェクトのインデックス (0 から始まる) を返します。</summary>
        <returns>
          <paramref name="item" /> が見つかった場合は、<see cref="T:System.Collections.Generic.List`1" /> 全体で最後に見つかった位置のインデックス番号 (0 から始まる)。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>後方の最後の要素から開始し、最初の要素の終了が検索されます。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.LastIndexOf%2A>メソッド。 A<xref:System.Collections.Generic.List%601>の文字列が作成されるインデックス位置 0 と 5 のインデックスの場所に 2 回、表示される 1 つのエントリを使用します。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>メソッドのオーバー ロードは、エンド全体の一覧を検索し、文字列の 2 つ目の項目を検索します。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> 3 のインデックスの場所で始まると、最初に見つかった文字列の一覧で見つかったため、リストの先頭に進むとの下位の一覧を検索するメソッド オーバー ロードを使用します。 最後に、<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス位置 4 から、逆方向に拡張して、4 つのエントリの範囲 (つまり、その検索 4、3、2、および 1 の場所にある項目の場合); 検索のインスタンスが存在しないために、この検索は-1 を返しますその範囲内の文字列。  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int -&gt; int" Usage="list.LastIndexOf (item, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="index">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、最初の要素から <paramref name="index" /> までの要素範囲内で <paramref name="item" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>で検索された旧バージョンと開始`index`と最初の要素で終了します。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、場所*n*の先頭から要素の数が、<xref:System.Collections.Generic.List%601>に`index`します。  
  
   
  
## Examples  
 次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.LastIndexOf%2A>メソッド。 A<xref:System.Collections.Generic.List%601>の文字列が作成されるインデックス位置 0 と 5 のインデックスの場所に 2 回、表示される 1 つのエントリを使用します。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>メソッドのオーバー ロードは、エンド全体の一覧を検索し、文字列の 2 つ目の項目を検索します。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> 3 のインデックスの場所で始まると、最初に見つかった文字列の一覧で見つかったため、リストの先頭に進むとの下位の一覧を検索するメソッド オーバー ロードを使用します。 最後に、<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス位置 4 から、逆方向に拡張して、4 つのエントリの範囲 (つまり、その検索 4、3、2、および 1 の場所にある項目の場合); 検索のインスタンスが存在しないために、この検索は-1 を返しますその範囲内の文字列。  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int * int -&gt; int" Usage="list.LastIndexOf (item, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="index">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、<paramref name="count" /> 個の要素が含まれ、<paramref name="index" /> の位置で終了する要素範囲の中で <paramref name="item" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.List%601>で検索された旧バージョンと開始`index`で終わる`index`マイナス`count`+ 1 場合、`count`が 0 より大きい。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は`count`します。  
  
   
  
## Examples  
 次の例では、3 つすべてのオーバー ロード、<xref:System.Collections.Generic.List%601.LastIndexOf%2A>メソッド。 A<xref:System.Collections.Generic.List%601>の文字列が作成されるインデックス位置 0 と 5 のインデックスの場所に 2 回、表示される 1 つのエントリを使用します。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>メソッドのオーバー ロードは、エンド全体の一覧を検索し、文字列の 2 つ目の項目を検索します。 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> 3 のインデックスの場所で始まると、最初に見つかった文字列の一覧で見つかったため、リストの先頭に進むとの下位の一覧を検索するメソッド オーバー ロードを使用します。 最後に、<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>メソッドのオーバー ロードを使用して検索インデックス位置 4 からして、逆方向の拡張の 4 つのエントリの範囲 (つまり、その検索 4、3、2、および 1 の場所にある項目の場合); 検索のインスタンスが存在しないために、この検索は-1 を返しますその範囲内の文字列。  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、<see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。  または、<paramref name="count" /> が 0 未満です。  または、<paramref name="index" /> および <paramref name="count" /> で、<see cref="T:System.Collections.Generic.List`1" /> の有効なセクションが指定されていません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(T item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T -&gt; bool&#xA;override this.Remove : 'T -&gt; bool" Usage="list.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> から削除するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>特定のオブジェクトが <see cref="T:System.Collections.Generic.List`1" /> 内にあるときに、最初に出現したものを削除します。</summary>
        <returns>
          <paramref name="item" /> が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<see langword="false" /> が <paramref name="item" /> に見つからなかった場合にも <see cref="T:System.Collections.Generic.List`1" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合型`T`実装、<xref:System.IEquatable%601>ジェネリック インターフェイスは、等値比較子は、 <xref:System.IEquatable%601.Equals%2A> ; そのインターフェイスのメソッド以外の場合の既定の等値比較子は<xref:System.Object.Equals%2A?displayProperty=nameWithType>します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<xref:System.Collections.Generic.List%601>します。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 次の例で<xref:System.Collections.Generic.List%601.Remove%2A>メソッド。 いくつかのプロパティとメソッドの<xref:System.Collections.Generic.List%601>ジェネリック クラスは追加、挿入、および一覧を検索するために使用します。 これらの操作の後に、一覧には、重複が含まれています。 <xref:System.Collections.Generic.List%601.Remove%2A>重複する項目の最初のインスタンスを削除するメソッドを使用し、内容が表示されます。 <xref:System.Collections.Generic.List%601.Remove%2A>メソッドは常に見つけた最初のインスタンスを削除します。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public int RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : Predicate&lt;'T&gt; -&gt; int" Usage="list.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">削除する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> から削除される要素の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、<xref:System.Predicate%601>デリゲート、および条件に一致する要素から削除、<xref:System.Collections.Generic.List%601>します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.RemoveAll%2A>メソッドおよび使用するその他のいくつかのメソッド、<xref:System.Predicate%601>汎用デリゲート。  
  
 A<xref:System.Collections.Generic.List%601>文字列の作成、"saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含むです。 この例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。  
  
 <xref:System.Collections.Generic.List%601.Find%2A>、 <xref:System.Collections.Generic.List%601.FindLast%2A>、および<xref:System.Collections.Generic.List%601.FindAll%2A>メソッドを使用して、検索述語メソッドを使用して、一覧を検索します。  
  
 <xref:System.Collections.Generic.List%601.RemoveAll%2A> "Saurus"で終わるすべてのエントリを削除するメソッドを使用します。 各要素を順番に渡す、最初からリストを走査する、`EndsWithSaurus`メソッド。 場合、要素が削除、`EndsWithSaurus`メソッドを返します。`true`します。  
  
> [!NOTE]
>  C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。 これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。  
  
 最後に、<xref:System.Collections.Generic.List%601.Exists%2A>メソッドでは、リストの"saurus"で終わる文字列がないことを確認します。  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="list.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する要素の 0 から始まるインデックス。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスにある要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出すと<xref:System.Collections.Generic.List%601.RemoveAt%2A>削除された項目を置換する項目を削除するには、一覧の残りの項目が付け直されます。 たとえば、インデックス 3 のアイテムを削除する場合は、4 のインデックス位置にある項目が 3 つの位置に移動されます。 さらに、リスト内の項目の数 (によって表される、<xref:System.Collections.Generic.List%601.Count%2A>プロパティ) が 1 ずつ減少します。  
  
 このメソッドは O (*n*) 操作、 *n*は (<xref:System.Collections.Generic.List%601.Count%2A> - `index`)。  
  
   
  
## Examples  
 次の例では、追加、削除、および内の単純なビジネス オブジェクトを挿入する方法、<xref:System.Collections.Generic.List%601>します。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  -または-  <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; unit" Usage="list.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">削除する要素の数を指定します。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> から要素の範囲を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 項目が削除のすべての要素を次に、<xref:System.Collections.Generic.List%601>値下げそのインデックスがある`count`。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.RemoveRange%2A>メソッドとその他の方法は、さまざまな、<xref:System.Collections.Generic.List%601>範囲で動作するクラス。 一覧が作成されており、変更した後、<xref:System.Collections.Generic.List%601.RemoveRange%2A>インデックス位置 2 から、一覧から 2 つの要素を削除するメソッドを使用します。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  または、<paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の要素の有効範囲を示していません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> またはその一部の要素の順序を反転させます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; unit" Usage="list.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体の要素の順序を反転させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して<xref:System.Array.Reverse%2A?displayProperty=nameWithType>要素の順序を逆にします。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例の両方のオーバー ロード、<xref:System.Collections.Generic.List%601.Reverse%2A>メソッド。 例は、作成、<xref:System.Collections.Generic.List%601>の文字列し、6 つの文字列を追加します。 <xref:System.Collections.Generic.List%601.Reverse> 、リストを反転させるメソッド オーバー ロードを使用し、<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29>要素 1 で始まると、4 つの要素を含む、リストの中央を反転させるメソッド オーバー ロードを使用します。  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.Reverse : int * int -&gt; unit" Usage="list.Reverse (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">反転させる範囲内にある要素の数。</param>
        <summary>指定した範囲の要素の順序を反転させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して<xref:System.Array.Reverse%2A?displayProperty=nameWithType>要素の順序を逆にします。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例の両方のオーバー ロード、<xref:System.Collections.Generic.List%601.Reverse%2A>メソッド。 例は、作成、<xref:System.Collections.Generic.List%601>の文字列し、6 つの文字列を追加します。 <xref:System.Collections.Generic.List%601.Reverse> 、リストを反転させるメソッド オーバー ロードを使用し、<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29>要素 1 で始まると、4 つの要素を含む、リストの中央を反転させるメソッド オーバー ロードを使用します。  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  または、<paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の要素の有効範囲を示していません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> またはその一部の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overloaded-method-syntax"></a>オーバー ロードされたメソッドの構文  
 <xref:System.Collections.Generic.List%601.Sort%2A>メソッドを使用すると、一覧で、オブジェクトの種類の既定の比較子と並べ替えまたは顧客の並べ替え方法を指定します。  
  
 [リスト\<T >。Sort()](xref:System.Collections.Generic.List`1.Sort*)リストに保持されているオブジェクトの種類の既定の比較子を使用してリスト全体の要素を並べ替えます。  
  
 [リスト\<T >。並べ替え M (比較\<T > の比較)](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29)指定した比較子を使用してリスト全体の要素を並べ替えます。  
  
 [リスト\<T >。並べ替え (IComparer\<T > 比較演算子)](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29)リスト全体を使用して、指定の要素を並べ替えます<xref:System.Comparison%601?displayProperty=nameWithType>します。  
  
 [List\<T>.Sort(Int32 index, Int32 count, IComparer\<T> comparer)](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29) Sorts the elements in a range of elements in list using the specified comparer.  
  
## <a name="parameters"></a>パラメーター  
  
|パラメーター|型|説明|  
|---------------|----------|-----------------|  
|`comparison`|<xref:System.Comparison%601>|要素を比較するときに使用するデリゲート メソッド|  
|比較演算子|<xref:System.Collections.Generic.IComparer%601>|<xref:System.Collections.Generic.IComparer%601>実装や、要素を比較するときに使用して、既定の比較子を使用する場合は null<xref:System.Collections.Generic.Comparer%601.Default>します。|  
|`index`|<xref:System.Int32>|並べ替える範囲の開始位置を示す 0 から始まるインデックス。|  
|`count`|<xref:System.Int32>|並べ替える範囲の長さ。|  
  
## <a name="exceptions"></a>例外  
  
|例外|条件|  
|---------------|---------------|  
|<xref:System.InvalidOperationException>|`comparer` 指定されていないまたは`null`、および既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>の実装を見つけることができません、<xref:System.IComparable%601?displayProperty=nameWithType>ジェネリック インターフェイスまたは<xref:System.IComparable?displayProperty=nameWithType>T 型のインターフェイス|  
|<xref:System.ArgumentNullException>|`comparison` は `null`です。|  
|<xref:System.ArgumentException>|実装`comparison`または`comparer`並べ替え中にエラーが発生しました。 たとえば、`comparison` は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。<br /><br /> - または -<br /><br /> `index` および `count` は <xref:System.Collections.Generic.List%601> において有効な範囲を指定していません。|  
|<xref:System.ArgumentOutOfRangeException>|`index` 0 未満または`count`が 0 未満です。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; unit" Usage="list.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定の比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、既定の比較子を使用して<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>型`T`リストの要素の順序を決定します。 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>プロパティ確認を入力するかどうか`T`実装、<xref:System.IComparable%601>ジェネリック インターフェイスと、使用可能な場合は、その実装を使用します。  ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`実装、<xref:System.IComparable>インターフェイス。  場合型`T`いずれかのインターフェイスを実装していません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー、<xref:System.InvalidOperationException>します。  
  
 このメソッドを使用して、<xref:System.Array.Sort%2A?displayProperty=nameWithType>メソッドで、内省の並べ替えを次のように適用されます。  
  
-   パーティションのサイズが 16 個未満の要素の場合は、挿入並べ替えアルゴリズムを使用します。  
  
-   パーティションの数が 2 つのログを超えた場合*n*ここで、 *n*範囲、Heapsort アルゴリズムを使用して、入力配列の。  
  
-   それ以外の場合、クイック ソート アルゴリズムを使用します。  
  
 この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。 これに対し、安定した並べ替えが等しい要素の順序が保持されます。  
  
 平均すると、このメソッドは、O (*n*ログ*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>最悪の場合は、これは、O (*n* <sup>2</sup>) 操作。  
  
   
  
## Examples  
 次の例では、いくつかの名前、`List<String>`並べ替えの順序で一覧を呼び出すオブジェクトを表示、<xref:System.Collections.Generic.List%601.Sort%2A>メソッド、並べ替えられたリストを表示します。  
  
 [!code-csharp[System.Collections.Generic.List.Sort#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/Sort1.cs#2)]
 [!code-vb[System.Collections.Generic.List.Sort#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/Sort1.vb#2)]  
  
 次のコード例、<xref:System.Collections.Generic.List%601.Sort>と<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>単純なビジネス オブジェクトでメソッドのオーバー ロードします。 呼び出す、<xref:System.Collections.Generic.List%601.Sort>メソッドの結果、一部の種類に既定の比較子を使用し、<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>メソッドは、匿名メソッドを使用して実装されます。  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 次の例で、<xref:System.Collections.Generic.List%601.Sort>メソッドのオーバー ロードと<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>メソッドのオーバー ロードします。 A<xref:System.Collections.Generic.List%601>文字列の任意の順序で、4 つの文字列を設定して作成されます。 一覧が表示され、並べ替え、もう一度表示されます。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>メソッドのオーバー ロードは、一覧にない 2 つの文字列を検索するために使用し、<xref:System.Collections.Generic.List%601.Insert%2A>に挿入するメソッドを使用します。 戻り値、<xref:System.Collections.Generic.List%601.BinarySearch%2A>メソッドは、文字列は、一覧にないため、各ケースで負の値。 ビットごとの補数を取得 (、~ 演算子が c# および Visual C、 `Xor` -1 Visual Basic で) この負の数値の生成は、この場所にして、検索文字列より大きい一覧の最初の要素のインデックスには、並べ替えが保持されます順序。 2 番目の検索文字列は、カーソルの位置がリストの末尾に、一覧で、任意の要素を超えています。  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 <paramref name="T" /> の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="list.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
        <summary>指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`comparer`が提供されるの要素、<xref:System.Collections.Generic.List%601>指定して並べ替える<xref:System.Collections.Generic.IComparer%601>実装します。  
  
 場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`実装、<xref:System.IComparable%601>ジェネリック インターフェイスと使用可能な場合は、その実装を使用します。  ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`実装、<xref:System.IComparable>インターフェイス。  場合型`T`いずれかのインターフェイスを実装していません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー、<xref:System.InvalidOperationException>します。  
  
 このメソッドを使用して、<xref:System.Array.Sort%2A?displayProperty=nameWithType>メソッドで、内省の並べ替えを次のように適用されます。  
  
-   パーティションのサイズが 16 個未満の要素の場合は、挿入並べ替えアルゴリズムを使用します。  
  
-   パーティションの数が 2 つのログを超えた場合*n*ここで、 *n*範囲、Heapsort アルゴリズムを使用して、入力配列の。  
  
-   それ以外の場合、クイック ソート アルゴリズムを使用します。  
  
 この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。 これに対し、安定した並べ替えが等しい要素の順序が保持されます。  
  
 平均すると、このメソッドは、O (*n*ログ*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>最悪の場合は、これは、O (*n* <sup>2</sup>) 操作。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードと<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードします。  
  
 例では、定義を実装する、DinoCompare という名前の文字列の代替の比較子、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual C で) ジェネリック インターフェイス。 比較子が次のように動作: 比較対照値があるテスト最初に、 `null`、null 参照が null でない未満として扱われます。 次に、文字列の長さを比較してより長い文字列が大きいと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較が使用されます。  
  
 A<xref:System.Collections.Generic.List%601>文字列の任意の順序で、4 つの文字列を設定して作成されます。 一覧が表示されます、代替の比較子を使用して並べ替えられ、表示されているもう一度。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードが複数の文字列の一覧で採用していない別の比較子を検索に使用されるからです。 <xref:System.Collections.Generic.List%601.Insert%2A>文字列を挿入するメソッドを使用します。 という名前の関数でこれら 2 つのメソッドにある`SearchAndInsert`、ビットごとの補数をコードと共に (、~ 演算子が c# および Visual C、 `Xor` Visual Basic で-1) によって返される負の数値の<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>のインデックスとして使用新しい文字列を挿入します。  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparison As Comparison(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;'T&gt; -&gt; unit" Usage="list.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</param>
        <summary>指定した <see cref="T:System.Comparison`1" /> を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`comparison`が提供されるの要素、<xref:System.Collections.Generic.List%601>デリゲートによって表されるメソッドを使用して並べ替えられます。  
  
 場合`comparison`は`null`、<xref:System.ArgumentNullException>がスローされます。  
  
 このメソッドを使用して<xref:System.Array.Sort%2A?displayProperty=nameWithType>、内省の並べ替えを適用すると、次のようにします。  
  
-   挿入の並べ替えアルゴリズムを使用してパーティションのサイズが 16 個未満の要素の場合は、  
  
-   パーティションの数が 2 つのログを超えた場合*n*ここで、 *n*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。  
  
-   それ以外の場合、クイック ソート アルゴリズムを使用します。  
  
 この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。 これに対し、安定した並べ替えが等しい要素の順序が保持されます。  
  
 平均すると、このメソッドは、O (*n*ログ*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>最悪の場合は、これは、O (*n* <sup>2</sup>) 操作。  
  
   
  
## Examples  
 次のコード例、<xref:System.Collections.Generic.List%601.Sort%2A>と<xref:System.Collections.Generic.List%601.Sort%2A>単純なビジネス オブジェクトでメソッドのオーバー ロードします。 呼び出す、<xref:System.Collections.Generic.List%601.Sort%2A>メソッドの結果、一部の種類に既定の比較子を使用し、<xref:System.Collections.Generic.List%601.Sort%2A>メソッドは匿名メソッドを使用して実装されます。  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>メソッドのオーバー ロードします。  
  
 例では、という名前の文字列の代替の比較メソッドを定義する`CompareDinosByLength`します。 このメソッドは次のように機能: 比較対照値があるテスト最初に、 `null`、null 参照が null でない未満として扱われます。 次に、文字列の長さを比較してより長い文字列が大きいと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較が使用されます。  
  
 A<xref:System.Collections.Generic.List%601>文字列の任意の順序で、4 つの文字列を設定して作成されます。 一覧には、空の文字列と null 参照も含まれています。 一覧を表示すると、並べ替えを使用して、<xref:System.Comparison%601>を表すジェネリック デリゲート、`CompareDinosByLength`メソッドを再び表示されます。  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comparison" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="comparison" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparison" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</exception>
        <altmember cref="T:System.Comparison`1" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (index As Integer, count As Integer, comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="list.Sort (index, count, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">並べ替える範囲の長さ。</param>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
        <summary>指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`comparer`が提供されるの要素、<xref:System.Collections.Generic.List%601>指定して並べ替える<xref:System.Collections.Generic.IComparer%601>実装します。  
  
 場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`実装、<xref:System.IComparable%601>ジェネリック インターフェイスと使用可能な場合は、その実装を使用します。  ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>チェックを入力するかどうか`T`実装、<xref:System.IComparable>インターフェイス。  場合型`T`いずれかのインターフェイスを実装していません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>スロー、<xref:System.InvalidOperationException>します。  
  
 このメソッドを使用して<xref:System.Array.Sort%2A?displayProperty=nameWithType>、内省の並べ替えを適用すると、次のようにします。  
  
-   挿入の並べ替えアルゴリズムを使用してパーティションのサイズが 16 個未満の要素の場合は、  
  
-   パーティションの数が 2 つのログを超えた場合*n*ここで、 *n*範囲は、使用して、入力配列の[Heapsort](https://en.wikipedia.org/wiki/Heapsort)アルゴリズム。  
  
-   それ以外の場合、クイック ソート アルゴリズムを使用します。  
  
 この実装は、不安定な並べ替えを実行します。2 つの要素が等しい場合は、その順序は保持されない可能性があります。 これに対し、安定した並べ替えが等しい要素の順序が保持されます。  
  
 平均すると、このメソッドは、O (*n*ログ*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>最悪の場合は、これは、O (*n* <sup>2</sup>) 操作。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードと<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードします。  
  
 例では、定義を実装する、DinoCompare という名前の文字列の代替の比較子、 `IComparer<string>` (`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual C で) ジェネリック インターフェイス。 比較子が次のように動作: 比較対照値があるテスト最初に、 `null`、null 参照が null でない未満として扱われます。 次に、文字列の長さを比較してより長い文字列が大きいと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較が使用されます。  
  
 A<xref:System.Collections.Generic.List%601>文字列の 5 つの herbivorous 恐竜やから恐竜が 3 つの名前を設定して作成します。 内で 2 つのグループごとに、名前は任意の特定の並べ替え順序でないですします。 一覧が表示されます、恐竜の範囲は、代替の比較子を使用して並べ替えられて一覧が再び表示されます。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> "Brachiosaurus"恐竜の範囲のみを検索するメソッドのオーバー ロードが使用されるからです。 文字列が見つからないとビットごとの補数 (、~ 演算子が c# および Visual C、 `Xor` Visual Basic で-1) によって返される負の数値の<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドが新しい文字列を挿入するためのインデックスとして使用します。  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  または、<paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を指定していません。  または、<paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.List&lt;'T&gt;.System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。  
  
 読み取り専用のコレクション、コレクションの変更を防止するラッパー コレクションそのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理する列挙子を返します。</summary>
        <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual basic) 列挙子の複雑さが隠されています。 したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>プロパティが定義されていません。 そのため、呼び出す必要がある、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素を列挙子を進める<xref:System.Collections.Generic.IEnumerator%601.Current%2A>します。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>プロパティまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>が呼び出されます。 <xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。  
  
 場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`します。 この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。 最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>が定義されていません。 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。  
  
 コレクションが変更されない限り、列挙子は有効です。 無効になり、次の呼び出しは変更を追加するなど、コレクション変更、または要素を削除するには、列挙子が不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>します。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。 列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。  
  
 このメソッドは、o (1) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="arrayIndex">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</param>
        <summary>
          <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。コピーは特定の <see cref="T:System.Array" /> のインデックスから開始されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  場合、ソースの種類<xref:System.Collections.ICollection>変換先の型に自動的にキャストすることはできません`array`の非ジェネリック実装<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>スロー<xref:System.InvalidCastException>ジェネリック実装スローする一方、<xref:System.ArgumentException>します。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="arrayIndex" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> が多次元です。  または、<paramref name="array" /> に 0 から始まるインデックス番号がありません。  または、コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。  または、コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.List&lt;'T&gt;.System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。  書き込みアクセスでの列挙の競合、まれなケースをすべての列挙中にコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> アクセスを同期するために使用できるオブジェクトを返します、<xref:System.Collections.ICollection>します。 同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.List&lt;'T&gt;.System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクト。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。  列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> アクセスを同期するために使用できるオブジェクトを返します、<xref:System.Collections.ICollection>します。 同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。 次のコードは、使用、 <xref:System.Collections.ICollection.SyncRoot%2A> c#、C++、および Visual Basic のプロパティ。  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot)   
{  
    // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
    ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try   
{  
    Monitor::Enter(ic->SyncRoot);  
    // Access the collection.  
}  
finally   
{  
    Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理する列挙子を返します。</summary>
        <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual basic) 列挙子の複雑さが隠されています。 したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 <xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。  この位置では、<xref:System.Collections.IEnumerator.Current%2A>プロパティが定義されていません。 そのため、呼び出す必要がある、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素を列挙子を進める<xref:System.Collections.IEnumerator.Current%2A>します。  
  
 <xref:System.Collections.IEnumerator.Current%2A>プロパティは、いずれかまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>が呼び出されます。 <xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。  
  
 場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`します。 この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。 最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。 <xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。  
  
 コレクションが変更されない限り、列挙子は有効です。 無効になり、次の呼び出しは変更を追加するなど、コレクション変更、または要素を削除するには、列挙子が不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>します。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。  列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 名前空間のコレクションの既定の実装は同期されません。  
  
 このメソッドは、o (1) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</param>
        <summary>
          <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
        <returns>新しい要素が挿入された位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合<xref:System.Collections.Generic.List%601.Count%2A>がより小さい<xref:System.Collections.Generic.List%601.Capacity%2A>、このメソッドは o (1) 操作。 このメソッドになります、O が新しい要素を格納するために、容量が必要な場合 (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ item) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.IList" />。</param>
        <summary>
          <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ item) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.IList" /> 内で検索するオブジェクト。</param>
        <summary>
          <see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</summary>
        <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ item) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <c>item</c> を挿入する位置の、0 から始まるインデックス。</param>
        <param name="item">
          <see cref="T:System.Collections.IList" /> に挿入するオブジェクト。</param>
        <summary>指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `index` が <xref:System.Collections.IList> 内の項目数に等しければ、`item` が末尾に追加されます。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.List&lt;'T&gt;.System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。  
  
 固定サイズのコレクションの追加と要素の削除を防止するラッパーは、コレクションは、します。そのため、追加または削除、要素を含む、基になるコレクションに変更された場合、固定サイズ コレクションそれらの変更が反映されます。  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.List&lt;'T&gt;.System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。  
  
 読み取り専用のコレクション、コレクションの変更を防止するラッパー コレクションそのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.List&lt;'T&gt;.System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
        <summary>指定したインデックスにある要素を取得または設定します。</summary>
        <value>指定したインデックス位置にある要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C# 言語を使用して、[この](~/docs/csharp/language-reference/keywords/this.md)キーワードを実装する代わりに、インデクサーの定義、<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A>プロパティ。 Visual Basic は、<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。  
  
 このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定されていて、<paramref name="value" /> が <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (item As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ item) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.IList" /> から削除するオブジェクト。</param>
        <summary>特定のオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="list.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> の要素を新しい配列にコピーします。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> の要素のコピーを格納する配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素のコピーを使用して<xref:System.Array.Copy%2A?displayProperty=nameWithType>、これは O (*n*) 操作、場所*n*は<xref:System.Collections.Generic.List%601.Count%2A>。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.ToArray%2A>メソッドとその他の方法、<xref:System.Collections.Generic.List%601>範囲で動作するクラス。 この例の最後に、<xref:System.Collections.Generic.List%601.GetRange%2A>メソッドを使用して、インデックス位置 2 以降、リストから 3 つの項目を取得します。 <xref:System.Collections.Generic.List%601.ToArray%2A>メソッドは、結果として<xref:System.Collections.Generic.List%601>、3 つの要素の配列を作成します。 配列の要素が表示されます。  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="list.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 内にある実際の要素数がしきい値未満の場合は、容量をその数に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、コレクションのメモリ オーバーヘッドを最小要素がコレクションに追加されない場合に使用できます。 再割り当てすることと、大規模なコピーのコスト<xref:System.Collections.Generic.List%601>は適さない、ただし、そのため、<xref:System.Collections.Generic.List%601.TrimExcess%2A>一覧は、「容量の 90% を超える場合メソッドは何も行いません。 比較的小規模の向上のための大規模な再割り当てコストの発生を回避できます。  
  
> [!NOTE]
>  現在のしきい値の 90% は、将来のリリースで変更があります。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
 リセットする、<xref:System.Collections.Generic.List%601>を初期状態を呼び出し、<xref:System.Collections.Generic.List%601.Clear%2A>メソッドを呼び出す前に、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッド。 空のトリミング<xref:System.Collections.Generic.List%601>の容量設定、<xref:System.Collections.Generic.List%601>を既定の容量。  
  
 使用して、容量を設定することも、<xref:System.Collections.Generic.List%601.Capacity%2A>プロパティ。  
  
   
  
## Examples  
 次の例では、容量と数を確認する方法、<xref:System.Collections.Generic.List%601>する単純なビジネス オブジェクトを含むし、を使用して、<xref:System.Collections.Generic.List%601.TrimExcess%2A>余分な容量を削除する方法。  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 次の例で、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッド。 いくつかのプロパティとメソッドの<xref:System.Collections.Generic.List%601>追加、挿入、および文字列の一覧から項目を削除するクラスを使用します。 次に、<xref:System.Collections.Generic.List%601.TrimExcess%2A>メソッドを使用して、数と一致する容量を減らすと<xref:System.Collections.Generic.List%601.Capacity%2A>と<xref:System.Collections.Generic.List%601.Count%2A>プロパティが表示されます。 未使用の容量が合計容量の 10% 未満である場合、リストはしないがサイズ変更されました。 最後に、一覧の内容が消去されます。  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.Clear" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TrueForAll">
      <MemberSignature Language="C#" Value="public bool TrueForAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrueForAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrueForAll (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrueForAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.TrueForAll : Predicate&lt;'T&gt; -&gt; bool" Usage="list.TrueForAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 内のすべての要素が、指定した述語によって定義される条件に一致するかどうかを調べます。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> 内のすべての要素が、指定した述語によって定義される条件に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 リストに要素がない場合、戻り値は <see langword="true" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Predicate%601>を返すメソッドにデリゲート`true`デリゲートで定義されている条件に一致するオブジェクトが渡された場合。  現在の要素<xref:System.Collections.Generic.List%601>に個別に渡される、 <xref:System.Predicate%601> 、デリゲートが戻るときに、デリゲートと処理が停止`false`任意の要素。 要素が順番に処理され、すべての呼び出しは 1 つのスレッドで行われます。  
  
 このメソッドは O (*n*) 操作、 *n*は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## Examples  
 次の例で、<xref:System.Collections.Generic.List%601.TrueForAll%2A>メソッドとその他のいくつかのメソッドを使用する<xref:System.Predicate%601>汎用デリゲート。  
  
 A<xref:System.Collections.Generic.List%601>文字列の作成、"saurus"で終わる (位置 1 と 5) での 2 つの 8 恐竜の名前を含むです。 この例では、という名前の検索述語メソッドも定義します`EndsWithSaurus`、文字列パラメーターを受け入れるし、ブール値を返しますが、入力文字列では"かどうかを示すを値します。  
  
 <xref:System.Collections.Generic.List%601.TrueForAll%2A>メソッドは、各要素を順番に渡す、最初からリストを走査、`EndsWithSaurus`メソッド。 検索を停止するときに、`EndsWithSaurus`メソッドを返します。`false`します。  
  
> [!NOTE]
>  C# および Visual Basic の場合でない作成に必要な`Predicate<string>`デリゲート (`Predicate(Of String)` Visual Basic で) 明示的にします。 これらの言語では、コンテキストから適切なデリゲート推測し、自動的に作成します。  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" />です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
  </Members>
</Type>